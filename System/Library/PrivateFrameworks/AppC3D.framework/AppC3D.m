uint64_t sub_207C7CB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

uint64_t sub_207C7CE00(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = &a3[a4];
  v6 = (__int128 *)&a3[2 * a4];
  v7 = &v5[2 * a4];
  v8 = &v6[a4];
  v9 = &v7[2 * a4];
  v10 = &v8[a4];
  v11 = &v9[2 * a4];
  v12 = (a4 << 6) - 8 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        *(_QWORD *)&v14 = *a3;
        *(_QWORD *)&v15 = a3[1];
        a3 += 2;
        *((_QWORD *)&v14 + 1) = *v5;
        *((_QWORD *)&v15 + 1) = v5[1];
        v5 += 2;
        v16 = *v6;
        *(_QWORD *)&v17 = *((_QWORD *)v6++ + 1);
        *((_QWORD *)&v17 + 1) = v7[1];
        v7 += 2;
        v18 = *v8;
        *(_QWORD *)&v19 = *((_QWORD *)v8++ + 1);
        *((_QWORD *)&v19 + 1) = v9[1];
        v9 += 2;
        v20 = *v10;
        *(_QWORD *)&v21 = *((_QWORD *)v10++ + 1);
        *((_QWORD *)&v21 + 1) = v11[1];
        v11 += 2;
        *a5 = v14;
        a5[1] = v16;
        v22 = a5 + 2;
        *v22 = v18;
        v22[1] = v20;
        v22 += 2;
        *v22 = v15;
        v22[1] = v17;
        v22 += 2;
        *v22 = v19;
        v22[1] = v21;
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      *(_QWORD *)&v24 = *a3++;
      *((_QWORD *)&v24 + 1) = *v5++;
      v25 = *v6;
      v6 = (__int128 *)((char *)v6 + 8);
      ++v7;
      v26 = *v8;
      v8 = (__int128 *)((char *)v8 + 8);
      ++v9;
      v27 = *v10;
      v10 = (__int128 *)((char *)v10 + 8);
      ++v11;
      *a5 = v24;
      a5[1] = v25;
      a5[2] = v26;
      a5[3] = v27;
      a5 += 4;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (_QWORD *)((char *)a3 + v12);
    v5 = (_QWORD *)((char *)v5 + v12);
    v6 = (__int128 *)((char *)v6 + v12);
    v7 = (_QWORD *)((char *)v7 + v12);
    v8 = (__int128 *)((char *)v8 + v12);
    v9 = (_QWORD *)((char *)v9 + v12);
    v10 = (__int128 *)((char *)v10 + v12);
    v11 = (_QWORD *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

_OWORD *sub_207C7CEE0(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *sub_207C7D030(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_207C7D130(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C7D7A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C7DD90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C7E490(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

void sub_207C7EB28(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v17 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v17 = 2;
        v23 = __X;
        v24 = __N;
        do
        {
          v25 = *v23 * v11;
          *v23 = v25;
          v23[a6] = (float)(v23[a6] * v11) - (float)(v25 * v22);
          ++v23;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v17 = 1;
      cblas_sscal(__N, a7, __X, 1);
      v11 = a7;
    }
    else
    {
      v17 = 0;
    }
  }
  else if (__N < 1)
  {
    v17 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = 3;
    v18 = __X;
    v19 = __N;
    do
    {
      v20 = *v18 * v11;
      *v18 = v20;
      v21 = (float)(v18[a6] * v11) - (float)(v20 * v14);
      v18[a6] = v21;
      v18[2 * a6] = -(float)((float)((float)(v16 * v21) + (float)(*v18 * v15)) - (float)(v18[2 * a6] * v11));
      ++v18;
      --v19;
    }
    while (v19);
  }
  if (v17 < a2)
  {
    v26 = 8 * a4;
    v27 = 8 * a6;
    v28 = v17;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x2_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29];
          v32 = 0uLL;
          if ((v17 & 1) != 0)
          {
            v38 = vmlaq_n_f32((float32x4_t)0, *v31, COERCE_FLOAT(*(_OWORD *)v30->f32));
            v35 = vmlaq_lane_f32((float32x4_t)0, *v31, *v30, 1);
            v34 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 2);
            v33 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 3);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v36 = v28 - 1;
            v37 = (float32x2_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v39 = 0uLL;
              v40 = 0uLL;
              v41 = 0uLL;
              do
              {
                v38 = vmlaq_n_f32(v38, *v31, COERCE_FLOAT(*(_OWORD *)v37->f32));
                v35 = vmlaq_lane_f32(v35, *v31, *v37, 1);
                v34 = vmlaq_laneq_f32(v34, *v31, *(float32x4_t *)v37->f32, 2);
                v33 = vmlaq_laneq_f32(v33, *v31, *(float32x4_t *)v37->f32, 3);
                v42 = *(float32x4_t *)&v37->f32[a4];
                v43 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v39 = vmlaq_n_f32(v39, v43, v42.f32[0]);
                v40 = vmlaq_lane_f32(v40, v43, *(float32x2_t *)v42.f32, 1);
                v41 = vmlaq_laneq_f32(v41, v43, v42, 2);
                v32 = vmlaq_laneq_f32(v32, v43, v42, 3);
                v37 = (float32x2_t *)((char *)v37 + v26);
                v31 = (float32x4_t *)((char *)v31 + v27);
                v36 -= 2;
              }
              while (v36);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v28;
            v37 = (float32x2_t *)(a3 + 4 * v28);
            v38 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v41 = 0uLL;
          v40 = 0uLL;
          v39 = 0uLL;
LABEL_27:
          v44 = vaddq_f32(v39, v38);
          v45 = vaddq_f32(v40, v35);
          v46 = vaddq_f32(v32, v33);
          v47 = vmulq_n_f32(*v31, v11);
          v48 = vsubq_f32(v47, v44);
          v49 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v11), v45);
          v45.i32[0] = v37->i32[1];
          v47.i32[0] = v37[1].i32[0];
          v50 = vmlsq_lane_f32(v49, v48, *(float32x2_t *)v45.f32, 0);
          v51 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v11), vaddq_f32(v41, v34)), v48, *(float32x2_t *)v47.f32, 0);
          v45.i32[0] = v37[1].i32[1];
          v52 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v11), v46), v48, *(float32x2_t *)v45.f32, 0);
          v53 = (char *)v37 + 4 * a4;
          v45.i32[0] = *((_DWORD *)v53 + 2);
          v47.i32[0] = *((_DWORD *)v53 + 3);
          v54 = vmlsq_lane_f32(v51, v50, *(float32x2_t *)v45.f32, 0);
          v45.i32[0] = *(_DWORD *)&v53[4 * a4 + 12];
          *v31 = v48;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v50;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v54;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(vmlsq_lane_f32(v52, v50, *(float32x2_t *)v47.f32, 0), v54, *(float32x2_t *)v45.f32, 0);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a2)
        return;
    }
    v55 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v56 = &__X[v29];
      v57 = 0uLL;
      if ((v17 & 1) != 0)
      {
        v58 = vmlaq_n_f32((float32x4_t)0, *v55, *v56);
        v56 += a6;
        v59 = v28 - 1;
        v60 = (float32x4_t *)((char *)v55 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v58 = vmlaq_n_f32(v58, *v60, *v56);
            v57 = vmlaq_n_f32(v57, *(float32x4_t *)((char *)v60 + 4 * a4), v56[a6]);
            v60 = (float32x4_t *)((char *)v60 + v26);
            v56 = (float *)((char *)v56 + v27);
            v59 -= 2;
          }
          while (v59);
        }
      }
      else
      {
        v58 = 0uLL;
        v59 = v28;
        v60 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      v61 = vaddq_f32(v57, v58);
      v62 = -(float)(v61.f32[0] - (float)(*v56 * v11));
      v63 = (float)-(float)(v61.f32[1] - (float)(v56[a6] * v11)) - (float)(v62 * v60->f32[1]);
      v64 = (float)-(float)(v61.f32[2] - (float)(v56[2 * a6] * v11)) - (float)(v62 * v60->f32[2]);
      v61.f32[0] = (float)-(float)(v61.f32[3] - (float)(v56[3 * a6] * v11)) - (float)(v62 * v60->f32[3]);
      v65 = &v60->f32[a4];
      v66 = v64 - (float)(v63 * v65[2]);
      v61.f32[0] = (float)(v61.f32[0] - (float)(v63 * v65[3])) - (float)(v66 * v65[a4 + 3]);
      *v56 = v62;
      v56[a6] = v63;
      v56[2 * a6] = v66;
      v56[3 * a6] = v61.f32[0];
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void sub_207C7EF10(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  char *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float *v69;
  float32x4_t v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  float v79;
  float v80;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v20 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v20 = 2;
        v28 = __X;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = v27 * *v28;
          *v28 = v31;
          v28[a6] = v30 * (float)((float)(v28[a6] * v11) - (float)(v31 * v26));
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v20 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v11 = a7;
    }
    else
    {
      v20 = 0;
    }
  }
  else if (__N < 1)
  {
    v20 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = 3;
    v21 = __X;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *v21;
      *v21 = v24;
      v25 = v19 * (float)((float)(v21[a6] * v11) - (float)(v24 * v15));
      v21[a6] = v25;
      v21[2 * a6] = v23
                  * (float)-(float)((float)((float)(v18 * v25) + (float)(*v21 * v14)) - (float)(v21[2 * a6] * v11));
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v20 < a2)
  {
    v32 = a4 + 1;
    v33 = 8 * a4;
    v34 = 8 * a6;
    v35 = v20;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v32];
      v37 = 1.0 / a3[v32 + v35 * v32];
      v38 = 1.0 / a3[(v35 + 2) * v32];
      v39 = 1.0 / a3[(v35 + 3) * v32];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x2_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40];
          v43 = 0uLL;
          if ((v20 & 1) != 0)
          {
            v49 = vmlaq_n_f32((float32x4_t)0, *v42, COERCE_FLOAT(*(_OWORD *)v41->f32));
            v46 = vmlaq_lane_f32((float32x4_t)0, *v42, *v41, 1);
            v45 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 2);
            v44 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 3);
            v42 = (float32x4_t *)((char *)v42 + 4 * a6);
            v47 = v35 - 1;
            v48 = (float32x2_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              do
              {
                v49 = vmlaq_n_f32(v49, *v42, COERCE_FLOAT(*(_OWORD *)v48->f32));
                v46 = vmlaq_lane_f32(v46, *v42, *v48, 1);
                v45 = vmlaq_laneq_f32(v45, *v42, *(float32x4_t *)v48->f32, 2);
                v44 = vmlaq_laneq_f32(v44, *v42, *(float32x4_t *)v48->f32, 3);
                v53 = *(float32x4_t *)&v48->f32[a4];
                v54 = *(float32x4_t *)((char *)v42 + 4 * a6);
                v50 = vmlaq_n_f32(v50, v54, v53.f32[0]);
                v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)v53.f32, 1);
                v52 = vmlaq_laneq_f32(v52, v54, v53, 2);
                v43 = vmlaq_laneq_f32(v43, v54, v53, 3);
                v48 = (float32x2_t *)((char *)v48 + v33);
                v42 = (float32x4_t *)((char *)v42 + v34);
                v47 -= 2;
              }
              while (v47);
              goto LABEL_27;
            }
          }
          else
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = v35;
            v48 = (float32x2_t *)&a3[v35];
            v49 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v52 = 0uLL;
          v51 = 0uLL;
          v50 = 0uLL;
LABEL_27:
          v55 = vaddq_f32(v50, v49);
          v56 = vaddq_f32(v43, v44);
          v57 = vmulq_n_f32(*(float32x4_t *)((char *)v42 + 8 * a6), v11);
          v58 = vsubq_f32(vmulq_n_f32(*v42, v11), v55);
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 4 * a6), v11), vaddq_f32(v51, v46));
          v60 = vsubq_f32(v57, vaddq_f32(v52, v45));
          v61 = vmulq_n_f32(v58, v36);
          v58.i32[0] = v48->i32[1];
          v57.i32[0] = v48[1].i32[0];
          v62 = vmlsq_lane_f32(v59, v61, *(float32x2_t *)v58.f32, 0);
          v63 = vmlsq_lane_f32(v60, v61, *(float32x2_t *)v57.f32, 0);
          v58.i32[0] = v48[1].i32[1];
          v64 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 12 * a6), v11), v56), v61, *(float32x2_t *)v58.f32, 0);
          v65 = (char *)v48 + 4 * a4;
          v66 = vmulq_n_f32(v62, v37);
          v58.i32[0] = *((_DWORD *)v65 + 2);
          v57.i32[0] = *((_DWORD *)v65 + 3);
          v67 = vmulq_n_f32(vmlsq_lane_f32(v63, v66, *(float32x2_t *)v58.f32, 0), v38);
          v58.i32[0] = *(_DWORD *)&v65[4 * a4 + 12];
          *v42 = v61;
          *(float32x4_t *)((char *)v42 + 4 * a6) = v66;
          *(float32x4_t *)((char *)v42 + 8 * a6) = v67;
          *(float32x4_t *)((char *)v42 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v64, v66, *(float32x2_t *)v57.f32, 0), v67, *(float32x2_t *)v58.f32, 0), v39);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a2)
        return;
    }
    v68 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v69 = &__X[v40];
      v70 = 0uLL;
      if ((v20 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v68, *v69);
        v69 += a6;
        v71 = (float32x4_t *)((char *)v68 + 4 * a4);
        v72 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v73 = vmlaq_n_f32(v73, *v71, *v69);
            v70 = vmlaq_n_f32(v70, *(float32x4_t *)((char *)v71 + 4 * a4), v69[a6]);
            v69 = (float *)((char *)v69 + v34);
            v71 = (float32x4_t *)((char *)v71 + v33);
            v72 -= 2;
          }
          while (v72);
        }
      }
      else
      {
        v71 = (float32x4_t *)&a3[v35];
        v72 = v35;
        v73 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v74 = vaddq_f32(v73, v70);
      v75 = v36 * (float)-(float)(v74.f32[0] - (float)(*v69 * v11));
      v76 = (float)-(float)(v74.f32[1] - (float)(v69[a6] * v11)) - (float)(v75 * v71->f32[1]);
      v77 = (float)-(float)(v74.f32[2] - (float)(v69[2 * a6] * v11)) - (float)(v75 * v71->f32[2]);
      v74.f32[0] = (float)-(float)(v74.f32[3] - (float)(v69[3 * a6] * v11)) - (float)(v75 * v71->f32[3]);
      v78 = &v71->f32[a4];
      v79 = v37 * v76;
      v80 = v38 * (float)(v77 - (float)(v79 * v78[2]));
      v74.f32[0] = v39 * (float)((float)(v74.f32[0] - (float)(v79 * v78[3])) - (float)(v80 * v78[a4 + 3]));
      *v69 = v75;
      v69[a6] = v79;
      v69[2 * a6] = v80;
      v69[3 * a6] = v74.f32[0];
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

void sub_207C7F398(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float32x4_t v54;
  float *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  __int32 *v86;
  uint64_t v87;
  __int32 *v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  float32x4_t v105;
  float v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  int32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;

  v9 = __N;
  v10 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v22 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
        v23 = (float *)(a5 + 4 * v10 * a6);
        v24 = (float *)(a5 + a6 * (4 * a2 - 8));
        v25 = __N;
        do
        {
          v26 = *v23 * a7;
          *v23++ = v26;
          *v24 = (float)(*v24 * a7) - (float)(v26 * v22);
          ++v24;
          --v25;
        }
        while (v25);
      }
      v10 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v125 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v10 * a6), 1);
      a7 = v125;
      v10 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v11 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
      v12 = (a2 - 3) * a4;
      v13 = *(float *)(a3 + 4 * (v12 + v10));
      v14 = *(float *)(a3 + 4 * (v12 + a2 - 2));
      v15 = (float *)(a5 + 4 * v10 * a6);
      v16 = (float *)(a5 + a6 * (4 * a2 - 8));
      v17 = (float *)(a5 + a6 * (4 * a2 - 12));
      v18 = __N;
      do
      {
        v19 = *v15 * a7;
        *v15 = v19;
        v20 = (float)(*v16 * a7) - (float)(v19 * v11);
        *v16++ = v20;
        v21 = *v15++;
        *v17 = -(float)((float)((float)(v14 * v20) + (float)(v21 * v13)) - (float)(*v17 * a7));
        ++v17;
        --v18;
      }
      while (v18);
    }
    v10 = a2 - 4;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v27 = v10 + 1;
    v124 = v9 - 3;
    v126 = v9;
    v28 = 8 * a6;
    while (1)
    {
      v29 = v27 - 4;
      v122 = v27 - 4;
      v123 = v27;
      v30 = 0;
      if (v9 >= 4)
      {
        v31 = a3 + 4 * v29;
        v32 = a3 + 4 * v27;
        v33 = (float *)(v32 + 4 * v29 * a4);
        v34 = (v27 - 3) * a4;
        v35 = (float *)(v32 + 4 * v34);
        v36 = (v27 - 2) * a4;
        v37 = (float *)(v32 + 4 * v36);
        v38 = (float *)(v32 + 4 * (v27 - 1) * a4);
        v39 = v27 * a6;
        v40 = 4;
        if (a2 - v29 > 4)
          v40 = a2 - v29;
        v41 = (_DWORD *)(v31 + 4 * v29 * a4);
        v42 = v31 + 4 * v34;
        v43 = v31 + 4 * v36;
        v44 = v29 * a6;
        do
        {
          v45 = a5 + 4 * v30;
          v46 = (float32x4_t *)(v45 + 4 * v39);
          v47 = 0uLL;
          if ((v40 & 1) != 0)
          {
            v69 = *v46;
            v54 = vmlaq_n_f32((float32x4_t)0, *v46, *v33);
            v50 = vmlaq_n_f32((float32x4_t)0, *v46, *v35);
            v49 = vmlaq_n_f32((float32x4_t)0, *v46, *v37);
            v46 = (float32x4_t *)((char *)v46 + 4 * a6);
            v51 = v40 - 5;
            v48 = vmlaq_n_f32((float32x4_t)0, v69, *v38);
            v52 = v38 + 1;
            v53 = v37 + 1;
            v55 = v35 + 1;
            v56 = v33 + 1;
            if (v40 != 5)
            {
LABEL_21:
              v57 = 0uLL;
              v58 = 0uLL;
              v59 = 0uLL;
              do
              {
                v60 = *v56;
                v61 = v56[1];
                v56 += 2;
                v54 = vmlaq_n_f32(v54, *v46, v60);
                v62 = *v55;
                v63 = v55[1];
                v55 += 2;
                v50 = vmlaq_n_f32(v50, *v46, v62);
                v64 = *v53;
                v65 = v53[1];
                v53 += 2;
                v49 = vmlaq_n_f32(v49, *v46, v64);
                v66 = *v52;
                v67 = v52[1];
                v52 += 2;
                v48 = vmlaq_n_f32(v48, *v46, v66);
                v68 = *(float32x4_t *)((char *)v46 + 4 * a6);
                v57 = vmlaq_n_f32(v57, v68, v61);
                v58 = vmlaq_n_f32(v58, v68, v63);
                v59 = vmlaq_n_f32(v59, v68, v65);
                v46 = (float32x4_t *)((char *)v46 + v28);
                v47 = vmlaq_n_f32(v47, v68, v67);
                v51 -= 2;
              }
              while (v51);
              goto LABEL_26;
            }
          }
          else
          {
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = v40 - 4;
            v52 = v38;
            v53 = v37;
            v54 = 0uLL;
            v55 = v35;
            v56 = v33;
            if (v40 != 4)
              goto LABEL_21;
          }
          v59 = 0uLL;
          v58 = 0uLL;
          v57 = 0uLL;
LABEL_26:
          v70 = vaddq_f32(v57, v54);
          v71 = vaddq_f32(v59, v49);
          v72 = vaddq_f32(v47, v48);
          v73 = (float32x4_t *)(v45 + 4 * v44);
          v74 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 4 * a6), a7);
          v75 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 8 * a6), a7);
          v76 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 12 * a6), a7);
          v77 = vsubq_f32(v74, vaddq_f32(v58, v50));
          v78 = vsubq_f32(v75, v71);
          v79 = vsubq_f32(v76, v72);
          v74.i32[0] = v41[3];
          v80 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v73, a7), v70), v79, *(float32x2_t *)v74.f32, 0);
          v75.i32[0] = *(_DWORD *)(v42 + 8);
          v74.i32[0] = *(_DWORD *)(v42 + 12);
          v81 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v74.f32, 0);
          v74.i32[0] = *(_DWORD *)(v43 + 12);
          v82 = vmlsq_lane_f32(v78, v79, *(float32x2_t *)v74.f32, 0);
          v76.i32[0] = v41[1];
          v74.i32[0] = v41[2];
          v83 = vmlsq_lane_f32(v81, v82, *(float32x2_t *)v75.f32, 0);
          *v73 = vmlsq_lane_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v74.f32, 0), v83, *(float32x2_t *)v76.f32, 0);
          *(float32x4_t *)((char *)v73 + 4 * a6) = v83;
          *(float32x4_t *)((char *)v73 + 8 * a6) = v82;
          *(float32x4_t *)((char *)v73 + 12 * a6) = v79;
          v30 += 4;
        }
        while (v30 < v124);
      }
      v9 = v126;
      if (v30 < v126)
        break;
LABEL_37:
      v27 = v122;
      if (v123 < 5)
        return;
    }
    v84 = a3 + 4 * v122;
    v85 = a3 + 4 * v123;
    v86 = (__int32 *)(v85 + 4 * v122 * a4);
    v87 = (v123 - 3) * a4;
    v88 = (__int32 *)(v85 + 4 * v87);
    v89 = (v123 - 2) * a4;
    v90 = (__int32 *)(v85 + 4 * v89);
    v91 = (__int32 *)(v85 + 4 * (v123 - 1) * a4);
    v92 = 4;
    if (a2 - v122 > 4)
      v92 = a2 - v122;
    v93 = (float *)(v84 + 4 * v122 * a4);
    v94 = v84 + 4 * v87;
    v95 = v84 + 4 * v89;
    while (1)
    {
      v96 = a5 + 4 * v30;
      v97 = (float *)(v96 + 4 * v123 * a6);
      v98 = 0uLL;
      if ((v92 & 1) != 0)
      {
        v105.i32[0] = *v86;
        v105.i32[1] = *v88;
        v105.i32[2] = *v90;
        v105.i32[3] = *v91;
        v106 = *v97;
        v97 += a6;
        v99 = v92 - 5;
        v100 = vmlaq_n_f32((float32x4_t)0, v105, v106);
        v101 = (uint64_t *)(v91 + 1);
        v102 = (uint64_t *)(v90 + 1);
        v103 = (uint64_t *)(v88 + 1);
        v104 = (uint64_t *)(v86 + 1);
        if (v92 != 5)
        {
          do
          {
LABEL_35:
            v107 = *v104++;
            v108.i64[0] = v107;
            v109 = *v103++;
            v110.i64[0] = v109;
            v111 = *v102++;
            v112 = v111;
            v113 = *v101++;
            v108.i64[1] = v112;
            v110.i64[1] = v113;
            v100 = vmlaq_n_f32(v100, (float32x4_t)vtrn1q_s32(v108, v110), *v97);
            v98 = vmlaq_n_f32(v98, (float32x4_t)vtrn2q_s32(v108, v110), v97[a6]);
            v97 = (float *)((char *)v97 + v28);
            v99 -= 2;
          }
          while (v99);
        }
      }
      else
      {
        v99 = v92 - 4;
        v100 = 0uLL;
        v101 = (uint64_t *)v91;
        v102 = (uint64_t *)v90;
        v103 = (uint64_t *)v88;
        v104 = (uint64_t *)v86;
        if (v92 != 4)
          goto LABEL_35;
      }
      v114 = vaddq_f32(v98, v100);
      v115 = (float *)(v96 + 4 * v122 * a6);
      v116 = -(float)(v114.f32[3] - (float)(v115[3 * a6] * a7));
      v117 = (float)-(float)(v114.f32[2] - (float)(v115[2 * a6] * a7)) - (float)(v116 * *(float *)(v95 + 12));
      v118 = (float)((float)-(float)(v114.f32[1] - (float)(v115[a6] * a7)) - (float)(v116 * *(float *)(v94 + 12)))
           - (float)(v117 * *(float *)(v94 + 8));
      *v115 = (float)((float)((float)-(float)(v114.f32[0] - (float)(*v115 * a7)) - (float)(v116 * v93[3]))
                    - (float)(v117 * v93[2]))
            - (float)(v118 * v93[1]);
      v115[a6] = v118;
      v115[2 * a6] = v117;
      v115[3 * a6] = v116;
      ++v30;
      v9 = v126;
      if (v30 == v126)
        goto LABEL_37;
    }
  }
}

void sub_207C7F900(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float32x4_t v69;
  float *v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  __int32 *v101;
  __int32 *v102;
  uint64_t v103;
  __int32 *v104;
  uint64_t v105;
  __int32 *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  float32x4_t v119;
  float v120;
  uint64_t v121;
  int32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;

  v9 = a3;
  v10 = a7;
  v11 = __N;
  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v28 = (a2 - 2) * a4;
        v29 = *(float *)(a3 + 4 * (v28 + v12));
        v30 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
        v31 = *(float *)(a3 + 4 * (v28 + a2 - 2));
        v32 = (float *)(a5 + 4 * v12 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / v31;
        do
        {
          v36 = v30 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v29));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v12 + v12 * a4)), (float *)(a5 + 4 * v12 * a6), 1);
      v10 = a7;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = (a2 - 2) * a4;
      v14 = *(float *)(a3 + 4 * (v13 + v12));
      v15 = (a2 - 3) * a4;
      v16 = *(float *)(a3 + 4 * (v15 + v12));
      v17 = *(float *)(a3 + 4 * (v15 + a2 - 2));
      v18 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
      v19 = 1.0 / *(float *)(a3 + 4 * (v13 + a2 - 2));
      v20 = (float *)(a5 + 4 * v12 * a6);
      v21 = (float *)(a5 + a6 * (4 * a2 - 8));
      v22 = (float *)(a5 + a6 * (4 * a2 - 12));
      v23 = __N;
      v24 = 1.0 / *(float *)(a3 + 4 * (v15 + a2 - 3));
      do
      {
        v25 = v18 * *v20;
        *v20 = v25;
        v26 = v19 * (float)((float)(*v21 * v10) - (float)(v25 * v14));
        *v21++ = v26;
        v27 = *v20++;
        *v22 = v24 * (float)-(float)((float)((float)(v17 * v26) + (float)(v27 * v16)) - (float)(*v22 * v10));
        ++v22;
        --v23;
      }
      while (v23);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v37 = v12 + 1;
    v141 = v11 - 3;
    v143 = v11;
    v38 = 8 * a6;
    v138 = v9;
    while (1)
    {
      v39 = v37 - 4;
      v40 = (v37 - 4) * a4;
      v41 = 1.0 / *(float *)(v9 + 4 * (v40 + v37 - 4));
      v42 = (v37 - 3) * a4;
      v43 = 1.0 / *(float *)(v9 + 4 * (v37 - 3 + v42));
      v44 = (v37 - 2) * a4;
      v45 = 1.0 / *(float *)(v9 + 4 * (v37 - 2 + v44));
      v46 = (v37 - 1) * a4;
      v47 = 1.0 / *(float *)(v9 + 4 * (v37 - 1 + v46));
      v139 = v37 - 4;
      v140 = v37;
      v136 = v42;
      v137 = v40;
      v135 = v44;
      v48 = 0;
      if (v11 >= 4)
      {
        v49 = v9 + 4 * v39;
        v50 = v9 + 4 * v37;
        v51 = (float *)(v50 + 4 * v40);
        v52 = (float *)(v50 + 4 * v42);
        v53 = (float *)(v50 + 4 * v44);
        if (a2 - v39 <= 4)
          v54 = 4;
        else
          v54 = a2 - v39;
        v55 = (float *)(v50 + 4 * v46);
        v56 = v39 * a6;
        v57 = (_DWORD *)(v49 + 4 * v40);
        v58 = v49 + 4 * (v37 - 3) * a4;
        v59 = v49 + 4 * v44;
        do
        {
          v60 = a5 + 4 * v48;
          v61 = (float32x4_t *)(v60 + 4 * v37 * a6);
          v62 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v84 = *v61;
            v69 = vmlaq_n_f32((float32x4_t)0, *v61, *v51);
            v65 = vmlaq_n_f32((float32x4_t)0, *v61, *v52);
            v64 = vmlaq_n_f32((float32x4_t)0, *v61, *v53);
            v61 = (float32x4_t *)((char *)v61 + 4 * a6);
            v66 = v54 - 5;
            v63 = vmlaq_n_f32((float32x4_t)0, v84, *v55);
            v67 = v55 + 1;
            v68 = v53 + 1;
            v70 = v52 + 1;
            v71 = v51 + 1;
            if (v54 != 5)
            {
LABEL_22:
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              do
              {
                v75 = *v71;
                v76 = v71[1];
                v71 += 2;
                v69 = vmlaq_n_f32(v69, *v61, v75);
                v77 = *v70;
                v78 = v70[1];
                v70 += 2;
                v65 = vmlaq_n_f32(v65, *v61, v77);
                v79 = *v68;
                v80 = v68[1];
                v68 += 2;
                v64 = vmlaq_n_f32(v64, *v61, v79);
                v81 = *v67;
                v82 = v67[1];
                v67 += 2;
                v63 = vmlaq_n_f32(v63, *v61, v81);
                v83 = *(float32x4_t *)((char *)v61 + 4 * a6);
                v72 = vmlaq_n_f32(v72, v83, v76);
                v73 = vmlaq_n_f32(v73, v83, v78);
                v74 = vmlaq_n_f32(v74, v83, v80);
                v61 = (float32x4_t *)((char *)v61 + v38);
                v62 = vmlaq_n_f32(v62, v83, v82);
                v66 -= 2;
              }
              while (v66);
              goto LABEL_27;
            }
          }
          else
          {
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = v54 - 4;
            v67 = v55;
            v68 = v53;
            v69 = 0uLL;
            v70 = v52;
            v71 = v51;
            if (v54 != 4)
              goto LABEL_22;
          }
          v74 = 0uLL;
          v73 = 0uLL;
          v72 = 0uLL;
LABEL_27:
          v85 = vaddq_f32(v72, v69);
          v86 = vaddq_f32(v74, v64);
          v87 = vaddq_f32(v62, v63);
          v88 = (float32x4_t *)(v60 + 4 * v56);
          v89 = vmulq_n_f32(*v88, v10);
          v90 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 4 * a6), v10);
          v91 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 8 * a6), v10);
          v92 = vsubq_f32(v89, v85);
          v93 = vsubq_f32(v90, vaddq_f32(v73, v65));
          v94 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v88 + 12 * a6), v10), v87), v47);
          v89.i32[0] = v57[3];
          v95 = vmlsq_lane_f32(v92, v94, *(float32x2_t *)v89.f32, 0);
          v90.i32[0] = *(_DWORD *)(v58 + 8);
          v89.i32[0] = *(_DWORD *)(v58 + 12);
          v96 = vmlsq_lane_f32(v93, v94, *(float32x2_t *)v89.f32, 0);
          v89.i32[0] = *(_DWORD *)(v59 + 12);
          v97 = vmulq_n_f32(vmlsq_lane_f32(vsubq_f32(v91, v86), v94, *(float32x2_t *)v89.f32, 0), v45);
          v91.i32[0] = v57[1];
          v89.i32[0] = v57[2];
          v98 = vmulq_n_f32(vmlsq_lane_f32(v96, v97, *(float32x2_t *)v90.f32, 0), v43);
          *v88 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v95, v97, *(float32x2_t *)v89.f32, 0), v98, *(float32x2_t *)v91.f32, 0), v41);
          *(float32x4_t *)((char *)v88 + 4 * a6) = v98;
          *(float32x4_t *)((char *)v88 + 8 * a6) = v97;
          *(float32x4_t *)((char *)v88 + 12 * a6) = v94;
          v48 += 4;
        }
        while (v48 < v141);
      }
      v11 = v143;
      if (v48 < v143)
        break;
LABEL_39:
      v37 = v139;
      v9 = v138;
      if (v140 < 5)
        return;
    }
    v99 = v138 + 4 * v139;
    v100 = v138 + 4 * v37;
    v101 = (__int32 *)(v100 + 4 * v137);
    v102 = (__int32 *)(v100 + 4 * v136);
    v103 = v37 * a6;
    v104 = (__int32 *)(v100 + 4 * v135);
    if (a2 - v139 <= 4)
      v105 = 4;
    else
      v105 = a2 - v139;
    v106 = (__int32 *)(v100 + 4 * (v37 - 1) * a4);
    v107 = (float *)(v99 + 4 * v137);
    v108 = v99 + 4 * v136;
    v109 = v99 + 4 * v135;
    while (1)
    {
      v110 = a5 + 4 * v48;
      v111 = (float *)(v110 + 4 * v103);
      v112 = 0uLL;
      if ((v105 & 1) != 0)
      {
        v119.i32[0] = *v101;
        v119.i32[1] = *v102;
        v119.i32[2] = *v104;
        v119.i32[3] = *v106;
        v120 = *v111;
        v111 += a6;
        v113 = v105 - 5;
        v114 = vmlaq_n_f32((float32x4_t)0, v119, v120);
        v115 = (uint64_t *)(v106 + 1);
        v116 = (uint64_t *)(v104 + 1);
        v117 = (uint64_t *)(v102 + 1);
        v118 = (uint64_t *)(v101 + 1);
        if (v105 != 5)
        {
          do
          {
LABEL_37:
            v121 = *v118++;
            v122.i64[0] = v121;
            v123 = *v117++;
            v124.i64[0] = v123;
            v125 = *v116++;
            v126 = v125;
            v127 = *v115++;
            v122.i64[1] = v126;
            v124.i64[1] = v127;
            v114 = vmlaq_n_f32(v114, (float32x4_t)vtrn1q_s32(v122, v124), *v111);
            v112 = vmlaq_n_f32(v112, (float32x4_t)vtrn2q_s32(v122, v124), v111[a6]);
            v111 = (float *)((char *)v111 + v38);
            v113 -= 2;
          }
          while (v113);
        }
      }
      else
      {
        v113 = v105 - 4;
        v114 = 0uLL;
        v115 = (uint64_t *)v106;
        v116 = (uint64_t *)v104;
        v117 = (uint64_t *)v102;
        v118 = (uint64_t *)v101;
        if (v105 != 4)
          goto LABEL_37;
      }
      v128 = vaddq_f32(v114, v112);
      v129 = (float *)(v110 + 4 * v139 * a6);
      v130 = -(float)(v128.f32[0] - (float)(*v129 * v10));
      v128.f32[0] = v47 * (float)-(float)(v128.f32[3] - (float)(v129[3 * a6] * v10));
      v131 = v45
           * (float)((float)-(float)(v128.f32[2] - (float)(v129[2 * a6] * v10))
                   - (float)(v128.f32[0] * *(float *)(v109 + 12)));
      v132 = v43
           * (float)((float)((float)-(float)(v128.f32[1] - (float)(v129[a6] * v10))
                           - (float)(v128.f32[0] * *(float *)(v108 + 12)))
                   - (float)(v131 * *(float *)(v108 + 8)));
      *v129 = v41
            * (float)((float)((float)(v130 - (float)(v128.f32[0] * v107[3])) - (float)(v131 * v107[2]))
                    - (float)(v132 * v107[1]));
      v129[a6] = v132;
      v129[2 * a6] = v131;
      v129[3 * a6] = v128.f32[0];
      ++v48;
      v11 = v143;
      if (v48 == v143)
        goto LABEL_39;
    }
  }
}

_OWORD *sub_207C7FF30(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void sub_207C800A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sub_207C843BC(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t sub_207C80310()
{
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  if (!sysctlbyname("hw.cpufamily", &v2, &v1, 0, 0))
  {
    if (v2 > 1176831185)
    {
      if (v2 <= 2465937351)
      {
        if (v2 == 1176831186)
          return 8;
        if (v2 == 1741614739)
          return 5;
      }
      else
      {
        switch(v2)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v2 <= 506291072)
    {
      if (v2 == 131287967)
        return 7;
      if (v2 == 458787763)
        return 9;
    }
    else
    {
      switch(v2)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t sub_207C80478()
{
  int v0;
  unsigned int v1;
  size_t v3;
  uint64_t v4;

  v3 = 8;
  v4 = 0;
  v0 = sysctlbyname("hw.cpusubfamily", &v4, &v3, 0, 0);
  if ((unint64_t)(v4 - 1) <= 4)
    v1 = v4;
  else
    v1 = 0;
  if (v0)
    return 0;
  else
    return v1;
}

unint64_t sub_207C804CC@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t result;
  size_t v17;
  uint64_t v18;

  v2 = sub_207C80310();
  *(_DWORD *)(a1 + 4) = v2;
  v3 = sub_207C80478();
  *(_DWORD *)(a1 + 8) = v3;
  v17 = 8;
  v18 = 0;
  v4 = sysctlbyname("hw.perflevel0.l2cachesize", &v18, &v17, 0, 0);
  v5 = v18;
  if (v4)
    v5 = 0x800000;
  *(_QWORD *)(a1 + 40) = v5;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v18, &v17, 0, 0))
    v6 = 2;
  else
    v6 = v18;
  *(_DWORD *)(a1 + 12) = v6;
  v17 = 8;
  v18 = 0;
  v7 = sysctlbyname("hw.perflevel0.cpusperl2", &v18, &v17, 0, 0);
  v8 = v18;
  if (v7)
    v8 = 2;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 20) = v6 / v8;
  v17 = 8;
  v18 = 0;
  v9 = sysctlbyname("hw.perflevel1.l2cachesize", &v18, &v17, 0, 0);
  v10 = v18;
  if (v9)
    v10 = 0x400000;
  *(_QWORD *)(a1 + 48) = v10;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v18, &v17, 0, 0))
    v11 = 4;
  else
    v11 = v18;
  *(_DWORD *)(a1 + 16) = v11;
  v17 = 8;
  v18 = 0;
  v12 = sysctlbyname("hw.perflevel1.cpusperl2", &v18, &v17, 0, 0);
  v13 = v18;
  if (v12)
    v13 = 4;
  *(_DWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 24) = v11 / v13;
  switch(v2)
  {
    case 8:
      v15 = 1;
      break;
    case 10:
      if ((v3 & 6) == 4)
        v15 = 8;
      else
        v15 = 3;
      break;
    case 9:
      v14 = v3 - 2;
      if (v14 >= 4)
        v15 = 2;
      else
        v15 = dword_20822AA80[v14];
      break;
    default:
      v15 = 0;
      break;
  }
  *(_DWORD *)a1 = v15;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a1 + 56) = (result >> 59) & 2;
  return result;
}

uint64_t sub_207C806E0(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v18;

  v5 = a2;
  _X3 = 8 * a4;
  v7 = _X2 + 4;
  do
  {
    do
    {
      v9 = *_X2;
      v10 = _X2[1];
      v8 = _X2 + 2;
      v11 = *v8;
      v12 = v8[1];
      _X2 = (__int128 *)((char *)v8 + _X3 - 32);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v9;
      a5[1] = v10;
      v18 = a5 + 2;
      *v18 = v11;
      v18[1] = v12;
      a5 = v18 + 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 4;
  }
  while (result);
  return result;
}

void sub_207C80728(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sub_207C807CC(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_207C80864(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sub_207C80728(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sub_207C80994(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sub_207C807CC(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sub_207C80AA4(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sub_207C80B38(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_207C80BC8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  float32x4_t *v18;
  uint64_t v25;
  int v26;
  double v27;
  int v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  if (!a3 || !a4)
    return;
  v18 = (float32x4_t *)a13;
  if (a5 && a9 != 0.0)
  {
    v25 = a12;
    if (a5 == 1)
    {
      if (a10 == 0.0)
      {
        v26 = a12;
        sub_207C91FF4(a3, a4, a13, a14);
      }
      else
      {
        if (a10 == 1.0)
        {
LABEL_31:
          if (a1 == 114 || a1 == 111)
            v31 = 1;
          else
            v31 = a7;
          if (a2 != 114 && a2 != 111)
            LODWORD(v25) = 1;
          cblas_sger(CblasColMajor, a3, a4, a9, a6->f32, v31, (const float *)a8, v25, (float *)a13, a14);
          return;
        }
        v26 = a12;
        sub_207C92044(a3, a4, (float *)a13, a14, a10);
      }
      LODWORD(v25) = v26;
      goto LABEL_31;
    }
    if (a10 == 0.0)
    {
      v33 = (uint64_t)a13;
      sub_207C91FF4(a3, a4, a13, a14);
      v25 = a12;
      v18 = (float32x4_t *)a13;
    }
    *(double *)a11.i64 = fmax((double)a3 / (double)a4, (double)a4 / (double)a3);
    v27 = (double)a3 * (double)a4 * (double)a5;
    if (*(double *)a11.i64 <= 4.0)
    {
      if ((v27 < 4096.0 || a5 <= 31) && v27 < 262144.0)
        goto LABEL_14;
    }
    else if (v27 < 262144.0)
    {
LABEL_14:
      if (a2 == 111)
      {
        if (a1 == 111)
          sub_207C84600(a3, a4, a5, a6, a7, a8, v25, v18, a9, a10, a11, a14);
        else
          sub_207C800A0(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v25, v18, a9, a10, a11, a14);
      }
      else if (a1 == 111)
      {
        sub_207C897E0(a3, a4, a5, a6, a7, (float32x4_t *)a8, v25, v18, a9, a10, a11, a14);
      }
      else
      {
        sub_207C818B0(a3, a4, a5, a6->f32, a7, a8, v25, v18, a9, a10, a11, a14);
      }
      return;
    }
    sub_207C8651C(a1, a2, a3, a4, a5, (int)a6, a7, (int)a8, v25, (uint64_t)v18, a14, 0, 0, v33, v34, v35, v36, v37, v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      SWORD2(v43),
      SHIWORD(v43),
      v44);
    return;
  }
  if (a10 == 0.0)
  {
    sub_207C91FF4(a3, a4, a13, a14);
  }
  else if (a10 != 1.0)
  {
    sub_207C92044(a3, a4, (float *)a13, a14, a10);
  }
}

#error "207C814C8: call analysis failed (funcsize=366)"

_OWORD *sub_207C815A0(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

double *sub_207C81740(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_207C86314(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

uint64_t sub_207C818B0(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

uint64_t sub_207C81C34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = sub_207C8C8A0;
  if ((_DWORD)result == 132)
    v10 = sub_207C8C30C;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = a4 + 4 * v17 * a5;
        if (v16 >= 0x40)
          v21 = 64;
        else
          v21 = v16;
        v22 = v20 + 4 * v29;
        v30 = (float32x4_t *)(v20 + 4 * (v29 + v21));
        v23 = v25;
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v23 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            sub_207C80BC8(112, 111, v21, v24, a2 - (v21 + v29), v30, a5, (float32x2_t *)&v19[4 * v21], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v21, v24, v22, a5, v19, a7, a8);
          v23 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t sub_207C81DD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_207C8BE28;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_207C8B9EC;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 32;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 32;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_207C80BC8(111, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 + 4 * v16 * a5, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 16;
      v16 += 32;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t sub_207C81F5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_207C8A56C;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_207C8A04C;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 64;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 64;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_207C80BC8(112, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16 * a5), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 * a5 + 4 * v16, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 32;
      v16 += 64;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t sub_207C820E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = sub_207C8AFC4;
  if ((_DWORD)result == 132)
    v10 = sub_207C8AB1C;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = v25;
        v21 = a4 + 4 * v17;
        if (v16 >= 0x40)
          v22 = 64;
        else
          v22 = v16;
        v23 = v21 + 4 * v29 * a5;
        v30 = (float32x4_t *)(v21 + 4 * (v29 + v22) * a5);
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            sub_207C80BC8(111, 111, v22, v24, a2 - (v22 + v29), v30, a5, (float32x2_t *)&v19[4 * v22], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v22, v24, v23, a5, v19, a7, a8);
          v20 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t sub_207C82288(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_207C7EF10;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_207C7EB28;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_207C80BC8(111, 112, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 + 4 * v16 * a5, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t sub_207C82410(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v31;

  v10 = sub_207C7F900;
  if ((_DWORD)result == 132)
    v10 = sub_207C7F398;
  v30 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v24 = a2 << 32;
    v31 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v28 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        if (v15 >= 0x40)
          v19 = 64;
        else
          v19 = v15;
        v29 = a3 - (v16 + v19);
        v20 = a4 + 4 * v16 * a5 + 4 * v16;
        v21 = (float32x4_t *)(a6 + a7 * (4 * v16 + 4 * v19));
        v22 = v24;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v23 = 64;
          else
            v23 = v22 >> 32;
          a8.n128_u32[0] = v13;
          if ((v31 & 1) == 0)
          {
            sub_207C80BC8(111, 111, v23, v19, v29, v21, a7, (float32x2_t *)(v20 + 4 * v19), -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v30)(v23, v19, v20, a5, v18, a7, a8);
          v22 -= 0x4000000000;
          v18 += 256;
          v21 += 16;
        }
        while (v17 < a2);
      }
      v31 = 0;
      v15 = v28;
    }
    while (v28 >= 1);
  }
  return result;
}

uint64_t sub_207C825B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_207C83418;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_207C82F40;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_207C80BC8(111, 111, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16 * a5), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 * a5 + 4 * v16, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t sub_207C8273C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v34;

  v10 = sub_207C83E18;
  if ((_DWORD)result == 132)
    v10 = sub_207C83988;
  v33 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v26 = a2 << 32;
    v34 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v30 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        v19 = v26;
        v20 = a4 + 4 * v16;
        if (v15 >= 0x40)
          v21 = 64;
        else
          v21 = v15;
        v22 = (v30 + v21);
        v31 = (float32x2_t *)(v20 + 4 * v22 * a5);
        v32 = a3 - v22;
        v23 = v20 + 4 * v30 * a5;
        v24 = (float32x4_t *)(a6 + a7 * (4 * v30 + 4 * v21));
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v25 = 64;
          else
            v25 = v19 >> 32;
          a8.n128_u32[0] = v13;
          if ((v34 & 1) == 0)
          {
            sub_207C80BC8(111, 112, v25, v21, v32, v24, a7, v31, -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v33)(v25, v21, v23, a5, v18, a7, a8);
          v19 -= 0x4000000000;
          v18 += 256;
          v24 += 16;
        }
        while (v17 < a2);
      }
      v34 = 0;
      v15 = v30;
    }
    while ((int)v30 >= 1);
  }
  return result;
}

double *sub_207C828E0(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_207C86384(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void sub_207C829D4(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  int v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v45 = 1;
LABEL_32:
    cblas_xerbla(v45, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v45 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v45 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v45 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v45 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v45 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v40 = (a2 & 0xFFFFFFFE) == 112;
  else
    v40 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v41 = a3;
  v42 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v44 = a18 - a18 * a4;
  }
  else
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v44 = a18 - a18 * a3;
  }
  v46 = &a17[v44];
  if ((int)a18 >= 0)
    v46 = a17;
  if (!v38)
  {
    if (a4 <= 1uLL)
      v50 = 1;
    else
      v50 = a4;
    if (v50 <= a6)
    {
      v40 ^= 1u;
      v48 = a8;
      v51 = (int)a18;
      v49 = a4;
      v42 = v41;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v41 <= 1)
    v47 = 1;
  else
    v47 = v41;
  if (v47 > a6)
  {
LABEL_31:
    v45 = 7;
    goto LABEL_32;
  }
  v48 = a8;
  v51 = (int)a18;
  v49 = v41;
LABEL_34:
  sub_207C84370(v40, v49, v42, a5, a6, v43, v48, v46, a9, a10, a11, a12, a13, a14, a15, a16, v51, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38);
}

void sub_207C82B14(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float a9, char *a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,char a28)
{
  BOOL v29;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      sub_207C91FF4(a5, a6, a10, a11);
    }
    else if (a5 > 95 || a6 >= 96)
    {
      v29 = a2 == 121 && a3 == 111;
      if (a1 == 141)
      {
        if (v29 || a2 == 122 && a3 != 111)
          sub_207C888F8(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, a19, a20);
        else
          sub_207C8849C(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
            a21,
            a22,
            a23,
            a24);
      }
      else if (v29 || a2 == 122 && a3 != 111)
      {
        sub_207C88EC0(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
          a21,
          a22,
          (uint64_t)a23,
          a24,
          a25,
          a26,
          a27,
          a28);
      }
      else
      {
        sub_207C89388(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, a17, a18);
      }
    }
    else if (a13 == -1)
    {
      *a12 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if (a3 == 111)
        {
          if (a4 == 132)
            sub_207C8AB1C(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
          else
            sub_207C8AFC4(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
        }
        else if (a4 == 132)
        {
          sub_207C8A04C(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        }
        else
        {
          sub_207C8A56C(a5, a6, a7, a8, (float *)a10, a11, a9);
        }
      }
      else if (a3 == 111)
      {
        if (a4 == 132)
          sub_207C8B9EC(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          sub_207C8BE28(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if (a4 == 132)
      {
        sub_207C8C30C(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        sub_207C8C8A0(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if (a2 == 121)
    {
      if (a3 == 111)
      {
        if (a4 == 132)
          sub_207C82F40(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          sub_207C83418(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if (a4 == 132)
      {
        sub_207C83988(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        sub_207C83E18(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if (a3 == 111)
    {
      if (a4 == 132)
        sub_207C7F398(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      else
        sub_207C7F900(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
    }
    else if (a4 == 132)
    {
      sub_207C7EB28(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
    }
    else
    {
      sub_207C7EF10(a5, a6, a7, a8, (float *)a10, a11, a9);
    }
  }
}

double *sub_207C82E00(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_207C86314(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void sub_207C82F40(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  float32x4_t v39;
  __int32 *v40;
  float *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int32 *v62;
  __int32 *v63;
  __int32 *v64;
  __int32 *v65;
  float *v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  __int32 *v70;
  __int32 *v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float v75;
  uint64_t v76;
  int32x4_t v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;

  v9 = a7;
  v87 = a2;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v15 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v15 = 2;
        v21 = __X;
        v22 = __N;
        do
        {
          v23 = *v21 * v9;
          *v21 = v23;
          v21[a6] = (float)(v21[a6] * v9) - (float)(v23 * v20);
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v15 = 1;
      cblas_sscal(__N, a7, __X, 1);
      a2 = v87;
      v9 = a7;
    }
    else
    {
      v15 = 0;
    }
  }
  else if (__N < 1)
  {
    v15 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = 3;
    v16 = __X;
    v17 = __N;
    do
    {
      v18 = *v16 * v9;
      *v16 = v18;
      v19 = (float)(v16[a6] * v9) - (float)(v18 * v11);
      v16[a6] = v19;
      v16[2 * a6] = -(float)((float)((float)(v14 * v19) + (float)(*v16 * v13)) - (float)(v16[2 * a6] * v9));
      ++v16;
      --v17;
    }
    while (v17);
  }
  if (v15 < a2)
  {
    v24 = 8 * a6;
    v25 = v15;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (float *)(a3 + 4 * v25 * a4);
        v28 = (float *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (float *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (float *)(a3 + 4 * (v25 + 3) * a4);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26];
          v32 = 0uLL;
          if ((v15 & 1) != 0)
          {
            v47 = *v31;
            v39 = vmlaq_n_f32((float32x4_t)0, *v31, *v27);
            v35 = vmlaq_n_f32((float32x4_t)0, *v31, *v28);
            v34 = vmlaq_n_f32((float32x4_t)0, *v31, *v29);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v41 = v27 + 1;
            v36 = v25 - 1;
            v33 = vmlaq_n_f32((float32x4_t)0, v47, *v30);
            v37 = (__int32 *)(v30 + 1);
            v38 = (__int32 *)(v29 + 1);
            v40 = (__int32 *)(v28 + 1);
            if (v25 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v39 = vmlaq_n_f32(v39, *v31, v41[v42]);
                v35 = vmlaq_n_f32(v35, *v31, *(float *)&v40[v42]);
                v34 = vmlaq_n_f32(v34, *v31, *(float *)&v38[v42]);
                v33 = vmlaq_n_f32(v33, *v31, *(float *)&v37[v42]);
                v46 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v43 = vmlaq_n_f32(v43, v46, v41[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, *(float *)&v40[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, *(float *)&v38[v42 + 1]);
                v32 = vmlaq_n_f32(v32, v46, *(float *)&v37[v42 + 1]);
                v42 += 2;
                v31 = (float32x4_t *)((char *)v31 + v24);
                v36 -= 2;
              }
              while (v36);
              v40 = (__int32 *)((char *)v40 + v42 * 4);
              v38 = (__int32 *)((char *)v38 + v42 * 4);
              v37 = (__int32 *)((char *)v37 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v25;
            v37 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v38 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v39 = 0uLL;
            v40 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v41 = (float *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v48 = vaddq_f32(v43, v39);
          v49 = vaddq_f32(v45, v34);
          v50 = vaddq_f32(v32, v33);
          v51 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v9);
          v52 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v9);
          v53 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v9);
          v54 = vsubq_f32(vmulq_n_f32(*v31, v9), v48);
          v55 = vsubq_f32(v51, vaddq_f32(v44, v35));
          v56 = vsubq_f32(v52, v49);
          v57 = vsubq_f32(v53, v50);
          v51.i32[0] = *v40;
          v58 = vmlsq_lane_f32(v55, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v38;
          v52.i32[0] = v38[1];
          v59 = vmlsq_lane_f32(v56, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v37;
          v53.i32[0] = v37[1];
          v60 = vmlsq_lane_f32(v59, v58, *(float32x2_t *)v52.f32, 0);
          v61 = vmlsq_lane_f32(vmlsq_lane_f32(v57, v54, *(float32x2_t *)v51.f32, 0), v58, *(float32x2_t *)v53.f32, 0);
          v51.i32[0] = v37[2];
          *v31 = v54;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v58;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v60;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(v61, v60, *(float32x2_t *)v51.f32, 0);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v87)
        return;
    }
    v62 = (__int32 *)(a3 + 4 * v25 * a4);
    v63 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v64 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v65 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    while (1)
    {
      v66 = &__X[v26];
      v67 = 0uLL;
      if ((v15 & 1) != 0)
      {
        v74.i32[0] = *v62;
        v74.i32[1] = *v63;
        v74.i32[2] = *v64;
        v74.i32[3] = *v65;
        v75 = *v66;
        v66 += a6;
        v68 = v25 - 1;
        v69 = vmlaq_n_f32((float32x4_t)0, v74, v75);
        v70 = v65 + 1;
        v71 = v64 + 1;
        v72 = (uint64_t *)(v63 + 1);
        v73 = (uint64_t *)(v62 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v76 = *v73++;
            v77.i64[0] = v76;
            v78 = *v72++;
            v79.i64[0] = v78;
            v80 = *(_QWORD *)v71;
            v71 += 2;
            v81 = v80;
            v82 = *(_QWORD *)v70;
            v70 += 2;
            v77.i64[1] = v81;
            v79.i64[1] = v82;
            v69 = vmlaq_n_f32(v69, (float32x4_t)vtrn1q_s32(v77, v79), *v66);
            v67 = vmlaq_n_f32(v67, (float32x4_t)vtrn2q_s32(v77, v79), v66[a6]);
            v66 = (float *)((char *)v66 + v24);
            v68 -= 2;
          }
          while (v68);
        }
      }
      else
      {
        v68 = v25;
        v69 = 0uLL;
        v70 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v71 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v72 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v73 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      v83 = vaddq_f32(v67, v69);
      v84 = -(float)(v83.f32[0] - (float)(*v66 * v9));
      v85 = (float)-(float)(v83.f32[1] - (float)(v66[a6] * v9)) - (float)(v84 * *(float *)v72);
      v86 = (float)((float)-(float)(v83.f32[2] - (float)(v66[2 * a6] * v9)) - (float)(v84 * *(float *)v71))
          - (float)(v85 * *((float *)v71 + 1));
      v83.f32[0] = (float)((float)((float)-(float)(v83.f32[3] - (float)(v66[3 * a6] * v9)) - (float)(v84 * *(float *)v70))
                         - (float)(v85 * *((float *)v70 + 1)))
                 - (float)(v86 * *((float *)v70 + 2));
      *v66 = v84;
      v66[a6] = v85;
      v66[2 * a6] = v86;
      v66[3 * a6] = v83.f32[0];
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
}

void sub_207C83418(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float *v9;
  float v10;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 *v57;
  float32x4_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  float *v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  __int32 *v87;
  __int32 *v88;
  uint64_t *v89;
  uint64_t *v90;
  float32x4_t v91;
  float v92;
  uint64_t v93;
  int32x4_t v94;
  uint64_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v9 = a3;
  v10 = a7;
  v12 = __N;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v21 = 2;
        v31 = __X;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = v28 * *v31;
          *v31 = v34;
          v31[a6] = v33 * (float)((float)(v31[a6] * v10) - (float)(v34 * v29));
          ++v31;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v21 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v10 = a7;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = 3;
    v22 = __X;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *v22;
      *v22 = v25;
      v26 = v19 * (float)((float)(v22[a6] * v10) - (float)(v25 * v18));
      v22[a6] = v26;
      v22[2 * a6] = v24
                  * (float)-(float)((float)((float)(v16 * v26) + (float)(*v22 * v15)) - (float)(v22[2 * a6] * v10));
      ++v22;
      --v23;
    }
    while (v23);
  }
  if (v21 < a2)
  {
    v35 = v12 - 3;
    v36 = 8 * a6;
    v37 = v21;
    v105 = a2;
    v106 = v9;
    v104 = v12;
    while (1)
    {
      v38 = 1.0 / v9[v37 * a4 + v37];
      v39 = (v37 + 1) * a4;
      v40 = 1.0 / v9[v39 + 1 + v37];
      v41 = (v37 + 2) * a4;
      v42 = 1.0 / v9[v41 + 2 + v37];
      v43 = (v37 + 3) * a4;
      v44 = 1.0 / v9[v43 + 3 + v37];
      v110 = v43;
      v108 = v41;
      v109 = v39;
      v45 = 0;
      if (v12 >= 4)
      {
        v46 = &v9[v37 * a4];
        v47 = &v9[v39];
        v48 = &v9[v41];
        v49 = &v9[v43];
        do
        {
          v50 = (float32x4_t *)&__X[v45];
          v51 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v66 = *v50;
            v58 = vmlaq_n_f32((float32x4_t)0, *v50, *v46);
            v54 = vmlaq_n_f32((float32x4_t)0, *v50, *v47);
            v53 = vmlaq_n_f32((float32x4_t)0, *v50, *v48);
            v50 = (float32x4_t *)((char *)v50 + 4 * a6);
            v55 = v37 - 1;
            v52 = vmlaq_n_f32((float32x4_t)0, v66, *v49);
            v56 = (__int32 *)(v49 + 1);
            v57 = (__int32 *)(v48 + 1);
            v59 = v47 + 1;
            v60 = v46 + 1;
            if (v37 != 1)
            {
LABEL_22:
              v61 = 0;
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              do
              {
                v58 = vmlaq_n_f32(v58, *v50, v60[v61]);
                v54 = vmlaq_n_f32(v54, *v50, v59[v61]);
                v53 = vmlaq_n_f32(v53, *v50, *(float *)&v57[v61]);
                v52 = vmlaq_n_f32(v52, *v50, *(float *)&v56[v61]);
                v65 = *(float32x4_t *)((char *)v50 + 4 * a6);
                v62 = vmlaq_n_f32(v62, v65, v60[v61 + 1]);
                v63 = vmlaq_n_f32(v63, v65, v59[v61 + 1]);
                v64 = vmlaq_n_f32(v64, v65, *(float *)&v57[v61 + 1]);
                v51 = vmlaq_n_f32(v51, v65, *(float *)&v56[v61 + 1]);
                v61 += 2;
                v50 = (float32x4_t *)((char *)v50 + v36);
                v55 -= 2;
              }
              while (v55);
              v59 = (float *)((char *)v59 + v61 * 4);
              v57 = (__int32 *)((char *)v57 + v61 * 4);
              v56 = (__int32 *)((char *)v56 + v61 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = v37;
            v56 = (__int32 *)&v9[v43];
            v57 = (__int32 *)&v9[v41];
            v58 = 0uLL;
            v59 = v47;
            v60 = &v9[v37 * a4];
            if (v37)
              goto LABEL_22;
          }
          v64 = 0uLL;
          v63 = 0uLL;
          v62 = 0uLL;
LABEL_27:
          v67 = vaddq_f32(v62, v58);
          v68 = vaddq_f32(v64, v53);
          v69 = vaddq_f32(v51, v52);
          v70 = vmulq_n_f32(*v50, v10);
          v71 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 4 * a6), v10);
          v72 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 8 * a6), v10);
          v73 = vmulq_n_f32(vsubq_f32(v70, v67), v38);
          v70.f32[0] = *v59;
          v74 = vmlsq_lane_f32(vsubq_f32(v71, vaddq_f32(v63, v54)), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v57;
          v71.i32[0] = v57[1];
          v75 = vmlsq_lane_f32(vsubq_f32(v72, v68), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v56;
          v72.i32[0] = v56[1];
          v76 = vmulq_n_f32(v74, v40);
          v77 = vmlsq_lane_f32(vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v50 + 12 * a6), v10), v69), v73, *(float32x2_t *)v70.f32, 0), v76, *(float32x2_t *)v72.f32, 0);
          v78 = vmulq_n_f32(vmlsq_lane_f32(v75, v76, *(float32x2_t *)v71.f32, 0), v42);
          v70.i32[0] = v56[2];
          *v50 = v73;
          *(float32x4_t *)((char *)v50 + 4 * a6) = v76;
          *(float32x4_t *)((char *)v50 + 8 * a6) = v78;
          *(float32x4_t *)((char *)v50 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(v77, v78, *(float32x2_t *)v70.f32, 0), v44);
          v45 += 4;
        }
        while (v45 < v35);
      }
      v12 = v104;
      v9 = v106;
      if (v45 < v104)
        break;
LABEL_36:
      v37 += 4;
      if (v37 >= v105)
        return;
    }
    v79 = (__int32 *)&v106[v37 * a4];
    v80 = (__int32 *)&v106[v109];
    v81 = (__int32 *)&v106[v41];
    v82 = (__int32 *)&v106[v110];
    while (1)
    {
      v83 = &__X[v45];
      v84 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v91.i32[0] = *v79;
        v91.i32[1] = *v80;
        v91.i32[2] = *v81;
        v91.i32[3] = *v82;
        v92 = *v83;
        v83 += a6;
        v85 = v37 - 1;
        v86 = vmlaq_n_f32((float32x4_t)0, v91, v92);
        v87 = v82 + 1;
        v88 = v81 + 1;
        v89 = (uint64_t *)(v80 + 1);
        v90 = (uint64_t *)(v79 + 1);
        if (v37 != 1)
        {
          do
          {
LABEL_34:
            v93 = *v90++;
            v94.i64[0] = v93;
            v95 = *v89++;
            v96.i64[0] = v95;
            v97 = *(_QWORD *)v88;
            v88 += 2;
            v98 = v97;
            v99 = *(_QWORD *)v87;
            v87 += 2;
            v94.i64[1] = v98;
            v96.i64[1] = v99;
            v86 = vmlaq_n_f32(v86, (float32x4_t)vtrn1q_s32(v94, v96), *v83);
            v84 = vmlaq_n_f32(v84, (float32x4_t)vtrn2q_s32(v94, v96), v83[a6]);
            v83 = (float *)((char *)v83 + v36);
            v85 -= 2;
          }
          while (v85);
        }
      }
      else
      {
        v85 = v37;
        v86 = 0uLL;
        v87 = (__int32 *)&v106[v110];
        v88 = (__int32 *)&v106[v108];
        v89 = (uint64_t *)&v106[v109];
        v90 = (uint64_t *)&v106[v37 * a4];
        if (v37)
          goto LABEL_34;
      }
      v100 = vaddq_f32(v86, v84);
      v101 = v38 * (float)-(float)(v100.f32[0] - (float)(*v83 * v10));
      v102 = v40 * (float)((float)-(float)(v100.f32[1] - (float)(v83[a6] * v10)) - (float)(v101 * *(float *)v89));
      v103 = v42
           * (float)((float)((float)-(float)(v100.f32[2] - (float)(v83[2 * a6] * v10)) - (float)(v101 * *(float *)v88))
                   - (float)(v102 * *((float *)v88 + 1)));
      v100.f32[0] = v44
                  * (float)((float)((float)((float)-(float)(v100.f32[3] - (float)(v83[3 * a6] * v10))
                                          - (float)(v101 * *(float *)v87))
                                  - (float)(v102 * *((float *)v87 + 1)))
                          - (float)(v103 * *((float *)v87 + 2)));
      *v83 = v101;
      v83[a6] = v102;
      v83[2 * a6] = v103;
      v83[3 * a6] = v100.f32[0];
      if (++v45 == v104)
        goto LABEL_36;
    }
  }
}

void sub_207C83988(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;

  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v24 = *(float *)(a3 + 4 * (v12 + v12 * a4) - 4);
        v25 = (float *)(a5 + 4 * v12 * a6);
        v26 = (float *)(a5 + a6 * (4 * a2 - 8));
        v27 = __N;
        do
        {
          v28 = *v25 * a7;
          *v25++ = v28;
          *v26 = (float)(*v26 * a7) - (float)(v28 * v24);
          ++v26;
          --v27;
        }
        while (v27);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v82 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v12 * a6), 1);
      a7 = v82;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = a3 + 4 * (v12 + v12 * a4);
      v14 = *(float *)(v13 - 8);
      v15 = *(float *)(v13 - 4);
      v16 = *(float *)(a3 + 4 * (a2 + (a2 - 2) * a4) - 12);
      v17 = (float *)(a5 + 4 * v12 * a6);
      v18 = (float *)(a5 + a6 * (4 * a2 - 8));
      v19 = (float *)(a5 + a6 * (4 * a2 - 12));
      v20 = __N;
      do
      {
        v21 = *v17 * a7;
        *v17 = v21;
        v22 = (float)(*v18 * a7) - (float)(v21 * v15);
        *v18++ = v22;
        v23 = *v17++;
        *v19 = -(float)((float)((float)(v16 * v22) + (float)(v23 * v14)) - (float)(*v19 * a7));
        ++v19;
        --v20;
      }
      while (v20);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v29 = v12 + 1;
    v30 = 8 * a4;
    v31 = 8 * a6;
    while (1)
    {
      v32 = v29 - 4;
      if (__N >= 4)
      {
        v33 = 0;
        v34 = a3 + 4 * v32;
        v35 = (float32x2_t *)(v34 + 4 * v29 * a4);
        v36 = 4;
        if (a2 - v32 > 4)
          v36 = a2 - v32;
        v37 = (__int32 *)(v34 + 4 * (v29 - 1) * a4);
        v38 = &v37[-a4];
        while (1)
        {
          v39 = a5 + 4 * v33;
          v40 = (float32x4_t *)(v39 + 4 * v29 * a6);
          v41 = 0uLL;
          if ((v36 & 1) != 0)
          {
            v47 = vmlaq_n_f32((float32x4_t)0, *v40, COERCE_FLOAT(*(_OWORD *)v35->f32));
            v44 = vmlaq_lane_f32((float32x4_t)0, *v40, *v35, 1);
            v43 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 2);
            v42 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 3);
            v40 = (float32x4_t *)((char *)v40 + 4 * a6);
            v45 = v36 - 5;
            v46 = (float32x2_t *)((char *)v35 + 4 * a4);
            if (v36 != 5)
            {
LABEL_21:
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              do
              {
                v47 = vmlaq_n_f32(v47, *v40, COERCE_FLOAT(*(_OWORD *)v46->f32));
                v44 = vmlaq_lane_f32(v44, *v40, *v46, 1);
                v43 = vmlaq_laneq_f32(v43, *v40, *(float32x4_t *)v46->f32, 2);
                v42 = vmlaq_laneq_f32(v42, *v40, *(float32x4_t *)v46->f32, 3);
                v51 = *(float32x4_t *)&v46->f32[a4];
                v52 = *(float32x4_t *)((char *)v40 + 4 * a6);
                v48 = vmlaq_n_f32(v48, v52, v51.f32[0]);
                v49 = vmlaq_lane_f32(v49, v52, *(float32x2_t *)v51.f32, 1);
                v50 = vmlaq_laneq_f32(v50, v52, v51, 2);
                v41 = vmlaq_laneq_f32(v41, v52, v51, 3);
                v46 = (float32x2_t *)((char *)v46 + v30);
                v40 = (float32x4_t *)((char *)v40 + v31);
                v45 -= 2;
              }
              while (v45);
              goto LABEL_26;
            }
          }
          else
          {
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = v36 - 4;
            v46 = v35;
            v47 = 0uLL;
            if (v36 != 4)
              goto LABEL_21;
          }
          v50 = 0uLL;
          v49 = 0uLL;
          v48 = 0uLL;
LABEL_26:
          v53 = vaddq_f32(v48, v47);
          v54 = vaddq_f32(v41, v42);
          v55 = (float32x4_t *)(v39 + 4 * v32 * a6);
          v56 = vmulq_n_f32(*(float32x4_t *)((char *)v55 + 4 * a6), a7);
          v57 = vsubq_f32(vmulq_n_f32(*v55, a7), v53);
          v58 = vsubq_f32(v56, vaddq_f32(v49, v44));
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 8 * a6), a7), vaddq_f32(v50, v43));
          v60 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 12 * a6), a7), v54);
          v53.i32[0] = *v37;
          v56.i32[0] = v37[1];
          v61 = vmlsq_lane_f32(v57, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[2];
          v62 = vmlsq_lane_f32(v59, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[-a4];
          v63 = vmlsq_lane_f32(v61, v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[1];
          v64 = vmlsq_lane_f32(vmlsq_lane_f32(v58, v60, *(float32x2_t *)v56.f32, 0), v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[-a4];
          *v55 = vmlsq_lane_f32(v63, v64, *(float32x2_t *)v53.f32, 0);
          *(float32x4_t *)((char *)v55 + 4 * a6) = v64;
          *(float32x4_t *)((char *)v55 + 8 * a6) = v62;
          *(float32x4_t *)((char *)v55 + 12 * a6) = v60;
          v33 += 4;
          if (v33 >= __N - 3)
            goto LABEL_29;
        }
      }
      v33 = 0;
LABEL_29:
      if (v33 < __N)
        break;
LABEL_39:
      v81 = v29 < 5;
      v29 -= 4;
      if (v81)
        return;
    }
    v65 = a3 + 4 * v32;
    v66 = (float32x4_t *)(v65 + 4 * v29 * a4);
    v67 = a2 - v32;
    if (a2 - v32 <= 4)
      v67 = 4;
    v68 = (float *)(v65 + 4 * (v29 - 1) * a4);
    v69 = &v68[-a4];
    while (1)
    {
      v70 = a5 + 4 * v33;
      v71 = (float *)(v70 + 4 * v29 * a6);
      v72 = 0uLL;
      if ((v67 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v66, *v71);
        v71 += a6;
        v74 = v67 - 5;
        v75 = (float32x4_t *)((char *)v66 + 4 * a4);
        if (v67 != 5)
        {
          do
          {
LABEL_37:
            v73 = vmlaq_n_f32(v73, *v75, *v71);
            v72 = vmlaq_n_f32(v72, *(float32x4_t *)((char *)v75 + 4 * a4), v71[a6]);
            v75 = (float32x4_t *)((char *)v75 + v30);
            v71 = (float *)((char *)v71 + v31);
            v74 -= 2;
          }
          while (v74);
        }
      }
      else
      {
        v73 = 0uLL;
        v74 = v67 - 4;
        v75 = v66;
        if (v67 != 4)
          goto LABEL_37;
      }
      v76 = vaddq_f32(v72, v73);
      v77 = (float *)(v70 + 4 * v32 * a6);
      v78 = -(float)(v76.f32[0] - (float)(*v77 * a7));
      v76.f32[0] = -(float)(v76.f32[3] - (float)(v77[3 * a6] * a7));
      v79 = (float)-(float)(v76.f32[2] - (float)(v77[2 * a6] * a7)) - (float)(v76.f32[0] * v68[2]);
      v80 = (float)((float)-(float)(v76.f32[1] - (float)(v77[a6] * a7)) - (float)(v76.f32[0] * v68[1]))
          - (float)(v79 * v69[1]);
      *v77 = (float)((float)(v78 - (float)(v76.f32[0] * *v68)) - (float)(v79 * v68[-a4])) - (float)(v80 * v69[-a4]);
      v77[a6] = v80;
      v77[2 * a6] = v79;
      v77[3 * a6] = v76.f32[0];
      if (++v33 == __N)
        goto LABEL_39;
    }
  }
}

void sub_207C83E18(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t *v50;
  uint64_t v51;
  float32x2_t *v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  float *v86;
  float *v87;
  uint64_t v88;
  float *v89;
  float32x4_t v90;
  float32x4_t *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;

  v9 = a4;
  v10 = a7;
  v13 = a2 - 1;
  v103 = a3;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v29 = (float *)(a3 + 4 * (a4 + 1) * v13);
        v30 = *(v29 - 1);
        v31 = v10 / *v29;
        v32 = (float *)(a5 + 4 * v13 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 2));
        do
        {
          v36 = v31 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v30));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v13 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v13 + v13 * a4)), (float *)(a5 + 4 * v13 * a6), 1);
      v10 = a7;
      a3 = v103;
      v9 = a4;
      v13 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v14 = (float *)(a3 + 4 * (a4 + 1) * v13);
      v16 = *(v14 - 2);
      v15 = *(v14 - 1);
      v17 = (a2 - 2) * a4;
      v18 = *(float *)(a3 + 4 * (a2 - 3 + v17));
      v19 = v10 / *v14;
      v20 = 1.0 / *(float *)(a3 + 4 * (v17 + a2 - 2));
      v21 = (float *)(a5 + 4 * v13 * a6);
      v22 = (float *)(a5 + a6 * (4 * a2 - 8));
      v23 = (float *)(a5 + a6 * (4 * a2 - 12));
      v24 = __N;
      v25 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 3));
      do
      {
        v26 = v19 * *v21;
        *v21 = v26;
        v27 = v20 * (float)((float)(*v22 * v10) - (float)(v26 * v15));
        *v22++ = v27;
        v28 = *v21++;
        *v23 = v25 * (float)-(float)((float)((float)(v18 * v27) + (float)(v28 * v16)) - (float)(*v23 * v10));
        ++v23;
        --v24;
      }
      while (v24);
    }
    v13 = a2 - 4;
  }
  v102 = a2;
  if ((v13 & 0x8000000000000000) == 0)
  {
    v37 = v13 + 1;
    v38 = 8 * v9;
    v100 = v9 + 1;
    v39 = v9;
    v40 = -v9;
    v41 = 8 * a6;
    while (1)
    {
      v42 = v37 - 4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v37 - 4) * v100);
      v44 = 1.0 / *(float *)(a3 + 4 * (v37 - 3) * v100);
      v45 = 1.0 / *(float *)(a3 + 4 * (v37 - 2) * v100);
      v46 = (v37 - 1) * v9;
      v47 = 1.0 / *(float *)(a3 + 4 * (v37 - 1 + v46));
      if (__N >= 4)
      {
        v48 = 0;
        v49 = a3 + 4 * v42;
        v50 = (float32x2_t *)(v49 + 4 * v37 * v9);
        if (v102 - v42 <= 4)
          v51 = 4;
        else
          v51 = v102 - v42;
        v52 = (float32x2_t *)((char *)v50 + 4 * v9);
        v53 = (__int32 *)(v49 + 4 * v46);
        v54 = &v53[v40];
        while (1)
        {
          v55 = a5 + 4 * v48;
          v56 = (float32x4_t *)(v55 + 4 * v37 * a6);
          v57 = 0uLL;
          if ((v51 & 1) != 0)
          {
            v63 = vmlaq_n_f32((float32x4_t)0, *v56, COERCE_FLOAT(*(_OWORD *)v50->f32));
            v60 = vmlaq_lane_f32((float32x4_t)0, *v56, *v50, 1);
            v59 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 2);
            v58 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 3);
            v56 = (float32x4_t *)((char *)v56 + 4 * a6);
            v61 = v51 - 5;
            v62 = v52;
            if (v51 != 5)
            {
LABEL_22:
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v63 = vmlaq_n_f32(v63, *v56, COERCE_FLOAT(*(_OWORD *)v62->f32));
                v60 = vmlaq_lane_f32(v60, *v56, *v62, 1);
                v59 = vmlaq_laneq_f32(v59, *v56, *(float32x4_t *)v62->f32, 2);
                v58 = vmlaq_laneq_f32(v58, *v56, *(float32x4_t *)v62->f32, 3);
                v67 = *(float32x4_t *)&v62->f32[v39];
                v68 = *(float32x4_t *)((char *)v56 + 4 * a6);
                v64 = vmlaq_n_f32(v64, v68, v67.f32[0]);
                v65 = vmlaq_lane_f32(v65, v68, *(float32x2_t *)v67.f32, 1);
                v66 = vmlaq_laneq_f32(v66, v68, v67, 2);
                v57 = vmlaq_laneq_f32(v57, v68, v67, 3);
                v62 = (float32x2_t *)((char *)v62 + v38);
                v56 = (float32x4_t *)((char *)v56 + v41);
                v61 -= 2;
              }
              while (v61);
              goto LABEL_27;
            }
          }
          else
          {
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = v51 - 4;
            v62 = v50;
            v63 = 0uLL;
            if (v51 != 4)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v69 = vaddq_f32(v64, v63);
          v70 = vaddq_f32(v65, v60);
          v71 = vaddq_f32(v57, v58);
          v72 = (float32x4_t *)(v55 + 4 * v42 * a6);
          v73 = vmulq_n_f32(*(float32x4_t *)((char *)v72 + 8 * a6), v10);
          v74 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 4 * a6), v10), v70);
          v75 = vsubq_f32(v73, vaddq_f32(v66, v59));
          v76 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 12 * a6), v10), v71), v47);
          v70.i32[0] = *v53;
          v73.i32[0] = v53[1];
          v77 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v72, v10), v69), v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[2];
          v78 = vmlsq_lane_f32(v75, v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[v40];
          v79 = vmulq_n_f32(v78, v45);
          v80 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[1];
          v81 = vmlsq_lane_f32(vmlsq_lane_f32(v74, v76, *(float32x2_t *)v73.f32, 0), v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[v40];
          v82 = vmulq_n_f32(v81, v44);
          *v72 = vmulq_n_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v70.f32, 0), v43);
          *(float32x4_t *)((char *)v72 + 4 * a6) = v82;
          *(float32x4_t *)((char *)v72 + 8 * a6) = v79;
          *(float32x4_t *)((char *)v72 + 12 * a6) = v76;
          v48 += 4;
          if (v48 >= __N - 3)
            goto LABEL_30;
        }
      }
      v48 = 0;
LABEL_30:
      a3 = v103;
      v9 = a4;
      if (v48 < __N)
        break;
LABEL_40:
      v99 = v37 < 5;
      v37 -= 4;
      if (v99)
        return;
    }
    v83 = v103 + 4 * v42;
    v84 = (float32x4_t *)(v83 + 4 * v37 * a4);
    v85 = v102 - v42;
    if (v102 - v42 <= 4)
      v85 = 4;
    v86 = (float *)(v83 + 4 * v46);
    v87 = &v86[v40];
    while (1)
    {
      v88 = a5 + 4 * v48;
      v89 = (float *)(v88 + 4 * v37 * a6);
      v90 = 0uLL;
      if ((v85 & 1) != 0)
      {
        v93 = vmlaq_n_f32((float32x4_t)0, *v84, *v89);
        v89 += a6;
        v91 = (float32x4_t *)((char *)v84 + 4 * a4);
        v92 = v85 - 5;
        if (v85 != 5)
        {
          do
          {
LABEL_38:
            v93 = vmlaq_n_f32(v93, *v91, *v89);
            v90 = vmlaq_n_f32(v90, *(float32x4_t *)((char *)v91 + v39 * 4), v89[a6]);
            v89 = (float *)((char *)v89 + v41);
            v91 = (float32x4_t *)((char *)v91 + v38);
            v92 -= 2;
          }
          while (v92);
        }
      }
      else
      {
        v91 = v84;
        v92 = v85 - 4;
        v93 = 0uLL;
        if (v85 != 4)
          goto LABEL_38;
      }
      v94 = vaddq_f32(v93, v90);
      v95 = (float *)(v88 + 4 * v42 * a6);
      v96 = -(float)(v94.f32[0] - (float)(*v95 * v10));
      v94.f32[0] = v47 * (float)-(float)(v94.f32[3] - (float)(v95[3 * a6] * v10));
      v97 = v45 * (float)((float)-(float)(v94.f32[2] - (float)(v95[2 * a6] * v10)) - (float)(v94.f32[0] * v86[2]));
      v98 = v44
          * (float)((float)((float)-(float)(v94.f32[1] - (float)(v95[a6] * v10)) - (float)(v94.f32[0] * v86[1]))
                  - (float)(v97 * v87[1]));
      *v95 = v43
           * (float)((float)((float)(v96 - (float)(v94.f32[0] * *v86)) - (float)(v97 * v86[v40]))
                   - (float)(v98 * v87[v40]));
      v95[a6] = v98;
      v95[2 * a6] = v97;
      v95[3 * a6] = v94.f32[0];
      if (++v48 == __N)
        goto LABEL_40;
    }
  }
}

void sub_207C84370(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  if ((a1 & 1) != 0)
    sub_207C843BC(a2, a3, a4, a5, a6, a7, a8, a17, a9.f32[0], a10.f32[0]);
  else
    sub_207C845C0(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
}

void sub_207C843BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;

  v32 = a2;
  v33 = a7;
  v10 = a10;
  v30 = a3;
  v31 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v28) = a8;
      else
        v28 = -a8;
      cblas_sscal(v32, a10, &v33[((v32 - 1) * a8) & (a8 >> 63)], v28);
    }
  }
  else
  {
    sub_207C86DBC();
    v29[3] = v29;
    MEMORY[0x24BDAC7A8]();
    v17 = (void *)(((unint64_t)v29 - v16) & 0xFFFFFFFFFFFFFFC0);
    v19 = (uint64_t)v17 + 4 * v18;
    v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v17, v20 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v19 + 2048), v21);
    if (a1 >= 1)
    {
      v22 = 0;
      v23 = a1;
      do
      {
        v24 = v23 - 512;
        if (v23 >= 512)
          v23 = 512;
        if (a1 - v22 >= 512)
          v25 = 512;
        else
          v25 = a1 - v22;
        if (a1 - v22 >= 1)
        {
          v26 = a5;
          v27 = (_DWORD *)v19;
          do
          {
            *v27++ = *v26;
            v26 += a6;
            --v23;
          }
          while (v23);
        }
        sub_207C8ED3C(v25, v32, v30 + 4 * v22, v31, v19, v33, a8, a9, v10);
        v22 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v23 = v24;
      }
      while (v22 < a1);
    }
  }
}

void sub_207C845C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;

  if (a9.f32[0] == 0.0)
  {
    if (a10.f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v38) = a8;
      else
        v38 = -a8;
      cblas_sscal(a1, a10.f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v38);
    }
  }
  else
  {
    sub_207C8D060(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
  }
}

uint64_t sub_207C84600(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

void sub_207C84974(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, float *a8, float a9, int a10, char *a11, int a12)
{
  int v13;
  int v14;
  int v18;
  char *v21;
  char *v22;
  int v23;
  int v25;
  int v26;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char vars0;

  v13 = a7;
  v14 = a6;
  v18 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v23 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a10 < (int)a7 || a10 <= 0)
      {
        v33 = a10;
        v35 = a7;
        v22 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v36 = a2;
        v33 = 142;
        v35 = 141;
        v22 = "SIDE must be %d or %d, but is set to %d";
        v29 = 2;
        goto LABEL_41;
      }
      if (a10 < (int)a6 || a10 <= 0)
      {
        v33 = a10;
        v35 = a6;
        v22 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v29 = 10;
LABEL_41:
        v26 = cblas_errprn(v29, 2000, v22, v33, v35, v36);
        goto LABEL_43;
      }
    }
    v26 = 2000;
LABEL_43:
    if (a12 >= v13 && a12 > 0)
      goto LABEL_47;
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v26 = v23;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a10 >= (int)a7 && a10 > 0)
      goto LABEL_24;
    v32 = a10;
    v34 = a7;
    v21 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v34 = 141;
      v36 = a2;
      v32 = 142;
      v21 = "SIDE must be %d or %d, but is set to %d";
      v25 = 2;
      goto LABEL_26;
    }
    if (a10 >= (int)a6 && a10 > 0)
    {
LABEL_24:
      v26 = 2000;
      goto LABEL_27;
    }
    v32 = a10;
    v34 = a6;
    v21 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v25 = 10;
LABEL_26:
  v26 = cblas_errprn(v25, 2000, v21, v32, v34, v36);
LABEL_27:
  if (a12 < v14 || a12 <= 0)
  {
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v26 = cblas_errprn(3, v26, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v26 = cblas_errprn(4, v26, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v26 = cblas_errprn(6, v26, "M cannot be less than zero; it is set to %d.", v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v26 = cblas_errprn(5, v26, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v14 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v26 = cblas_errprn(7, v26, "N cannot be less than zero; it is set to %d.", v13);
LABEL_54:
  if (v26 == 2000)
  {
    if (a1 == 102)
    {
      sub_207C82B14(v18, a3, a4, a5, v14, v13, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
    else
    {
      if (v18 == 141)
        v30 = 142;
      else
        v30 = 141;
      if (a3 == 121)
        v31 = 122;
      else
        v31 = 121;
      sub_207C82B14(v30, v31, a4, a5, v13, v14, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v26, "cblas_strsm", "");
  }
}

uint64_t sub_207C84D30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C85320(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C858D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C85E30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

double *sub_207C86314(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_207C86384(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_207C863F0(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_207C86384(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

void sub_207C8651C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t (**a13)(), uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int a24,__int16 a25,__int16 a26,char a27)
{
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t (**v42)();
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t vars8;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *(*v96)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v97)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v98;

  v33 = MEMORY[0x24BDAC7A8]();
  v79 = v34;
  v73 = v35;
  v36 = v31;
  v37 = v29;
  v39 = v38;
  v40 = v33;
  v43 = a12;
  v42 = a13;
  STACK[0x10118] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_24C06E718;
  if (!a13)
    v42 = off_24C06E758;
  v91 = (uint64_t)v42;
  v44 = v43 + 1;
  if (v27 == 111)
    v45 = 1;
  else
    v45 = v32;
  v85 = v45;
  v86 = v32;
  if (v27 == 111)
    v46 = v32;
  else
    v46 = 1;
  v72 = v46;
  if (v27 == 111)
    v44 = v43;
  v84 = *v44;
  if (v28 == 111)
    v47 = 1;
  else
    v47 = a9;
  v77 = v47;
  v78 = a9;
  v48 = 3;
  if (v28 == 111)
    v48 = 2;
  v76 = v43[v48];
  if (v31 <= 512)
    v49 = 64;
  else
    v49 = 384;
  v50 = 256;
  if (v29 < 512)
    v50 = 64;
  v87 = v50;
  a26 = 0;
  v51 = 8;
  if (v29 < 512)
    v51 = 6;
  v52 = ((((unint64_t)(v49 << v51) >> 6) & 0x1FFFF) << 8) | 0x40;
  v89 = v30;
  v53 = ((unint64_t)(v30 * v49) >> 6 << 8) | 0x20;
  if ((unint64_t)(v52 + v53) > 0x10000)
  {
    v55 = v49;
    v56 = (char *)malloc_type_malloc(v52 + v53, 0xC9775249uLL);
    v49 = v55;
    v90 = v56;
    v98 = &v56[v53];
    LOBYTE(a26) = 1;
    v54 = (__int16 *)((char *)&a26 + 1);
  }
  else
  {
    v98 = &a27;
    v90 = &a27 + v52;
    HIBYTE(a26) = 0;
    v54 = &a26;
  }
  *(_BYTE *)v54 = 0;
  if (v36 >= 1)
  {
    v82 = 0;
    v57 = 0;
    v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v91;
    v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 24);
    if (v89 <= 0)
      v58 = -(-v89 & 3);
    else
      v58 = v89 & 3;
    v93 = v58;
    v59 = v49;
    v74 = v49;
    v75 = v36;
    vars8 = v37;
    do
    {
      v81 = v59;
      if (v36 >= v59)
        v60 = v59;
      else
        v60 = v36;
      v80 = v57 + v49;
      if (v57 + v49 <= v36)
        v61 = v49;
      else
        v61 = v36 - v57;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v76)(v61, v89, v79 + 4 * v57 * v77, v78, v90, v40);
      if (v37 >= 1)
      {
        v62 = 0;
        v63 = 16 * (v60 + v82);
        v88 = v73 + 4 * v57 * v72;
        v65 = v39 != 1.0 && v57 == 0 && v39 != 0.0;
        v66 = (float32x4_t *)v85;
        do
        {
          v94 = v62 + v87;
          if (v62 + v87 <= v37)
            v67 = v87;
          else
            v67 = v37 - v62;
          if ((v67 & 7) != 0)
          {
            v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v91 + 8);
            v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 32);
          }
          v92 = v62;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v84)(v67, v61, v88 + 4 * v62 * v85, v86, v98);
          v95 = (uint64_t)v66;
          v68 = 0;
          if (v89 >= 4)
          {
            v69 = v90;
            do
            {
              if (v65)
                v97(v98, v69, v66, v86, v67, v61, v39);
              else
                v96(v98, v69, v66, v86, v67, v61);
              v68 += 4;
              v69 += v63;
              v66 += v86;
            }
            while (v68 < v89 - 3);
          }
          if (v93)
          {
            v70 = v85 + 4 * v92 + 4 * v68 * v86;
            v71 = &v90[4 * v68 * v61];
            if (v65)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v91 + 40))(v98, v71, v70, v86, v67, v93, v61, v39);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v71, v70, v86, v67, v93, v61);
          }
          v37 = vars8;
          v66 = (float32x4_t *)(v95 + 4 * v87);
          v62 = v94;
        }
        while (v94 < vars8);
      }
      v49 = v74;
      v36 = v75;
      v59 = v81 + v74;
      v82 -= v74;
      v57 = v80;
      v97 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
      v96 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
    }
    while (v80 < v75);
  }
  if (HIBYTE(a26))
    free(v98);
  if ((_BYTE)a26)
    free(v90);
}

uint64_t sub_207C869A0(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t sub_207C86C94()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  qos_class_self();
  dword_2545307F8 = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_2545307FC = v0;
  v1 = dword_2545307F8;
  if (dword_2545307F8 == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_207C86E1C();
    v1 = 1;
    dword_2545307F8 = 1;
    goto LABEL_12;
  }
  if (!dword_2545307F8)
  {
    v1 = 2;
    dword_2545307F8 = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_2545307FC = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_2545307FC > v4)
      {
        dword_2545307F8 = v4;
        dword_2545307FC = v4;
      }
    }
  }
  byte_254530804 = getenv("APPLE_LAPACK_FILL_NAN") != 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = sub_207C804CC((uint64_t)&v6);
  dword_254530808 = DWORD1(v7);
  unk_254530810 = *((_QWORD *)&v8 + 1);
  dword_254530818 = DWORD2(v9);
  return result;
}

uint64_t sub_207C86DBC()
{
  if (qword_254530820 != -1)
    dispatch_once(&qword_254530820, &unk_24C06E7A8);
  if ((dword_254530800 - 1) > 2)
    return 16;
  else
    return dword_20822AA90[dword_254530800 - 1];
}

void sub_207C86E1C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

uint64_t sub_207C86E60(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, double a7, int16x8_t _Q1)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float16x8_t *v17;
  uint64_t v18;
  float16x8_t *v19;
  uint64_t v20;
  float16x8_t *v21;
  uint64_t v22;
  float16x8_t *v23;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x8_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x8_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  int8x8_t v68;
  float32x4_t v69;
  int8x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x4_t v75;
  int8x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unint64_t v79;
  float16x8_t *v80;
  float16x8_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float16x8_t *v89;
  float16x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float16x8_t *v97;
  float16x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float16x8_t *v105;
  float16x8_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  __int16 v121;
  __int16 v124;
  int8x16_t v125;
  __int16 v130;
  __int16 v135;
  __int16 v140;
  __int16 v145;
  __int16 v150;
  __int16 v155;
  __int16 v160;
  __int16 v163;
  int8x16_t v164;
  __int16 v169;
  __int16 v174;
  __int16 v179;
  __int16 v184;
  __int16 v189;
  __int16 v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  int8x8_t v199;
  float32x4_t v200;
  int8x8_t v204;
  float32x4_t v205;
  __int16 v209;
  __int16 v212;
  int8x16_t v213;
  __int16 v218;
  __int16 v223;
  __int16 v227;
  __int16 v232;
  __int16 v237;
  __int16 v242;
  __int16 v247;
  __int16 v250;
  int8x16_t v251;
  __int16 v256;
  __int16 v261;
  __int16 v265;
  __int16 v270;
  __int16 v275;
  __int16 v280;
  int8x16_t v281;
  int8x16_t v282;
  float32x4_t v283;
  int8x8_t v285;
  float32x4_t v286;
  float32x4_t v288;
  float32x4_t v291;
  __int16 v295;
  __int16 v298;
  int8x16_t v299;
  __int16 v304;
  __int16 v309;
  __int16 v313;
  __int16 v318;
  __int16 v323;
  __int16 v328;
  __int16 v333;
  __int16 v336;
  int8x16_t v337;
  __int16 v342;
  __int16 v347;
  __int16 v351;
  __int16 v356;
  __int16 v361;
  __int16 v366;
  int8x16_t v367;
  int8x16_t v368;
  float32x4_t v369;
  int8x8_t v371;
  float32x4_t v372;
  float32x4_t v374;
  float32x4_t v377;
  __int16 v381;
  __int16 v384;
  int8x16_t v385;
  __int16 v390;
  __int16 v395;
  __int16 v399;
  __int16 v404;
  __int16 v409;
  __int16 v414;
  __int16 v419;
  __int16 v422;
  int8x16_t v423;
  __int16 v428;
  __int16 v433;
  __int16 v437;
  __int16 v442;
  __int16 v447;
  __int16 v452;
  float32x4_t v453;
  int8x8_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t i;
  unint64_t v465;
  uint64_t j;
  unint64_t v469;
  unint64_t v470;
  __int128 *v474;
  __int128 *v487;
  unint64_t v488;
  __int16 v493;
  __int16 v496;
  int8x16_t v497;
  __int16 v500;
  __int16 v503;
  __int16 v506;
  __int16 v509;
  __int16 v512;
  __int16 v515;
  __int16 v518;
  __int16 v521;
  int8x16_t v522;
  __int16 v525;
  __int16 v528;
  __int16 v531;
  __int16 v534;
  __int16 v537;
  __int16 v540;
  _OWORD v544[2];
  _OWORD v545[2];
  uint64_t v546;

  v546 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 3) != 0 || a2 - 0x10000 < 0xFFFFFFFFFFFF0010 || (a4 | a3) >> 16)
  {
    if (a3)
    {
      v458 = 0;
      v459 = 0;
      v460 = 0;
      LOWORD(_S0) = 1024;
      do
      {
        if (a2)
        {
          for (i = 0; i != a2; ++i)
          {
            _Q1.i16[0] = *(_WORD *)(result + 2 * i);
            __asm
            {
              FCVT            S2, H1
              FCVT            S3, H0
            }
            if (_S3 < _S2)
            {
              _S0 = *(float *)_Q1.i32;
              v460 = v458;
              v459 = i;
            }
          }
        }
        ++v458;
        result += 2 * a4;
      }
      while (v458 != a3);
    }
    else
    {
      v460 = 0;
      v459 = 0;
    }
    *a5 = v460;
    *a6 = v459;
  }
  else
  {
    if (a3)
    {
      v8 = 0;
      _Q0.i64[0] = 0x400040004000400;
      _Q0.i64[1] = 0x400040004000400;
      v10 = a2 - 16;
      v11 = result + 32;
      _Q1 = 0uLL;
      v12.i64[0] = 0x4000400040004;
      v12.i64[1] = 0x4000400040004;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      _Q7.i64[0] = 0x400040004000400;
      _Q7.i64[1] = 0x400040004000400;
      do
      {
        v17 = (float16x8_t *)(result + 2 * v8 * a4);
        if ((v8 | 1) >= a3)
          v18 = 0;
        else
          v18 = a4;
        v19 = (float16x8_t *)((char *)v17 + 2 * v18);
        if ((v8 | 2) >= a3)
          v20 = 0;
        else
          v20 = a4;
        v21 = (float16x8_t *)((char *)v19 + 2 * v20);
        if ((v8 | 3) >= a3)
          v22 = 0;
        else
          v22 = a4;
        v23 = (float16x8_t *)((char *)v21 + 2 * v22);
        _Q22 = *v17;
        _Q21 = v17[1];
        _Q20 = *v19;
        _Q19 = v19[1];
        _Q16 = *v21;
        _Q6 = v21[1];
        _Q5 = *v23;
        _Q4 = v23[1];
        if (a2 >= 0x20)
        {
          v33 = 2 * v18;
          v34 = v33 + 2 * v20;
          v35 = v34 + 2 * v22;
          v36 = v11;
          v37 = 16;
          v38 = *v23;
          v39 = v23[1];
          v40 = *v21;
          v41 = v21[1];
          v42 = *v19;
          v43 = v19[1];
          v44 = *v17;
          v45 = v17[1];
          do
          {
            v46 = *(float16x8_t *)(v36 + 16);
            v47 = vcvtq_f32_f16(*(float16x4_t *)v36);
            *(int8x8_t *)_Q22.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v44.i8), v47)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v47), (int8x16_t)vcgezq_f32(v47)))), *(int8x8_t *)v44.i8, *(int8x8_t *)v36);
            v48 = vcvt_hight_f32_f16(*(float16x8_t *)v36);
            v49 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v44), v48)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v48), (int8x16_t)vcgezq_f32(v48)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v36, *(int8x16_t *)v36, 8uLL));
            v50 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
            *(int8x8_t *)_Q21.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v45.i8), v50)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v50), (int8x16_t)vcgezq_f32(v50)))), *(int8x8_t *)v45.i8, *(int8x8_t *)v46.i8);
            v48.i64[0] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
            v51 = vcvt_hight_f32_f16(v46);
            v52 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v45), v51)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v51), (int8x16_t)vcgezq_f32(v51)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), *(int8x8_t *)v48.f32);
            v54 = *(float16x8_t *)(v36 + v33);
            v53 = *(float16x8_t *)(v36 + v33 + 16);
            v55 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
            *(int8x8_t *)_Q20.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v42.i8), v55)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v55), (int8x16_t)vcgezq_f32(v55)))), *(int8x8_t *)v42.i8, *(int8x8_t *)v54.i8);
            v47.i64[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
            v56 = vcvt_hight_f32_f16(v54);
            v57 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v42), v56)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v56), (int8x16_t)vcgezq_f32(v56)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), *(int8x8_t *)v47.f32);
            v58 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
            *(int8x8_t *)_Q19.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v43.i8), v58)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v58), (int8x16_t)vcgezq_f32(v58)))), *(int8x8_t *)v43.i8, *(int8x8_t *)v53.i8);
            v55.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
            v59 = vcvt_hight_f32_f16(v53);
            v60 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v43), v59)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v59), (int8x16_t)vcgezq_f32(v59)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), *(int8x8_t *)v55.f32);
            v62 = *(float16x8_t *)(v36 + v34);
            v61 = *(float16x8_t *)(v36 + v34 + 16);
            v63 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
            *(int8x8_t *)_Q16.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v40.i8), v63)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v63), (int8x16_t)vcgezq_f32(v63)))), *(int8x8_t *)v40.i8, *(int8x8_t *)v62.i8);
            v64 = (int8x8_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
            v65 = vcvt_hight_f32_f16(v62);
            v66 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v40), v65)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v65), (int8x16_t)vcgezq_f32(v65)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), v64);
            v67 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
            *(int8x8_t *)_Q6.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v41.i8), v67)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v67), (int8x16_t)vcgezq_f32(v67)))), *(int8x8_t *)v41.i8, *(int8x8_t *)v61.i8);
            v68 = (int8x8_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
            v69 = vcvt_hight_f32_f16(v61);
            v70 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v41), v69)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v69), (int8x16_t)vcgezq_f32(v69)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), v68);
            v71 = *(float16x8_t *)(v36 + v35);
            v72 = *(float16x8_t *)(v36 + v35 + 16);
            v73 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(int8x8_t *)_Q5.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v38.i8), v73)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v73), (int8x16_t)vcgezq_f32(v73)))), *(int8x8_t *)v38.i8, *(int8x8_t *)v71.i8);
            v74 = (int8x8_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
            v75 = vcvt_hight_f32_f16(v71);
            v76 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v38), v75)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v75), (int8x16_t)vcgezq_f32(v75)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), v74);
            v77 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
            v78 = vcvt_hight_f32_f16(v72);
            *(int8x8_t *)_Q4.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v39.i8), v77)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v77), (int8x16_t)vcgezq_f32(v77)))), *(int8x8_t *)v39.i8, *(int8x8_t *)v72.i8);
            v32 = v37 + 16;
            v36 += 32;
            v79 = v37 + 32;
            _Q5.u64[1] = (unint64_t)v76;
            v37 += 16;
            v38 = _Q5;
            _Q16.u64[1] = (unint64_t)v66;
            _Q4.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v39), v78)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v78), (int8x16_t)vcgezq_f32(v78)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL));
            v39 = _Q4;
            v40 = _Q16;
            _Q20.u64[1] = (unint64_t)v57;
            _Q6.u64[1] = (unint64_t)v70;
            v41 = _Q6;
            v42 = _Q20;
            _Q22.u64[1] = (unint64_t)v49;
            _Q19.u64[1] = (unint64_t)v60;
            v43 = _Q19;
            v44 = _Q22;
            _Q21.u64[1] = (unint64_t)v52;
            v45 = _Q21;
          }
          while (v79 <= a2);
        }
        else
        {
          v32 = 16;
        }
        if (v32 < a2)
        {
          v80 = (float16x8_t *)((char *)v17 + 2 * v10);
          v81 = v80[1];
          v82 = vcvtq_f32_f16(*(float16x4_t *)v80->i8);
          v83 = (int8x8_t)vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
          v84 = vcvt_hight_f32_f16(_Q22);
          *(int8x8_t *)_Q22.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q22.i8), v82)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v82), (int8x16_t)vcgezq_f32(v82)))), *(int8x8_t *)_Q22.i8, *(int8x8_t *)v80->i8);
          v85 = vcvt_hight_f32_f16(*v80);
          _Q22.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v84, v85)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v85), (int8x16_t)vcgezq_f32(v85)))), v83, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v80, *(int8x16_t *)v80, 8uLL));
          v86 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
          v82.i64[0] = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
          v87 = vcvt_hight_f32_f16(_Q21);
          *(int8x8_t *)_Q21.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q21.i8), v86)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v86), (int8x16_t)vcgezq_f32(v86)))), *(int8x8_t *)_Q21.i8, *(int8x8_t *)v81.i8);
          v86.i64[0] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
          v88 = vcvt_hight_f32_f16(v81);
          _Q21.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v87, v88)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v88), (int8x16_t)vcgezq_f32(v88)))), *(int8x8_t *)v82.f32, *(int8x8_t *)v86.f32);
          v89 = (float16x8_t *)((char *)v19 + 2 * v10);
          v90 = v89[1];
          v91 = vcvtq_f32_f16(*(float16x4_t *)v89->i8);
          v87.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
          v92 = vcvt_hight_f32_f16(_Q20);
          *(int8x8_t *)_Q20.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q20.i8), v91)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v91), (int8x16_t)vcgezq_f32(v91)))), *(int8x8_t *)_Q20.i8, *(int8x8_t *)v89->i8);
          v93 = vcvt_hight_f32_f16(*v89);
          _Q20.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v92, v93)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v93), (int8x16_t)vcgezq_f32(v93)))), *(int8x8_t *)v87.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v89, *(int8x16_t *)v89, 8uLL));
          v94 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
          v91.i64[0] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
          v95 = vcvt_hight_f32_f16(_Q19);
          *(int8x8_t *)_Q19.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q19.i8), v94)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v94), (int8x16_t)vcgezq_f32(v94)))), *(int8x8_t *)_Q19.i8, *(int8x8_t *)v90.i8);
          v94.i64[0] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
          v96 = vcvt_hight_f32_f16(v90);
          _Q19.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v95, v96)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v96), (int8x16_t)vcgezq_f32(v96)))), *(int8x8_t *)v91.f32, *(int8x8_t *)v94.f32);
          v97 = (float16x8_t *)((char *)v21 + 2 * v10);
          v98 = v97[1];
          v99 = vcvtq_f32_f16(*(float16x4_t *)v97->i8);
          v95.i64[0] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
          v100 = vcvt_hight_f32_f16(_Q16);
          *(int8x8_t *)_Q16.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q16.i8), v99)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v99), (int8x16_t)vcgezq_f32(v99)))), *(int8x8_t *)_Q16.i8, *(int8x8_t *)v97->i8);
          v101 = vcvt_hight_f32_f16(*v97);
          _Q16.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v100, v101)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v101), (int8x16_t)vcgezq_f32(v101)))), *(int8x8_t *)v95.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v97, *(int8x16_t *)v97, 8uLL));
          v102 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
          v99.i64[0] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
          v103 = vcvt_hight_f32_f16(_Q6);
          *(int8x8_t *)_Q6.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q6.i8), v102)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v102), (int8x16_t)vcgezq_f32(v102)))), *(int8x8_t *)_Q6.i8, *(int8x8_t *)v98.i8);
          v102.i64[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
          v104 = vcvt_hight_f32_f16(v98);
          _Q6.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v103, v104)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v104), (int8x16_t)vcgezq_f32(v104)))), *(int8x8_t *)v99.f32, *(int8x8_t *)v102.f32);
          v105 = (float16x8_t *)((char *)v23 + 2 * v10);
          v106 = v105[1];
          v107 = vcvtq_f32_f16(*(float16x4_t *)v105->i8);
          v103.i64[0] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
          v108 = vcvt_hight_f32_f16(_Q5);
          *(int8x8_t *)_Q5.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q5.i8), v107)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v107), (int8x16_t)vcgezq_f32(v107)))), *(int8x8_t *)_Q5.i8, *(int8x8_t *)v105->i8);
          v109 = vcvt_hight_f32_f16(*v105);
          _Q5.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v108, v109)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v109), (int8x16_t)vcgezq_f32(v109)))), *(int8x8_t *)v103.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v105, *(int8x16_t *)v105, 8uLL));
          v110 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
          v107.i64[0] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
          v111 = vcvt_hight_f32_f16(_Q4);
          *(int8x8_t *)_Q4.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q4.i8), v110)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v110), (int8x16_t)vcgezq_f32(v110)))), *(int8x8_t *)_Q4.i8, *(int8x8_t *)v106.i8);
          v110.i64[0] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
          v112 = vcvt_hight_f32_f16(v106);
          _Q4.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v111, v112)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v112), (int8x16_t)vcgezq_f32(v112)))), *(int8x8_t *)v107.f32, *(int8x8_t *)v110.f32);
        }
        _H23 = _Q22.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q0.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S24 >= _S23)
          v121 = 0;
        else
          v121 = -1;
        __asm
        {
          FCVT            S23, H22
          FCVT            S24, H0
        }
        if (_S24 >= _S23)
          v124 = 0;
        else
          v124 = -1;
        v125.i16[0] = v124;
        v125.i16[1] = v121;
        _H24 = _Q22.i16[2];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[2];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v130 = 0;
        else
          v130 = -1;
        v125.i16[2] = v130;
        _H24 = _Q22.i16[3];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[3];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v135 = 0;
        else
          v135 = -1;
        v125.i16[3] = v135;
        _H24 = _Q22.i16[4];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[4];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v140 = 0;
        else
          v140 = -1;
        v125.i16[4] = v140;
        _H24 = _Q22.i16[5];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[5];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v145 = 0;
        else
          v145 = -1;
        v125.i16[5] = v145;
        _H24 = _Q22.i16[6];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[6];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v150 = 0;
        else
          v150 = -1;
        v125.i16[6] = v150;
        _H24 = _Q22.i16[7];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[7];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v155 = 0;
        else
          v155 = -1;
        v125.i16[7] = v155;
        _H24 = _Q21.i16[1];
        __asm { FCVT            S24, H24 }
        _H25 = _Q7.i16[1];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v160 = 0;
        else
          v160 = -1;
        __asm
        {
          FCVT            S24, H21
          FCVT            S25, H7
        }
        if (_S25 >= _S24)
          v163 = 0;
        else
          v163 = -1;
        v164.i16[0] = v163;
        v164.i16[1] = v160;
        _H25 = _Q21.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[2];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v169 = 0;
        else
          v169 = -1;
        v164.i16[2] = v169;
        _H25 = _Q21.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v174 = 0;
        else
          v174 = -1;
        v164.i16[3] = v174;
        _H25 = _Q21.i16[4];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v179 = 0;
        else
          v179 = -1;
        v164.i16[4] = v179;
        _H25 = _Q21.i16[5];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v184 = 0;
        else
          v184 = -1;
        v164.i16[5] = v184;
        _H25 = _Q21.i16[6];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v189 = 0;
        else
          v189 = -1;
        v164.i16[6] = v189;
        _H25 = _Q21.i16[7];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v194 = 0;
        else
          v194 = -1;
        v164.i16[7] = v194;
        v195 = vbslq_s8(v164, (int8x16_t)v13, v15);
        v196 = vbslq_s8(v125, (int8x16_t)_Q1, v14);
        v197 = vcvtq_f32_f16(*(float16x4_t *)_Q22.i8);
        _D23 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v197)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v197), (int8x16_t)vcgezq_f32(v197)))), *(int8x8_t *)_Q0.i8, *(int8x8_t *)_Q22.i8);
        v199 = (int8x8_t)vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
        v200 = vcvt_hight_f32_f16(_Q22);
        _D0 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(_Q0), v200)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v200), (int8x16_t)vcgezq_f32(v200)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), v199);
        _Q24 = vcvtq_f32_f16(*(float16x4_t *)_Q21.i8);
        _D22 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q7.i8), _Q24)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(_Q24), (int8x16_t)vcgezq_f32(_Q24)))), *(int8x8_t *)_Q7.i8, *(int8x8_t *)_Q21.i8);
        v204 = (int8x8_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
        v205 = vcvt_hight_f32_f16(_Q21);
        _D21 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(_Q7), v205)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v205), (int8x16_t)vcgezq_f32(v205)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL), v204);
        _H7 = _D22.i16[1];
        __asm { FCVT            S7, H7 }
        _Q24.i16[0] = _Q19.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S7 >= _Q24.f32[0])
          v209 = 0;
        else
          v209 = -1;
        __asm
        {
          FCVT            S7, H22
          FCVT            S24, H19
        }
        if (_S7 >= _S24)
          v212 = 0;
        else
          v212 = -1;
        v213.i16[0] = v212;
        v213.i16[1] = v209;
        _H7 = _D22.i16[2];
        __asm { FCVT            S7, H7 }
        _H25 = _Q19.i16[2];
        __asm { FCVT            S25, H25 }
        if (_S7 >= _S25)
          v218 = 0;
        else
          v218 = -1;
        v213.i16[2] = v218;
        _H7 = _D22.i16[3];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v223 = 0;
        else
          v223 = -1;
        v213.i16[3] = v223;
        __asm { FCVT            S7, H21 }
        _H26 = _Q19.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v227 = 0;
        else
          v227 = -1;
        v213.i16[4] = v227;
        _H7 = _D21.i16[1];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v232 = 0;
        else
          v232 = -1;
        v213.i16[5] = v232;
        _H7 = _D21.i16[2];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v237 = 0;
        else
          v237 = -1;
        v213.i16[6] = v237;
        _H7 = _D21.i16[3];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v242 = 0;
        else
          v242 = -1;
        v213.i16[7] = v242;
        _H7 = _D23.i16[1];
        __asm { FCVT            S7, H7 }
        _H26 = _Q20.i16[1];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v247 = 0;
        else
          v247 = -1;
        __asm
        {
          FCVT            S7, H23
          FCVT            S26, H20
        }
        if (_S7 >= _S26)
          v250 = 0;
        else
          v250 = -1;
        v251.i16[0] = v250;
        v251.i16[1] = v247;
        _H27 = _D23.i16[2];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[2];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v256 = 0;
        else
          v256 = -1;
        v251.i16[2] = v256;
        _H27 = _D23.i16[3];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[3];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v261 = 0;
        else
          v261 = -1;
        v251.i16[3] = v261;
        __asm { FCVT            S27, H0 }
        _H28 = _Q20.i16[4];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v265 = 0;
        else
          v265 = -1;
        v251.i16[4] = v265;
        _H27 = _D0.i16[1];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[5];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v270 = 0;
        else
          v270 = -1;
        v251.i16[5] = v270;
        _H27 = _D0.i16[2];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[6];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v275 = 0;
        else
          v275 = -1;
        v251.i16[6] = v275;
        _H27 = _D0.i16[3];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[7];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v280 = 0;
        else
          v280 = -1;
        v251.i16[7] = v280;
        v281 = vbslq_s8(v251, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x1000100010001, 0x1000100010001)), v196);
        v282 = vbslq_s8(v213, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x1000100010001, 0x1000100010001)), v195);
        v283 = vcvtq_f32_f16(*(float16x4_t *)_Q20.i8);
        _D17 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D23), v283)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v283), (int8x16_t)vcgezq_f32(v283)))), (int8x8_t)_D23, *(int8x8_t *)_Q20.i8);
        v285 = (int8x8_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
        v286 = vcvt_hight_f32_f16(_Q20);
        _D0 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D0), v286)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v286), (int8x16_t)vcgezq_f32(v286)))), (int8x8_t)_D0, v285);
        v288 = vcvtq_f32_f16(*(float16x4_t *)_Q19.i8);
        _D20 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D22), v288)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v288), (int8x16_t)vcgezq_f32(v288)))), (int8x8_t)_D22, *(int8x8_t *)_Q19.i8);
        _D22 = (int8x8_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
        v291 = vcvt_hight_f32_f16(_Q19);
        _D19 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D21), v291)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v291), (int8x16_t)vcgezq_f32(v291)))), (int8x8_t)_D21, _D22);
        _H21 = _D17.i16[1];
        __asm { FCVT            S21, H21 }
        _D22.i16[0] = _Q16.i16[1];
        __asm { FCVT            S22, H22 }
        if (_S21 >= *(float *)_D22.i32)
          v295 = 0;
        else
          v295 = -1;
        __asm
        {
          FCVT            S21, H17
          FCVT            S22, H16
        }
        if (_S21 >= _S22)
          v298 = 0;
        else
          v298 = -1;
        v299.i16[0] = v298;
        v299.i16[1] = v295;
        _H22 = _D17.i16[2];
        __asm { FCVT            S22, H22 }
        _H23 = _Q16.i16[2];
        __asm { FCVT            S23, H23 }
        if (_S22 >= _S23)
          v304 = 0;
        else
          v304 = -1;
        v299.i16[2] = v304;
        _H23 = _D17.i16[3];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[3];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v309 = 0;
        else
          v309 = -1;
        v299.i16[3] = v309;
        __asm { FCVT            S23, H0 }
        _H24 = _Q16.i16[4];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v313 = 0;
        else
          v313 = -1;
        v299.i16[4] = v313;
        _H23 = _D0.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[5];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v318 = 0;
        else
          v318 = -1;
        v299.i16[5] = v318;
        _H23 = _D0.i16[2];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[6];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v323 = 0;
        else
          v323 = -1;
        v299.i16[6] = v323;
        _H23 = _D0.i16[3];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[7];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v328 = 0;
        else
          v328 = -1;
        v299.i16[7] = v328;
        _H23 = _D20.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q6.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v333 = 0;
        else
          v333 = -1;
        __asm
        {
          FCVT            S23, H20
          FCVT            S24, H6
        }
        if (_S23 >= _S24)
          v336 = 0;
        else
          v336 = -1;
        v337.i16[0] = v336;
        v337.i16[1] = v333;
        _H25 = _D20.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[2];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v342 = 0;
        else
          v342 = -1;
        v337.i16[2] = v342;
        _H25 = _D20.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v347 = 0;
        else
          v347 = -1;
        v337.i16[3] = v347;
        __asm { FCVT            S25, H19 }
        _H26 = _Q6.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v351 = 0;
        else
          v351 = -1;
        v337.i16[4] = v351;
        _H25 = _D19.i16[1];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v356 = 0;
        else
          v356 = -1;
        v337.i16[5] = v356;
        _H25 = _D19.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v361 = 0;
        else
          v361 = -1;
        v337.i16[6] = v361;
        _H25 = _D19.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v366 = 0;
        else
          v366 = -1;
        v337.i16[7] = v366;
        v367 = vbslq_s8(v337, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x2000200020002, 0x2000200020002)), v282);
        v368 = vbslq_s8(v299, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x2000200020002, 0x2000200020002)), v281);
        v369 = vcvtq_f32_f16(*(float16x4_t *)_Q16.i8);
        _D17 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D17), v369)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v369), (int8x16_t)vcgezq_f32(v369)))), (int8x8_t)_D17, *(int8x8_t *)_Q16.i8);
        v371 = (int8x8_t)vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
        v372 = vcvt_hight_f32_f16(_Q16);
        _D21 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D0), v372)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v372), (int8x16_t)vcgezq_f32(v372)))), (int8x8_t)_D0, v371);
        v374 = vcvtq_f32_f16(*(float16x4_t *)_Q6.i8);
        _D16 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D20), v374)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v374), (int8x16_t)vcgezq_f32(v374)))), (int8x8_t)_D20, *(int8x8_t *)_Q6.i8);
        _D0 = (int8x8_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        v377 = vcvt_hight_f32_f16(_Q6);
        _D6 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D19), v377)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v377), (int8x16_t)vcgezq_f32(v377)))), (int8x8_t)_D19, _D0);
        _D0.i16[0] = _D16.i16[1];
        __asm { FCVT            S0, H0 }
        _H19 = _Q4.i16[1];
        __asm { FCVT            S19, H19 }
        if (*(float *)_D0.i32 >= _S19)
          v381 = 0;
        else
          v381 = -1;
        __asm
        {
          FCVT            S0, H16
          FCVT            S19, H4
        }
        if (_S0 >= _S19)
          v384 = 0;
        else
          v384 = -1;
        v385.i16[0] = v384;
        v385.i16[1] = v381;
        _H0 = _D16.i16[2];
        __asm { FCVT            S0, H0 }
        _H20 = _Q4.i16[2];
        __asm { FCVT            S20, H20 }
        if (_S0 >= _S20)
          v390 = 0;
        else
          v390 = -1;
        v385.i16[2] = v390;
        _H0 = _D16.i16[3];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[3];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v395 = 0;
        else
          v395 = -1;
        v385.i16[3] = v395;
        __asm { FCVT            S0, H6 }
        _H22 = _Q4.i16[4];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v399 = 0;
        else
          v399 = -1;
        v385.i16[4] = v399;
        _H0 = _D6.i16[1];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[5];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v404 = 0;
        else
          v404 = -1;
        v385.i16[5] = v404;
        _H0 = _D6.i16[2];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[6];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v409 = 0;
        else
          v409 = -1;
        v385.i16[6] = v409;
        _H0 = _D6.i16[3];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[7];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v414 = 0;
        else
          v414 = -1;
        v385.i16[7] = v414;
        _H0 = _D17.i16[1];
        __asm { FCVT            S0, H0 }
        _H22 = _Q5.i16[1];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v419 = 0;
        else
          v419 = -1;
        __asm
        {
          FCVT            S0, H17
          FCVT            S22, H5
        }
        if (_S0 >= _S22)
          v422 = 0;
        else
          v422 = -1;
        v423.i16[0] = v422;
        v423.i16[1] = v419;
        _H0 = _D17.i16[2];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[2];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v428 = 0;
        else
          v428 = -1;
        v423.i16[2] = v428;
        _H0 = _D17.i16[3];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[3];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v433 = 0;
        else
          v433 = -1;
        v423.i16[3] = v433;
        __asm { FCVT            S0, H21 }
        _H24 = _Q5.i16[4];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v437 = 0;
        else
          v437 = -1;
        v423.i16[4] = v437;
        _H0 = _D21.i16[1];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[5];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v442 = 0;
        else
          v442 = -1;
        v423.i16[5] = v442;
        _H0 = _D21.i16[2];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[6];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v447 = 0;
        else
          v447 = -1;
        v423.i16[6] = v447;
        _H0 = _D21.i16[3];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[7];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v452 = 0;
        else
          v452 = -1;
        v423.i16[7] = v452;
        v453 = vcvtq_f32_f16(*(float16x4_t *)_Q5.i8);
        *(int8x8_t *)_Q0.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D17), v453)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v453), (int8x16_t)vcgezq_f32(v453)))), (int8x8_t)_D17, *(int8x8_t *)_Q5.i8);
        v454 = (int8x8_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        v455 = vcvt_hight_f32_f16(_Q5);
        _Q0.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D21), v455)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v455), (int8x16_t)vcgezq_f32(v455)))), (int8x8_t)_D21, v454);
        v14 = vbslq_s8(v423, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x3000300030003, 0x3000300030003)), v368);
        v456 = vcvtq_f32_f16(*(float16x4_t *)_Q4.i8);
        *(int8x8_t *)_Q7.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D16), v456)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v456), (int8x16_t)vcgezq_f32(v456)))), (int8x8_t)_D16, *(int8x8_t *)_Q4.i8);
        v455.i64[0] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
        v457 = vcvt_hight_f32_f16(_Q4);
        _Q7.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D6), v457)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v457), (int8x16_t)vcgezq_f32(v457)))), (int8x8_t)_D6, *(int8x8_t *)v455.f32);
        v15 = vbslq_s8(v385, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x3000300030003, 0x3000300030003)), v367);
        _Q1 = vaddq_s16(_Q1, v12);
        v13 = vaddq_s16(v13, v12);
        v8 += 4;
        v11 += 8 * a4;
      }
      while (v8 < a3);
    }
    else
    {
      v14 = 0uLL;
      _Q0.i64[0] = 0x400040004000400;
      _Q0.i64[1] = 0x400040004000400;
      _Q7.i64[0] = 0x400040004000400;
      _Q7.i64[1] = 0x400040004000400;
      v15 = 0uLL;
    }
    v545[0] = _Q0;
    v545[1] = _Q7;
    v544[0] = v14;
    v544[1] = v15;
    v465 = v14.u16[0];
    *a5 = v14.u16[0];
    for (j = 2; j != 32; j += 2)
    {
      _Q1.i16[0] = *(_WORD *)((char *)v545 + j);
      __asm
      {
        FCVT            S2, H1
        FCVT            S3, H0
      }
      if (_S3 <= _S2)
      {
        v469 = *(unsigned __int16 *)((char *)v544 + j);
        if (_S3 < _S2 || (_Q1.i32[0] = _Q0.i32[0], v465 > v469))
        {
          *a5 = v469;
          v465 = v469;
          _Q0.i32[0] = _Q1.i32[0];
        }
      }
    }
    v470 = 0;
    _Q1 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    _H2 = _Q1.i16[1];
    __asm { FCVT            S2, H2 }
    v474 = (__int128 *)(result + 2 * v465 * a4);
    _H3 = _Q1.i16[2];
    __asm { FCVT            S3, H3 }
    _H4 = _Q1.i16[3];
    __asm { FCVT            S4, H4 }
    _H5 = _Q1.i16[4];
    __asm { FCVT            S5, H5 }
    _H6 = _Q1.i16[5];
    __asm { FCVT            S6, H6 }
    _H7 = _Q1.i16[6];
    __asm { FCVT            S7, H7 }
    _H16 = _Q1.i16[7];
    __asm { FCVT            S16, H16 }
    v487 = v474;
    do
    {
      v488 = v470;
      v470 += 16;
      if (v470 > a2)
        break;
      _Q17 = *v487;
      _Q19 = v487[1];
      v487 += 2;
      _H18 = WORD1(_Q19);
      __asm { FCVT            S18, H18 }
      v493 = _S2 == _S18 ? -1 : 0;
      __asm
      {
        FCVT            S18, H19
        FCVT            S20, H1
      }
      v496 = _S20 == _S18 ? -1 : 0;
      v497.i16[0] = v496;
      v497.i16[1] = v493;
      _H20 = WORD2(_Q19);
      __asm { FCVT            S20, H20 }
      v500 = _S3 == _S20 ? -1 : 0;
      v497.i16[2] = v500;
      _H20 = WORD3(_Q19);
      __asm { FCVT            S20, H20 }
      v503 = _S4 == _S20 ? -1 : 0;
      v497.i16[3] = v503;
      _H20 = WORD4(_Q19);
      __asm { FCVT            S20, H20 }
      v506 = _S5 == _S20 ? -1 : 0;
      v497.i16[4] = v506;
      _H20 = WORD5(_Q19);
      __asm { FCVT            S20, H20 }
      v509 = _S6 == _S20 ? -1 : 0;
      v497.i16[5] = v509;
      _H20 = WORD6(_Q19);
      __asm { FCVT            S20, H20 }
      v512 = _S7 == _S20 ? -1 : 0;
      v497.i16[6] = v512;
      _H19 = HIWORD(_Q19);
      __asm { FCVT            S19, H19 }
      v515 = _S16 == _S19 ? -1 : 0;
      v497.i16[7] = v515;
      _H19 = WORD1(_Q17);
      __asm { FCVT            S19, H19 }
      v518 = _S2 == _S19 ? -1 : 0;
      __asm
      {
        FCVT            S19, H1
        FCVT            S20, H17
      }
      v521 = _S19 == _S20 ? -1 : 0;
      v522.i16[0] = v521;
      v522.i16[1] = v518;
      _H20 = WORD2(_Q17);
      __asm { FCVT            S20, H20 }
      v525 = _S3 == _S20 ? -1 : 0;
      v522.i16[2] = v525;
      _H20 = WORD3(_Q17);
      __asm { FCVT            S20, H20 }
      v528 = _S4 == _S20 ? -1 : 0;
      v522.i16[3] = v528;
      _H20 = WORD4(_Q17);
      __asm { FCVT            S20, H20 }
      v531 = _S5 == _S20 ? -1 : 0;
      v522.i16[4] = v531;
      _H20 = WORD5(_Q17);
      __asm { FCVT            S20, H20 }
      v534 = _S6 == _S20 ? -1 : 0;
      v522.i16[5] = v534;
      _H20 = WORD6(_Q17);
      __asm { FCVT            S20, H20 }
      v537 = _S7 == _S20 ? -1 : 0;
      v522.i16[6] = v537;
      _H17 = HIWORD(_Q17);
      __asm { FCVT            S17, H17 }
      v540 = _S16 == _S17 ? -1 : 0;
      v522.i16[7] = v540;
    }
    while ((vmaxvq_u16((uint16x8_t)vorrq_s8(v522, v497)) & 0x8000) == 0);
    if (v488 < a2)
    {
      __asm { FCVT            S1, H0 }
      while (1)
      {
        _H2 = *((_WORD *)v474 + v488);
        __asm { FCVT            S2, H2 }
        if (_S2 == _S1)
          break;
        if (a2 == ++v488)
        {
          v488 = a2;
          break;
        }
      }
    }
    *a6 = v488;
  }
  return result;
}

void sub_207C882AC(int a1, int a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, float32x4_t a14, double a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  unsigned __int32 v57;
  unsigned __int32 v58;
  BOOL v60;
  _BOOL4 v61;

  if (a3)
  {
    v57 = a10.i32[0];
    v58 = a9.i32[0];
    v60 = a9.f32[0] == 0.0 || a4 == 0;
    v61 = v60;
    if (!v61 || *(float *)a10.i32 != 1.0)
    {
      if (v61)
      {
        sub_207C920A8(a1, a3, a7->f32, a8, *(float *)a10.i32);
      }
      else
      {
        if (*(float *)a10.i32 == 0.0)
          sub_207C920A8(a1, a3, a7->f32, a8, *(float *)a10.i32);
        if (a3 > 85 || a4 >= 86)
        {
          if (a1 == 121)
            sub_207C9158C(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              SDWORD2(a38),
              SHIDWORD(a38),
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55,
              a56,
              a57);
          else
            sub_207C95524(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40);
        }
        else
        {
          a9.i32[0] = v58;
          a10.i32[0] = v57;
          if (a1 == 121)
          {
            if (a2 == 111)
              sub_207C7CB20(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            else
              sub_207C910D0(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          }
          else if (a2 == 111)
          {
            sub_207C869A0(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, a15);
          }
          else
          {
            sub_207C89B30(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, *(float32x2_t *)&a15);
          }
        }
      }
    }
  }
}

void sub_207C8849C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  void (*v58)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  float *(*v60)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t vars0;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v90;
  float32x4_t *v91;

  v23 = MEMORY[0x24BDAC7A8]();
  v71 = v30;
  v72 = v29;
  v31 = v25;
  v70 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v35 = 1;
  else
    v35 = v27;
  v81 = v35;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_207C8B9DC;
  v83 = v27;
  if (v23 == 111)
    v37 = v27;
  else
    v37 = 1;
  v67 = v37;
  if (v23 == 111)
    v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_207C8B848;
  v80 = v36;
  v38 = sub_207C81F5C;
  if (v23 == 111)
    v38 = sub_207C81DD4;
  v69 = v38;
  v39 = (v25 << 7) + 16408;
  if (a12 == -1)
  {
    v44 = 4 * v39;
    if (v25 < 1)
      v44 = 0;
    v43 = (float)(unint64_t)v44;
    goto LABEL_19;
  }
  v40 = v26;
  v41 = v24;
  v42 = v28;
  if (v25 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v43 = (float)(unint64_t)(4 * v39);
LABEL_19:
      *a11 = v43;
      return;
    }
    goto LABEL_21;
  }
  if (v25 >= 1)
  {
LABEL_21:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a23;
LABEL_24:
  if (v40 >= 1)
  {
    vars0 = 0;
    v45 = 0;
    v84 = v91 + 4100;
    v90 = v31 - 3;
    if (v31 <= 0)
      v47 = -(-v31 & 3);
    else
      v47 = v31 & 3;
    v86 = v47;
    v78 = v41;
    v75 = a10 + 512;
    v48 = 128;
    v79 = v31;
    v68 = v40;
    do
    {
      v73 = v48;
      if (v40 >= v48)
        v49 = v48;
      else
        v49 = v40;
      if (v45 + 128 <= v40)
        v50 = 128;
      else
        v50 = v40 - v45;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v69)(v70, v50, v31, v72 + 4 * v45 * v83 + 4 * v45, v42);
      sub_207C8B51C(v50, v31, (unint64_t *)(v71 + 4 * v45), a9, v84, -1.0, v51, v52);
      v74 = v45 + 128;
      if (v45 + 128 < v41)
      {
        v53 = v75;
        v54 = 16 * (v49 + vars0);
        v82 = v72 + 4 * v45 * v67;
        v56 = v42 != 1.0 && v45 == 0 && v42 != 0.0;
        v57 = v45 + 128;
        v89 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
        v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
        do
        {
          v87 = v57 + 128;
          if (v57 + 128 <= v41)
            v59 = 128;
          else
            v59 = v41 - v57;
          v85 = v57;
          if ((v59 & 7) != 0)
            v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C8CED0;
          v60 = v89;
          if ((v59 & 7) != 0)
            v60 = sub_207C88D00;
          v89 = v60;
          v80(v59, v50, v82 + 4 * v57 * v81, v83, v91);
          v88 = v53;
          v61 = 0;
          if (v31 >= 4)
          {
            v62 = (float32x4_t *)v53;
            v63 = v91 + 4100;
            do
            {
              if (v56)
                v89(v91, (uint64_t)v63, v62, a9, v59, v50, v42);
              else
                v58(v91, v63, v62, a9, v59, v50);
              v61 += 4;
              v63 = (float32x4_t *)((char *)v63 + v54);
              v62 += a9;
            }
            while (v61 < v90);
          }
          v31 = v79;
          if (v86)
          {
            v64 = a10 + 4 * v85 + 4 * v61 * a9;
            v65 = &v84->f32[v61 * v50];
            if (v56)
              sub_207C80864(v91, v65, v64, a9, v59, v86, v50, v42);
            else
              sub_207C80994(v91, v65, v64, a9, v59, v86, v50);
          }
          v53 = v88 + 512;
          v57 = v87;
          v41 = v78;
        }
        while (v87 < v78);
      }
      v45 = v74;
      v48 = v73 + 128;
      v75 += 512;
      vars0 -= 128;
      v42 = 1.0;
      v40 = v68;
    }
    while (v74 < v68);
  }
  if (v31 >= 1 && !v66)
    free(v91);
}

void sub_207C888F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float32x4_t v45;
  _BOOL4 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *(*v54)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v55)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  const float *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  unsigned int v65;
  uint64_t v66;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *(*v77)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v78)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float32x4_t *v79;

  v19 = MEMORY[0x24BDAC7A8]();
  v66 = v25;
  v26 = v20;
  v65 = v27;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v29 = 1;
  else
    v29 = v23;
  v70 = v29;
  v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_207C8B9DC;
  v72 = v23;
  if (v19 == 111)
    v31 = v23;
  else
    v31 = 1;
  v63 = v31;
  if (v19 == 111)
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_207C8B848;
  vars8 = v30;
  v32 = sub_207C81C34;
  if (v19 == 111)
    v32 = sub_207C820E4;
  v64 = v32;
  v33 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v38 = 4 * v33;
    if (v20 < 1)
      v38 = 0;
    v37 = (float)(unint64_t)v38;
    goto LABEL_19;
  }
  v34 = v22;
  v35 = v21;
  v36 = v24;
  if (v20 >= 1 && a12)
  {
    if (4 * v33 > a12)
    {
      v37 = (float)(unint64_t)(4 * v33);
LABEL_19:
      *a11 = v37;
      return;
    }
    goto LABEL_21;
  }
  if (v20 >= 1)
  {
LABEL_21:
    v79 = (float32x4_t *)a11;
    v61 = a11;
    if (!a11)
      v79 = (float32x4_t *)malloc_type_malloc(4 * v33, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v61 = a11;
  v79 = (float32x4_t *)&a19;
LABEL_24:
  if ((uint64_t)v35 >= 1)
  {
    v39 = v26 - 3;
    if (v26 <= 0)
      v40 = -(-v26 & 3);
    else
      v40 = v26 & 3;
    v73 = v79 + 4100;
    v74 = v40;
    v41 = 1;
    vars0 = v26;
    v62 = v34;
    while (1)
    {
      v42 = v35 >= 0x80 ? v35 - 128 : 0;
      v43 = v35 >= 0x80 ? 128 : v35;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v64)(v65, v43, v26, v34 + 4 * v42 * v72 + 4 * v42, v36);
      sub_207C8B51C(v43, v26, (unint64_t *)(v66 + 4 * v42), v70, v73, -1.0, v44, v45);
      if (v35 < 0x81)
        break;
      v71 = v34 + 4 * v42 * v63;
      v46 = v36 != 1.0;
      if (v36 == 0.0)
        v46 = 0;
      v47 = v41 & v46;
      v48 = v42;
      v78 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
      v77 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
      do
      {
        v49 = v48;
        v50 = v48 >= 0x80;
        v51 = v48 - 128;
        if (v50)
          v52 = 128;
        else
          v52 = v49;
        if (!v50)
          v51 = 0;
        v75 = v51;
        v76 = a10 + 4 * v51;
        v53 = v71 + 4 * v51 * v70;
        v54 = v77;
        if ((v52 & 7) != 0)
          v54 = sub_207C8CED0;
        v77 = v54;
        v55 = v78;
        if ((v52 & 7) != 0)
          v55 = sub_207C88D00;
        v78 = v55;
        vars8(v52, v43, v53, v72, v79);
        v56 = 0;
        if (v26 >= 4)
        {
          v56 = 0;
          v57 = (float32x4_t *)v76;
          v58 = v79 + 4100;
          do
          {
            if (v47)
              v78(v79, (uint64_t)v58, v57, v70, v52, v43, v36);
            else
              v77(v79, (uint64_t)v58, v57, v70, v52, v43);
            v56 += 4;
            v58 += v43;
            v57 += v70;
          }
          while (v56 < v39);
        }
        if (v74)
        {
          v59 = v76 + 4 * v56 * v70;
          v60 = &v73->f32[v56 * v43];
          if (v47)
            sub_207C80864(v79, v60, v59, v70, v52, v74, v43, v36);
          else
            sub_207C80994(v79, v60, v59, v70, v52, v74, v43);
        }
        v48 = v75;
        v26 = vars0;
      }
      while (v75 > 0);
      v41 = 0;
      v36 = 1.0;
      v34 = v62;
      v35 = v42;
    }
  }
  if (v26 >= 1 && !v61)
    free(v79);
}

float *sub_207C88D00(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int8x16_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = veorq_s8(v7, v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = (float32x4_t)v7;
      v40 = (float32x4_t)v7;
      v41 = (float32x4_t)v7;
      v42 = (float32x4_t)v7;
      v43 = (float32x4_t)v7;
      v44 = (float32x4_t)v7;
      v45 = (float32x4_t)v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = (int8x16_t)vmlaq_n_f32((float32x4_t)v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, (float32x4_t)v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sub_207C80AA4(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

void sub_207C88EC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(uint64_t, float);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  void (*v58)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, float);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;

  v27 = MEMORY[0x24BDAC7A8]();
  v75 = v31;
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (void (*)(uint64_t, float))sub_207C8B658;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, float))sub_207C8B51C;
  v70 = v37;
  v38 = sub_207C82288;
  if (v27 == 111)
    v38 = sub_207C825B4;
  vars0 = v38;
  v39 = (v29 << 7) + 16408;
  if (a12 == -1)
  {
    v46 = 4 * v39;
    if (v29 < 1)
      v46 = 0;
    v45 = (float)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = v34;
  v72 = v31;
  if (v29 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v45 = (float)(unint64_t)(4 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_15;
  }
  if (v29 >= 1)
  {
LABEL_15:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a27;
LABEL_18:
  if (v42 >= 1)
  {
    v79 = 0;
    v47 = 0;
    v90 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v85 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v89 = 16 * v41;
    v78 = 512;
    v49 = 128;
    v77 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v82 = v43;
    do
    {
      v76 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 128 <= v42)
        v51 = 128;
      else
        v51 = v42 - v47;
      v83 = v75 + 4 * v47 * v41;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float))vars0)(vars8_4, v43, v51, v40 + 4 * v47 * v72 + 4 * v47, v72, v44);
      v86 = v47 + 128;
      if (v35 - (v47 + 128) >= 1)
      {
        v70(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v80 = (uint64_t)&v91[4100] + v78 * (v50 + v79);
          v53 = 16 * (v50 + v79);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v88 = v77;
          v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
          v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
          do
          {
            v87 = v52 + 128;
            if (v52 + 128 <= v43)
              v59 = 128;
            else
              v59 = v43 - v52;
            v84 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_207C8CED0;
              v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_207C88D00;
            }
            v60 = v41;
            sub_207C8B848(v59, v51, v83 + 4 * v52, v41, (uint64_t)v91);
            v61 = v86;
            if (v86 < v90)
            {
              v62 = v88;
              v63 = v80;
              v61 = v86;
              do
              {
                if (v56)
                  v57(v91, v63, v62, v60, v59, v51, v44);
                else
                  v58(v91, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v89;
              }
              while (v61 < v90);
            }
            v41 = v60;
            if (v85)
            {
              v64 = a10 + 4 * v84 + 4 * v61 * v60;
              v65 = &v91[4100].f32[v61 * v51];
              if (v56)
                sub_207C80864(v91, v65, v64, v60, v59, v85, v51, v44);
              else
                sub_207C80994(v91, v65, v64, v60, v59, v85, v51);
            }
            v88 += 512;
            v52 = v87;
            v43 = v82;
          }
          while (v87 < v82);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v76 + 128;
      v78 += 512;
      v79 -= 128;
      v77 += v71;
      v47 = v86;
    }
    while (v86 < v42);
  }
  if (v35 >= 1 && !v66)
    free(v91);
}

void sub_207C89388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  float *(*v51)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  const float *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *(*v76)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v77;
  float32x4_t *v78;

  v17 = MEMORY[0x24BDAC7A8]();
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_207C8B658;
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_207C8B51C;
  v64 = v27;
  v29 = sub_207C8273C;
  if (v17 == 111)
    v29 = sub_207C82410;
  v66 = v29;
  v30 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v39 = 4 * v30;
    if (v20 < 1)
      v39 = 0;
    v38 = (float)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = v25;
  v37 = v18;
  if (v20 >= 1 && a12)
  {
    if (4 * v30 > a12)
    {
      v38 = (float)(unint64_t)(4 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_18;
  }
  if (v20 >= 1)
  {
LABEL_18:
    v58 = a11;
    v59 = v20;
    v78 = (float32x4_t *)a11;
    if (!a11)
      v78 = (float32x4_t *)malloc_type_malloc(4 * v30, 0x100004052888210uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = (float32x4_t *)&a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)&v78[4100];
    v77 = 16 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x80;
      if ((unint64_t)v34 >= 0x80)
        v34 -= 128;
      else
        v34 = 0;
      if (v42)
        v43 = 128;
      else
        v43 = v41;
      vars8 = v33 + 4 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v66)(v37, v35, v43, v31 + 4 * v34 * v26 + 4 * v34, v26, v36);
      if (v41 >= 0x81)
      {
        v64(v43, v34, v31 + 4 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
          v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
          vars0 = v34;
          do
          {
            v74 = v45 + 128;
            if (v45 + 128 <= v35)
              v50 = 128;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C8CED0;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = sub_207C88D00;
            v76 = v51;
            v52 = v32;
            sub_207C8B848(v50, v43, vars8 + 4 * v45, v32, (uint64_t)v78);
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float32x4_t *)v75;
              v55 = v78 + 4100;
              do
              {
                if (v48)
                  v76(v78, (uint64_t)v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += v43;
                v54 = (float32x4_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 4 * v72 + 4 * v53 * v52;
              v57 = (const float *)(v71 + 4 * v53 * v43);
              if (v48)
                sub_207C80864(v78, v57, v56, v52, v50, v73, v43, v36);
              else
                sub_207C80994(v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 1 && !v58)
    free(v78);
}

uint64_t sub_207C897E0(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t sub_207C89B30(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_207C8A010(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  _X3 = 4 * a4;
  v7 = _X2 + 2;
  do
  {
    do
    {
      v8 = *_X2;
      v9 = _X2[1];
      _X2 = (__int128 *)((char *)_X2 + _X3);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v8;
      a5[1] = v9;
      a5 += 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 2;
  }
  while (result);
  return result;
}

uint64_t sub_207C8A04C(uint64_t result, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x4_t v42;
  __int32 *v43;
  __int32 *v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t *v92;
  uint64_t *v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32_t v117;
  float32_t v118;
  uint64_t v119;

  v9 = a7;
  v119 = result;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (__N < 1)
      {
        v16 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v21 = __X + 1;
        v16 = 2;
        v22 = __N;
        do
        {
          v23 = *v21;
          v24 = *(v21 - 1) * v9;
          *(v21 - 1) = v24;
          *v21 = (float)(v23 * v9) - (float)(v24 * v20);
          v21 += __incX;
          --v22;
        }
        while (v22);
      }
    }
    else if ((result & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      result = v119;
      v9 = a7;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
  }
  else if (__N < 1)
  {
    v16 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = __X + 2;
    v16 = 3;
    v17 = __N;
    do
    {
      v18 = *(v15 - 2) * v9;
      v19 = (float)(*(v15 - 1) * v9) - (float)(v18 * v11);
      *(v15 - 2) = v18;
      *(v15 - 1) = v19;
      *v15 = -(float)((float)((float)(v14 * v19) + (float)(v18 * v13)) - (float)(*v15 * v9));
      v15 += __incX;
      --v17;
    }
    while (v17);
  }
  if (v16 < result)
  {
    v25 = v16;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (__int32 *)(a3 + 4 * v25 * a4);
        v28 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        result = (uint64_t)(v29 + 1);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26 * __incX];
          v32 = (float32x4_t *)&__X[(v26 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v26 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v26 | 3) * __incX];
          v35 = 0uLL;
          if ((v16 & 1) != 0)
          {
            v53.i32[0] = *v27;
            v53.i32[1] = *v28;
            v53.i32[2] = *v29;
            v53.i32[3] = *v30;
            v54 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v42 = vmlaq_n_f32((float32x4_t)0, v53, v54);
            v55 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v56 = v55;
            v57 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, v53, v56);
            v37 = vmlaq_n_f32((float32x4_t)0, v53, v57);
            v58 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v39 = v25 - 1;
            v36 = vmlaq_n_f32((float32x4_t)0, v53, v58);
            v40 = v30 + 1;
            v41 = v29 + 1;
            v43 = v28 + 1;
            v44 = v27 + 1;
            if (v25 != 1)
            {
LABEL_22:
              v45 = 0;
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              do
              {
                v49.i64[0] = *(_QWORD *)&v44[v45];
                v50.i64[0] = *(_QWORD *)&v43[v45];
                v49.i64[1] = *(_QWORD *)&v41[v45];
                v50.i64[1] = *(_QWORD *)&v40[v45];
                v51 = (float32x4_t)vtrn1q_s32(v49, v50);
                v42 = vmlaq_n_f32(v42, v51, v31->f32[v45]);
                v38 = vmlaq_n_f32(v38, v51, v32->f32[v45]);
                v37 = vmlaq_n_f32(v37, v51, v33->f32[v45]);
                v36 = vmlaq_n_f32(v36, v51, v34->f32[v45]);
                v52 = (float32x4_t)vtrn2q_s32(v49, v50);
                v46 = vmlaq_n_f32(v46, v52, v31->f32[v45 + 1]);
                v47 = vmlaq_n_f32(v47, v52, v32->f32[v45 + 1]);
                v48 = vmlaq_n_f32(v48, v52, v33->f32[v45 + 1]);
                v35 = vmlaq_n_f32(v35, v52, v34->f32[v45 + 1]);
                v45 += 2;
                v39 -= 2;
              }
              while (v39);
              v43 = (__int32 *)((char *)v43 + v45 * 4);
              v41 = (__int32 *)((char *)v41 + v45 * 4);
              v40 = (__int32 *)((char *)v40 + v45 * 4);
              v31 = (float32x4_t *)((char *)v31 + v45 * 4);
              v32 = (float32x4_t *)((char *)v32 + v45 * 4);
              v33 = (float32x4_t *)((char *)v33 + v45 * 4);
              v34 = (float32x4_t *)((char *)v34 + v45 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v25;
            v40 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v41 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v42 = 0uLL;
            v43 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v44 = (__int32 *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v48 = 0uLL;
          v47 = 0uLL;
          v46 = 0uLL;
LABEL_27:
          v59 = vaddq_f32(v48, v37);
          v60 = vmulq_n_f32(*v33, v9);
          v61 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v9), vaddq_f32(v46, v42));
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v9), vaddq_f32(v47, v38));
          v63 = (int64x2_t)vsubq_f32(v60, v59);
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v9), vaddq_f32(v35, v36));
          v65 = (int32x4_t)vzip1q_s64(v61, v63);
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip2q_s64(v61, v63);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (float32x4_t)vtrn1q_s32(v65, v66);
          v70 = (float32x4_t)vtrn2q_s32(v65, v66);
          v71 = (float32x4_t)vtrn1q_s32(v67, v68);
          v72 = (float32x4_t)vtrn2q_s32(v67, v68);
          v67.i32[0] = *v43;
          v73 = vmlsq_lane_f32(v70, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v41;
          v66.i32[0] = v41[1];
          v74 = vmlsq_lane_f32(v71, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v40;
          v60.i32[0] = v40[1];
          v75 = vmlsq_lane_f32(v74, v73, *(float32x2_t *)v66.i8, 0);
          v76 = vmlsq_lane_f32(vmlsq_lane_f32(v72, v69, *(float32x2_t *)v67.i8, 0), v73, *(float32x2_t *)v60.f32, 0);
          v67.i32[0] = v40[2];
          v77 = (int64x2_t)vmlsq_lane_f32(v76, v75, *(float32x2_t *)v67.i8, 0);
          v78 = (int32x4_t)vzip1q_s64((int64x2_t)v69, (int64x2_t)v75);
          v79 = (int32x4_t)vzip1q_s64((int64x2_t)v73, v77);
          v80 = (int32x4_t)vzip2q_s64((int64x2_t)v69, (int64x2_t)v75);
          v81 = (int32x4_t)vzip2q_s64((int64x2_t)v73, v77);
          *(int32x4_t *)v31 = vtrn1q_s32(v78, v79);
          *(int32x4_t *)v32 = vtrn2q_s32(v78, v79);
          *(int32x4_t *)v33 = vtrn1q_s32(v80, v81);
          *(int32x4_t *)v34 = vtrn2q_s32(v80, v81);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v119)
        return result;
    }
    v82 = (__int32 *)(a3 + 4 * v25 * a4);
    v83 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v84 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v85 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    result = (uint64_t)(v84 + 1);
    while (1)
    {
      v86 = (float32x4_t *)&__X[v26 * __incX];
      v87 = 0uLL;
      if ((v16 & 1) != 0)
      {
        v94.i32[0] = *v82;
        v94.i32[1] = *v83;
        v94.i32[2] = *v84;
        v94.i32[3] = *v85;
        v95 = v86->i32[0];
        v86 = (float32x4_t *)((char *)v86 + 4);
        v88 = v25 - 1;
        v89 = vmlaq_n_f32((float32x4_t)0, v94, *(float *)&v95);
        v90 = v85 + 1;
        v91 = v84 + 1;
        v92 = (uint64_t *)(v83 + 1);
        v93 = (uint64_t *)(v82 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v96 = *v93++;
            v97.i64[0] = v96;
            v98 = *v92++;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v91;
            v91 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v90;
            v90 += 2;
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v103 = (float32x4_t)vtrn1q_s32(v97, v99);
            v104 = (float32x4_t)vtrn2q_s32(v97, v99);
            v99.i32[0] = v86->i32[0];
            v105 = v86->f32[1];
            v86 = (float32x4_t *)((char *)v86 + 8);
            v89 = vmlaq_n_f32(v89, v103, *(float *)v99.i32);
            v87 = vmlaq_n_f32(v87, v104, v105);
            v88 -= 2;
          }
          while (v88);
        }
      }
      else
      {
        v88 = v25;
        v89 = 0uLL;
        v90 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v91 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v92 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v93 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v86, v9), vaddq_f32(v87, v89)).u32[0];
      _S4 = *(_DWORD *)v92;
      __asm { FMLS            S3, S4, V0.S[0] }
      _S4 = *v91;
      __asm { FMLS            S2, S4, V0.S[0] }
      _S4 = *v90;
      __asm { FMLS            S1, S4, V0.S[0] }
      v117 = _S2 - (float)(_S3 * *((float *)v91 + 1));
      v118 = (float)(_S1 - (float)(_S3 * *((float *)v90 + 1))) - (float)(v117 * *((float *)v90 + 2));
      v86->i32[0] = _S0;
      v86->f32[1] = _S3;
      v86->f32[2] = v117;
      v86->f32[3] = v118;
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
  return result;
}

void sub_207C8A56C(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float *v9;
  float v10;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  __int32 *v45;
  __int32 *v46;
  __int32 *v47;
  __int32 *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  float32x4_t v60;
  __int32 *v61;
  __int32 *v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int64x2_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  __int32 *v103;
  __int32 *v104;
  __int32 *v105;
  __int32 *v106;
  float32x4_t *v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  __int32 *v111;
  __int32 *v112;
  uint64_t *v113;
  uint64_t *v114;
  float32x4_t v115;
  __int32 v116;
  uint64_t v117;
  int32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float32x4_t v127;
  float32_t v128;
  float32_t v129;
  float32_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v9 = a3;
  v10 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v22 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v31 = __X + 1;
        v22 = 2;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = *v31;
          v35 = v28 * *(v31 - 1);
          *(v31 - 1) = v35;
          *v31 = v33 * (float)((float)(v34 * v10) - (float)(v35 * v29));
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v10 = a7;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
  }
  else if (__N < 1)
  {
    v22 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = __X + 2;
    v22 = 3;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *(v21 - 2);
      v26 = v19 * (float)((float)(*(v21 - 1) * v10) - (float)(v25 * v18));
      *(v21 - 2) = v25;
      *(v21 - 1) = v26;
      *v21 = v24 * (float)-(float)((float)((float)(v16 * v26) + (float)(v25 * v15)) - (float)(*v21 * v10));
      v21 += __incX;
      --v23;
    }
    while (v23);
  }
  if (v22 < a1)
  {
    v36 = v22;
    v131 = a1;
    v132 = v9;
    while (1)
    {
      v37 = 1.0 / v9[v36 * a4 + v36];
      v38 = (v36 + 1) * a4;
      v39 = 1.0 / v9[v36 + 1 + v38];
      v40 = (v36 + 2) * a4;
      v41 = 1.0 / v9[v36 + 2 + v40];
      v42 = (v36 + 3) * a4;
      v43 = 1.0 / v9[v36 + 3 + v42];
      v136 = v42;
      v134 = v40;
      v135 = v38;
      v44 = 0;
      if (__N >= 4)
      {
        v45 = (__int32 *)&v9[v36 * a4];
        v46 = (__int32 *)&v9[v38];
        v47 = (__int32 *)&v9[v40];
        v48 = (__int32 *)&v9[v42];
        do
        {
          v49 = (float32x4_t *)&__X[v44 * __incX];
          v50 = (float32x4_t *)&__X[(v44 | 1) * __incX];
          v51 = (float32x4_t *)&__X[(v44 | 2) * __incX];
          v52 = (float32x4_t *)&__X[(v44 | 3) * __incX];
          v53 = 0uLL;
          if ((v22 & 1) != 0)
          {
            v71.i32[0] = *v45;
            v71.i32[1] = *v46;
            v71.i32[2] = *v47;
            v71.i32[3] = *v48;
            v72 = v49->f32[0];
            v49 = (float32x4_t *)((char *)v49 + 4);
            v60 = vmlaq_n_f32((float32x4_t)0, v71, v72);
            v73 = v50->f32[0];
            v50 = (float32x4_t *)((char *)v50 + 4);
            v74 = v73;
            v75 = v51->f32[0];
            v51 = (float32x4_t *)((char *)v51 + 4);
            v56 = vmlaq_n_f32((float32x4_t)0, v71, v74);
            v55 = vmlaq_n_f32((float32x4_t)0, v71, v75);
            v76 = v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4);
            v57 = v36 - 1;
            v54 = vmlaq_n_f32((float32x4_t)0, v71, v76);
            v58 = v48 + 1;
            v59 = v47 + 1;
            v61 = v46 + 1;
            v62 = v45 + 1;
            if (v36 != 1)
            {
LABEL_22:
              v63 = 0;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v67.i64[0] = *(_QWORD *)&v62[v63];
                v68.i64[0] = *(_QWORD *)&v61[v63];
                v67.i64[1] = *(_QWORD *)&v59[v63];
                v68.i64[1] = *(_QWORD *)&v58[v63];
                v69 = (float32x4_t)vtrn1q_s32(v67, v68);
                v60 = vmlaq_n_f32(v60, v69, v49->f32[v63]);
                v56 = vmlaq_n_f32(v56, v69, v50->f32[v63]);
                v55 = vmlaq_n_f32(v55, v69, v51->f32[v63]);
                v54 = vmlaq_n_f32(v54, v69, v52->f32[v63]);
                v70 = (float32x4_t)vtrn2q_s32(v67, v68);
                v64 = vmlaq_n_f32(v64, v70, v49->f32[v63 + 1]);
                v65 = vmlaq_n_f32(v65, v70, v50->f32[v63 + 1]);
                v66 = vmlaq_n_f32(v66, v70, v51->f32[v63 + 1]);
                v53 = vmlaq_n_f32(v53, v70, v52->f32[v63 + 1]);
                v63 += 2;
                v57 -= 2;
              }
              while (v57);
              v61 = (__int32 *)((char *)v61 + v63 * 4);
              v59 = (__int32 *)((char *)v59 + v63 * 4);
              v58 = (__int32 *)((char *)v58 + v63 * 4);
              v49 = (float32x4_t *)((char *)v49 + v63 * 4);
              v50 = (float32x4_t *)((char *)v50 + v63 * 4);
              v51 = (float32x4_t *)((char *)v51 + v63 * 4);
              v52 = (float32x4_t *)((char *)v52 + v63 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = v36;
            v58 = (__int32 *)&v9[v42];
            v59 = v47;
            v60 = 0uLL;
            v61 = (__int32 *)&v9[v38];
            v62 = (__int32 *)&v9[v36 * a4];
            if (v36)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v77 = vaddq_f32(v66, v55);
          v78 = vmulq_n_f32(*v51, v10);
          v79 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v49, v10), vaddq_f32(v64, v60));
          v80 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v50, v10), vaddq_f32(v65, v56));
          v81 = (int64x2_t)vsubq_f32(v78, v77);
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v52, v10), vaddq_f32(v53, v54));
          v83 = (int32x4_t)vzip1q_s64(v79, v81);
          v84 = (int32x4_t)vzip1q_s64(v80, v82);
          v85 = (int32x4_t)vzip2q_s64(v79, v81);
          v86 = (int32x4_t)vzip2q_s64(v80, v82);
          v87 = (float32x4_t)vtrn1q_s32(v83, v84);
          v88 = (float32x4_t)vtrn2q_s32(v83, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = vmulq_n_f32(v87, v37);
          v85.i32[0] = *v61;
          v92 = vmlsq_lane_f32(v88, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v59;
          v84.i32[0] = v59[1];
          v93 = vmlsq_lane_f32(v89, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v58;
          v78.i32[0] = v58[1];
          v94 = vmlsq_lane_f32(v90, v91, *(float32x2_t *)v85.i8, 0);
          v95 = vmulq_n_f32(v92, v39);
          v96 = vmlsq_lane_f32(v93, v95, *(float32x2_t *)v84.i8, 0);
          v97 = vmulq_n_f32(v96, v41);
          v96.i32[0] = v58[2];
          v98 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v94, v95, *(float32x2_t *)v78.f32, 0), v97, *(float32x2_t *)v96.f32, 0), v43);
          v99 = (int32x4_t)vzip1q_s64((int64x2_t)v91, (int64x2_t)v97);
          v100 = (int32x4_t)vzip1q_s64((int64x2_t)v95, v98);
          v101 = (int32x4_t)vzip2q_s64((int64x2_t)v91, (int64x2_t)v97);
          v102 = (int32x4_t)vzip2q_s64((int64x2_t)v95, v98);
          *(int32x4_t *)v49 = vtrn1q_s32(v99, v100);
          *(int32x4_t *)v50 = vtrn2q_s32(v99, v100);
          *(int32x4_t *)v51 = vtrn1q_s32(v101, v102);
          *(int32x4_t *)v52 = vtrn2q_s32(v101, v102);
          v44 += 4;
        }
        while (v44 < __N - 3);
      }
      v9 = v132;
      if (v44 < __N)
        break;
LABEL_36:
      v36 += 4;
      if (v36 >= v131)
        return;
    }
    v103 = (__int32 *)&v132[v36 * a4];
    v104 = (__int32 *)&v132[v38];
    v105 = (__int32 *)&v132[v134];
    v106 = (__int32 *)&v132[v136];
    while (1)
    {
      v107 = (float32x4_t *)&__X[v44 * __incX];
      v108 = 0uLL;
      if ((v22 & 1) != 0)
      {
        v115.i32[0] = *v103;
        v115.i32[1] = *v104;
        v115.i32[2] = *v105;
        v115.i32[3] = *v106;
        v116 = v107->i32[0];
        v107 = (float32x4_t *)((char *)v107 + 4);
        v109 = v36 - 1;
        v110 = vmlaq_n_f32((float32x4_t)0, v115, *(float *)&v116);
        v111 = v106 + 1;
        v112 = v105 + 1;
        v113 = (uint64_t *)(v104 + 1);
        v114 = (uint64_t *)(v103 + 1);
        if (v36 != 1)
        {
          do
          {
LABEL_34:
            v117 = *v114++;
            v118.i64[0] = v117;
            v119 = *v113++;
            v120.i64[0] = v119;
            v121 = *(_QWORD *)v112;
            v112 += 2;
            v122 = v121;
            v123 = *(_QWORD *)v111;
            v111 += 2;
            v118.i64[1] = v122;
            v120.i64[1] = v123;
            v124 = (float32x4_t)vtrn1q_s32(v118, v120);
            v125 = (float32x4_t)vtrn2q_s32(v118, v120);
            v120.i32[0] = v107->i32[0];
            v126 = v107->f32[1];
            v107 = (float32x4_t *)((char *)v107 + 8);
            v110 = vmlaq_n_f32(v110, v124, *(float *)v120.i32);
            v108 = vmlaq_n_f32(v108, v125, v126);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v109 = v36;
        v110 = 0uLL;
        v111 = (__int32 *)&v132[v136];
        v112 = (__int32 *)&v132[v134];
        v113 = (uint64_t *)&v132[v135];
        v114 = (uint64_t *)&v132[v36 * a4];
        if (v36)
          goto LABEL_34;
      }
      v127 = vsubq_f32(vmulq_n_f32(*v107, v10), vaddq_f32(v110, v108));
      v127.f32[0] = v37 * v127.f32[0];
      v128 = v39 * (float)(v127.f32[1] - (float)(v127.f32[0] * *(float *)v113));
      v129 = v41
           * (float)((float)(v127.f32[2] - (float)(v127.f32[0] * *(float *)v112)) - (float)(v128 * *((float *)v112 + 1)));
      v130 = v43
           * (float)((float)((float)(v127.f32[3] - (float)(v127.f32[0] * *(float *)v111))
                           - (float)(v128 * *((float *)v111 + 1)))
                   - (float)(v129 * *((float *)v111 + 2)));
      v107->i32[0] = v127.i32[0];
      v107->f32[1] = v128;
      v107->f32[2] = v129;
      v107->f32[3] = v130;
      if (++v44 == __N)
        goto LABEL_36;
    }
  }
}

uint64_t sub_207C8AB1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x2_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int64x2_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  int *v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32_t v112;
  BOOL v113;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v18 = *(float *)(a3 + 4 * (result + v7 * a4) - 8);
        v19 = (float *)(a5 + 4 * v7);
        v20 = a2;
        do
        {
          v21 = *(v19 - 1);
          v22 = *v19 * a7;
          *v19 = v22;
          *(v19 - 1) = (float)(v21 * a7) - (float)(v22 * v18);
          v19 += a6;
          --v20;
        }
        while (v20);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v16 = a2;
        v17 = (float *)(a5 + 4 * v7);
        do
        {
          *v17 = *v17 * a7;
          v17 += a6;
          --v16;
        }
        while (v16);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = *(float *)(a3 + 4 * (result - 3 + (result - 2) * a4));
      v11 = (float *)(a5 + 4 * v7);
      v12 = a2;
      do
      {
        v13 = *(v11 - 1);
        v14 = *v11 * a7;
        *v11 = v14;
        v15 = (float)(v13 * a7) - (float)(v14 * v8);
        *(v11 - 2) = -(float)((float)((float)(v10 * v15) + (float)(v14 * v9)) - (float)(*(v11 - 2) * a7));
        *(v11 - 1) = v15;
        v11 += a6;
        --v12;
      }
      while (v12);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v23 = v7 + 1;
    v24 = 8 * a4;
    while (1)
    {
      v25 = v23 - 4;
      if (a2 >= 4)
      {
        v26 = 0;
        v27 = a3 + 4 * v25;
        v28 = (float32x4_t *)(v27 + 4 * v23 * a4);
        v29 = result - v25;
        if (result - v25 <= 4)
          v29 = 4;
        v30 = (float32x4_t *)(v27 + 4 * (v23 - 1) * a4);
        v31 = (float32x2_t *)((char *)v30 - 4 * a4);
        while (1)
        {
          v32 = a5 + 4 * v26 * a6;
          v33 = (float *)(v32 + 4 * v23);
          v34 = a5 + 4 * (v26 | 1) * a6;
          v35 = (float *)(v34 + 4 * v23);
          v36 = a5 + 4 * (v26 | 2) * a6;
          v37 = (float *)(v36 + 4 * v23);
          v38 = a5 + 4 * (v26 | 3) * a6;
          v39 = (float *)(v38 + 4 * v23);
          v40 = 0uLL;
          if ((v29 & 1) != 0)
          {
            v59 = *v33++;
            v46 = vmlaq_n_f32((float32x4_t)0, *v28, v59);
            v60 = *v35++;
            v43 = vmlaq_n_f32((float32x4_t)0, *v28, v60);
            v61 = *v37++;
            v42 = vmlaq_n_f32((float32x4_t)0, *v28, v61);
            v62 = *v39++;
            v41 = vmlaq_n_f32((float32x4_t)0, *v28, v62);
            v44 = v29 - 5;
            v45 = (float32x4_t *)((char *)v28 + 4 * a4);
            if (v29 != 5)
            {
LABEL_24:
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              do
              {
                v50 = *v33;
                v51 = v33[1];
                v33 += 2;
                v46 = vmlaq_n_f32(v46, *v45, v50);
                v52 = *v35;
                v53 = v35[1];
                v35 += 2;
                v43 = vmlaq_n_f32(v43, *v45, v52);
                v54 = *v37;
                v55 = v37[1];
                v37 += 2;
                v42 = vmlaq_n_f32(v42, *v45, v54);
                v56 = *v39;
                v57 = v39[1];
                v39 += 2;
                v41 = vmlaq_n_f32(v41, *v45, v56);
                v58 = *(float32x4_t *)((char *)v45 + 4 * a4);
                v47 = vmlaq_n_f32(v47, v58, v51);
                v48 = vmlaq_n_f32(v48, v58, v53);
                v49 = vmlaq_n_f32(v49, v58, v55);
                v45 = (float32x4_t *)((char *)v45 + v24);
                v40 = vmlaq_n_f32(v40, v58, v57);
                v44 -= 2;
              }
              while (v44);
              goto LABEL_29;
            }
          }
          else
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = v29 - 4;
            v45 = v28;
            v46 = 0uLL;
            if (v29 != 4)
              goto LABEL_24;
          }
          v49 = 0uLL;
          v48 = 0uLL;
          v47 = 0uLL;
LABEL_29:
          v63 = (float32x4_t *)(v32 + 4 * v25);
          v64 = (float32x4_t *)(v34 + 4 * v25);
          v65 = (float32x4_t *)(v36 + 4 * v25);
          v66 = (float32x4_t *)(v38 + 4 * v25);
          v67 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v63, a7), vaddq_f32(v47, v46));
          v68 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v64, a7), vaddq_f32(v48, v43));
          v69 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v65, a7), vaddq_f32(v49, v42));
          v70 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v66, a7), vaddq_f32(v40, v41));
          v71 = (int32x4_t)vzip1q_s64(v67, v69);
          v72 = (int32x4_t)vzip1q_s64(v68, v70);
          v73 = (int32x4_t)vzip2q_s64(v67, v69);
          v74 = (int32x4_t)vzip2q_s64(v68, v70);
          v75 = (float32x4_t)vtrn1q_s32(v71, v72);
          v76 = (float32x4_t)vtrn2q_s32(v71, v72);
          v77 = (float32x4_t)vtrn1q_s32(v73, v74);
          v78 = (float32x4_t)vtrn2q_s32(v73, v74);
          v79 = vmlsq_laneq_f32(v77, v78, *v30, 2);
          *(float32x2_t *)v73.i8 = *v31;
          v80 = vmlsq_lane_f32(vmlsq_lane_f32(v76, v78, *(float32x2_t *)v30->f32, 1), v79, *v31, 1);
          v73.i32[0] = v31->i32[-a4];
          v81 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v75, v78, *(float32x2_t *)v30->f32, 0), v79, *v31, 0), v80, *(float32x2_t *)v73.i8, 0);
          v82 = (int32x4_t)vzip1q_s64(v81, (int64x2_t)v79);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v78);
          v84 = (int32x4_t)vzip2q_s64(v81, (int64x2_t)v79);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v80, (int64x2_t)v78);
          *(int32x4_t *)v63 = vtrn1q_s32(v82, v83);
          *(int32x4_t *)v64 = vtrn2q_s32(v82, v83);
          *(int32x4_t *)v65 = vtrn1q_s32(v84, v85);
          *(int32x4_t *)v66 = vtrn2q_s32(v84, v85);
          v26 += 4;
          if (v26 >= a2 - 3)
            goto LABEL_32;
        }
      }
      v26 = 0;
LABEL_32:
      if (v26 < a2)
        break;
LABEL_42:
      v113 = v23 < 5;
      v23 -= 4;
      if (v113)
        return result;
    }
    v86 = a3 + 4 * v25;
    v87 = (float32x4_t *)(v86 + 4 * v23 * a4);
    v88 = 4;
    if (result - v25 > 4)
      v88 = result - v25;
    v89 = (int *)(v86 + 4 * (v23 - 1) * a4);
    v90 = (float *)&v89[-a4];
    while (1)
    {
      v91 = a5 + 4 * v26 * a6;
      v92 = (float *)(v91 + 4 * v23);
      v93 = 0uLL;
      if ((v88 & 1) != 0)
      {
        v97 = *v92++;
        v94 = vmlaq_n_f32((float32x4_t)0, *v87, v97);
        v95 = v88 - 5;
        v96 = (float32x4_t *)((char *)v87 + 4 * a4);
        if (v88 != 5)
        {
          do
          {
LABEL_40:
            v98 = *v92;
            v99 = v92[1];
            v92 += 2;
            v94 = vmlaq_n_f32(v94, *v96, v98);
            v93 = vmlaq_n_f32(v93, *(float32x4_t *)((char *)v96 + 4 * a4), v99);
            v96 = (float32x4_t *)((char *)v96 + v24);
            v95 -= 2;
          }
          while (v95);
        }
      }
      else
      {
        v94 = 0uLL;
        v95 = v88 - 4;
        v96 = v87;
        if (v88 != 4)
          goto LABEL_40;
      }
      v100 = (float32x4_t *)(v91 + 4 * v25);
      _Q1 = vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v94, v93));
      _S4 = v89[2];
      __asm { FMLS            S2, S4, V1.S[3] }
      _S5 = *v89;
      _S4 = v89[1];
      __asm
      {
        FMLS            S3, S4, V1.S[3]
        FMLS            S4, S5, V1.S[3]
      }
      v112 = _S3 - (float)(_S2 * v90[1]);
      v100->f32[0] = (float)(_S4 - (float)(_S2 * *(float *)&v89[-a4])) - (float)(v112 * v90[-a4]);
      v100->f32[1] = v112;
      v100->f32[2] = _S2;
      v100->i32[3] = _Q1.i32[3];
      if (++v26 == a2)
        goto LABEL_42;
    }
  }
  return result;
}

uint64_t sub_207C8AFC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float *v103;
  float *v104;
  uint64_t v105;
  float *v106;
  float32x4_t v107;
  float32x4_t *v108;
  uint64_t v109;
  float32x4_t v110;
  float v111;
  float v112;
  float v113;
  float32x4_t *v114;
  float32x4_t v115;
  float v116;
  float32_t v117;
  float32_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v23 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
        v24 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
        v25 = (float *)(a5 + 4 * v7);
        v26 = a2;
        v27 = 1.0 / *(float *)(a3 + 4 * (result - 2 + (result - 2) * a4));
        do
        {
          v28 = *(v25 - 1);
          v29 = v24 * *v25;
          *v25 = v29;
          *(v25 - 1) = v27 * (float)((float)(v28 * a7) - (float)(v29 * v23));
          v25 += a6;
          --v26;
        }
        while (v26);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v20 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v21 = (float *)(a5 + 4 * v7);
        v22 = a2;
        do
        {
          *v21 = v20 * *v21;
          v21 += a6;
          --v22;
        }
        while (v22);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = (result - 2) * a4;
      v11 = *(float *)(a3 + 4 * (v10 + result - 3));
      v12 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
      v13 = 1.0 / *(float *)(a3 + 4 * (result - 2 + v10));
      v14 = (float *)(a5 + 4 * v7);
      v15 = a2;
      v16 = 1.0 / *(float *)(a3 + 4 * (result - 3 + (result - 3) * a4));
      do
      {
        v17 = *(v14 - 1);
        v18 = v12 * *v14;
        *v14 = v18;
        v19 = v13 * (float)((float)(v17 * a7) - (float)(v18 * v8));
        *(v14 - 2) = v16 * (float)-(float)((float)((float)(v11 * v19) + (float)(v18 * v9)) - (float)(*(v14 - 2) * a7));
        *(v14 - 1) = v19;
        v14 += a6;
        --v15;
      }
      while (v15);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v30 = v7 + 1;
    v120 = a4 + 1;
    v121 = result;
    v31 = -a4;
    v32 = 8 * a4;
    v33 = 4 * a4;
    v122 = a3;
    v123 = a4;
    while (1)
    {
      v34 = v30 - 4;
      v35 = 1.0 / *(float *)(a3 + 4 * (v30 - 4) * v120);
      v36 = 1.0 / *(float *)(a3 + 4 * (v30 - 3) * v120);
      v37 = 1.0 / *(float *)(a3 + 4 * (v30 - 2) * v120);
      v38 = (v30 - 1) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v30 - 1 + v38));
      v124 = v38;
      v40 = 0;
      if (a2 >= 4)
      {
        v41 = a3 + 4 * v34;
        v42 = (float32x4_t *)(v41 + 4 * v30 * a4);
        if (result - v34 <= 4)
          v43 = 4;
        else
          v43 = result - v34;
        v44 = (float32x4_t *)(v41 + 4 * v38);
        v45 = (float32x2_t *)&v44->f32[v31];
        do
        {
          v46 = a5 + 4 * v40 * a6;
          v47 = (float *)(v46 + 4 * v30);
          v48 = a5 + 4 * (v40 | 1) * a6;
          v49 = (float *)(v48 + 4 * v30);
          v50 = a5 + 4 * (v40 | 2) * a6;
          v51 = (float *)(v50 + 4 * v30);
          v52 = a5 + 4 * (v40 | 3) * a6;
          v53 = (float *)(v52 + 4 * v30);
          v54 = 0uLL;
          if ((v43 & 1) != 0)
          {
            v73 = *v47++;
            v60 = vmlaq_n_f32((float32x4_t)0, *v42, v73);
            v74 = *v49++;
            v57 = vmlaq_n_f32((float32x4_t)0, *v42, v74);
            v75 = *v51++;
            v56 = vmlaq_n_f32((float32x4_t)0, *v42, v75);
            v76 = *v53++;
            v55 = vmlaq_n_f32((float32x4_t)0, *v42, v76);
            v58 = v43 - 5;
            v59 = (float32x4_t *)((char *)v42 + 4 * a4);
            if (v43 != 5)
            {
LABEL_25:
              v61 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              do
              {
                v64 = *v47;
                v65 = v47[1];
                v47 += 2;
                v60 = vmlaq_n_f32(v60, *v59, v64);
                v66 = *v49;
                v67 = v49[1];
                v49 += 2;
                v57 = vmlaq_n_f32(v57, *v59, v66);
                v68 = *v51;
                v69 = v51[1];
                v51 += 2;
                v56 = vmlaq_n_f32(v56, *v59, v68);
                v70 = *v53;
                v71 = v53[1];
                v53 += 2;
                v55 = vmlaq_n_f32(v55, *v59, v70);
                v72 = *(float32x4_t *)((char *)v59 + v33);
                v61 = vmlaq_n_f32(v61, v72, v65);
                v62 = vmlaq_n_f32(v62, v72, v67);
                v63 = vmlaq_n_f32(v63, v72, v69);
                v59 = (float32x4_t *)((char *)v59 + v32);
                v54 = vmlaq_n_f32(v54, v72, v71);
                v58 -= 2;
              }
              while (v58);
              goto LABEL_30;
            }
          }
          else
          {
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = v43 - 4;
            v59 = v42;
            v60 = 0uLL;
            if (v43 != 4)
              goto LABEL_25;
          }
          v63 = 0uLL;
          v62 = 0uLL;
          v61 = 0uLL;
LABEL_30:
          v77 = (float32x4_t *)(v46 + 4 * v34);
          v78 = (float32x4_t *)(v48 + 4 * v34);
          v79 = (float32x4_t *)(v50 + 4 * v34);
          v80 = (float32x4_t *)(v52 + 4 * v34);
          v81 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v77, a7), vaddq_f32(v61, v60));
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v78, a7), vaddq_f32(v62, v57));
          v83 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v79, a7), vaddq_f32(v63, v56));
          v84 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v80, a7), vaddq_f32(v54, v55));
          v85 = (int32x4_t)vzip1q_s64(v81, v83);
          v86 = (int32x4_t)vzip1q_s64(v82, v84);
          v87 = (int32x4_t)vzip2q_s64(v81, v83);
          v88 = (int32x4_t)vzip2q_s64(v82, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = (float32x4_t)vtrn1q_s32(v87, v88);
          v92 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v87, v88), v39);
          v93 = vmulq_n_f32(vmlsq_laneq_f32(v91, v92, *v44, 2), v37);
          *(float32x2_t *)v91.f32 = *v45;
          v94 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v90, v92, *(float32x2_t *)v44->f32, 1), v93, *v45, 1), v36);
          v91.i32[0] = v45->i32[v31];
          v95 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v89, v92, *(float32x2_t *)v44->f32, 0), v93, *v45, 0), v94, *(float32x2_t *)v91.f32, 0), v35);
          v96 = (int32x4_t)vzip1q_s64(v95, (int64x2_t)v93);
          v97 = (int32x4_t)vzip1q_s64((int64x2_t)v94, (int64x2_t)v92);
          v98 = (int32x4_t)vzip2q_s64(v95, (int64x2_t)v93);
          v99 = (int32x4_t)vzip2q_s64((int64x2_t)v94, (int64x2_t)v92);
          *(int32x4_t *)v77 = vtrn1q_s32(v96, v97);
          *(int32x4_t *)v78 = vtrn2q_s32(v96, v97);
          *(int32x4_t *)v79 = vtrn1q_s32(v98, v99);
          *(int32x4_t *)v80 = vtrn2q_s32(v98, v99);
          v40 += 4;
        }
        while (v40 < a2 - 3);
      }
      a3 = v122;
      a4 = v123;
      result = v121;
      if (v40 < a2)
        break;
LABEL_41:
      v119 = v30 < 5;
      v30 -= 4;
      if (v119)
        return result;
    }
    v100 = v122 + 4 * v34;
    v101 = (float32x4_t *)(v100 + 4 * v30 * v123);
    v102 = v121 - v34;
    if (v121 - v34 <= 4)
      v102 = 4;
    v103 = (float *)(v100 + 4 * v124);
    v104 = &v103[v31];
    while (1)
    {
      v105 = a5 + 4 * v40 * a6;
      v106 = (float *)(v105 + 4 * v30);
      v107 = 0uLL;
      if ((v102 & 1) != 0)
      {
        v111 = *v106++;
        v110 = vmlaq_n_f32((float32x4_t)0, *v101, v111);
        v108 = (float32x4_t *)((char *)v101 + 4 * v123);
        v109 = v102 - 5;
        if (v102 != 5)
        {
          do
          {
LABEL_39:
            v112 = *v106;
            v113 = v106[1];
            v106 += 2;
            v110 = vmlaq_n_f32(v110, *v108, v112);
            v107 = vmlaq_n_f32(v107, *(float32x4_t *)((char *)v108 + v33), v113);
            v108 = (float32x4_t *)((char *)v108 + v32);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v108 = v101;
        v109 = v102 - 4;
        v110 = 0uLL;
        if (v102 != 4)
          goto LABEL_39;
      }
      v114 = (float32x4_t *)(v105 + 4 * v34);
      v115 = vsubq_f32(vmulq_n_f32(*v114, a7), vaddq_f32(v110, v107));
      v116 = vmuls_lane_f32(v39, v115, 3);
      v117 = v37 * (float)(v115.f32[2] - (float)(v116 * v103[2]));
      v118 = v36 * (float)((float)(v115.f32[1] - (float)(v116 * v103[1])) - (float)(v117 * v104[1]));
      v114->f32[0] = v35
                   * (float)((float)((float)(v115.f32[0] - (float)(v116 * *v103)) - (float)(v117 * v103[v31]))
                           - (float)(v118 * v104[v31]));
      v114->f32[1] = v118;
      v114->f32[2] = v117;
      v114->f32[3] = v116;
      if (++v40 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

uint64_t sub_207C8B51C(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, float32x4_t *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  if (result >= 1)
  {
    v8 = 4 * a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = (uint64_t *)((char *)v10 + v8);
        v12 = &v10[a4];
        v13 = (uint64_t *)((char *)v10 + 12 * a4);
        v14 = result - 1;
        v15 = v10;
        if (result != 1)
        {
          do
          {
            a8.i64[0] = *v15++;
            v16.i64[0] = *v11++;
            v17 = *v12++;
            v18 = *v13++;
            a8.i64[1] = v17;
            v16.i64[1] = v18;
            *a5 = vmulq_n_f32((float32x4_t)vtrn1q_s32((int32x4_t)a8, v16), a6);
            v19 = a5 + 1;
            *v19 = vmulq_n_f32((float32x4_t)vtrn2q_s32((int32x4_t)a8, v16), a6);
            a5 = v19 + 1;
            v20 = v14 <= 2;
            v14 -= 2;
          }
          while (!v20);
        }
        if (!v14)
        {
          v21.i32[0] = *(_DWORD *)v15;
          v21.i32[1] = *(_DWORD *)v11;
          v21.i32[2] = *(_DWORD *)v12;
          v21.i32[3] = *(_DWORD *)v13;
          a8 = vmulq_n_f32(v21, a6);
          *a5++ = a8;
        }
        v9 += 4;
        v10 += 2 * a4;
      }
      while (v9 < a2 - 3);
    }
    v22 = a2 - v9;
    if (a2 > v9)
    {
      v23 = (float32x4_t *)((char *)a3 + 4 * v9 * a4);
      do
      {
        v24 = v23;
        v25 = result - 3;
        if (result > 3)
        {
          do
          {
            v26 = *v24++;
            a8 = vmulq_n_f32(v26, a6);
            *a5++ = a8;
            v20 = v25 <= 4;
            v25 -= 4;
          }
          while (!v20);
        }
        if (v25 != -2)
        {
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
          }
          else
          {
            a8.i32[2] = v24->i32[2];
          }
          a8.i32[1] = v24->i32[1];
        }
        a8.i32[0] = v24->i32[0];
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = a8;
LABEL_24:
        v23 = (float32x4_t *)((char *)v23 + v8);
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sub_207C8B658(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, __n128 *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  __int32 *v22;
  __int32 v23;
  __int32 v24;
  BOOL v25;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v11 = (float32x4_t *)((char *)v11 + v8 * 4);
          a8 = vmulq_n_f32(v13, a6);
          *a5++ = (__n128)a8;
          --v12;
        }
        while (v12);
        v9 += 4;
        ++v10;
      }
      while (v9 < a2 - 3);
    }
    v14 = a2 - v9;
    if (a2 > v9)
    {
      v15 = (__int32 *)&a3[(unint64_t)v9 / 4];
      do
      {
        v16 = v15;
        v17 = result - 3;
        if (result > 3)
        {
          do
          {
            v19.i32[0] = *v16;
            v18 = &v16[v8];
            v21 = *v18;
            v20 = &v18[v8];
            v19.i32[1] = v21;
            v23 = *v20;
            v22 = &v20[v8];
            v19.i32[2] = v23;
            v24 = *v22;
            v16 = &v22[v8];
            v19.i32[3] = v24;
            a8 = vmulq_n_f32(v19, a6);
            *a5++ = (__n128)a8;
            v25 = v17 <= 4;
            v17 -= 4;
          }
          while (!v25);
        }
        if (v17 != -2)
        {
          if (v17)
          {
            if (v17 != -1)
              goto LABEL_21;
          }
          else
          {
            a8.i32[2] = v16[2 * a4];
          }
          a8.i32[1] = v16[a4];
        }
        a8.i32[0] = *v16;
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = (__n128)a8;
LABEL_21:
        ++v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sub_207C8B740(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *i;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = a4;
  if (result < 8)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int128 *)(a3 + 16);
    do
    {
      v8 = a2;
      v9 = v7;
      if (a2 >= 1)
      {
        do
        {
          v10 = *v9;
          *(_OWORD *)a5 = *(v9 - 1);
          *(_OWORD *)(a5 + 16) = v10;
          a5 += 32;
          v9 = (__int128 *)((char *)v9 + v5 * 4);
          --v8;
        }
        while (v8);
      }
      v6 += 8;
      v7 += 2;
    }
    while (v6 < result - 7);
  }
  if (v6 < result)
  {
    if (a2 <= 0)
      v11 = -(-a2 & 3);
    else
      v11 = a2 & 3;
    for (i = (_DWORD *)(a3 + 4 * v6); ; ++i)
    {
      if (a2 < 4)
      {
        v21 = (_DWORD *)(a3 + 4 * v6);
      }
      else
      {
        v13 = 0;
        v14 = i;
        do
        {
          v15 = v14;
          LODWORD(v16) = *v14;
          v17 = &v14[v5];
          HIDWORD(v16) = *v17;
          v18 = &v17[v5];
          LODWORD(v19) = *v18;
          v20 = &v18[v5];
          HIDWORD(v19) = *v20;
          v14 = &v20[v5];
          *(_QWORD *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v19;
          a5 += 16;
          v13 += 4;
        }
        while (v13 < a2 - 3);
        v21 = &v15[4 * a4];
      }
      if (v11 == 1)
        goto LABEL_23;
      if (v11 == 2)
        goto LABEL_22;
      if (v11 == 3)
        break;
LABEL_24:
      if (++v6 == result)
        return result;
    }
    *(_DWORD *)(a5 + 8) = v21[2 * a4];
LABEL_22:
    *(_DWORD *)(a5 + 4) = v21[a4];
LABEL_23:
    *(_DWORD *)a5 = *v21;
    a5 += 16;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_207C8B848(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 7) != 0)
    return sub_207C8B740(result, a2, a3, a4, a5);
  else
    return sub_207C8A010(result, a2, (__int128 *)a3, a4, (_OWORD *)a5);
}

uint64_t sub_207C8B858(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  BOOL v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  int32x4_t v31;

  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a3 + 28 * a4);
    v7 = &a3[3 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = (uint64_t *)((char *)a3 + 20 * a4);
    v11 = &a3[2 * a4];
    v12 = (uint64_t *)((char *)a3 + 12 * a4);
    v13 = &a3[a4];
    v14 = (uint64_t *)((char *)a3 + 4 * a4);
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          v16.i64[0] = *v9++;
          v17.i64[0] = *v14++;
          v18 = *v13++;
          v19 = *v12++;
          v20.i64[0] = *v11++;
          v21.i64[0] = *v10++;
          v22 = *v7++;
          v23 = *v6++;
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v23;
          *a5 = vtrn1q_s32(v16, v17);
          a5[1] = vtrn1q_s32(v20, v21);
          v24 = a5 + 2;
          *v24 = vtrn2q_s32(v16, v17);
          v24[1] = vtrn2q_s32(v20, v21);
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        v26.i32[0] = *(_DWORD *)v9;
        v9 = (uint64_t *)((char *)v9 + 4);
        v26.i32[1] = *(_DWORD *)v14;
        v14 = (uint64_t *)((char *)v14 + 4);
        v26.i32[2] = *(_DWORD *)v13;
        v13 = (uint64_t *)((char *)v13 + 4);
        v26.i32[3] = *(_DWORD *)v12;
        v12 = (uint64_t *)((char *)v12 + 4);
        v27.i32[0] = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 4);
        v27.i32[1] = *(_DWORD *)v10;
        v10 = (uint64_t *)((char *)v10 + 4);
        v27.i32[2] = *(_DWORD *)v7;
        v7 = (uint64_t *)((char *)v7 + 4);
        v27.i32[3] = *(_DWORD *)v6;
        v6 = (uint64_t *)((char *)v6 + 4);
        *a5 = v26;
        a5[1] = v27;
        a5 += 2;
      }
      v9 = (uint64_t *)((char *)v9 + 4 * v8);
      v14 = (uint64_t *)((char *)v14 + 4 * v8);
      v13 = (uint64_t *)((char *)v13 + 4 * v8);
      v12 = (uint64_t *)((char *)v12 + 4 * v8);
      v11 = (uint64_t *)((char *)v11 + 4 * v8);
      v10 = (uint64_t *)((char *)v10 + 4 * v8);
      v7 = (uint64_t *)((char *)v7 + 4 * v8);
      v5 += 8;
      v6 = (uint64_t *)((char *)v6 + 4 * v8);
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    if (a2 <= 0)
      v28 = -(-a2 & 3);
    else
      v28 = a2 & 3;
    while (1)
    {
      v29 = (int32x4_t *)((char *)a3 + 4 * v5 * a4);
      if (a2 >= 4)
      {
        v30 = 0;
        do
        {
          v31 = *v29++;
          *a5++ = v31;
          v30 += 4;
        }
        while (v30 < a2 - 3);
      }
      if (v28 == 1)
        goto LABEL_23;
      if (v28 == 2)
        goto LABEL_22;
      if (v28 == 3)
        break;
LABEL_24:
      if (++v5 == result)
        return result;
    }
    a5->i32[2] = v29->i32[2];
LABEL_22:
    a5->i32[1] = v29->i32[1];
LABEL_23:
    a5->i32[0] = v29->i32[0];
    ++a5;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_207C8B9DC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  if ((result & 7) != 0)
    return sub_207C8B858(result, a2, a3, a4, a5);
  else
    return sub_207C92210(result, a2, a3, a4, a5);
}

void sub_207C8B9EC(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int8 *v66;
  float32x4_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float v79;
  float v80;
  float v81;
  float *v93;
  float32_t v94;
  float32_t v95;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * v11;
          *(v23 - 1) = v26;
          *v23 = (float)(v25 * v11) - (float)(v26 * v22);
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      v11 = a7;
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * v11;
      v21 = (float)(*(v17 - 1) * v11) - (float)(v20 * v14);
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(float)((float)((float)(v16 * v21) + (float)(v20 * v15)) - (float)(*v17 * v11));
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = v18;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x4_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29 * __incX];
          v32 = (float32x4_t *)&__X[(v29 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v29 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v29 | 3) * __incX];
          v35 = 0uLL;
          if ((v18 & 1) != 0)
          {
            v47 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v41 = vmlaq_n_f32((float32x4_t)0, *v30, v47);
            v48 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, *v30, v48);
            v49 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v37 = vmlaq_n_f32((float32x4_t)0, *v30, v49);
            v50 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v36 = vmlaq_n_f32((float32x4_t)0, *v30, v50);
            v39 = v28 - 1;
            v40 = (float32x4_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v41 = vmlaq_n_f32(v41, *v40, v31->f32[v42]);
                v38 = vmlaq_n_f32(v38, *v40, v32->f32[v42]);
                v37 = vmlaq_n_f32(v37, *v40, v33->f32[v42]);
                v36 = vmlaq_n_f32(v36, *v40, v34->f32[v42]);
                v46 = *(float32x4_t *)((char *)v40 + 4 * a4);
                v43 = vmlaq_n_f32(v43, v46, v31->f32[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, v32->f32[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, v33->f32[v42 + 1]);
                v35 = vmlaq_n_f32(v35, v46, v34->f32[v42 + 1]);
                v40 = (float32x4_t *)((char *)v40 + v27);
                v42 += 2;
                v39 -= 2;
              }
              while (v39);
              v31 = (float32x4_t *)((char *)v31 + v42 * 4);
              v32 = (float32x4_t *)((char *)v32 + v42 * 4);
              v33 = (float32x4_t *)((char *)v33 + v42 * 4);
              v34 = (float32x4_t *)((char *)v34 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v28;
            v40 = (float32x4_t *)(a3 + 4 * v28);
            v41 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v51 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v11), vaddq_f32(v43, v41));
          v52 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v11), vaddq_f32(v44, v38));
          v53 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v33, v11), vaddq_f32(v45, v37));
          v54 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v11), vaddq_f32(v35, v36));
          v55 = (int32x4_t)vzip1q_s64(v51, v53);
          v56 = (int32x4_t)vzip1q_s64(v52, v54);
          v57 = (int32x4_t)vzip2q_s64(v51, v53);
          v58 = (int32x4_t)vzip2q_s64(v52, v54);
          v59 = (float32x4_t)vtrn1q_s32(v55, v56);
          v60 = (float32x4_t)vtrn2q_s32(v55, v56);
          v61 = (float32x4_t)vtrn1q_s32(v57, v58);
          v62 = (float32x4_t)vtrn2q_s32(v57, v58);
          v57.i32[0] = v40->i32[1];
          v56.i32[0] = v40->i32[2];
          v63 = vmlsq_lane_f32(v60, v59, *(float32x2_t *)v57.i8, 0);
          v64 = vmlsq_lane_f32(v61, v59, *(float32x2_t *)v56.i8, 0);
          v57.i32[0] = v40->i32[3];
          v65 = vmlsq_lane_f32(v62, v59, *(float32x2_t *)v57.i8, 0);
          v66 = &v40->i8[4 * a4];
          v57.i32[0] = *((_DWORD *)v66 + 2);
          v56.i32[0] = *((_DWORD *)v66 + 3);
          v67 = vmlsq_lane_f32(v64, v63, *(float32x2_t *)v57.i8, 0);
          v57.i32[0] = *(_DWORD *)&v66[4 * a4 + 12];
          v68 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v65, v63, *(float32x2_t *)v56.i8, 0), v67, *(float32x2_t *)v57.i8, 0);
          v69 = (int32x4_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v67);
          v70 = (int32x4_t)vzip1q_s64((int64x2_t)v63, v68);
          v71 = (int32x4_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v67);
          v72 = (int32x4_t)vzip2q_s64((int64x2_t)v63, v68);
          *(int32x4_t *)v31 = vtrn1q_s32(v69, v70);
          *(int32x4_t *)v32 = vtrn2q_s32(v69, v70);
          *(int32x4_t *)v33 = vtrn1q_s32(v71, v72);
          *(int32x4_t *)v34 = vtrn2q_s32(v71, v72);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a1)
        return;
    }
    v73 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v74 = (float32x4_t *)&__X[v29 * __incX];
      v75 = 0uLL;
      if ((v18 & 1) != 0)
      {
        v79 = v74->f32[0];
        v74 = (float32x4_t *)((char *)v74 + 4);
        v76 = vmlaq_n_f32((float32x4_t)0, *v73, v79);
        v77 = v28 - 1;
        v78 = (float32x4_t *)((char *)v73 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v80 = v74->f32[0];
            v81 = v74->f32[1];
            v74 = (float32x4_t *)((char *)v74 + 8);
            v76 = vmlaq_n_f32(v76, *v78, v80);
            v75 = vmlaq_n_f32(v75, *(float32x4_t *)((char *)v78 + 4 * a4), v81);
            v78 = (float32x4_t *)((char *)v78 + v27);
            v77 -= 2;
          }
          while (v77);
        }
      }
      else
      {
        v76 = 0uLL;
        v77 = v28;
        v78 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v74, v11), vaddq_f32(v75, v76)).u32[0];
      _S4 = v78->i32[1];
      _S5 = v78->i32[2];
      __asm
      {
        FMLS            S3, S4, V0.S[0]
        FMLS            S2, S5, V0.S[0]
      }
      _S4 = v78->i32[3];
      __asm { FMLS            S1, S4, V0.S[0] }
      v93 = &v78->f32[a4];
      v94 = _S2 - (float)(_S3 * v93[2]);
      v95 = (float)(_S1 - (float)(_S3 * v93[3])) - (float)(v94 * v93[a4 + 3]);
      v74->i32[0] = _S0;
      v74->f32[1] = _S3;
      v74->f32[2] = v94;
      v74->f32[3] = v95;
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void sub_207C8BE28(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int8 *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float v93;
  float v94;
  float v95;
  float32x4_t v96;
  float v97;
  float v98;
  float v99;
  float *v100;
  float32_t v101;
  float32_t v102;
  float32_t v103;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (float)((float)(v31 * v11) - (float)(v32 * v26));
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v11 = a7;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (float)((float)(*(v20 - 1) * v11) - (float)(v24 * v15));
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *v20 = v23 * (float)-(float)((float)((float)(v18 * v25) + (float)(v24 * v14)) - (float)(*v20 * v11));
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = a4 + 1;
    v34 = 8 * a4;
    v35 = v21;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v33];
      v37 = 1.0 / a3[v33 + v35 * v33];
      v38 = 1.0 / a3[(v35 + 2) * v33];
      v39 = 1.0 / a3[(v35 + 3) * v33];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x4_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40 * __incX];
          v43 = (float32x4_t *)&__X[(v40 | 1) * __incX];
          v44 = (float32x4_t *)&__X[(v40 | 2) * __incX];
          v45 = (float32x4_t *)&__X[(v40 | 3) * __incX];
          v46 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v58 = v42->f32[0];
            v42 = (float32x4_t *)((char *)v42 + 4);
            v52 = vmlaq_n_f32((float32x4_t)0, *v41, v58);
            v59 = v43->f32[0];
            v43 = (float32x4_t *)((char *)v43 + 4);
            v49 = vmlaq_n_f32((float32x4_t)0, *v41, v59);
            v60 = v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4);
            v48 = vmlaq_n_f32((float32x4_t)0, *v41, v60);
            v61 = v45->f32[0];
            v45 = (float32x4_t *)((char *)v45 + 4);
            v47 = vmlaq_n_f32((float32x4_t)0, *v41, v61);
            v50 = v35 - 1;
            v51 = (float32x4_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v53 = 0;
              v54 = 0uLL;
              v55 = 0uLL;
              v56 = 0uLL;
              do
              {
                v52 = vmlaq_n_f32(v52, *v51, v42->f32[v53]);
                v49 = vmlaq_n_f32(v49, *v51, v43->f32[v53]);
                v48 = vmlaq_n_f32(v48, *v51, v44->f32[v53]);
                v47 = vmlaq_n_f32(v47, *v51, v45->f32[v53]);
                v57 = *(float32x4_t *)((char *)v51 + 4 * a4);
                v54 = vmlaq_n_f32(v54, v57, v42->f32[v53 + 1]);
                v55 = vmlaq_n_f32(v55, v57, v43->f32[v53 + 1]);
                v56 = vmlaq_n_f32(v56, v57, v44->f32[v53 + 1]);
                v46 = vmlaq_n_f32(v46, v57, v45->f32[v53 + 1]);
                v51 = (float32x4_t *)((char *)v51 + v34);
                v53 += 2;
                v50 -= 2;
              }
              while (v50);
              v42 = (float32x4_t *)((char *)v42 + v53 * 4);
              v43 = (float32x4_t *)((char *)v43 + v53 * 4);
              v44 = (float32x4_t *)((char *)v44 + v53 * 4);
              v45 = (float32x4_t *)((char *)v45 + v53 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = v35;
            v51 = (float32x4_t *)&a3[v35];
            v52 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v56 = 0uLL;
          v55 = 0uLL;
          v54 = 0uLL;
LABEL_27:
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v42, v11), vaddq_f32(v54, v52));
          v63 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v43, v11), vaddq_f32(v55, v49));
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v44, v11), vaddq_f32(v56, v48));
          v65 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v45, v11), vaddq_f32(v46, v47));
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip1q_s64(v63, v65);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (int32x4_t)vzip2q_s64(v63, v65);
          v70 = (float32x4_t)vtrn1q_s32(v66, v67);
          v71 = (float32x4_t)vtrn2q_s32(v66, v67);
          v72 = (float32x4_t)vtrn1q_s32(v68, v69);
          v73 = (float32x4_t)vtrn2q_s32(v68, v69);
          v74 = vmulq_n_f32(v70, v36);
          v68.i32[0] = v51->i32[1];
          v67.i32[0] = v51->i32[2];
          v75 = vmlsq_lane_f32(v71, v74, *(float32x2_t *)v68.i8, 0);
          v76 = vmlsq_lane_f32(v72, v74, *(float32x2_t *)v67.i8, 0);
          v68.i32[0] = v51->i32[3];
          v77 = vmlsq_lane_f32(v73, v74, *(float32x2_t *)v68.i8, 0);
          v78 = &v51->i8[4 * a4];
          v79 = vmulq_n_f32(v75, v37);
          v75.i32[0] = *((_DWORD *)v78 + 2);
          v67.i32[0] = *((_DWORD *)v78 + 3);
          v80 = vmlsq_lane_f32(v76, v79, *(float32x2_t *)v75.f32, 0);
          v81 = vmulq_n_f32(v80, v38);
          v80.i32[0] = *(_DWORD *)&v78[4 * a4 + 12];
          v82 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v77, v79, *(float32x2_t *)v67.i8, 0), v81, *(float32x2_t *)v80.f32, 0), v39);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v81);
          v84 = (int32x4_t)vzip1q_s64((int64x2_t)v79, v82);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v74, (int64x2_t)v81);
          v86 = (int32x4_t)vzip2q_s64((int64x2_t)v79, v82);
          *(int32x4_t *)v42 = vtrn1q_s32(v83, v84);
          *(int32x4_t *)v43 = vtrn2q_s32(v83, v84);
          *(int32x4_t *)v44 = vtrn1q_s32(v85, v86);
          *(int32x4_t *)v45 = vtrn2q_s32(v85, v86);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a1)
        return;
    }
    v87 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v88 = (float32x4_t *)&__X[v40 * __incX];
      v89 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v93 = v88->f32[0];
        v88 = (float32x4_t *)((char *)v88 + 4);
        v92 = vmlaq_n_f32((float32x4_t)0, *v87, v93);
        v90 = (float32x4_t *)((char *)v87 + 4 * a4);
        v91 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v94 = v88->f32[0];
            v95 = v88->f32[1];
            v88 = (float32x4_t *)((char *)v88 + 8);
            v92 = vmlaq_n_f32(v92, *v90, v94);
            v89 = vmlaq_n_f32(v89, *(float32x4_t *)((char *)v90 + 4 * a4), v95);
            v90 = (float32x4_t *)((char *)v90 + v34);
            v91 -= 2;
          }
          while (v91);
        }
      }
      else
      {
        v90 = (float32x4_t *)&a3[v35];
        v91 = v35;
        v92 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v96 = vsubq_f32(vmulq_n_f32(*v88, v11), vaddq_f32(v92, v89));
      v96.f32[0] = v36 * v96.f32[0];
      v97 = v96.f32[1] - (float)(v96.f32[0] * v90->f32[1]);
      v98 = v96.f32[2] - (float)(v96.f32[0] * v90->f32[2]);
      v99 = v96.f32[3] - (float)(v96.f32[0] * v90->f32[3]);
      v100 = &v90->f32[a4];
      v101 = v37 * v97;
      v102 = v38 * (float)(v98 - (float)(v101 * v100[2]));
      v103 = v39 * (float)((float)(v99 - (float)(v101 * v100[3])) - (float)(v102 * v100[a4 + 3]));
      v88->i32[0] = v96.i32[0];
      v88->f32[1] = v101;
      v88->f32[2] = v102;
      v88->f32[3] = v103;
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

uint64_t sub_207C8C30C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int32 *v30;
  uint64_t v31;
  uint64_t v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  float32x4_t v56;
  uint64_t *v57;
  uint64_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int64x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  __int32 *v112;
  uint64_t v113;
  uint64_t v114;
  __int32 *v115;
  uint64_t v116;
  uint64_t v117;
  __int32 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int32 *v122;
  uint64_t v123;
  float *v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  float32x4_t v132;
  __int32 v133;
  uint64_t v134;
  int32x4_t v135;
  uint64_t v136;
  int32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float v143;
  float32x4_t *v144;
  float32_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v19 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v20 = (float *)(a5 + 4 * v7);
        v21 = a2;
        do
        {
          v22 = *(v20 - 1);
          v23 = *v20 * a7;
          *v20 = v23;
          *(v20 - 1) = (float)(v22 * a7) - (float)(v23 * v19);
          v20 += a6;
          --v21;
        }
        while (v21);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v17 = a2;
        v18 = (float *)(a5 + 4 * v7);
        do
        {
          *v18 = *v18 * a7;
          v18 += a6;
          --v17;
        }
        while (v17);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v11 = *(v9 - 1);
      v10 = *v9;
      v12 = (float *)(a5 + 4 * v7);
      v13 = a2;
      do
      {
        v14 = *(v12 - 1);
        v15 = *v12 * a7;
        *v12 = v15;
        v16 = (float)(v14 * a7) - (float)(v15 * v8);
        *(v12 - 2) = -(float)((float)((float)(v11 * v16) + (float)(v15 * v10)) - (float)(*(v12 - 2) * a7));
        *(v12 - 1) = v16;
        v12 += a6;
        --v13;
      }
      while (v13);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v24 = v7 + 1;
    v25 = a2 - 3;
    v158 = result;
    v159 = a2;
    while (1)
    {
      v26 = v24 - 4;
      if (a2 >= 4)
      {
        v27 = 0;
        v28 = a3 + 4 * v26 * a4;
        v29 = (_DWORD *)(v28 + 4 * v26);
        v30 = (__int32 *)(v28 + 4 * v24);
        v31 = a3 + 4 * (v24 - 3) * a4;
        v32 = v31 + 4 * v26;
        v33 = (__int32 *)(v31 + 4 * v24);
        v34 = a3 + 4 * (v24 - 2) * a4;
        v35 = v34 + 4 * v26;
        v36 = (__int32 *)(v34 + 4 * v24);
        v37 = a3 + 4 * (v24 - 1) * a4;
        if (result - v26 <= 4)
          v38 = 4;
        else
          v38 = result - v26;
        v39 = v37 + 4 * v26 + 20;
        v40 = (__int32 *)(v37 + 4 * v24);
        while (1)
        {
          v41 = a5 + 4 * v27 * a6;
          v42 = (float *)(v41 + 4 * v24);
          v43 = a5 + 4 * (v27 | 1) * a6;
          v44 = (float *)(v43 + 4 * v24);
          v45 = a5 + 4 * (v27 | 2) * a6;
          v46 = (float *)(v45 + 4 * v24);
          v47 = a5 + 4 * (v27 | 3) * a6;
          v48 = (float *)(v47 + 4 * v24);
          v49 = 0uLL;
          if ((v38 & 1) != 0)
          {
            v79.i32[0] = *v30;
            v79.i32[1] = *v33;
            v79.i32[2] = *v36;
            v79.i32[3] = *v40;
            v80 = *v42++;
            v56 = vmlaq_n_f32((float32x4_t)0, v79, v80);
            v81 = *v44++;
            v82 = v81;
            v83 = *v46++;
            v52 = vmlaq_n_f32((float32x4_t)0, v79, v82);
            v51 = vmlaq_n_f32((float32x4_t)0, v79, v83);
            v84 = *v48++;
            v53 = v38 - 5;
            v50 = vmlaq_n_f32((float32x4_t)0, v79, v84);
            v54 = (uint64_t *)v39;
            v55 = (uint64_t *)(v36 + 1);
            v57 = (uint64_t *)(v33 + 1);
            v58 = (uint64_t *)(v30 + 1);
            if (v38 != 5)
            {
LABEL_25:
              v59 = 0uLL;
              v60 = 0uLL;
              v61 = 0uLL;
              do
              {
                v62 = *v58++;
                v63.i64[0] = v62;
                v64 = *v57++;
                v65.i64[0] = v64;
                v66 = *v55++;
                v67 = v66;
                v68 = *v54++;
                v63.i64[1] = v67;
                v65.i64[1] = v68;
                v69 = (float32x4_t)vtrn1q_s32(v63, v65);
                v70 = *v42;
                v71 = v42[1];
                v42 += 2;
                v56 = vmlaq_n_f32(v56, v69, v70);
                v72 = *v44;
                v73 = v44[1];
                v44 += 2;
                v52 = vmlaq_n_f32(v52, v69, v72);
                v74 = *v46;
                v75 = v46[1];
                v46 += 2;
                v51 = vmlaq_n_f32(v51, v69, v74);
                v76 = *v48;
                v77 = v48[1];
                v48 += 2;
                v50 = vmlaq_n_f32(v50, v69, v76);
                v78 = (float32x4_t)vtrn2q_s32(v63, v65);
                v59 = vmlaq_n_f32(v59, v78, v71);
                v60 = vmlaq_n_f32(v60, v78, v73);
                v61 = vmlaq_n_f32(v61, v78, v75);
                v49 = vmlaq_n_f32(v49, v78, v77);
                v53 -= 2;
              }
              while (v53);
              goto LABEL_30;
            }
          }
          else
          {
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = v38 - 4;
            v54 = (uint64_t *)v40;
            v55 = (uint64_t *)v36;
            v56 = 0uLL;
            v57 = (uint64_t *)v33;
            v58 = (uint64_t *)v30;
            if (v38 != 4)
              goto LABEL_25;
          }
          v61 = 0uLL;
          v60 = 0uLL;
          v59 = 0uLL;
LABEL_30:
          v85 = (float32x4_t *)(v41 + 4 * v26);
          v86 = (float32x4_t *)(v43 + 4 * v26);
          v87 = (float32x4_t *)(v45 + 4 * v26);
          v88 = (float32x4_t *)(v47 + 4 * v26);
          v89 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v85, a7), vaddq_f32(v59, v56));
          v90 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v86, a7), vaddq_f32(v60, v52));
          v91 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v87, a7), vaddq_f32(v61, v51));
          v92 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v88, a7), vaddq_f32(v49, v50));
          v93 = (int32x4_t)vzip1q_s64(v89, v91);
          v94 = (int32x4_t)vzip1q_s64(v90, v92);
          v95 = (int32x4_t)vzip2q_s64(v89, v91);
          v96 = (int32x4_t)vzip2q_s64(v90, v92);
          v97 = (float32x4_t)vtrn1q_s32(v93, v94);
          v98 = (float32x4_t)vtrn2q_s32(v93, v94);
          v99 = (float32x4_t)vtrn1q_s32(v95, v96);
          v100 = (float32x4_t)vtrn2q_s32(v95, v96);
          v95.i32[0] = *(_DWORD *)(v35 + 12);
          v101 = vmlsq_lane_f32(v99, v100, *(float32x2_t *)v95.i8, 0);
          v94.i32[0] = *(_DWORD *)(v32 + 8);
          v95.i32[0] = *(_DWORD *)(v32 + 12);
          v102 = vmlsq_lane_f32(v98, v100, *(float32x2_t *)v95.i8, 0);
          v95.i32[0] = v29[3];
          v103 = vmlsq_lane_f32(v97, v100, *(float32x2_t *)v95.i8, 0);
          v104 = vmlsq_lane_f32(v102, v101, *(float32x2_t *)v94.i8, 0);
          v94.i32[0] = v29[1];
          v95.i32[0] = v29[2];
          v105 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v103, v101, *(float32x2_t *)v95.i8, 0), v104, *(float32x2_t *)v94.i8, 0);
          v106 = (int32x4_t)vzip1q_s64(v105, (int64x2_t)v101);
          v107 = (int32x4_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)v100);
          v108 = (int32x4_t)vzip2q_s64(v105, (int64x2_t)v101);
          v109 = (int32x4_t)vzip2q_s64((int64x2_t)v104, (int64x2_t)v100);
          *(int32x4_t *)v85 = vtrn1q_s32(v106, v107);
          *(int32x4_t *)v86 = vtrn2q_s32(v106, v107);
          *(int32x4_t *)v87 = vtrn1q_s32(v108, v109);
          *(int32x4_t *)v88 = vtrn2q_s32(v108, v109);
          v27 += 4;
          if (v27 >= v25)
            goto LABEL_33;
        }
      }
      v27 = 0;
LABEL_33:
      result = v158;
      a2 = v159;
      if (v27 < v159)
        break;
LABEL_44:
      v157 = v24 < 5;
      v24 -= 4;
      if (v157)
        return result;
    }
    v110 = a3 + 4 * v26 * a4;
    v111 = v110 + 4 * v26;
    v112 = (__int32 *)(v110 + 4 * v24);
    v113 = a3 + 4 * (v24 - 3) * a4;
    v114 = v113 + 4 * v26;
    v115 = (__int32 *)(v113 + 4 * v24);
    v116 = a3 + 4 * (v24 - 2) * a4;
    v117 = v116 + 4 * v26;
    v118 = (__int32 *)(v116 + 4 * v24);
    v119 = a3 + 4 * (v24 - 1) * a4;
    if (v158 - v26 <= 4)
      v120 = 4;
    else
      v120 = v158 - v26;
    v121 = v119 + 4 * v26 + 20;
    v122 = (__int32 *)(v119 + 4 * v24);
    while (1)
    {
      v123 = a5 + 4 * v27 * a6;
      v124 = (float *)(v123 + 4 * v24);
      v125 = 0uLL;
      if ((v120 & 1) != 0)
      {
        v132.i32[0] = *v112;
        v132.i32[1] = *v115;
        v132.i32[2] = *v118;
        v132.i32[3] = *v122;
        v133 = *(_DWORD *)v124++;
        v126 = v120 - 5;
        v127 = vmlaq_n_f32((float32x4_t)0, v132, *(float *)&v133);
        v128 = (uint64_t *)v121;
        v129 = (uint64_t *)(v118 + 1);
        v130 = (uint64_t *)(v115 + 1);
        v131 = (uint64_t *)(v112 + 1);
        if (v120 != 5)
        {
          do
          {
LABEL_42:
            v134 = *v131++;
            v135.i64[0] = v134;
            v136 = *v130++;
            v137.i64[0] = v136;
            v138 = *v129++;
            v139 = v138;
            v140 = *v128++;
            v135.i64[1] = v139;
            v137.i64[1] = v140;
            v141 = (float32x4_t)vtrn1q_s32(v135, v137);
            v142 = (float32x4_t)vtrn2q_s32(v135, v137);
            v137.i32[0] = *(__int32 *)v124;
            v143 = v124[1];
            v124 += 2;
            v127 = vmlaq_n_f32(v127, v141, *(float *)v137.i32);
            v125 = vmlaq_n_f32(v125, v142, v143);
            v126 -= 2;
          }
          while (v126);
        }
      }
      else
      {
        v126 = v120 - 4;
        v127 = 0uLL;
        v128 = (uint64_t *)v122;
        v129 = (uint64_t *)v118;
        v130 = (uint64_t *)v115;
        v131 = (uint64_t *)v112;
        if (v120 != 4)
          goto LABEL_42;
      }
      v144 = (float32x4_t *)(v123 + 4 * v26);
      _Q1 = vsubq_f32(vmulq_n_f32(*v144, a7), vaddq_f32(v125, v127));
      _S4 = *(_DWORD *)(v117 + 12);
      __asm { FMLS            S2, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v114 + 12);
      __asm { FMLS            S3, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v111 + 12);
      __asm { FMLS            S6, S4, V1.S[3] }
      v156 = _S3 - (float)(_S2 * *(float *)(v114 + 8));
      v144->f32[0] = (float)(_S6 - (float)(_S2 * *(float *)(v111 + 8))) - (float)(v156 * *(float *)(v111 + 4));
      v144->f32[1] = v156;
      v144->f32[2] = _S2;
      v144->i32[3] = _Q1.i32[3];
      if (++v27 == v159)
        goto LABEL_44;
    }
  }
  return result;
}

uint64_t sub_207C8C8A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  __int32 *v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  uint64_t v51;
  uint64_t v52;
  __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  float32x4_t v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  int32x4_t v78;
  uint64_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int64x2_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  float *v128;
  __int32 *v129;
  uint64_t v130;
  uint64_t v131;
  __int32 *v132;
  uint64_t v133;
  uint64_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  __int32 *v138;
  uint64_t v139;
  float *v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  float32x4_t v148;
  __int32 v149;
  uint64_t v150;
  int32x4_t v151;
  uint64_t v152;
  int32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float v159;
  float32x4_t *v160;
  float32x4_t v161;
  float v162;
  float32_t v163;
  float32_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v25 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v26 = *v25;
        v27 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v28 = (float *)(a5 + 4 * v7);
        v29 = a2;
        v30 = 1.0 / *(v25 - 1);
        do
        {
          v31 = *(v28 - 1);
          v32 = v27 * *v28;
          *v28 = v32;
          *(v28 - 1) = v30 * (float)((float)(v31 * a7) - (float)(v32 * v26));
          v28 += a6;
          --v29;
        }
        while (v29);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v22 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v23 = (float *)(a5 + 4 * v7);
        v24 = a2;
        do
        {
          *v23 = v22 * *v23;
          v23 += a6;
          --v24;
        }
        while (v24);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = *v8;
      v10 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
      v14 = 1.0 / *(v8 - 1);
      v15 = *(v10 - 2);
      v16 = (float *)(a5 + 4 * v7);
      v17 = a2;
      v18 = 1.0 / v15;
      do
      {
        v19 = *(v16 - 1);
        v20 = v13 * *v16;
        *v16 = v20;
        v21 = v14 * (float)((float)(v19 * a7) - (float)(v20 * v9));
        *(v16 - 2) = v18 * (float)-(float)((float)((float)(v12 * v21) + (float)(v20 * v11)) - (float)(*(v16 - 2) * a7));
        *(v16 - 1) = v21;
        v16 += a6;
        --v17;
      }
      while (v17);
    }
    v7 = result - 4;
  }
  v167 = result;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v33 = v7 + 1;
    v170 = a2 - 3;
    v166 = a3;
    v34 = a2;
    while (1)
    {
      v35 = v33 - 4;
      v36 = (v33 - 4) * a4;
      v37 = 1.0 / *(float *)(a3 + 4 * (v36 + v33 - 4));
      v38 = (v33 - 3) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v33 - 3 + v38));
      v40 = (v33 - 2) * a4;
      v41 = 1.0 / *(float *)(a3 + 4 * (v33 - 2 + v40));
      v42 = (v33 - 1) * a4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v33 - 1 + v42));
      v44 = 0;
      if (a2 >= 4)
      {
        v45 = a3 + 4 * v36;
        v46 = (_DWORD *)(v45 + 4 * v35);
        v47 = (__int32 *)(v45 + 4 * v33);
        v48 = a3 + 4 * v38;
        v49 = v48 + 4 * v35;
        v50 = (__int32 *)(v48 + 4 * v33);
        v51 = a3 + 4 * v40;
        v52 = v51 + 4 * v35;
        v53 = (__int32 *)(v51 + 4 * v33);
        if (v167 - v35 <= 4)
          v54 = 4;
        else
          v54 = v167 - v35;
        v55 = a3 + 4 * v42;
        v169 = v55 + 4 * v35 + 20;
        v56 = (__int32 *)(v55 + 4 * v33);
        do
        {
          v57 = a5 + 4 * v44 * a6;
          v58 = (float *)(v57 + 4 * v33);
          v59 = a5 + 4 * (v44 | 1) * a6;
          v60 = (float *)(v59 + 4 * v33);
          result = a5 + 4 * (v44 | 2) * a6;
          v61 = (float *)(result + 4 * v33);
          v62 = a5 + 4 * (v44 | 3) * a6;
          v63 = (float *)(v62 + 4 * v33);
          v64 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v94.i32[0] = *v47;
            v94.i32[1] = *v50;
            v94.i32[2] = *v53;
            v94.i32[3] = *v56;
            v95 = *v58++;
            v71 = vmlaq_n_f32((float32x4_t)0, v94, v95);
            v96 = *v60++;
            v97 = v96;
            v98 = *v61++;
            v67 = vmlaq_n_f32((float32x4_t)0, v94, v97);
            v66 = vmlaq_n_f32((float32x4_t)0, v94, v98);
            v99 = *v63++;
            v68 = v54 - 5;
            v65 = vmlaq_n_f32((float32x4_t)0, v94, v99);
            v69 = (uint64_t *)v169;
            v70 = (uint64_t *)(v53 + 1);
            v72 = (uint64_t *)(v50 + 1);
            v73 = (uint64_t *)(v47 + 1);
            if (v54 != 5)
            {
LABEL_25:
              v74 = 0uLL;
              v75 = 0uLL;
              v76 = 0uLL;
              do
              {
                v77 = *v73++;
                v78.i64[0] = v77;
                v79 = *v72++;
                v80.i64[0] = v79;
                v81 = *v70++;
                v82 = v81;
                v83 = *v69++;
                v78.i64[1] = v82;
                v80.i64[1] = v83;
                v84 = (float32x4_t)vtrn1q_s32(v78, v80);
                v85 = *v58;
                v86 = v58[1];
                v58 += 2;
                v71 = vmlaq_n_f32(v71, v84, v85);
                v87 = *v60;
                v88 = v60[1];
                v60 += 2;
                v67 = vmlaq_n_f32(v67, v84, v87);
                v89 = *v61;
                v90 = v61[1];
                v61 += 2;
                v66 = vmlaq_n_f32(v66, v84, v89);
                v91 = *v63;
                v92 = v63[1];
                v63 += 2;
                v65 = vmlaq_n_f32(v65, v84, v91);
                v93 = (float32x4_t)vtrn2q_s32(v78, v80);
                v74 = vmlaq_n_f32(v74, v93, v86);
                v75 = vmlaq_n_f32(v75, v93, v88);
                v76 = vmlaq_n_f32(v76, v93, v90);
                v64 = vmlaq_n_f32(v64, v93, v92);
                v68 -= 2;
              }
              while (v68);
              goto LABEL_30;
            }
          }
          else
          {
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = v54 - 4;
            v69 = (uint64_t *)v56;
            v70 = (uint64_t *)v53;
            v71 = 0uLL;
            v72 = (uint64_t *)v50;
            v73 = (uint64_t *)v47;
            if (v54 != 4)
              goto LABEL_25;
          }
          v76 = 0uLL;
          v75 = 0uLL;
          v74 = 0uLL;
LABEL_30:
          v100 = (float32x4_t *)(v57 + 4 * v35);
          v101 = (float32x4_t *)(v59 + 4 * v35);
          v102 = (float32x4_t *)(result + 4 * v35);
          v103 = (float32x4_t *)(v62 + 4 * v35);
          v104 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v74, v71));
          v105 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v101, a7), vaddq_f32(v75, v67));
          v106 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v102, a7), vaddq_f32(v76, v66));
          v107 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v103, a7), vaddq_f32(v64, v65));
          v108 = (int32x4_t)vzip1q_s64(v104, v106);
          v109 = (int32x4_t)vzip1q_s64(v105, v107);
          v110 = (int32x4_t)vzip2q_s64(v104, v106);
          v111 = (int32x4_t)vzip2q_s64(v105, v107);
          v112 = (float32x4_t)vtrn1q_s32(v108, v109);
          v113 = (float32x4_t)vtrn2q_s32(v108, v109);
          v114 = (float32x4_t)vtrn1q_s32(v110, v111);
          v115 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v110, v111), v43);
          v110.i32[0] = *(_DWORD *)(v52 + 12);
          v116 = vmlsq_lane_f32(v114, v115, *(float32x2_t *)v110.i8, 0);
          v109.i32[0] = *(_DWORD *)(v49 + 8);
          v110.i32[0] = *(_DWORD *)(v49 + 12);
          v117 = vmlsq_lane_f32(v113, v115, *(float32x2_t *)v110.i8, 0);
          v110.i32[0] = v46[3];
          v118 = vmlsq_lane_f32(v112, v115, *(float32x2_t *)v110.i8, 0);
          v119 = vmulq_n_f32(v116, v41);
          v120 = vmlsq_lane_f32(v117, v119, *(float32x2_t *)v109.i8, 0);
          v109.i32[0] = v46[1];
          v116.i32[0] = v46[2];
          v121 = vmulq_n_f32(v120, v39);
          v122 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v118, v119, *(float32x2_t *)v116.f32, 0), v121, *(float32x2_t *)v109.i8, 0), v37);
          v123 = (int32x4_t)vzip1q_s64(v122, (int64x2_t)v119);
          v124 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v115);
          v125 = (int32x4_t)vzip2q_s64(v122, (int64x2_t)v119);
          v126 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v115);
          *(int32x4_t *)v100 = vtrn1q_s32(v123, v124);
          *(int32x4_t *)v101 = vtrn2q_s32(v123, v124);
          *(int32x4_t *)v102 = vtrn1q_s32(v125, v126);
          *(int32x4_t *)v103 = vtrn2q_s32(v125, v126);
          v44 += 4;
          a2 = v34;
        }
        while (v44 < v170);
      }
      a3 = v166;
      if (v44 < a2)
        break;
LABEL_41:
      v165 = v33 < 5;
      v33 -= 4;
      if (v165)
        return result;
    }
    v127 = v166 + 4 * (v33 - 4) * a4;
    v128 = (float *)(v127 + 4 * v35);
    v129 = (__int32 *)(v127 + 4 * v33);
    v130 = v166 + 4 * (v33 - 3) * a4;
    v131 = v130 + 4 * v35;
    v132 = (__int32 *)(v130 + 4 * v33);
    v133 = v166 + 4 * (v33 - 2) * a4;
    v134 = v133 + 4 * v35;
    result = v167 - v35;
    v135 = (__int32 *)(v133 + 4 * v33);
    if (v167 - v35 <= 4)
      result = 4;
    v136 = v166 + 4 * (v33 - 1) * a4;
    v137 = v136 + 4 * v35 + 20;
    v138 = (__int32 *)(v136 + 4 * v33);
    while (1)
    {
      v139 = a5 + 4 * v44 * a6;
      v140 = (float *)(v139 + 4 * v33);
      v141 = 0uLL;
      if ((result & 1) != 0)
      {
        v148.i32[0] = *v129;
        v148.i32[1] = *v132;
        v148.i32[2] = *v135;
        v148.i32[3] = *v138;
        v149 = *(_DWORD *)v140++;
        v142 = result - 5;
        v143 = vmlaq_n_f32((float32x4_t)0, v148, *(float *)&v149);
        v144 = (uint64_t *)v137;
        v145 = (uint64_t *)(v135 + 1);
        v146 = (uint64_t *)(v132 + 1);
        v147 = (uint64_t *)(v129 + 1);
        if (result != 5)
        {
          do
          {
LABEL_39:
            v150 = *v147++;
            v151.i64[0] = v150;
            v152 = *v146++;
            v153.i64[0] = v152;
            v154 = *v145++;
            v155 = v154;
            v156 = *v144++;
            v151.i64[1] = v155;
            v153.i64[1] = v156;
            v157 = (float32x4_t)vtrn1q_s32(v151, v153);
            v158 = (float32x4_t)vtrn2q_s32(v151, v153);
            v153.i32[0] = *(__int32 *)v140;
            v159 = v140[1];
            v140 += 2;
            v143 = vmlaq_n_f32(v143, v157, *(float *)v153.i32);
            v141 = vmlaq_n_f32(v141, v158, v159);
            v142 -= 2;
          }
          while (v142);
        }
      }
      else
      {
        v142 = result - 4;
        v143 = 0uLL;
        v144 = (uint64_t *)v138;
        v145 = (uint64_t *)v135;
        v146 = (uint64_t *)v132;
        v147 = (uint64_t *)v129;
        if (result != 4)
          goto LABEL_39;
      }
      v160 = (float32x4_t *)(v139 + 4 * v35);
      v161 = vsubq_f32(vmulq_n_f32(*v160, a7), vaddq_f32(v143, v141));
      v162 = vmuls_lane_f32(v43, v161, 3);
      v163 = v41 * (float)(v161.f32[2] - (float)(v162 * *(float *)(v134 + 12)));
      v164 = v39
           * (float)((float)(v161.f32[1] - (float)(v162 * *(float *)(v131 + 12))) - (float)(v163 * *(float *)(v131 + 8)));
      v160->f32[0] = v37
                   * (float)((float)((float)(v161.f32[0] - (float)(v162 * v128[3])) - (float)(v163 * v128[2]))
                           - (float)(v164 * v128[1]));
      v160->f32[1] = v164;
      v160->f32[2] = v163;
      v160->f32[3] = v162;
      if (++v44 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

float *sub_207C8CED0(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = veorq_s8(v6, v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = (float32x4_t)v6;
      v39 = (float32x4_t)v6;
      v40 = (float32x4_t)v6;
      v41 = (float32x4_t)v6;
      v42 = (float32x4_t)v6;
      v43 = (float32x4_t)v6;
      v44 = (float32x4_t)v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = (int8x16_t)vmlaq_n_f32((float32x4_t)v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, (float32x4_t)v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sub_207C80B38(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sub_207C8D060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float32x4_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23,float32x4_t a24,float32x4_t a25,float32x4_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float v46;
  int32x2_t v47;
  float32x4_t *v48;
  __int128 v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int64_t v96;
  float v97;
  float v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  int64_t v123;
  float v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t *v156;
  _DWORD *v157;
  uint64_t v158;
  const float *v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  float *v167;
  uint64_t m;
  int64_t v169;
  float v170;
  float v171;
  int64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  int64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  _DWORD *v198;
  uint64_t v199;
  const float *v200;
  float32x4_t v201;
  uint64_t v202;
  float v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t i;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  float32x4_t *v214;
  float *v215;
  float32x4_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t *v220;
  _DWORD *v221;
  const float *v222;
  float32x2_t v223;
  uint64_t v224;
  float v225;
  float32x2_t *v226;
  float32x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t v230;
  float *v231;
  float *v232;
  int64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t *v249;
  _DWORD *v250;
  uint64_t v251;
  const float *v252;
  float32x4_t v253;
  uint64_t v254;
  float v255;
  float32x4_t *v256;
  float32x4_t v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  uint64_t j;
  int64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t v265;
  float32x4_t *v266;
  float *v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t *v271;
  float *v272;
  float32x2_t v273;
  __int32 *v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t *v277;
  _DWORD *v278;
  const float *v279;
  float32x2_t v280;
  uint64_t v281;
  float v282;
  int64_t v283;
  float32x2_t v284;
  float32x2_t v285;
  uint64_t v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  _DWORD *v296;
  uint64_t v297;
  const float *v298;
  float32x4_t v299;
  uint64_t v300;
  float v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float *v306;
  uint64_t k;
  int64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  uint64_t v311;
  float *v312;
  float *v313;
  int64_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float *v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float *v325;
  float *v326;
  int64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  uint64_t v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  float32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t *v339;
  _DWORD *v340;
  const float *v341;
  float32x2_t v342;
  uint64_t v343;
  float v344;
  float32x2_t v345;
  uint64_t v346;
  float32x2_t *v347;
  float *v348;
  uint64_t v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t *v353;
  _DWORD *v354;
  const float *v355;
  float32x2_t v356;
  uint64_t v357;
  float v358;
  float32x2_t v359;
  uint64_t v360;
  float32x4_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 vars0;
  float *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x4_t *v390;
  float32x4_t *v391;
  float32x4_t *v392;
  float32x4_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v38 = MEMORY[0x24BDAC7A8]();
  v373 = v42;
  v48 = (float32x4_t *)v40;
  LODWORD(v49) = v51.i32[0];
  v50 = v38;
  STACK[0x1218] = *MEMORY[0x24BDAC8D0];
  v51.i32[0] = 1.0;
  v52 = v39 * v38;
  vars0 = v49;
  v370 = v38;
  v371 = v45;
  if (v46 != 1.0)
  {
    *(float *)v47.i32 = v46;
    if (v46 == 0.0)
    {
      if (v38 >= 16 && v52 >= 0x2000)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v41 & v41;
        if (v77 >= 4)
          v77 = 4;
        v78 = __clz(v77) - 61;
        v79 = (1 << v78);
        v399 = v43 << v78;
        v403 = v41 << v78;
        v395 = 4 * v43;
        v80 = 4 * v41;
        v81 = v39 - 1;
        v363 = v45 << 12;
        v82 = 16 * v45;
        v83 = 4 * v45;
        v367 = v44;
        do
        {
          v379 = v44;
          v383 = v76;
          if (v50 - v76 >= 1024)
            v84 = 1024;
          else
            v84 = v50 - v76;
          v375 = v50 - v76;
          if (v50 - v76 >= 1)
          {
            v85 = v50 - (v75 << 10);
            if (v85 >= 1024)
              v85 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v85 - (v85 != 0)) + 4);
          }
          v387 = v75;
          v391 = v48;
          v86 = (uint64_t)v48;
          v87 = v373;
          v88 = v79;
          do
          {
            v89 = (v81 + v88) / v79;
            if (!v89)
              break;
            v51 = sub_207C90B8C(v84, v89, v86, v403, v87, v399, (unint64_t)&a38 | 0x10, v51);
            v87 = (float *)((char *)v87 + v395);
            v86 += v80;
            --v88;
          }
          while (v88);
          v50 = v370;
          if (v375 >= 1)
          {
            v90 = 0;
            v91 = v379;
            do
            {
              v92 = v84 - v90;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v90), *(float *)&vars0);
              if (v371 == 1 && v92 >= 4)
              {
                *(float32x4_t *)((char *)v367 + 4 * v383 * v371 + 4 * v90) = v51;
              }
              else
              {
                if (v92 >= 4)
                  v93 = 4;
                else
                  v93 = v84 - v90;
                v94 = (v93 + 4) & (v93 >> 63);
                if (v93 < 0)
                  v93 = 4;
                if (v94 < v93)
                {
                  v95 = (__int32 *)((char *)v91->i32 + v83 * v94);
                  do
                  {
                    a22 = v51;
                    *v95 = *(_DWORD *)((unint64_t)&a22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94++ & 3)));
                    v95 = (_DWORD *)((char *)v95 + v83);
                  }
                  while (v93 != v94);
                }
              }
              v90 += 4;
              v91 = (float32x4_t *)((char *)v91 + v82);
            }
            while (v90 < v84);
          }
          v76 = v383 + 1024;
          v75 = v387 + 1;
          v48 = v391 + 256;
          v44 = (float32x4_t *)((char *)v379 + v363);
        }
        while (v383 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v125 = 0.0;
            v230 = 2;
            v231 = (float *)v40;
            v124 = 0.0;
            v232 = v42;
            do
            {
              v124 = v124 + (float)(*v231 * *v232);
              v125 = v125 + (float)(v231[v41] * v232[v43]);
              v230 += 2;
              v232 += 2 * v43;
              v231 += 2 * v41;
            }
            while (v230 <= v39);
            v123 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v123 = 0;
            v124 = 0.0;
            v125 = 0.0;
          }
          if (v123 < v39)
            v124 = v124 + (float)(v40->f32[v123 * v41] * v42[v123 * v43]);
          v180 = (float)(v125 + v124) * *(float *)&v49;
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v188 = 0;
            v270 = 2;
            v271 = v40;
            v187 = 0;
            v272 = v42;
            do
            {
              v187 = vmla_n_f32(v187, *v271, *v272);
              v188 = vmla_n_f32(v188, *(float32x2_t *)((char *)v271 + 4 * v41), v272[v43]);
              v270 += 2;
              v272 += 2 * v43;
              v271 += v41;
            }
            while (v270 <= v39);
            v186 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
          }
          if (v186 < v39)
            v187 = vmla_n_f32(v187, *(float32x2_t *)((char *)v40 + 4 * v186 * v41), v42[v186 * v43]);
          v273 = vmul_n_f32(vadd_f32(v188, v187), *(float *)&v49);
          v44->i32[0] = v273.i32[0];
          v274 = &v44->i32[v45];
          goto LABEL_313;
        }
        if (v39 >= 2)
        {
          v233 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v237 = 0;
          v276 = 2;
          v277 = v40;
          v278 = v42;
          v236 = 0;
          v235 = 0;
          v234 = 0;
          v279 = v42;
          do
          {
            v280 = vld1_dup_f32(v279);
            v275 = 8 * v43;
            v279 = (const float *)((char *)v279 + v275);
            v237 = vmla_f32(v237, v280, *v277);
            v235 = vmla_f32(v235, v280, *(float32x2_t *)((char *)v277 + 4));
            v280.i32[0] = v278[v43];
            v234 = vmla_n_f32(v234, *(float32x2_t *)((char *)v277 + 4 * v41), v280.f32[0]);
            v236 = vmla_n_f32(v236, *(float32x2_t *)((char *)v277 + 4 * v41 + 4), v280.f32[0]);
            v276 += 2;
            v277 += v41;
            v278 = v279;
          }
          while (v276 <= v39);
        }
        else
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          v236 = 0;
          v237 = 0;
        }
        if (v233 < v39)
        {
          v281 = 4 * v233 * v41;
          v282 = v42[v233 * v43];
          v237 = vmla_n_f32(v237, *(float32x2_t *)((char *)v40 + v281), v282);
          v235 = vmla_n_f32(v235, *(float32x2_t *)((char *)v40 + (v281 | 4)), v282);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->i32[0] = vmul_n_f32(vadd_f32(v234, v237), *(float *)&v49).u32[0];
        v273 = vmul_n_f32(vadd_f32(v236, v235), *(float *)&v49);
        if (v45 != 1)
        {
          v226->i32[0] = v273.i32[0];
          v274 = (__int32 *)v226 + v45;
LABEL_313:
          *v274 = v273.i32[1];
          return;
        }
LABEL_311:
        *v226 = v273;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_227:
        if (v39 >= 2)
        {
          v212 = 0uLL;
          v213 = 2;
          v214 = (float32x4_t *)((char *)v48 + 4 * v50 - 16);
          v211 = 0uLL;
          v215 = v373;
          do
          {
            v211 = vmlaq_n_f32(v211, *v214, *v215);
            v212 = vmlaq_n_f32(v212, *(float32x4_t *)((char *)v214 + 4 * v41), v215[v43]);
            v213 += 2;
            v215 += 2 * v43;
            v214 = (float32x4_t *)((char *)v214 + 8 * v41);
          }
          while (v213 <= v39);
          v210 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v210 = 0;
          v211 = 0uLL;
          v212 = 0uLL;
        }
        if (v210 < v39)
          v211 = vmlaq_n_f32(v211, *(float32x4_t *)((char *)v48 + 4 * v50 + 4 * v210 * v41 - 16), v373[v210 * v43]);
        v216 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v49);
        v217 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a23 = v216;
            v44->i32[0] = *(_DWORD *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v217++ & 3)));
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v217 != 4);
        }
        return;
      }
      v190 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v191 = 8;
        else
          v191 = v50;
        if (v39 >= 2)
        {
          v196 = 0uLL;
          v197 = v48;
          v198 = v373;
          v199 = 2;
          v195 = 0uLL;
          v194 = 0uLL;
          v193 = 0uLL;
          v200 = v373;
          do
          {
            v201 = vld1q_dup_f32(v200);
            v189 = 8 * v43;
            v200 = (const float *)((char *)v200 + v189);
            v196 = vmlaq_f32(v196, v201, *v197);
            v194 = vmlaq_f32(v194, v201, *(float32x4_t *)((char *)v197 + 4 * v191 - 16));
            v201.i32[0] = v198[v43];
            v193 = vmlaq_n_f32(v193, *(float32x4_t *)((char *)v197 + 4 * v41), v201.f32[0]);
            v195 = vmlaq_n_f32(v195, *(float32x4_t *)((char *)v197 + 4 * v41 + 4 * v191 - 16), v201.f32[0]);
            v199 += 2;
            v197 = (float32x4_t *)((char *)v197 + 8 * v41);
            v198 = v200;
          }
          while (v199 <= v39);
          v192 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v196 = 0uLL;
        }
        v202 = v191 - 4;
        if (v192 < v39)
        {
          v203 = v373[v192 * v43];
          v196 = vmlaq_n_f32(v196, *(float32x4_t *)((char *)v48 + 4 * v192 * v41), v203);
          v194 = vmlaq_n_f32(v194, *(float32x4_t *)((char *)v48 + 4 * v192 * v41 + 4 * v202), v203);
        }
        v204 = (float32x4_t *)((char *)v44 + 4 * v202 * v45);
        v205 = vmulq_n_f32(vaddq_f32(v193, v196), *(float *)&v49);
        if (v45 == 1 && v191 == 8)
        {
          *v44 = v205;
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
        }
        else
        {
          if (v191 >= 4)
            v207 = 0;
          else
            v207 = v191;
          if (v191 < 4)
            v202 = 4;
          if (v207 < v202)
          {
            v208 = (__int32 *)((char *)v44->i32 + v190 * v207);
            do
            {
              a25 = v205;
              *v208 = *(_DWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v207++ & 3)));
              v208 = (_DWORD *)((char *)v208 + v190);
            }
            while (v202 != v207);
          }
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
          if (v45 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a24 = v206;
              v204->i32[0] = *(_DWORD *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v204 = (float32x4_t *)((char *)v204 + v190);
            }
            goto LABEL_225;
          }
        }
        *v204 = v206;
LABEL_225:
        v48 = (float32x4_t *)((char *)v48 + 4 * v191);
        v44 = (float32x4_t *)((char *)v44 + 4 * v191 * v45);
        v50 -= v191;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v100 = (v52 & 0xFFFFFFFFFFFFE000) != 0 && v38 > 15;
    v51.i32[0] = -1.0;
    if (v46 == -1.0)
    {
      if (v100)
      {
        v101 = 0;
        v102 = 0;
        v103 = -v41 & v41;
        if (v103 >= 4)
          v103 = 4;
        v104 = __clz(v103) - 61;
        v105 = (1 << v104);
        v400 = v43 << v104;
        v404 = v41 << v104;
        v396 = 4 * v43;
        v106 = 4 * v41;
        v107 = v39 - 1;
        v364 = v45 << 12;
        v108 = 16 * v45;
        v109 = 4 * v45;
        v368 = v44;
        do
        {
          v380 = v44;
          v384 = v102;
          if (v50 - v102 >= 1024)
            v110 = 1024;
          else
            v110 = v50 - v102;
          v376 = v50 - v102;
          if (v50 - v102 >= 1)
          {
            v111 = v50 - (v101 << 10);
            if (v111 >= 1024)
              v111 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v111 - (v111 != 0)) + 4);
          }
          v388 = v101;
          v392 = v48;
          v112 = (uint64_t)v48;
          v113 = v373;
          v114 = v105;
          do
          {
            v115 = (v107 + v114) / v105;
            if (!v115)
              break;
            v51 = sub_207C90B8C(v110, v115, v112, v404, v113, v400, (unint64_t)&a38 | 0x10, v51);
            v113 = (float *)((char *)v113 + v396);
            v112 += v106;
            --v114;
          }
          while (v114);
          v50 = v370;
          if (v376 >= 1)
          {
            v116 = 0;
            v117 = v380;
            do
            {
              v118 = v110 - v116;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v116), *(float *)&vars0);
              if (v371 == 1 && v118 >= 4)
              {
                v119 = (float32x4_t *)((char *)v368 + 4 * v384 * v371 + 4 * v116);
                v51 = vsubq_f32(v51, *v119);
                *v119 = v51;
              }
              else
              {
                if (v118 >= 4)
                  v120 = 4;
                else
                  v120 = v110 - v116;
                v121 = (v120 + 4) & (v120 >> 63);
                if (v120 < 0)
                  v120 = 4;
                if (v121 < v120)
                {
                  v122 = (float *)((char *)v117->f32 + v109 * v121);
                  do
                  {
                    a26 = v51;
                    *v122 = *(float *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v121++ & 3))) - *v122;
                    v122 = (float *)((char *)v122 + v109);
                  }
                  while (v120 != v121);
                }
              }
              v116 += 4;
              v117 = (float32x4_t *)((char *)v117 + v108);
            }
            while (v116 < v110);
          }
          v102 = v384 + 1024;
          v101 = v388 + 1;
          v48 = v392 + 256;
          v44 = (float32x4_t *)((char *)v380 + v364);
        }
        while (v384 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v171 = 0.0;
            v311 = 2;
            v312 = (float *)v40;
            v170 = 0.0;
            v313 = v42;
            do
            {
              v170 = v170 + (float)(*v312 * *v313);
              v171 = v171 + (float)(v312[v41] * v313[v43]);
              v311 += 2;
              v313 += 2 * v43;
              v312 += 2 * v41;
            }
            while (v311 <= v39);
            v169 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v169 = 0;
            v170 = 0.0;
            v171 = 0.0;
          }
          if (v169 < v39)
            v170 = v170 + (float)(v40->f32[v169 * v41] * v42[v169 * v43]);
          v180 = -(float)(v44->f32[0] - (float)(*(float *)&v49 * (float)(v171 + v170)));
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v240 = 0;
            v332 = 2;
            v333 = v40;
            v239 = 0;
            v334 = v42;
            do
            {
              v239 = vmla_n_f32(v239, *v333, *v334);
              v240 = vmla_n_f32(v240, *(float32x2_t *)((char *)v333 + 4 * v41), v334[v43]);
              v332 += 2;
              v334 += 2 * v43;
              v333 += v41;
            }
            while (v332 <= v39);
            v238 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v238 = 0;
            v239 = 0;
            v240 = 0;
          }
          if (v238 < v39)
            v239 = vmla_n_f32(v239, *(float32x2_t *)((char *)v40 + 4 * v238 * v41), v42[v238 * v43]);
          v335 = 0;
          v336 = vmul_n_f32(vadd_f32(v240, v239), *(float *)&v49);
          do
          {
            a28 = v336;
            v44->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v335++ & 1))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v335 != 2);
          return;
        }
        if (v39 >= 2)
        {
          v314 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v318 = 0;
          v338 = 2;
          v339 = v40;
          v340 = v42;
          v317 = 0;
          v316 = 0;
          v315 = 0;
          v341 = v42;
          do
          {
            v342 = vld1_dup_f32(v341);
            v337 = 8 * v43;
            v341 = (const float *)((char *)v341 + v337);
            v318 = vmla_f32(v318, v342, *v339);
            v316 = vmla_f32(v316, v342, *(float32x2_t *)((char *)v339 + 4));
            v342.i32[0] = v340[v43];
            v315 = vmla_n_f32(v315, *(float32x2_t *)((char *)v339 + 4 * v41), v342.f32[0]);
            v317 = vmla_n_f32(v317, *(float32x2_t *)((char *)v339 + 4 * v41 + 4), v342.f32[0]);
            v338 += 2;
            v339 += v41;
            v340 = v341;
          }
          while (v338 <= v39);
        }
        else
        {
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
        }
        if (v314 < v39)
        {
          v343 = 4 * v314 * v41;
          v344 = v42[v314 * v43];
          v318 = vmla_n_f32(v318, *(float32x2_t *)((char *)v40 + v343), v344);
          v316 = vmla_n_f32(v316, *(float32x2_t *)((char *)v40 + (v343 | 4)), v344);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->f32[0] = vmul_n_f32(vadd_f32(v315, v318), *(float *)&v49).f32[0] - v44->f32[0];
        v345 = vmul_n_f32(vadd_f32(v317, v316), *(float *)&v49);
        if (v45 == 1)
        {
          v228 = vsub_f32(v345, *v226);
          goto LABEL_246;
        }
        v226->f32[0] = v345.f32[0] - v226->f32[0];
        v229 = v345.f32[1] - v226->f32[v45];
LABEL_248:
        v226->f32[v45] = v229;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_290:
        if (v39 >= 2)
        {
          v264 = 0uLL;
          v265 = 2;
          v266 = (float32x4_t *)((char *)v48 + 4 * v50 - 16);
          v263 = 0uLL;
          v267 = v373;
          do
          {
            v263 = vmlaq_n_f32(v263, *v266, *v267);
            v264 = vmlaq_n_f32(v264, *(float32x4_t *)((char *)v266 + 4 * v41), v267[v43]);
            v265 += 2;
            v267 += 2 * v43;
            v266 = (float32x4_t *)((char *)v266 + 8 * v41);
          }
          while (v265 <= v39);
          v262 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v262 = 0;
          v263 = 0uLL;
          v264 = 0uLL;
        }
        if (v262 < v39)
          v263 = vmlaq_n_f32(v263, *(float32x4_t *)((char *)v48 + 4 * v50 + 4 * v262 * v41 - 16), v373[v262 * v43]);
        v268 = vmulq_n_f32(vaddq_f32(v264, v263), *(float *)&v49);
        v269 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a29 = v268;
            v44->f32[0] = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v269++ & 3))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v269 != 4);
        }
        return;
      }
      v242 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v243 = 8;
        else
          v243 = v50;
        if (v39 >= 2)
        {
          v248 = 0uLL;
          v249 = v48;
          v250 = v373;
          v251 = 2;
          v247 = 0uLL;
          v246 = 0uLL;
          v245 = 0uLL;
          v252 = v373;
          do
          {
            v253 = vld1q_dup_f32(v252);
            v241 = 8 * v43;
            v252 = (const float *)((char *)v252 + v241);
            v248 = vmlaq_f32(v248, v253, *v249);
            v246 = vmlaq_f32(v246, v253, *(float32x4_t *)((char *)v249 + 4 * v243 - 16));
            v253.i32[0] = v250[v43];
            v245 = vmlaq_n_f32(v245, *(float32x4_t *)((char *)v249 + 4 * v41), v253.f32[0]);
            v247 = vmlaq_n_f32(v247, *(float32x4_t *)((char *)v249 + 4 * v41 + 4 * v243 - 16), v253.f32[0]);
            v251 += 2;
            v249 = (float32x4_t *)((char *)v249 + 8 * v41);
            v250 = v252;
          }
          while (v251 <= v39);
          v244 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v244 = 0;
          v245 = 0uLL;
          v246 = 0uLL;
          v247 = 0uLL;
          v248 = 0uLL;
        }
        v254 = v243 - 4;
        if (v244 < v39)
        {
          v255 = v373[v244 * v43];
          v248 = vmlaq_n_f32(v248, *(float32x4_t *)((char *)v48 + 4 * v244 * v41), v255);
          v246 = vmlaq_n_f32(v246, *(float32x4_t *)((char *)v48 + 4 * v244 * v41 + 4 * v254), v255);
        }
        v256 = (float32x4_t *)((char *)v44 + 4 * v254 * v45);
        v257 = vmulq_n_f32(vaddq_f32(v245, v248), *(float *)&v49);
        if (v45 == 1 && v243 == 8)
        {
          *v44 = vsubq_f32(v257, *v44);
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
        }
        else
        {
          if (v243 >= 4)
            v259 = 0;
          else
            v259 = v243;
          if (v243 < 4)
            v254 = 4;
          if (v259 < v254)
          {
            v260 = (float *)((char *)v44->f32 + v242 * v259);
            do
            {
              a31 = v257;
              *v260 = *(float *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v259++ & 3))) - *v260;
              v260 = (float *)((char *)v260 + v242);
            }
            while (v254 != v259);
          }
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
          if (v45 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a30 = v258;
              v256->f32[0] = *(float *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v256->f32[0];
              v256 = (float32x4_t *)((char *)v256 + v242);
            }
            goto LABEL_288;
          }
        }
        *v256 = vsubq_f32(v258, *v256);
LABEL_288:
        v48 = (float32x4_t *)((char *)v48 + 4 * v243);
        v44 = (float32x4_t *)((char *)v44 + 4 * v243 * v45);
        v50 -= v243;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v100)
    {
      v126 = 0;
      v127 = 0;
      v128 = -v41 & v41;
      if (v128 >= 4)
        v128 = 4;
      v129 = __clz(v128) - 61;
      v130 = (1 << v129);
      v401 = v43 << v129;
      v405 = v41 << v129;
      v397 = 4 * v43;
      v131 = 4 * v41;
      v132 = v39 - 1;
      v360 = v45 << 12;
      v133 = 16 * v45;
      v134 = 4 * v45;
      v369 = v44;
      v361 = (float32x4_t)vdupq_lane_s32(v47, 0);
      v365 = v46;
      do
      {
        v381 = v44;
        v385 = v127;
        if (v50 - v127 >= 1024)
          v135 = 1024;
        else
          v135 = v50 - v127;
        v377 = v50 - v127;
        if (v50 - v127 >= 1)
        {
          v136 = v50 - (v126 << 10);
          if (v136 >= 1024)
            v136 = 1024;
          bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v136 - (v136 != 0)) + 4);
        }
        v389 = v126;
        v393 = v48;
        v137 = (uint64_t)v48;
        v138 = v373;
        v139 = v130;
        do
        {
          v140 = (v132 + v139) / v130;
          if (!v140)
            break;
          v51 = sub_207C90B8C(v135, v140, v137, v405, v138, v401, (unint64_t)&a38 | 0x10, v51);
          v138 = (float *)((char *)v138 + v397);
          v137 += v131;
          --v139;
        }
        while (v139);
        v50 = v370;
        if (v377 >= 1)
        {
          v141 = 0;
          v142 = v381;
          do
          {
            v143 = v135 - v141;
            v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v141), *(float *)&vars0);
            if (v371 == 1 && v143 >= 4)
            {
              v144 = (float32x4_t *)((char *)v369 + 4 * v385 * v371 + 4 * v141);
              v51 = vmlaq_f32(v51, *v144, v361);
              *v144 = v51;
            }
            else
            {
              if (v143 >= 4)
                v145 = 4;
              else
                v145 = v135 - v141;
              v146 = (v145 + 4) & (v145 >> 63);
              if (v145 < 0)
                v145 = 4;
              if (v146 < v145)
              {
                v147 = (float *)((char *)v142->f32 + v134 * v146);
                do
                {
                  a32 = v51;
                  *v147 = *(float *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v146++ & 3)))
                        + (float)(v365 * *v147);
                  v147 = (float *)((char *)v147 + v134);
                }
                while (v145 != v146);
              }
            }
            v141 += 4;
            v142 = (float32x4_t *)((char *)v142 + v133);
          }
          while (v141 < v135);
        }
        v127 = v385 + 1024;
        v126 = v389 + 1;
        v48 = v393 + 256;
        v44 = (float32x4_t *)((char *)v381 + v360);
      }
      while (v385 + 1024 < v370);
      return;
    }
    if (v38 < 1)
      return;
    if ((unint64_t)v38 < 4)
    {
      if ((unint64_t)v38 < 2)
      {
        if (v39 >= 2)
        {
          v174 = 0.0;
          v324 = 2;
          v325 = (float *)v40;
          v173 = 0.0;
          v326 = v42;
          do
          {
            v173 = v173 + (float)(*v325 * *v326);
            v174 = v174 + (float)(v325[v41] * v326[v43]);
            v324 += 2;
            v326 += 2 * v43;
            v325 += 2 * v41;
          }
          while (v324 <= v39);
          v172 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v172 = 0;
          v173 = 0.0;
          v174 = 0.0;
        }
        if (v172 < v39)
          v173 = v173 + (float)(v40->f32[v172 * v41] * v42[v172 * v43]);
        v178 = v174 + v173;
        v179 = v44->f32[0] * *(float *)v47.i32;
        goto LABEL_194;
      }
      if (v38 == 2)
      {
        if (v39 >= 2)
        {
          v285 = 0;
          v346 = 2;
          v347 = v40;
          v284 = 0;
          v348 = v42;
          do
          {
            v284 = vmla_n_f32(v284, *v347, *v348);
            v285 = vmla_n_f32(v285, *(float32x2_t *)((char *)v347 + 4 * v41), v348[v43]);
            v346 += 2;
            v348 += 2 * v43;
            v347 += v41;
          }
          while (v346 <= v39);
          v283 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v283 = 0;
          v284 = 0;
          v285 = 0;
        }
        if (v283 < v39)
          v284 = vmla_n_f32(v284, *(float32x2_t *)((char *)v40 + 4 * v283 * v41), v42[v283 * v43]);
        v349 = 0;
        v350 = vmul_n_f32(vadd_f32(v285, v284), *(float *)&v49);
        do
        {
          a34 = v350;
          v44->f32[0] = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v349++ & 1)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v349 != 2);
        return;
      }
      if (v39 >= 2)
      {
        v327 = v39 & 0xFFFFFFFFFFFFFFFELL;
        v331 = 0;
        v352 = 2;
        v353 = v40;
        v354 = v42;
        v330 = 0;
        v329 = 0;
        v328 = 0;
        v355 = v42;
        do
        {
          v356 = vld1_dup_f32(v355);
          v351 = 8 * v43;
          v355 = (const float *)((char *)v355 + v351);
          v331 = vmla_f32(v331, v356, *v353);
          v329 = vmla_f32(v329, v356, *(float32x2_t *)((char *)v353 + 4));
          v356.i32[0] = v354[v43];
          v328 = vmla_n_f32(v328, *(float32x2_t *)((char *)v353 + 4 * v41), v356.f32[0]);
          v330 = vmla_n_f32(v330, *(float32x2_t *)((char *)v353 + 4 * v41 + 4), v356.f32[0]);
          v352 += 2;
          v353 += v41;
          v354 = v355;
        }
        while (v352 <= v39);
      }
      else
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 0;
      }
      if (v327 < v39)
      {
        v357 = 4 * v327 * v41;
        v358 = v42[v327 * v43];
        v331 = vmla_n_f32(v331, *(float32x2_t *)((char *)v40 + v357), v358);
        v329 = vmla_n_f32(v329, *(float32x2_t *)((char *)v40 + (v357 | 4)), v358);
      }
      v226 = (float32x2_t *)&v44->f32[v45];
      v44->f32[0] = vmul_n_f32(vadd_f32(v328, v331), *(float *)&v49).f32[0] + (float)(*(float *)v47.i32 * v44->f32[0]);
      v359 = vmul_n_f32(vadd_f32(v330, v329), *(float *)&v49);
      if (v45 != 1)
      {
        v226->f32[0] = v359.f32[0] + (float)(*(float *)v47.i32 * v226->f32[0]);
        v229 = v359.f32[1] + (float)(*(float *)v47.i32 * v226->f32[v45]);
        goto LABEL_248;
      }
      v273 = vmla_f32(v359, *v226, (float32x2_t)vdup_lane_s32(v47, 0));
      goto LABEL_311;
    }
    if (v38 == 4)
    {
      v50 = 4;
LABEL_344:
      if (v39 >= 2)
      {
        v310 = 0uLL;
        v319 = 2;
        v320 = (float32x4_t *)((char *)v48 + 4 * v50 - 16);
        v309 = 0uLL;
        v321 = v373;
        do
        {
          v309 = vmlaq_n_f32(v309, *v320, *v321);
          v310 = vmlaq_n_f32(v310, *(float32x4_t *)((char *)v320 + 4 * v41), v321[v43]);
          v319 += 2;
          v321 += 2 * v43;
          v320 = (float32x4_t *)((char *)v320 + 8 * v41);
        }
        while (v319 <= v39);
        v308 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v308 = 0;
        v309 = 0uLL;
        v310 = 0uLL;
      }
      if (v308 < v39)
        v309 = vmlaq_n_f32(v309, *(float32x4_t *)((char *)v48 + 4 * v50 + 4 * v308 * v41 - 16), v373[v308 * v43]);
      v322 = vmulq_n_f32(vaddq_f32(v310, v309), *(float *)&v49);
      v323 = 4 - v50;
      if (4 - v50 <= 3)
      {
        do
        {
          a35 = v322;
          v44->f32[0] = *(float *)((unint64_t)&a35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v323++ & 3)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v323 != 4);
      }
      return;
    }
    v287 = (float32x4_t)vdupq_lane_s32(v47, 0);
    v288 = 4 * v45;
    while (1)
    {
      if (v50 >= 8)
        v289 = 8;
      else
        v289 = v50;
      if (v39 >= 2)
      {
        v294 = 0uLL;
        v295 = v48;
        v296 = v373;
        v297 = 2;
        v293 = 0uLL;
        v292 = 0uLL;
        v291 = 0uLL;
        v298 = v373;
        do
        {
          v299 = vld1q_dup_f32(v298);
          v286 = 8 * v43;
          v298 = (const float *)((char *)v298 + v286);
          v294 = vmlaq_f32(v294, v299, *v295);
          v292 = vmlaq_f32(v292, v299, *(float32x4_t *)((char *)v295 + 4 * v289 - 16));
          v299.i32[0] = v296[v43];
          v291 = vmlaq_n_f32(v291, *(float32x4_t *)((char *)v295 + 4 * v41), v299.f32[0]);
          v293 = vmlaq_n_f32(v293, *(float32x4_t *)((char *)v295 + 4 * v41 + 4 * v289 - 16), v299.f32[0]);
          v297 += 2;
          v295 = (float32x4_t *)((char *)v295 + 8 * v41);
          v296 = v298;
        }
        while (v297 <= v39);
        v290 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v290 = 0;
        v291 = 0uLL;
        v292 = 0uLL;
        v293 = 0uLL;
        v294 = 0uLL;
      }
      v300 = v289 - 4;
      if (v290 < v39)
      {
        v301 = v373[v290 * v43];
        v294 = vmlaq_n_f32(v294, *(float32x4_t *)((char *)v48 + 4 * v290 * v41), v301);
        v292 = vmlaq_n_f32(v292, *(float32x4_t *)((char *)v48 + 4 * v290 * v41 + 4 * v300), v301);
      }
      v302 = (float32x4_t *)((char *)v44 + 4 * v300 * v45);
      v303 = vmulq_n_f32(vaddq_f32(v291, v294), *(float *)&v49);
      if (v45 == 1 && v289 == 8)
      {
        *v44 = vmlaq_f32(v303, *v44, v287);
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
      }
      else
      {
        if (v289 >= 4)
          v305 = 0;
        else
          v305 = v289;
        if (v289 < 4)
          v300 = 4;
        if (v305 < v300)
        {
          v306 = (float *)((char *)v44->f32 + v288 * v305);
          do
          {
            a37 = v303;
            *v306 = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v305++ & 3)))
                  + (float)(*(float *)v47.i32 * *v306);
            v306 = (float *)((char *)v306 + v288);
          }
          while (v300 != v305);
        }
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
        if (v45 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a36 = v304;
            v302->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v47.i32 * v302->f32[0]);
            v302 = (float32x4_t *)((char *)v302 + v288);
          }
          goto LABEL_342;
        }
      }
      *v302 = vmlaq_f32(v304, *v302, v287);
LABEL_342:
      v48 = (float32x4_t *)((char *)v48 + 4 * v289);
      v44 = (float32x4_t *)((char *)v44 + 4 * v289 * v45);
      v50 -= v289;
      if (v50 <= 4)
      {
        if (v50 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v38 >= 16 && v52 >= 0x2000)
  {
    v53 = 0;
    v54 = 0;
    v55 = -v41 & v41;
    if (v55 >= 4)
      v55 = 4;
    v56 = __clz(v55) - 61;
    v57 = (1 << v56);
    v398 = v43 << v56;
    v402 = v41 << v56;
    v394 = 4 * v43;
    v58 = 4 * v41;
    v59 = v39 - 1;
    v362 = v45 << 12;
    v60 = 16 * v45;
    v61 = 4 * v45;
    v366 = v44;
    do
    {
      v378 = v44;
      v382 = v54;
      if (v50 - v54 >= 1024)
        v62 = 1024;
      else
        v62 = v50 - v54;
      v374 = v50 - v54;
      if (v50 - v54 >= 1)
      {
        v63 = v50 - (v53 << 10);
        if (v63 >= 1024)
          v63 = 1024;
        bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v63 - (v63 != 0)) + 4);
      }
      v386 = v53;
      v390 = v48;
      v64 = (uint64_t)v48;
      v65 = v373;
      v66 = v57;
      do
      {
        v67 = (v59 + v66) / v57;
        if (!v67)
          break;
        v51 = sub_207C90B8C(v62, v67, v64, v402, v65, v398, (unint64_t)&a38 | 0x10, v51);
        v65 = (float *)((char *)v65 + v394);
        v64 += v58;
        --v66;
      }
      while (v66);
      v50 = v370;
      if (v374 >= 1)
      {
        v68 = 0;
        v69 = v378;
        do
        {
          v70 = v62 - v68;
          v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v68), *(float *)&vars0);
          if (v371 == 1 && v70 >= 4)
          {
            v71 = (float32x4_t *)((char *)v366 + 4 * v382 * v371 + 4 * v68);
            v51 = vaddq_f32(v51, *v71);
            *v71 = v51;
          }
          else
          {
            if (v70 >= 4)
              v72 = 4;
            else
              v72 = v62 - v68;
            v73 = (v72 + 4) & (v72 >> 63);
            if (v72 < 0)
              v72 = 4;
            if (v73 < v72)
            {
              v74 = (float *)((char *)v69->f32 + v61 * v73);
              do
              {
                a19 = v51;
                *v74 = *(float *)((unint64_t)&a19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73++ & 3))) + *v74;
                v74 = (float *)((char *)v74 + v61);
              }
              while (v72 != v73);
            }
          }
          v68 += 4;
          v69 = (float32x4_t *)((char *)v69 + v60);
        }
        while (v68 < v62);
      }
      v54 = v382 + 1024;
      v53 = v386 + 1;
      v48 = v390 + 256;
      v44 = (float32x4_t *)((char *)v378 + v362);
    }
    while (v382 + 1024 < v370);
    return;
  }
  if (v38 < 1)
    return;
  if ((unint64_t)v38 < 4)
  {
    if ((unint64_t)v38 < 2)
    {
      if (v39 >= 2)
      {
        v98 = 0.0;
        v175 = 2;
        v176 = (float *)v40;
        v97 = 0.0;
        v177 = v42;
        do
        {
          v97 = v97 + (float)(*v176 * *v177);
          v98 = v98 + (float)(v176[v41] * v177[v43]);
          v175 += 2;
          v177 += 2 * v43;
          v176 += 2 * v41;
        }
        while (v175 <= v39);
        v96 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v96 = 0;
        v97 = 0.0;
        v98 = 0.0;
      }
      if (v96 < v39)
        v97 = v97 + (float)(v40->f32[v96 * v41] * v42[v96 * v43]);
      v178 = v98 + v97;
      v179 = v44->f32[0];
LABEL_194:
      v180 = v179 + (float)(*(float *)&v49 * v178);
LABEL_352:
      v44->f32[0] = v180;
      return;
    }
    if (v38 == 2)
    {
      sub_207C90E94(-2, v39, v40, v41, v42, v43, (float32x2_t *)v44, v45, *(float *)&v49);
      return;
    }
    if (v39 >= 2)
    {
      v181 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v185 = 0;
      v219 = 2;
      v220 = v40;
      v221 = v42;
      v184 = 0;
      v183 = 0;
      v182 = 0;
      v222 = v42;
      do
      {
        v223 = vld1_dup_f32(v222);
        v218 = 8 * v43;
        v222 = (const float *)((char *)v222 + v218);
        v185 = vmla_f32(v185, v223, *v220);
        v183 = vmla_f32(v183, v223, *(float32x2_t *)((char *)v220 + 4));
        v223.i32[0] = v221[v43];
        v182 = vmla_n_f32(v182, *(float32x2_t *)((char *)v220 + 4 * v41), v223.f32[0]);
        v184 = vmla_n_f32(v184, *(float32x2_t *)((char *)v220 + 4 * v41 + 4), v223.f32[0]);
        v219 += 2;
        v220 += v41;
        v221 = v222;
      }
      while (v219 <= v39);
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
    }
    if (v181 < v39)
    {
      v224 = 4 * v181 * v41;
      v225 = v42[v181 * v43];
      v185 = vmla_n_f32(v185, *(float32x2_t *)((char *)v40 + v224), v225);
      v183 = vmla_n_f32(v183, *(float32x2_t *)((char *)v40 + (v224 | 4)), v225);
    }
    v226 = (float32x2_t *)&v44->f32[v45];
    v44->f32[0] = v44->f32[0] + vmul_n_f32(vadd_f32(v182, v185), *(float *)&v49).f32[0];
    v227 = vmul_n_f32(vadd_f32(v184, v183), *(float *)&v49);
    if (v45 == 1)
    {
      v228 = vadd_f32(v227, *v226);
LABEL_246:
      *v226 = v228;
      return;
    }
    v226->f32[0] = v227.f32[0] + v226->f32[0];
    v229 = v227.f32[1] + v226->f32[v45];
    goto LABEL_248;
  }
  if (v38 == 4)
  {
    v50 = 4;
    goto LABEL_174;
  }
  v149 = 4 * v45;
  do
  {
    if (v50 >= 8)
      v150 = 8;
    else
      v150 = v50;
    if (v39 >= 2)
    {
      v155 = 0uLL;
      v156 = v48;
      v157 = v373;
      v158 = 2;
      v154 = 0uLL;
      v153 = 0uLL;
      v152 = 0uLL;
      v159 = v373;
      do
      {
        v160 = vld1q_dup_f32(v159);
        v148 = 8 * v43;
        v159 = (const float *)((char *)v159 + v148);
        v155 = vmlaq_f32(v155, v160, *v156);
        v153 = vmlaq_f32(v153, v160, *(float32x4_t *)((char *)v156 + 4 * v150 - 16));
        v160.i32[0] = v157[v43];
        v152 = vmlaq_n_f32(v152, *(float32x4_t *)((char *)v156 + 4 * v41), v160.f32[0]);
        v154 = vmlaq_n_f32(v154, *(float32x4_t *)((char *)v156 + 4 * v41 + 4 * v150 - 16), v160.f32[0]);
        v158 += 2;
        v156 = (float32x4_t *)((char *)v156 + 8 * v41);
        v157 = v159;
      }
      while (v158 <= v39);
      v151 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v151 = 0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      v155 = 0uLL;
    }
    v161 = v150 - 4;
    if (v151 < v39)
    {
      v162 = v373[v151 * v43];
      v155 = vmlaq_n_f32(v155, *(float32x4_t *)((char *)v48 + 4 * v151 * v41), v162);
      v153 = vmlaq_n_f32(v153, *(float32x4_t *)((char *)v48 + 4 * v151 * v41 + 4 * v161), v162);
    }
    v163 = (float32x4_t *)((char *)v44 + 4 * v161 * v45);
    v164 = vmulq_n_f32(vaddq_f32(v152, v155), *(float *)&v49);
    if (v45 == 1 && v150 == 8)
    {
      *v44 = vaddq_f32(v164, *v44);
      v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
LABEL_169:
      *v163 = vaddq_f32(v165, *v163);
      goto LABEL_172;
    }
    if (v150 >= 4)
      v166 = 0;
    else
      v166 = v150;
    if (v150 < 4)
      v161 = 4;
    if (v166 < v161)
    {
      v167 = (float *)((char *)v44->f32 + v149 * v166);
      do
      {
        a21 = v164;
        *v167 = *(float *)((unint64_t)&a21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v166++ & 3))) + *v167;
        v167 = (float *)((char *)v167 + v149);
      }
      while (v161 != v166);
    }
    v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
    if (v45 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a20 = v165;
      v163->f32[0] = *(float *)((unint64_t)&a20 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v163->f32[0];
      v163 = (float32x4_t *)((char *)v163 + v149);
    }
LABEL_172:
    v48 = (float32x4_t *)((char *)v48 + 4 * v150);
    v44 = (float32x4_t *)((char *)v44 + 4 * v150 * v45);
    v50 -= v150;
  }
  while (v50 > 4);
  if (v50 >= 1)
LABEL_174:
    sub_207C90A7C(-v50, v39, (float32x4_t *)((char *)v48 + 4 * v50 - 16), v41, v373, v43, (float32x4_t *)((char *)v44 + 4 * (v50 - 4) * v45), v45, *(float *)&v49);
}

uint64_t sub_207C8ED3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_20822AAC0 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_207C90A7C(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t sub_207C90B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t sub_207C90E94(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

_OWORD *sub_207C90FB0(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_207C910D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void sub_207C9158C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,char a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(float);
  void (*v71)(__n128);
  float32x4_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *(*v88)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  __n128 *v112;
  float32x4_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(float);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float32x2_t v175;
  float *(*v176)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  float *(*v185)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  float32x4_t *v191;
  uint64_t v192;
  uint64_t v193;

  v61 = MEMORY[0x24BDAC7A8]();
  v193 = v63;
  v186 = v64;
  v66 = v65;
  v67 = v61;
  v68 = v59;
  STACK[0x102A8] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v69 = 1;
  else
    v69 = v60;
  v70 = (void (*)(float))sub_207C8B51C;
  if (v58 == 111)
    v70 = (void (*)(float))sub_207C8B658;
  v153 = v70;
  if (v58 == 111)
    v71 = (void (*)(__n128))sub_207C8B848;
  else
    v71 = (void (*)(__n128))sub_207C8B9DC;
  v190 = v62;
  if (v59 < 1)
  {
    v191 = (float32x4_t *)&a58;
    v73 = &STACK[0x10240];
  }
  else
  {
    v72 = (float32x4_t *)malloc_type_malloc((v59 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v62 = v190;
    v191 = v72;
    v73 = (unint64_t *)&v72[4096];
  }
  v163 = (uint64_t)(v73 + 8);
  if (v66 >= 1)
  {
    v156 = 0;
    v74 = 0;
    v184 = v68 - 3;
    v175 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v62, 0).u64[0];
    if (v68 <= 0)
      v75 = -(-v68 & 3);
    else
      v75 = v68 & 3;
    v164 = (v193 << 9) + 512;
    v165 = v75;
    v181 = 16 * v193;
    v179 = v186 + 12 * v193;
    v162 = 4 * v193;
    v174 = v186 + 16;
    v76 = 128;
    v178 = v186 + 8 * v193;
    v177 = v186 + 4 * v193;
    v152 = v66;
    vars8 = v69;
    v161 = v68;
    vars0 = v71;
    while (1)
    {
      v77 = v66 >= v76 ? v76 : v66;
      v154 = v74 + 128;
      v155 = v76;
      v78 = v74 + 128 <= v66 ? 128 : v66 - v74;
      v192 = v78;
      v153(v67);
      v79 = (__n128)v190;
      if (v68 >= 1)
        break;
LABEL_134:
      v76 = v155 + 128;
      v156 -= 128;
      v74 = v154;
      v66 = v152;
      if (v154 >= v152)
        goto LABEL_135;
    }
    v173 = 0;
    v80 = 0;
    v81 = 0;
    v166 = (v77 + v156) << 9;
    v182 = 16 * (v77 + v156);
    v82 = *(float *)&v190 != 0.0;
    if (*(float *)&v190 == 1.0 || v74 != 0)
      v82 = 0;
    v183 = v82;
    v84 = v192 & 3;
    if (v192 <= 0)
      v84 = -(-v192 & 3);
    v157 = 4 - v84;
    v158 = v84;
    v170 = v186;
    v85 = 128;
    v172 = v186;
    v171 = v163;
    v185 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
    v176 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
    while (1)
    {
      v168 = v85;
      v169 = v80;
      if (v68 >= v85)
        v86 = v85;
      else
        v86 = v68;
      v180 = v86 + v80;
      v167 = v81 + 128;
      if (v81 + 128 <= v68)
        v87 = 128;
      else
        v87 = v68 - v81;
      v188 = v186 + 4 * v81;
      v189 = v81;
      v88 = v176;
      if ((v87 & 7) != 0)
        v88 = sub_207C88D00;
      v176 = v88;
      v89 = v185;
      if ((v87 & 7) != 0)
        v89 = sub_207C8CED0;
      v185 = v89;
      v187 = v87;
      v71(v79);
      v90 = v189;
      v91 = *(float *)&v190;
      v92 = v189;
      if (v189 < v184)
        break;
LABEL_92:
      if (v165)
      {
        if (v92 - v90 >= v187)
          v131 = v187;
        else
          v131 = v92 - v90;
        v132 = v187 - v131;
        if (v187 - v131 >= 3)
          v133 = 3;
        else
          v133 = v187 - v131;
        if (v132 >= 1)
        {
          v79 = 0uLL;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
        }
        v134 = v188 + 4 * v92 * v193;
        v135 = (const float *)(v163 + 4 * v92 * v192);
        if (v183)
        {
          if (v131)
            sub_207C80864(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192, v91);
          if (v132 >= 1)
          {
            v136 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v137 = -(-v131 & 7);
              else
                v137 = v131 & 7;
              v136 = v137 * v157;
            }
            sub_207C80994((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v136), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v138 = 0;
              v139 = v92 + v169;
              if (v92 + v169 >= v180)
                v139 = v180;
              v140 = v170 + v162 * v92 + 4 * v139;
              v141 = &a50;
              v142 = 1;
              do
              {
                v143 = 0;
                do
                {
                  v79.n128_f32[0] = *((float *)v141 + v143) + (float)(*(float *)(v140 + 4 * v143) * *(float *)&v190);
                  *(_DWORD *)(v140 + 4 * v143++) = v79.n128_u32[0];
                }
                while (v142 != v143);
                ++v138;
                ++v142;
                v141 += 2;
                v140 += v162;
              }
              while (v138 != v165);
            }
          }
        }
        else
        {
          if (v131)
            sub_207C80994(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192);
          if (v132 >= 1)
          {
            v144 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v145 = -(-v131 & 7);
              else
                v145 = v131 & 7;
              v144 = v145 * v157;
            }
            sub_207C80994((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v144), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v146 = 0;
              v147 = v92 + v169;
              if (v92 + v169 >= v180)
                v147 = v180;
              v148 = v170 + v162 * v92 + 4 * v147;
              v149 = &a50;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v79.n128_f32[0] = *(float *)(v148 + 4 * v151) + *((float *)v149 + v151);
                  *(_DWORD *)(v148 + 4 * v151++) = v79.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v162;
              }
              while (v146 != v165);
            }
          }
        }
      }
      v171 += v166;
      v172 += v164;
      v85 = v168 + 128;
      v80 = v169 - 128;
      v173 += v164;
      v170 += 512;
      v81 = v167;
      if (v167 >= v68)
        goto LABEL_134;
    }
    v93 = 0;
    v95 = v172;
    v94 = v173;
    v96 = (_OWORD *)v171;
    v97 = v189;
    while (1)
    {
      if (v93 <= 0)
        v98 = -(-v93 & 7);
      else
        v98 = v93 & 7;
      v99 = v93 - v98;
      if (v93 - v98 >= v187)
        v100 = v187;
      else
        v100 = v93 - v98;
      v101 = v187 - v100;
      if (v187 - v100 >= 1)
      {
        v79 = 0uLL;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
      }
      v102 = v90 + v93;
      v103 = v188 + 4 * v97 * v193;
      v104 = (float32x4_t *)(v186 + v94);
      if (v183)
      {
        if (v100)
        {
          v176(v191, (uint64_t)v96, v104, v193, v100, v192, v91);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v105 = 8;
        else
          v105 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v105);
        v106 = v103 + 4 * v100;
        if (v180 >= v99)
          v107 = v99;
        else
          v107 = v180;
        v108 = 4 * v107;
        if ((v102 & 4) != 0)
        {
          v91 = *(float *)&v190;
          *(float32x4_t *)(v95 + v108) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v95 + v108), *(float *)&v190), (float32x4_t)a50);
          if (v180 >= v99)
            v121 = v99;
          else
            v121 = v180;
          *(float *)(v174 + 4 * v121 + v94) = *(float *)&a51
                                            + (float)(*(float *)(v174 + 4 * v121 + v94) * *(float *)&v190);
          v122 = v177 + 4 * v121 + v94;
          *(float32x4_t *)v122 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v122, *(float *)&v190), (float32x4_t)a52);
          *(float32x2_t *)(v122 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v122 + 16)), *(float32x2_t *)&a53);
          v123 = v178 + 4 * v121 + v94;
          *(float32x4_t *)v123 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v123, *(float *)&v190), (float32x4_t)a54);
          *(float32x2_t *)(v123 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v123 + 16)), *(float32x2_t *)&a55);
          *(float *)(v123 + 24) = *((float *)&a55 + 2) + (float)(*(float *)(v123 + 24) * *(float *)&v190);
          v124 = (float32x4_t *)(v179 + v94 + 4 * v121);
          v125 = v124[1];
          *v124 = vaddq_f32(vmulq_n_f32(*v124, *(float *)&v190), (float32x4_t)a56);
          v112 = (__n128 *)(v106 + 12 * v193 + 16);
          v113 = vmulq_n_f32(v125, *(float *)&v190);
          v114 = &a57;
        }
        else
        {
          v91 = *(float *)&v190;
          *(float *)(v95 + v108) = *(float *)&a50 + (float)(*(float *)(v95 + v108) * *(float *)&v190);
          if (v180 >= v99)
            v109 = v99;
          else
            v109 = v180;
          v110 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v109 + v94) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v177 + 4 * v109 + v94)), *(float32x2_t *)&a52);
          v111 = (float32x2_t *)(v178 + 4 * v109 + v94);
          *v111 = vadd_f32(vmul_f32(v175, *v111), v110);
          v111[1].f32[0] = *((float *)&a54 + 2) + (float)(v111[1].f32[0] * *(float *)&v190);
          v112 = (__n128 *)(v106 + 12 * v193);
          v113 = vmulq_n_f32(*(float32x4_t *)(v179 + v94 + 4 * v109), *(float *)&v190);
          v114 = &a56;
        }
      }
      else
      {
        if (v100)
        {
          v185(v191, (uint64_t)v96, v104, v193, v100, v192);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v115 = 8;
        else
          v115 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v115);
        v116 = v180;
        if (v180 >= v99)
          v117 = v99;
        else
          v117 = v180;
        v118 = 4 * v117;
        if ((v102 & 4) != 0)
        {
          *(float32x4_t *)(v95 + v118) = vaddq_f32(*(float32x4_t *)(v95 + v118), (float32x4_t)a50);
          if (v180 >= v99)
            v126 = v99;
          else
            v126 = v180;
          *(float *)(v174 + 4 * v126 + v94) = *(float *)(v174 + 4 * v126 + v94) + *(float *)&a51;
          v127 = v177 + 4 * v126 + v94;
          *(float32x4_t *)v127 = vaddq_f32(*(float32x4_t *)v127, (float32x4_t)a52);
          *(float32x2_t *)(v127 + 16) = vadd_f32(*(float32x2_t *)(v127 + 16), *(float32x2_t *)&a53);
          v128 = v178 + 4 * v126 + v94;
          *(float32x4_t *)v128 = vaddq_f32(*(float32x4_t *)v128, (float32x4_t)a54);
          *(float32x2_t *)(v128 + 16) = vadd_f32(*(float32x2_t *)(v128 + 16), *(float32x2_t *)&a55);
          *(float *)(v128 + 24) = *(float *)(v128 + 24) + *((float *)&a55 + 2);
          v129 = v179 + v94 + 4 * v126;
          *(float32x4_t *)v129 = vaddq_f32(*(float32x4_t *)v129, (float32x4_t)a56);
          v130 = *(float32x4_t *)(v129 + 16);
          v112 = (__n128 *)(v129 + 16);
          v113 = v130;
          v114 = &a57;
        }
        else
        {
          *(float *)(v95 + v118) = *(float *)(v95 + v118) + *(float *)&a50;
          if (v180 >= v99)
            v116 = v99;
          v119 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v116 + v94) = vadd_f32(*(float32x2_t *)(v177 + 4 * v116 + v94), *(float32x2_t *)&a52);
          v120 = (float32x2_t *)(v178 + 4 * v116 + v94);
          *v120 = vadd_f32(*v120, v119);
          v120[1].f32[0] = v120[1].f32[0] + *((float *)&a54 + 2);
          v112 = (__n128 *)(v103 + 4 * v100 + 12 * v193);
          v113 = *(float32x4_t *)(v179 + v94 + 4 * v116);
          v114 = &a56;
        }
        v91 = *(float *)&v190;
      }
      v79 = (__n128)vaddq_f32(v113, *(float32x4_t *)v114);
      *v112 = v79;
LABEL_90:
      v97 += 4;
      v93 += 4;
      v90 = v189;
      v92 = v189 + v93;
      v96 = (_OWORD *)((char *)v96 + v182);
      v95 += v181;
      v94 += v181;
      if (v189 + v93 >= v184)
      {
        v68 = v161;
        v71 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v68 >= 1)
    free(v191);
}

void sub_207C91FF4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_207C92044(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_207C920A8(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void sub_207C9214C(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

uint64_t sub_207C92210(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = (uint64_t *)((char *)a3 + 4 * a4);
  v6 = &a3[a4];
  v7 = &v5[a4];
  v8 = &v6[a4];
  v9 = &v7[a4];
  v10 = &v8[a4];
  v11 = &v9[a4];
  v12 = 32 * a4 - 4 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        v14.i64[0] = *a3++;
        v15.i64[0] = *v5++;
        v16 = *v6++;
        v17 = *v7++;
        v18.i64[0] = *v8++;
        v19.i64[0] = *v9++;
        v20 = *v10++;
        v21 = *v11++;
        v14.i64[1] = v16;
        v15.i64[1] = v17;
        v18.i64[1] = v20;
        v19.i64[1] = v21;
        *a5 = vtrn1q_s32(v14, v15);
        a5[1] = vtrn1q_s32(v18, v19);
        v22 = a5 + 2;
        *v22 = vtrn2q_s32(v14, v15);
        v22[1] = vtrn2q_s32(v18, v19);
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      v24.i32[0] = *(_DWORD *)a3;
      a3 = (uint64_t *)((char *)a3 + 4);
      v24.i32[1] = *(_DWORD *)v5;
      v5 = (uint64_t *)((char *)v5 + 4);
      v24.i32[2] = *(_DWORD *)v6;
      v6 = (uint64_t *)((char *)v6 + 4);
      v24.i32[3] = *(_DWORD *)v7;
      v7 = (uint64_t *)((char *)v7 + 4);
      v25.i32[0] = *(_DWORD *)v8;
      v8 = (uint64_t *)((char *)v8 + 4);
      v25.i32[1] = *(_DWORD *)v9;
      v9 = (uint64_t *)((char *)v9 + 4);
      v25.i32[2] = *(_DWORD *)v10;
      v10 = (uint64_t *)((char *)v10 + 4);
      v25.i32[3] = *(_DWORD *)v11;
      v11 = (uint64_t *)((char *)v11 + 4);
      *a5 = v24;
      a5[1] = v25;
      a5 += 2;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (uint64_t *)((char *)a3 + v12);
    v5 = (uint64_t *)((char *)v5 + v12);
    v6 = (uint64_t *)((char *)v6 + v12);
    v7 = (uint64_t *)((char *)v7 + v12);
    v8 = (uint64_t *)((char *)v8 + v12);
    v9 = (uint64_t *)((char *)v9 + v12);
    v10 = (uint64_t *)((char *)v10 + v12);
    v11 = (uint64_t *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

uint64_t sub_207C922E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C92950(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C92F40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C93670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_207C93D30(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_207C93E00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C94400(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C94990(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_207C94ED0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void sub_207C953A4(_DWORD *a1, CBLAS_ORDER __Order, CBLAS_UPLO __Uplo, CBLAS_TRANSPOSE __TransA, CBLAS_DIAG __Diag, int __N, const float *__A, int __lda, float *__X, int __incX)
{
  if (a1 && *a1 != 1)
    printf("*** ERROR *** CONTEXT ID is incorrect");
  else
    cblas_strsv(__Order, __Uplo, __TransA, __Diag, __N, __A, __lda, __X, __incX);
}

void sub_207C953F0(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const float *a8, float a9, float a10, int __lda, float *__B, int __ldb, float *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_sgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_207C80F94(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_207C95490(_DWORD *a1, CBLAS_ORDER a2, uint64_t a3, CBLAS_UPLO a4, CBLAS_TRANSPOSE a5, CBLAS_DIAG a6, uint64_t a7, uint64_t a8, float a9, float *__A, int __lda, float *__B, int __ldb)
{
  if (!a1)
  {
LABEL_5:
    cblas_strsm(a2, (const CBLAS_SIDE)a3, a4, a5, a6, a7, a8, a9, __A, __lda, __B, __ldb);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_207C84974(a2, a3, a4, a5, a6, a7, a8, __A, a9, __lda, (char *)__B, __ldb);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_207C95524(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,int a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,char a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, float);
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *(*v64)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v65)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, float);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v118;
  uint64_t v119;
  float *(*v120)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  float *(*v124)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t __Na;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v37 = MEMORY[0x24BDAC7A8]();
  v131 = v38;
  v114 = v39;
  v106 = v40;
  v42 = v41;
  v44 = v43;
  v45 = v37;
  v46 = v35;
  STACK[0x101F8] = *MEMORY[0x24BDAC8D0];
  if (v34 == 111)
    v47 = v36;
  else
    v47 = 1;
  v105 = v47;
  vars0 = v36;
  if (v34 == 111)
    v48 = 1;
  else
    v48 = v36;
  v113 = v48;
  v49 = (void (*)(uint64_t, uint64_t, float))sub_207C8B51C;
  if (v34 == 111)
    v49 = (void (*)(uint64_t, uint64_t, float))sub_207C8B658;
  v104 = v49;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_207C8B9DC;
  if (v34 == 111)
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_207C8B848;
  v112 = v50;
  if (v35 < 1)
  {
    v128 = &a34;
    v51 = &STACK[0x10180];
  }
  else
  {
    v128 = (char *)malloc_type_malloc((v35 << 9) + 65632, 0x100004052888210uLL);
    v51 = (unint64_t *)(v128 + 0x10000);
  }
  v122 = (uint64_t)(v51 + 8);
  if (v42 >= 1)
  {
    v52 = 0;
    v53 = 16 * v131;
    v108 = 4 * v131;
    v54 = 4 * v131 + 4;
    v111 = v46;
    v103 = v42;
    while (1)
    {
      v107 = v52 + 128;
      v55 = v52 + 128 <= v42 ? 128 : v42 - v52;
      v115 = v106 + 4 * v52 * v105;
      v104(v55, v46, v45);
      if (v46 >= 1)
        break;
LABEL_96:
      v52 = v107;
      v42 = v103;
      if (v107 >= v103)
        goto LABEL_97;
    }
    v56 = v55;
    v57 = 0;
    v58 = v44 != 0.0;
    if (v44 == 1.0 || v52 != 0)
      v58 = 0;
    v121 = v58;
    v60 = v55 & 3;
    if (v55 <= 0)
      v60 = -(-v55 & 3);
    v109 = 4 - v60;
    v110 = v60;
    v61 = v114;
    v120 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_207C815A0;
    v124 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_207C7FF30;
    __Na = v55;
    while (1)
    {
      v130 = v57;
      v62 = v57 + 128;
      if (v57 + 128 <= v46)
        v63 = 128;
      else
        v63 = v46 - v57;
      v123 = v114 + 4 * v57;
      v64 = v124;
      if ((v63 & 7) != 0)
        v64 = sub_207C8CED0;
      v124 = v64;
      v65 = v120;
      if ((v63 & 7) != 0)
        v65 = sub_207C88D00;
      v120 = v65;
      v112(v63, v56, v115 + 4 * v57 * v113, vars0, v128);
      v66 = v130;
      v67 = v63;
      v127 = v63;
      v118 = v62;
      v119 = v61;
      vars8 = v63 + v130;
      if (v63 + v130 >= 4)
      {
        v68 = 0;
        v69 = 0;
        v132 = v63 + v130 - 3;
        v70 = v61;
        v56 = __Na;
        while (2)
        {
          v71 = v69 - v66;
          v72 = v69 & 4;
          if ((v69 & 4) != 0)
            v73 = v69 - v66 - 4;
          else
            v73 = v69 - v66;
          v74 = v73 & ~(v71 >> 63);
          if (v74 > v67)
            goto LABEL_63;
          v75 = v123 + 4 * v69 * v131;
          v76 = (_OWORD *)(v122 + 4 * v69 * v56);
          if (v71 < 0)
          {
            v78 = 0;
            if (v121)
              goto LABEL_54;
          }
          else
          {
            v125 = 16 * (v68 & 1);
            v126 = v122 + 4 * v69 * v56;
            v77 = (char *)&a26 + v125;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            a26 = 0u;
            a27 = 0u;
            if (v67 - v73 >= 8)
              v78 = 8;
            else
              v78 = v67 - v73;
            v124((float32x4_t *)&v128[4 * v73 * v56], (uint64_t)v76, (float32x4_t *)&a26, 8, v78, v56);
            v75 += 4 * v73;
            if (v121)
            {
              v79 = 0;
              v76 = (_OWORD *)v126;
              v80 = v70 + v125 + 4 * v73;
              v56 = __Na;
              v67 = v127;
              do
              {
                if (v72 < v78)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v80 + 4 * v81) = *(float *)&v77[4 * v81] + (float)(*(float *)(v80 + 4 * v81) * v44);
                    ++v81;
                  }
                  while (v72 + v81 < v78);
                }
                ++v72;
                ++v79;
                v77 += 36;
                v80 += v54;
              }
              while (v79 != 4);
              v53 = 16 * v131;
              v66 = v130;
              if (v78 + v74 >= v127)
                goto LABEL_63;
LABEL_54:
              v120((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56, v44);
LABEL_62:
              v56 = __Na;
              v66 = v130;
              v67 = v127;
LABEL_63:
              v69 += 4;
              ++v68;
              v70 += v53;
              if (v69 >= v132)
                goto LABEL_66;
              continue;
            }
            v82 = 0;
            v76 = (_OWORD *)v126;
            v83 = v70 + v125 + 4 * v73;
            v56 = __Na;
            v67 = v127;
            do
            {
              if (v72 < v78)
              {
                v84 = 0;
                do
                {
                  *(float *)(v83 + 4 * v84) = *(float *)(v83 + 4 * v84) + *(float *)&v77[4 * v84];
                  ++v84;
                }
                while (v72 + v84 < v78);
              }
              ++v72;
              ++v82;
              v77 += 36;
              v83 += v54;
            }
            while (v82 != 4);
            v53 = 16 * v131;
            v66 = v130;
            if (v78 + v74 >= v127)
              goto LABEL_63;
          }
          break;
        }
        v124((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56);
        goto LABEL_62;
      }
      v69 = 0;
      v56 = __Na;
LABEL_66:
      v85 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v85)
      {
        v86 = v69 - v66;
        v87 = (v69 - v66) & ~((v69 - v66) >> 63);
        if (v67 > v87)
          break;
      }
LABEL_95:
      v61 = v119 + 512;
      v57 = v118;
      v46 = v111;
      if (v118 >= v111)
        goto LABEL_96;
    }
    v88 = v123 + 4 * v69 * v131;
    v89 = (const float *)(v122 + 4 * v69 * v56);
    if (v86 < 0)
    {
      v91 = 0;
      v97 = 0;
      v98 = 0;
      if (v121)
      {
LABEL_86:
        sub_207C80864((float32x4_t *)&v128[4 * v97 * v56 + 4 * v91], v89, v88, v131, v67 - v97, v85, __Na, v44);
LABEL_94:
        v56 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v67 - v87 >= 8)
        v90 = 8;
      else
        v90 = v67 - v87;
      if (v110)
        v91 = (v87 & 4) * v109;
      else
        v91 = 0;
      v92 = v88 + 4 * v87;
      sub_207C80994((float32x4_t *)&v128[4 * v86 * v56 + 4 * v91], (const float *)(v122 + 4 * v69 * v56), (uint64_t)&a26, 8, v90, v85, v56);
      if (v121)
      {
        v56 = __Na;
        if (v85 >= 1)
        {
          v93 = 0;
          v94 = v119 + v108 * v69 + 4 * v87;
          v95 = &a26;
          do
          {
            v96 = 0;
            do
            {
              *(float *)(v94 + 4 * v96) = *((float *)v95 + v96) + (float)(*(float *)(v94 + 4 * v96) * v44);
              ++v96;
            }
            while (v93 + v96 < v85);
            ++v93;
            v95 = (__int128 *)((char *)v95 + 36);
            v94 += v54;
          }
          while (v93 != v85);
        }
        v88 = v92 + 4 * v90;
        v97 = v90 + v87;
        v53 = 16 * v131;
        v67 = v127;
        goto LABEL_86;
      }
      v56 = __Na;
      if (v85 >= 1)
      {
        v99 = 0;
        v100 = v119 + v108 * v69 + 4 * v87;
        v101 = &a26;
        do
        {
          v102 = 0;
          do
          {
            *(float *)(v100 + 4 * v102) = *(float *)(v100 + 4 * v102) + *((float *)v101 + v102);
            ++v102;
          }
          while (v99 + v102 < v85);
          ++v99;
          v101 = (__int128 *)((char *)v101 + 36);
          v100 += v54;
        }
        while (v99 != v85);
      }
      v88 = v92 + 4 * v90;
      v98 = v90 + v87;
      v53 = 16 * v131;
      v67 = v127;
    }
    sub_207C80994((float32x4_t *)&v128[4 * v98 * v56 + 4 * v91], v89, v88, v131, v67 - v98, v85, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v46 >= 1)
    free(v128);
}

void sub_207C95C50()
{
  sub_207C95C64("basic_string");
}

void sub_207C95C64(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_207C95CB4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C06DDA0, MEMORY[0x24BEDAAF0]);
}

void sub_207C95CA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_207C95CB4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t sub_207C95CD8(char *cStr)
{
  const __CFString *v1;
  int AppBooleanValue;
  _BOOL4 v3;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v1, CFSTR("Apple Global Domain"), &keyExistsAndHasValidFormat);
  CFRelease(v1);
  if (AppBooleanValue)
    v3 = keyExistsAndHasValidFormat != 0;
  else
    v3 = 0;
  return v3 | ((keyExistsAndHasValidFormat != 0) << 8);
}

uint64_t sub_207C95D50(char *cStr)
{
  const __CFString *v1;
  const __CFNumber *v2;
  int Value;
  uint64_t valuePtr;

  v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  v2 = (const __CFNumber *)CFPreferencesCopyAppValue(v1, CFSTR("Apple Global Domain"));
  CFRelease(v1);
  if (v2 && (valuePtr = 0, Value = CFNumberGetValue(v2, kCFNumberFloat64Type, &valuePtr), CFRelease(v2), Value))
    return valuePtr;
  else
    return 0;
}

uint64_t sub_207C95DF0(char *cStr)
{
  const __CFString *v1;
  const __CFNumber *v2;
  int Value;
  unsigned int v4;
  double valuePtr;

  v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  v2 = (const __CFNumber *)CFPreferencesCopyAppValue(v1, CFSTR("Apple Global Domain"));
  CFRelease(v1);
  if (!v2)
    return 0;
  valuePtr = 0.0;
  Value = CFNumberGetValue(v2, kCFNumberFloat64Type, &valuePtr);
  CFRelease(v2);
  if (!Value)
    return 0;
  *(float *)&v4 = valuePtr;
  return v4 | 0x100000000;
}

CFIndex sub_207C95EA0(char *cStr)
{
  const __CFString *v1;
  CFIndex AppIntegerValue;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  AppIntegerValue = CFPreferencesGetAppIntegerValue(v1, CFSTR("Apple Global Domain"), &keyExistsAndHasValidFormat);
  CFRelease(v1);
  if (keyExistsAndHasValidFormat)
    return AppIntegerValue;
  else
    return 0;
}

void sub_207C95F10(_BYTE *a1@<X8>)
{
  BOOL v2;
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v10 = &unk_24C072468;
  v2 = sub_207CF7AE4((uint64_t)&v10);
  nullsub_51(&v10);
  if (!v2)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  objc_msgSend(MEMORY[0x24BE086D0], "aneSubType");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    a1[23] = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v4, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[24] = 1;

}

void sub_207C96034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_51(va);
  _Unwind_Resume(a1);
}

void sub_207C96048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_207C96058@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  _QWORD *exception;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;

  v12 = 1;
  sub_2080A1038(&v26, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_2080A1038(&v24, a4, *a2, 1, 1, 1);
      v26 = v24;
      v27 = v25;
      if (!HIDWORD(*a2))
      {
        v13 = *a3;
        v14 = *a3 * *a2;
        v12 = a5;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_2080A1038(&v24, a4, v20, *a2, 1, 1);
      v26 = v24;
      v27 = v25;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v14 = *a3;
        v15 = *a3 * v21;
        v13 = a3[2];
        v12 = a5;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_2080A1038(&v24, a4, v17, v18, v19, *a2);
          v26 = v24;
          v27 = v25;
          v13 = a3[6];
          v14 = a3[4];
          v15 = a3[2];
          v16 = *a3;
          v12 = a5;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v26;
  *(_OWORD *)a6 = v26;
  *(_DWORD *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_207C9624C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_2080A1038(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_2080A1038(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 1;
        v13 = *a3 >> 1;
        v14 = (*a3 * *a2) >> 1;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_2080A1038(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 1;
        v13 = a3[2] >> 1;
        v14 = *a3 >> 1;
        v15 = v22 >> 1;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_2080A1038(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 1;
          v13 = a3[6] >> 1;
          v14 = a3[4] >> 1;
          v15 = a3[2] >> 1;
          v16 = *a3 >> 1;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_207C96464@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_2080A1038(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_2080A1038(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 2;
        v13 = *a3 >> 2;
        v14 = (*a3 * *a2) >> 2;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_2080A1038(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 2;
        v13 = a3[2] >> 2;
        v14 = *a3 >> 2;
        v15 = v22 >> 2;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_2080A1038(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 2;
          v13 = a3[6] >> 2;
          v14 = a3[4] >> 2;
          v15 = a3[2] >> 2;
          v16 = *a3 >> 2;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

uint64_t sub_207C9667C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t (**v19)();
  __int128 v20;
  _OWORD v21[2];
  char v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[30];
  char v31;

  v2 = result;
  v4 = result + 24;
  if (*(_BYTE *)(result + 152))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 120) = -1;
    v5 = *(unsigned int *)(result + 144);
    if ((_DWORD)v5 == -1)
      return result;
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_24C06E850[v5])(&v24, a2, v4);
    goto LABEL_29;
  }
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    sub_207CA36E0((_DWORD *)result, (uint64_t)&v24);
    v15 = v24;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    LOBYTE(v19) = 0;
    v22 = 0;
    if (!v31)
    {
      v23 = 2;
      goto LABEL_24;
    }
    v19 = off_24C06E878;
    v11 = v29;
    v29 = 0uLL;
    v20 = v11;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 2;
    nullsub_31(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_23;
    v12 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldaxr(v12);
    while (__stlxr(v10 - 1, v12));
    goto LABEL_21;
  }
  if (v6 == 1)
  {
    sub_207CA33E8((_DWORD *)result, (uint64_t)&v24);
    v15 = v24;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    LOBYTE(v19) = 0;
    v22 = 0;
    if (!v31)
    {
      v23 = 1;
      goto LABEL_24;
    }
    v19 = off_24C06E878;
    v13 = v29;
    v29 = 0uLL;
    v20 = v13;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 1;
    nullsub_31(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_23;
    v14 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
LABEL_21:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_23;
  }
  if (v6)
    sub_208216BE0();
  sub_207CA30F4((_DWORD *)result, (uint64_t)&v24);
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  LOBYTE(v19) = 0;
  v22 = 0;
  if (v31)
  {
    v19 = off_24C06E878;
    v7 = v29;
    v29 = 0uLL;
    v20 = v7;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 0;
    nullsub_31(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
LABEL_23:
    nullsub_31(&v28);
    goto LABEL_24;
  }
  v23 = 0;
LABEL_24:
  result = sub_207C96A0C(v4, (uint64_t)&v15);
  if (v23 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_24C06E838[v23])(&v24, &v15);
  if (!*(_BYTE *)(v2 + 152))
    sub_207CA2A4C();
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 120) = -1;
  v5 = *(unsigned int *)(v2 + 144);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_24C06E850[v5])(&v24, a2, v4);
LABEL_29:
    *(_DWORD *)(a2 + 120) = v5;
  }
  return result;
}

void sub_207C96988(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;

  va_start(va, exception_object);
  v3 = *(unsigned int *)(v1 + 120);
  if ((_DWORD)v3 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C06E838[v3])((uint64_t *)va, v1);
  *(_DWORD *)(v1 + 120) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_207C96A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(unsigned int *)(a1 + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24C06E838[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 120) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_24C06E968[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v6 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C06E980[v6])(&v9, a1, a2);
    *(_DWORD *)(a1 + 120) = v6;
  }
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

uint64_t sub_207C96AFC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_207C96B54(std::string *a1@<X8>)
{
  const char *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *last_error_message;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  void *__p;
  size_t v22;
  int64_t v23;
  std::string __dst;
  std::string v25;
  std::string v26;

  v2 = (const char *)MEMORY[0x20BD02C80]();
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  v8 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v25, ". Last Error: ", 0xEuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v13 = strlen(last_error_message);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v22 = v14;
    v23 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v23) = v13;
  p_p = &__p;
  if (v13)
LABEL_16:
    memmove(p_p, last_error_message, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v23 >= 0)
    v18 = (const std::string::value_type *)&__p;
  else
    v18 = (const std::string::value_type *)__p;
  if (v23 >= 0)
    v19 = HIBYTE(v23);
  else
    v19 = v22;
  v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_30:
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void sub_207C96D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_207C96E30@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_207C96E8C@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_207C96EE8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_207C96F98(const void **a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  std::string v21;
  void *__p[2];
  int64_t v23;
  uint64_t v24;
  _BYTE v25[80];
  std::string::size_type v26;

  v24 = 0;
  if (!e5rt_program_library_create())
  {
    *(_QWORD *)a2 = v24;
    *(_BYTE *)(a2 + 8) = 0;
    v25[32] = 0;
    HIBYTE(v26) = 0;
    v25[64] = 0;
    sub_207CB5A6C(a2 + 16, &v25[32], (uint64_t)&v25[64]);
    if (SHIBYTE(v26) < 0)
    {
      v20 = *(void **)&v25[64];
      goto LABEL_35;
    }
    return;
  }
  sub_207C96B54(&v21);
  v4 = std::string::insert(&v21, 0, "Unable to create program library: ", 0x22uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *((char *)a1 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (size_t)a1[1];
  v8 = v7 + 72;
  if (v7 + 72 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v8 <= 0x16)
  {
    v9 = &v25[72];
    qmemcpy(v25, "Error during creation of program library model with bundle expected at '", 72);
LABEL_13:
    if (v6 >= 0)
      v13 = a1;
    else
      v13 = *a1;
    memmove(v9, v13, v7);
    goto LABEL_17;
  }
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v10 = v8 | 7;
  v11 = v10 + 1;
  v12 = (char *)operator new(v10 + 1);
  *(_QWORD *)&v25[8] = v7 + 72;
  *(_QWORD *)&v25[16] = v11 | 0x8000000000000000;
  *(_QWORD *)v25 = v12;
  v9 = v12 + 72;
  qmemcpy(v12, "Error during creation of program library model with bundle expected at '", 72);
  if (v7)
    goto LABEL_13;
LABEL_17:
  v9[v7] = 0;
  v14 = std::string::append((std::string *)v25, ". ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v25[48] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)&v25[32] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v23 >= 0)
    v17 = HIBYTE(v23);
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append((std::string *)&v25[32], (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v26 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25[64] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v25[55] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v25[32]);
    if ((v25[23] & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((v25[23] & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*(void **)v25);
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v25[32] = 5;
  sub_207CB5A6C(a2 + 16, &v25[32], (uint64_t)&v25[64]);
  if (SHIBYTE(v26) < 0)
  {
    operator delete(*(void **)&v25[64]);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_27:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
      return;
    }
  }
  else if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_33:
    v20 = (void *)v21.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v20);
  }
}

void sub_207C97244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

void sub_207C972D4(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  void *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  char v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  char v30;
  std::string *v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string v41;
  std::string *v42;
  std::string v43;
  std::string *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!sub_2080A8960(0xDu)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 143, (uint64_t)"IsNonBundleSupported()", 22, (uint64_t)"Hardware not supported", 22, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v39 = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v38 = 0;
    if (e5rt_e5_compiler_config_options_create())
    {
      sub_207C96B54(&v41);
      v6 = std::string::insert(&v41, 0, "Unable to create compiler config: ", 0x22uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_207C97B48(a3, a1, (uint64_t)&v43);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_25:
          v8 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_26;
        }
      }
      else if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_25;
      }
      return;
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C06F210;
    v43.__r_.__value_.__l.__size_ = MEMORY[0x24BE2F748];
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
    v44 = &v43;
    if (!*(_BYTE *)(a2 + 24))
      sub_207CA2A4C();
    if (!e5rt_e5_compiler_config_options_set_cache_bundle_location())
    {
      if (!e5rt_e5_compiler_create_with_config())
      {
        v21 = 1;
        v22 = v44;
        if (v44)
        {
LABEL_38:
          (*(void (**)(std::string *))(v22->__r_.__value_.__r.__words[0] + 48))(v22);
          v23 = v44;
          if (v44 == &v43)
          {
            v24 = 4;
            v23 = &v43;
          }
          else
          {
            if (!v44)
              goto LABEL_43;
            v24 = 5;
          }
          (*(void (**)(void))(v23->__r_.__value_.__r.__words[0] + 8 * v24))();
LABEL_43:
          if ((v21 & 1) == 0)
            return;
          goto LABEL_44;
        }
LABEL_59:
        sub_207CA408C();
      }
      sub_207C96B54(&v37);
      v18 = std::string::insert(&v37, 0, "Unable to create compiler with config: ", 0x27uLL);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      sub_207C97B48(a3, a1, (uint64_t)&v41);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_37:
        v21 = 0;
        v22 = v44;
        if (v44)
          goto LABEL_38;
        goto LABEL_59;
      }
      v20 = (void *)v37.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v20);
      goto LABEL_37;
    }
    sub_207C96B54(&v35);
    v9 = std::string::insert(&v35, 0, "Unable to set config options to cache bundle location : ", 0x38uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v36, " cache location : ", 0x12uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)a2;
    else
      v14 = *(const std::string::value_type **)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    v16 = std::string::append(&v37, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_207C97B48(a3, a1, (uint64_t)&v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
LABEL_35:
      v20 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    }
LABEL_34:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (e5rt_e5_compiler_create())
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    v41.__r_.__value_.__s.__data_[0] = 7;
    sub_207C96B54(&v43);
    sub_207CB5A6C(a3 + 16, &v41, (uint64_t)&v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_26:
      operator delete(v8);
      return;
    }
    return;
  }
LABEL_44:
  if (!v39
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 185, (uint64_t)"compiler", 8, (uint64_t)"Compiler must be created before this", 36, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C06F290;
  v43.__r_.__value_.__l.__size_ = MEMORY[0x24BE2F790];
  v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v39;
  v44 = &v43;
  v35.__r_.__value_.__r.__words[0] = 0;
  if (e5rt_e5_compiler_options_create())
  {
    sub_207C96B54(&v37);
    v25 = std::string::insert(&v37, 0, "Unable to create compiler options: ", 0x23uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    sub_207C97B48(a3, a1, (uint64_t)&v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    goto LABEL_70;
  }
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C06F310;
  v41.__r_.__value_.__l.__size_ = MEMORY[0x24BE2F778];
  v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35;
  v42 = &v41;
  LOBYTE(v38) = 0;
  if (e5rt_e5_compiler_is_new_compile_required())
  {
    sub_207C96B54(&v36);
    v27 = std::string::insert(&v36, 0, "Unable to check if new compile required: ", 0x29uLL);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    sub_207C97B48(a3, a1, (uint64_t)&v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v29 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v29);
    }
  }
  else
  {
    if (e5rt_e5_compiler_compile())
    {
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
      v36.__r_.__value_.__s.__data_[0] = 8;
      sub_207C96B54(&v37);
    }
    else
    {
      v30 = v38;
      *(_QWORD *)a3 = v40;
      *(_BYTE *)(a3 + 8) = v30;
      v36.__r_.__value_.__s.__data_[0] = 0;
      sub_207C96EE8(&v37, "");
    }
    sub_207CB5A6C(a3 + 16, &v36, (uint64_t)&v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      v29 = (void *)v37.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
  }
  if (!v42)
    sub_207CA408C();
  (*(void (**)(std::string *))(v42->__r_.__value_.__r.__words[0] + 48))(v42);
  v31 = v42;
  if (v42 == &v41)
  {
    v32 = 4;
    v31 = &v41;
    goto LABEL_69;
  }
  if (v42)
  {
    v32 = 5;
LABEL_69:
    (*(void (**)(void))(v31->__r_.__value_.__r.__words[0] + 8 * v32))();
  }
LABEL_70:
  if (!v44)
    sub_207CA408C();
  (*(void (**)(std::string *))(v44->__r_.__value_.__r.__words[0] + 48))(v44);
  v33 = v44;
  if (v44 == &v43)
  {
    v34 = 4;
    v33 = &v43;
  }
  else
  {
    if (!v44)
      return;
    v34 = 5;
  }
  (*(void (**)(void))(v33->__r_.__value_.__r.__words[0] + 8 * v34))();
}

void sub_207C97930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    sub_207C97D64(&a29);
    sub_207C97D64((_QWORD *)(v34 - 80));
    _Unwind_Resume(a1);
  }
  sub_207C97D64(&a29);
  sub_207C97D64((_QWORD *)(v34 - 80));
  _Unwind_Resume(a1);
}

void sub_207C979D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a37 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      if (a21 < 0)
      {
LABEL_8:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0)
LABEL_12:
          JUMPOUT(0x207C97B2CLL);
LABEL_11:
        operator delete(a10);
        sub_207C97D64((_QWORD *)(v37 - 80));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  if (a21 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_207C97ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207C97B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_207C97B48(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _BYTE v19[80];
  std::string::size_type v20;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 73;
  if (v4 + 73 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v5 <= 0x16)
  {
    v9 = &v19[73];
    qmemcpy(v19, "Error during creation of program library model with non-bundle format at'", 73);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&v19[8] = v4 + 73;
  *(_QWORD *)&v19[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)v19 = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)v19 + 73);
  qmemcpy(*(void **)v19, "Error during creation of program library model with non-bundle format at'", 73);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)v19, ". ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v19[48] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)&v19[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  v17 = std::string::append((std::string *)&v19[32], v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v20 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19[64] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v19[55] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v19[32]);
    if ((v19[23] & 0x80000000) == 0)
      goto LABEL_22;
  }
  else if ((v19[23] & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(*(void **)v19);
LABEL_22:
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v19[32] = 5;
  sub_207CB5A6C(a1 + 16, &v19[32], (uint64_t)&v19[64]);
  if (SHIBYTE(v20) < 0)
    operator delete(*(void **)&v19[64]);
}

void sub_207C97D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207C97D64(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_207CA408C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL sub_207C97DD0(uint64_t *a1)
{
  int v1;
  BOOL v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  size_t v16;
  void **v17;
  int v18;
  int v19;
  void **__dst;
  size_t v23;
  int64_t v24;

  v1 = *((char *)a1 + 23);
  v2 = v1 < 0;
  v4 = (uint64_t *)*a1;
  v3 = a1[1];
  if (v1 >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  v6 = *((unsigned __int8 *)a1 + 23);
  if (v2)
    v7 = a1[1];
  else
    v7 = *((unsigned __int8 *)a1 + 23);
  v8 = (uint64_t)v5 - 1;
  do
  {
    v9 = v7;
    if (!v7)
      break;
    v10 = *(unsigned __int8 *)(v8 + v7--);
  }
  while (v10 != 46);
  if ((v6 & 0x80) == 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    v4 = a1;
    if (v9 <= v6)
      goto LABEL_12;
LABEL_35:
    sub_207CA4004();
  }
  if (v3 < v9)
    goto LABEL_35;
LABEL_12:
  v11 = v3 - v9;
  if (v3 - v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v23 = v11;
    v24 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v24) = v3 - v9;
  p_dst = (void **)&__dst;
  if (v3 != v9)
LABEL_19:
    memmove(p_dst, (char *)v4 + v9, v11);
  v15 = 0;
  *((_BYTE *)p_dst + v11) = 0;
  v16 = HIBYTE(v24);
  if (v24 < 0)
    v16 = v23;
  if (v16 == 6)
  {
    v17 = __dst;
    if (v24 >= 0)
      v17 = (void **)&__dst;
    v18 = *(_DWORD *)v17;
    v19 = *((unsigned __int16 *)v17 + 2);
    v15 = v18 == 1684960610 && v19 == 25964;
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__dst);
  return v15;
}

void sub_207C97F30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void **v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__dst[2];
  uint64_t v23;
  void *v24;
  char v25;
  char *__p;
  void *__p_8[2];
  uint64_t v28;
  std::string v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = (const void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_207CA40D8(__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v5;
    v23 = *(_QWORD *)(a1 + 32);
  }
  LODWORD(v28) = 0;
  sub_207CB5ED4((uint64_t)&v29, (unsigned int *)&__p);
  if ((_DWORD)v28 == -1)
    sub_207CA9F48();
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  ((void (*)(void **__return_ptr, std::string *, char **))off_24C06ECB0[v28])(&v24, &v29, &__p);
  if ((_DWORD)v28 != -1)
    ((void (*)(std::string *, char **))off_24C06EC38[v28])(&v29, &__p);
  if (sub_207C97DD0((uint64_t *)v5))
    sub_207C96F98(v5, (uint64_t)v17);
  else
    sub_207C972D4(v5, a2 + 48, (uint64_t)v17);
  v6 = v19;
  if (!v19)
  {
    v16 = v17[0];
    if (!v17[0]
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 245, (uint64_t)"espresso_library", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v30[0] = &off_24C06F390;
    v30[1] = MEMORY[0x24BE2F998];
    v30[2] = &v16;
    v31 = v30;
    v15 = 0;
    e5rt_program_library_get_num_functions();
    __p = (char *)operator new(0x38uLL);
    *(_OWORD *)__p_8 = xmmword_20822AB50;
    strcpy(__p, "Expect alteast one function for a model but got 0");
    sub_207C99A14((_QWORD *)a3, (const void **)__dst, (uint64_t)&__p);
    if (SHIBYTE(__p_8[1]) < 0)
      operator delete(__p);
    if (!v31)
      sub_207CA408C();
    (*(void (**)(_QWORD *))(*v31 + 48))(v31);
    v10 = v31;
    if (v31 == v30)
    {
      v11 = 4;
      v10 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_25;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_25;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = off_24C06E9E8;
  *(_BYTE *)(a3 + 16) = v6;
  v7 = v21;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
LABEL_25:
  v18 = off_24C06E9E8;
  v12 = v21;
  if (!v21)
    goto LABEL_29;
  v13 = (unint64_t *)&v21->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    nullsub_31(&v18);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        return;
LABEL_34:
      operator delete(__dst[0]);
      return;
    }
  }
  else
  {
LABEL_29:
    nullsub_31(&v18);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v24);
  if (SHIBYTE(v23) < 0)
    goto LABEL_34;
}

void sub_207C993BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;

  if (a22 < 0)
    operator delete(__p);
  v70 = *v67;
  *v67 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_207C9C674(&a67);
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
  sub_207C9C674((_QWORD *)(v68 - 208));
  sub_207C9BA88(&a25);
  sub_207C9BA88(&a28);
  sub_207C9C674((_QWORD *)(v68 - 176));
  sub_207C97D64(&STACK[0x250]);
  if (a37 < 0)
    operator delete(a32);
  if (a38)
    operator delete(a38);
  sub_207C9C6E8((uint64_t)&a41);
  sub_207C9BBC4((uint64_t)&a47);
  sub_207C97D64((_QWORD *)(v68 - 136));
  sub_207C9C758((uint64_t)&a55);
  sub_207C9C7D0((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_207C99A14(_QWORD *a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  const void **v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  _BYTE __p[48];
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v5 <= 0x16)
  {
    v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&__p[8] = v4 + 35;
  *(_QWORD *)&__p[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)__p = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)__p + 35);
  qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v16 = (const std::string::value_type *)a2[3];
  v15 = a2 + 3;
  v14 = v16;
  v17 = *((char *)v15 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v15;
  else
    v18 = v14;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v15 + 23);
  else
    v19 = (std::string::size_type)v15[1];
  v20 = std::string::append((std::string *)&__p[32], v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v31, ". ", 2uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *(char *)(a3 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a3;
  else
    v25 = *(const std::string::value_type **)a3;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = std::string::append(&v32, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34 = v27->__r_.__value_.__r.__words[2];
  v33 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_35:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30) < 0)
    goto LABEL_35;
LABEL_29:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_30;
LABEL_36:
  operator delete(*(void **)__p);
LABEL_30:
  *a1 = 0;
  v32.__r_.__value_.__s.__data_[0] = 5;
  sub_207CB5A6C((uint64_t)(a1 + 1), &v32, (uint64_t)&v33);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_207C99C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;

  v38 = *v35;
  *v35 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_207C99D30(uint64_t a1)
{
  sub_207CA43C8(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207C99D78(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_207C99DE0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207C99E50(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  const char **v13;
  int v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  std::string *v22;
  __int128 v23;
  std::string *p_p;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  const char **v42;
  int v43;
  size_t v44;
  unint64_t v45;
  __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 *v49;
  __int128 *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  std::string __p;
  _BYTE v65[30];
  __int16 v66;
  std::string v67;
  std::string v68;
  std::string v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v72 = 0;
  v69.__r_.__value_.__r.__words[0] = 0;
  e5rt_execution_stream_operation_get_num_inputs();
  e5rt_execution_stream_operation_get_num_outputs();
  v3 = 0;
  v5 = a1[5];
  v4 = a1[6];
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - v5) >> 3) || v69.__r_.__value_.__r.__words[0] != (uint64_t)(a1[9] - a1[8]) >> 5)
  {
    *(_QWORD *)v74 = operator new(0x28uLL);
    *(_OWORD *)&v74[8] = xmmword_20822AB60;
    strcpy(*(char **)v74, "Input/output port counts doesn't match.");
    v68.__r_.__value_.__s.__data_[0] = 3;
    sub_207CB5A6C(a2, &v68, (uint64_t)v74);
    goto LABEL_6;
  }
  if (v4 != v5)
  {
    v62 = a1;
LABEL_11:
    v8 = 0;
    while (1)
    {
      sub_2080A8BDC((uint64_t)a1, v8, (uint64_t)v74);
      v72 = *(_OWORD *)v74;
      v73 = *(_QWORD *)&v74[16];
      v71 = 0;
      v9 = e5rt_execution_stream_operation_retain_input_port();
      if (v9)
        break;
      *(_QWORD *)v74 = &off_24C06F630;
      *(_QWORD *)&v74[8] = MEMORY[0x24BE2F8E8];
      *(_QWORD *)&v74[16] = &v71;
      v75 = v74;
      e5rt_io_port_release();
      if (v75 == v74)
      {
        (*(void (**)(void))(*(_QWORD *)v74 + 32))();
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_58;
LABEL_57:
        operator delete((void *)v72);
        goto LABEL_58;
      }
      if (v75)
      {
        (*(void (**)(void))(*(_QWORD *)v75 + 40))();
        if (SHIBYTE(v73) < 0)
          goto LABEL_57;
        goto LABEL_58;
      }
LABEL_56:
      if (SHIBYTE(v73) < 0)
        goto LABEL_57;
LABEL_58:
      if (v9)
        return;
      if (v3 == ++v8)
        goto LABEL_69;
    }
    v70 = 0;
    e5rt_execution_stream_operation_get_num_inputs();
    v10 = v70;
    memset(v74, 0, sizeof(v74));
    if (v70)
    {
      if (v70 >> 61)
        sub_207CA420C();
      v11 = 8 * v70;
      v12 = (char *)operator new(8 * v70);
      *(_QWORD *)v74 = v12;
      *(_QWORD *)&v74[16] = &v12[8 * v10];
      bzero(v12, 8 * v10);
      v13 = (const char **)&v12[v11];
      *(_QWORD *)&v74[8] = &v12[v11];
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    e5rt_execution_stream_operation_get_input_names();
    v14 = SHIBYTE(v73);
    if (v73 >= 0)
      v15 = HIBYTE(v73);
    else
      v15 = *((_QWORD *)&v72 + 1);
    v16 = v15 + 29;
    if (v15 + 29 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v16 > 0x16)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      v20 = (char *)operator new(v18 + 1);
      *(_QWORD *)&v65[8] = v15 + 29;
      *(_QWORD *)&v65[16] = v19 | 0x8000000000000000;
      *(_QWORD *)v65 = v20;
      qmemcpy(v20, "Unable to retain input port: ", 29);
      v17 = v20 + 29;
      if (!v15)
      {
LABEL_34:
        v17[v15] = 0;
        v22 = std::string::append((std::string *)v65, ". Error: ", 9uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        sub_207C9CBA8(&__p, v9 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v26 = std::string::append(&v67, (const std::string::value_type *)p_p, size);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v68, ". Available ports are: ", 0x17uLL);
        v30 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v30;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v68.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_42:
            if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_43;
            goto LABEL_63;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_42;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_43:
          if ((v65[23] & 0x80000000) == 0)
            goto LABEL_44;
LABEL_64:
          operator delete(*(void **)v65);
LABEL_44:
          sub_207CB7558((const char **)v12, v29, v13, ", ", 2uLL, &v68);
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v68;
          else
            v31 = (std::string *)v68.__r_.__value_.__r.__words[0];
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          else
            v32 = v68.__r_.__value_.__l.__size_;
          std::string::append(&v69, (const std::string::value_type *)v31, v32);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          v68.__r_.__value_.__s.__data_[0] = 3;
          sub_207CB5A6C(a2, &v68, (uint64_t)&v69);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v69.__r_.__value_.__l.__data_);
            if (!v12)
              goto LABEL_55;
          }
          else if (!v12)
          {
LABEL_55:
            a1 = v62;
            goto LABEL_56;
          }
          operator delete(v12);
          goto LABEL_55;
        }
LABEL_63:
        operator delete(v67.__r_.__value_.__l.__data_);
        if ((v65[23] & 0x80000000) == 0)
          goto LABEL_44;
        goto LABEL_64;
      }
    }
    else
    {
      qmemcpy(v65, "Unable to retain input port: ", 29);
      v17 = &v65[29];
    }
    if (v14 >= 0)
      v21 = &v72;
    else
      v21 = (__int128 *)v72;
    memmove(v17, v21, v15);
    goto LABEL_34;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 507, (uint64_t)"params.inputs.size() >= 1", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v7 = a1[5];
  v6 = a1[6];
  v3 = 0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3);
  v62 = a1;
  if (v6 != v7)
    goto LABEL_11;
LABEL_69:
  v34 = a1[8];
  v33 = a1[9];
  if (v33 == v34)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 531, (uint64_t)"params.outputs.size() >= 1", 26, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v35 = a1[9] - a1[8];
    if (!v35)
      goto LABEL_131;
    goto LABEL_74;
  }
  v35 = v33 - v34;
  if (v35)
  {
LABEL_74:
    v36 = 0;
    v37 = v35 >> 5;
    while (1)
    {
      sub_2080A8DD8((uint64_t)a1, v36, (uint64_t)v74);
      v72 = *(_OWORD *)v74;
      v73 = *(_QWORD *)&v74[16];
      v71 = 0;
      v38 = e5rt_execution_stream_operation_retain_output_port();
      if (v38)
        break;
      *(_QWORD *)v74 = &off_24C06F630;
      *(_QWORD *)&v74[8] = MEMORY[0x24BE2F8E8];
      *(_QWORD *)&v74[16] = &v71;
      v75 = v74;
      e5rt_io_port_release();
      if (v75 == v74)
      {
        (*(void (**)(void))(*(_QWORD *)v74 + 32))();
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_122;
LABEL_121:
        operator delete((void *)v72);
        goto LABEL_122;
      }
      if (v75)
      {
        (*(void (**)(void))(*(_QWORD *)v75 + 40))();
        if (SHIBYTE(v73) < 0)
          goto LABEL_121;
        goto LABEL_122;
      }
LABEL_120:
      if (SHIBYTE(v73) < 0)
        goto LABEL_121;
LABEL_122:
      if (v38)
        return;
      if (v37 == ++v36)
        goto LABEL_131;
    }
    v70 = 0;
    e5rt_execution_stream_operation_get_num_outputs();
    v39 = v70;
    memset(v74, 0, sizeof(v74));
    if (v70)
    {
      if (v70 >> 61)
        sub_207CA420C();
      v40 = 8 * v70;
      v41 = (char *)operator new(8 * v70);
      *(_QWORD *)v74 = v41;
      *(_QWORD *)&v74[16] = &v41[8 * v39];
      bzero(v41, 8 * v39);
      v42 = (const char **)&v41[v40];
      *(_QWORD *)&v74[8] = &v41[v40];
    }
    else
    {
      v42 = 0;
      v41 = 0;
    }
    e5rt_execution_stream_operation_get_output_names();
    v43 = SHIBYTE(v73);
    if (v73 >= 0)
      v44 = HIBYTE(v73);
    else
      v44 = *((_QWORD *)&v72 + 1);
    v45 = v44 + 30;
    if (v44 + 30 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v45 > 0x16)
    {
      v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v45 | 7) != 0x17)
        v47 = v45 | 7;
      v48 = v47 + 1;
      v49 = (__int16 *)operator new(v47 + 1);
      *(_QWORD *)&v65[8] = v44 + 30;
      *(_QWORD *)&v65[16] = v48 | 0x8000000000000000;
      *(_QWORD *)v65 = v49;
      qmemcpy(v49, "Unable to retain output port: ", 30);
      v46 = v49 + 15;
      if (!v44)
      {
LABEL_97:
        *((_BYTE *)v46 + v44) = 0;
        v51 = std::string::append((std::string *)v65, ". Error: ", 9uLL);
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        sub_207C9CBA8(&__p, v38 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &__p;
        else
          v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v54 = __p.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v67, (const std::string::value_type *)v53, v54);
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        v57 = std::string::append(&v68, ". Available ports are: ", 0x17uLL);
        v59 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v59;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v68.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_105:
            if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_106;
            goto LABEL_127;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_105;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_106:
          if ((v65[23] & 0x80000000) == 0)
          {
LABEL_107:
            sub_207CB7558((const char **)v41, v58, v42, ", ", 2uLL, &v68);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = &v68;
            else
              v60 = (std::string *)v68.__r_.__value_.__r.__words[0];
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            else
              v61 = v68.__r_.__value_.__l.__size_;
            std::string::append(&v69, (const std::string::value_type *)v60, v61);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68.__r_.__value_.__l.__data_);
            v68.__r_.__value_.__s.__data_[0] = 3;
            sub_207CB5A6C(a2, &v68, (uint64_t)&v69);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            if (v41)
              operator delete(v41);
            a1 = v62;
            goto LABEL_120;
          }
LABEL_128:
          operator delete(*(void **)v65);
          goto LABEL_107;
        }
LABEL_127:
        operator delete(v67.__r_.__value_.__l.__data_);
        if ((v65[23] & 0x80000000) == 0)
          goto LABEL_107;
        goto LABEL_128;
      }
    }
    else
    {
      qmemcpy(v65, "Unable to retain output port: ", sizeof(v65));
      v46 = &v66;
    }
    if (v43 >= 0)
      v50 = &v72;
    else
      v50 = (__int128 *)v72;
    memmove(v46, v50, v44);
    goto LABEL_97;
  }
LABEL_131:
  LOBYTE(v72) = 0;
  v74[23] = 0;
  v74[0] = 0;
  sub_207CB5A6C(a2, &v72, (uint64_t)v74);
LABEL_6:
  if ((v74[23] & 0x80000000) != 0)
    operator delete(*(void **)v74);
}

void sub_207C9A82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 113) < 0)
  {
    operator delete(*(void **)(v44 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char **sub_207C9AA18(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL)
      sub_207CA420C();
    v4 = (char *)operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[160 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 8) = 0uLL;
      *((_OWORD *)v4 + 9) = 0uLL;
      *((_OWORD *)v4 + 6) = 0uLL;
      *((_OWORD *)v4 + 7) = 0uLL;
      *((_OWORD *)v4 + 4) = 0uLL;
      *((_OWORD *)v4 + 5) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *((_OWORD *)v4 + 3) = 0uLL;
      *(_DWORD *)v4 = 3;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 160;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_207C9AAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  _DWORD *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;

  v15 = *v13;
  if (*v13)
  {
    v16 = v13[1];
    v17 = *v13;
    if (v16 != v15)
    {
      do
      {
        if (*((_BYTE *)v16 - 8))
        {
          v18 = *(v16 - 4);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, _DWORD *))off_24C06E838[v18])(&a13, v16 - 34);
          *(v16 - 4) = -1;
        }
        v16 -= 40;
      }
      while (v16 != v15);
      v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_207C9AB50(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  const void **v5;
  const void **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  const void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  const void *v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  _BYTE __p[44];
  int v70;
  int v71;
  char v72;
  void *v73[2];
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD v84[3];
  _QWORD *v85;
  _BYTE v86[48];
  void **v87;
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v6 = *(const void ***)(a1 + 64);
  v5 = *(const void ***)(a1 + 72);
  if (v6 != v5)
  {
    v9 = 0;
    while (1)
    {
      v75 = 0;
      e5rt_execution_stream_operation_retain_output_port();
      v84[0] = &off_24C06F630;
      v84[1] = MEMORY[0x24BE2F8E8];
      v84[2] = &v75;
      v85 = v84;
      if (!a2)
        goto LABEL_20;
      v10 = *a3;
      v11 = *a3 + 160 * v9;
      if (!*(_QWORD *)(v11 + 8))
        break;
      e5rt_tensor_desc_release();
      if (*(_QWORD *)(v10 + 160 * v9 + 16))
        goto LABEL_8;
LABEL_9:
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)v11 = 3;
      v12 = v10 + 160 * v9;
      v14 = *(unsigned __int8 *)(v12 + 152);
      v13 = (_BYTE *)(v12 + 152);
      if (v14)
      {
        v15 = v10 + 160 * v9;
        v18 = *(_DWORD *)(v15 + 144);
        v17 = (_DWORD *)(v15 + 144);
        v16 = v18;
        if (v18 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C06E838[v16])(__p, v13 - 128);
        *v17 = -1;
        *v13 = 0;
      }
LABEL_13:
      e5rt_io_port_retain_tensor_desc();
      v83 = 0;
      e5rt_tensor_desc_get_size();
      sub_207CA1488();
      *(_DWORD *)(*a3 + 160 * v9) = v19;
      if (e5rt_buffer_object_alloc())
      {
        LOBYTE(v82) = 5;
        v20 = *((char *)v6 + 23);
        if (v20 >= 0)
          v21 = *((unsigned __int8 *)v6 + 23);
        else
          v21 = (size_t)v6[1];
        v22 = v21 + 41;
        if (v21 + 41 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v22 <= 0x16)
        {
          qmemcpy(v86, "Unable to create buffer for output port: ", 41);
          v23 = &v86[41];
          goto LABEL_45;
        }
        v38 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v38 = v22 | 7;
        v39 = v38 + 1;
        v40 = (char *)operator new(v38 + 1);
        *(_QWORD *)&v86[8] = v21 + 41;
        *(_QWORD *)&v86[16] = v39 | 0x8000000000000000;
        *(_QWORD *)v86 = v40;
        qmemcpy(v40, "Unable to create buffer for output port: ", 41);
        v23 = v40 + 41;
        if (v21)
        {
LABEL_45:
          if (v20 >= 0)
            v41 = v6;
          else
            v41 = *v6;
          memmove(v23, v41, v21);
        }
        v23[v21] = 0;
        v42 = std::string::append((std::string *)v86, " of size ", 9uLL);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v87 = (void **)v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86[32] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        sub_207C9F428(&v83);
        if ((v74 & 0x80u) == 0)
          v44 = v73;
        else
          v44 = (void **)v73[0];
        if ((v74 & 0x80u) == 0)
          v45 = v74;
        else
          v45 = (std::string::size_type)v73[1];
        v46 = std::string::append((std::string *)&v86[32], (const std::string::value_type *)v44, v45);
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v46->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        sub_207CB5A6C(a5, &v82, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((char)v74 < 0)
            goto LABEL_61;
LABEL_57:
          if ((SHIBYTE(v87) & 0x80000000) == 0)
            goto LABEL_58;
LABEL_62:
          operator delete(*(void **)&v86[32]);
          if ((v86[23] & 0x80000000) == 0)
            goto LABEL_65;
        }
        else
        {
          if (((char)v74 & 0x80000000) == 0)
            goto LABEL_57;
LABEL_61:
          operator delete(v73[0]);
          if (SHIBYTE(v87) < 0)
            goto LABEL_62;
LABEL_58:
          if ((v86[23] & 0x80000000) == 0)
            goto LABEL_65;
        }
        v37 = *(void **)v86;
LABEL_64:
        operator delete(v37);
        goto LABEL_65;
      }
LABEL_20:
      if (e5rt_io_port_bind_buffer_object())
      {
        v86[32] = 5;
        v24 = *((char *)v6 + 23);
        if (v24 >= 0)
          v25 = *((unsigned __int8 *)v6 + 23);
        else
          v25 = (size_t)v6[1];
        v26 = v25 + 44;
        if (v25 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v26 <= 0x16)
        {
          qmemcpy(__p, "Unable to bind output buffer to output port ", sizeof(__p));
          v27 = &v70;
          goto LABEL_36;
        }
        v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v33 = v26 | 7;
        v34 = v33 + 1;
        v35 = (int *)operator new(v33 + 1);
        *(_QWORD *)&__p[8] = v25 + 44;
        *(_QWORD *)&__p[16] = v34 | 0x8000000000000000;
        *(_QWORD *)__p = v35;
        qmemcpy(v35, "Unable to bind output buffer to output port ", 44);
        v27 = v35 + 11;
        if (v25)
        {
LABEL_36:
          if (v24 >= 0)
            v36 = v6;
          else
            v36 = *v6;
          memmove(v27, v36, v25);
        }
        *((_BYTE *)v27 + v25) = 0;
        sub_207CB5A6C(a5, &v86[32], (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          v37 = *(void **)__p;
          goto LABEL_64;
        }
LABEL_65:
        v48 = 0;
        v49 = v85;
        if (!v85)
          goto LABEL_120;
        goto LABEL_107;
      }
      if (a2)
      {
        v28 = *a3;
        v29 = *a3 + 160 * v9;
        if (*(_DWORD *)v29 == 2)
        {
          v30 = *(_OWORD *)v29;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v29 + 16);
          *(_OWORD *)__p = v30;
          v31 = v28 + 160 * v9;
          __p[24] = 0;
          v72 = 0;
          if (*(_BYTE *)(v31 + 152))
          {
            v71 = -1;
            v32 = *(unsigned int *)(v28 + 160 * v9 + 144);
            if ((_DWORD)v32 != -1)
            {
              ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24C06E850[v32])(v86, &__p[24], v31 + 24);
              v71 = v32;
            }
            v72 = 1;
          }
          goto LABEL_103;
        }
        v73[0] = 0;
        e5rt_tensor_desc_retain_dtype();
        *(_QWORD *)&v86[32] = &off_24C06E8E8;
        *(_QWORD *)&v86[40] = MEMORY[0x24BE2FA68];
        v87 = v73;
        v88 = &v86[32];
        v82 = 0;
        v83 = 0;
        e5rt_tensor_desc_get_shape();
        v81 = 0;
        e5rt_tensor_desc_dtype_get_num_components();
        v80 = 0;
        if (v81 != 1 && v81 != 4 && v81 != 2)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1047, (uint64_t)"", 0, (uint64_t)"Number of components not supported yet", 38, (void (*)(void **))sub_208216974);
          abort();
        }
        if (e5rt_tensor_desc_dtype_create()
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1079, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        *(_QWORD *)v86 = &off_24C06E8E8;
        *(_QWORD *)&v86[8] = MEMORY[0x24BE2FA68];
        *(_QWORD *)&v86[16] = &v80;
        *(_QWORD *)&v86[24] = v86;
        v79 = 0;
        if (e5rt_tensor_desc_create()
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1086, (uint64_t)"ret_tensor == E5RT_ERROR_CODE_OK", 32, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v78 = 0;
        v77 = 0;
        e5rt_tensor_desc_get_size();
        e5rt_tensor_desc_get_size();
        if (*(_DWORD *)v29 == 1)
        {
          if (v83)
          {
            if (v83 == 4 && (*(_BYTE *)(v82 + 24) & 0x1F) == 0)
            {
              if (2 * v77 != v78)
                goto LABEL_88;
            }
            else
            {
              if (v83 < 2)
              {
                v50 = 0;
                v51 = 1;
                goto LABEL_85;
              }
              v50 = v83 & 0xFFFFFFFFFFFFFFFELL;
              v52 = (_QWORD *)(v82 + 8);
              v53 = v83 & 0xFFFFFFFFFFFFFFFELL;
              v54 = 1;
              v55 = 1;
              do
              {
                v54 *= *(v52 - 1);
                v55 *= *v52;
                v52 += 2;
                v53 -= 2;
              }
              while (v53);
              v51 = v55 * v54;
              if (v83 != v50)
              {
LABEL_85:
                v56 = v83 - v50;
                v57 = (uint64_t *)(v82 + 8 * v50);
                do
                {
                  v58 = *v57++;
                  v51 *= v58;
                  --v56;
                }
                while (v56);
              }
              if (4 * v51 != v78)
              {
LABEL_88:
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1094, (uint64_t)"detail::IsValidShape(input_rank, input_shape, input_tensor_size, output_tensor_size)", 84, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  abort();
                }
              }
            }
          }
          else if (v78 != 4)
          {
            goto LABEL_88;
          }
        }
        v76 = 0;
        if (e5rt_buffer_object_alloc()
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1101, (uint64_t)"mem_ret == E5RT_ERROR_CODE_OK", 29, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        *(_DWORD *)__p = 2;
        *(_QWORD *)&__p[8] = v79;
        *(_QWORD *)&__p[16] = v76;
        __p[24] = 0;
        v72 = 0;
        if (!*(_QWORD *)&v86[24])
          sub_207CA408C();
        (*(void (**)(_QWORD))(**(_QWORD **)&v86[24] + 48))(*(_QWORD *)&v86[24]);
        v59 = *(_QWORD **)&v86[24];
        if (*(_BYTE **)&v86[24] == v86)
        {
          v59 = v86;
          v60 = 4;
LABEL_96:
          (*(void (**)(void))(*v59 + 8 * v60))();
        }
        else if (*(_QWORD *)&v86[24])
        {
          v60 = 5;
          goto LABEL_96;
        }
        if (!v88)
          sub_207CA408C();
        (*(void (**)(_BYTE *))(*(_QWORD *)v88 + 48))(v88);
        v61 = v88;
        if (v88 == &v86[32])
        {
          v61 = &v86[32];
          v62 = 4;
LABEL_102:
          (*(void (**)(void))(*v61 + 8 * v62))();
        }
        else if (v88)
        {
          v62 = 5;
          goto LABEL_102;
        }
LABEL_103:
        v63 = *a4 + 160 * v9;
        v64 = *(_OWORD *)__p;
        *(_QWORD *)(v63 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v63 = v64;
        sub_207CB5930(v63 + 24, (uint64_t)&__p[24]);
        if (v72 && v71 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C06E838[v71])(&v86[32], &__p[24]);
      }
      v48 = 1;
      v49 = v85;
      if (!v85)
LABEL_120:
        sub_207CA408C();
LABEL_107:
      (*(void (**)(_QWORD *))(*v49 + 48))(v49);
      v65 = v85;
      if (v85 == v84)
      {
        v65 = v84;
        v66 = 4;
        goto LABEL_111;
      }
      if (v85)
      {
        v66 = 5;
LABEL_111:
        (*(void (**)(void))(*v65 + 8 * v66))();
      }
      if (!v48)
        return;
      v6 += 4;
      ++v9;
      if (v6 == v5)
        goto LABEL_117;
    }
    if (!*(_QWORD *)(v10 + 160 * v9 + 16))
      goto LABEL_13;
LABEL_8:
    e5rt_buffer_object_release();
    goto LABEL_9;
  }
LABEL_117:
  v86[32] = 0;
  __p[23] = 0;
  __p[0] = 0;
  sub_207CB5A6C(a5, &v86[32], (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_207C9B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;

  sub_207C97D64((_QWORD *)(v36 - 160));
  sub_207C97D64((_QWORD *)(v36 - 128));
  sub_207C97D64((_QWORD *)(v36 - 192));
  _Unwind_Resume(a1);
}

void sub_207C9B644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a20 < 0)
  {
    operator delete(__p);
    if (a43 < 0)
    {
LABEL_5:
      operator delete(a38);
      if (*(char *)(v43 - 105) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v43 - 128));
        if ((*(char *)(v43 - 137) & 0x80000000) == 0)
LABEL_12:
          JUMPOUT(0x207C9B734);
LABEL_11:
        operator delete(*(void **)(v43 - 160));
        sub_207C97D64((_QWORD *)(v43 - 192));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((*(char *)(v43 - 137) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a43 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v43 - 105) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_207C9B6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
  {
    operator delete(__p);
    sub_207C97D64((_QWORD *)(v20 - 192));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x207C9B734);
}

void sub_207C9B720(void *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  JUMPOUT(0x207C9B73CLL);
}

void sub_207C9B730(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

_QWORD *sub_207C9B744(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_207CA48D0(v10, a1);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v10[0] = &unk_24C06EA28;
  v10[1] = nullsub_3;
  v11 = v10;
  sub_207CA48D0(v10, a2);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_15;
  }
  if (v11)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_207C9B884(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;

  if (a1[3])
  {
    v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        sub_207CA43C8((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_207C9B910(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v6 = operator new(0xD0uLL);
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  *v6 = off_24C06E7D8;
  v6[1] = 0;
  sub_207CA68E4((uint64_t)(v6 + 2), a2);
  v6[24] = v8;
  v6[25] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *a3 = v6;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *a3 = v6;
  }
}

void sub_207C9B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_2080A72FC(v9);
  sub_207C99D78((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_207C9BA18@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_24C06F5E0;
  result = sub_2080A1B50((uint64_t)(v6 + 3), a1, a2);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

void sub_207C9BA70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void **sub_207C9BA88(void **a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8))
        {
          v5 = *(v3 - 4);
          if ((_DWORD)v5 != -1)
            ((void (*)(char *, _DWORD *))off_24C06E838[v5])(&v7, v3 - 34);
          *(v3 - 4) = -1;
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207C9BB30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_24C06E838[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_207C9BBC4(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_207C9BC2C(void *lpsrc@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  const void **v29;
  int v30;
  size_t v31;
  unint64_t v32;
  _BYTE *v33;
  const char *last_error_message;
  size_t v35;
  std::string::size_type v36;
  std::string *v37;
  int v38;
  size_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  const void *v47;
  void *v48;
  _QWORD *v49;
  _BYTE *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string v71;
  char v72;
  _BYTE v73[80];
  void *v74;
  __int128 *v75;
  void *v76[2];
  std::string::size_type v77;
  std::__shared_weak_count *v78;
  void *__p;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v5 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v5)
    goto LABEL_141;
  v6 = v5;
  v7 = (const void *)a2[1];
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v8)
LABEL_141:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = v6[31];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 2);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = v6 + 8;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
  }
  else if (v8[31])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_47;
    }
LABEL_19:
    v15 = (__int128 *)(v6 + 8);
    sub_207CA4F70((uint64_t)&__p, (uint64_t *)(a2[24] + 8));
    if (v85)
    {
      v16 = v83;
      v17 = v84;
      if (v83 != v84)
      {
        v18 = v6[31];
        if ((v18 & 0x80u) == 0)
          v19 = v6[31];
        else
          v19 = *((_QWORD *)v6 + 2);
        if ((v18 & 0x80u) == 0)
          v20 = v6 + 8;
        else
          v20 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        while (1)
        {
          v21 = *(unsigned __int8 *)(v16 + 23);
          if ((v21 & 0x80u) == 0)
            v22 = *(unsigned __int8 *)(v16 + 23);
          else
            v22 = *(_QWORD *)(v16 + 8);
          if (v22 == v19)
          {
            if ((v21 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v16, v20, *(_QWORD *)(v16 + 8)))
                break;
            }
            else
            {
              if (!*(_BYTE *)(v16 + 23))
                break;
              v23 = 0;
              while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
              {
                if (v21 == ++v23)
                  goto LABEL_38;
              }
            }
          }
          v16 += 24;
          if (v16 == v17)
            goto LABEL_61;
        }
      }
LABEL_38:
      if (v16 != v17)
      {
        v24 = sub_207CB6C5C(a2 + 2, (uint64_t)(v6 + 8));
        if (!v24)
          sub_207CA4018("unordered_map::at: key not found");
        if (!v24[5]
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 441, (uint64_t)"espresso_stream_op != nullptr", 29, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        sub_207C99E50(&__p, (uint64_t)v76);
        v25 = (char)v76[1];
        if (LOBYTE(v76[1]))
        {
          *(_QWORD *)a3 = off_24C06E9E8;
          *(_BYTE *)(a3 + 8) = v25;
          v26 = v78;
          *(_QWORD *)(a3 + 16) = v77;
          *(_QWORD *)(a3 + 24) = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
LABEL_129:
          v76[0] = off_24C06E9E8;
          v67 = v78;
          if (v78)
          {
            v68 = (unint64_t *)&v78->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          nullsub_31(v76);
          goto LABEL_135;
        }
        sub_207C9C89C(a2);
        sub_207C9AA18((char **)&v74, (v82 - v81) >> 5);
        sub_207C9AA18((char **)&v73[64], (v82 - v81) >> 5);
        sub_207C9AB50((uint64_t)&__p, 1, (uint64_t *)&v74, &v73[64], (uint64_t)&v73[32]);
        if (v73[40])
        {
          v71.__r_.__value_.__s.__data_[0] = 5;
          v29 = *(const void ***)&v73[48];
          v30 = *(char *)(*(_QWORD *)&v73[48] + 23);
          if (v30 >= 0)
            v31 = *(unsigned __int8 *)(*(_QWORD *)&v73[48] + 23);
          else
            v31 = *(_QWORD *)(*(_QWORD *)&v73[48] + 8);
          v32 = v31 + 53;
          if (v31 + 53 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          if (v32 > 0x16)
          {
            v46 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v46 = v32 | 7;
            *(_QWORD *)&v73[8] = v31 + 53;
            *(_QWORD *)&v73[16] = (v46 + 1) | 0x8000000000000000;
            *(_QWORD *)v73 = operator new(v46 + 1);
            qmemcpy(*(void **)v73, "Unable to bind output buffers in this configuration: ", 53);
            v33 = (_BYTE *)(*(_QWORD *)v73 + 53);
            if (!v31)
              goto LABEL_86;
          }
          else
          {
            qmemcpy(v73, "Unable to bind output buffers in this configuration: ", 53);
            v33 = &v73[53];
          }
          if (v30 >= 0)
            v47 = v29;
          else
            v47 = *v29;
          memmove(v33, v47, v31);
LABEL_86:
          v33[v31] = 0;
          sub_207CB5A6C(a3, &v71, (uint64_t)v73);
LABEL_87:
          if ((v73[23] & 0x80000000) == 0)
            goto LABEL_104;
          v48 = *(void **)v73;
LABEL_103:
          operator delete(v48);
LABEL_104:
          *(_QWORD *)&v73[32] = off_24C06E9E8;
          v56 = *(std::__shared_weak_count **)&v73[56];
          if (*(_QWORD *)&v73[56])
          {
            v57 = (unint64_t *)(*(_QWORD *)&v73[56] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          nullsub_31(&v73[32]);
          v59 = *(_QWORD *)&v73[64];
          if (*(_QWORD *)&v73[64])
          {
            v60 = *(_QWORD *)&v73[72];
            v61 = *(void **)&v73[64];
            if (*(_QWORD *)&v73[72] != *(_QWORD *)&v73[64])
            {
              do
              {
                if (*(_BYTE *)(v60 - 8))
                {
                  v62 = *(unsigned int *)(v60 - 16);
                  if ((_DWORD)v62 != -1)
                    ((void (*)(_BYTE *, uint64_t))off_24C06E838[v62])(&v73[32], v60 - 136);
                  *(_DWORD *)(v60 - 16) = -1;
                }
                v60 -= 160;
              }
              while (v60 != v59);
              v61 = *(void **)&v73[64];
            }
            *(_QWORD *)&v73[72] = v59;
            operator delete(v61);
          }
          v63 = (__int128 *)v74;
          if (v74)
          {
            v64 = v75;
            v65 = v74;
            if (v75 != v74)
            {
              do
              {
                if (*((_BYTE *)v64 - 8))
                {
                  v66 = *((unsigned int *)v64 - 4);
                  if ((_DWORD)v66 != -1)
                    ((void (*)(_BYTE *, char *))off_24C06E838[v66])(&v73[32], (char *)v64 - 136);
                  *((_DWORD *)v64 - 4) = -1;
                }
                v64 -= 10;
              }
              while (v64 != v63);
              v65 = v74;
            }
            v75 = v63;
            operator delete(v65);
          }
          goto LABEL_129;
        }
        if (!e5rt_execution_stream_operation_prepare_op_for_encode())
        {
          if (a2 + 13 != &v74)
            sub_207CA585C(a2 + 13, (__int128 *)v74, v75, 0xCCCCCCCCCCCCCCCDLL * (((char *)v75 - (_BYTE *)v74) >> 5));
          if (a2 + 16 != (_QWORD *)&v73[64])
            sub_207CA585C(a2 + 16, *(__int128 **)&v73[64], *(__int128 **)&v73[72], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v73[72] - *(_QWORD *)&v73[64]) >> 5));
          v49 = operator new(0x20uLL);
          *v49 = &off_24C0848B8;
          v50 = v49 + 1;
          if ((char)v6[31] < 0)
          {
            sub_207CA40D8(v50, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
          }
          else
          {
            v51 = *v15;
            v49[3] = *((_QWORD *)v6 + 3);
            *(_OWORD *)v50 = v51;
          }
          v70 = a2[1];
          a2[1] = v49;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          v71.__r_.__value_.__s.__data_[0] = 0;
          v73[23] = 0;
          v73[0] = 0;
          sub_207CB5A6C(a3, &v71, (uint64_t)v73);
          goto LABEL_87;
        }
        v72 = 6;
        last_error_message = (const char *)e5rt_get_last_error_message();
        v35 = strlen(last_error_message);
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        v36 = v35;
        if (v35 >= 0x17)
        {
          v52 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v52 = v35 | 7;
          v53 = v52 + 1;
          v37 = (std::string *)operator new(v52 + 1);
          v71.__r_.__value_.__l.__size_ = v36;
          v71.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
          v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        }
        else
        {
          *((_BYTE *)&v71.__r_.__value_.__s + 23) = v35;
          v37 = &v71;
          if (!v35)
            goto LABEL_99;
        }
        memmove(v37, last_error_message, v36);
LABEL_99:
        v37->__r_.__value_.__s.__data_[v36] = 0;
        v54 = std::string::insert(&v71, 0, " Unable to load this espresso function for execution: ", 0x36uLL);
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        *(_QWORD *)&v73[16] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
        *(_OWORD *)v73 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        sub_207CB5A6C(a3, &v72, (uint64_t)v73);
        if ((v73[23] & 0x80000000) != 0)
          operator delete(*(void **)v73);
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_104;
        v48 = (void *)v71.__r_.__value_.__r.__words[0];
        goto LABEL_103;
      }
    }
LABEL_61:
    LOBYTE(v74) = 3;
    v38 = (char)v6[31];
    if (v38 >= 0)
      v39 = v6[31];
    else
      v39 = *((_QWORD *)v6 + 2);
    v40 = v39 + 46;
    if (v39 + 46 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v40 > 0x16)
    {
      v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v42 = v40 | 7;
      *(_QWORD *)&v73[40] = v39 + 46;
      *(_QWORD *)&v73[48] = (v42 + 1) | 0x8000000000000000;
      *(_QWORD *)&v73[32] = operator new(v42 + 1);
      qmemcpy(*(void **)&v73[32], "Unable to find the name of the configuration '", 46);
      v41 = (_BYTE *)(*(_QWORD *)&v73[32] + 46);
      if (!v39)
      {
LABEL_74:
        v41[v39] = 0;
        v44 = std::string::append((std::string *)&v73[32], "'.", 2uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v77 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)v76 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_207CB5A6C(a3, &v74, (uint64_t)v76);
        if (SHIBYTE(v77) < 0)
        {
          operator delete(v76[0]);
          if ((v73[55] & 0x80000000) != 0)
LABEL_78:
            operator delete(*(void **)&v73[32]);
        }
        else if ((v73[55] & 0x80000000) != 0)
        {
          goto LABEL_78;
        }
LABEL_135:
        sub_207CA6534((uint64_t)&__p);
        return;
      }
    }
    else
    {
      qmemcpy(&v73[32], "Unable to find the name of the configuration '", 46);
      v41 = &v73[78];
    }
    if (v38 >= 0)
      v43 = v15;
    else
      v43 = *(__int128 **)v15;
    memmove(v41, v43, v39);
    goto LABEL_74;
  }
LABEL_47:
  LOBYTE(v76[0]) = 0;
  __p = operator new(0x38uLL);
  v80 = xmmword_20822AB70;
  strcpy((char *)__p, "The model is already running in this configuration.");
  sub_207CB5A6C(a3, v76, (uint64_t)&__p);
  if (SHIBYTE(v80) < 0)
    operator delete(__p);
}

void sub_207C9C4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  void *v51;

  v51 = (void *)nullsub_31(v49);
  operator delete(v51);
  sub_207C9C674(&a23);
  sub_207C9BA88(&a30);
  sub_207C9BA88(&a33);
  sub_207C9C674(&a36);
  sub_207CA6534((uint64_t)&a44);
  _Unwind_Resume(a1);
}

_QWORD *sub_207C9C5FC(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = &off_24C0848B8;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_207C9C660(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_31(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207C9C674(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = off_24C06E9E8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return nullsub_31();
}

uint64_t sub_207C9C6E8(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_207CA43C8((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_207C9C758(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 16) = off_24C06E9E8;
  v2 = a1 + 16;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  nullsub_31(v2);
  return a1;
}

uint64_t sub_207C9C7D0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207C9C828()
{
  if (e5rt_program_library_create())
    return 0;
  e5rt_program_library_release();
  return 1;
}

uint64_t sub_207C9C894(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

void sub_207C9C89C(_QWORD *a1)
{
  uint64_t *i;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *k;
  uint64_t *m;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  for (i = (uint64_t *)a1[10]; i; i = (uint64_t *)*i)
  {
    if (i[4])
      e5rt_tensor_desc_release();
    if (i[5])
      e5rt_buffer_object_release();
    i[4] = 0;
    i[5] = 0;
    *((_DWORD *)i + 6) = 3;
    if (*((_BYTE *)i + 176))
    {
      v3 = *((unsigned int *)i + 42);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t *))off_24C06E838[v3])(&v23, i + 6);
      *((_DWORD *)i + 42) = -1;
      *((_BYTE *)i + 176) = 0;
    }
  }
  if (a1[11])
  {
    v4 = (_QWORD *)a1[10];
    while (v4)
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      if (*((_BYTE *)v5 + 176))
      {
        v6 = *((unsigned int *)v5 + 42);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, _QWORD *))off_24C06E838[v6])(&v22, v5 + 6);
      }
      operator delete(v5);
    }
    a1[10] = 0;
    v7 = a1[9];
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(a1[8] + 8 * j) = 0;
    }
    a1[11] = 0;
  }
  for (k = (_QWORD *)a1[21]; k; k = (_QWORD *)*k)
  {
    for (m = (uint64_t *)k[12]; m; m = (uint64_t *)*m)
    {
      if (m[4])
        e5rt_tensor_desc_release();
      if (m[5])
        e5rt_buffer_object_release();
      m[4] = 0;
      m[5] = 0;
      *((_DWORD *)m + 6) = 3;
      if (*((_BYTE *)m + 176))
      {
        v11 = *((unsigned int *)m + 42);
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, uint64_t *))off_24C06E838[v11])(&v24, m + 6);
        *((_DWORD *)m + 42) = -1;
        *((_BYTE *)m + 176) = 0;
      }
    }
  }
  v12 = a1[13];
  v13 = a1[14];
  v14 = a1[16];
  v15 = a1[17];
  if (v12 != v13 || v14 != v15)
  {
    v17 = 0;
    do
    {
      if (*(_DWORD *)(v12 + v17) != 2)
      {
        if (*(_QWORD *)(v14 + v17 + 8))
          e5rt_tensor_desc_release();
        if (*(_QWORD *)(v14 + v17 + 16))
          e5rt_buffer_object_release();
        *(_QWORD *)(v14 + v17 + 8) = 0;
        *(_QWORD *)(v14 + v17 + 16) = 0;
        v18 = v14 + v17;
        *(_DWORD *)(v14 + v17) = 3;
        if (*(_BYTE *)(v14 + v17 + 152))
        {
          v19 = *(unsigned int *)(v18 + 144);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))off_24C06E838[v19])(&v25, v18 + 24);
          *(_DWORD *)(v18 + 144) = -1;
          *(_BYTE *)(v18 + 152) = 0;
        }
      }
      if (*(_QWORD *)(v12 + v17 + 8))
        e5rt_tensor_desc_release();
      if (*(_QWORD *)(v12 + v17 + 16))
        e5rt_buffer_object_release();
      *(_QWORD *)(v12 + v17 + 8) = 0;
      *(_QWORD *)(v12 + v17 + 16) = 0;
      v20 = v12 + v17;
      *(_DWORD *)(v12 + v17) = 3;
      if (*(_BYTE *)(v12 + v17 + 152))
      {
        v21 = *(unsigned int *)(v20 + 144);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))off_24C06E838[v21])(&v26, v20 + 24);
        *(_DWORD *)(v20 + 144) = -1;
        *(_BYTE *)(v20 + 152) = 0;
      }
      v17 += 160;
    }
    while (v17 + v12 != v13 || v17 + v14 != v15);
  }
}

uint64_t sub_207C9CB98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_207C9CBA8(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const char *last_error_message;
  size_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p;
  size_t v26;
  int64_t v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  std::string v31;

  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_12;
  }
  v4 = (const char *)MEMORY[0x20BD02C80](a2);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v29, ". ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
LABEL_12:
  v14 = std::string::append(&v30, "Last Error: ", 0xCuLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v17 = strlen(last_error_message);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    v26 = v18;
    v27 = v21 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v27) = v17;
  p_p = &__p;
  if (v17)
LABEL_19:
    memmove(p_p, last_error_message, v18);
  *((_BYTE *)p_p + v18) = 0;
  if (v27 >= 0)
    v22 = (const std::string::value_type *)&__p;
  else
    v22 = (const std::string::value_type *)__p;
  if (v27 >= 0)
    v23 = HIBYTE(v27);
  else
    v23 = v26;
  v24 = std::string::append(&v31, v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v3)
      return;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_34:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
}

void sub_207C9CE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207C9CEE4(_QWORD *a1)
{
  _QWORD *i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = off_24C06E7D8;
  for (i = (_QWORD *)a1[4]; i; i = (_QWORD *)*i)
  {
    if (i[5])
      e5rt_execution_stream_operation_release();
  }
  if (a1[7])
    e5rt_execution_stream_release();
  sub_207C9C89C(a1);
  v3 = (std::__shared_weak_count *)a1[25];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_207CA4D80((uint64_t)(a1 + 2));
  return sub_2080A72FC(a1);
}

void sub_207C9CFA4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_207C9CFB8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_207C9CEE4(a1);
  operator delete(v1);
}

uint64_t sub_207C9CFCC(uint64_t a1)
{
  const void *v2;
  void *v3;
  uint64_t *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 659, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(const void **)(a1 + 8);
  }
  v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v3)
    __cxa_bad_cast();
  v4 = sub_207CB6C5C((_QWORD *)(a1 + 16), (uint64_t)v3 + 8);
  if (!v4)
    sub_207CA4018("unordered_map::at: key not found");
  return v4[5];
}

void sub_207C9D070(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const char *last_error_message;
  size_t v26;
  size_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  std::string::size_type v39;
  std::string *v40;
  const char *v41;
  size_t v42;
  std::string::size_type v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  const char *v51;
  size_t v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  const char *v67;
  size_t v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  void *__p;
  size_t v78;
  int64_t v79;
  std::string __dst;
  std::string v81;
  std::string v82;
  __int128 v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unsigned __int8 v86;

  if (!a1[22])
  {
    sub_207C9E2C8((uint64_t)a1, a2, (uint64_t)&v83);
    v9 = BYTE8(v83);
    if (BYTE8(v83))
    {
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v9;
      v10 = v85;
      *(_QWORD *)(a3 + 16) = v84;
      *(_QWORD *)(a3 + 24) = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      *(_QWORD *)&v83 = off_24C06E9E8;
      v14 = v85;
      if (!v85)
        goto LABEL_50;
    }
    else
    {
      v13 = sub_207C9CFCC((uint64_t)a1);
      *(_QWORD *)&v83 = off_24C06E9E8;
      v14 = v85;
      if (!v85)
        goto LABEL_50;
    }
    v35 = (unint64_t *)&v14->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      nullsub_31(&v83);
      if (v9)
        return;
LABEL_51:
      if (!v13 || !e5rt_execution_stream_encode_operation())
      {
LABEL_3:
        if (e5rt_execution_stream_execute_sync())
        {
          v5 = (const char *)MEMORY[0x20BD02C80]();
          v6 = strlen(v5);
          if (v6 <= 0x7FFFFFFFFFFFFFF7)
          {
            v7 = v6;
            if (v6 >= 0x17)
            {
              v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v6 | 7) != 0x17)
                v19 = v6 | 7;
              v20 = v19 + 1;
              p_dst = (std::string *)operator new(v19 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
              p_dst = &__dst;
              if (!v6)
              {
LABEL_25:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                v21 = std::string::insert(&__dst, 0, "Execution stream execute failed.  Return code: ", 0x2FuLL);
                v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
                v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
                v21->__r_.__value_.__l.__size_ = 0;
                v21->__r_.__value_.__r.__words[2] = 0;
                v21->__r_.__value_.__r.__words[0] = 0;
                v23 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
                v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                v82.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                last_error_message = (const char *)e5rt_get_last_error_message();
                v26 = strlen(last_error_message);
                if (v26 > 0x7FFFFFFFFFFFFFF7)
                  sub_207C95C50();
                v27 = v26;
                if (v26 >= 0x17)
                {
                  v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v26 | 7) != 0x17)
                    v29 = v26 | 7;
                  v30 = v29 + 1;
                  p_p = operator new(v29 + 1);
                  v78 = v27;
                  v79 = v30 | 0x8000000000000000;
                  __p = p_p;
                }
                else
                {
                  HIBYTE(v79) = v26;
                  p_p = &__p;
                  if (!v26)
                  {
LABEL_33:
                    *((_BYTE *)p_p + v27) = 0;
                    if (v79 >= 0)
                      v31 = (const std::string::value_type *)&__p;
                    else
                      v31 = (const std::string::value_type *)__p;
                    if (v79 >= 0)
                      v32 = HIBYTE(v79);
                    else
                      v32 = v78;
                    v33 = std::string::append(&v82, v31, v32);
                    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                    v84 = v33->__r_.__value_.__r.__words[2];
                    v83 = v34;
                    v33->__r_.__value_.__l.__size_ = 0;
                    v33->__r_.__value_.__r.__words[2] = 0;
                    v33->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v79) < 0)
                    {
                      operator delete(__p);
                      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_41:
                        if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_42;
                        goto LABEL_59;
                      }
                    }
                    else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_41;
                    }
                    operator delete(v82.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_42:
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_43:
                        v82.__r_.__value_.__s.__data_[0] = 6;
                        sub_207CB5A6C(a3, &v82, (uint64_t)&v83);
LABEL_44:
                        *(_BYTE *)(a3 + 32) = 0;
                        *(_BYTE *)(a3 + 56) = 0;
                        if (SHIBYTE(v84) < 0)
                          operator delete((void *)v83);
                        return;
                      }
LABEL_123:
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      goto LABEL_43;
                    }
LABEL_59:
                    operator delete(v81.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_43;
                    goto LABEL_123;
                  }
                }
                memmove(p_p, last_error_message, v27);
                goto LABEL_33;
              }
            }
            memmove(p_dst, v5, v7);
            goto LABEL_25;
          }
LABEL_124:
          sub_207C95C50();
        }
        if (a1[22] || !e5rt_execution_stream_reset())
        {
          v82.__r_.__value_.__s.__data_[0] = 0;
          HIBYTE(v84) = 0;
          LOBYTE(v83) = 0;
          sub_207CB5A6C(a3, &v82, (uint64_t)&v83);
          goto LABEL_44;
        }
        v41 = (const char *)MEMORY[0x20BD02C80]();
        v42 = strlen(v41);
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_124;
        v43 = v42;
        if (v42 >= 0x17)
        {
          v61 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v61 = v42 | 7;
          v62 = v61 + 1;
          v44 = (std::string *)operator new(v61 + 1);
          __dst.__r_.__value_.__l.__size_ = v43;
          __dst.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42;
          v44 = &__dst;
          if (!v42)
          {
LABEL_97:
            v44->__r_.__value_.__s.__data_[v43] = 0;
            v63 = std::string::insert(&__dst, 0, "Execution stream reset failed.  Return code: ", 0x2DuLL);
            v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v64;
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            v65 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
            v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            v67 = (const char *)e5rt_get_last_error_message();
            v68 = strlen(v67);
            if (v68 > 0x7FFFFFFFFFFFFFF7)
              sub_207C95C50();
            v69 = v68;
            if (v68 >= 0x17)
            {
              v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v68 | 7) != 0x17)
                v71 = v68 | 7;
              v72 = v71 + 1;
              v70 = operator new(v71 + 1);
              v78 = v69;
              v79 = v72 | 0x8000000000000000;
              __p = v70;
            }
            else
            {
              HIBYTE(v79) = v68;
              v70 = &__p;
              if (!v68)
              {
LABEL_105:
                *((_BYTE *)v70 + v69) = 0;
                if (v79 >= 0)
                  v73 = (const std::string::value_type *)&__p;
                else
                  v73 = (const std::string::value_type *)__p;
                if (v79 >= 0)
                  v74 = HIBYTE(v79);
                else
                  v74 = v78;
                v75 = std::string::append(&v82, v73, v74);
                v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v84 = v75->__r_.__value_.__r.__words[2];
                v83 = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v79) < 0)
                {
                  operator delete(__p);
                  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_113:
                    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_114;
                    goto LABEL_122;
                  }
                }
                else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_113;
                }
                operator delete(v82.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_114:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_43;
                  goto LABEL_123;
                }
LABEL_122:
                operator delete(v81.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_123;
              }
            }
            memmove(v70, v67, v69);
            goto LABEL_105;
          }
        }
        memmove(v44, v41, v43);
        goto LABEL_97;
      }
      v37 = (const char *)MEMORY[0x20BD02C80]();
      v38 = strlen(v37);
      if (v38 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_124;
      v39 = v38;
      if (v38 >= 0x17)
      {
        v45 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v45 = v38 | 7;
        v46 = v45 + 1;
        v40 = (std::string *)operator new(v45 + 1);
        __dst.__r_.__value_.__l.__size_ = v39;
        __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
        v40 = &__dst;
        if (!v38)
        {
LABEL_74:
          v40->__r_.__value_.__s.__data_[v39] = 0;
          v47 = std::string::insert(&__dst, 0, "Execution stream encode workload failed.  Return code: ", 0x37uLL);
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          v49 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          v51 = (const char *)e5rt_get_last_error_message();
          v52 = strlen(v51);
          if (v52 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          v53 = v52;
          if (v52 >= 0x17)
          {
            v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17)
              v55 = v52 | 7;
            v56 = v55 + 1;
            v54 = operator new(v55 + 1);
            v78 = v53;
            v79 = v56 | 0x8000000000000000;
            __p = v54;
          }
          else
          {
            HIBYTE(v79) = v52;
            v54 = &__p;
            if (!v52)
            {
LABEL_82:
              *((_BYTE *)v54 + v53) = 0;
              if (v79 >= 0)
                v57 = (const std::string::value_type *)&__p;
              else
                v57 = (const std::string::value_type *)__p;
              if (v79 >= 0)
                v58 = HIBYTE(v79);
              else
                v58 = v78;
              v59 = std::string::append(&v82, v57, v58);
              v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
              v84 = v59->__r_.__value_.__r.__words[2];
              v83 = v60;
              v59->__r_.__value_.__l.__size_ = 0;
              v59->__r_.__value_.__r.__words[2] = 0;
              v59->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v79) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_90:
                  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_91;
                  goto LABEL_118;
                }
              }
              else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_90;
              }
              operator delete(v82.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_91:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_123;
              }
LABEL_118:
              operator delete(v81.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_43;
              goto LABEL_123;
            }
          }
          memmove(v54, v51, v53);
          goto LABEL_82;
        }
      }
      memmove(v40, v37, v39);
      goto LABEL_74;
    }
LABEL_50:
    nullsub_31(&v83);
    if (v9)
      return;
    goto LABEL_51;
  }
  sub_207C9DA04(a1, a2, (uint64_t)&v83);
  if (v86)
    goto LABEL_3;
  *(_QWORD *)a3 = off_24C06E9E8;
  *(_BYTE *)(a3 + 8) = BYTE8(v83);
  v15 = v85;
  *(_QWORD *)(a3 + 16) = v84;
  *(_QWORD *)(a3 + 24) = v15;
  if (!v15)
  {
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
LABEL_62:
    (*(void (**)(__int128 *))v83)(&v83);
    return;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = v86;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  if (!v18)
    goto LABEL_62;
}

void sub_207C9D8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
  {
    operator delete(*(void **)(v33 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207C9DA04(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  int **v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  _QWORD v76[2];
  std::__shared_weak_count *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  char v83;
  void *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  int v87;
  __int128 __p;
  __int128 v89;
  __int128 v90;
  int v91;
  _QWORD v92[2];
  std::__shared_weak_count *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  __int16 v98;
  char v99;

  v6 = (const void *)a1[1];
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1503, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = (const void *)a1[1];
  }
  v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = sub_207CB80C4(a1 + 19, (uint64_t)v7 + 8);
  if (!v8)
    sub_207CA4018("unordered_map::at: key not found");
  v9 = v8;
  v10 = v8 + 5;
  v11 = v8[15];
  sub_207CA2604(a2, &__p);
  v12 = sub_207CB82F0(v10, (uint64_t)&__p);
  v13 = v12;
  if (SBYTE7(v89) < 0)
  {
    operator delete((void *)__p);
    v71 = v9 + 10;
    if (v13)
      goto LABEL_8;
LABEL_73:
    if (v9[8] < (unint64_t)v9[17])
    {
      sub_207CA1694(a1, a2, v71, (uint64_t)v10, v11, (uint64_t)&__p);
      if ((_BYTE)v90)
      {
        v47 = __p;
LABEL_86:
        *(_QWORD *)a3 = v47;
        *(_BYTE *)(a3 + 32) = 1;
        return;
      }
      v63 = BYTE8(__p);
      BYTE8(v72) = BYTE8(__p);
      v64 = v89;
      v73 = v89;
      if (*((_QWORD *)&v89 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = v63;
        *(_OWORD *)(a3 + 16) = v64;
        do
          v67 = __ldxr(v65);
        while (__stxr(v67 + 1, v65));
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v72 = off_24C06E9E8;
        do
          v68 = __ldaxr(v65);
        while (__stlxr(v68 - 1, v65));
        if (!v68)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v64 + 1) + 16))(*((_QWORD *)&v64 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
        }
      }
      else
      {
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = v63;
        *(_OWORD *)(a3 + 16) = v64;
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v72 = off_24C06E9E8;
      }
      nullsub_31(&v72);
      if (!(_BYTE)v90)
        (*(void (**)(__int128 *))__p)(&__p);
      return;
    }
    LOBYTE(v87) = 9;
    v84 = operator new(0x28uLL);
    v85 = xmmword_20822AB90;
    strcpy((char *)v84, "Prewire pool limit size reached.");
    sub_207CB5A6C((uint64_t)&v72, &v87, (uint64_t)&v84);
    v54 = BYTE8(v72);
    BYTE8(__p) = BYTE8(v72);
    v55 = v73;
    v89 = v73;
    if (*((_QWORD *)&v73 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v54;
      *(_OWORD *)(a3 + 16) = v55;
      do
        v58 = __ldxr(v56);
      while (__stxr(v58 + 1, v56));
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&__p = off_24C06E9E8;
      do
        v59 = __ldaxr(v56);
      while (__stlxr(v59 - 1, v56));
      if (!v59)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
      }
    }
    else
    {
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v54;
      *(_OWORD *)(a3 + 16) = v55;
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&__p = off_24C06E9E8;
    }
    nullsub_31(&__p);
    *(_QWORD *)&v72 = off_24C06E9E8;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (!*((_QWORD *)&v73 + 1))
      goto LABEL_115;
    v69 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v62 = __ldaxr(v69);
    while (__stlxr(v62 - 1, v69));
    goto LABEL_114;
  }
  v71 = v9 + 10;
  if (!v12)
    goto LABEL_73;
LABEL_8:
  v70 = v13;
  v14 = a2[1];
  v15 = (v14 - *a2) >> 7;
  if (v15 == 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1[24] + 56) - *(_QWORD *)(a1[24] + 48)) >> 3))
  {
    if (v14 != *a2)
    {
      v16 = 0;
      do
      {
        sub_2080A1E90(*a2 + (v16 << 7), (uint64_t)&__p);
        v87 = v91;
        v17 = sub_2080A727C(&v87);
        v18 = sub_2080B6B94((uint64_t)&__p);
        v19 = (unint64_t)(v17 - 1) < 2 && v18;
        if (!v19 && sub_2080B6BA8((uint64_t)&__p))
        {
          v20 = (int8x8_t)v9[11];
          if (v20)
          {
            v21 = (uint8x8_t)vcnt_s8(v20);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              v22 = v16;
              if (v16 >= *(_QWORD *)&v20)
                v22 = v16 % *(_QWORD *)&v20;
            }
            else
            {
              v22 = (*(_QWORD *)&v20 - 1) & v16;
            }
            v23 = *(int ***)(*v71 + 8 * v22);
            if (v23)
            {
              v24 = *v23;
              if (*v23)
              {
                if (v21.u32[0] < 2uLL)
                {
                  v25 = *(_QWORD *)&v20 - 1;
                  while (1)
                  {
                    v27 = *((_QWORD *)v24 + 1);
                    if (v27 == v16)
                    {
                      if (*((_QWORD *)v24 + 2) == v16)
                        goto LABEL_40;
                    }
                    else if ((v27 & v25) != v22)
                    {
                      goto LABEL_38;
                    }
                    v24 = *(int **)v24;
                    if (!v24)
                      goto LABEL_38;
                  }
                }
                do
                {
                  v26 = *((_QWORD *)v24 + 1);
                  if (v26 == v16)
                  {
                    if (*((_QWORD *)v24 + 2) == v16)
                      goto LABEL_40;
                  }
                  else
                  {
                    if (v26 >= *(_QWORD *)&v20)
                      v26 %= *(_QWORD *)&v20;
                    if (v26 != v22)
                      break;
                  }
                  v24 = *(int **)v24;
                }
                while (v24);
              }
            }
          }
LABEL_38:
          {
            abort();
          }
          v24 = 0;
LABEL_40:
          v72 = __p;
          v73 = v89;
          v74 = v90;
          v75 = v91;
          LOBYTE(v76[0]) = 0;
          v83 = 0;
          if (v99)
          {
            v76[0] = off_24C06E878;
            v28 = v92[1];
            v29 = v93;
            if (v93)
            {
              p_shared_owners = (unint64_t *)&v93->__shared_owners_;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
              v32 = v96;
              v33 = v97;
              v34 = v98;
              do
                v35 = __ldxr(p_shared_owners);
              while (__stxr(v35 + 1, p_shared_owners));
            }
            else
            {
              v32 = v96;
              v33 = v97;
              v34 = v98;
            }
            v76[1] = v28;
            v77 = v29;
            v78 = v94;
            v79 = v95;
            v80 = v32;
            v81 = v33;
            v82 = v34;
            if (v29)
            {
              v36 = (unint64_t *)&v29->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v83 = 1;
          }
          sub_207CAE3D4((uint64_t)&v84, (uint64_t)&v72, v24 + 6);
          v84 = off_24C06E9E8;
          v38 = v86;
          if (v86)
          {
            v39 = (unint64_t *)&v86->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          nullsub_31(&v84);
          if (v83)
          {
            nullsub_31(&v78);
            v41 = v77;
            if (v77)
            {
              v42 = (unint64_t *)&v77->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            nullsub_31(v76);
          }
        }
        if (v99)
        {
          nullsub_31(&v94);
          v44 = v93;
          if (v93)
          {
            v45 = (unint64_t *)&v93->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          nullsub_31(v92);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    v47 = v70[5];
    goto LABEL_86;
  }
  LOBYTE(v87) = 6;
  v84 = operator new(0x30uLL);
  v85 = xmmword_20822AB80;
  strcpy((char *)v84, "Input size provided is different from config.");
  sub_207CB5A6C((uint64_t)&v72, &v87, (uint64_t)&v84);
  v48 = BYTE8(v72);
  BYTE8(__p) = BYTE8(v72);
  v49 = v73;
  v89 = v73;
  if (*((_QWORD *)&v73 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v48;
    *(_OWORD *)(a3 + 16) = v49;
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&__p = off_24C06E9E8;
    do
      v53 = __ldaxr(v50);
    while (__stlxr(v53 - 1, v50));
    if (!v53)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  else
  {
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v48;
    *(_OWORD *)(a3 + 16) = v49;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&__p = off_24C06E9E8;
  }
  nullsub_31(&__p);
  *(_QWORD *)&v72 = off_24C06E9E8;
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_115;
  v61 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
LABEL_114:
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    nullsub_31(&v72);
    if (SHIBYTE(v85) < 0)
      goto LABEL_116;
    return;
  }
LABEL_115:
  nullsub_31(&v72);
  if (SHIBYTE(v85) < 0)
LABEL_116:
    operator delete(v84);
}

void sub_207C9E25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207C9E2C8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _OWORD v61[3];
  int v62;
  _QWORD v63[2];
  std::__shared_weak_count *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  __int16 v69;
  char v70;
  std::string v71;
  std::string v72;
  char v73;
  void *__p[2];
  _BYTE v75[20];
  int v76;
  int v77;
  __int128 v78;
  _BYTE v79[32];
  int v80;
  _QWORD v81[2];
  std::__shared_weak_count *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  char v88;
  unint64_t v89;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 192) + 48);
  if (v4)
  {
    v7 = 0;
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v4 >> 3);
    v60 = (_QWORD *)(a1 + 64);
    do
    {
      v89 = v7;
      sub_2080A1E90(*a2 + (v7 << 7), (uint64_t)&v78);
      LODWORD(__p[0]) = v80;
      if (!sub_2080A71F4(__p)
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1307, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((*(_OWORD *)&v75[4] = *(_OWORD *)&v79[4], v76 = *(_DWORD *)&v79[20], *(_OWORD *)__p = v78, *(_DWORD *)v75 = *(_DWORD *)v79, v77 = v80, !sub_2080A1048(__p))|| !sub_2080A10F0(__p, 16))&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1308, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_208216974))
      {
        abort();
      }
      LODWORD(__p[0]) = v80;
      v9 = sub_2080A727C((int *)__p);
      if (!v10)
      {
        v73 = 3;
        sub_207C9F428(&v89);
        v26 = std::string::insert(&v71, 0, "Invalid input: The given view for input ", 0x28uLL);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v72, " requires both a color format and type definition in its format flags.", 0x46uLL);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        *(_QWORD *)v75 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_207CB5A6C(a3, &v73, (uint64_t)__p);
        if ((v75[7] & 0x80000000) != 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_38;
LABEL_27:
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
            operator delete(v71.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_27;
LABEL_38:
          operator delete(v72.__r_.__value_.__l.__data_);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
LABEL_70:
        v53 = 0;
        if (v88)
          goto LABEL_77;
        goto LABEL_83;
      }
      v11 = v9;
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = 0;
      v12 = operator new(0x18uLL);
      v12[23] = 0;
      *v12 = 0;
      *(_QWORD *)(a3 + 16) = v12;
      v13 = operator new(0x20uLL);
      *v13 = &unk_24C06F1C0;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v12;
      *(_QWORD *)(a3 + 24) = v13;
      v14 = sub_2080B6B94((uint64_t)&v78);
      if ((unint64_t)(v11 - 1) < 2 && v14)
      {
        sub_207C9F550((uint64_t)__p, a1, (uint64_t)&v78, v89);
        *(_BYTE *)(a3 + 8) = __p[1];
        v17 = *(_QWORD *)v75;
        v16 = *(_QWORD *)&v75[8];
        if (*(_QWORD *)&v75[8])
        {
          v18 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(std::__shared_weak_count **)(a3 + 24);
        *(_QWORD *)(a3 + 16) = v17;
        *(_QWORD *)(a3 + 24) = v16;
        if (!v20)
          goto LABEL_20;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          __p[0] = off_24C06E9E8;
          v23 = *(std::__shared_weak_count **)&v75[8];
          if (*(_QWORD *)&v75[8])
          {
LABEL_21:
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        else
        {
LABEL_20:
          __p[0] = off_24C06E9E8;
          v23 = *(std::__shared_weak_count **)&v75[8];
          if (*(_QWORD *)&v75[8])
            goto LABEL_21;
        }
        nullsub_31(__p);
        goto LABEL_69;
      }
      if (!sub_2080B6BA8((uint64_t)&v78))
      {
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1325, (uint64_t)"", 0, (uint64_t)"Only single Grayscale input image or single two component input image is supported.", 83, (void (*)(void **))sub_208216974);
        abort();
      }
      v61[0] = v78;
      v61[1] = *(_OWORD *)v79;
      v61[2] = *(_OWORD *)&v79[16];
      v62 = v80;
      LOBYTE(v63[0]) = 0;
      v70 = 0;
      if (v88)
      {
        v63[0] = off_24C06E878;
        v30 = v81[1];
        v31 = v82;
        if (v82)
        {
          v32 = (unint64_t *)&v82->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v34 = v85;
          v35 = v86;
          v36 = v87;
          do
            v37 = __ldxr(v32);
          while (__stxr(v37 + 1, v32));
        }
        else
        {
          v34 = v85;
          v35 = v86;
          v36 = v87;
        }
        v63[1] = v30;
        v64 = v31;
        v65 = v83;
        v66 = v84;
        v67 = v34;
        v68 = v35;
        v69 = v36;
        if (v31)
        {
          v38 = (unint64_t *)&v31->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v70 = 1;
      }
      sub_207C9FF6C((uint64_t)__p, a1, v60, (uint64_t)v61, v89);
      *(_BYTE *)(a3 + 8) = __p[1];
      v41 = *(_QWORD *)v75;
      v40 = *(_QWORD *)&v75[8];
      if (*(_QWORD *)&v75[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *(std::__shared_weak_count **)(a3 + 24);
      *(_QWORD *)(a3 + 16) = v41;
      *(_QWORD *)(a3 + 24) = v40;
      if (!v44)
        goto LABEL_56;
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        __p[0] = off_24C06E9E8;
        v47 = *(std::__shared_weak_count **)&v75[8];
        if (*(_QWORD *)&v75[8])
        {
LABEL_57:
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
LABEL_56:
        __p[0] = off_24C06E9E8;
        v47 = *(std::__shared_weak_count **)&v75[8];
        if (*(_QWORD *)&v75[8])
          goto LABEL_57;
      }
      nullsub_31(__p);
      if (v70)
      {
        nullsub_31(&v65);
        v50 = v64;
        if (v64)
        {
          v51 = (unint64_t *)&v64->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        nullsub_31(v63);
      }
LABEL_69:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_70;
      *(_QWORD *)a3 = off_24C06E9E8;
      v54 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v54)
        goto LABEL_76;
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        nullsub_31(a3);
        v53 = 1;
        if (v88)
        {
LABEL_77:
          nullsub_31(&v83);
          v57 = v82;
          if (v82)
          {
            v58 = (unint64_t *)&v82->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          nullsub_31(v81);
        }
      }
      else
      {
LABEL_76:
        nullsub_31(a3);
        v53 = 1;
        if (v88)
          goto LABEL_77;
      }
LABEL_83:
      if ((v53 & 1) == 0)
        return;
      ++v7;
    }
    while (v7 != v8);
  }
  LOBYTE(__p[0]) = 0;
  v79[7] = 0;
  LOBYTE(v78) = 0;
  sub_207CB5A6C(a3, __p, (uint64_t)&v78);
  if ((v79[7] & 0x80000000) != 0)
    operator delete((void *)v78);
}

void sub_207C9E9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  _Unwind_Resume(exception_object);
}

void sub_207C9EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;

  sub_207C9C674(v48);
  sub_207CA140C(v49 - 216);
  _Unwind_Resume(a1);
}

void sub_207C9EB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA140C(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207C9EB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA140C(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207C9EB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA140C(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207C9EB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA140C(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207C9EB74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA140C(v1 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_207C9EB88@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *i;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v40;
  char v41;
  char v42;
  uint64_t (**v43)();
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char v47[8];
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  unint64_t v55;
  _BYTE __p[32];
  __int128 v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  _OWORD v61[2];
  char v62;

  sub_207C9D070(a1, a2, (uint64_t)v47);
  v5 = v48;
  if (v48)
  {
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v50;
    *(_QWORD *)(a3 + 16) = v49;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (v53)
    {
      *(_OWORD *)(a3 + 32) = v51;
      *(_QWORD *)(a3 + 48) = v52;
      v52 = 0;
      v51 = 0uLL;
      *(_BYTE *)(a3 + 56) = 1;
    }
    return sub_207CA86F4((uint64_t)v47);
  }
  v9 = a1[13];
  v10 = a1[14];
  v11 = a1[16];
  v12 = a1[17];
  v13 = v9 == v10 && v11 == v12;
  if (v13)
  {
LABEL_20:
    LOBYTE(v54) = 0;
    __p[23] = 0;
    __p[0] = 0;
    sub_207CB5A6C((uint64_t)&v43, &v54, (uint64_t)__p);
    goto LABEL_21;
  }
  v14 = v11 + 160;
  v15 = v9 + 160;
  while (1)
  {
    v16 = v14;
    v17 = *(_DWORD *)(v15 - 160);
    if (!v17)
      break;
    if (v17 == 1 && e5rt_tensor_utils_cast_from_fp16_to_fp32())
    {
      LOBYTE(v54) = 6;
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_20822AB70;
      strcpy(*(char **)__p, "Unable to convert Float16 to Float32 output buffer.");
      sub_207CB5A6C((uint64_t)&v43, &v54, (uint64_t)__p);
      goto LABEL_21;
    }
LABEL_17:
    v14 = v16 + 160;
    v18 = v15 + 160;
    v13 = v15 == v10;
    v15 += 160;
    if (v13)
    {
      v15 = v18;
      if (v16 == v12)
        goto LABEL_20;
    }
  }
  if (!e5rt_tensor_utils_dequantize_from_u8_to_fp32())
    goto LABEL_17;
  LOBYTE(v54) = 6;
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_20822AB50;
  strcpy(*(char **)__p, "Unable to convert Uint8 to Float32 output buffer.");
  sub_207CB5A6C((uint64_t)&v43, &v54, (uint64_t)__p);
LABEL_21:
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v19 = v44;
    if (!v44)
      goto LABEL_28;
LABEL_23:
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v19;
    v20 = v46;
    *(_QWORD *)(a3 + 16) = v45;
    *(_QWORD *)(a3 + 24) = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v19 = v44;
    if (v44)
      goto LABEL_23;
LABEL_28:
    v42 = 0;
    v41 = 0;
    LOBYTE(v40) = 0;
    sub_207CB5A6C(a3, &v42, (uint64_t)&v40);
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((a1[17] - a1[16]) >> 5);
    v55 = 0;
    v54 = 0uLL;
    sub_207CA82F8((char **)&v54, v23);
    v24 = (_DWORD *)a1[16];
    for (i = (_DWORD *)a1[17]; v24 != i; v24 += 40)
    {
      sub_207CA36E0(v24, (uint64_t)__p);
      v26 = *((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1) >= v55)
      {
        v31 = sub_207CA84A8((char **)&v54, (uint64_t)__p);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        v28 = *(_OWORD *)&__p[16];
        v29 = v57;
        *(_DWORD *)(*((_QWORD *)&v54 + 1) + 48) = v58;
        *(_OWORD *)(v26 + 16) = v28;
        *(_OWORD *)(v26 + 32) = v29;
        *(_OWORD *)v26 = v27;
        *(_BYTE *)(v26 + 56) = 0;
        *(_BYTE *)(v26 + 112) = 0;
        if (v62)
        {
          *(_QWORD *)(v26 + 56) = off_24C06E878;
          *(_OWORD *)(v26 + 64) = v60;
          v60 = 0uLL;
          v30 = *(_OWORD *)((char *)v61 + 14);
          *(_OWORD *)(v26 + 80) = v61[0];
          *(_OWORD *)(v26 + 94) = v30;
          *(_BYTE *)(v26 + 112) = 1;
        }
        v31 = (char *)(v26 + 120);
      }
      *((_QWORD *)&v54 + 1) = v31;
      if (v62)
      {
        nullsub_31(v61);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        nullsub_31(&v59);
      }
    }
    v35 = v55;
    *(_OWORD *)(a3 + 32) = v54;
    *(_QWORD *)(a3 + 48) = v35;
    *(_BYTE *)(a3 + 56) = 1;
    if (v41 < 0)
      operator delete(v40);
  }
  v43 = off_24C06E9E8;
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  nullsub_31(&v43);
  return sub_207CA86F4((uint64_t)v47);
}

void sub_207C9EFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a36 < 0)
  {
    operator delete(__p);
    sub_207CA86F4((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_207CA86F4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void **sub_207C9F060(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          nullsub_31(v3 - 40);
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          nullsub_31(v3 - 64);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207C9F110@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  void *__p;
  char v18;
  char v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  _BYTE v26[120];
  int v27;
  char v28;

  sub_207C9D070(a1, a2, (uint64_t)v20);
  v5 = v21;
  if (v21)
  {
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v23;
    *(_QWORD *)(a3 + 16) = v22;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    LOBYTE(__p) = 0;
    sub_207CB5A6C(a3, &v19, (uint64_t)&__p);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[14] - a1[13]) >> 5);
    v25 = 0;
    v24 = 0uLL;
    sub_207CA8804((char **)&v24, v9);
    v10 = a1[13];
    for (i = a1[14]; v10 != i; v10 += 160)
    {
      sub_207C9667C(v10, (uint64_t)v26);
      v12 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) >= v25)
      {
        v14 = sub_207CA896C((char **)&v24, (uint64_t)v26);
      }
      else
      {
        **((_BYTE **)&v24 + 1) = 0;
        *(_DWORD *)(v12 + 120) = -1;
        v13 = v27;
        if (v27 != -1)
        {
          ((void (*)(char *, uint64_t, _BYTE *))off_24C06E980[v27])(&v28, v12, v26);
          *(_DWORD *)(v12 + 120) = v13;
        }
        v14 = (char *)(v12 + 128);
      }
      *((_QWORD *)&v24 + 1) = v14;
      if (v27 != -1)
        ((void (*)(char *, _BYTE *))off_24C06E838[v27])(&v28, v26);
    }
    v15 = v25;
    *(_OWORD *)(a3 + 32) = v24;
    *(_QWORD *)(a3 + 48) = v15;
    *(_BYTE *)(a3 + 56) = 1;
    if (v18 < 0)
      operator delete(__p);
  }
  return sub_207CA86F4((uint64_t)v20);
}

void sub_207C9F2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  _QWORD *v42;

  sub_207C9F334(&a24);
  sub_207C9C674(v42);
  if (a14 < 0)
    operator delete(__p);
  sub_207CA86F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void **sub_207C9F334(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_24C06E838[v6])(&v8, v3 - 128);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207C9F3D8()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_207C9F414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207C9F428(unint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_207CAB414)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C06ECB0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C06EC38[v3])(v5, v2);
  return result;
}

void sub_207C9F514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207C9F52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207C9F550(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _OWORD v78[3];
  int v79;
  _QWORD v80[2];
  std::__shared_weak_count *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  char v87;
  _BYTE __p[48];
  char v89;
  char v90;
  CVPixelBufferRef pixelBuffer;
  std::__shared_weak_count *v92;
  _OWORD v93[3];
  int v94;
  _QWORD v95[2];
  std::__shared_weak_count *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __CVBuffer *v109;
  std::__shared_weak_count *v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)__p = *(_DWORD *)(a3 + 48);
  v9 = sub_2080A7244(__p);
  sub_2080A8BDC(v8 + 8, a4, (uint64_t)__p);
  v105 = *(_OWORD *)__p;
  v106 = *(_QWORD *)&__p[16];
  sub_207C9CFCC(a2);
  v104 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v10 = 1;
  else
    v10 = v104 == 0;
  if (v10)
  {
    LOBYTE(v111[0]) = 5;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822ABB0;
    strcpy(*(char **)__p, "Unable to retain input port.");
    sub_207CB5A6C(a1, v111, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_122;
  }
  v111[0] = &off_24C06F630;
  v111[1] = MEMORY[0x24BE2F8E8];
  v111[2] = &v104;
  v112 = v111;
  v103 = &v104;
  if (v9 == 2)
  {
    v20 = *(_OWORD *)(a3 + 16);
    v78[0] = *(_OWORD *)a3;
    v78[1] = v20;
    v78[2] = *(_OWORD *)(a3 + 32);
    v79 = *(_DWORD *)(a3 + 48);
    LOBYTE(v80[0]) = 0;
    v87 = 0;
    if (*(_BYTE *)(a3 + 112))
    {
      v80[0] = off_24C06E878;
      v21 = *(_QWORD *)(a3 + 64);
      v22 = *(std::__shared_weak_count **)(a3 + 72);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      else
      {
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
      }
      v80[1] = v21;
      v81 = v22;
      v82 = *(_QWORD *)(a3 + 80);
      v83 = *(_DWORD *)(a3 + 88);
      v84 = v25;
      v85 = v26;
      v86 = v27;
      if (v22)
      {
        v29 = (unint64_t *)&v22->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v87 = 1;
    }
    sub_207CA91B0((uint64_t)v78, (uint64_t)__p);
    if (v87)
    {
      nullsub_31(&v82);
      v31 = v81;
      if (v81)
      {
        v32 = (unint64_t *)&v81->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      nullsub_31(v80);
    }
    if (v90)
    {
      v34 = *(_QWORD *)&__p[8];
      v35 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v36 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      sub_20812AC30(v34, &v107);
      sub_20815C9DC((uint64_t)&v107, &v109);
      pixelBuffer = v109;
      v92 = v110;
      if (v110)
      {
        v39 = (unint64_t *)&v110->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = v110;
        if (v110)
        {
          v42 = (unint64_t *)&v110->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      sub_20815B3F4(&v107);
      CVPixelBufferGetIOSurface(pixelBuffer);
      sub_207CA8E98(a1);
      v44 = v92;
      if (v92)
      {
        v45 = (unint64_t *)&v92->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    else if (*(_BYTE *)(a3 + 112) && sub_208174AE8(a3 + 56))
    {
      if (!*(_BYTE *)(a3 + 112))
        sub_207CA2A4C();
      sub_208174C18(a3 + 56, &v107);
      sub_20815BF0C((uint64_t)&v107);
      sub_207CA8E98(a1);
      sub_2081DE77C(&v107);
    }
    else
    {
      LOBYTE(v109) = 5;
      v107 = (char *)operator new(0x20uLL);
      v108 = xmmword_20822ABA0;
      strcpy(v107, "Buffer is not IOSurface backed.");
      sub_207CB5A6C(a1, &v109, (uint64_t)&v107);
      if (SHIBYTE(v108) < 0)
        operator delete(v107);
    }
    if (!v90)
      goto LABEL_116;
    v47 = *(std::__shared_weak_count **)&__p[16];
    if (!*(_QWORD *)&__p[16])
      goto LABEL_115;
    v48 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    goto LABEL_113;
  }
  if (v9 != 1)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1179, (uint64_t)"", 0, (uint64_t)"Only Grayscale or two component image direct binding supported now.", 67, (void (*)(void **))sub_208216974);
    abort();
  }
  v11 = *(_OWORD *)(a3 + 16);
  v93[0] = *(_OWORD *)a3;
  v93[1] = v11;
  v93[2] = *(_OWORD *)(a3 + 32);
  v94 = *(_DWORD *)(a3 + 48);
  LOBYTE(v95[0]) = 0;
  v102 = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    v95[0] = off_24C06E878;
    v12 = *(_QWORD *)(a3 + 64);
    v13 = *(std::__shared_weak_count **)(a3 + 72);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
      do
        v19 = __ldxr(v14);
      while (__stxr(v19 + 1, v14));
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
    }
    v95[1] = v12;
    v96 = v13;
    v97 = *(_QWORD *)(a3 + 80);
    v98 = *(_DWORD *)(a3 + 88);
    v99 = v16;
    v100 = v17;
    v101 = v18;
    if (v13)
    {
      v50 = (unint64_t *)&v13->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v102 = 1;
  }
  sub_207CA8B54((uint64_t)v93, (uint64_t)__p);
  if (v102)
  {
    nullsub_31(&v97);
    v52 = v96;
    if (v96)
    {
      v53 = (unint64_t *)&v96->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    nullsub_31(v95);
  }
  if (v89)
  {
    v55 = *(_QWORD *)&__p[8];
    v56 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    sub_2081299D4(v55, &v107);
    sub_20815C9DC((uint64_t)&v107, &v109);
    pixelBuffer = v109;
    v92 = v110;
    if (v110)
    {
      v60 = (unint64_t *)&v110->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v62 = v110;
      if (v110)
      {
        v63 = (unint64_t *)&v110->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
    }
    sub_20815B3F4(&v107);
    CVPixelBufferGetIOSurface(pixelBuffer);
    sub_207CA8E98(a1);
    v65 = v92;
    if (v92)
    {
      v66 = (unint64_t *)&v92->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else if (*(_BYTE *)(a3 + 112) && sub_208174AE8(a3 + 56))
  {
    if (!*(_BYTE *)(a3 + 112))
      sub_207CA2A4C();
    sub_208174C18(a3 + 56, &v107);
    sub_20815BF0C((uint64_t)&v107);
    sub_207CA8E98(a1);
    sub_2081DE77C(&v107);
  }
  else
  {
    LOBYTE(v109) = 5;
    v107 = (char *)operator new(0x20uLL);
    v108 = xmmword_20822ABA0;
    strcpy(v107, "Buffer is not IOSurface backed.");
    sub_207CB5A6C(a1, &v109, (uint64_t)&v107);
    if (SHIBYTE(v108) < 0)
      operator delete(v107);
  }
  if (!v89)
    goto LABEL_116;
  v47 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v68 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v49 = __ldaxr(v68);
    while (__stlxr(v49 - 1, v68));
LABEL_113:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_115:
  nullsub_31(__p);
LABEL_116:
  if (!v112)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v112 + 48))(v112);
  v76 = v112;
  if (v112 == v111)
  {
    v77 = 4;
    v76 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_122;
    v77 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*v76 + 8 * v77))(v76, v69, v70, v71, v72, v73, v74, v75, *(_QWORD *)&v78[0]);
LABEL_122:
  if (SHIBYTE(v106) < 0)
    operator delete((void *)v105);
}

void sub_207C9FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_2081DE77C((_QWORD *)(v40 - 160));
  sub_207CA9148((uint64_t)&__p);
  sub_207C97D64((_QWORD *)(v40 - 120));
  if (*(char *)(v40 - 169) < 0)
  {
    operator delete(*(void **)(v40 - 192));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207C9FF6C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  size_t v26;
  unint64_t v27;
  _BYTE *v28;
  int v29;
  size_t v30;
  unint64_t v31;
  _BYTE *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  size_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void **v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void **v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 *v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  int v98;
  char *v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t (***v105)();
  uint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _OWORD v125[3];
  int v126;
  _QWORD v127[2];
  std::__shared_weak_count *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  __int16 v133;
  char v134;
  __int128 v135;
  _OWORD v136[8];
  int v137;
  char v138;
  char v139;
  void *__p[2];
  unsigned __int8 v141;
  _BYTE v142[88];
  uint64_t v143;
  void *v144[2];
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  _OWORD v148[8];
  int v149;
  char v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[72];
  uint64_t (**v154)();
  uint64_t (*v155)(void);
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v146 = a5;
  v9 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_21;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a5;
    if (*(_QWORD *)&v9 <= a5)
      v11 = a5 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a5;
  }
  v12 = *(uint64_t ***)(*a3 + 8 * v11);
  if (!v12)
  {
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v13 = *v12;
  if (!*v12)
  {
LABEL_22:
    v17 = 1;
    goto LABEL_23;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a5)
      {
        if (v13[2] == a5)
          goto LABEL_117;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_21;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a5)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_21;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_22;
  }
  if (v13[2] != a5)
    goto LABEL_11;
LABEL_117:
  if (!*(_QWORD *)(a2 + 176))
  {
    v135 = *(_OWORD *)(v13 + 3);
    *(_QWORD *)&v136[0] = v13[5];
    BYTE8(v136[0]) = 0;
    v138 = 0;
    if (*((_BYTE *)v13 + 176))
    {
      v137 = -1;
      v84 = *((unsigned int *)v13 + 42);
      if ((_DWORD)v84 != -1)
      {
        ((void (*)(uint64_t (***)(), char *, uint64_t *))off_24C06E850[v84])(&v154, (char *)v136 + 8, v13 + 6);
        v137 = v84;
      }
      v138 = 1;
    }
    v139 = 1;
LABEL_235:
    v147 = v135;
    *(_QWORD *)&v148[0] = *(_QWORD *)&v136[0];
    BYTE8(v148[0]) = 0;
    v150 = 0;
    if (v138)
    {
      v149 = -1;
      v107 = v137;
      if (v137 != -1)
      {
        ((void (*)(_BYTE *, char *, char *))off_24C06E850[v137])(&v153[40], (char *)v148 + 8, (char *)v136 + 8);
        v149 = v107;
      }
      v150 = 1;
    }
    v108 = *(_OWORD *)(a4 + 16);
    v125[0] = *(_OWORD *)a4;
    v125[1] = v108;
    v125[2] = *(_OWORD *)(a4 + 32);
    v126 = *(_DWORD *)(a4 + 48);
    LOBYTE(v127[0]) = 0;
    v134 = 0;
    if (*(_BYTE *)(a4 + 112))
    {
      v127[0] = off_24C06E878;
      v109 = *(_QWORD *)(a4 + 64);
      v110 = *(std::__shared_weak_count **)(a4 + 72);
      if (v110)
      {
        p_shared_owners = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(p_shared_owners);
        while (__stxr(v112 + 1, p_shared_owners));
        v113 = *(_QWORD *)(a4 + 96);
        v114 = *(_DWORD *)(a4 + 104);
        v115 = *(_WORD *)(a4 + 108);
        do
          v116 = __ldxr(p_shared_owners);
        while (__stxr(v116 + 1, p_shared_owners));
      }
      else
      {
        v113 = *(_QWORD *)(a4 + 96);
        v114 = *(_DWORD *)(a4 + 104);
        v115 = *(_WORD *)(a4 + 108);
      }
      v127[1] = v109;
      v128 = v110;
      v129 = *(_QWORD *)(a4 + 80);
      v130 = *(_DWORD *)(a4 + 88);
      v131 = v113;
      v132 = v114;
      v133 = v115;
      if (v110)
      {
        v120 = (unint64_t *)&v110->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v134 = 1;
    }
    sub_207CAE3D4(a1, (uint64_t)v125, (int *)&v147);
    if (v134)
    {
      nullsub_31(&v129);
      v122 = v128;
      if (v128)
      {
        v123 = (unint64_t *)&v128->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      nullsub_31(v127);
    }
    if (v150 && v149 != -1)
      ((void (*)(uint64_t (***)(), char *))off_24C06E838[v149])(&v154, (char *)v148 + 8);
    goto LABEL_268;
  }
  v17 = 0;
LABEL_23:
  sub_2080A8BDC(*(_QWORD *)(a2 + 192) + 8, a5, (uint64_t)&v147);
  *(_OWORD *)v144 = v147;
  v145 = *(_QWORD *)&v148[0];
  sub_207C9CFCC(a2);
  v143 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v18 = 1;
  else
    v18 = v143 == 0;
  if (v18)
  {
    v153[0] = 5;
    *(_QWORD *)&v153[40] = operator new(0x20uLL);
    *(_OWORD *)&v153[48] = xmmword_20822ABB0;
    strcpy(*(char **)&v153[40], "Unable to retain input port.");
    sub_207CB5A6C((uint64_t)&v154, v153, (uint64_t)&v153[40]);
    v19 = (char)v155;
    BYTE8(v147) = (_BYTE)v155;
    v20 = v156;
    v148[0] = v156;
    if (*((_QWORD *)&v156 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = v19;
      v136[0] = v20;
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v139 = 0;
      *(_QWORD *)&v147 = off_24C06E9E8;
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (!v24)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = (_BYTE)v155;
      v136[0] = (unint64_t)v156;
      v139 = 0;
      *(_QWORD *)&v147 = off_24C06E9E8;
    }
    nullsub_31(&v147);
    v154 = off_24C06E9E8;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (!*((_QWORD *)&v156 + 1))
      goto LABEL_59;
    v34 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      nullsub_31(&v154);
      if ((v153[63] & 0x80000000) == 0)
        goto LABEL_233;
    }
    else
    {
LABEL_59:
      nullsub_31(&v154);
      if ((v153[63] & 0x80000000) == 0)
        goto LABEL_233;
    }
    operator delete(*(void **)&v153[40]);
    goto LABEL_233;
  }
  v154 = &off_24C06F630;
  v155 = MEMORY[0x24BE2F8E8];
  *(_QWORD *)&v156 = &v143;
  *((_QWORD *)&v156 + 1) = &v154;
  if ((v17 & 1) == 0)
  {
    if (!v13[5]
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1222, (uint64_t)"buffer_itr->second.buffer_obj", 29, (uint64_t)"GetAllocatedBufferForGenericTensor: Allocated buffer has null buffer_obj", 72, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    if (!e5rt_io_port_bind_buffer_object())
    {
      v135 = *(_OWORD *)(v13 + 3);
      *(_QWORD *)&v136[0] = v13[5];
      BYTE8(v136[0]) = 0;
      v138 = 0;
      if (*((_BYTE *)v13 + 176))
      {
        v137 = -1;
        v36 = *((unsigned int *)v13 + 42);
        if ((_DWORD)v36 != -1)
        {
          ((void (*)(_BYTE *, char *, uint64_t *))off_24C06E850[v36])(&v153[40], (char *)v136 + 8, v13 + 6);
          v137 = v36;
        }
        v138 = 1;
      }
      v139 = 1;
      goto LABEL_227;
    }
    LOBYTE(v151) = 5;
    v29 = SHIBYTE(v145);
    if (v145 >= 0)
      v30 = HIBYTE(v145);
    else
      v30 = (size_t)v144[1];
    v31 = v30 + 50;
    if (v30 + 50 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v31 > 0x16)
    {
      v41 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v41 = v31 | 7;
      v42 = v41 + 1;
      v43 = (char *)operator new(v41 + 1);
      *(_QWORD *)&v153[8] = v30 + 50;
      *(_QWORD *)&v153[16] = v42 | 0x8000000000000000;
      *(_QWORD *)v153 = v43;
      qmemcpy(v43, "Unable to bind generic input buffer to input port ", 50);
      v32 = v43 + 50;
      if (!v30)
        goto LABEL_84;
    }
    else
    {
      qmemcpy(v153, "Unable to bind generic input buffer to input port ", 50);
      v32 = &v153[50];
    }
    if (v29 >= 0)
      v44 = v144;
    else
      v44 = (void **)v144[0];
    memmove(v32, v44, v30);
LABEL_84:
    v32[v30] = 0;
    sub_207CB5A6C((uint64_t)&v153[40], &v151, (uint64_t)v153);
    v45 = v153[48];
    BYTE8(v147) = v153[48];
    v46 = *(_QWORD *)&v153[56];
    v47 = *(std::__shared_weak_count **)&v153[64];
    v148[0] = *(_OWORD *)&v153[56];
    if (*(_QWORD *)&v153[64])
    {
      v48 = (unint64_t *)(*(_QWORD *)&v153[64] + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = v45;
      *(_QWORD *)&v136[0] = v46;
      *((_QWORD *)&v136[0] + 1) = v47;
      do
        v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
      v139 = 0;
      *(_QWORD *)&v147 = off_24C06E9E8;
      do
        v51 = __ldaxr(v48);
      while (__stlxr(v51 - 1, v48));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = v153[48];
      v136[0] = *(unint64_t *)&v153[56];
      v139 = 0;
      *(_QWORD *)&v147 = off_24C06E9E8;
    }
    nullsub_31(&v147);
    *(_QWORD *)&v153[40] = off_24C06E9E8;
    v67 = *(std::__shared_weak_count **)&v153[64];
    if (*(_QWORD *)&v153[64])
    {
      v68 = (unint64_t *)(*(_QWORD *)&v153[64] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    nullsub_31(&v153[40]);
    if ((v153[23] & 0x80000000) != 0)
      operator delete(*(void **)v153);
    goto LABEL_227;
  }
  e5rt_io_port_retain_tensor_desc();
  *(_QWORD *)&v153[40] = &off_24C06F040;
  *(_QWORD *)&v153[48] = MEMORY[0x24BE2FAA8];
  *(_QWORD *)&v153[56] = &v142[80];
  *(_QWORD *)&v153[64] = &v153[40];
  memset(&v142[64], 0, 24);
  e5rt_tensor_desc_get_size();
  if (e5rt_buffer_object_alloc())
  {
    v142[63] = 5;
    v25 = SHIBYTE(v145);
    if (v145 >= 0)
      v26 = HIBYTE(v145);
    else
      v26 = (size_t)v144[1];
    v27 = v26 + 40;
    if (v26 + 40 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v27 <= 0x16)
    {
      qmemcpy(v142, "Unable to create buffer for input port: ", 40);
      v28 = &v142[40];
      goto LABEL_96;
    }
    v52 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v52 = v27 | 7;
    *(_QWORD *)&v142[8] = v26 + 40;
    *(_QWORD *)&v142[16] = (v52 + 1) | 0x8000000000000000;
    *(_QWORD *)v142 = operator new(v52 + 1);
    qmemcpy(*(void **)v142, "Unable to create buffer for input port: ", 40);
    v28 = (_BYTE *)(*(_QWORD *)v142 + 40);
    if (v26)
    {
LABEL_96:
      if (v25 >= 0)
        v53 = v144;
      else
        v53 = (void **)v144[0];
      memmove(v28, v53, v26);
    }
    v28[v26] = 0;
    v54 = std::string::append((std::string *)v142, " of size ", 9uLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(_QWORD *)&v142[48] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
    *(_OWORD *)&v142[32] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    sub_207C9F428((unint64_t *)&v142[64]);
    if ((v141 & 0x80u) == 0)
      v56 = __p;
    else
      v56 = (void **)__p[0];
    if ((v141 & 0x80u) == 0)
      v57 = v141;
    else
      v57 = (std::string::size_type)__p[1];
    v58 = std::string::append((std::string *)&v142[32], (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    *(_QWORD *)&v152 = *((_QWORD *)&v58->__r_.__value_.__l + 2);
    v151 = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    sub_207CB5A6C((uint64_t)v153, &v142[63], (uint64_t)&v151);
    BYTE8(v147) = v153[8];
    v148[0] = *(_OWORD *)&v153[16];
    if (*(_QWORD *)&v153[24])
    {
      v60 = (unint64_t *)(*(_QWORD *)&v153[24] + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = BYTE8(v147);
      v136[0] = v148[0];
      if (*((_QWORD *)&v148[0] + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v64 = (std::__shared_weak_count *)*((_QWORD *)&v148[0] + 1);
        v139 = 0;
        *(_QWORD *)&v147 = off_24C06E9E8;
        if (*((_QWORD *)&v148[0] + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
LABEL_129:
        nullsub_31(&v147);
        *(_QWORD *)v153 = off_24C06E9E8;
        v70 = *(std::__shared_weak_count **)&v153[24];
        if (*(_QWORD *)&v153[24])
        {
          v71 = (unint64_t *)(*(_QWORD *)&v153[24] + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        nullsub_31(v153);
        if (SBYTE7(v152) < 0)
        {
          operator delete((void *)v151);
          if ((char)v141 < 0)
            goto LABEL_140;
LABEL_136:
          if ((v142[55] & 0x80000000) == 0)
            goto LABEL_137;
LABEL_141:
          operator delete(*(void **)&v142[32]);
          if ((v142[23] & 0x80000000) != 0)
LABEL_142:
            operator delete(*(void **)v142);
        }
        else
        {
          if (((char)v141 & 0x80000000) == 0)
            goto LABEL_136;
LABEL_140:
          operator delete(__p[0]);
          if ((v142[55] & 0x80000000) != 0)
            goto LABEL_141;
LABEL_137:
          if ((v142[23] & 0x80000000) != 0)
            goto LABEL_142;
        }
        goto LABEL_221;
      }
    }
    else
    {
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = v153[8];
      v136[0] = *(unint64_t *)&v153[16];
    }
    v139 = 0;
    *(_QWORD *)&v147 = off_24C06E9E8;
    goto LABEL_129;
  }
  *(_QWORD *)v153 = &off_24C06F0C0;
  *(_QWORD *)&v153[8] = MEMORY[0x24BE2F720];
  *(_QWORD *)&v153[16] = &v142[72];
  *(_QWORD *)&v153[24] = v153;
  if (e5rt_io_port_bind_buffer_object())
  {
    if (*(_QWORD *)&v142[72])
      e5rt_buffer_object_release();
    v142[0] = 5;
    v37 = SHIBYTE(v145);
    if (v145 >= 0)
      v38 = HIBYTE(v145);
    else
      v38 = (size_t)v144[1];
    v39 = v38 + 50;
    if (v38 + 50 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v39 <= 0x16)
    {
      qmemcpy(&v142[32], "Unable to bind generic input buffer to input port ", 50);
      v40 = &v142[82];
      goto LABEL_149;
    }
    v75 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v75 = v39 | 7;
    *(_QWORD *)&v142[40] = v38 + 50;
    *(_QWORD *)&v142[48] = (v75 + 1) | 0x8000000000000000;
    *(_QWORD *)&v142[32] = operator new(v75 + 1);
    qmemcpy(*(void **)&v142[32], "Unable to bind generic input buffer to input port ", 50);
    v40 = (_BYTE *)(*(_QWORD *)&v142[32] + 50);
    if (v38)
    {
LABEL_149:
      if (v37 >= 0)
        v76 = v144;
      else
        v76 = (void **)v144[0];
      memmove(v40, v76, v38);
    }
    v40[v38] = 0;
    sub_207CB5A6C((uint64_t)&v151, v142, (uint64_t)&v142[32]);
    BYTE8(v147) = BYTE8(v151);
    v148[0] = v152;
    if (*((_QWORD *)&v152 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = BYTE8(v147);
      v136[0] = v148[0];
      if (*((_QWORD *)&v148[0] + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v148[0] + 1);
        v139 = 0;
        *(_QWORD *)&v147 = off_24C06E9E8;
        if (*((_QWORD *)&v148[0] + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
LABEL_171:
        nullsub_31(&v147);
        *(_QWORD *)&v151 = off_24C06E9E8;
        v85 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        nullsub_31(&v151);
        if ((v142[55] & 0x80000000) != 0)
          operator delete(*(void **)&v142[32]);
        goto LABEL_215;
      }
    }
    else
    {
      *(_QWORD *)&v135 = off_24C06E9E8;
      BYTE8(v135) = BYTE8(v151);
      v136[0] = (unint64_t)v152;
    }
    v139 = 0;
    *(_QWORD *)&v147 = off_24C06E9E8;
    goto LABEL_171;
  }
  *(_QWORD *)&v151 = &unk_24C06EA28;
  *((_QWORD *)&v151 + 1) = nullsub_3;
  *((_QWORD *)&v152 + 1) = &v151;
  *((_QWORD *)&v148[0] + 1) = &v147;
  *(_QWORD *)&v147 = &unk_24C06EA28;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  sub_207CA48D0(&v147, &v153[40]);
  v73 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v74 = 4;
    v73 = &v147;
LABEL_179:
    (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v74 = 5;
    goto LABEL_179;
  }
  *(_QWORD *)&v147 = &unk_24C06EA28;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  *((_QWORD *)&v148[0] + 1) = &v147;
  sub_207CA48D0(&v147, &v151);
  v88 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v89 = 4;
    v88 = &v147;
LABEL_184:
    (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v89 = 5;
    goto LABEL_184;
  }
  if (!*((_QWORD *)&v152 + 1))
    sub_207CA408C();
  (*(void (**)(_QWORD))(**((_QWORD **)&v152 + 1) + 48))(*((_QWORD *)&v152 + 1));
  v90 = (__int128 *)*((_QWORD *)&v152 + 1);
  if (*((__int128 **)&v152 + 1) == &v151)
  {
    v91 = 4;
    v90 = &v151;
LABEL_190:
    (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
  }
  else if (*((_QWORD *)&v152 + 1))
  {
    v91 = 5;
    goto LABEL_190;
  }
  *(_QWORD *)&v151 = &unk_24C06EA28;
  *((_QWORD *)&v151 + 1) = nullsub_3;
  *((_QWORD *)&v152 + 1) = &v151;
  *((_QWORD *)&v148[0] + 1) = &v147;
  *(_QWORD *)&v147 = &unk_24C06EA28;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  sub_207CA48D0(&v147, v153);
  v92 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v93 = 4;
    v92 = &v147;
LABEL_195:
    (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v93 = 5;
    goto LABEL_195;
  }
  *(_QWORD *)&v147 = &unk_24C06EA28;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  *((_QWORD *)&v148[0] + 1) = &v147;
  sub_207CA48D0(&v147, &v151);
  v94 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v95 = 4;
    v94 = &v147;
LABEL_200:
    (*(void (**)(void))(*(_QWORD *)v94 + 8 * v95))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v95 = 5;
    goto LABEL_200;
  }
  if (!*((_QWORD *)&v152 + 1))
    sub_207CA408C();
  (*(void (**)(_QWORD))(**((_QWORD **)&v152 + 1) + 48))(*((_QWORD *)&v152 + 1));
  v96 = (__int128 *)*((_QWORD *)&v152 + 1);
  if (*((__int128 **)&v152 + 1) == &v151)
  {
    v97 = 4;
    v96 = &v151;
LABEL_206:
    (*(void (**)(void))(*(_QWORD *)v96 + 8 * v97))();
  }
  else if (*((_QWORD *)&v152 + 1))
  {
    v97 = 5;
    goto LABEL_206;
  }
  sub_207CA1488();
  LODWORD(v147) = v98;
  *((_QWORD *)&v147 + 1) = *(_QWORD *)&v142[80];
  *(_QWORD *)&v148[0] = *(_QWORD *)&v142[72];
  BYTE8(v148[0]) = 0;
  v150 = 0;
  *(_QWORD *)&v151 = &v146;
  v99 = sub_207CB06E4((uint64_t)a3, &v146, (uint64_t)&unk_20822AD51, (_QWORD **)&v151);
  *(_OWORD *)(v99 + 24) = v147;
  *((_QWORD *)v99 + 5) = *(_QWORD *)&v148[0];
  sub_207CA5AFC((uint64_t)(v99 + 48), (uint64_t)v148 + 8);
  v135 = v147;
  *(_QWORD *)&v136[0] = *(_QWORD *)&v148[0];
  BYTE8(v136[0]) = 0;
  v138 = 0;
  if (v150)
  {
    v137 = -1;
    v100 = v149;
    if (v149 != -1)
    {
      ((void (*)(__int128 *, char *, char *))off_24C06E980[v149])(&v151, (char *)v136 + 8, (char *)v148 + 8);
      v137 = v100;
      v138 = 1;
      v139 = 1;
      if (v150 && v149 != -1)
        ((void (*)(__int128 *, char *))off_24C06E838[v149])(&v151, (char *)v148 + 8);
      goto LABEL_215;
    }
    v138 = 1;
  }
  v139 = 1;
LABEL_215:
  if (!*(_QWORD *)&v153[24])
    sub_207CA408C();
  (*(void (**)(_QWORD))(**(_QWORD **)&v153[24] + 48))(*(_QWORD *)&v153[24]);
  v101 = *(_QWORD **)&v153[24];
  if (*(_BYTE **)&v153[24] == v153)
  {
    v102 = 4;
    v101 = v153;
  }
  else
  {
    if (!*(_QWORD *)&v153[24])
      goto LABEL_221;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_221:
  if (!*(_QWORD *)&v153[64])
    sub_207CA408C();
  (*(void (**)(_QWORD))(**(_QWORD **)&v153[64] + 48))(*(_QWORD *)&v153[64]);
  v103 = *(_QWORD **)&v153[64];
  if (*(_BYTE **)&v153[64] == &v153[40])
  {
    v104 = 4;
    v103 = &v153[40];
LABEL_226:
    (*(void (**)(void))(*v103 + 8 * v104))();
  }
  else if (*(_QWORD *)&v153[64])
  {
    v104 = 5;
    goto LABEL_226;
  }
LABEL_227:
  if (!*((_QWORD *)&v156 + 1))
    sub_207CA408C();
  (*(void (**)(_QWORD))(**((_QWORD **)&v156 + 1) + 48))(*((_QWORD *)&v156 + 1));
  v105 = (uint64_t (***)())*((_QWORD *)&v156 + 1);
  if (*((uint64_t (****)())&v156 + 1) == &v154)
  {
    v106 = 4;
    v105 = &v154;
LABEL_232:
    (*v105)[v106]();
  }
  else if (*((_QWORD *)&v156 + 1))
  {
    v106 = 5;
    goto LABEL_232;
  }
LABEL_233:
  if (SHIBYTE(v145) < 0)
  {
    operator delete(v144[0]);
    if (!v139)
      goto LABEL_247;
    goto LABEL_235;
  }
  if (v139)
    goto LABEL_235;
LABEL_247:
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = BYTE8(v135);
  v117 = *((_QWORD *)&v136[0] + 1);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v136[0];
  *(_QWORD *)(a1 + 24) = v117;
  if (v117)
  {
    v118 = (unint64_t *)(v117 + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
LABEL_268:
  if (v139)
  {
    if (v138)
    {
      if (v137 != -1)
        ((void (*)(__int128 *, char *))off_24C06E838[v137])(&v147, (char *)v136 + 8);
    }
  }
  else
  {
    (*(void (**)(__int128 *))v135)(&v135);
  }
}

void sub_207CA11B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA140C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 112))
  {
    nullsub_31(a1 + 80);
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_31(a1 + 56);
  }
  return a1;
}

void sub_207CA1488()
{
  uint64_t v0;
  _QWORD v1[5];

  v1[4] = *MEMORY[0x24BDAC8D0];
  v0 = 0;
  e5rt_tensor_desc_retain_dtype();
  v1[0] = &off_24C06E8E8;
  v1[1] = MEMORY[0x24BE2FA68];
  v1[2] = &v0;
  v1[3] = v1;
  e5rt_tensor_desc_dtype_get_component_size();
  e5rt_tensor_desc_dtype_get_component_dtype();
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1026, (uint64_t)"", 0, (uint64_t)"Conversions not supported yet", 29, (void (*)(void **))sub_208216974);
  abort();
}

void sub_207CA15F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207C97D64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CA1608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207C97D64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CA161C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

uint64_t sub_207CA1634(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C06E838[v2])(&v4, a1 + 24);
    *(_DWORD *)(a1 + 144) = -1;
  }
  return a1;
}

_QWORD *sub_207CA1694@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const void **v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  _BOOL4 v30;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  char v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 *v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *result;
  uint64_t v125;
  unint64_t v126;
  _OWORD v128[3];
  int v129;
  _QWORD v130[2];
  std::__shared_weak_count *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  __int16 v136;
  char v137;
  std::string v138;
  std::string v139;
  void *__p[2];
  std::string::size_type v141;
  char v142;
  _BYTE v143[72];
  std::__shared_weak_count *v144;
  void *v145[2];
  _BYTE v146[20];
  int v147;
  int v148;
  __int128 v149;
  _BYTE v150[32];
  int v151;
  _QWORD v152[2];
  std::__shared_weak_count *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  __int16 v158;
  char v159;
  _QWORD v160[3];
  _QWORD *v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v11 = a1[24];
  v13 = *(_QWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 56);
  v14 = 0xCF3CF3CF3CF3CF3DLL * ((v12 - v13) >> 3);
  if (v14 != (uint64_t)(a2[1] - *a2) >> 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1433, (uint64_t)"num_inputs == data.inputs.size()", 32, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v16 = sub_2080B9880(a5), v17 = v15, !v16) || !v15)&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1439, (uint64_t)"stream != nullptr && stream_op != nullptr", 41, (uint64_t)"Invalid e5rt objects from pool.", 31, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v18 = operator new(0x20uLL);
  *v18 = &off_24C06F6B0;
  v18[1] = sub_207CA25FC;
  v18[2] = a5;
  v18[3] = v16;
  v161 = v18;
  sub_207C9AB50(a1[24] + 8, 0, a1 + 13, a1 + 16, (uint64_t)&v143[48]);
  if (!v143[56])
  {
    v126 = v16;
    if (v12 != v13)
    {
      v24 = 0;
      while (1)
      {
        *(_QWORD *)&v143[40] = v24;
        sub_2080A1E90(*a2 + (v24 << 7), (uint64_t)&v149);
        LODWORD(v145[0]) = v151;
        if (!sub_2080A71F4(v145)
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1459, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((*(_OWORD *)&v146[4] = *(_OWORD *)&v150[4], v147 = *(_DWORD *)&v150[20], *(_OWORD *)v145 = v149, *(_DWORD *)v146 = *(_DWORD *)v150, v148 = v151, !sub_2080A1048(v145))|| !sub_2080A10F0(v145, 16))&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1460, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45,
               (uint64_t)"",
               0,
               (void (*)(void **))sub_208216974))
        {
          abort();
        }
        LODWORD(v145[0]) = v151;
        v25 = sub_2080A727C((int *)v145);
        if (!v26)
        {
          v142 = 3;
          sub_207C9F428((unint64_t *)&v143[40]);
          v41 = std::string::insert(&v138, 0, "Invalid input: The given view for input ", 0x28uLL);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          v43 = std::string::append(&v139, " requires both a color format and type definition in its format flags.", 0x46uLL);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v141 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          sub_207CB5A6C((uint64_t)v143, &v142, (uint64_t)__p);
          v45 = v143[8];
          LOBYTE(v145[1]) = v143[8];
          v46 = *(_QWORD *)&v143[16];
          *(_OWORD *)v146 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v47 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            v49 = (char)v145[1];
            v50 = *(_OWORD *)v146;
            *(_QWORD *)a6 = off_24C06E9E8;
            *(_BYTE *)(a6 + 8) = v49;
            *(_OWORD *)(a6 + 16) = v50;
            if (*((_QWORD *)&v50 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              v53 = *(std::__shared_weak_count **)&v146[8];
              *(_BYTE *)(a6 + 32) = 0;
              v145[0] = off_24C06E9E8;
              if (v53)
              {
                p_shared_owners = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(p_shared_owners);
                while (__stlxr(v55 - 1, p_shared_owners));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
LABEL_60:
              nullsub_31(v145);
              *(_QWORD *)v143 = off_24C06E9E8;
              v64 = *(std::__shared_weak_count **)&v143[24];
              if (!*(_QWORD *)&v143[24])
                goto LABEL_64;
              v65 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
                nullsub_31(v143);
                if (SHIBYTE(v141) < 0)
                  goto LABEL_70;
LABEL_65:
                if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_66;
LABEL_71:
                operator delete(v139.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_67:
                  v67 = 1;
                  if (v159)
                    goto LABEL_122;
                  goto LABEL_128;
                }
              }
              else
              {
LABEL_64:
                nullsub_31(v143);
                if ((SHIBYTE(v141) & 0x80000000) == 0)
                  goto LABEL_65;
LABEL_70:
                operator delete(__p[0]);
                if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_71;
LABEL_66:
                if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_67;
              }
              operator delete(v138.__r_.__value_.__l.__data_);
              v67 = 1;
              if (v159)
                goto LABEL_122;
              goto LABEL_128;
            }
          }
          else
          {
            *(_QWORD *)a6 = off_24C06E9E8;
            *(_BYTE *)(a6 + 8) = v45;
            *(_QWORD *)(a6 + 16) = v46;
            *(_QWORD *)(a6 + 24) = 0;
          }
          *(_BYTE *)(a6 + 32) = 0;
          v145[0] = off_24C06E9E8;
          goto LABEL_60;
        }
        v27 = v25;
        v145[0] = off_24C06E9E8;
        LOBYTE(v145[1]) = 0;
        v28 = operator new(0x18uLL);
        v28[23] = 0;
        *v28 = 0;
        *(_QWORD *)v146 = v28;
        v29 = operator new(0x20uLL);
        *v29 = &unk_24C06F1C0;
        v29[1] = 0;
        v29[2] = 0;
        v29[3] = v28;
        *(_QWORD *)&v146[8] = v29;
        v30 = sub_2080B6B94((uint64_t)&v149);
        if ((unint64_t)(v27 - 1) < 2 && v30)
        {
          sub_207C9F550((uint64_t)v143, (uint64_t)a1, (uint64_t)&v149, *(unint64_t *)&v143[40]);
          LOBYTE(v145[1]) = v143[8];
          v32 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v33 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *(std::__shared_weak_count **)&v146[8];
          *(_OWORD *)v146 = v32;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          *(_QWORD *)v143 = off_24C06E9E8;
          v38 = *(std::__shared_weak_count **)&v143[24];
          if (*(_QWORD *)&v143[24])
          {
            v39 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          nullsub_31(v143);
        }
        else
        {
          if (!sub_2080B6BA8((uint64_t)&v149))
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1480, (uint64_t)"", 0, (uint64_t)"Only single Grayscale input image or single two component input image is supported.", 83, (void (*)(void **))sub_208216974);
            abort();
          }
          v128[0] = v149;
          v128[1] = *(_OWORD *)v150;
          v128[2] = *(_OWORD *)&v150[16];
          v129 = v151;
          LOBYTE(v130[0]) = 0;
          v137 = 0;
          if (v159)
          {
            v130[0] = off_24C06E878;
            v56 = v152[1];
            v57 = v153;
            if (v153)
            {
              v58 = (unint64_t *)&v153->__shared_owners_;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              v60 = v156;
              v61 = v157;
              v62 = v158;
              do
                v63 = __ldxr(v58);
              while (__stxr(v63 + 1, v58));
            }
            else
            {
              v60 = v156;
              v61 = v157;
              v62 = v158;
            }
            v130[1] = v56;
            v131 = v57;
            v132 = v154;
            v133 = v155;
            v134 = v60;
            v135 = v61;
            v136 = v62;
            if (v57)
            {
              v68 = (unint64_t *)&v57->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v137 = 1;
          }
          sub_207C9FF6C((uint64_t)v143, (uint64_t)a1, a3, (uint64_t)v128, *(unint64_t *)&v143[40]);
          LOBYTE(v145[1]) = v143[8];
          v70 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v71 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v73 = *(std::__shared_weak_count **)&v146[8];
          *(_OWORD *)v146 = v70;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          *(_QWORD *)v143 = off_24C06E9E8;
          v76 = *(std::__shared_weak_count **)&v143[24];
          if (*(_QWORD *)&v143[24])
          {
            v77 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          nullsub_31(v143);
          if (v137)
          {
            nullsub_31(&v132);
            v79 = v131;
            if (v131)
            {
              v80 = (unint64_t *)&v131->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            nullsub_31(v130);
          }
        }
        v82 = (char)v145[1];
        if (!LOBYTE(v145[1]))
        {
          v67 = 0;
          v145[0] = off_24C06E9E8;
          v93 = *(std::__shared_weak_count **)&v146[8];
          if (!*(_QWORD *)&v146[8])
            goto LABEL_121;
          goto LABEL_118;
        }
        v143[8] = v145[1];
        v83 = *(_QWORD *)v146;
        *(_OWORD *)&v143[16] = *(_OWORD *)v146;
        if (!*(_QWORD *)&v146[8])
          break;
        v84 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        v86 = v143[8];
        v87 = *(_OWORD *)&v143[16];
        *(_QWORD *)a6 = off_24C06E9E8;
        *(_BYTE *)(a6 + 8) = v86;
        *(_OWORD *)(a6 + 16) = v87;
        if (!*((_QWORD *)&v87 + 1))
          goto LABEL_116;
        v88 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v90 = *(std::__shared_weak_count **)&v143[24];
        *(_BYTE *)(a6 + 32) = 0;
        *(_QWORD *)v143 = off_24C06E9E8;
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
LABEL_117:
        nullsub_31(v143);
        v67 = 1;
        v145[0] = off_24C06E9E8;
        v93 = *(std::__shared_weak_count **)&v146[8];
        if (!*(_QWORD *)&v146[8])
          goto LABEL_121;
LABEL_118:
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (v95)
        {
LABEL_121:
          nullsub_31(v145);
          if (v159)
            goto LABEL_122;
          goto LABEL_128;
        }
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        nullsub_31(v145);
        if (v159)
        {
LABEL_122:
          nullsub_31(&v154);
          v96 = v153;
          if (v153)
          {
            v97 = (unint64_t *)&v153->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          nullsub_31(v152);
        }
LABEL_128:
        if (v67)
          goto LABEL_183;
        if (++v24 == v14)
          goto LABEL_151;
      }
      *(_QWORD *)a6 = off_24C06E9E8;
      *(_BYTE *)(a6 + 8) = v82;
      *(_QWORD *)(a6 + 16) = v83;
      *(_QWORD *)(a6 + 24) = 0;
LABEL_116:
      *(_BYTE *)(a6 + 32) = 0;
      *(_QWORD *)v143 = off_24C06E9E8;
      goto LABEL_117;
    }
LABEL_151:
    v145[0] = &unk_24C06EA28;
    v145[1] = nullsub_3;
    *(_QWORD *)&v146[8] = v145;
    *(_QWORD *)&v150[8] = &v149;
    *(_QWORD *)&v149 = &unk_24C06EA28;
    *((_QWORD *)&v149 + 1) = nullsub_3;
    sub_207CA48D0(&v149, v160);
    v108 = *(__int128 **)&v150[8];
    if (*(__int128 **)&v150[8] == &v149)
    {
      v111 = 4;
      v108 = &v149;
      v110 = a4;
      v109 = v126;
    }
    else
    {
      v110 = a4;
      v109 = v126;
      if (!*(_QWORD *)&v150[8])
        goto LABEL_164;
      v111 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v108 + 8 * v111))();
LABEL_164:
    *(_QWORD *)&v149 = &unk_24C06EA28;
    *((_QWORD *)&v149 + 1) = nullsub_3;
    *(_QWORD *)&v150[8] = &v149;
    sub_207CA48D0(&v149, v145);
    v114 = *(__int128 **)&v150[8];
    if (*(__int128 **)&v150[8] == &v149)
    {
      v115 = 4;
      v114 = &v149;
    }
    else
    {
      if (!*(_QWORD *)&v150[8])
        goto LABEL_169;
      v115 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v114 + 8 * v115))();
LABEL_169:
    if (!*(_QWORD *)&v146[8])
      sub_207CA408C();
    (*(void (**)(_QWORD))(**(_QWORD **)&v146[8] + 48))(*(_QWORD *)&v146[8]);
    v116 = *(void ***)&v146[8];
    if (*(void ***)&v146[8] == v145)
    {
      v117 = 4;
      v116 = v145;
    }
    else
    {
      if (!*(_QWORD *)&v146[8])
        goto LABEL_175;
      v117 = 5;
    }
    (*((void (**)(void))*v116 + v117))();
LABEL_175:
    e5rt_execution_stream_encode_operation();
    e5rt_execution_stream_prewire_in_use_allocations();
    sub_207CA2604(a2, v145);
    v149 = *(_OWORD *)v145;
    v118 = *(_QWORD *)v146;
    v145[1] = 0;
    *(_QWORD *)v146 = 0;
    v145[0] = 0;
    *(_QWORD *)v150 = v118;
    *(_QWORD *)&v150[8] = v109;
    *(_QWORD *)&v150[16] = v17;
    sub_207CB7C54(v110, (uint64_t)&v149, (uint64_t)&v149);
    v120 = v119;
    if ((v150[7] & 0x80000000) != 0)
    {
      operator delete((void *)v149);
      if ((v146[7] & 0x80000000) == 0)
      {
LABEL_177:
        if ((v120 & 1) != 0)
          goto LABEL_182;
        goto LABEL_181;
      }
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_177;
    }
    operator delete(v145[0]);
    if ((v120 & 1) != 0)
    {
LABEL_182:
      *(_QWORD *)a6 = v109;
      *(_BYTE *)(a6 + 32) = 1;
      goto LABEL_183;
    }
LABEL_181:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1497, (uint64_t)"output.second", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    goto LABEL_182;
  }
  LOBYTE(__p[0]) = 5;
  v19 = *(const void ***)&v143[64];
  v20 = *(char *)(*(_QWORD *)&v143[64] + 23);
  if (v20 >= 0)
    v21 = *(unsigned __int8 *)(*(_QWORD *)&v143[64] + 23);
  else
    v21 = *(_QWORD *)(*(_QWORD *)&v143[64] + 8);
  v22 = v21 + 66;
  if (v21 + 66 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v22 <= 0x16)
  {
    qmemcpy(v143, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
    v23 = &v143[66];
LABEL_136:
    if (v20 >= 0)
      v100 = v19;
    else
      v100 = *v19;
    memmove(v23, v100, v21);
    goto LABEL_140;
  }
  v99 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17)
    v99 = v22 | 7;
  *(_QWORD *)&v143[8] = v21 + 66;
  *(_QWORD *)&v143[16] = (v99 + 1) | 0x8000000000000000;
  *(_QWORD *)v143 = operator new(v99 + 1);
  qmemcpy(*(void **)v143, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
  v23 = (_BYTE *)(*(_QWORD *)v143 + 66);
  if (v21)
    goto LABEL_136;
LABEL_140:
  v23[v21] = 0;
  sub_207CB5A6C((uint64_t)v145, __p, (uint64_t)v143);
  v101 = (char)v145[1];
  BYTE8(v149) = v145[1];
  v102 = *(_OWORD *)v146;
  *(_OWORD *)v150 = *(_OWORD *)v146;
  if (*(_QWORD *)&v146[8])
  {
    v103 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    *(_QWORD *)a6 = off_24C06E9E8;
    *(_BYTE *)(a6 + 8) = v101;
    *(_OWORD *)(a6 + 16) = v102;
    do
      v105 = __ldxr(v103);
    while (__stxr(v105 + 1, v103));
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&v149 = off_24C06E9E8;
    do
      v106 = __ldaxr(v103);
    while (__stlxr(v106 - 1, v103));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
    nullsub_31(&v149);
    v145[0] = off_24C06E9E8;
    v107 = *(std::__shared_weak_count **)&v146[8];
    if (!*(_QWORD *)&v146[8])
      goto LABEL_158;
  }
  else
  {
    *(_QWORD *)a6 = off_24C06E9E8;
    *(_BYTE *)(a6 + 8) = v101;
    *(_QWORD *)(a6 + 16) = v102;
    *(_QWORD *)(a6 + 24) = 0;
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&v149 = off_24C06E9E8;
    nullsub_31(&v149);
    v145[0] = off_24C06E9E8;
    v107 = *(std::__shared_weak_count **)&v146[8];
    if (!*(_QWORD *)&v146[8])
      goto LABEL_158;
  }
  v112 = (unint64_t *)&v107->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    nullsub_31(v145);
    if ((v143[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_159;
  }
LABEL_158:
  nullsub_31(v145);
  if ((v143[23] & 0x80000000) != 0)
LABEL_159:
    operator delete(*(void **)v143);
LABEL_183:
  *(_QWORD *)&v143[48] = off_24C06E9E8;
  v121 = v144;
  if (v144)
  {
    v122 = (unint64_t *)&v144->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  nullsub_31(&v143[48]);
  if (!v161)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v161 + 48))(v161);
  result = v161;
  if (v161 == v160)
  {
    v125 = 4;
    result = v160;
  }
  else
  {
    if (!v161)
      return result;
    v125 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v125))();
}

void sub_207CA249C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  sub_207C9C674(&a51);
  sub_207C97D64((_QWORD *)(v51 - 128));
  _Unwind_Resume(a1);
}

void sub_207CA25FC(_QWORD *a1, unint64_t *a2)
{
  sub_2080B9C44(a1, *a2);
}

uint64_t sub_207CA2604@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v18[56];
  uint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE v21[40];
  _QWORD v22[5];
  const void *v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  void *__p;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  sub_207CA2878((uint64_t)v22);
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 7;
    do
    {
      sub_2080A1E90(*a1 + (v5 << 7), (uint64_t)v18);
      if (sub_2080B6B94((uint64_t)v18))
      {
        sub_2080A0DA8((uint64_t)v18);
        std::ostream::operator<<();
        std::ostream::operator<<();
      }
      if (v21[32])
      {
        nullsub_31(v21);
        v7 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        nullsub_31(&v19);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  if ((v30 & 0x10) != 0)
  {
    v11 = v29;
    if (v29 < v26)
    {
      v29 = v26;
      v11 = v26;
    }
    v12 = v25;
    v10 = v11 - (_QWORD)v25;
    if (v11 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v30 & 8) == 0)
    {
      v10 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v12 = v23;
    v10 = v24 - (_QWORD)v23;
    if ((unint64_t)(v24 - (_QWORD)v23) >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_207C95C50();
  }
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a2 = v15;
    a2 = v15;
    goto LABEL_25;
  }
  a2[23] = v10;
  if (v10)
LABEL_25:
    memmove(a2, v12, v10);
LABEL_26:
  a2[v10] = 0;
  v22[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22[2] = v16;
  v22[3] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD027B8](&v31);
}

void sub_207CA2844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CA285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_207CA140C((uint64_t)&a9);
  sub_207CA29B0((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA2878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_207CA297C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA29B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](a1 + 128);
  return a1;
}

uint64_t sub_207CA2A38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0, 0);
}

void sub_207CA2A4C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void sub_207CA2A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_31(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_31(v3);
    }
    else
    {
LABEL_6:
      nullsub_31(v3);
    }
  }
}

void sub_207CA2B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_31(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_31(v3);
    }
    else
    {
LABEL_6:
      nullsub_31(v3);
    }
  }
}

void sub_207CA2B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_31(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_31(v3);
    }
    else
    {
LABEL_6:
      nullsub_31(v3);
    }
  }
}

uint64_t sub_207CA2C18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    nullsub_31(a1 + 24);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_31(a1);
  }
  return a1;
}

uint64_t sub_207CA2C88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_31(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

void sub_207CA2CF8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_207CA2DEC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_207CA2EE0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_207CA2FD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  nullsub_31(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CA304C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_207CA3054(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_207CA305C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_207CA3070(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_QWORD *sub_207CA30F4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24C06E8E8;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C96058(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809F33C(a2, v25, v15, &v12, &unk_208266D3C, v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v27)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CA3360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA337C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA3390(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA33A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA33B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA33CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CA33E8@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24C06E8E8;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C9624C(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809F33C(a2, v25, v15, &v12, " ", v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v27)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CA3658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA3674(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA3688(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA369C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA36B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA36C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CA36E0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24C06E8E8;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C96464(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809F33C(a2, v25, v15, &v12, &unk_208266D34, v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v27)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CA3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA396C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA3980(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA3994(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA39A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CA39BC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_207CA39E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06E8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CA3A18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06E8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CA3A38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CA3A40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CA3AAC()
{
  return &unk_24C06E958;
}

void sub_207CA3AB8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_207CA3AE0(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_207CA3DC0(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24C06E838[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = off_24C06E878;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 0;
}

void sub_207CA3BD0(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_207CA3DC0(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24C06E838[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = off_24C06E878;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 1;
}

void sub_207CA3CC8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_207CA3DC0(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24C06E838[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = off_24C06E878;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 2;
}

__n128 sub_207CA3DC0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __n128 result;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v4 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    nullsub_31(a1 + 24);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    nullsub_31(a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = off_24C06E878;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

__n128 sub_207CA3EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_207CA3F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_207CA3FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

void sub_207CA4004()
{
  sub_207CA4018("basic_string");
}

void sub_207CA4018(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_207CA4068(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
}

void sub_207CA4054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_207CA4068(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_207CA408C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C06E9C0;
  __cxa_throw(exception, (struct type_info *)&unk_24C06E998, (void (*)(void *))std::exception::~exception);
}

void sub_207CA40C4(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

void *sub_207CA40D8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_207CA4164(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = off_24C06E9E8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

_QWORD *sub_207CA41E0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = (__int128 *)result[2];
  if (*((char *)v2 + 23) < 0)
    return sub_207CA40D8((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_207CA420C()
{
  sub_207C95C64("vector");
}

uint64_t sub_207CA4220(uint64_t a1, const char **a2, uint64_t *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = a3[1];
  a3[1] = 0;
  v12 = a3[2];
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a3[3];
  *(_QWORD *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(a1 + 32);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(v11 + 8 * v14) = a1 + 40;
    a3[2] = 0;
    a3[3] = 0;
  }
  v16 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = a3[6];
  a3[6] = 0;
  v17 = a3[7];
  *(_QWORD *)(a1 + 80) = v17;
  v18 = a3[8];
  *(_QWORD *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a3 + 18);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(a1 + 72);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v19 %= v20;
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(_QWORD *)(v16 + 8 * v19) = a1 + 80;
    a3[7] = 0;
    a3[8] = 0;
  }
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 5);
  a3[10] = 0;
  a3[11] = 0;
  *(_QWORD *)(a1 + 120) = a3[12];
  return a1;
}

uint64_t sub_207CA43C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void *v10;
  void **v12;
  char v13;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
    if (*((_BYTE *)v6 + 176))
    {
      v7 = *((unsigned int *)v6 + 42);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _QWORD *))off_24C06E838[v7])(&v13, v6 + 6);
    }
    operator delete(v6);
  }
  while (v5);
LABEL_12:
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void ***)(a1 + 16);
  if (v9)
  {
    do
    {
      v12 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

void sub_207CA44DC(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 24;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

uint64_t sub_207CA4610(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_207CA4674(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

_QWORD *sub_207CA47E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C06EA28;
  result[1] = v3;
  return result;
}

uint64_t sub_207CA4820(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C06EA28;
  a2[1] = v2;
  return result;
}

uint64_t sub_207CA4840(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_207CA4848(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020822AE40)
    return a1 + 8;
  if (((v3 & 0x800000020822AE40 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020822AE40))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020822AE40 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_207CA48C4()
{
  return &unk_24C06EA98;
}

_QWORD *sub_207CA48D0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_207CA4A64(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_207C9CFA4(a1);
}

_QWORD *sub_207CA4A70(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 5);
    if (v7 >= 0x19999999999999ALL)
      sub_207CA420C();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[160 * v7];
    a1[1] = sub_207CA4BA8(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_207CA4B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((_BYTE *)v17 - 8))
        {
          v19 = *(v17 - 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, _DWORD *))off_24C06E838[v19])(&a13, v17 - 34);
          *(v17 - 4) = -1;
        }
        v17 -= 40;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CA4BA8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[2];

  v4 = a4;
  v11 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 152) = 0;
      if (*((_BYTE *)v6 + 152))
      {
        *(_BYTE *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 144) = -1;
        v8 = *((unsigned int *)v6 + 36);
        v9 = v4;
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, char *))off_24C06E850[v8])(v12, v4 + 24, (char *)v6 + 24);
          *(_DWORD *)(v4 + 144) = v8;
          v9 = v11;
        }
        *(_BYTE *)(v4 + 152) = 1;
        v4 = v9;
      }
      v4 += 160;
      v11 = v4;
      v6 += 10;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_207CA4C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = *(unsigned int *)(v19 + 144);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v22])(&a19, v20);
  *(_DWORD *)(v19 + 144) = -1;
  sub_207CA4CE0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA4CE0(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 160)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_24C06E838[v7])(&v8, v5 - 136);
        *(_DWORD *)(v5 - 16) = -1;
      }
    }
  }
  return a1;
}

uint64_t sub_207CA4D80(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void **v15;
  void *v16;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v2 = *(void ***)(a1 + 152);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      sub_207CA43C8((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = *(void **)(a1 + 112);
    if (v5 != v4)
    {
      do
      {
        if (*(_BYTE *)(v5 - 8))
        {
          v8 = *(unsigned int *)(v5 - 16);
          if ((_DWORD)v8 != -1)
            ((void (*)(char *, uint64_t))off_24C06E838[v8])(&v21, v5 - 136);
          *(_DWORD *)(v5 - 16) = -1;
        }
        v5 -= 160;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v4;
    operator delete(v6);
  }
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(void **)(a1 + 88);
    if (v10 != v9)
    {
      do
      {
        if (*(_BYTE *)(v10 - 8))
        {
          v12 = *(unsigned int *)(v10 - 16);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))off_24C06E838[v12])(&v22, v10 - 136);
          *(_DWORD *)(v10 - 16) = -1;
        }
        v10 -= 160;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v9;
    operator delete(v11);
  }
  v13 = *(_QWORD **)(a1 + 64);
  while (v13)
  {
    v19 = v13;
    v13 = (_QWORD *)*v13;
    if (*((_BYTE *)v19 + 176))
    {
      v20 = *((unsigned int *)v19 + 42);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, _QWORD *))off_24C06E838[v20])(&v23, v19 + 6);
    }
    operator delete(v19);
  }
  v14 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v14)
    operator delete(v14);
  v15 = *(void ***)(a1 + 16);
  if (v15)
  {
    do
    {
      v18 = (void **)*v15;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v18;
    }
    while (v18);
  }
  v16 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
    operator delete(v16);
  return a1;
}

uint64_t sub_207CA4F70(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  sub_207CA51F8(a1 + 40, a2 + 5);
  sub_207CA550C((_QWORD *)(a1 + 64), a2 + 8);
  *(_BYTE *)(a1 + 88) = 0;
  v6 = (char *)(a1 + 88);
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    sub_207CA5698(v6, a2[11], a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_207CA5044(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(v1 + 112))
    sub_208216C7C((void **)(v1 + 88));
  sub_207CA5094(v4);
  sub_207CA510C(v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void **sub_207CA5094(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_207CA510C(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_21;
  v5 = (uint64_t)v3 - 80;
  do
  {
    if (!*(_BYTE *)(v5 + 72))
      goto LABEL_11;
    v7 = *(_QWORD **)(v5 + 64);
    if ((_QWORD *)(v5 + 40) == v7)
    {
      v7 = (_QWORD *)(v5 + 40);
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_11;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
    if (*(_BYTE *)(v5 + 32))
    {
      v9 = *(_QWORD **)(v5 + 24);
      if ((_QWORD *)v5 == v9)
      {
        v9 = (_QWORD *)v5;
        v10 = 4;
        goto LABEL_16;
      }
      if (v9)
      {
        v10 = 5;
LABEL_16:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
    }
    if (*(_BYTE *)(v5 - 64) && *(char *)(v5 - 65) < 0)
      operator delete(*(void **)(v5 - 88));
    v6 = (void *)(v5 - 88);
    v5 -= 168;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_21:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_207CA51F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xCF3CF3CF3CF3CF3DLL * (v5 >> 3);
    if (v6 >= 0x186186186186187)
      sub_207CA420C();
    v7 = (char *)operator new(v5);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[168 * v6];
    sub_207CA52B8((char *)a1, v3, v4);
  }
  return a1;
}

void sub_207CA5298(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_208216CE4();
  _Unwind_Resume(exception_object);
}

char *sub_207CA52B8(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_207CA5340((char *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 168;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_207CA5320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    sub_208216DA4(v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_207CA5340(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_DWORD *)a2 + 20);
  __dst[88] = 0;
  *((_DWORD *)__dst + 20) = v8;
  *((_OWORD *)__dst + 4) = v7;
  *((_OWORD *)__dst + 3) = v6;
  *((_OWORD *)__dst + 2) = v5;
  __dst[120] = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v9 = *((_QWORD *)a2 + 14);
    if (v9)
    {
      if ((__int128 *)v9 == (__int128 *)((char *)a2 + 88))
      {
        *((_QWORD *)__dst + 14) = __dst + 88;
        (*(void (**)(_QWORD, char *))(**((_QWORD **)a2 + 14) + 24))(*((_QWORD *)a2 + 14), __dst + 88);
        goto LABEL_12;
      }
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    *((_QWORD *)__dst + 14) = v9;
LABEL_12:
    __dst[120] = 1;
  }
  __dst[128] = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v10 = *((_QWORD *)a2 + 19);
    if (v10)
    {
      if ((__int128 *)v10 == a2 + 8)
      {
        *((_QWORD *)__dst + 19) = __dst + 128;
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 19) + 24))(*((_QWORD *)a2 + 19));
        goto LABEL_19;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    *((_QWORD *)__dst + 19) = v10;
LABEL_19:
    __dst[160] = 1;
  }
  return __dst;
}

void sub_207CA547C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CA550C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_207CA420C();
    v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_207CA55C4(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_207CA5598(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    sub_208216E78();
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CA55C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v9 = a4 + v7;
      v10 = (__int128 *)(a2 + v7);
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (*(_BYTE *)(a2 + v7 + 24))
      {
        if (*((char *)v10 + 23) < 0)
        {
          sub_207CA40D8((_BYTE *)(a4 + v7), *(void **)(a2 + v7), *(_QWORD *)(a2 + v7 + 8));
        }
        else
        {
          v8 = *v10;
          *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v9 = v8;
        }
        *(_BYTE *)(v9 + 24) = 1;
      }
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_207CA566C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + v2 + 24))
    sub_208216F1C(v1 + v2);
  sub_208216ED4(v1 + v2, v1);
  _Unwind_Resume(a1);
}

char *sub_207CA5698(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_207CA40D8(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207CA5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

void sub_207CA578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207CA57C8(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_207CA585C(uint64_t *result, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          if (*(_BYTE *)(v11 - 8))
          {
            v13 = *(unsigned int *)(v11 - 16);
            if ((_DWORD)v13 != -1)
              ((void (*)(char *, uint64_t))off_24C06E838[v13])(&v26, v11 - 136);
            *(_DWORD *)(v11 - 16) = -1;
          }
          v11 -= 160;
        }
        while (v11 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999)
      goto LABEL_40;
    v19 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    v20 = 2 * v19;
    if (2 * v19 <= __sz)
      v20 = __sz;
    v21 = v19 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v20;
    if (v21 > 0x199999999999999)
LABEL_40:
      sub_207CA420C();
    v22 = 160 * v21;
    v23 = (char *)operator new(160 * v21);
    *(_QWORD *)v7 = v23;
    *(_QWORD *)(v7 + 8) = v23;
    *(_QWORD *)(v7 + 16) = &v23[v22];
    result = (uint64_t *)sub_207CA4BA8(v9, v6, a3, (uint64_t)v23);
LABEL_30:
    *(_QWORD *)(v7 + 8) = result;
    return result;
  }
  v14 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 5) < __sz)
  {
    v15 = &a2[2 * ((v14 - v10) >> 5)];
    if (v14 != v10)
    {
      do
      {
        v16 = *v6;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v10 = v16;
        sub_207CA5AFC(v10 + 24, (uint64_t)v6 + 24);
        v6 += 10;
        v10 += 160;
      }
      while (v6 != v15);
      v10 = *(_QWORD *)(v7 + 8);
    }
    result = (uint64_t *)sub_207CA4BA8(v9, v15, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    v17 = *result;
    do
    {
      v18 = *v6;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v10 = v18;
      result = (uint64_t *)sub_207CA5AFC(v10 + 24, (uint64_t)v6 + 24);
      v17 += 160;
      v6 += 10;
      v10 += 160;
    }
    while (v6 != a3);
    v14 = *(_QWORD *)(v7 + 8);
    if (v14 == v17)
      goto LABEL_38;
    do
    {
LABEL_35:
      if (*(_BYTE *)(v14 - 8))
      {
        v24 = *(unsigned int *)(v14 - 16);
        if ((_DWORD)v24 != -1)
          result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_24C06E838[v24])(&v25, v14 - 136);
        *(_DWORD *)(v14 - 16) = -1;
      }
      v14 -= 160;
    }
    while (v14 != v17);
    goto LABEL_38;
  }
  v17 = *result;
  if (v14 != v10)
    goto LABEL_35;
LABEL_38:
  *(_QWORD *)(v7 + 8) = v17;
  return result;
}

void sub_207CA5AE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207CA5AEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_207CA5AFC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[2];

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C06E838[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C06EAB8[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C06E838[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_24C06E850[v6])(v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

void sub_207CA5C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v15])(&a13, v13);
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(exception_object);
}

__n128 sub_207CA5C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120))
  {
    v7[0] = *(_QWORD *)a1;
    v7[1] = a3;
    sub_207CA5D94(v7);
  }
  else
  {
    v4 = *(_OWORD *)a3;
    v5 = *(_OWORD *)(a3 + 16);
    v6 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v4;
    sub_207CA5F7C(a2 + 56, a3 + 56);
  }
  return result;
}

void sub_207CA5CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 1)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_207CA5F7C(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_207CA6158(v6);
  }
}

void sub_207CA5D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 2)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_207CA5F7C(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_207CA6344(v6);
  }
}

void sub_207CA5D94(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = off_24C06E878;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = off_24C06E878;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 0;
    nullsub_31(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_31(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 0;
  }
}

void sub_207CA5F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(_OWORD *)(a1 + 24) = v11;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    nullsub_31(a1 + 24);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    nullsub_31(a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = off_24C06E878;
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_DWORD *)(a2 + 48);
      v21 = *(_WORD *)(a2 + 52);
      do
        v22 = __ldxr(v17);
      while (__stxr(v22 + 1, v17));
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_DWORD *)(a2 + 48);
      v21 = *(_WORD *)(a2 + 52);
    }
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v16;
    v23 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v23;
    *(_QWORD *)(a1 + 40) = v19;
    *(_DWORD *)(a1 + 48) = v20;
    *(_WORD *)(a1 + 52) = v21;
    if (!v16)
      goto LABEL_31;
    v24 = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
LABEL_31:
      *(_BYTE *)(a1 + 56) = 1;
    }
  }
}

void sub_207CA6158(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = off_24C06E878;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = off_24C06E878;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 1;
    nullsub_31(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_31(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 1;
  }
}

void sub_207CA6344(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = off_24C06E878;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = off_24C06E878;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 2;
    nullsub_31(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_31(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 2;
  }
}

uint64_t sub_207CA6534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 96);
      v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        if (*(_BYTE *)(v6 - 8) && *(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_40;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(void **)(a1 + 40);
  if (v9 == v8)
    goto LABEL_39;
  v11 = v9 - 80;
  do
  {
    if (!*(_BYTE *)(v11 + 72))
      goto LABEL_29;
    v13 = *(_QWORD **)(v11 + 64);
    if ((_QWORD *)(v11 + 40) == v13)
    {
      v13 = (_QWORD *)(v11 + 40);
      v14 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_29;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
    if (*(_BYTE *)(v11 + 32))
    {
      v15 = *(_QWORD **)(v11 + 24);
      if ((_QWORD *)v11 == v15)
      {
        v15 = (_QWORD *)v11;
        v16 = 4;
        goto LABEL_34;
      }
      if (v15)
      {
        v16 = 5;
LABEL_34:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
    }
    if (*(_BYTE *)(v11 - 64) && *(char *)(v11 - 65) < 0)
      operator delete(*(void **)(v11 - 88));
    v12 = v11 - 88;
    v11 -= 168;
  }
  while (v12 != v8);
  v10 = *(void **)(a1 + 40);
LABEL_39:
  *(_QWORD *)(a1 + 48) = v8;
  operator delete(v10);
LABEL_40:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

std::__shared_weak_count_vtbl **sub_207CA66E4(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    j__CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06EAE0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CA67F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA6808(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CA6820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA6840(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CA6854(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_207CA6874(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CA68E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_207CB6FA8(a1, a2);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
  sub_207CA69B0(v4 + 48, a2 + 48);
  sub_207CA4A70((_QWORD *)(a1 + 88), (__int128 **)(a2 + 88));
  sub_207CA4A70((_QWORD *)(a1 + 112), (__int128 **)(a2 + 112));
  sub_207CA71DC(a1 + 136, a2 + 136);
  return a1;
}

void sub_207CA6960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  sub_207C9BA88(v4);
  sub_207C9BA88(v3);
  sub_207C9BB30(v2);
  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

void sub_207CA699C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA69B0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207CA6D30(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_207CA6AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA6AF0(v1);
  _Unwind_Resume(a1);
}

void sub_207CA6ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA6AF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA6AF0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_24C06E838[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_207CA6B84(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_207CA3AB8();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_207CA6D30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5)
                return result;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_207CA7058(a1, *a2, a3, (uint64_t)&v25);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v23 & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v5));
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      v24 = *(_QWORD *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6)
          v24 %= v6;
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *v25 = *v14;
  *v14 = v25;
LABEL_61:
  result = v25;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_207CA7044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA7168((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_207CA7058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *result;
  char *v9;
  uint64_t v10;
  _BYTE v11[2];

  v7 = a1 + 16;
  result = (char *)operator new(0xB8uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = a2;
  *((_QWORD *)result + 2) = *(_QWORD *)a3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)result + 5) = *(_QWORD *)(a3 + 24);
  result[48] = 0;
  result[176] = 0;
  if (*(_BYTE *)(a3 + 160))
  {
    v9 = result;
    result[48] = 0;
    *((_DWORD *)result + 42) = -1;
    v10 = *(unsigned int *)(a3 + 152);
    if ((_DWORD)v10 != -1)
    {
      result = (char *)((uint64_t (*)(_BYTE *, char *, uint64_t))off_24C06E850[v10])(v11, result + 48, a3 + 32);
      *((_DWORD *)v9 + 42) = v10;
    }
    v9[176] = 1;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_207CA7124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 168);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24C06E838[v17])(&a13, v15);
  *(_DWORD *)(v14 + 168) = -1;
  sub_207CA7168(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CA7168(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 176))
      {
        v3 = *(unsigned int *)(v2 + 168);
        if ((_DWORD)v3 != -1)
          ((void (*)(char *, uint64_t))off_24C06E838[v3])(&v5, v2 + 48);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_207CA71DC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_207CA731C(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_207CA72F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9C6E8(v1);
  _Unwind_Resume(a1);
}

void sub_207CA7308(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9C6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CA731C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_207CA7C0C(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CA7740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA776C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CA7754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA776C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CA776C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_207CA43C8(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_207CA77C0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

_QWORD *sub_207CA7C0C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_207CA7CFC((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  sub_207CA69B0((uint64_t)(__dst + 8), (uint64_t)(a2 + 4));
  v5 = *((_QWORD *)a2 + 14);
  __dst[13] = *((_QWORD *)a2 + 13);
  __dst[14] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  __dst[15] = *((_QWORD *)a2 + 15);
  return __dst;
}

void sub_207CA7CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void *v5;

  v4 = *(void ***)(v1 + 40);
  if (v4)
    sub_208216F30(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CA7CFC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207CA7E3C(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_207CA7E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

void sub_207CA7E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CA7E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_207CA40D8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CA8280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CA8294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CA82AC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_207CA82F8(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_207CA420C();
    v4 = a1[1];
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_20:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 120];
        v13 = *(_OWORD *)&v4[v9 - 104];
        v14 = *(_OWORD *)&v4[v9 - 88];
        *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
        *(_OWORD *)(v10 - 88) = v14;
        *(_OWORD *)(v10 - 104) = v13;
        *(_OWORD *)(v10 - 120) = v12;
        *(v10 - 64) = 0;
        *(v10 - 8) = 0;
        if (v4[v9 - 8])
        {
          *((_QWORD *)v10 - 8) = off_24C06E878;
          *(_OWORD *)(v10 - 56) = *(_OWORD *)(v11 - 56);
          *((_QWORD *)v11 - 7) = 0;
          *((_QWORD *)v11 - 6) = 0;
          v15 = *(_OWORD *)(v11 - 40);
          *(_OWORD *)(v10 - 26) = *(_OWORD *)(v11 - 26);
          *(_OWORD *)(v10 - 40) = v15;
          *(v10 - 8) = 1;
        }
        v9 -= 120;
      }
      while (&v4[v9] != v2);
      v16 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v16)
      {
        do
        {
          if (*(v2 - 8))
          {
            nullsub_31(v2 - 40);
            v17 = (std::__shared_weak_count *)*((_QWORD *)v2 - 6);
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(p_shared_owners);
              while (__stlxr(v19 - 1, p_shared_owners));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            nullsub_31(v2 - 64);
          }
          v2 -= 120;
        }
        while (v2 != v16);
        v2 = v16;
      }
      if (v2)
        goto LABEL_20;
    }
  }
}

char *sub_207CA84A8(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222)
    sub_207CA420C();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_207CA3AB8();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[120 * v5];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 + 48);
  v10[56] = 0;
  v10[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *((_QWORD *)v10 + 7) = off_24C06E878;
    v12 = &v9[120 * v5];
    v13 = *(_OWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *((_OWORD *)v12 + 4) = v13;
    *((_OWORD *)v12 + 5) = v14;
    *(_OWORD *)(v12 + 94) = *(_OWORD *)(a2 + 94);
    v10[112] = 1;
    v3 = *a1;
    v4 = a1[1];
  }
  v15 = &v9[120 * v8];
  v16 = v10 + 120;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3)
      return v16;
    goto LABEL_30;
  }
  v17 = 0;
  do
  {
    v18 = &v10[v17];
    v19 = &v4[v17];
    v20 = *(_OWORD *)&v4[v17 - 120];
    v21 = *(_OWORD *)&v4[v17 - 104];
    v22 = *(_OWORD *)&v4[v17 - 88];
    *((_DWORD *)v18 - 18) = *(_DWORD *)&v4[v17 - 72];
    *(_OWORD *)(v18 - 88) = v22;
    *(_OWORD *)(v18 - 104) = v21;
    *(_OWORD *)(v18 - 120) = v20;
    *(v18 - 64) = 0;
    *(v18 - 8) = 0;
    if (v4[v17 - 8])
    {
      *((_QWORD *)v18 - 8) = off_24C06E878;
      *(_OWORD *)(v18 - 56) = *(_OWORD *)(v19 - 56);
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      v23 = *(_OWORD *)(v19 - 40);
      *(_OWORD *)(v18 - 26) = *(_OWORD *)(v19 - 26);
      *(_OWORD *)(v18 - 40) = v23;
      *(v18 - 8) = 1;
    }
    v17 -= 120;
  }
  while (&v4[v17] != v3);
  v24 = *a1;
  v3 = a1[1];
  *a1 = &v10[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v3 != v24)
  {
    do
    {
      if (*(v3 - 8))
      {
        nullsub_31(v3 - 40);
        v25 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        nullsub_31(v3 - 64);
      }
      v3 -= 120;
    }
    while (v3 != v24);
    v3 = v24;
  }
  if (v3)
LABEL_30:
    operator delete(v3);
  return v16;
}

uint64_t sub_207CA86F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            nullsub_31(v3 - 40);
            v5 = *(std::__shared_weak_count **)(v3 - 48);
            if (v5)
            {
              p_shared_owners = (unint64_t *)&v5->__shared_owners_;
              do
                v7 = __ldaxr(p_shared_owners);
              while (__stlxr(v7 - 1, p_shared_owners));
              if (!v7)
              {
                ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                std::__shared_weak_count::__release_weak(v5);
              }
            }
            nullsub_31(v3 - 64);
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = off_24C06E9E8;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v8)
    return nullsub_31(a1);
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return nullsub_31(a1);
}

void sub_207CA8804(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 7)
  {
    if (a2 >> 57)
      sub_207CA420C();
    v4 = a1[1];
    v5 = a2 << 7;
    v6 = (char *)operator new(a2 << 7);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_15:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v8[v9 - 128] = 0;
        *(_DWORD *)&v8[v9 - 8] = -1;
        v10 = *(unsigned int *)&v4[v9 - 8];
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, char *, char *))off_24C06E980[v10])(&v14, &v8[v9 - 128], &v4[v9 - 128]);
          *(_DWORD *)&v8[v9 - 8] = v10;
        }
        v9 -= 128;
      }
      while (&v4[v9] != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = v2 - 128;
          v13 = *((unsigned int *)v2 - 2);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, char *))off_24C06E838[v13])(&v15, v2 - 128);
          *((_DWORD *)v2 - 2) = -1;
          v2 -= 128;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_15;
    }
  }
}

char *sub_207CA896C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_207CA420C();
  v8 = a1[2] - v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_207CA3AB8();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  *v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24C06E980[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    v3 = *a1;
    v4 = a1[1];
  }
  v13 = &v10[128 * v9];
  v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_25;
  }
  v15 = 0;
  do
  {
    v11[v15 - 128] = 0;
    *(_DWORD *)&v11[v15 - 8] = -1;
    v16 = *(unsigned int *)&v4[v15 - 8];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_24C06E980[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
      *(_DWORD *)&v11[v15 - 8] = v16;
    }
    v15 -= 128;
  }
  while (&v4[v15] != v3);
  v17 = *a1;
  v3 = a1[1];
  v14 = v11 + 128;
  *a1 = &v11[v15];
  a1[1] = v11 + 128;
  a1[2] = v13;
  if (v3 != v17)
  {
    do
    {
      v18 = v3 - 128;
      v19 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, char *))off_24C06E838[v19])(&v23, v3 - 128);
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 128;
    }
    while (v18 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v14;
}

void sub_207CA8B54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __CVBuffer *v7;
  IOSurfaceRef IOSurface;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[26];
  char v26;
  uint64_t (**v27)();
  __int128 v28;
  _OWORD v29[2];
  char v30;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    LOBYTE(v27) = 0;
    v30 = 0;
    goto LABEL_29;
  }
  v23 = off_24C06EB30;
  sub_207CA98A4(a1 + 56, (uint64_t)&v24);
  v27 = off_24C06EB30;
  v28 = v24;
  v24 = 0uLL;
  v29[0] = *(_OWORD *)v25;
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)&v25[10];
  v30 = 1;
  nullsub_31(&v23);
  if (!v30)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_30;
  }
  sub_207CA957C((uint64_t)&v27, (uint64_t)&v23);
  if (v26)
  {
    v3 = v24;
    if (*((_QWORD *)&v24 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      if (!v6)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
      }
    }
    sub_2081299D4(v3, v22);
    v7 = (__CVBuffer *)sub_20815BF0C((uint64_t)v22);
    IOSurface = CVPixelBufferGetIOSurface(v7);
    sub_20815B3F4(v22);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    if (IOSurface)
    {
      if (!v26)
        goto LABEL_30;
      *(_QWORD *)a2 = off_24C06ECD8;
      v9 = v24;
      if (*((_QWORD *)&v24 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 + 1, v10));
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v25;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v25[16];
        do
          v13 = __ldxr(v10);
        while (__stxr(v13 + 1, v10));
        *(_OWORD *)(a2 + 8) = v9;
        do
          v14 = __ldaxr(v10);
        while (__stlxr(v14 - 1, v10));
        if (!v14)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
        do
          v15 = __ldaxr(v10);
        while (__stlxr(v15 - 1, v10));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v24;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v25;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v25[16];
      }
      *(_BYTE *)(a2 + 56) = 1;
      if (!v26)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  if (v26)
  {
LABEL_42:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    nullsub_31(&v23);
  }
LABEL_30:
  if (v30)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    nullsub_31(&v27);
  }
}

void sub_207CA8E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_207CA9148((uint64_t)va);
  sub_207CA9148((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207CA8E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_207CA9148((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CA8E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_20815B3F4((uint64_t *)va);
  sub_207CA9148((uint64_t)va1);
  sub_207CA9148((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_207CA8E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_31(va);
  _Unwind_Resume(a1);
}

void sub_207CA8E98(uint64_t a1)
{
  void *__p[5];
  void *v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  __p[4] = 0;
  e5rt_surface_object_create_from_iosurface();
  LOBYTE(__p[0]) = 5;
  v3 = operator new(0x30uLL);
  v4 = xmmword_20822ABD0;
  strcpy((char *)v3, "Unable to create surface object from IOSurface");
  sub_207CB5A6C(a1, __p, (uint64_t)&v3);
  if (SHIBYTE(v4) < 0)
    operator delete(v3);
}

void sub_207CA90A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v15;
  void *v16;

  v16 = v15;
  operator delete(v16);
  nullsub_31(v14);
  sub_207C97D64(&a14);
  _Unwind_Resume(a1);
}

void sub_207CA90D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_207C97D64(&a17);
    _Unwind_Resume(a1);
  }
  sub_207C97D64(&a17);
  _Unwind_Resume(a1);
}

void sub_207CA912C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA9148(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_31(a1);
  }
  return a1;
}

void sub_207CA91B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __CVBuffer *v7;
  IOSurfaceRef IOSurface;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  uint64_t (**v24)();
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  char v30;
  uint64_t (**v31)();
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 5)
  {
    LOBYTE(v31) = 0;
    v37 = 0;
    goto LABEL_29;
  }
  v24 = off_24C06EE50;
  sub_207CAD328(a1 + 56, (uint64_t)&v25);
  v31 = off_24C06EE50;
  v32 = v25;
  v25 = 0uLL;
  v33 = v26;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  v37 = 1;
  nullsub_31(&v24);
  if (!v37)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_30;
  }
  sub_207CACFF0((uint64_t)&v31, (uint64_t)&v24);
  if (v30)
  {
    v3 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      if (!v6)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
      }
    }
    sub_20812AC30(v3, v23);
    v7 = (__CVBuffer *)sub_20815BF0C((uint64_t)v23);
    IOSurface = CVPixelBufferGetIOSurface(v7);
    sub_20815B3F4(v23);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (IOSurface)
    {
      if (!v30)
        goto LABEL_30;
      *(_QWORD *)a2 = off_24C06EF48;
      v9 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 + 1, v10));
        v13 = v27;
        *(_OWORD *)(a2 + 24) = v26;
        *(_OWORD *)(a2 + 40) = v13;
        *(_OWORD *)(a2 + 56) = v28;
        do
          v14 = __ldxr(v10);
        while (__stxr(v14 + 1, v10));
        *(_OWORD *)(a2 + 8) = v9;
        do
          v15 = __ldaxr(v10);
        while (__stlxr(v15 - 1, v10));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
        do
          v16 = __ldaxr(v10);
        while (__stlxr(v16 - 1, v10));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v25;
        *(_OWORD *)(a2 + 24) = v26;
        *(_OWORD *)(a2 + 40) = v27;
        *(_OWORD *)(a2 + 56) = v28;
      }
      *(_BYTE *)(a2 + 80) = 1;
      if (!v30)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  if (v30)
  {
LABEL_42:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    nullsub_31(&v24);
  }
LABEL_30:
  if (v37)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    nullsub_31(&v31);
  }
}

void sub_207CA94AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_207CA9514((uint64_t)va);
  sub_207CA9514((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207CA94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_207CA9514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CA94DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20815B3F4((uint64_t *)va);
  sub_207CA9514((uint64_t)va1);
  sub_207CA9514((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_207CA9500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_31(va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA9514(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_31(a1);
  }
  return a1;
}

void sub_207CA957C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *(uint64_t (****)())(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (*v4 == &off_24C08A428)
    {
      v12 = (uint64_t (**)())v4;
      *(_QWORD *)&v13 = v5;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)&v13 = 0;
      if (v16)
      {
        v8 = &v16->__shared_owners_;
        do
          v9 = __ldaxr((unint64_t *)v8);
        while (__stlxr(v9 - 1, (unint64_t *)v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v12 = 0;
    *(_QWORD *)&v13 = 0;
  }
  if (!(_QWORD)v13)
    goto LABEL_18;
  v10 = (unint64_t *)(v13 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v13 + 16))(v13);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    if (v12)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v12)
    {
LABEL_19:
      v12 = off_24C06ECD8;
      sub_207CAC3B8(a1, (uint64_t)&v13);
      *(_QWORD *)a2 = off_24C06ECD8;
      *(_OWORD *)(a2 + 8) = v13;
      v13 = 0uLL;
      *(_OWORD *)(a2 + 24) = v14[0];
      *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v14 + 9);
      *(_BYTE *)(a2 + 56) = 1;
      nullsub_31(&v12);
      return;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
}

void sub_207CA9708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_31(va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA971C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

void sub_207CA9784(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CA97F4()
{
  return 1;
}

uint64_t sub_207CA97FC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207CA9804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2081DD13C(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_207CA9820(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207CA98A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA9B20(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_207CA9AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_207CA9B20(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_207CAB8CC();
  v3 = sub_207CABE7C();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_207CA9B98("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_207CA9B98(char *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t result;
  unsigned int v12[6];
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;

  v13 = 0;
  sub_207CA9F80(v12, __s);
  v14 = v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(unsigned int ***, unsigned int *))off_24C06EC50[v13])(&v19, v12);
  v14 = v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(unsigned int ***, unsigned int *))off_24C06EC68[v13])(&v19, v12);
  v14 = v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(unsigned int ***, unsigned int *))off_24C06EC50[v13])(&v19, v12);
  v14 = v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(unsigned int ***, unsigned int *))off_24C06EC80[v13])(&v19, v12);
  sub_207CA9DFC((uint64_t)&v14, v12, a6);
  if (v13 == -1)
    sub_207CA9F48();
  v14 = (unsigned int *)&v19;
  result = ((uint64_t (*)(unsigned int **, unsigned int *))off_24C06ECB0[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(unsigned int **, unsigned int *))off_24C06EC38[v13])(&v14, v12);
  return result;
}

void sub_207CA9D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CA9DFC(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[5];
  void **v10;

  sub_208215568(v9);
  v5 = (_QWORD *)sub_208215678(v9);
  sub_208174A84(v5, a3);
  sub_208215684(v9, __p);
  sub_2082155DC(v9);
  v9[0] = a2;
  v9[1] = __p;
  v9[2] = a2;
  v9[3] = __p;
  v9[4] = __p;
  v6 = a2[6];
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v10 = v9;
  ((void (*)(void ***, unsigned int *))off_24C06EC98[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_207CA9EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CA9EF0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C06EC38[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_207CA9F48()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

_DWORD *sub_207CA9F80(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C06EC38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207CAA074(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_207CAA088(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

_QWORD *sub_207CAA110(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_207CA40D8(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_207CAA1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

void sub_207CAA1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CAA238(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C06EC38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t **sub_207CAA328(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24C06EC38[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_207CA40D8((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_207CAA3C4(uint64_t a1, uint64_t a2)
{
  sub_207CAA46C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_207CAA3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CAA5F0((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_207CA40D8(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_207CAA464(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207CAA46C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_207CA40D8(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C06EC38[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_207CAA5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207CAA5F0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_207CAA7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CAA7C4(_DWORD ***a1)
{
  return sub_207CAA7E0(**a1, (char *)(*a1)[1]);
}

void sub_207CAA7D0(uint64_t a1, uint64_t a2)
{
  sub_207CAA8D0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_207CAA7E0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C06EC38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207CAA8D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C06EC38[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207CAAA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207CAAAC8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CAABC0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207CAABB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207CAABC0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_207CAADD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CAADEC(_DWORD ***a1)
{
  return sub_207CAAE08(**a1, (char *)(*a1)[1]);
}

void sub_207CAADF8(uint64_t a1, uint64_t a2)
{
  sub_207CAAEF8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_207CAAE08(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C06EC38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207CAAEF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C06EC38[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207CAB0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207CAB0F0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CAB1E8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207CAB1E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207CAB1E8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_207CAB400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_207CAB414(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_24C06EC38[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_207CAB48C(uint64_t a1, uint64_t a2)
{
  sub_207CAB500((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_207CAB498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CA4674((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_207CAB500(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C06EC38[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_207CAB628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207CAB664(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_207CAB670@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_207CAB68C(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_207CAB69C(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_207CAB69C(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_207CAB8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_207CAB8CC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B378))
  {
    sub_207C96EE8(v7, "ConstImageView");
    v2 = sub_207CABB88();
    sub_207CABAD0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207CABAD0((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452B360, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B360, &dword_207C77000);
          __cxa_guard_release(&qword_25452B378);
          return &stru_25452B360;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452B360;
}

void sub_207CABA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452B378);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452B378);
  _Unwind_Resume(a1);
}

void sub_207CABAD0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207CABB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207CABB88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B398);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B398))
    return &stru_25452B380;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B380);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B380, &dword_207C77000);
  __cxa_guard_release(&qword_25452B398);
  return &stru_25452B380;
}

void sub_207CABC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B398);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B398);
  _Unwind_Resume(a1);
}

__int128 *sub_207CABC80()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B3B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B3B8))
    return &xmmword_25452B3A0;
  v2 = (char *)sub_207CABD5C();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452B3A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452B3B0 = *((_QWORD *)v2 + 2);
    xmmword_25452B3A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B3A0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B3B8);
  return &xmmword_25452B3A0;
}

void sub_207CABD44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B3B8);
  _Unwind_Resume(a1);
}

void *sub_207CABD5C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B3D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B3D8))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_25452B3C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B3C0, &dword_207C77000);
    __cxa_guard_release(&qword_25452B3D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452B3F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B3F8))
    return &unk_25452B3E0;
  sub_208215C6C((uint64_t)qword_25452B3C0, (uint64_t)&unk_25452B3E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452B3E0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B3F8);
  return &unk_25452B3E0;
}

void sub_207CABE4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B3F8);
  _Unwind_Resume(a1);
}

void sub_207CABE64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B3D8);
  _Unwind_Resume(a1);
}

std::string *sub_207CABE7C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B418))
  {
    sub_207C96EE8(v7, "ConstImageView");
    v2 = sub_207CAC138();
    sub_207CAC080((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207CAC080((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452B400, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B400, &dword_207C77000);
          __cxa_guard_release(&qword_25452B418);
          return &stru_25452B400;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452B400;
}

void sub_207CABFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452B418);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452B418);
  _Unwind_Resume(a1);
}

void sub_207CAC080(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207CAC11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207CAC138()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B438))
    return &stru_25452B420;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B420);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B420, &dword_207C77000);
  __cxa_guard_release(&qword_25452B438);
  return &stru_25452B420;
}

void sub_207CAC1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B438);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B438);
  _Unwind_Resume(a1);
}

uint64_t sub_207CAC230(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

void sub_207CAC298(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CAC308()
{
  return 1;
}

uint64_t sub_207CAC310(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207CAC318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2081DD13C(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_207CAC334(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207CAC3B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_207CAC500(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_207CAC4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CAC500@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != &off_24C08A428)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CAC60C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_207CAC5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_207C99D78(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_207CAC60C@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207CACA58();
  v5 = sub_207CAB8CC();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_207CAC8F4((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_207CAC8F4((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_207CAC8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CAC8F4(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t i;
  const std::string::value_type *v25;
  std::string::size_type v26;

  v10 = (a2 - a1) >> 4;
  if (v10 <= 1)
    v10 = 1;
  v11 = (v10 - 1) * a4;
  v12 = a2 - a1;
  if (a2 == a1)
  {
    v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v17 = v15 - v16;
      v14 = a1 + 16 * v17;
      v18 = (const double *)(a1 + 40);
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = v18 - 4;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v23 = (unsigned __int128)vld2q_f64(v18);
        v19 = vaddq_s64((int64x2_t)v22, v19);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      v13 = 0;
      v14 = a1;
    }
    do
    {
      v13 += *(_QWORD *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        v25 = *(const std::string::value_type **)i;
        v26 = *(_QWORD *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_207CACA34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_207CACA58()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B458);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B458))
  {
    sub_207C96EE8(v7, "ConstImageView");
    v2 = sub_207CABB88();
    sub_207CACC5C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CACD14();
    sub_207CACC5C((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452B440, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B440, &dword_207C77000);
          __cxa_guard_release(&qword_25452B458);
          return &stru_25452B440;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452B440;
}

void sub_207CACBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452B458);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452B458);
  _Unwind_Resume(a1);
}

void sub_207CACC5C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207CACCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_207CACD14()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B478))
    return &xmmword_25452B460;
  v2 = (char *)sub_207CACDF0();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452B460, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452B470 = *((_QWORD *)v2 + 2);
    xmmword_25452B460 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B460, &dword_207C77000);
  __cxa_guard_release(&qword_25452B478);
  return &xmmword_25452B460;
}

void sub_207CACDD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B478);
  _Unwind_Resume(a1);
}

void *sub_207CACDF0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B498);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B498))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_25452B480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B480, &dword_207C77000);
    __cxa_guard_release(&qword_25452B498);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452B4B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B4B8))
    return &unk_25452B4A0;
  sub_208215C6C((uint64_t)qword_25452B480, (uint64_t)&unk_25452B4A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452B4A0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B4B8);
  return &unk_25452B4A0;
}

void sub_207CACEE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B4B8);
  _Unwind_Resume(a1);
}

void sub_207CACEF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B498);
  _Unwind_Resume(a1);
}

__n128 sub_207CACF18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06EDD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CACF50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06EDD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CACF70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CACF78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CACFE4()
{
  return &unk_24C06EE30;
}

void sub_207CACFF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  _OWORD v13[4];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *(uint64_t (****)())(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (*v4 == &off_24C08A4B8)
    {
      v12 = (uint64_t (**)())v4;
      *(_QWORD *)&v13[0] = v5;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)&v13[0] = 0;
      if (v16)
      {
        v8 = &v16->__shared_owners_;
        do
          v9 = __ldaxr((unint64_t *)v8);
        while (__stlxr(v9 - 1, (unint64_t *)v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v12 = 0;
    *(_QWORD *)&v13[0] = 0;
  }
  if (!*(_QWORD *)&v13[0])
    goto LABEL_18;
  v10 = (unint64_t *)(*(_QWORD *)&v13[0] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v13[0] + 16))(*(_QWORD *)&v13[0]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v13[0]);
    if (v12)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v12)
    {
LABEL_19:
      v12 = off_24C06EF48;
      sub_207CADBDC(a1, (uint64_t)v13);
      *(_QWORD *)a2 = off_24C06EF48;
      *(_OWORD *)(a2 + 8) = v13[0];
      v13[0] = 0uLL;
      *(_OWORD *)(a2 + 24) = v13[1];
      *(_OWORD *)(a2 + 40) = v13[2];
      *(_OWORD *)(a2 + 56) = v13[3];
      *(_BYTE *)(a2 + 72) = v14;
      *(_BYTE *)(a2 + 80) = 1;
      nullsub_31(&v12);
      return;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
}

void sub_207CAD18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_31(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CAD1A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

void sub_207CAD208(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CAD278()
{
  return 5;
}

uint64_t sub_207CAD280(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_207CAD288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2081DD13C(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_207CAD2A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207CAD328(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CAD628(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_207CAD5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_207CAD628(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_207CAD6A0();
  v3 = sub_207CABE7C();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_207CA9B98("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_207CAD6A0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B4D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B4D8))
  {
    sub_207C96EE8(v7, "ConstImageView");
    v2 = sub_207CAD95C();
    sub_207CAD8A4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207CAD8A4((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452B4C0, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B4C0, &dword_207C77000);
          __cxa_guard_release(&qword_25452B4D8);
          return &stru_25452B4C0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452B4C0;
}

void sub_207CAD7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452B4D8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452B4D8);
  _Unwind_Resume(a1);
}

void sub_207CAD8A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207CAD940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207CAD95C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B4F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B4F8))
    return &stru_25452B4E0;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B4E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B4E0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B4F8);
  return &stru_25452B4E0;
}

void sub_207CADA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B4F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B4F8);
  _Unwind_Resume(a1);
}

uint64_t sub_207CADA54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

void sub_207CADABC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CADB2C()
{
  return 5;
}

uint64_t sub_207CADB34(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_207CADB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2081DD13C(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_207CADB58(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207CADBDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_207CADD24(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_207CADD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CADD24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != &off_24C08A4B8)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CADE30(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_207CADDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_207C99D78(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_207CADE30@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207CAE118();
  v5 = sub_207CAD6A0();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_207CAC8F4((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_207CAC8F4((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_207CAE0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_207CAE118()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B518);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B518))
  {
    sub_207C96EE8(v7, "ConstImageView");
    v2 = sub_207CAD95C();
    sub_207CAE31C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CACD14();
    sub_207CAE31C((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452B500, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B500, &dword_207C77000);
          __cxa_guard_release(&qword_25452B518);
          return &stru_25452B500;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452B500;
}

void sub_207CAE268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452B518);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452B518);
  _Unwind_Resume(a1);
}

void sub_207CAE31C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207CAE3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CAE3D4(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  unint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  int32x4_t v99;
  unsigned int v100;
  _BYTE *v101;
  uint32x4_t *v102;
  unsigned int v103;
  uint32x4_t *v104;
  _BYTE *v105;
  unsigned int v106;
  _BYTE *v111;
  uint32x4_t *v112;
  unsigned int v113;
  _BYTE *v114;
  uint32x4_t *v115;
  unsigned int v116;
  __int32 v117;
  uint32x4_t *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int i;
  uint32x4_t *v124;
  _BYTE *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  float v137;
  int32x4_t v138;
  unsigned int v139;
  _BYTE *v140;
  float *v141;
  int v142;
  unsigned int v143;
  float *v144;
  _BYTE *v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  __int32 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  float *v161;
  int v162;
  float *v163;
  float *v164;
  float *v165;
  float *v166;
  float *v167;
  _BYTE *v168;
  int v169;
  float *v170;
  float *v171;
  float *v172;
  float *v173;
  float *v174;
  _BYTE *v175;
  float *v176;
  float *v177;
  int v178;
  _BYTE *v179;
  int v180;
  int v181;
  float *v182;
  float *v183;
  float *v184;
  int v185;
  _BYTE *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  float *v194;
  unsigned int v195;
  int v196;
  float *v197;
  int v198;
  _BYTE *v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float *v206;
  int v207;
  float *v208;
  float *v209;
  _BYTE *v210;
  float *v211;
  float *v212;
  int v213;
  _BYTE *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float *v219;
  int v220;
  float *v221;
  float *v222;
  _BYTE *v223;
  float *v224;
  float *v225;
  unsigned int v226;
  _BYTE *v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  float *v231;
  unsigned int v232;
  _BYTE *v233;
  unsigned int v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  int32x4_t v250;
  unsigned int v251;
  int *v252;
  uint32x4_t *v253;
  unsigned int v254;
  uint32x4_t *v255;
  int *v256;
  unsigned int v257;
  int *v259;
  uint32x4_t *v260;
  unsigned int v261;
  int *v263;
  uint32x4_t *v264;
  unsigned int v265;
  __int32 v267;
  uint32x4_t *v268;
  int *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v273;
  unsigned int j;
  uint32x4_t *v277;
  int *v278;
  unsigned int v279;
  unsigned int v281;
  unsigned int v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t *v296;
  unint64_t v297;
  int32x4_t v298;
  uint64_t v299;
  uint64_t v300;
  float *v301;
  uint32x4_t *v302;
  int v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  float *v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  int v318;
  uint32x4_t v319;
  __int128 v320;
  __int128 v321;
  int v322;
  uint64_t (**v323)();
  __int128 v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  __int16 v329;
  char v330;
  uint32x4_t v331;
  __int128 v332;
  __int128 v333;
  int v334;
  uint64_t (**v335)();
  __int128 v336;
  _BYTE v337[30];
  char v338;
  unsigned int v339;
  void *__p[2];
  _OWORD v341[3];
  __int128 v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  unsigned int v346;
  uint32x4_t v347;
  __int128 v348;
  __int128 v349;
  int v350;
  uint64_t (**v351)();
  __int128 v352;
  _BYTE v353[30];
  char v354;
  uint32x4_t *v355;
  _QWORD *v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  uint32x4_t v362;
  unsigned int v363;
  unsigned int v364;
  unint64_t v365;
  unsigned int v366;
  unint64_t v367;
  unsigned int v368;
  unint64_t v369;
  unsigned int v370;
  unint64_t v371;
  _BYTE *v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  uint64_t v376;
  __int8 v377;
  __int8 v378;
  __int8 v379;
  __int8 v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;

  v345 = 0;
  v343 = 0u;
  v344 = 0u;
  v342 = 0u;
  memset(v341, 0, sizeof(v341));
  *(_OWORD *)__p = 0u;
  sub_2080A1038(__p, 0, 0, 0, 0, 0);
  memset((char *)v341 + 4, 0, 24);
  *(_QWORD *)((char *)&v341[1] + 12) = 0x1000000000;
  BYTE8(v341[2]) = 0;
  LOBYTE(v345) = 0;
  v346 = 0;
  v6 = *(_DWORD *)(a2 + 48);
  if ((~v6 & 0x11) != 0)
  {
    if ((~v6 & 0x41) != 0)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 810, (uint64_t)"", 0, (uint64_t)"Only Gray8u and Gray32f input tensors supported", 47, (void (*)(void **))sub_208216974);
      abort();
    }
    if (*(_BYTE *)(a2 + 112))
    {
      v17 = (uint64_t *)(a2 + 96);
      if (*(_BYTE *)(a2 + 108) && *(_QWORD *)(a2 + 96))
      {
        v18 = a1;
        v19 = *(_QWORD *)(a2 + 64);
        v20 = *(std::__shared_weak_count **)(a2 + 72);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v19 + 88))(v19, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v6 = *(_DWORD *)(a2 + 48);
        a1 = v18;
      }
    }
    else
    {
      v17 = (uint64_t *)(a2 + 40);
    }
    v24 = *v17;
    v362 = *(uint32x4_t *)a2;
    v363 = *(_DWORD *)(a2 + 16);
    v25 = *(_DWORD *)(a2 + 36) >> 2;
    v319 = vshrq_n_u32(*(uint32x4_t *)(a2 + 20), 2uLL);
    LODWORD(v320) = v25;
    BYTE4(v320) = 1;
    LODWORD(v372) = v6;
    sub_20809F33C(&v347, v24, &v362, &v319, &v372, a2 + 56);
    v331 = v347;
    v332 = v348;
    v333 = v349;
    v334 = v350;
    LOBYTE(v335) = 0;
    v338 = 0;
    if (v354)
    {
      v26 = a1;
      v335 = off_24C06E878;
      v27 = v352;
      v352 = 0uLL;
      v336 = v27;
      *(_OWORD *)v337 = *(_OWORD *)v353;
      *(_OWORD *)&v337[14] = *(_OWORD *)&v353[14];
      v338 = 1;
      v339 = 1;
      nullsub_31(v353);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      nullsub_31(&v351);
      a1 = v26;
      v31 = v346;
      if (v346 != -1)
        goto LABEL_39;
    }
    else
    {
      v339 = 1;
      v31 = v346;
      if (v346 != -1)
LABEL_39:
        ((void (*)(uint32x4_t *, void **))off_24C06F1A0[v31])(&v347, __p);
    }
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    v331 = *(uint32x4_t *)a2;
    v332 = v7;
    v333 = *(_OWORD *)(a2 + 32);
    v334 = *(_DWORD *)(a2 + 48);
    LOBYTE(v335) = 0;
    v338 = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v8 = a1;
      v335 = off_24C06E878;
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(std::__shared_weak_count **)(a2 + 72);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
        do
          v16 = __ldxr(v11);
        while (__stxr(v16 + 1, v11));
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
      }
      *(_QWORD *)&v336 = v9;
      *((_QWORD *)&v336 + 1) = v10;
      *(_QWORD *)v337 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)&v337[8] = *(_DWORD *)(a2 + 88);
      *(_QWORD *)&v337[16] = v13;
      *(_DWORD *)&v337[24] = v14;
      *(_WORD *)&v337[28] = v15;
      if (v10)
      {
        v32 = (unint64_t *)&v10->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v338 = 1;
      a1 = v8;
    }
    v339 = 0;
    v31 = v346;
    if (v346 != -1)
      goto LABEL_39;
  }
  if (v339 != 1)
  {
    if (v339)
      goto LABEL_402;
    v319 = v331;
    v320 = v332;
    v321 = v333;
    v322 = v334;
    LOBYTE(v323) = 0;
    v330 = 0;
    if (v338)
    {
      v323 = off_24C06E878;
      v34 = v336;
      if (*((_QWORD *)&v336 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v37 = *(_QWORD *)&v337[16];
        v38 = *(_DWORD *)&v337[24];
        v39 = *(_WORD *)&v337[28];
        do
          v40 = __ldxr(v35);
        while (__stxr(v40 + 1, v35));
      }
      else
      {
        v37 = *(_QWORD *)&v337[16];
        v38 = *(_DWORD *)&v337[24];
        v39 = *(_WORD *)&v337[28];
      }
      v324 = v34;
      v325 = *(_QWORD *)v337;
      v326 = *(_DWORD *)&v337[8];
      v327 = v37;
      v328 = v38;
      v329 = v39;
      if (*((_QWORD *)&v34 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
        }
      }
      v330 = 1;
    }
    v50 = *a3;
    if (*a3 != 2)
    {
      if (v50 == 1)
      {
        sub_207CB0D98(a3, (uint64_t)__p);
        v347 = *(uint32x4_t *)__p;
        v348 = v341[0];
        v349 = v341[1];
        v350 = v341[2];
        LOBYTE(v351) = 0;
        v354 = 0;
        if ((_BYTE)v345)
        {
          v351 = off_24C06F140;
          v58 = v342;
          if (*((_QWORD *)&v342 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
            v61 = v344;
            v62 = DWORD2(v344);
            v63 = WORD6(v344);
            do
              v64 = __ldxr(v59);
            while (__stxr(v64 + 1, v59));
          }
          else
          {
            v61 = v344;
            v62 = DWORD2(v344);
            v63 = WORD6(v344);
          }
          v352 = v58;
          *(_QWORD *)v353 = v343;
          *(_DWORD *)&v353[8] = DWORD2(v343);
          *(_QWORD *)&v353[16] = v61;
          *(_DWORD *)&v353[24] = v62;
          *(_WORD *)&v353[28] = v63;
          if (*((_QWORD *)&v58 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v58 + 1) + 16))(*((_QWORD *)&v58 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v58 + 1));
            }
          }
          v354 = 1;
        }
        sub_207CB13F8((uint64_t)&v319, (uint64_t)&v372);
        sub_207CB2EF8((uint64_t)&v347, (uint64_t)&v355);
        _S0 = *(float *)&v376;
        v99.i64[0] = __PAIR64__(v375, v373);
        v99.i64[1] = v376;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v99))) & 1) == 0 && v374)
        {
          v362.i8[12] = v377;
          v362.i8[13] = v378;
          v362.i8[14] = v379;
          v362.i8[15] = v380;
          v363 = v357;
          v362.i32[2] = v373 - 1;
          v364 = v374 - 1;
          v365 = v381 | ((unint64_t)v358 << 32);
          v362.i64[0] = 0;
          v367 = v382 | ((unint64_t)v359 << 32);
          v100 = v376 - 1;
          v366 = v375 - 1;
          v368 = v376 - 1;
          v369 = v383 | ((unint64_t)v360 << 32);
          v371 = v384 | ((unint64_t)v361 << 32);
          v101 = v372;
          v102 = v355;
          v370 = HIDWORD(v376) - 1;
          if (HIDWORD(v376) != 1)
          {
            v103 = 0;
            do
            {
              v104 = v102;
              v105 = v101;
              if (v368)
              {
                v106 = 0;
                v105 = v101;
                v104 = v102;
                do
                {
                  v111 = v105;
                  v112 = v104;
                  if (v366)
                  {
                    v113 = 0;
                    v111 = v105;
                    v112 = v104;
                    do
                    {
                      v114 = v111;
                      v115 = v112;
                      if (v364)
                      {
                        v116 = 0;
                        v114 = v111;
                        v115 = v112;
                        do
                        {
                          v117 = v362.i32[2];
                          v118 = v115;
                          v119 = v114;
                          if (v362.i32[2])
                          {
                            v120 = v362.u32[3];
                            v121 = 2 * v363;
                            v118 = v115;
                            v119 = v114;
                            do
                            {
                              LOBYTE(_S0) = *v119;
                              _S0 = (float)LODWORD(_S0);
                              __asm { FCVT            H0, S0 }
                              v118->i16[0] = LOWORD(_S0);
                              v119 += v120;
                              v118 = (uint32x4_t *)((char *)v118 + v121);
                              --v117;
                            }
                            while (v117);
                          }
                          LOBYTE(_S0) = *v119;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v118->i16[0] = LOWORD(_S0);
                          v114 += v365;
                          v115 = (uint32x4_t *)((char *)v115 + 2 * HIDWORD(v365));
                          ++v116;
                        }
                        while (v116 < v364);
                      }
                      if (v362.i32[2])
                      {
                        v122 = 0;
                        do
                        {
                          LOBYTE(_S0) = *v114;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v115->i16[0] = LOWORD(_S0);
                          v114 += v362.i32[3];
                          v115 = (uint32x4_t *)((char *)v115 + 2 * v363);
                          ++v122;
                        }
                        while (v122 < v362.i32[2]);
                      }
                      LOBYTE(_S0) = *v114;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v115->i16[0] = LOWORD(_S0);
                      v111 += v367;
                      v112 = (uint32x4_t *)((char *)v112 + 2 * HIDWORD(v367));
                      ++v113;
                    }
                    while (v113 < v366);
                  }
                  if (v364)
                  {
                    for (i = 0; i < v364; ++i)
                    {
                      v124 = v112;
                      v125 = v111;
                      if (v362.i32[2])
                      {
                        v126 = 0;
                        v125 = v111;
                        v124 = v112;
                        do
                        {
                          LOBYTE(_S0) = *v125;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v124->i16[0] = LOWORD(_S0);
                          v125 += v362.i32[3];
                          v124 = (uint32x4_t *)((char *)v124 + 2 * v363);
                          ++v126;
                        }
                        while (v126 < v362.i32[2]);
                      }
                      LOBYTE(_S0) = *v125;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v124->i16[0] = LOWORD(_S0);
                      v111 += v365;
                      v112 = (uint32x4_t *)((char *)v112 + 2 * HIDWORD(v365));
                    }
                  }
                  if (v362.i32[2])
                  {
                    v127 = 0;
                    do
                    {
                      LOBYTE(_S0) = *v111;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v112->i16[0] = LOWORD(_S0);
                      v111 += v362.i32[3];
                      v112 = (uint32x4_t *)((char *)v112 + 2 * v363);
                      ++v127;
                    }
                    while (v127 < v362.i32[2]);
                  }
                  LOBYTE(_S0) = *v111;
                  _S0 = (float)LODWORD(_S0);
                  __asm { FCVT            H0, S0 }
                  v112->i16[0] = LOWORD(_S0);
                  v105 += v369;
                  v104 = (uint32x4_t *)((char *)v104 + 2 * HIDWORD(v369));
                  ++v106;
                }
                while (v106 < v368);
              }
              LODWORD(_S0) = sub_207CB30B8(&v362, v105, v104, _S0);
              v101 += v371;
              v102 = (uint32x4_t *)((char *)v102 + 2 * HIDWORD(v371));
              ++v103;
            }
            while (v103 < v370);
            v100 = v368;
          }
          if (v100)
          {
            v128 = 0;
            do
            {
              LODWORD(_S0) = sub_207CB30B8(&v362, v101, v102, _S0);
              v101 += v369;
              v102 = (uint32x4_t *)((char *)v102 + 2 * HIDWORD(v369));
              ++v128;
            }
            while (v128 < v368);
          }
          sub_207CB30B8(&v362, v101, v102, _S0);
        }
        if (v354)
        {
          nullsub_31(v353);
          v129 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          nullsub_31(&v351);
        }
        if (!(_BYTE)v345)
          goto LABEL_287;
        nullsub_31(&v343);
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
        if (!*((_QWORD *)&v342 + 1))
          goto LABEL_286;
        v133 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
      }
      else
      {
        if (v50)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 850, (uint64_t)"", 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_208216974);
          abort();
        }
        sub_207CB0AA4(a3, (uint64_t)__p);
        v347 = *(uint32x4_t *)__p;
        v348 = v341[0];
        v349 = v341[1];
        v350 = v341[2];
        LOBYTE(v351) = 0;
        v354 = 0;
        if ((_BYTE)v345)
        {
          v351 = off_24C06F140;
          v51 = v342;
          if (*((_QWORD *)&v342 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
            v54 = v344;
            v55 = DWORD2(v344);
            v56 = WORD6(v344);
            do
              v57 = __ldxr(v52);
            while (__stxr(v57 + 1, v52));
          }
          else
          {
            v54 = v344;
            v55 = DWORD2(v344);
            v56 = WORD6(v344);
          }
          v352 = v51;
          *(_QWORD *)v353 = v343;
          *(_DWORD *)&v353[8] = DWORD2(v343);
          *(_QWORD *)&v353[16] = v54;
          *(_DWORD *)&v353[24] = v55;
          *(_WORD *)&v353[28] = v56;
          if (*((_QWORD *)&v51 + 1))
          {
            v239 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
            if (!v240)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
            }
          }
          v354 = 1;
        }
        sub_207CB13F8((uint64_t)&v319, (uint64_t)&v362);
        sub_207CB15B8((uint64_t)&v347, (uint64_t)&v372);
        v355 = &v362;
        v356 = &v372;
        sub_207CB1778((size_t *)&v355);
        if (v354)
        {
          nullsub_31(v353);
          v241 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v242 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
          nullsub_31(&v351);
        }
        if (!(_BYTE)v345)
          goto LABEL_287;
        nullsub_31(&v343);
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
        if (!*((_QWORD *)&v342 + 1))
        {
LABEL_286:
          nullsub_31((char *)&v341[2] + 8);
LABEL_287:
          if (!v330)
            goto LABEL_402;
          nullsub_31(&v325);
          v245 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
          if (!*((_QWORD *)&v324 + 1))
            goto LABEL_401;
          v246 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          goto LABEL_399;
        }
        v244 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v134 = __ldaxr(v244);
        while (__stlxr(v134 - 1, v244));
      }
LABEL_284:
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      goto LABEL_286;
    }
    sub_207CB1090(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = off_24C06F140;
      v65 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = v344;
        v69 = DWORD2(v344);
        v70 = WORD6(v344);
        do
          v71 = __ldxr(v66);
        while (__stxr(v71 + 1, v66));
      }
      else
      {
        v68 = v344;
        v69 = DWORD2(v344);
        v70 = WORD6(v344);
      }
      v352 = v65;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v68;
      *(_DWORD *)&v353[24] = v69;
      *(_WORD *)&v353[28] = v70;
      if (*((_QWORD *)&v65 + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
        }
      }
      v354 = 1;
    }
    sub_207CB13F8((uint64_t)&v319, (uint64_t)&v372);
    sub_207CB329C((uint64_t)&v347, (uint64_t)&v355);
    v137 = *(float *)&v376;
    v138.i64[0] = __PAIR64__(v375, v373);
    v138.i64[1] = v376;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v138))) & 1) != 0 || !v374)
    {
LABEL_254:
      if (v354)
      {
        nullsub_31(v353);
        v235 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
        if (*((_QWORD *)&v352 + 1))
        {
          v236 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        nullsub_31(&v351);
      }
      if (!(_BYTE)v345)
        goto LABEL_287;
      nullsub_31(&v343);
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
      if (!*((_QWORD *)&v342 + 1))
        goto LABEL_286;
      v238 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v134 = __ldaxr(v238);
      while (__stlxr(v134 - 1, v238));
      goto LABEL_284;
    }
    v362.i8[12] = v377;
    v362.i8[13] = v378;
    v362.i8[14] = v379;
    v362.i8[15] = v380;
    v363 = v357;
    v362.i32[2] = v373 - 1;
    v364 = v374 - 1;
    v365 = v381 | ((unint64_t)v358 << 32);
    v362.i64[0] = 0;
    v367 = v382 | ((unint64_t)v359 << 32);
    v139 = v376 - 1;
    v366 = v375 - 1;
    v368 = v376 - 1;
    v369 = v383 | ((unint64_t)v360 << 32);
    v371 = v384 | ((unint64_t)v361 << 32);
    v140 = v372;
    v141 = (float *)v355;
    v370 = HIDWORD(v376) - 1;
    if (HIDWORD(v376) == 1)
    {
LABEL_250:
      if (v139)
      {
        v234 = 0;
        do
        {
          v137 = sub_207CB345C(&v362, v140, v141, v137);
          v140 += v369;
          v141 += HIDWORD(v369);
          ++v234;
        }
        while (v234 < v368);
      }
      sub_207CB345C(&v362, v140, v141, v137);
      goto LABEL_254;
    }
    v311 = a1;
    v142 = 0;
    while (1)
    {
      v312 = v142;
      v143 = v368;
      v313 = v141;
      v314 = v140;
      v144 = v141;
      v145 = v140;
      if (v368)
        break;
LABEL_189:
      v137 = sub_207CB345C(&v362, v145, v144, v137);
      v140 = &v314[v371];
      v141 = &v313[HIDWORD(v371)];
      v142 = v312 + 1;
      if (v312 + 1 >= v370)
      {
        v139 = v368;
        a1 = v311;
        goto LABEL_250;
      }
    }
    v146 = v366;
    v147 = v369;
    v148 = v364;
    v149 = v362.i32[2];
    if (v366)
    {
      v151 = v367;
      v150 = HIDWORD(v367);
      v145 = v314;
      if (v364)
      {
        v152 = v365;
        v153 = 0;
        if (v362.i32[2])
        {
          v315 = 4 * HIDWORD(v369);
          v316 = v369;
          v154 = v362.u32[3];
          v155 = HIDWORD(v367);
          v156 = 4 * HIDWORD(v365);
          v157 = 4 * v363;
          v158 = &v141[(unint64_t)v156 / 4];
          v159 = &v141[v155];
          v160 = &v141[HIDWORD(v367) + (unint64_t)HIDWORD(v365)];
          v161 = &v141[(unint64_t)v156 / 4 + v155];
          v144 = v141;
          v317 = v368;
          do
          {
            v318 = v153;
            v162 = 0;
            v163 = v161;
            v164 = v160;
            v165 = v159;
            v166 = v158;
            v167 = v144;
            v168 = v145;
            do
            {
              v169 = 0;
              v170 = v165;
              v171 = v164;
              v172 = v163;
              v173 = v166;
              v174 = v167;
              v175 = v168;
              do
              {
                v176 = v173;
                v177 = v174;
                v178 = v149;
                v179 = v175;
                do
                {
                  LOBYTE(v137) = *v179;
                  v137 = (float)LODWORD(v137);
                  *v177 = v137;
                  v179 += v154;
                  v177 = (float *)((char *)v177 + v157);
                  --v178;
                }
                while (v178);
                LOBYTE(v137) = *v179;
                v137 = (float)LODWORD(v137);
                *v177 = v137;
                v175 += v152;
                v174 = (float *)((char *)v174 + v156);
                ++v169;
                v173 = &v176[(unint64_t)v156 / 4];
              }
              while (v169 != v148);
              v180 = v149;
              do
              {
                LOBYTE(v137) = *v175;
                v137 = (float)LODWORD(v137);
                *v176 = v137;
                v175 += v154;
                v176 = (float *)((char *)v176 + v157);
                --v180;
              }
              while (v180);
              LOBYTE(v137) = *v175;
              v168 += v151;
              v167 = (float *)((char *)v167 + v155 * 4);
              ++v162;
              v166 = (float *)((char *)v166 + v155 * 4);
              v137 = (float)LODWORD(v137);
              *v176 = v137;
              v165 = &v170[v155];
              v164 = &v171[v155];
              v163 = &v172[v155];
            }
            while (v162 != v146);
            v181 = 0;
            do
            {
              v182 = v171;
              v183 = v172;
              v184 = v170;
              v185 = v149;
              v186 = v168;
              do
              {
                LOBYTE(v137) = *v186;
                v137 = (float)LODWORD(v137);
                *v184 = v137;
                v186 += v154;
                v184 = (float *)((char *)v184 + v157);
                --v185;
              }
              while (v185);
              LOBYTE(v137) = *v186;
              v137 = (float)LODWORD(v137);
              *v184 = v137;
              v168 += v152;
              v170 = (float *)((char *)v170 + v156);
              ++v181;
              v171 = (float *)((char *)v171 + v156);
              v172 = (float *)((char *)v172 + v156);
            }
            while (v181 != v148);
            v187 = v149;
            do
            {
              LOBYTE(v137) = *v168;
              v137 = (float)LODWORD(v137);
              *v183 = v137;
              v168 += v154;
              v182 = (float *)((char *)v182 + v157);
              v183 = (float *)((char *)v183 + v157);
              --v187;
            }
            while (v187);
            LOBYTE(v137) = *v168;
            v145 += v316;
            v144 = (float *)((char *)v144 + v315);
            v153 = v318 + 1;
            v158 = (float *)((char *)v158 + v315);
            v137 = (float)LODWORD(v137);
            *v182 = v137;
            v159 = (float *)((char *)v159 + v315);
            v160 = (float *)((char *)v160 + v315);
            v161 = (float *)((char *)v161 + v315);
          }
          while (v318 + 1 != v317);
        }
        else
        {
          v216 = 4 * HIDWORD(v369);
          v217 = HIDWORD(v367);
          v218 = 4 * HIDWORD(v365);
          v219 = &v141[v217];
          v144 = v141;
          do
          {
            v220 = 0;
            v221 = v219;
            v222 = v144;
            v223 = v145;
            do
            {
              v224 = v221;
              v225 = v222;
              v226 = v148;
              v227 = v223;
              do
              {
                LOBYTE(v137) = *v227;
                v137 = (float)LODWORD(v137);
                *v225 = v137;
                v227 += v152;
                v225 = (float *)((char *)v225 + v218);
                --v226;
              }
              while (v226);
              LOBYTE(v137) = *v227;
              v137 = (float)LODWORD(v137);
              *v225 = v137;
              v223 += v151;
              v222 = (float *)((char *)v222 + v217 * 4);
              ++v220;
              v221 = &v224[v217];
            }
            while (v220 != v146);
            v228 = v148;
            do
            {
              LOBYTE(v137) = *v223;
              v137 = (float)LODWORD(v137);
              *v224 = v137;
              v223 += v152;
              v224 = (float *)((char *)v224 + v218);
              --v228;
            }
            while (v228);
            LOBYTE(v137) = *v223;
            v137 = (float)LODWORD(v137);
            *v224 = v137;
            v145 += v147;
            v144 = (float *)((char *)v144 + v216);
            ++v153;
            v219 = (float *)((char *)v219 + v216);
          }
          while (v153 != v143);
        }
      }
      else if (v362.i32[2])
      {
        v201 = 0;
        v202 = 4 * HIDWORD(v369);
        v203 = HIDWORD(v367);
        v204 = v362.u32[3];
        v205 = 4 * v363;
        v206 = &v141[v203];
        v144 = v141;
        do
        {
          v207 = 0;
          v208 = v206;
          v209 = v144;
          v210 = v145;
          do
          {
            v211 = v208;
            v212 = v209;
            v213 = v149;
            v214 = v210;
            do
            {
              LOBYTE(v137) = *v214;
              v137 = (float)LODWORD(v137);
              *v212 = v137;
              v214 += v204;
              v212 = (float *)((char *)v212 + v205);
              --v213;
            }
            while (v213);
            LOBYTE(v137) = *v214;
            v137 = (float)LODWORD(v137);
            *v212 = v137;
            v210 += v151;
            v209 = (float *)((char *)v209 + v203 * 4);
            ++v207;
            v208 = &v211[v203];
          }
          while (v207 != v146);
          v215 = v149;
          do
          {
            LOBYTE(v137) = *v210;
            v137 = (float)LODWORD(v137);
            *v211 = v137;
            v210 += v204;
            v211 = (float *)((char *)v211 + v205);
            --v215;
          }
          while (v215);
          LOBYTE(v137) = *v210;
          v137 = (float)LODWORD(v137);
          *v211 = v137;
          v145 += v147;
          v144 = (float *)((char *)v144 + v202);
          ++v201;
          v206 = (float *)((char *)v206 + v202);
        }
        while (v201 != v143);
      }
      else
      {
        v229 = 0;
        v230 = 4 * HIDWORD(v369);
        v144 = v141;
        do
        {
          v231 = v144;
          v232 = v146;
          v233 = v145;
          do
          {
            LOBYTE(v137) = *v233;
            v137 = (float)LODWORD(v137);
            *v231 = v137;
            v233 += v151;
            v231 += v150;
            --v232;
          }
          while (v232);
          LOBYTE(v137) = *v233;
          v137 = (float)LODWORD(v137);
          *v231 = v137;
          v145 += v147;
          v144 = (float *)((char *)v144 + v230);
          ++v229;
        }
        while (v229 != v143);
      }
      goto LABEL_189;
    }
    v188 = v365;
    v189 = 4 * HIDWORD(v369);
    v190 = v362.u32[3];
    v191 = 4 * HIDWORD(v365);
    v192 = 4 * v363;
    v144 = v141;
    v145 = v314;
    while (1)
    {
      v193 = v145;
      v194 = v144;
      if (!v148)
        goto LABEL_219;
      v194 = v144;
      v195 = v148;
      v193 = v145;
      if (v149)
        break;
      do
      {
        LOBYTE(v137) = *v193;
        v137 = (float)LODWORD(v137);
        *v194 = v137;
        v193 += v188;
        v194 = (float *)((char *)v194 + v191);
        --v195;
      }
      while (v195);
LABEL_212:
      LOBYTE(v137) = *v193;
      v137 = (float)LODWORD(v137);
      *v194 = v137;
      v145 += v147;
      v144 = (float *)((char *)v144 + v189);
      if (++v146 == v143)
        goto LABEL_189;
    }
    v196 = 0;
    v194 = v144;
    v193 = v145;
    do
    {
      v197 = v194;
      v198 = v149;
      v199 = v193;
      do
      {
        LOBYTE(v137) = *v199;
        v137 = (float)LODWORD(v137);
        *v197 = v137;
        v199 += v190;
        v197 = (float *)((char *)v197 + v192);
        --v198;
      }
      while (v198);
      LOBYTE(v137) = *v199;
      v137 = (float)LODWORD(v137);
      *v197 = v137;
      v193 += v188;
      v194 = (float *)((char *)v194 + v191);
      ++v196;
    }
    while (v196 != v148);
LABEL_219:
    if (v149)
    {
      v200 = v149;
      do
      {
        LOBYTE(v137) = *v193;
        v137 = (float)LODWORD(v137);
        *v194 = v137;
        v193 += v190;
        v194 = (float *)((char *)v194 + v192);
        --v200;
      }
      while (v200);
    }
    goto LABEL_212;
  }
  v319 = v331;
  v320 = v332;
  v321 = v333;
  v322 = v334;
  LOBYTE(v323) = 0;
  v330 = 0;
  if (v338)
  {
    v323 = off_24C06E878;
    v41 = v336;
    if (*((_QWORD *)&v336 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v44 = *(_QWORD *)&v337[16];
      v45 = *(_DWORD *)&v337[24];
      v46 = *(_WORD *)&v337[28];
      do
        v47 = __ldxr(v42);
      while (__stxr(v47 + 1, v42));
    }
    else
    {
      v44 = *(_QWORD *)&v337[16];
      v45 = *(_DWORD *)&v337[24];
      v46 = *(_WORD *)&v337[28];
    }
    v324 = v41;
    v325 = *(_QWORD *)v337;
    v326 = *(_DWORD *)&v337[8];
    v327 = v44;
    v328 = v45;
    v329 = v46;
    if (*((_QWORD *)&v41 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v41 + 1));
      }
    }
    v330 = 1;
  }
  v74 = *a3;
  if (*a3)
  {
    if (v74 != 2)
      goto LABEL_96;
LABEL_107:
    sub_207CB1090(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = off_24C06F140;
      v82 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        v85 = v344;
        v86 = DWORD2(v344);
        v87 = WORD6(v344);
        do
          v88 = __ldxr(v83);
        while (__stxr(v88 + 1, v83));
      }
      else
      {
        v85 = v344;
        v86 = DWORD2(v344);
        v87 = WORD6(v344);
      }
      v352 = v82;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v85;
      *(_DWORD *)&v353[24] = v86;
      *(_WORD *)&v353[28] = v87;
      if (*((_QWORD *)&v82 + 1))
      {
        v290 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 - 1, v290));
        if (!v291)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
        }
      }
      v354 = 1;
    }
    sub_207CB36E8((uint64_t)&v319, (uint64_t)&v362);
    sub_207CB329C((uint64_t)&v347, (uint64_t)&v372);
    v355 = &v362;
    v356 = &v372;
    sub_207CB3CE4((uint64_t *)&v355);
    if (v354)
    {
      nullsub_31(v353);
      v292 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v293 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
      nullsub_31(&v351);
    }
    if (!(_BYTE)v345)
      goto LABEL_395;
    nullsub_31(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (!*((_QWORD *)&v342 + 1))
      goto LABEL_394;
    v295 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v289 = __ldaxr(v295);
    while (__stlxr(v289 - 1, v295));
LABEL_392:
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
    goto LABEL_394;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 863, (uint64_t)"buffer.data_type != BufferDataType::Uint8", 41, (uint64_t)"Copy from float to uint8 buffer is not allowed", 46, (void (*)(void **))sub_208216974))
  {
    goto LABEL_411;
  }
  v74 = *a3;
  if (*a3 == 2)
    goto LABEL_107;
LABEL_96:
  if (v74 == 1)
  {
    sub_207CB0D98(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = off_24C06F140;
      v89 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v92 = v344;
        v93 = DWORD2(v344);
        v94 = WORD6(v344);
        do
          v95 = __ldxr(v90);
        while (__stxr(v95 + 1, v90));
      }
      else
      {
        v92 = v344;
        v93 = DWORD2(v344);
        v94 = WORD6(v344);
      }
      v352 = v89;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v92;
      *(_DWORD *)&v353[24] = v93;
      *(_WORD *)&v353[28] = v94;
      if (*((_QWORD *)&v89 + 1))
      {
        v248 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v89 + 1) + 16))(*((_QWORD *)&v89 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
        }
      }
      v354 = 1;
    }
    sub_207CB36E8((uint64_t)&v319, (uint64_t)&v372);
    sub_207CB2EF8((uint64_t)&v347, (uint64_t)&v355);
    v250.i64[0] = __PAIR64__(v375, v373);
    v250.i64[1] = v376;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v250))) & 1) == 0 && v374)
    {
      v362.i8[12] = v377;
      v362.i8[13] = v378;
      v362.i8[14] = v379;
      v362.i8[15] = v380;
      v363 = v357;
      v362.i32[2] = v373 - 1;
      v364 = v374 - 1;
      v365 = v381 | ((unint64_t)v358 << 32);
      v362.i64[0] = 0;
      v367 = v382 | ((unint64_t)v359 << 32);
      v251 = v376 - 1;
      v366 = v375 - 1;
      v368 = v376 - 1;
      v369 = v383 | ((unint64_t)v360 << 32);
      v371 = v384 | ((unint64_t)v361 << 32);
      v252 = (int *)v372;
      v253 = v355;
      v370 = HIDWORD(v376) - 1;
      if (HIDWORD(v376) != 1)
      {
        v254 = 0;
        do
        {
          v255 = v253;
          v256 = v252;
          if (v368)
          {
            v257 = 0;
            v256 = v252;
            v255 = v253;
            do
            {
              v259 = v256;
              v260 = v255;
              if (v366)
              {
                v261 = 0;
                v259 = v256;
                v260 = v255;
                do
                {
                  v263 = v259;
                  v264 = v260;
                  if (v364)
                  {
                    v265 = 0;
                    v263 = v259;
                    v264 = v260;
                    do
                    {
                      v267 = v362.i32[2];
                      v268 = v264;
                      v269 = v263;
                      if (v362.i32[2])
                      {
                        v270 = 4 * v362.u32[3];
                        v271 = 2 * v363;
                        v268 = v264;
                        v269 = v263;
                        do
                        {
                          _S0 = *v269;
                          __asm { FCVT            H0, S0 }
                          v268->i16[0] = _S0;
                          v269 = (int *)((char *)v269 + v270);
                          v268 = (uint32x4_t *)((char *)v268 + v271);
                          --v267;
                        }
                        while (v267);
                      }
                      _S0 = *v269;
                      __asm { FCVT            H0, S0 }
                      v268->i16[0] = _S0;
                      v263 += v365;
                      v264 = (uint32x4_t *)((char *)v264 + 2 * HIDWORD(v365));
                      ++v265;
                    }
                    while (v265 < v364);
                  }
                  if (v362.i32[2])
                  {
                    v273 = 0;
                    do
                    {
                      _S0 = *v263;
                      __asm { FCVT            H0, S0 }
                      v264->i16[0] = _S0;
                      v263 += v362.u32[3];
                      v264 = (uint32x4_t *)((char *)v264 + 2 * v363);
                      ++v273;
                    }
                    while (v273 < v362.i32[2]);
                  }
                  _S0 = *v263;
                  __asm { FCVT            H0, S0 }
                  v264->i16[0] = _S0;
                  v259 += v367;
                  v260 = (uint32x4_t *)((char *)v260 + 2 * HIDWORD(v367));
                  ++v261;
                }
                while (v261 < v366);
              }
              if (v364)
              {
                for (j = 0; j < v364; ++j)
                {
                  v277 = v260;
                  v278 = v259;
                  if (v362.i32[2])
                  {
                    v279 = 0;
                    v278 = v259;
                    v277 = v260;
                    do
                    {
                      _S0 = *v278;
                      __asm { FCVT            H0, S0 }
                      v277->i16[0] = _S0;
                      v278 += v362.u32[3];
                      v277 = (uint32x4_t *)((char *)v277 + 2 * v363);
                      ++v279;
                    }
                    while (v279 < v362.i32[2]);
                  }
                  _S0 = *v278;
                  __asm { FCVT            H0, S0 }
                  v277->i16[0] = _S0;
                  v259 += v365;
                  v260 = (uint32x4_t *)((char *)v260 + 2 * HIDWORD(v365));
                }
              }
              if (v362.i32[2])
              {
                v281 = 0;
                do
                {
                  _S0 = *v259;
                  __asm { FCVT            H0, S0 }
                  v260->i16[0] = _S0;
                  v259 += v362.u32[3];
                  v260 = (uint32x4_t *)((char *)v260 + 2 * v363);
                  ++v281;
                }
                while (v281 < v362.i32[2]);
              }
              _S0 = *v259;
              __asm { FCVT            H0, S0 }
              v260->i16[0] = _S0;
              v256 += v369;
              v255 = (uint32x4_t *)((char *)v255 + 2 * HIDWORD(v369));
              ++v257;
            }
            while (v257 < v368);
          }
          sub_207CB3B20(&v362, v256, v255);
          v252 += v371;
          v253 = (uint32x4_t *)((char *)v253 + 2 * HIDWORD(v371));
          ++v254;
        }
        while (v254 < v370);
        v251 = v368;
      }
      if (v251)
      {
        v283 = 0;
        do
        {
          sub_207CB3B20(&v362, v252, v253);
          v252 += v369;
          v253 = (uint32x4_t *)((char *)v253 + 2 * HIDWORD(v369));
          ++v283;
        }
        while (v283 < v368);
      }
      sub_207CB3B20(&v362, v252, v253);
    }
    if (v354)
    {
      nullsub_31(v353);
      v284 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v285 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v286 = __ldaxr(v285);
        while (__stlxr(v286 - 1, v285));
        if (!v286)
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
      }
      nullsub_31(&v351);
    }
    if (!(_BYTE)v345)
      goto LABEL_395;
    nullsub_31(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (!*((_QWORD *)&v342 + 1))
      goto LABEL_394;
    v288 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    goto LABEL_392;
  }
  if (v74)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 850, (uint64_t)"", 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_208216974);
LABEL_411:
    abort();
  }
  sub_207CB0AA4(a3, (uint64_t)__p);
  v347 = *(uint32x4_t *)__p;
  v348 = v341[0];
  v349 = v341[1];
  v350 = v341[2];
  LOBYTE(v351) = 0;
  v354 = 0;
  if ((_BYTE)v345)
  {
    v351 = off_24C06F140;
    v75 = v342;
    if (*((_QWORD *)&v342 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      v78 = v344;
      v79 = DWORD2(v344);
      v80 = WORD6(v344);
      do
        v81 = __ldxr(v76);
      while (__stxr(v81 + 1, v76));
    }
    else
    {
      v78 = v344;
      v79 = DWORD2(v344);
      v80 = WORD6(v344);
    }
    v352 = v75;
    *(_QWORD *)v353 = v343;
    *(_DWORD *)&v353[8] = DWORD2(v343);
    *(_QWORD *)&v353[16] = v78;
    *(_DWORD *)&v353[24] = v79;
    *(_WORD *)&v353[28] = v80;
    if (*((_QWORD *)&v75 + 1))
    {
      v296 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    v354 = 1;
  }
  sub_207CB36E8((uint64_t)&v319, (uint64_t)&v372);
  sub_207CB15B8((uint64_t)&v347, (uint64_t)&v355);
  v298.i64[0] = __PAIR64__(v375, v373);
  v298.i64[1] = v376;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v298))) & 1) == 0 && v374)
  {
    v299 = a1;
    v362.i8[12] = v377;
    v362.i8[13] = v378;
    v362.i8[14] = v379;
    v362.i8[15] = v380;
    v363 = v357;
    v362.i32[2] = v373 - 1;
    v364 = v374 - 1;
    v365 = v381 | ((unint64_t)v358 << 32);
    v362.i64[0] = 0;
    v367 = v382 | ((unint64_t)v359 << 32);
    v366 = v375 - 1;
    v368 = v376 - 1;
    v369 = v383 | ((unint64_t)v360 << 32);
    v300 = v361;
    v371 = v384 | ((unint64_t)v361 << 32);
    v301 = (float *)v372;
    v302 = v355;
    v303 = HIDWORD(v376) - 1;
    v370 = HIDWORD(v376) - 1;
    if (HIDWORD(v376) != 1)
    {
      v304 = 4 * v384;
      do
      {
        sub_207CB38A8(&v362, v301, v302);
        v302 = (uint32x4_t *)((char *)v302 + v300);
        v301 = (float *)((char *)v301 + v304);
        --v303;
      }
      while (v303);
    }
    sub_207CB38A8(&v362, v301, v302);
    a1 = v299;
  }
  if (v354)
  {
    nullsub_31(v353);
    v305 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (*((_QWORD *)&v352 + 1))
    {
      v306 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }
    nullsub_31(&v351);
  }
  if ((_BYTE)v345)
  {
    nullsub_31(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (*((_QWORD *)&v342 + 1))
    {
      v308 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v289 = __ldaxr(v308);
      while (__stlxr(v289 - 1, v308));
      goto LABEL_392;
    }
LABEL_394:
    nullsub_31((char *)&v341[2] + 8);
  }
LABEL_395:
  if (!v330)
    goto LABEL_402;
  nullsub_31(&v325);
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v309 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v247 = __ldaxr(v309);
    while (__stlxr(v247 - 1, v309));
LABEL_399:
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
LABEL_401:
  nullsub_31(&v323);
LABEL_402:
  v347.i8[0] = 0;
  BYTE7(v341[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_207CB5A6C(a1, &v347, (uint64_t)__p);
  if (SBYTE7(v341[0]) < 0)
  {
    operator delete(__p[0]);
    v310 = v339;
    if (v339 == -1)
      return;
  }
  else
  {
    v310 = v339;
    if (v339 == -1)
      return;
  }
  ((void (*)(void **, uint32x4_t *))off_24C06F1A0[v310])(__p, &v331);
}

void sub_207CB02F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_207CB0A4C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_207CB0304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB03B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB03E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_207CA140C((uint64_t)&a65);
  sub_207CA140C((uint64_t)&a49);
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB0428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_207CB0A4C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_207CB043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_207CB0A4C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_207CB0458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_207CA140C((uint64_t)&a17);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_207CB0474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  sub_207CB0A4C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_207CB0498(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      v2 = *(unsigned int *)(a1 + 144);
      if ((_DWORD)v2 != -1)
        ((void (*)(char *, uint64_t))off_24C06E838[v2])(&v4, a1 + 24);
      *(_DWORD *)(a1 + 144) = -1;
    }
    return a1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
}

__n128 sub_207CB052C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F040;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB0564(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F040;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB0584(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB058C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB05F8()
{
  return &unk_24C06F0A0;
}

__n128 sub_207CB060C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F0C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB0644(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F0C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB0664(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB066C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB06D8()
{
  return &unk_24C06F120;
}

char *sub_207CB06E4(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_QWORD *)v11 + 2) == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_DWORD *)v11 + 6) = 3;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  v11[48] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_207CB0A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA7168((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CB0A4C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C06F1A0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

_QWORD *sub_207CB0AA4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24C06E8E8;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C96058(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809F340(a2, v25, v15, &v12, &unk_208266D38, v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v27)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CB0D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB0D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB0D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB0D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB0D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB0D7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CB0D98@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _DWORD v15[10];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v21 = 0;
  v22 = 0;
  e5rt_tensor_desc_get_shape();
  v20 = 0;
  e5rt_tensor_desc_get_strides();
  v19 = 0;
  e5rt_tensor_desc_retain_dtype();
  v24[0] = &off_24C06E8E8;
  v24[1] = MEMORY[0x24BE2FA68];
  v24[2] = &v19;
  v25 = v24;
  v18 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v17 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v16 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C9624C(v22, v21, v20, 0, 0, (uint64_t)v15);
  v12 = *(_OWORD *)&v15[5];
  v13 = v15[9];
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809E7AC(a2, v23, (__int128 *)v15, &v12, dword_208266D40, (uint64_t)v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v25)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v25 + 48))(v25);
  result = v25;
  if (v25 == v24)
  {
    v7 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CB1008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1024(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB104C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1060(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1074(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CB1090@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24C06E8E8;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_207C96464(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_20809F340(a2, v25, v15, &v12, &unk_208266D30, v8);
  if (v11)
  {
    nullsub_31(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_31(v8);
  }
  if (!v27)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_207CB1300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C18((uint64_t)&a9);
  sub_207C97D64((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB131C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1330(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1344(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB1358(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C97D64((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_207CB136C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CB1388(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_31(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_31(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_31(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_31(a1);
}

uint64_t sub_207CB13F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

uint64_t sub_207CB15B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

size_t *sub_207CB1778(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  size_t v10;
  int var1;

  v1 = *result;
  v2 = result[1];
  if (*(_DWORD *)(*result + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
        return sub_207CB183C(result);
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_207CB2398(&v10, v1, v2);
  }
  else
  {
    LOBYTE(var1) = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24))
        return (size_t *)sub_207CB2898(&var1, v1, v2);
    }
  }
  return result;
}

size_t *sub_207CB183C(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  size_t v14;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
        return sub_207CB192C(result);
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 16);
    }
    v9 = *(_DWORD *)(v1 + 8);
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_207CB1BC4(&v14, (char **)v1, (char **)v2);
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 8);
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(_QWORD *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return (size_t *)sub_207CB1EE4((unsigned int *)&v14, v1, v2);
  }
  return result;
}

size_t *sub_207CB192C(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  unsigned int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  size_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v9 = *(_DWORD *)(v1 + 12);
  v10 = *(_DWORD *)(v1 + 16);
  v12 = v9 * v8 * v10 * v4;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v4, v10);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
    return sub_207CB1A68(&v12, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_207CB1A68(size_t *result, char **a2, char **a3)
{
  int v3;
  size_t *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      v4 = result;
      v5 = *a2;
      v6 = *a3;
      v7 = v3 - 1;
      if (v3 != 1)
      {
        v8 = *((unsigned int *)a3 + 11);
        v9 = *((unsigned int *)a2 + 11);
        do
        {
          v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          result = (size_t *)memmove(v6, v5, v10);
LABEL_7:
          v5 += v9;
          v6 += v8;
          --v7;
        }
        while (v7);
      }
      v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_15:
        abort();
      }
      return (size_t *)memmove(v6, v5, v11);
    }
  }
  return result;
}

size_t *sub_207CB1BC4(size_t *result, char **a2, char **a3)
{
  int32x4_t v3;
  int v4;
  size_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int i;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      v5 = result;
      v6 = *((unsigned int *)a2 + 10);
      v7 = *((unsigned int *)a3 + 10);
      v8 = *a2;
      v9 = *a3;
      v25 = v4 - 1;
      v21 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        v23 = *((unsigned int *)a3 + 11);
        v22 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          v10 = 0;
          while (1)
          {
            v24 = v10;
            v11 = v21;
            v12 = v8;
            v13 = v9;
            do
            {
              v14 = v12;
              v15 = *v5;
              if (!v14 && v15)
              {
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_41;
                }
LABEL_11:
                result = (size_t *)memmove(v13, v14, v15);
                goto LABEL_12;
              }
              if (v15)
                goto LABEL_11;
LABEL_12:
              v12 = &v14[v6];
              v13 += v7;
              --v11;
            }
            while (v11);
            v16 = *v5;
            if (!v14 && v16)
            {
              if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
LABEL_7:
                result = (size_t *)memmove(v13, &v14[v6], v16);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v16)
              goto LABEL_7;
LABEL_8:
            v8 += v22;
            v9 += v23;
            v10 = v24 + 1;
            if (v24 + 1 == v25)
              goto LABEL_29;
          }
        }
        do
        {
          v17 = *v5;
          if (!v8 && v17)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_41;
            }
          }
          else if (!v17)
          {
            goto LABEL_24;
          }
          result = (size_t *)memmove(v9, v8, v17);
LABEL_24:
          v8 += v22;
          v9 += v23;
          --v25;
        }
        while (v25);
      }
LABEL_29:
      for (i = v21; i; --i)
      {
        v19 = *v5;
        if (!v8 && v19)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_41;
          }
        }
        else if (!v19)
        {
          goto LABEL_33;
        }
        result = (size_t *)memmove(v9, v8, v19);
LABEL_33:
        v8 += v6;
        v9 += v7;
      }
      v20 = *v5;
      if (v8 || !v20)
      {
        if (!v20)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_41;
      }
      return (size_t *)memmove(v9, v8, v20);
    }
  }
  return result;
}

unsigned int *sub_207CB1EE4(unsigned int *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return sub_207CB1FC8((unsigned int *)&v13, (uint64_t)v24, (size_t *)result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_207CB1FC8(unsigned int *a1, uint64_t a2, size_t *a3, char *__src, unsigned int *__dst)
{
  int v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  char *v17;
  int v18;
  unsigned int *v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  unsigned int *v26;

  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[11])
        break;
LABEL_3:
      sub_207CB2218(a1, (char **)a2, a3, v11, __dst);
      __src = &v25[a1[15]];
      __dst = (unsigned int *)((char *)v26 + a1[16]);
      v10 = v24 + 1;
      if (v24 + 1 >= a1[14])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = __src;
    while (1)
    {
      v13 = a1[3] | ((unint64_t)a1[6] << 32);
      v14 = a1[4] | ((unint64_t)a1[7] << 32);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_QWORD *)(a2 + 24) = v14;
      v15 = a1[8];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += a1[9];
          v16 = (unsigned int *)((char *)v16 + a1[10]);
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_26;
        }
        v19 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, v20);
        v15 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += a1[12];
      __dst = (unsigned int *)((char *)__dst + a1[13]);
      if (++v12 >= a1[11])
        goto LABEL_3;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_26:
      abort();
    }
    v16 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    v22 = 0;
    do
    {
      sub_207CB2218(a1, (char **)a2, a3, __src, __dst);
      __src += a1[12];
      __dst = (unsigned int *)((char *)__dst + a1[13]);
      ++v22;
    }
    while (v22 < a1[11]);
  }
  return sub_207CB2218(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_207CB2218(unsigned int *result, char **a2, size_t *a3, char *__src, unsigned int *__dst)
{
  unsigned int *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[9];
      v5 = (unsigned int *)((char *)v5 + v12[10]);
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = (unsigned int *)a2[2];
LABEL_4:
    result = (unsigned int *)memmove(result, v6, v14);
    v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = (unsigned int *)a2[2];
    return (unsigned int *)memmove(v5, v6, v15);
  }
  if (v15)
    return (unsigned int *)memmove(v5, v6, v15);
  return result;
}

size_t *sub_207CB2398(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_207CB24D0(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += v25;
          v13 += HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (size_t *)sub_207CB24D0(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_207CB24D0(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  char *v26;

  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[8])
        break;
LABEL_3:
      sub_207CB271C(a1, a2, a3, v11, __dst);
      __src = &v25[a1[12]];
      __dst = &v26[a1[13]];
      v10 = v24 + 1;
      if ((v24 + 1) >= a1[11])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = __src;
    while (1)
    {
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += a1[6];
          v16 += a1[7];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_26;
        }
        v19 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, v20);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += a1[9];
      __dst += a1[10];
      if (++v12 >= a1[8])
        goto LABEL_3;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_26:
      abort();
    }
    v16 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    v22 = 0;
    do
    {
      sub_207CB271C(a1, a2, a3, __src, __dst);
      __src += a1[9];
      __dst += a1[10];
      ++v22;
    }
    while (v22 < a1[8]);
  }
  return sub_207CB271C(a1, a2, a3, __src, __dst);
}

_DWORD *sub_207CB271C(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, v15);
  }
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

_DWORD *sub_207CB2898(_DWORD *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char v24;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_BYTE **)a2;
      v12 = *(_BYTE **)a3;
      v24 = 0;
      return sub_207CB2978(&v13, (uint64_t)&v24, (uint64_t)result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_207CB2978(_DWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  if (a1[14])
  {
    v10 = 0;
    do
    {
      v11 = a5;
      v12 = a4;
      if (a1[11])
      {
        v13 = 0;
        v12 = a4;
        v11 = a5;
        do
        {
          v14 = v12;
          v15 = v11;
          if (a1[8])
          {
            v16 = 0;
            v14 = v12;
            v15 = v11;
            do
            {
              v17 = v14;
              v18 = v15;
              if (a1[5])
              {
                v19 = 0;
                v17 = v14;
                v18 = v15;
                do
                {
                  v20 = v18;
                  v21 = v17;
                  if (a1[2])
                  {
                    v22 = 0;
                    v21 = v17;
                    v20 = v18;
                    do
                    {
                      *v20 = *v21;
                      v21 += a1[3];
                      v20 += a1[4];
                      ++v22;
                    }
                    while (v22 < a1[2]);
                  }
                  *v20 = *v21;
                  v17 += a1[6];
                  v18 += a1[7];
                  ++v19;
                }
                while (v19 < a1[5]);
              }
              if (a1[2])
              {
                v23 = 0;
                do
                {
                  *v18 = *v17;
                  v17 += a1[3];
                  v18 += a1[4];
                  ++v23;
                }
                while (v23 < a1[2]);
              }
              *v18 = *v17;
              v14 += a1[9];
              v15 += a1[10];
              ++v16;
            }
            while (v16 < a1[8]);
          }
          if (a1[5])
          {
            v24 = 0;
            do
            {
              v25 = v15;
              v26 = v14;
              if (a1[2])
              {
                v27 = 0;
                v26 = v14;
                v25 = v15;
                do
                {
                  *v25 = *v26;
                  v26 += a1[3];
                  v25 += a1[4];
                  ++v27;
                }
                while (v27 < a1[2]);
              }
              *v25 = *v26;
              v14 += a1[6];
              v15 += a1[7];
              ++v24;
            }
            while (v24 < a1[5]);
          }
          if (a1[2])
          {
            v28 = 0;
            do
            {
              *v15 = *v14;
              v14 += a1[3];
              v15 += a1[4];
              ++v28;
            }
            while (v28 < a1[2]);
          }
          *v15 = *v14;
          v12 += a1[12];
          v11 += a1[13];
          ++v13;
        }
        while (v13 < a1[11]);
      }
      sub_207CB2C34(a1, a2, a3, v12, v11);
      a4 += a1[15];
      a5 += a1[16];
      ++v10;
    }
    while (v10 < a1[14]);
  }
  if (a1[11])
  {
    v29 = 0;
    do
    {
      sub_207CB2C34(a1, a2, a3, a4, a5);
      a4 += a1[12];
      a5 += a1[13];
      ++v29;
    }
    while (v29 < a1[11]);
  }
  return sub_207CB2C34(a1, a2, a3, a4, a5);
}

_DWORD *sub_207CB2C34(_DWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;

  if (result[8])
  {
    v5 = 0;
    do
    {
      v6 = a4;
      v7 = a5;
      if (result[5])
      {
        v8 = 0;
        v6 = a4;
        v7 = a5;
        do
        {
          v9 = v7;
          v10 = v6;
          if (result[2])
          {
            v11 = 0;
            v10 = v6;
            v9 = v7;
            do
            {
              *v9 = *v10;
              v10 += result[3];
              v9 += result[4];
              ++v11;
            }
            while (v11 < result[2]);
          }
          *v9 = *v10;
          v6 += result[6];
          v7 += result[7];
          ++v8;
        }
        while (v8 < result[5]);
      }
      if (result[2])
      {
        v12 = 0;
        do
        {
          *v7 = *v6;
          v6 += result[3];
          v7 += result[4];
          ++v12;
        }
        while (v12 < result[2]);
      }
      *v7 = *v6;
      a4 += result[9];
      a5 += result[10];
      ++v5;
    }
    while (v5 < result[8]);
  }
  if (result[5])
  {
    v13 = 0;
    do
    {
      v14 = a5;
      v15 = a4;
      if (result[2])
      {
        v16 = 0;
        v15 = a4;
        v14 = a5;
        do
        {
          *v14 = *v15;
          v15 += result[3];
          v14 += result[4];
          ++v16;
        }
        while (v16 < result[2]);
      }
      *v14 = *v15;
      a4 += result[6];
      a5 += result[7];
      ++v13;
    }
    while (v13 < result[5]);
  }
  if (result[2])
  {
    v17 = 0;
    do
    {
      *a5 = *a4;
      a4 += result[3];
      a5 += result[4];
      ++v17;
    }
    while (v17 < result[2]);
  }
  *a5 = *a4;
  return result;
}

void sub_207CB2DD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  nullsub_31(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)nullsub_31(a1);
  }
  else
  {
LABEL_5:
    v5 = (void *)nullsub_31(a1);
  }
  operator delete(v5);
}

uint64_t sub_207CB2E50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_207CB2E58(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_207CB2E60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_207CB2E74(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_207CB2EF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 727, (uint64_t)"format.Contains(FormatFlags::FLOAT16)", 37, (uint64_t)"The DataView does not contain half data", 39, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

__int16 sub_207CB30B8@<H0>(_DWORD *a1@<X0>, _BYTE *a2@<X1>, _WORD *a3@<X2>, float _S0@<S0>)
{
  unsigned int v4;
  _BYTE *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _WORD *v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  __int16 result;

  if (a1[8])
  {
    v4 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v12 = v10;
          v13 = v9;
          if (a1[2])
          {
            v14 = 0;
            v13 = v9;
            v12 = v10;
            do
            {
              LOBYTE(_S0) = *v13;
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v12 = LOWORD(_S0);
              v13 += a1[3];
              v12 += a1[4];
              ++v14;
            }
            while (v14 < a1[2]);
          }
          LOBYTE(_S0) = *v13;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v12 = LOWORD(_S0);
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v15 = 0;
        do
        {
          LOBYTE(_S0) = *v9;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v10 = LOWORD(_S0);
          v9 += a1[3];
          v10 += a1[4];
          ++v15;
        }
        while (v15 < a1[2]);
      }
      LOBYTE(_S0) = *v9;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v10 = LOWORD(_S0);
      a2 += a1[9];
      a3 += a1[10];
      ++v4;
    }
    while (v4 < a1[8]);
  }
  if (a1[5])
  {
    v16 = 0;
    do
    {
      v17 = a3;
      v18 = a2;
      if (a1[2])
      {
        v19 = 0;
        v18 = a2;
        v17 = a3;
        do
        {
          LOBYTE(_S0) = *v18;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v17 = LOWORD(_S0);
          v18 += a1[3];
          v17 += a1[4];
          ++v19;
        }
        while (v19 < a1[2]);
      }
      LOBYTE(_S0) = *v18;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v17 = LOWORD(_S0);
      a2 += a1[6];
      a3 += a1[7];
      ++v16;
    }
    while (v16 < a1[5]);
  }
  if (a1[2])
  {
    v20 = 0;
    do
    {
      LOBYTE(_S0) = *a2;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *a3 = LOWORD(_S0);
      a2 += a1[3];
      a3 += a1[4];
      ++v20;
    }
    while (v20 < a1[2]);
  }
  LOBYTE(_S0) = *a2;
  _S0 = (float)LODWORD(_S0);
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

uint64_t sub_207CB329C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

float sub_207CB345C(_DWORD *a1, _BYTE *a2, float *a3, float a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float *v18;
  float *v19;
  _BYTE *v20;
  float *v21;
  float *v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  int v44;
  _BYTE *v45;
  float result;

  v4 = a1[8];
  v5 = a1[5];
  if (v4)
  {
    v6 = a1[2];
    v7 = a1[9];
    v8 = a1[10];
    if (v5)
    {
      v9 = a1[6];
      v10 = a1[7];
      if (!v6)
      {
        v42 = 4 * v8;
        do
        {
          v43 = a3;
          v44 = v5;
          v45 = a2;
          do
          {
            LOBYTE(a4) = *v45;
            a4 = (float)LODWORD(a4);
            *v43 = a4;
            v45 += v9;
            v43 += v10;
            --v44;
          }
          while (v44);
          LOBYTE(a4) = *v45;
          a4 = (float)LODWORD(a4);
          *v43 = a4;
          a2 += v7;
          a3 = (float *)((char *)a3 + v42);
          ++v6;
        }
        while (v6 != v4);
        goto LABEL_33;
      }
      v11 = 0;
      v12 = a1[3];
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[4];
      v16 = &a3[v14];
      do
      {
        v17 = 0;
        v18 = v16;
        v19 = a3;
        v20 = a2;
        do
        {
          v21 = v18;
          v22 = v19;
          v23 = v6;
          v24 = v20;
          do
          {
            LOBYTE(a4) = *v24;
            a4 = (float)LODWORD(a4);
            *v22 = a4;
            v24 += v12;
            v22 = (float *)((char *)v22 + v15);
            --v23;
          }
          while (v23);
          LOBYTE(a4) = *v24;
          a4 = (float)LODWORD(a4);
          *v22 = a4;
          v20 += v9;
          v19 = (float *)((char *)v19 + v14 * 4);
          ++v17;
          v18 = &v21[v14];
        }
        while (v17 != v5);
        v25 = v6;
        do
        {
          LOBYTE(a4) = *v20;
          a4 = (float)LODWORD(a4);
          *v21 = a4;
          v20 += v12;
          v21 = (float *)((char *)v21 + v15);
          --v25;
        }
        while (v25);
        LOBYTE(a4) = *v20;
        a4 = (float)LODWORD(a4);
        *v21 = a4;
        a2 += v7;
        a3 = (float *)((char *)a3 + v13);
        ++v11;
        v16 = (float *)((char *)v16 + v13);
      }
      while (v11 != v4);
LABEL_14:
      v9 = a1[6];
      v10 = a1[7];
      if (v6)
      {
        v26 = 0;
        v27 = a1[3];
        v28 = 4 * v10;
        v29 = 4 * a1[4];
        do
        {
          v30 = a3;
          v31 = v6;
          v32 = a2;
          do
          {
            LOBYTE(a4) = *v32;
            a4 = (float)LODWORD(a4);
            *v30 = a4;
            v32 += v27;
            v30 = (float *)((char *)v30 + v29);
            --v31;
          }
          while (v31);
          LOBYTE(a4) = *v32;
          a4 = (float)LODWORD(a4);
          *v30 = a4;
          a2 += v9;
          a3 = (float *)((char *)a3 + v28);
          ++v26;
        }
        while (v26 != v5);
        goto LABEL_25;
      }
      do
      {
LABEL_33:
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v9;
        a3 += v10;
        --v5;
      }
      while (v5);
      goto LABEL_36;
    }
    if (!v6)
    {
      do
      {
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v7;
        a3 += v8;
        --v4;
      }
      while (v4);
      goto LABEL_36;
    }
    v33 = 0;
    v34 = a1[3];
    v35 = 4 * v8;
    v36 = 4 * a1[4];
    do
    {
      v37 = a3;
      v38 = v6;
      v39 = a2;
      do
      {
        LOBYTE(a4) = *v39;
        a4 = (float)LODWORD(a4);
        *v37 = a4;
        v39 += v34;
        v37 = (float *)((char *)v37 + v36);
        --v38;
      }
      while (v38);
      LOBYTE(a4) = *v39;
      a4 = (float)LODWORD(a4);
      *v37 = a4;
      a2 += v7;
      a3 = (float *)((char *)a3 + v35);
      ++v33;
    }
    while (v33 != v4);
  }
  else
  {
    v6 = a1[2];
    if (v5)
      goto LABEL_14;
  }
LABEL_25:
  if (v6)
  {
    v40 = a1[3];
    v41 = 4 * a1[4];
    do
    {
      LOBYTE(a4) = *a2;
      a4 = (float)LODWORD(a4);
      *a3 = a4;
      a2 += v40;
      a3 = (float *)((char *)a3 + v41);
      --v6;
    }
    while (v6);
  }
LABEL_36:
  LOBYTE(a4) = *a2;
  result = (float)LODWORD(a4);
  *a3 = result;
  return result;
}

uint64_t sub_207CB36E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

float sub_207CB38A8(_DWORD *a1, float *a2, _BYTE *a3)
{
  unsigned int v6;
  _BYTE *v7;
  float *v8;
  unsigned int v9;
  float *v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  float *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a1[11])
  {
    v6 = 0;
    do
    {
      v7 = a3;
      v8 = a2;
      if (a1[8])
      {
        v9 = 0;
        v8 = a2;
        v7 = a3;
        do
        {
          v10 = v8;
          v11 = v7;
          if (a1[5])
          {
            v12 = 0;
            v10 = v8;
            v11 = v7;
            do
            {
              v13 = v11;
              v14 = v10;
              if (a1[2])
              {
                v15 = 0;
                v14 = v10;
                v13 = v11;
                do
                {
                  *v13 = (int)*v14;
                  v14 += a1[3];
                  v13 += a1[4];
                  ++v15;
                }
                while (v15 < a1[2]);
              }
              *v13 = (int)*v14;
              v10 += a1[6];
              v11 += a1[7];
              ++v12;
            }
            while (v12 < a1[5]);
          }
          if (a1[2])
          {
            v16 = 0;
            do
            {
              *v11 = (int)*v10;
              v10 += a1[3];
              v11 += a1[4];
              ++v16;
            }
            while (v16 < a1[2]);
          }
          *v11 = (int)*v10;
          v8 += a1[9];
          v7 += a1[10];
          ++v9;
        }
        while (v9 < a1[8]);
      }
      sub_207CB3A5C(a1, v8, v7);
      a2 += a1[12];
      a3 += a1[13];
      ++v6;
    }
    while (v6 < a1[11]);
  }
  if (a1[8])
  {
    v17 = 0;
    do
    {
      sub_207CB3A5C(a1, a2, a3);
      a2 += a1[9];
      a3 += a1[10];
      ++v17;
    }
    while (v17 < a1[8]);
  }
  return sub_207CB3A5C(a1, a2, a3);
}

float sub_207CB3A5C(_DWORD *a1, float *a2, _BYTE *a3)
{
  unsigned int v3;
  _BYTE *v4;
  float *v5;
  unsigned int v6;
  unsigned int v7;
  float result;

  if (a1[5])
  {
    v3 = 0;
    do
    {
      v4 = a3;
      v5 = a2;
      if (a1[2])
      {
        v6 = 0;
        v5 = a2;
        v4 = a3;
        do
        {
          *v4 = (int)*v5;
          v5 += a1[3];
          v4 += a1[4];
          ++v6;
        }
        while (v6 < a1[2]);
      }
      *v4 = (int)*v5;
      a2 += a1[6];
      a3 += a1[7];
      ++v3;
    }
    while (v3 < a1[5]);
  }
  if (a1[2])
  {
    v7 = 0;
    do
    {
      *a3 = (int)*a2;
      a2 += a1[3];
      a3 += a1[4];
      ++v7;
    }
    while (v7 < a1[2]);
  }
  result = *a2;
  *a3 = (int)*a2;
  return result;
}

__int16 sub_207CB3B20@<H0>(_DWORD *a1@<X0>, int *a2@<X1>, _WORD *a3@<X2>)
{
  unsigned int v3;
  int *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v13;
  int *v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v19;
  _WORD *v21;
  int *v22;
  unsigned int v23;
  unsigned int v25;
  __int16 result;

  if (a1[8])
  {
    v3 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v13 = v10;
          v14 = v9;
          if (a1[2])
          {
            v15 = 0;
            v14 = v9;
            v13 = v10;
            do
            {
              _S0 = *v14;
              __asm { FCVT            H0, S0 }
              *v13 = _S0;
              v14 += a1[3];
              v13 += a1[4];
              ++v15;
            }
            while (v15 < a1[2]);
          }
          _S0 = *v14;
          __asm { FCVT            H0, S0 }
          *v13 = _S0;
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v17 = 0;
        do
        {
          _S0 = *v9;
          __asm { FCVT            H0, S0 }
          *v10 = _S0;
          v9 += a1[3];
          v10 += a1[4];
          ++v17;
        }
        while (v17 < a1[2]);
      }
      _S0 = *v9;
      __asm { FCVT            H0, S0 }
      *v10 = _S0;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    v19 = 0;
    do
    {
      v21 = a3;
      v22 = a2;
      if (a1[2])
      {
        v23 = 0;
        v22 = a2;
        v21 = a3;
        do
        {
          _S0 = *v22;
          __asm { FCVT            H0, S0 }
          *v21 = _S0;
          v22 += a1[3];
          v21 += a1[4];
          ++v23;
        }
        while (v23 < a1[2]);
      }
      _S0 = *v22;
      __asm { FCVT            H0, S0 }
      *v21 = _S0;
      a2 += a1[6];
      a3 += a1[7];
      ++v19;
    }
    while (v19 < a1[5]);
  }
  if (a1[2])
  {
    v25 = 0;
    do
    {
      _S0 = *a2;
      __asm { FCVT            H0, S0 }
      *a3 = _S0;
      a2 += a1[3];
      a3 += a1[4];
      ++v25;
    }
    while (v25 < a1[2]);
  }
  _S0 = *a2;
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

void sub_207CB3CE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v10;
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
      {
        sub_207CB3DA8(a1);
        return;
      }
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      sub_207CB4910(&v10, v1, v2);
  }
  else
  {
    v11 = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24))
        sub_207CB4E10((uint64_t)&v11, v1, v2);
    }
  }
}

uint64_t *sub_207CB3DA8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  uint64_t v14;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
        return sub_207CB3E98(result);
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 16);
    }
    v9 = *(_DWORD *)(v1 + 8);
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_207CB4138(&v14, (char **)v1, (char **)v2);
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 8);
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(_QWORD *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return sub_207CB445C(&v14, v1, v2);
  }
  return result;
}

uint64_t *sub_207CB3E98(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (uint64_t *)memmove(*(void **)v2, v6, 4 * v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v9 = *(_DWORD *)(v1 + 12);
  v10 = *(_DWORD *)(v1 + 16);
  v12 = v9 * v8 * v10 * v4;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v4, v10);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
    return sub_207CB3FD4(&v12, (char **)v1, (char **)v2);
  return result;
}

uint64_t *sub_207CB3FD4(uint64_t *result, char **a2, char **a3)
{
  int v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      v4 = result;
      v5 = *a2;
      v6 = *a3;
      v7 = v3 - 1;
      if (v3 != 1)
      {
        v8 = 4 * *((unsigned int *)a2 + 11);
        v9 = 4 * *((unsigned int *)a3 + 11);
        do
        {
          v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          result = (uint64_t *)memmove(v6, v5, 4 * v10);
LABEL_7:
          v5 += v8;
          v6 += v9;
          --v7;
        }
        while (v7);
      }
      v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_15:
        abort();
      }
      return (uint64_t *)memmove(v6, v5, 4 * v11);
    }
  }
  return result;
}

uint64_t *sub_207CB4138(uint64_t *result, char **a2, char **a3)
{
  int32x4_t v3;
  int v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;

  v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      v5 = result;
      v6 = *a2;
      v7 = *a3;
      v8 = 4 * *((unsigned int *)a2 + 10);
      v9 = 4 * *((unsigned int *)a3 + 10);
      v29 = v4 - 1;
      v27 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        v10 = *((unsigned int *)a3 + 11);
        v11 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          v12 = 0;
          v25 = 4 * v10;
          v26 = 4 * v11;
          while (1)
          {
            v28 = v12;
            v13 = v7;
            v14 = v6;
            v15 = v27;
            do
            {
              v16 = v14;
              v17 = *v5;
              if (!v16 && v17)
              {
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_41;
                }
LABEL_11:
                result = (uint64_t *)memmove(v13, v16, 4 * v17);
                goto LABEL_12;
              }
              if (v17)
                goto LABEL_11;
LABEL_12:
              v14 = &v16[v8];
              v13 += v9;
              --v15;
            }
            while (v15);
            v18 = *v5;
            if (!v16 && v18)
            {
              if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
LABEL_7:
                result = (uint64_t *)memmove(v13, &v16[v8], 4 * v18);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v18)
              goto LABEL_7;
LABEL_8:
            v6 += v26;
            v7 += v25;
            v12 = v28 + 1;
            if (v28 + 1 == v29)
              goto LABEL_29;
          }
        }
        v19 = 4 * v11;
        v20 = 4 * v10;
        do
        {
          v21 = *v5;
          if (!v6 && v21)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_41;
            }
          }
          else if (!v21)
          {
            goto LABEL_24;
          }
          result = (uint64_t *)memmove(v7, v6, 4 * v21);
LABEL_24:
          v6 += v19;
          v7 += v20;
          --v29;
        }
        while (v29);
      }
LABEL_29:
      for (i = v27; i; --i)
      {
        v23 = *v5;
        if (!v6 && v23)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_41;
          }
        }
        else if (!v23)
        {
          goto LABEL_33;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v23);
LABEL_33:
        v6 += v8;
        v7 += v9;
      }
      v24 = *v5;
      if (v6 || !v24)
      {
        if (!v24)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_41;
      }
      return (uint64_t *)memmove(v7, v6, 4 * v24);
    }
  }
  return result;
}

uint64_t *sub_207CB445C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return (uint64_t *)sub_207CB4540((unsigned int *)&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_207CB4540(unsigned int *a1, uint64_t a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  int v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  char *v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  unsigned int *v26;

  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[11])
        break;
LABEL_3:
      sub_207CB4790(a1, (char **)a2, a3, v11, __dst);
      __src = &v25[4 * a1[15]];
      __dst = &v26[a1[16]];
      v10 = v24 + 1;
      if (v24 + 1 >= a1[14])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = v25;
    while (1)
    {
      v13 = a1[3] | ((unint64_t)a1[6] << 32);
      v14 = a1[4] | ((unint64_t)a1[7] << 32);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_QWORD *)(a2 + 24) = v14;
      v15 = a1[8];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += 4 * a1[9];
          v16 += a1[10];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_26;
        }
        v19 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, 4 * v20);
        v15 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += 4 * a1[12];
      __dst += a1[13];
      if (++v12 >= a1[11])
        goto LABEL_3;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_26:
      abort();
    }
    v16 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, 4 * v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    v22 = 0;
    do
    {
      sub_207CB4790(a1, (char **)a2, a3, __src, __dst);
      __src += 4 * a1[12];
      __dst += a1[13];
      ++v22;
    }
    while (v22 < a1[11]);
  }
  return sub_207CB4790(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_207CB4790(unsigned int *result, char **a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  unsigned int *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[9];
      v5 += v12[10];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = (unsigned int *)a2[2];
LABEL_4:
    result = (unsigned int *)memmove(result, v6, 4 * v14);
    v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = (unsigned int *)a2[2];
    return (unsigned int *)memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return (unsigned int *)memmove(v5, v6, 4 * v15);
  return result;
}

uint64_t *sub_207CB4910(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_207CB4A48(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += 4 * v25;
          v13 += 4 * HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (uint64_t *)sub_207CB4A48(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_207CB4A48(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  char *v26;

  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[8])
        break;
LABEL_3:
      sub_207CB4C94(a1, a2, a3, v11, __dst);
      __src = &v25[4 * a1[12]];
      __dst = &v26[4 * a1[13]];
      v10 = v24 + 1;
      if ((v24 + 1) >= a1[11])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = v25;
    while (1)
    {
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += 4 * a1[6];
          v16 += 4 * a1[7];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_26;
        }
        v19 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, 4 * v20);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += 4 * a1[9];
      __dst += 4 * a1[10];
      if (++v12 >= a1[8])
        goto LABEL_3;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_26:
      abort();
    }
    v16 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, 4 * v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    v22 = 0;
    do
    {
      sub_207CB4C94(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v22;
    }
    while (v22 < a1[8]);
  }
  return sub_207CB4C94(a1, a2, a3, __src, __dst);
}

_DWORD *sub_207CB4C94(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, 4 * v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return memmove(v5, v6, 4 * v15);
  return result;
}

float sub_207CB4E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  __int32 v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  char v25;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v15 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v16 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v14 = 0;
      v17 = v6 - 1;
      v18 = v7 | (v8 << 32);
      v19 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v20 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v21 = v4 - 1;
      v22 = v9 | (v10 << 32);
      v23 = HIDWORD(v4) - 1;
      v24 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_DWORD **)a2;
      v12 = *(_DWORD **)a3;
      v25 = 0;
      *(float *)&v4 = sub_207CB4EF0(&v14, (uint64_t)&v25, a1, v11, v12);
    }
  }
  return *(float *)&v4;
}

float sub_207CB4EF0(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  int *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  int *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  int v103;
  int v104;
  int v105;
  _DWORD *v106;
  _DWORD *v107;
  int v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  int v123;
  unsigned int v124;
  int v128;
  _DWORD *v129;
  _DWORD *v130;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  int *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  _DWORD *v144;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v128 = v10;
      v11 = v9[11];
      v129 = a4;
      v130 = a5;
      if (v11)
        break;
LABEL_3:
      v8 = a2;
      v7 = a3;
      sub_207CB557C(v9, a2, a3, a4, a5);
      a4 = &v129[v9[15]];
      a5 = &v130[v9[16]];
      v10 = v128 + 1;
      if ((v128 + 1) >= v9[14])
        goto LABEL_64;
    }
    v12 = v9[8];
    v13 = v9[5];
    v14 = v9[12];
    v15 = v9[13];
    v16 = v9[2];
    if (v12)
    {
      v18 = v9[9];
      v17 = v9[10];
      if (v13)
      {
        v134 = v14;
        v19 = v9[6];
        v20 = v9[7];
        v21 = v18;
        v22 = 4 * v19;
        v133 = v15;
        v23 = v17;
        v24 = 4 * v20;
        if (v16)
        {
          v25 = 0;
          v26 = 4 * v9[3];
          v27 = 4 * v9[4];
          v28 = &a4[(unint64_t)v22 / 4];
          v29 = &a5[(unint64_t)v24 / 4];
          v30 = &a4[v21];
          v31 = &a5[v23];
          v32 = &a4[v18 + v19];
          v33 = &a4[(unint64_t)v22 / 4 + v21];
          v34 = &a5[v17 + v20];
          v35 = &a5[(unint64_t)v24 / 4 + v23];
          v132 = v9[11];
          do
          {
            v143 = v25;
            v36 = 0;
            v135 = v35;
            v136 = v34;
            v137 = v33;
            v138 = v32;
            v37 = v33;
            v139 = v31;
            v140 = v30;
            v38 = v31;
            v141 = v29;
            v142 = v28;
            v144 = a5;
            v39 = a5;
            v40 = a4;
            do
            {
              v41 = 0;
              v42 = v30;
              v43 = v38;
              v44 = v32;
              v45 = v37;
              v46 = v34;
              v47 = v35;
              v48 = v29;
              v49 = v28;
              v50 = v39;
              v51 = v40;
              do
              {
                v52 = v49;
                v53 = v48;
                v54 = v50;
                v55 = v51;
                v56 = v16;
                do
                {
                  *v54 = *v55;
                  v55 = (_DWORD *)((char *)v55 + v26);
                  v54 = (_DWORD *)((char *)v54 + v27);
                  --v56;
                }
                while (v56);
                *v54 = *v55;
                v51 = (_DWORD *)((char *)v51 + v22);
                v50 = (_DWORD *)((char *)v50 + v24);
                ++v41;
                v49 = &v52[(unint64_t)v22 / 4];
                v48 = &v53[(unint64_t)v24 / 4];
              }
              while (v41 != v13);
              v57 = v16;
              do
              {
                *v53 = *v52;
                v52 = (_DWORD *)((char *)v52 + v26);
                v53 = (_DWORD *)((char *)v53 + v27);
                --v57;
              }
              while (v57);
              v40 = (_DWORD *)((char *)v40 + v21 * 4);
              v39 = (_DWORD *)((char *)v39 + v23 * 4);
              ++v36;
              v28 = (_DWORD *)((char *)v28 + v21 * 4);
              *v53 = *v52;
              v29 = (_DWORD *)((char *)v29 + v23 * 4);
              v30 = &v42[v21];
              v38 = &v43[v23];
              v32 = &v44[v21];
              v37 = &v45[v21];
              v34 = &v46[v23];
              v35 = &v47[v23];
            }
            while (v36 != v12);
            v58 = 0;
            v9 = a1;
            do
            {
              v59 = v44;
              v60 = v45;
              v61 = v46;
              v62 = v47;
              v63 = v43;
              v64 = v42;
              v65 = v16;
              do
              {
                *v63 = *v64;
                v64 = (_DWORD *)((char *)v64 + v26);
                v63 = (_DWORD *)((char *)v63 + v27);
                --v65;
              }
              while (v65);
              v42 = (_DWORD *)((char *)v42 + v22);
              v43 = (_DWORD *)((char *)v43 + v24);
              ++v58;
              v44 = (int *)((char *)v44 + v22);
              *v63 = *v64;
              v45 = (_DWORD *)((char *)v45 + v22);
              v46 = &v61[(unint64_t)v24 / 4];
              v47 = (_DWORD *)((char *)v47 + v24);
            }
            while (v58 != v13);
            v66 = v16;
            do
            {
              v59 = (int *)((char *)v59 + v26);
              *v62 = *v60;
              v60 = (_DWORD *)((char *)v60 + v26);
              v61 = (_DWORD *)((char *)v61 + v27);
              v62 = (_DWORD *)((char *)v62 + v27);
              --v66;
            }
            while (v66);
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = &v144[v133];
            v67 = *v59;
            v25 = v143 + 1;
            v28 = &v142[v134];
            *v61 = v67;
            v29 = &v141[v133];
            v30 = &v140[v134];
            v31 = &v139[v133];
            v32 = &v138[v134];
            v33 = &v137[v134];
            v34 = &v136[v133];
            v35 = &v135[v133];
          }
          while (v143 + 1 != v132);
        }
        else
        {
          v105 = 0;
          v106 = &a4[v21];
          v107 = &a5[v23];
          do
          {
            v108 = 0;
            v109 = v107;
            v110 = v106;
            v111 = a5;
            v112 = a4;
            do
            {
              v113 = v110;
              v114 = v109;
              v115 = v111;
              v116 = v112;
              v117 = v13;
              do
              {
                *v115 = *v116;
                v116 = (_DWORD *)((char *)v116 + v22);
                v115 = (_DWORD *)((char *)v115 + v24);
                --v117;
              }
              while (v117);
              *v115 = *v116;
              v112 = (_DWORD *)((char *)v112 + v21 * 4);
              v111 = (_DWORD *)((char *)v111 + v23 * 4);
              ++v108;
              v110 = &v113[v21];
              v109 = &v114[v23];
            }
            while (v108 != v12);
            v118 = v13;
            do
            {
              *v114 = *v113;
              v113 = (_DWORD *)((char *)v113 + v22);
              v114 = (_DWORD *)((char *)v114 + v24);
              --v118;
            }
            while (v118);
            *v114 = *v113;
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = (_DWORD *)((char *)a5 + v133 * 4);
            ++v105;
            v106 = (_DWORD *)((char *)v106 + v134 * 4);
            v107 = (_DWORD *)((char *)v107 + v133 * 4);
          }
          while (v105 != v11);
        }
      }
      else
      {
        v85 = 0;
        if (v16)
        {
          v86 = 4 * v14;
          v87 = v18;
          v88 = 4 * v9[3];
          v89 = 4 * v15;
          v90 = v17;
          v91 = 4 * v9[4];
          v92 = &a4[v18];
          v93 = &a5[v90];
          do
          {
            v94 = 0;
            v95 = v93;
            v96 = v92;
            v97 = a5;
            v98 = a4;
            do
            {
              v99 = v96;
              v100 = v95;
              v101 = v97;
              v102 = v98;
              v103 = v16;
              do
              {
                *v101 = *v102;
                v102 = (_DWORD *)((char *)v102 + v88);
                v101 = (_DWORD *)((char *)v101 + v91);
                --v103;
              }
              while (v103);
              *v101 = *v102;
              v98 = (_DWORD *)((char *)v98 + v87 * 4);
              v97 = (_DWORD *)((char *)v97 + v90 * 4);
              ++v94;
              v96 = &v99[v87];
              v95 = &v100[v90];
            }
            while (v94 != v12);
            v104 = v16;
            do
            {
              *v100 = *v99;
              v99 = (_DWORD *)((char *)v99 + v88);
              v100 = (_DWORD *)((char *)v100 + v91);
              --v104;
            }
            while (v104);
            *v100 = *v99;
            a4 = (_DWORD *)((char *)a4 + v86);
            a5 = (_DWORD *)((char *)a5 + v89);
            ++v85;
            v92 = (_DWORD *)((char *)v92 + v86);
            v93 = (_DWORD *)((char *)v93 + v89);
          }
          while (v85 != v11);
        }
        else
        {
          v119 = 4 * v18;
          v120 = 4 * v15;
          do
          {
            v121 = a5;
            v122 = a4;
            v123 = v12;
            do
            {
              *v121 = *v122;
              v122 = (_DWORD *)((char *)v122 + v119);
              v121 += v17;
              --v123;
            }
            while (v123);
            *v121 = *v122;
            a4 += v14;
            a5 = (_DWORD *)((char *)a5 + v120);
            ++v85;
          }
          while (v85 != v11);
        }
      }
      goto LABEL_3;
    }
    v68 = 4 * v14;
    v69 = 4 * v15;
    while (1)
    {
      v70 = a5;
      v71 = a4;
      if (!v13)
        goto LABEL_33;
      v73 = v9[6];
      v72 = v9[7];
      if (v16)
        break;
      v83 = 4 * v73;
      v70 = a5;
      v71 = a4;
      v84 = v13;
      do
      {
        *v70 = *v71;
        v71 = (_DWORD *)((char *)v71 + v83);
        v70 += v72;
        --v84;
      }
      while (v84);
LABEL_26:
      *v70 = *v71;
      a4 = (_DWORD *)((char *)a4 + v68);
      a5 = (_DWORD *)((char *)a5 + v69);
      if (++v12 == v11)
        goto LABEL_3;
    }
    v74 = 0;
    v75 = 4 * v9[3];
    v76 = 4 * v9[4];
    v70 = a5;
    v71 = a4;
    do
    {
      v77 = v70;
      v78 = v71;
      v79 = v16;
      do
      {
        *v77 = *v78;
        v78 = (_DWORD *)((char *)v78 + v75);
        v77 = (_DWORD *)((char *)v77 + v76);
        --v79;
      }
      while (v79);
      *v77 = *v78;
      v71 += v73;
      v70 += v72;
      ++v74;
    }
    while (v74 != v13);
LABEL_33:
    if (v16)
    {
      v80 = v9[3];
      v81 = 4 * v9[4];
      v82 = v16;
      do
      {
        *v70 = *v71;
        v71 += v80;
        v70 = (_DWORD *)((char *)v70 + v81);
        --v82;
      }
      while (v82);
    }
    goto LABEL_26;
  }
LABEL_64:
  if (v9[11])
  {
    v124 = 0;
    do
    {
      sub_207CB557C(v9, v8, v7, a4, a5);
      a4 += v9[12];
      a5 += v9[13];
      ++v124;
    }
    while (v124 < v9[11]);
  }
  return sub_207CB557C(v9, v8, v7, a4, a5);
}

float sub_207CB557C(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        v52 = 4 * v8;
        v53 = 4 * v10;
        v54 = 4 * v9;
        v55 = 4 * v11;
        do
        {
          v56 = a5;
          v57 = a4;
          v58 = v6;
          do
          {
            *v56 = *v57;
            v57 = (_DWORD *)((char *)v57 + v53);
            v56 = (_DWORD *)((char *)v56 + v55);
            --v58;
          }
          while (v58);
          *v56 = *v57;
          a4 = (_DWORD *)((char *)a4 + v52);
          a5 = (_DWORD *)((char *)a5 + v54);
          ++v7;
        }
        while (v7 != v5);
        v32 = a1[6];
        v33 = a1[7];
        goto LABEL_34;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v32 = a1[6];
      v33 = a1[7];
      if (v7)
      {
        v34 = 0;
        v35 = 4 * v32;
        v36 = 4 * a1[3];
        v37 = 4 * v33;
        v38 = 4 * a1[4];
        do
        {
          v39 = a5;
          v40 = a4;
          v41 = v7;
          do
          {
            *v39 = *v40;
            v40 = (_DWORD *)((char *)v40 + v36);
            v39 = (_DWORD *)((char *)v39 + v38);
            --v41;
          }
          while (v41);
          *v39 = *v40;
          a4 = (_DWORD *)((char *)a4 + v35);
          a5 = (_DWORD *)((char *)a5 + v37);
          ++v34;
        }
        while (v34 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        *a5 = *a4;
        a4 += v32;
        a5 += v33;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_37;
    }
    v42 = 0;
    v43 = 4 * v8;
    v44 = 4 * a1[3];
    v45 = 4 * v9;
    v46 = 4 * a1[4];
    do
    {
      v47 = a5;
      v48 = a4;
      v49 = v7;
      do
      {
        *v47 = *v48;
        v48 = (_DWORD *)((char *)v48 + v44);
        v47 = (_DWORD *)((char *)v47 + v46);
        --v49;
      }
      while (v49);
      *v47 = *v48;
      a4 = (_DWORD *)((char *)a4 + v43);
      a5 = (_DWORD *)((char *)a5 + v45);
      ++v42;
    }
    while (v42 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v50 = 4 * a1[3];
    v51 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v50);
      a5 = (_DWORD *)((char *)a5 + v51);
      --v7;
    }
    while (v7);
  }
LABEL_37:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

void sub_207CB5820(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_31(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_31(v3);
    }
    else
    {
LABEL_6:
      nullsub_31(v3);
    }
  }
}

void sub_207CB58A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_31(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_31(v3);
    }
    else
    {
LABEL_6:
      nullsub_31(v3);
    }
  }
}

uint64_t sub_207CB5930(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C06E838[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C06E968[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C06E838[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C06E980[v6])(&v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

uint64_t sub_207CB5A6C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = *a2;
  v5 = operator new(0x18uLL);
  v6 = v5;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_207CA40D8(v5, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a3;
    v5[2] = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(a1 + 16) = v6;
  v7 = operator new(0x20uLL);
  *v7 = &unk_24C06F1C0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_207CB5B04(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  nullsub_31(v1);
  _Unwind_Resume(a1);
}

void sub_207CB5B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_31(v1);
  _Unwind_Resume(a1);
}

void sub_207CB5B50(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CB5B64(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      operator delete((void *)v1);
    }
    else
    {
      operator delete(*(void **)(a1 + 24));
    }
  }
}

uint64_t sub_207CB5BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020822BAF1)
    return a1 + 24;
  if (((v3 & 0x800000020822BAF1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020822BAF1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020822BAF1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

__n128 sub_207CB5C3C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F210;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB5C74(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F210;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB5C94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB5C9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_"
                                "config_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB5D08()
{
  return &unk_24C06F270;
}

__n128 sub_207CB5D1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB5D54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB5D74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB5D7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB5DE8()
{
  return &unk_24C06F2F0;
}

__n128 sub_207CB5DFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB5E34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB5E54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB5E5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_"
                                "optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB5EC8()
{
  return &unk_24C06F370;
}

void sub_207CB5ED4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[5];
  void **v7;

  sub_208215568(v6);
  sub_208215678(v6);
  sub_2080A8FB8();
  sub_208215684(v6, __p);
  sub_2082155DC(v6);
  v6[0] = a2;
  v6[1] = __p;
  v6[2] = a2;
  v6[3] = __p;
  v6[4] = __p;
  v3 = a2[6];
  if ((_DWORD)v3 == -1)
    sub_207CA9F48();
  v7 = v6;
  ((void (*)(void ***, unsigned int *))off_24C06EC98[v3])(&v7, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207CB5F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_207CB5FD0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB6008(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB6028(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB6030(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB609C()
{
  return &unk_24C06F3F0;
}

__n128 sub_207CB60B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F410;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB60E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F410;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB6108(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB6110(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB617C()
{
  return &unk_24C06F470;
}

__n128 sub_207CB6190(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB61C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB61E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB61F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_"
                     "create_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_"
                                "compute_op_create_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB625C()
{
  return &unk_24C06F4F0;
}

unsigned __int8 *sub_207CB6268(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_207CA77C0((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_207CA6B84(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_207CB6678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CB6690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C06F510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CB66A0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C06F510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CB66C0(uint64_t a1)
{
  return sub_2080B97EC(a1 + 24);
}

uint64_t *sub_207CB66CC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  sub_207CB6B1C((char *)v25 + 16, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CB6AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA776C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CB6B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA776C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_207CB6B1C(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)__dst + 3) = v5;
  *((_QWORD *)__dst + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)__dst + 5) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)__dst + 6) = v7;
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *((_QWORD *)__dst + 4);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v5 + 8 * v8) = __dst + 40;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  v10 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)__dst + 8) = v10;
  *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v11 = *((_QWORD *)a2 + 10);
  *((_QWORD *)__dst + 10) = v11;
  v12 = *((_QWORD *)a2 + 11);
  *((_QWORD *)__dst + 11) = v12;
  *((_DWORD *)__dst + 24) = *((_DWORD *)a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *((_QWORD *)__dst + 9);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(v10 + 8 * v13) = __dst + 80;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
  }
  *(_OWORD *)(__dst + 104) = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)__dst + 15) = *((_QWORD *)a2 + 15);
  return __dst;
}

uint64_t *sub_207CB6C5C(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

__n128 sub_207CB6E90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB6EC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB6EE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB6EF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB6F5C()
{
  return &unk_24C06F5C0;
}

void sub_207CB6F68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C06F5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CB6F78(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C06F5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CB6F98(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_207CB6FA8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207CB70E8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_207CB70C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

void sub_207CB70D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C9BBC4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CB70E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_207CA40D8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CB752C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CB7540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CB7558(const char **a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  const char **v15;
  std::string::size_type v16;
  const std::string::value_type *p_p;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  int64_t v22;
  __int128 i;
  void *__p;
  std::string::size_type v25;
  unsigned __int8 v26;
  __int128 v27;

  v11 = a1 - a3;
  if (v11 >= -1)
    v12 = -1;
  else
    v12 = a1 - a3;
  v13 = a5 * ~v12;
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  v22 = (char *)a1 - (char *)a3;
  v14 = 0;
  if (a1 != a3)
  {
    v15 = a1;
    do
    {
      sub_207CB7794((uint64_t)&v27 + 8, v15);
      if ((v26 & 0x80u) == 0)
        v16 = v26;
      else
        v16 = v25;
      if ((char)v26 < 0)
        operator delete(__p);
      v14 += v16;
      v15 = (const char **)(v27 + 8);
      *(_QWORD *)&v27 = v15;
    }
    while (v15 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  if (v22 < 0)
  {
    sub_207CB7794((uint64_t)&v27 + 8, a1);
    if ((v26 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v26 & 0x80u) == 0)
      v18 = v26;
    else
      v18 = v25;
    std::string::append(a6, p_p, v18);
    if ((char)v26 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v11 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v11 + 1) < 2)
    {
      return;
    }
    *(_QWORD *)&v27 = v27 + 8;
    for (i = v27; (const char **)i != a3; *(_QWORD *)&i = i + 8)
    {
      std::string::append(a6, a4, a5);
      sub_207CB7794((uint64_t)&i + 8, (const char **)i);
      if ((v26 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v26 & 0x80u) == 0)
        v20 = v26;
      else
        v20 = v25;
      std::string::append(a6, v19, v20);
      if ((char)v26 < 0)
        operator delete(__p);
    }
  }
}

void sub_207CB7750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CB7794(uint64_t a1, const char **a2)
{
  uint64_t result;
  _DWORD v3[6];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  if (*a2)
    sub_207CB7878(v3, a2);
  else
    sub_207CAA238(v3, "nullptr");
  if (v4 == -1)
    sub_207CA9F48();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C06ECB0[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C06EC38[v4])(v6, v3);
  return result;
}

void sub_207CB7840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C06EC38[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_207CB7878(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C06EC38[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

__n128 sub_207CB7974(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C06F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207CB79AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB79CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207CB79D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB7A40()
{
  return &unk_24C06F690;
}

std::__shared_weak_count_vtbl **sub_207CB7A4C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    j__CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06EAE0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CB7B0C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CB7B20()
{
  __break(1u);
}

void sub_207CB7B4C()
{
  __cxa_end_catch();
  JUMPOUT(0x207CB7B54);
}

__n128 sub_207CB7B68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C06F6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_207CB7BA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06F6B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207CB7BD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24);
}

uint64_t sub_207CB7BDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_executi"
                     "on_streamEJS8_SB_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e"
                                "5rt_execution_streamEJS8_SB_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CB7C48()
{
  return &unk_24C06F710;
}

uint64_t *sub_207CB7C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_207CA40D8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CB8098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207CB80AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CB80C4(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_207CB82F0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_207CB851C(void *__p)
{
  operator delete(__p);
}

uint64_t sub_207CB8528@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t sub_207CB854C(uint64_t a1, int a2, int a3, int a4)
{
  int **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v22;
  int v23;

  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (int **)(a1 + 8);
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = (uint64_t *)(a1 + 32);
  v9 = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  v23 = 0;
  if (a3)
  {
    sub_207CB86B0(a1 + 8, a3, (const float *)&v23);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v22 = 0;
    v12 = (v11 - v10) >> 2;
    v13 = v9 >= v12;
    if (v9 > v12)
    {
      sub_207CB86B0((uint64_t)v8, v9 - v12, (const float *)&v22);
      goto LABEL_7;
    }
  }
  else
  {
    v10 = 0;
    v22 = 0;
    v13 = 1;
  }
  if (!v13)
    *(_QWORD *)(a1 + 40) = v10 + 4 * v9;
LABEL_7:
  v14 = (a3 - 1);
  if (a3 >= 1)
  {
    v15 = *v7;
    v16 = a3;
    v17 = 1;
    do
    {
      *v15++ = v17;
      v17 *= 2;
      if (v17 >= a3)
        v17 = (v17 ^ a2) & v14;
      --v16;
    }
    while (v16);
    if (a3 >= 2)
    {
      v18 = 0;
      v19 = *v7;
      v20 = *v8;
      do
      {
        *(_DWORD *)(v20 + 4 * v19[v18]) = v18;
        ++v18;
      }
      while (v14 != v18);
    }
  }
  return a1;
}

void sub_207CB8670(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_207CB86B0(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_207CA420C();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_207CA3AB8();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

uint64_t sub_207CB8910(_QWORD *a1, int a2)
{
  uint64_t result;
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __int32 v21;

  if (a2 == 1)
  {
    v5 = (int8x16_t *)a1[1];
    v4 = (int8x16_t *)a1[2];
    if (v5 == v4)
      return 0;
    v6 = (char *)v4 - (char *)v5 - 4;
    if (v6 >= 0x1C)
    {
      v15 = (v6 >> 2) + 1;
      v7 = (int8x16_t *)((char *)v5 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
      v16 = v5 + 1;
      v17 = 0uLL;
      v18 = v15 & 0x7FFFFFFFFFFFFFF8;
      v19 = 0uLL;
      do
      {
        v17 = veorq_s8(v16[-1], v17);
        v19 = veorq_s8(*v16, v19);
        v16 += 2;
        v18 -= 8;
      }
      while (v18);
      v20 = veorq_s8(v19, v17);
      *(int8x8_t *)v20.i8 = veor_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      result = (v20.i32[0] ^ v20.i32[1]);
      if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      LODWORD(result) = 0;
      v7 = v5;
    }
    do
    {
      v21 = v7->i32[0];
      v7 = (int8x16_t *)((char *)v7 + 4);
      result = v21 ^ result;
    }
    while (v7 != v4);
    return result;
  }
  if (!a2)
    return *(unsigned int *)(a1[2] - 4);
  v8 = (unsigned int *)a1[1];
  result = *v8;
  v9 = a1[2] - (_QWORD)v8;
  if ((unint64_t)v9 >= 5)
  {
    v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 2)
      v10 = 2;
    v11 = v10 - 1;
    v12 = v8 + 1;
    do
    {
      while ((_DWORD)result)
      {
        v13 = *v12++;
        result = v13 ^ *(_DWORD *)(*(_QWORD *)(*a1 + 8)
                                 + 4
                                 * ((*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * (int)result)
                                   + *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * a2))
                                  % (*(_DWORD *)*a1 - 1)));
        if (!--v11)
          return result;
      }
      v14 = *v12++;
      result = v14;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_207CB8A54(uint64_t result, char **a2)
{
  uint64_t v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int8 *v17;
  int8x16_t *v18;
  BOOL v19;
  int8x16_t *v20;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  __int8 *v25;
  char *v26;

  v2 = result;
  v3 = *(_DWORD **)(result + 8);
  if (*v3)
  {
    v4 = a2[1];
    if (*(_DWORD *)v4)
    {
      v5 = a2[2];
      v6 = v5 - v4;
      v7 = *(_QWORD *)(result + 16) - (_QWORD)v3;
      if (v5 - v4 <= (unint64_t)v7)
      {
        v10 = v5 - v4;
        v6 = *(_QWORD *)(result + 16) - (_QWORD)v3;
        v9 = (int8x16_t *)a2[1];
        v4 = *(char **)(result + 8);
        v11 = v7 >> 2;
        v12 = v10 >> 2;
        v13 = v11 - (v10 >> 2);
        if (v13 >= v11)
        {
LABEL_21:
          sub_207CB8BF4((char **)result);
          return v2;
        }
      }
      else
      {
        v8 = a2[3];
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
        *(_OWORD *)(a2 + 1) = *(_OWORD *)(result + 8);
        a2[3] = *(char **)(result + 24);
        *(_QWORD *)(result + 8) = v4;
        *(_QWORD *)(result + 16) = v5;
        *(_QWORD *)(result + 24) = v8;
        v9 = (int8x16_t *)a2[1];
        v10 = a2[2] - (char *)v9;
        v11 = v6 >> 2;
        v12 = v10 >> 2;
        v13 = (v6 >> 2) - (v10 >> 2);
        if (v13 >= v6 >> 2)
          goto LABEL_21;
      }
      if ((unint64_t)v10 < 0x20)
        goto LABEL_18;
      v17 = &v4[v6 - v10];
      v18 = (int8x16_t *)&v4[v6];
      v19 = v17 >= &v9->i8[v10] || v9 >= v18;
      if (!v19)
        goto LABEL_18;
      v13 += v12 & 0xFFFFFFFFFFFFFFF8;
      v20 = v9 + 1;
      v21 = (int8x16_t *)&v4[4 * v11 + 16 + -4 * v12];
      v22 = v12 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v23 = veorq_s8(*v21, *v20);
        v21[-1] = veorq_s8(v21[-1], v20[-1]);
        *v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 8;
      }
      while (v22);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_18:
        v24 = v13 - v11;
        v25 = &v9->i8[4 * v12];
        v26 = &v4[4 * v13];
        do
        {
          *(_DWORD *)v26 ^= *(_DWORD *)&v25[4 * v24];
          v26 += 4;
          v19 = __CFADD__(v24++, 1);
        }
        while (!v19);
      }
      goto LABEL_21;
    }
  }
  else
  {
    v14 = *(char **)result;
    *(_QWORD *)result = *a2;
    *a2 = v14;
    v15 = *(char **)(result + 24);
    v16 = *(_OWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(result + 24) = a2[3];
    *(_OWORD *)(a2 + 1) = v16;
    a2[3] = v15;
  }
  return result;
}

void sub_207CB8BF4(char **a1)
{
  void **v1;
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  int v19;

  v2 = a1[1];
  v3 = a1[2];
  v1 = (void **)(a1 + 1);
  if (v2 != v3)
  {
    v5 = a1[2];
    v6 = a1[1];
    while (!*(_DWORD *)v6)
    {
      v6 += 4;
      if (v6 == v3)
      {
        v6 = a1[2];
        break;
      }
    }
    if (v6 != v2)
    {
      if (v6 != v3)
      {
        memmove(a1[1], v6, v3 - v6);
        sub_207CB90D0(v1, (a1[2] - v6) >> 2);
        return;
      }
      v19 = 0;
      if (a1[3] != v2)
      {
        v7 = v3;
        v8 = v2;
LABEL_20:
        v18 = v7 - v8;
        if (v18)
        {
          if (v18 >= 5)
            a1[2] = v8 + 4;
        }
        else
        {
          sub_207CB86B0((uint64_t)v1, 1uLL, (const float *)&v19);
        }
        return;
      }
      v9 = v3 - v2;
      v10 = (char *)operator new(0x80uLL);
      v7 = &v10[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v3 - v2 - 4) >= 0x2C)
      {
        v8 = &v10[v9 & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v3 - v8) >= 0x20)
        {
          v11 = ((unint64_t)(v9 - 4) >> 2) + 1;
          v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          v5 = &v3[-v12];
          v8 = &v7[-v12];
          v13 = &v10[4 * (v9 >> 2) - 16];
          v14 = v3 - 16;
          v15 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *(_OWORD *)v14;
            *((_OWORD *)v13 - 1) = *((_OWORD *)v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 32;
            v15 -= 8;
          }
          while (v15);
          if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            a1[1] = v8;
            a1[2] = v7;
            a1[3] = v10 + 128;
            if (v2)
            {
              operator delete(v2);
              v8 = a1[1];
              v7 = a1[2];
            }
            goto LABEL_20;
          }
        }
      }
      else
      {
        v8 = &v10[v9 & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v17 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v8 - 1) = v17;
        v8 -= 4;
      }
      while (v5 != v2);
      goto LABEL_18;
    }
  }
}

_QWORD *sub_207CB8DB4(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v25;

  v3 = *(_DWORD **)(a1 + 8);
  if (!*v3)
    return sub_207CB8F50(*(_QWORD *)a1, (_QWORD *)a1);
  v5 = *(_DWORD **)(a2 + 8);
  if (!*v5)
    return sub_207CB8F50(*(_QWORD *)a1, (_QWORD *)a1);
  sub_207CB90D0((void **)(a1 + 32), ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 2) + ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2) - 1);
  v6 = *(_DWORD **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 - (uint64_t)v6 >= 1)
    bzero(*(void **)(a1 + 32), 4 * (((unint64_t)(v7 - (_QWORD)v6) >> 2) - ((unint64_t)(v7 - (_QWORD)v6) > 3)) + 4);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 != v9)
  {
    v10 = *(char **)(a2 + 8);
    v11 = *(char **)(a2 + 16);
    v12 = v11 - v10;
    if (v11 != v10)
    {
      v13 = 0;
      v14 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1)
        v14 = 1;
      if ((unint64_t)((v8 - v9) >> 2) <= 1)
        v15 = 1;
      else
        v15 = (v8 - v9) >> 2;
      v16 = v6;
      do
      {
        v17 = v16;
        v18 = (int *)v10;
        v19 = v14;
        do
        {
          while (1)
          {
            v20 = *(int *)(v9 + 4 * v13);
            v22 = *v18++;
            v21 = v22;
            if (!(_DWORD)v20 || v21 == 0)
              break;
            *v17++ ^= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8)
                                + 4
                                * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4 * v21)
                                  + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4 * v20))
                                 % (**(_DWORD **)a1 - 1)));
            if (!--v19)
              goto LABEL_13;
          }
          *v17 = *v17;
          ++v17;
          --v19;
        }
        while (v19);
LABEL_13:
        ++v13;
        ++v16;
      }
      while (v13 != v15);
    }
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v25 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v25;
  sub_207CB8BF4((char **)a1);
  return (_QWORD *)a1;
}

_QWORD *sub_207CB8F50(uint64_t a1, _QWORD *a2)
{
  char **v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *a2 = a1;
  v3 = (char **)(a2 + 1);
  v4 = (char *)a2[1];
  v5 = (char *)a2[3];
  if (v5 != v4)
    goto LABEL_12;
  v6 = (_BYTE *)a2[2];
  v7 = (char *)operator new(0x80uLL);
  v8 = v6 - v5;
  v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v4 = v9;
  if (v6 != v5)
  {
    if ((unint64_t)(v8 - 4) < 0x2C)
    {
      v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v4 - 1) = v18;
        v4 -= 4;
      }
      while (v6 != v5);
      goto LABEL_10;
    }
    v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if (v6 - v7 - (v8 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v8 >> 2;
    v11 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v6[-v12];
    v4 = &v9[-v12];
    v14 = &v7[4 * v10 - 16];
    v15 = (__int128 *)(v6 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v6 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  a2[1] = v4;
  a2[2] = v9;
  a2[3] = v7 + 128;
  if (v5)
  {
    operator delete(v5);
    v4 = *v3;
  }
LABEL_12:
  v19 = (char *)a2[2];
  v20 = v19 - v4;
  if (v19 == v4)
  {
    sub_207CB9B90((uint64_t)v3, 1 - (v20 >> 2));
    v4 = (char *)a2[1];
    v21 = a2[2] - (_QWORD)v4;
    if (v21 < 1)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((unint64_t)v20 >= 5)
  {
    v19 = v4 + 4;
    a2[2] = v4 + 4;
  }
  v21 = v19 - v4;
  if (v21 >= 1)
LABEL_16:
    bzero(v4, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
LABEL_17:
  *(_DWORD *)v4 = 0;
  return a2;
}

void sub_207CB90D0(void **a1, unint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  unint64_t v21;

  v4 = *a1;
  if (a2 <= ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    v11 = (char *)*a1;
    goto LABEL_16;
  }
  v5 = 32;
  if (a2 > 0x20)
    v5 = a2;
  if (v5 >> 62)
    sub_207CA420C();
  v6 = a1[1];
  v7 = 4 * v5;
  v8 = (char *)operator new(4 * v5);
  v9 = v6 - v4;
  v10 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v11 = v10;
  if (v6 != v4)
  {
    if ((unint64_t)(v9 - 4) < 0x2C)
    {
      v11 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        v20 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v11 - 1) = v20;
        v11 -= 4;
      }
      while (v6 != v4);
      goto LABEL_14;
    }
    v11 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v6 - &v8[v9 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_13;
    v12 = v9 >> 2;
    v13 = ((unint64_t)(v9 - 4) >> 2) + 1;
    v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
    v15 = &v6[-v14];
    v11 = &v10[-v14];
    v16 = &v8[4 * v12 - 16];
    v17 = (__int128 *)(v6 - 16);
    v18 = v13 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19 = *v17;
      *((_OWORD *)v16 - 1) = *(v17 - 1);
      *(_OWORD *)v16 = v19;
      v16 -= 32;
      v17 -= 2;
      v18 -= 8;
    }
    while (v18);
    v6 = v15;
    if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
LABEL_14:
  *a1 = v11;
  a1[1] = v10;
  a1[2] = &v8[v7];
  if (v4)
  {
    operator delete(v4);
    v11 = (char *)*a1;
  }
LABEL_16:
  v21 = ((_BYTE *)a1[1] - v11) >> 2;
  if (a2 <= v21)
  {
    if (a2 < v21)
      a1[1] = &v11[4 * a2];
  }
  else
  {
    sub_207CB9B90((uint64_t)a1, a2 - v21);
  }
}

uint64_t *sub_207CB923C(uint64_t *a1, int a2)
{
  int *v4;
  int *i;
  uint64_t v6;

  if (a2 != 1)
  {
    if (!a2)
      return sub_207CB8F50(*a1, a1);
    v4 = (int *)a1[1];
    for (i = (int *)a1[2]; v4 != i; ++v4)
    {
      v6 = *v4;
      if ((_DWORD)v6)
        LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(*a1 + 8)
                                + 4
                                * ((*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * a2)
                                  + *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v6))
                                 % (*(_DWORD *)*a1 - 1)));
      *v4 = v6;
    }
    sub_207CB8BF4((char **)a1);
  }
  return a1;
}

void sub_207CB92DC(void **a1, unint64_t a2, int a3)
{
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  int v23;

  v23 = a3;
  v5 = *a1;
  if (a2 <= ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    v12 = (char *)*a1;
    goto LABEL_16;
  }
  v6 = 32;
  if (a2 > 0x20)
    v6 = a2;
  if (v6 >> 62)
    sub_207CA420C();
  v7 = a1[1];
  v8 = 4 * v6;
  v9 = (char *)operator new(4 * v6);
  v10 = v7 - v5;
  v11 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v12 = v11;
  if (v7 != v5)
  {
    if ((unint64_t)(v10 - 4) < 0x2C)
    {
      v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        v21 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v7 != v5);
      goto LABEL_14;
    }
    v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v7 - &v9[v10 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_13;
    v13 = v10 >> 2;
    v14 = ((unint64_t)(v10 - 4) >> 2) + 1;
    v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v7[-v15];
    v12 = &v11[-v15];
    v17 = &v9[4 * v13 - 16];
    v18 = (__int128 *)(v7 - 16);
    v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    v7 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
LABEL_14:
  *a1 = v12;
  a1[1] = v11;
  a1[2] = &v9[v8];
  if (v5)
  {
    operator delete(v5);
    v12 = (char *)*a1;
  }
LABEL_16:
  v22 = ((_BYTE *)a1[1] - v12) >> 2;
  if (a2 <= v22)
  {
    if (a2 < v22)
      a1[1] = &v12[4 * a2];
  }
  else
  {
    sub_207CB86B0((uint64_t)a1, a2 - v22, (const float *)&v23);
  }
}

uint64_t *sub_207CB9460(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  int8x16_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int32 v19;
  __int32 v20;
  int v21;
  int v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  int8x16_t v40;
  unint64_t v41;
  __int32 *v42;
  __int8 *v43;
  BOOL v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int8x16_t *v60;
  int8x16_t *v61;
  unint64_t v62;
  int8x16_t v63;
  unint64_t v64;
  char *v65;
  __int8 *v66;
  std::logic_error *exception;
  void *v69[2];
  __int128 v70;
  void *__p[2];
  uint64_t v72;

  if (!**(_DWORD **)(a2 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CB99D4(exception, "Divide by 0");
    goto LABEL_67;
  }
  sub_207CB8F50(*a1, (_QWORD *)a3);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16) - v6;
  v8 = *(int *)(v6 + 4 * (((uint64_t)(-1073741824 * v7) >> 32) + (v7 >> 2)));
  if (!(_DWORD)v8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CB99D4(exception, "a == 0");
LABEL_67:
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v9 = (int8x16_t *)a1[1];
  v10 = *(int *)(*(_QWORD *)(*a1 + 8) + 4 * (*(_DWORD *)*a1 + ~*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v8)));
  v72 = 0;
  v70 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v69 = 0u;
  v11 = a1[2] - (_QWORD)v9;
  v12 = v11 >> 2;
  v13 = v7 >> 2;
  if ((int)(v11 >> 2) < (int)v13)
    goto LABEL_62;
  while (v9->i32[0])
  {
    v19 = 0;
    if ((_DWORD)v10)
    {
      v20 = v9->i32[((uint64_t)(-1073741824 * v11) >> 32) + (v11 >> 2)];
      if (v20)
        v19 = *(_DWORD *)(*(_QWORD *)(*a1 + 8)
                        + 4
                        * ((*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v10) + *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v20))
                         % (*(_DWORD *)*a1 - 1)));
    }
    v21 = v12 - v13;
    v69[0] = (void *)*a1;
    if (v19)
      v22 = v21 + 1;
    else
      v22 = 1;
    sub_207CB90D0(&v69[1], v22);
    v23 = (int8x16_t *)v69[1];
    v24 = v70;
    v25 = v70 - (unint64_t)v69[1];
    if ((uint64_t)(v70 - (unint64_t)v69[1]) >= 1)
      bzero(v69[1], 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
    v23->i32[0] = v19;
    v26 = *(int8x16_t **)(a3 + 8);
    if (!v26->i32[0])
    {
      v34 = *(void **)a3;
      v35 = *((_QWORD *)&v70 + 1);
      *(void **)a3 = v69[0];
      *(_QWORD *)(a3 + 8) = v23;
      v69[0] = v34;
      v69[1] = v26;
      v36 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v35;
      v70 = v36;
      goto LABEL_33;
    }
    if (!v19)
      goto LABEL_33;
    v27 = *(_QWORD *)(a3 + 16);
    if (v25 <= (unint64_t)(v27 - (_QWORD)v26))
    {
      v29 = v25;
      v25 = v27 - (_QWORD)v26;
      v30 = v23;
      v23 = *(int8x16_t **)(a3 + 8);
      v31 = v25 >> 2;
      v32 = v29 >> 2;
      v33 = (v25 >> 2) - (v29 >> 2);
      if (v33 < v25 >> 2)
      {
LABEL_23:
        if ((unint64_t)v29 < 0x20 || &v23->i8[v25 - v29] < &v30->i8[v29] && v30 < (int8x16_t *)&v23->i8[v25])
          goto LABEL_29;
        v33 += v32 & 0xFFFFFFFFFFFFFFF8;
        v37 = v30 + 1;
        v38 = (int8x16_t *)((char *)v23 + 4 * v31 + -4 * v32 + 16);
        v39 = v32 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v40 = veorq_s8(*v38, *v37);
          v38[-1] = veorq_s8(v38[-1], v37[-1]);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        if (v32 != (v32 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_29:
          v41 = v33 - v31;
          v42 = &v23->i32[v33];
          v43 = &v30->i8[4 * v32];
          do
          {
            *v42++ ^= *(_DWORD *)&v43[4 * v41];
            v44 = __CFADD__(v41++, 1);
          }
          while (!v44);
        }
      }
    }
    else
    {
      v28 = *((_QWORD *)&v70 + 1);
      v69[1] = *(void **)(a3 + 8);
      *(_QWORD *)&v70 = v27;
      *((_QWORD *)&v70 + 1) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v28;
      v29 = v27 - (_QWORD)v26;
      v30 = v26;
      v31 = v25 >> 2;
      v32 = v29 >> 2;
      v33 = (v25 >> 2) - (v29 >> 2);
      if (v33 < v25 >> 2)
        goto LABEL_23;
    }
    sub_207CB8BF4((char **)a3);
LABEL_33:
    sub_207CB99F8(v69, a2);
    if (v19)
    {
      v45 = (int *)v69[1];
      v46 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
      if ((void *)v70 != v69[1])
      {
        if (v46 <= 1)
          v47 = 1;
        else
          v47 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
        v48 = v69[0];
        do
        {
          v49 = *v45;
          if ((_DWORD)v49)
            LODWORD(v49) = *(_DWORD *)(v48[1]
                                     + 4
                                     * ((*(_DWORD *)(v48[4] + 4 * v19) + *(_DWORD *)(v48[4] + 4 * v49))
                                      % (*(_DWORD *)v48 - 1)));
          *v45++ = v49;
          --v47;
        }
        while (v47);
      }
      sub_207CB92DC(&v69[1], v46 + v21, 0);
      sub_207CB8BF4((char **)v69);
    }
    else
    {
      sub_207CB8F50((uint64_t)v69[0], v69);
    }
    v9 = (int8x16_t *)a1[1];
    if (v9->i32[0])
    {
      v50 = (char *)v69[1];
      v18 = a1[2];
      if (*(_DWORD *)v69[1])
      {
        v51 = v70;
        v52 = v70 - (unint64_t)v69[1];
        v53 = v18 - (_QWORD)v9;
        if ((unint64_t)v70 - (unint64_t)v69[1] <= v18 - (uint64_t)v9)
        {
          v55 = v70 - (unint64_t)v69[1];
          v52 = v18 - (_QWORD)v9;
          v56 = (int8x16_t *)v69[1];
          v50 = (char *)a1[1];
          v57 = v53 >> 2;
          v58 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
          v59 = v57 - v58;
          if (v57 - v58 >= v57)
          {
LABEL_59:
            sub_207CB8BF4((char **)a1);
            v9 = (int8x16_t *)a1[1];
            v18 = a1[2];
            goto LABEL_6;
          }
        }
        else
        {
          v54 = *((_QWORD *)&v70 + 1);
          v69[1] = (void *)a1[1];
          *(_QWORD *)&v70 = v18;
          *((_QWORD *)&v70 + 1) = a1[3];
          a1[1] = (uint64_t)v50;
          a1[2] = v51;
          a1[3] = v54;
          v55 = v18 - (_QWORD)v9;
          v56 = v9;
          v57 = v52 >> 2;
          v58 = v55 >> 2;
          v59 = (v52 >> 2) - (v55 >> 2);
          if (v59 >= v52 >> 2)
            goto LABEL_59;
        }
        if ((unint64_t)v55 < 0x20 || &v50[v52 - v55] < &v56->i8[v55] && v56 < (int8x16_t *)&v50[v52])
          goto LABEL_56;
        v59 += v58 & 0xFFFFFFFFFFFFFFF8;
        v60 = v56 + 1;
        v61 = (int8x16_t *)&v50[4 * v57 + 16 + -4 * v58];
        v62 = v58 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v63 = veorq_s8(*v61, *v60);
          v61[-1] = veorq_s8(v61[-1], v60[-1]);
          *v61 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 8;
        }
        while (v62);
        if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_56:
          v64 = v59 - v57;
          v65 = &v50[4 * v59];
          v66 = &v56->i8[4 * v58];
          do
          {
            *(_DWORD *)v65 ^= *(_DWORD *)&v66[4 * v64];
            v65 += 4;
            v44 = __CFADD__(v64++, 1);
          }
          while (!v44);
        }
        goto LABEL_59;
      }
    }
    else
    {
      v14 = (void *)*a1;
      v15 = (int8x16_t *)v69[1];
      *a1 = (uint64_t)v69[0];
      a1[1] = (uint64_t)v15;
      v16 = v70;
      v69[0] = v14;
      v69[1] = v9;
      v17 = *((_OWORD *)a1 + 1);
      *((_OWORD *)a1 + 1) = v70;
      v18 = v16;
      v9 = v15;
      v70 = v17;
    }
LABEL_6:
    v11 = v18 - (_QWORD)v9;
    v12 = (unint64_t)(v18 - (_QWORD)v9) >> 2;
    v13 = (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2;
    if ((int)v12 < (int)v13)
      break;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_62:
  if (v69[1])
  {
    *(void **)&v70 = v69[1];
    operator delete(v69[1]);
  }
  return a1;
}

void sub_207CB9998(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207CB99AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207CB99C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CB9B50(&a9);
  _Unwind_Resume(a1);
}

std::logic_error *sub_207CB99D4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

_QWORD *sub_207CB99F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;

  v4 = a1 + 1;
  v5 = (_BYTE *)a1[1];
  v6 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2;
  if (v6 <= (uint64_t)(a1[3] - (_QWORD)v5) >> 2)
    goto LABEL_15;
  if (v6 <= 0x20)
    v6 = 32;
  if (v6 >> 62)
    sub_207CA420C();
  v7 = (_BYTE *)a1[2];
  v8 = 4 * v6;
  v9 = (char *)operator new(4 * v6);
  v10 = v7 - v5;
  v11 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v12 = v11;
  if (v7 != v5)
  {
    if ((unint64_t)(v10 - 4) < 0x2C)
    {
      v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_12:
        v21 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v7 != v5);
      goto LABEL_13;
    }
    v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v7[-(v10 & 0xFFFFFFFFFFFFFFFCLL)] - v9) < 0x20)
      goto LABEL_12;
    v13 = v10 >> 2;
    v14 = ((unint64_t)(v10 - 4) >> 2) + 1;
    v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v7[-v15];
    v12 = &v11[-v15];
    v17 = &v9[4 * v13 - 16];
    v18 = (__int128 *)(v7 - 16);
    v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    v7 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
LABEL_13:
  a1[1] = v12;
  a1[2] = v11;
  a1[3] = &v9[v8];
  if (v5)
    operator delete(v5);
LABEL_15:
  if (a1 != (_QWORD *)a2)
    sub_207CB9D2C(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

_QWORD *sub_207CB9B50(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_207CB9B90(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_207CA420C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_207CA3AB8();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *sub_207CB9D2C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_207CA420C();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

BOOL sub_207CB9E70(uint64_t a1, uint64_t *a2, int a3)
{
  char *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  std::runtime_error *exception;
  uint64_t v32;
  int v33;
  int v34;
  void *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  size_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  void *v70;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  std::logic_error *v77;
  std::logic_error *v78;
  std::logic_error *v79;
  void *__p[4];
  void *v81[2];
  uint64_t v82;
  void *v83[2];
  __int128 v84;
  void *v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  char *v105;
  __int128 v106;
  uint64_t v107;

  sub_207CBA7C4((uint64_t)&v90, a1, (uint64_t)a2);
  v87 = 0;
  v88 = 0;
  v89 = 0;
  if (!a3)
    goto LABEL_8;
  if (a3 < 0)
    sub_207CA420C();
  v6 = (char *)operator new(4 * a3);
  v7 = a3;
  bzero(v6, 4 * a3);
  v8 = 0;
  v9 = a3 - 1;
  v10 = 1;
  do
  {
    v11 = v8 + *(int *)(a1 + 4);
    v12 = *(_QWORD *)(a1 + 8);
    if (v11 >= (*(_QWORD *)(a1 + 16) - v12) >> 2)
      sub_207CBA8AC();
    v13 = sub_207CB8910(&v90, *(_DWORD *)(v12 + 4 * v11));
    *(_DWORD *)&v6[4 * v9] = v13;
    v10 &= v13 == 0;
    ++v8;
    --v9;
  }
  while (a3 != v8);
  if ((v10 & 1) != 0)
  {
    operator delete(v6);
LABEL_8:
    v14 = 1;
    goto LABEL_95;
  }
  v86 = 0;
  v84 = 0u;
  *(_OWORD *)v85 = 0u;
  *(_OWORD *)v83 = 0u;
  v82 = 0;
  *(_OWORD *)v81 = 0u;
  memset(__p, 0, sizeof(__p));
  v107 = 0;
  v105 = &v6[4 * a3];
  v106 = 0uLL;
  v103 = (char *)a1;
  *(_QWORD *)&v104 = v6;
  v87 = 0;
  v88 = 0;
  *((_QWORD *)&v104 + 1) = v105;
  v89 = 0;
  sub_207CB8BF4(&v103);
  v102 = 0;
  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = (char *)a1;
  sub_207CB90D0((void **)&v96, a3 + 1);
  v15 = (_DWORD *)v96;
  if ((uint64_t)(*((_QWORD *)&v96 + 1) - v96) >= 1)
    bzero((void *)v96, 4 * (((*((_QWORD *)&v96 + 1) - (_QWORD)v96) >> 2) - (*((_QWORD *)&v96 + 1) - (_QWORD)v96 > 3uLL)) + 4);
  *v15 = 1;
  sub_207CB8F50(a1, __p);
  sub_207CBA8C0(a1, v83);
  v16 = v104;
  v18 = *((_QWORD *)&v96 + 1);
  v17 = (_DWORD *)v96;
  if ((int)((*((_QWORD *)&v104 + 1) - (_QWORD)v104) >> 2) >= (int)((*((_QWORD *)&v96 + 1) - (_QWORD)v96) >> 2))
  {
    v21 = v103;
    v22 = v105;
    v103 = v95;
    v104 = v96;
    v105 = (char *)v97;
    v95 = v21;
    v96 = v16;
    v19 = *((_QWORD *)&v16 + 1);
    v20 = v16;
    *(_QWORD *)&v97 = v22;
  }
  else
  {
    v19 = *((_QWORD *)&v96 + 1);
    v20 = v96;
    v18 = *((_QWORD *)&v104 + 1);
    v17 = (_DWORD *)v104;
  }
  if (v7 >= 0)
    v23 = v7;
  else
    v23 = v7 + 1;
  v24 = v23 >> 1;
  while (v24 < (int)((unint64_t)(v18 - (_QWORD)v17) >> 2))
  {
    v25 = *(_OWORD *)__p;
    v26 = *(_OWORD *)&__p[2];
    *(_OWORD *)__p = *(_OWORD *)v83;
    *(_OWORD *)&__p[2] = v84;
    *(_OWORD *)v83 = v25;
    v84 = v26;
    v27 = v95;
    v28 = (char *)v97;
    v95 = v103;
    *(_QWORD *)&v96 = v17;
    *((_QWORD *)&v96 + 1) = v18;
    *(_QWORD *)&v97 = v105;
    v103 = v27;
    *(_QWORD *)&v104 = v20;
    *((_QWORD *)&v104 + 1) = v19;
    v105 = v28;
    if (!*v17)
      goto LABEL_29;
    sub_207CB9460((uint64_t *)&v103, (uint64_t)&v95, (uint64_t)&v99);
    sub_207CB8DB4((uint64_t)&v99, (uint64_t)__p);
    sub_207CB8A54((uint64_t)&v99, (char **)v83);
    v29 = *(_OWORD *)v83;
    v30 = v84;
    *(_OWORD *)v83 = v99;
    v84 = v100;
    v99 = v29;
    v100 = v30;
    v18 = *((_QWORD *)&v104 + 1);
    v17 = (_DWORD *)v104;
    v19 = *((_QWORD *)&v96 + 1);
    v20 = v96;
    if ((int)((*((_QWORD *)&v104 + 1) - (_QWORD)v104) >> 2) >= (int)((*((_QWORD *)&v96 + 1) - (_QWORD)v96) >> 2))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Division algorithm failed to reduce polynomial?");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  v32 = *(int *)(v84 - 4);
  if (!(_DWORD)v32)
  {
LABEL_29:
    v34 = 0;
    v35 = (void *)*((_QWORD *)&v97 + 1);
    if (!*((_QWORD *)&v97 + 1))
      goto LABEL_31;
    goto LABEL_30;
  }
  v33 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (*(_DWORD *)a1 + ~*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v32)));
  sub_207CB923C((uint64_t *)v83, v33);
  sub_207CB923C((uint64_t *)&v103, v33);
  __p[0] = v103;
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  *(_OWORD *)&__p[1] = v104;
  __p[3] = v105;
  v105 = 0;
  v104 = 0uLL;
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  *(_OWORD *)v81 = v106;
  v82 = v107;
  v107 = 0;
  v106 = 0uLL;
  v34 = 1;
  v35 = (void *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
LABEL_30:
    *(_QWORD *)&v98 = v35;
    operator delete(v35);
  }
LABEL_31:
  if ((_QWORD)v96)
  {
    *((_QWORD *)&v96 + 1) = v96;
    operator delete((void *)v96);
  }
  if ((_QWORD)v101)
  {
    *((_QWORD *)&v101 + 1) = v101;
    operator delete((void *)v101);
  }
  if (*((_QWORD *)&v99 + 1))
  {
    *(_QWORD *)&v100 = *((_QWORD *)&v99 + 1);
    operator delete(*((void **)&v99 + 1));
  }
  if ((_QWORD)v106)
  {
    *((_QWORD *)&v106 + 1) = v106;
    operator delete((void *)v106);
  }
  if ((_QWORD)v104)
  {
    *((_QWORD *)&v104 + 1) = v104;
    operator delete((void *)v104);
  }
  if (v34)
  {
    v36 = (char *)v83[1];
    v37 = v84 - (unint64_t)v83[1];
    v38 = ((unint64_t)v84 - (unint64_t)v83[1]) >> 2;
    v103 = 0;
    v104 = 0uLL;
    v39 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      if ((int)v38 <= 0)
        sub_207CA420C();
      v40 = v39;
      v41 = 4 * v39;
      v42 = operator new(v41);
      bzero(v42, v41);
      if ((_DWORD)v40 == 1)
        *v42 = *(_DWORD *)&v36[v37 - 8];
      v43 = *(_DWORD *)a1;
      if (*(int *)a1 < 2)
      {
        v44 = 0;
      }
      else
      {
        v44 = 0;
        v45 = 1;
        do
        {
          v47 = sub_207CB8910(v83, v45);
          v43 = *(_DWORD *)a1;
          if (!v47)
            v42[v44++] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (v43 + ~*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v45)));
        }
        while (++v45 < v43 && v44 < (int)v40);
      }
      if (v44 == (_DWORD)v40)
      {
        v48 = operator new(v41);
        bzero(v48, v41);
        v49 = 0;
        if (v40 <= 1)
          v50 = 1;
        else
          v50 = v40;
        do
        {
          v51 = (int)v42[v49];
          if (!(_DWORD)v51)
          {
            v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v77, "a == 0");
            v77->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v77, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
          }
          v52 = *(_QWORD *)(a1 + 32);
          v53 = v43 + ~*(_DWORD *)(v52 + 4 * v51);
          v54 = *(_QWORD *)(a1 + 8);
          v55 = *(_DWORD *)(v54 + 4 * v53);
          v56 = v55;
          v57 = v43 - 1;
          if (v55)
          {
            v58 = 0;
            v59 = 1;
            do
            {
              if (v49 == v58)
              {
                v60 = v59;
              }
              else
              {
                v61 = (int)v42[v58];
                if ((_DWORD)v61)
                  LODWORD(v61) = *(_DWORD *)(v54
                                           + 4 * ((*(_DWORD *)(v52 + 4 * v56) + *(_DWORD *)(v52 + 4 * v61)) % v57));
                v60 = 0;
                if ((_DWORD)v59)
                {
                  v62 = v61 ^ 1;
                  if (v62)
                    v60 = *(unsigned int *)(v54
                                          + 4
                                          * ((*(_DWORD *)(v52 + 4 * v62) + *(_DWORD *)(v52 + 4 * (int)v59)) % v57));
                }
              }
              ++v58;
              v59 = v60;
            }
            while (v50 != v58);
          }
          else
          {
            v63 = 0;
            LODWORD(v60) = 1;
            do
            {
              if (v49 != v63 && (_DWORD)v60)
                LODWORD(v60) = *(_DWORD *)(v54 + 4
                                               * ((*(_DWORD *)(v52 + 4) + *(_DWORD *)(v52 + 4 * (int)v60)) % v57));
              ++v63;
            }
            while (v50 != v63);
          }
          v64 = sub_207CB8910(__p, v56);
          if (!(_DWORD)v60)
          {
            v78 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v78, "a == 0");
            v78->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v78, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
          }
          v65 = 0;
          v43 = *(_DWORD *)a1;
          v66 = *(_QWORD *)(a1 + 32);
          v67 = *(_QWORD *)(a1 + 8);
          if (v64)
          {
            v68 = *(_DWORD *)(v67 + 4 * (v43 + ~*(_DWORD *)(v66 + 4 * (int)v60)));
            if (v68)
              v65 = *(_DWORD *)(v67 + 4 * ((*(_DWORD *)(v66 + 4 * v68) + *(_DWORD *)(v66 + 4 * v64)) % (v43 - 1)));
          }
          *((_DWORD *)v48 + v49) = v65;
          if (*(_DWORD *)(a1 + 4))
          {
            v69 = 0;
            if ((_DWORD)v56 && v65)
              v69 = *(_DWORD *)(v67 + 4 * ((*(_DWORD *)(v66 + 4 * v56) + *(_DWORD *)(v66 + 4 * v65)) % (v43 - 1)));
            *((_DWORD *)v48 + v49) = v69;
          }
          ++v49;
        }
        while (v49 != v50);
        v14 = 0;
        v72 = 0;
        v73 = *a2;
        v74 = (unint64_t)(a2[1] - *a2) >> 2;
        do
        {
          v75 = (int)v42[v72];
          if (!(_DWORD)v75)
          {
            v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v79, "a == 0");
            v79->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v79, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
          }
          v76 = ~*(_DWORD *)(v66 + 4 * v75) + v74;
          if (v76 < 0)
            break;
          *(_DWORD *)(v73 + 4 * v76) ^= *((_DWORD *)v48 + v72++);
          v14 = v72 >= v40;
        }
        while (v50 != v72);
        operator delete(v48);
        operator delete(v42);
        v70 = v81[0];
        if (!v81[0])
          goto LABEL_89;
        goto LABEL_88;
      }
      operator delete(v42);
    }
  }
  v14 = 0;
  v70 = v81[0];
  if (v81[0])
  {
LABEL_88:
    v81[1] = v70;
    operator delete(v70);
  }
LABEL_89:
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  if (v85[0])
  {
    v85[1] = v85[0];
    operator delete(v85[0]);
  }
  if (v83[1])
  {
    *(void **)&v84 = v83[1];
    operator delete(v83[1]);
  }
LABEL_95:
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  return v14;
}

void sub_207CBA6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;

  operator delete(v36);
  sub_207CB9B50(&a9);
  sub_207CB9B50(&a17);
  sub_207CB9B50(&a29);
  _Unwind_Resume(a1);
}

void sub_207CBA7A4()
{
  JUMPOUT(0x207CBA7B0);
}

uint64_t sub_207CBA7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v6 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = v5 - *(_QWORD *)a3;
  if (v5 == *(_QWORD *)a3)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_207CA420C();
    v8 = (char *)operator new(v5 - *(_QWORD *)a3);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v9;
  sub_207CB8BF4((char **)a1);
  return a1;
}

void sub_207CBA86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _QWORD *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *v12;
  if (*v12)
  {
    v11[5] = v14;
    operator delete(v14);
  }
  v15 = (void *)v11[1];
  if (v15)
  {
    v11[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CBA8AC()
{
  sub_207CA4018("vector");
}

_QWORD *sub_207CBA8C0(uint64_t a1, _QWORD *a2)
{
  char **v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *a2 = a1;
  v3 = (char **)(a2 + 1);
  v4 = (char *)a2[1];
  v5 = (char *)a2[3];
  if (v5 != v4)
    goto LABEL_12;
  v6 = (_BYTE *)a2[2];
  v7 = (char *)operator new(0x80uLL);
  v8 = v6 - v5;
  v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v4 = v9;
  if (v6 != v5)
  {
    if ((unint64_t)(v8 - 4) < 0x2C)
    {
      v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v4 - 1) = v18;
        v4 -= 4;
      }
      while (v6 != v5);
      goto LABEL_10;
    }
    v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if (v6 - v7 - (v8 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v8 >> 2;
    v11 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v6[-v12];
    v4 = &v9[-v12];
    v14 = &v7[4 * v10 - 16];
    v15 = (__int128 *)(v6 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v6 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  a2[1] = v4;
  a2[2] = v9;
  a2[3] = v7 + 128;
  if (v5)
  {
    operator delete(v5);
    v4 = *v3;
  }
LABEL_12:
  v19 = (char *)a2[2];
  v20 = v19 - v4;
  if (v19 == v4)
  {
    sub_207CB9B90((uint64_t)v3, 1 - (v20 >> 2));
    v4 = (char *)a2[1];
    v21 = a2[2] - (_QWORD)v4;
    if (v21 < 1)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((unint64_t)v20 >= 5)
  {
    v19 = v4 + 4;
    a2[2] = v4 + 4;
  }
  v21 = v19 - v4;
  if (v21 >= 1)
LABEL_16:
    bzero(v4, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
LABEL_17:
  *(_DWORD *)v4 = 1;
  return a2;
}

void sub_207CBAA44(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_253E50CC8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_253E50CC8))
  {
    *a1 = qword_253E50CC0;
  }
  else
  {
    sub_207CBAACC();
    __cxa_guard_release(&qword_253E50CC8);
    *a1 = qword_253E50CC0;
  }
}

void sub_207CBAAB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E50CC8);
  _Unwind_Resume(a1);
}

void sub_207CBAACC()
{
  void *__p[2];
  char v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_207CBF4E4(&qword_253E50CC0);
  v4 = (_QWORD *)qword_253E50CC0;
  sub_207CBEFD0(&v4, &v5);
  v2 = (_QWORD *)qword_253E50CC0;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_207CBEFE0(&v2, (uint64_t)__p, &v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_207CBDE48((uint64_t)v5);
  sub_207CBE2F8(v5, 6);
  sub_207CBE2F8(v3, 6);
}

void sub_207CBAB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CBAB98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BD022A8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_207CBACFC(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BD022B4](v13);
  return a1;
}

void sub_207CBACA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BD022B4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x207CBAC80);
}

void sub_207CBACE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_207CBACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_207CBAE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CBAEA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_207CBAF48((uint64_t *)(v2 + 8));
    operator delete((void *)v2);
  }
}

uint64_t *sub_207CBAF48(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_207CBAF48(v2 + 8);
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_207CBAFEC(uint64_t result, char a2)
{
  *(_QWORD *)result = off_24C06F730;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_207CBB00C(uint64_t a1, char *__format, ...)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  va_list *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  void *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  va_list __dst;
  size_t v51;
  int64_t v52;
  void *__p;
  char __str[512];
  uint64_t v55;
  va_list va;

  va_start(va, __format);
  v3 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v44 = operator new(0x118uLL);
    sub_207CA2878((uint64_t)v44);
    v45 = operator new(0x20uLL);
    *v45 = &unk_24C06F8F8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
    v46 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v44;
    *(_QWORD *)(a1 + 64) = v45;
    v3 = a1;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  __p = 0;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v49 = v3;
    v7 = 0;
    v8 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v8 = v6 + 1;
      else
        v8 *= 4;
      if (!v7)
      {
        v23 = operator new(0x18uLL);
        v7 = v23;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        if (v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            sub_207CA420C();
          v9 = (char *)operator new(v8);
          *v7 = v9;
          v7[2] = &v9[v8];
          bzero(v9, v8);
          v7[1] = &v9[v8];
          __p = v7;
          v12 = 1;
        }
        else
        {
          v9 = 0;
          __p = v23;
          v12 = 1;
        }
LABEL_28:
        if (!v12)
          v7[1] = &v9[v8];
        goto LABEL_31;
      }
      v9 = (char *)*v7;
      v10 = (char *)v7[1];
      v11 = (unint64_t)&v10[-*v7];
      v12 = v8 >= v11;
      v13 = v8 - v11;
      if (v8 <= v11)
        goto LABEL_28;
      v14 = v7[2];
      if (v14 - (uint64_t)v10 < v13)
        break;
      bzero(v10, v13);
      v7[1] = &v10[v13];
LABEL_31:
      v7 = __p;
      v4 = *(char **)__p;
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v8, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v8 > v5)
      {
        v3 = v49;
        goto LABEL_46;
      }
    }
    if ((v8 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v15 = v14 - (_QWORD)v9;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (char *)operator new(v17);
    v19 = &v18[v11];
    bzero(&v18[v11], v13);
    if (v10 == v9)
    {
LABEL_23:
      *v7 = v19;
      v7[1] = &v18[v8];
      v7[2] = &v18[v17];
      if (v9)
        operator delete(v9);
      goto LABEL_31;
    }
    if (v11 < 8 || (unint64_t)(v9 - v18) < 0x20)
    {
      v20 = v10;
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v18[v11 - 16];
      v26 = v10 - 16;
      v27 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v11 == v24)
        goto LABEL_22;
      if ((v11 & 0x18) == 0)
      {
        v19 -= v24;
        v20 = &v10[-v24];
LABEL_20:
        v21 = v19 - 1;
        do
        {
          v22 = *--v20;
          *v21-- = v22;
        }
        while (v20 != v9);
LABEL_22:
        v19 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v20 = &v10[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v29 = &v18[&v10[-v24] - v9 - 8];
    v30 = &v10[-v24 - 8];
    v31 = v24 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *(_QWORD *)v30;
      v30 -= 8;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_46:
  v33 = *(_QWORD *)(v3 + 56);
  if (v5 >= 0x17)
  {
    v35 = v3;
    v36 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v36 = v6 | 7;
    v37 = v36 + 1;
    p_dst = (va_list *)operator new(v36 + 1);
    v51 = v6;
    v52 = v37 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    v3 = v35;
    goto LABEL_52;
  }
  HIBYTE(v52) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v52 >= 0)
    v38 = &__dst;
  else
    v38 = (va_list *)__dst;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  sub_207CBAB98((_QWORD *)(v33 + 16), (uint64_t)v38, v39);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v40 = __p;
  if (__p)
  {
    v41 = *(char **)__p;
    if (*(_QWORD *)__p)
    {
      *((_QWORD *)__p + 1) = v41;
      operator delete(v41);
    }
    operator delete(v40);
  }
  return v3;
}

void sub_207CBB448(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_207CBB464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CBB478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207CBB534((void **)va);
  _Unwind_Resume(a1);
}

void sub_207CBB48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_207CBB534(&a17);
    _Unwind_Resume(a1);
  }
  sub_207CBB534(&a17);
  _Unwind_Resume(a1);
}

void **sub_207CBB534(void **a1)
{
  void **v2;
  void *v3;

  v2 = (void **)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v2[1] = v3;
      operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207CBB578(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_207CA40D8((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  if (v8 != v9)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 4) >= 0x333333333333334)
      sub_207CA420C();
    v10 = (char *)operator new(v8 - v9);
    v11 = 0;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = &v10[16 * ((v8 - v9) >> 4)];
    do
    {
      sub_207CBB578(&v10[v11], v9 + v11);
      v11 += 80;
    }
    while (v9 + v11 != v8);
    *(_QWORD *)(a1 + 64) = &v10[v11];
  }
  return a1;
}

void sub_207CBB6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CBB72C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_207CBB72C(v3 - 80);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207CBB7BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];

  v5 = *a2;
  *(_QWORD *)a1 = off_24C06F760;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = operator new(0x10uLL);
  v7 = operator new(4uLL);
  *v7 = 3;
  *v6 = v7;
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v9 = v8 + 1;
  *v8 = &off_24C06F8A8;
  v8[2] = 0;
  v8[3] = v7;
  v6[1] = v8;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_BYTE *)(a1 + 72) = 0;
  v11 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = v11 + 48;
  *((_DWORD *)v11 + 8) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 850045863;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_QWORD *)v11 + 18) = 0;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 17) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = v11 + 136;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)(a3 + 8);
  while (v12 != v13)
  {
    v14 = (std::__shared_weak_count *)v12[1];
    v18[0] = *v12;
    v18[1] = v14;
    *v12 = 0;
    v12[1] = 0;
    sub_207CBB9B8(a1, v18, 0);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 2;
  }
  return a1;
}

void sub_207CBB948(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;

  sub_207C99D78(v3);
  sub_207CBBB7C(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_207CBB9B8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;

  v6 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 40);
  v7 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v30;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207CC2388(v6, &v30);
  v11 = v10;
  v12 = v31;
  if (!v31)
    goto LABEL_8;
  v13 = (unint64_t *)&v31->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) == 0)
      return v11 & 1;
  }
  else
  {
LABEL_8:
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = a2[1];
  *(_QWORD *)&v29 = *a2;
  *((_QWORD *)&v29 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 72) = sub_207CBD850(v15, &v29, a3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a2;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_207CBDA64((uint64_t)&v30, a1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v11 & 1;
}

void sub_207CBBB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CBBB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CBBB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_207CBBB7C(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207CBBBF0(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, void **a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;

  v8 = *a2;
  *(_QWORD *)a1 = off_24C06F760;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 72) = 0;
  v14 = (char *)*a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v14 + 6) = 0;
    *((_QWORD *)v14 + 4) = 0;
    *((_QWORD *)v14 + 5) = v14 + 48;
    *((_DWORD *)v14 + 8) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_QWORD *)v14 + 7) = 0;
    *((_QWORD *)v14 + 8) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *((_QWORD *)v14 + 18) = 0;
    *((_QWORD *)v14 + 19) = 0;
    *((_QWORD *)v14 + 17) = 0;
    *((_QWORD *)v14 + 15) = 0;
    *((_QWORD *)v14 + 16) = v14 + 136;
  }
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_207CBBD00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;

  sub_207C99D78(v3);
  sub_207CBBB7C(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBBD2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = off_24C06F760;
  sub_207CC07D0((void **)(a1 + 80), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  v6 = (std::__shared_weak_count *)v5[1];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v5);
LABEL_12:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_207CBBE24(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CBBD2C(a1);
  operator delete(v1);
}

void sub_207CBBE38(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  void *v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  char *v48;
  unsigned __int8 *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57[2];
  void *v58;
  void *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  std::string v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  void *v72[2];
  int v73;
  void *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  __int128 __dst;
  void *v81;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_207CBC640((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_207CA40D8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v81 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_207CBC8CC(a2, &__dst);
    }
    v12 = sub_207CC2ADC(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v81) < 0)
LABEL_103:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = operator new(8uLL);
      *(_QWORD *)v13 = **a1;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      sub_207CBD0A8((uint64_t)v71, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      memset(&v68, 0, sizeof(v68));
      while (1)
      {
        v15 = sub_207CBD24C(v71, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v57[1];
        if (v57[1] >= v58)
        {
          v18 = sub_207CC08D4((char **)v57, (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v70) < 0)
          {
            sub_207CA40D8((_BYTE *)v57[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v57[1] + 2) = v70;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v57[1] = v18;
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v68.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v68, ".", 1uLL);
        if (v70 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v70 >= 0)
          v21 = HIBYTE(v70);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v68, (const std::string::value_type *)v20, v21);
        v22 = v78;
        if ((unint64_t)v78 < v79)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_207CA40D8(v78, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v14;
          }
          v78 = v22 + 24;
        }
        else
        {
          v78 = sub_207CC08D4(&v77, (uint64_t)&v68);
        }
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      v71[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v71 + *((_QWORD *)v71[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v72[0] = v23;
      v72[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v75 < 0)
        operator delete(v74);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD027B8](&v76);
      v24 = ((int)v78 - (int)v77) / 24 + 1;
      v25 = 24 * (((int)v78 - (int)v77) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_207CC2ADC(v11, (uint64_t)&v77[v25]);
        v25 -= 24;
        if (v26)
        {
          v27 = operator new(8uLL);
          *v27 = v26[5];
          operator delete(v13);
          v13 = v27;
          break;
        }
      }
      v28 = v77;
      if (v77)
      {
        v29 = v78;
        v30 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*(v29 - 1) < 0)
              operator delete(*((void **)v29 - 3));
            v29 -= 24;
          }
          while (v29 != v28);
          v30 = v77;
        }
        v78 = v28;
        operator delete(v30);
      }
      v31 = (void **)v57[0];
      if (v57[0])
      {
        v32 = (void **)v57[1];
        v33 = v57[0];
        if (v57[1] != v57[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v57[0];
        }
        v57[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)v72 = 0u;
      v73 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v13 + 80) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_207CBD3D0((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v57[0] = v35;
          sub_207CC2E70((uint64_t)v71, (uint64_t *)v57, v57);
          v36 = (_QWORD *)*v34;
          sub_207CC31C8(*(_QWORD **)(*(_QWORD *)v13 + 80), v34, (uint64_t)v57);
          v37 = v57[0];
          v57[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = (char *)operator new(0xA0uLL);
      sub_207CC32FC((uint64_t)&v63, (uint64_t)v71);
      v39 = v63;
      v40 = v64;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)v38 = v39;
      *((_QWORD *)v38 + 1) = v40;
      v41 = v65;
      v42 = v66;
      *((_QWORD *)v38 + 2) = v65;
      *((_QWORD *)v38 + 3) = v42;
      *((_DWORD *)v38 + 8) = v67;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v65 = 0;
        v66 = 0;
      }
      *((_QWORD *)v38 + 6) = 0;
      *((_QWORD *)v38 + 5) = v38 + 48;
      *((_QWORD *)v38 + 7) = 0;
      *((_QWORD *)v38 + 8) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *((_QWORD *)v38 + 18) = 0;
      *((_QWORD *)v38 + 19) = 0;
      *((_QWORD *)v38 + 17) = 0;
      *((_QWORD *)v38 + 15) = 0;
      *((_QWORD *)v38 + 16) = v38 + 136;
      v77 = v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v63;
      v63 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new(0x58uLL);
      v47 = *a1;
      v61 = *(_QWORD *)v13;
      v62 = v47;
      v48 = v77;
      v77 = 0;
      v60 = v48;
      sub_207CBBBF0((uint64_t)v46, (uint64_t *)&v62, &__dst, &v61, (void **)&v60);
      sub_207CC07D0((void **)&v60, 0);
      if (SHIBYTE(v81) < 0)
      {
        sub_207CA40D8(v57, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v57 = __dst;
        v58 = v81;
      }
      v59 = v46;
      v49 = sub_207CC3794((uint64_t)v11, (uint64_t)v57, (__int128 *)v57);
      v50 = v59;
      v59 = 0;
      if (v50)
        (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      v51 = *((_QWORD *)v49 + 5);
      v52 = *(_QWORD *)(*(_QWORD *)v13 + 80);
      v57[0] = (void *)v51;
      sub_207CC2E70(v52, (uint64_t *)v57, v57);
      v53 = v72[0];
      if (v72[0])
      {
        do
        {
          *(_QWORD *)(v53[2] + 40) = v51;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      *(_BYTE *)(v51 + 72) = sub_207CBD5B4(*(_QWORD *)(v51 + 80), *(_QWORD *)v13);
      *a3 = v51;
      sub_207CC07D0((void **)&v77, 0);
      v54 = v72[0];
      if (v72[0])
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v71[0];
      v71[0] = 0;
      if (v56)
        operator delete(v56);
      operator delete(v13);
      if (SHIBYTE(v81) < 0)
        goto LABEL_103;
    }
  }
  std::mutex::unlock(v7);
}

void sub_207CBC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_207CC07D0((void **)(v36 - 136), 0);
  sub_207CBD56C((uint64_t)&a33);
  operator delete(v34);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_207CBC640(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_253E50CD0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_253E50CD0))
  {
    sub_207C96EE8(&qword_253E50DB0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E50DB0, &dword_207C77000);
    __cxa_guard_release(qword_253E50CD0);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_253E50DC7 >= 0)
    v20 = &qword_253E50DB0;
  else
    v20 = (uint64_t *)qword_253E50DB0;
  if (byte_253E50DC7 >= 0)
    v21 = byte_253E50DC7;
  else
    v21 = qword_253E50DB8;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_207CBC8B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_253E50CD0);
  _Unwind_Resume(a1);
}

void sub_207CBC8CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *p_dst;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  void **v42;
  char *i;
  __int128 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  void *__p[2];
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  int v68;
  _BYTE v69[152];
  char *v70;
  char *v71;
  unint64_t v72;
  __int128 __dst;
  uint64_t v74;

  if (sub_207CBC640((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_207CA40D8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      a2[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v74 = *(_QWORD *)(a1 + 16);
  }
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(v74);
  v6 = *((_QWORD *)&__dst + 1);
  v7 = (__int128 *)__dst;
  if (v74 >= 0)
    v8 = HIBYTE(v74);
  else
    v8 = *((_QWORD *)&__dst + 1);
  if (v74 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 == v10)
          break;
        v14 = v13 - (char *)p_dst;
        if (v13 - (char *)p_dst == -1)
          break;
        if (v8 < v14)
          sub_207CA4004();
        sub_207CC1898(&__dst, v14, 1uLL);
        goto LABEL_9;
      }
      v12 = (__int128 *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v15 = 0;
    while (*((_BYTE *)p_dst + v15) != 46)
    {
      if (v8 == ++v15)
        goto LABEL_34;
    }
    if (v8 != v15 && !v15)
    {
      sub_207CC1898(&__dst, 0, 1uLL);
      v5 = HIBYTE(v74);
      v6 = *((_QWORD *)&__dst + 1);
      v7 = (__int128 *)__dst;
    }
  }
LABEL_34:
  if ((v5 & 0x80u) == 0)
    v16 = &__dst;
  else
    v16 = v7;
  if ((v5 & 0x80u) == 0)
    v17 = v5;
  else
    v17 = v6;
  v18 = (char *)v16 - 1;
  do
  {
    if (!v17)
    {
      v17 = -1;
      if ((v5 & 0x80) != 0)
        goto LABEL_47;
LABEL_44:
      v6 = v5;
      if (v17 == v5 - 1)
      {
LABEL_48:
        sub_207CC1898(&__dst, v6, 1uLL);
        LODWORD(v5) = HIBYTE(v74);
        if (SHIBYTE(v74) < 0)
          goto LABEL_51;
      }
      if (!(_DWORD)v5)
        goto LABEL_57;
      v20 = v5;
      v21 = &__dst;
LABEL_53:
      v22 = (__int128 *)((char *)v21 + v20);
      v23 = v20 - 1;
      while (!sub_207CC1928(*(char *)v21))
      {
        v21 = (__int128 *)((char *)v21 + 1);
        --v23;
        if (v21 == v22)
          goto LABEL_66;
      }
      if (v21 == v22 || (__int128 *)((char *)v21 + 1) == v22)
      {
        v22 = v21;
      }
      else
      {
        v24 = 1;
        v22 = v21;
        do
        {
          if (!sub_207CC1928(*((char *)v21 + v24)))
          {
            *(_BYTE *)v22 = *((_BYTE *)v21 + v24);
            v22 = (__int128 *)((char *)v22 + 1);
          }
          ++v24;
          --v23;
        }
        while (v23);
      }
LABEL_66:
      v25 = HIBYTE(v74);
      v26 = (__int128 *)__dst;
      v27 = (char *)(__dst + *((_QWORD *)&__dst + 1));
      v28 = &__dst;
      if (v74 < 0)
      {
        v25 = *((_QWORD *)&__dst + 1);
        v28 = (__int128 *)__dst;
      }
      else
      {
        v27 = (char *)&__dst + HIBYTE(v74);
      }
      v29 = (char *)v22 - (char *)v28;
      if (v25 < (char *)v22 - (char *)v28)
        sub_207CA4004();
      if (v27 - (char *)v22 == -1)
      {
        if (SHIBYTE(v74) < 0)
        {
          *((_QWORD *)&__dst + 1) = (char *)v22 - (char *)v28;
        }
        else
        {
          HIBYTE(v74) = v29 & 0x7F;
          v26 = &__dst;
        }
        *((_BYTE *)v26 + v29) = 0;
      }
      else
      {
        sub_207CC1898(&__dst, v29, v27 - (char *)v22);
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      sub_207CBD0A8((uint64_t)v58, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      while (1)
      {
        v31 = sub_207CBD24C(v58, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
          break;
        v32 = v71;
        if ((unint64_t)v71 < v72)
        {
          if (SHIBYTE(v57) < 0)
          {
            sub_207CA40D8(v71, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v30 = *(_OWORD *)__p;
            *((_QWORD *)v71 + 2) = v57;
            *(_OWORD *)v32 = v30;
          }
          v71 = v32 + 24;
        }
        else
        {
          v71 = sub_207CC08D4(&v70, (uint64_t)__p);
        }
      }
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      v33 = *MEMORY[0x24BEDB7F0];
      v58[0] = v33;
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
      v59 = v34;
      v60 = MEMORY[0x24BEDB848] + 16;
      if (v66 < 0)
        operator delete(v65);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD027B8](v69);
      v36 = HIBYTE(v74);
      if (v74 < 0)
        v36 = *((_QWORD *)&__dst + 1);
      if (!v36)
      {
        *((_BYTE *)a2 + 23) = 1;
        *(_WORD *)a2 = 95;
        v40 = v70;
        if (!v70)
          goto LABEL_148;
        goto LABEL_141;
      }
      sub_207CA2878((uint64_t)v58);
      v37 = v70;
      v38 = v71;
      if (v70 != v71)
      {
        if (v70[23] < 0)
        {
          sub_207CA40D8(__p, *(void **)v70, *((_QWORD *)v70 + 1));
        }
        else
        {
          v39 = *(_OWORD *)v70;
          v57 = *((_QWORD *)v70 + 2);
          *(_OWORD *)__p = v39;
        }
        if (v57 >= 0)
          v41 = HIBYTE(v57);
        else
          v41 = (uint64_t)__p[1];
        if (v41)
        {
          if (v57 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          sub_207CBAB98(&v59, (uint64_t)v42, v41);
        }
        else
        {
          sub_207CBAB98(&v59, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v57) < 0)
          operator delete(__p[0]);
        for (i = v37 + 24; i != v38; i += 24)
        {
          if (i[23] < 0)
          {
            sub_207CA40D8(__p, *(void **)i, *((_QWORD *)i + 1));
          }
          else
          {
            v44 = *(_OWORD *)i;
            v57 = *((_QWORD *)i + 2);
            *(_OWORD *)__p = v44;
          }
          sub_207CBAB98(&v59, (uint64_t)".", 1);
          if (v57 >= 0)
            v45 = HIBYTE(v57);
          else
            v45 = (uint64_t)__p[1];
          if (v45)
          {
            if (v57 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            sub_207CBAB98(&v59, (uint64_t)v46, v45);
          }
          else
          {
            sub_207CBAB98(&v59, (uint64_t)"_", 1);
          }
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);
        }
      }
      if ((v68 & 0x10) != 0)
      {
        v49 = v67;
        v47 = v34;
        if (v67 < v64)
        {
          v67 = v64;
          v49 = v64;
        }
        v50 = v63;
        v48 = v49 - (_QWORD)v63;
        if (v49 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_152;
      }
      else
      {
        v47 = v34;
        if ((v68 & 8) == 0)
        {
          v48 = 0;
          *((_BYTE *)a2 + 23) = 0;
          goto LABEL_138;
        }
        v50 = v61;
        v48 = v62 - (_QWORD)v61;
        if ((unint64_t)(v62 - (_QWORD)v61) >= 0x7FFFFFFFFFFFFFF8)
LABEL_152:
          sub_207C95C50();
      }
      if (v48 >= 0x17)
      {
        v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v51 = v48 | 7;
        v52 = v51 + 1;
        v53 = operator new(v51 + 1);
        a2[1] = v48;
        a2[2] = v52 | 0x8000000000000000;
        *a2 = v53;
        a2 = v53;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v48;
        if (!v48)
        {
LABEL_138:
          *((_BYTE *)a2 + v48) = 0;
          v58[0] = v33;
          *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
          v59 = v47;
          v60 = MEMORY[0x24BEDB848] + 16;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x20BD027B8](v69);
          v40 = v70;
          if (!v70)
          {
LABEL_148:
            if (v74 < 0)
              goto LABEL_149;
            return;
          }
LABEL_141:
          v54 = v71;
          v55 = v40;
          if (v71 != v40)
          {
            do
            {
              if (*(v54 - 1) < 0)
                operator delete(*((void **)v54 - 3));
              v54 -= 24;
            }
            while (v54 != v40);
            v55 = v70;
          }
          v71 = v40;
          operator delete(v55);
          goto LABEL_148;
        }
      }
      memmove(a2, v50, v48);
      goto LABEL_138;
    }
    v19 = v18[v17--];
  }
  while (v19 != 46);
  if ((v5 & 0x80) == 0)
    goto LABEL_44;
LABEL_47:
  if (v17 == v6 - 1)
    goto LABEL_48;
LABEL_51:
  v20 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v21 = (__int128 *)__dst;
    goto LABEL_53;
  }
LABEL_57:
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if ((v5 & 0x80) != 0)
LABEL_149:
    operator delete((void *)__dst);
}

void sub_207CBD01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_207CA29B0((uint64_t)&a18);
  sub_207C99DE0((void **)(v18 - 136));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_207CBD0A8(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = MEMORY[0x24BEDB858];
  v7 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  v8 = a1 + 16;
  v9 = a1 + 24;
  v10 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v12;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v13, (void *)(a1 + 24));
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v10[4];
  v15 = v10[5];
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = v10[1];
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + *(_QWORD *)(v16 - 24)) = v10[6];
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v17 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  if ((__int128 *)(a1 + 88) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_207CC2180((_QWORD *)(a1 + 88), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v18 = *a2;
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 88) = v18;
    }
  }
  sub_207CC2D08(v9);
  return a1;
}

void sub_207CBD1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CBD24C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x20BD02200](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_207CBD378(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x207CBD344);
  }
  __cxa_rethrow();
}

void sub_207CBD3BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_207CBD3D0(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

uint64_t sub_207CBD56C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL sub_207CBD5B4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _BOOL8 v18;
  __int128 v20;
  std::mutex *v21;

  v4 = (std::mutex *)(*(_QWORD *)(a2 + 80) + 64);
  std::mutex::lock(v4);
  v5 = (std::mutex *)(a1 + 64);
  v21 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD **)(v6 + 128);
  v8 = (_QWORD *)(v6 + 136);
  if (v7 != (_QWORD *)(v6 + 136))
  {
    while (1)
    {
      v9 = v7[6];
      *(_QWORD *)&v20 = v7[5];
      *((_QWORD *)&v20 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_207CBD850(a1, &v20, (uint64_t)&v21);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (!*((_QWORD *)&v20 + 1))
        goto LABEL_11;
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (_QWORD *)v7[1];
        if (!v15)
        {
          do
          {
LABEL_15:
            v16 = (_QWORD *)v7[2];
            v17 = *v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)v7[1];
        if (!v15)
          goto LABEL_15;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v7 = v16;
      if (v16 == v8)
      {
        v5 = v21;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 152) != 0;
  std::mutex::unlock(v5);
  std::mutex::unlock(v4);
  return v18;
}

void sub_207CBD6F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBD708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  std::mutex *v12;

  sub_207C99D78((uint64_t)&a10);
  std::mutex::unlock(a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBD72C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::mutex *v10;

  v10 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v10);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  *a2 = 0;
  a2[1] = 0;
  v5 = sub_207CBB9B8(a1, v9, (uint64_t)&v10);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::unlock(v10);
  return v5;
}

void sub_207CBD7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  sub_207C99D78((uint64_t)&a10);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBD7E8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_207CBD850(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t **v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  __int128 v14;
  uint64_t **v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;

  if (a3)
  {
    v5 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v5;
    v23 = v5;
    v6 = sub_207CC2388((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 && *((_BYTE *)v6[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v13 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    v14 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v14;
    v23 = v14;
    v15 = sub_207CC2388((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v17 = v16;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v17 && *((_BYTE *)v15[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
    std::mutex::unlock(v13);
  }
  return v12 != 0;
}

void sub_207CBDA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_207CBD7E8((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_207CBDA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_207CBD7E8((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBDA64(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v2[2];
      v5 = v3[1];
      v6 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)&v12 = *v3;
      *((_QWORD *)&v12 + 1) = v5;
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_BYTE *)(v4 + 72) = sub_207CBD850(v6, &v12, 0);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      result = sub_207CBDA64(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_207CBDB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_208216F8C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207CBDB40(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  std::mutex *v7;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  v7 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v7);
  v5 = sub_207CBDBE8(a1, a2, (uint64_t)&v7);
  std::mutex::unlock(v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_207CBDBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_207CBDBD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CBDBE8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 80);
  result = (uint64_t *)v4[6];
  if (result)
  {
    v8 = v4 + 6;
    v9 = (_QWORD *)v4[6];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v4 + 6)
    {
      return 0;
    }
    else if (v8[4] <= a2)
    {
      v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v15 = v8;
        do
        {
          v14 = (uint64_t *)v15[2];
          v16 = *v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if ((uint64_t *)v4[5] == v8)
        v4[5] = v14;
      --v4[7];
      sub_207CC2668(result, v8);
      v17 = (std::__shared_weak_count *)v8[6];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v8);
      v20 = *(_QWORD *)(a1 + 80);
      if (a3)
      {
        sub_207CC0AA8(*(_QWORD **)(a1 + 80), a2);
        v21 = *(_QWORD *)(v20 + 152);
      }
      else
      {
        v22 = (std::mutex *)(v20 + 64);
        std::mutex::lock((std::mutex *)(v20 + 64));
        sub_207CC0AA8((_QWORD *)v20, a2);
        v21 = *(_QWORD *)(v20 + 152);
        std::mutex::unlock(v22);
      }
      *(_BYTE *)(a1 + 72) = v21 != 0;
      v23 = a2;
      sub_207CBDDAC((uint64_t)&v23, a1);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_207CBDD98(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBDDAC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (unint64_t *)result;
    do
    {
      v4 = v2[2];
      v5 = *v3;
      v6 = *(_QWORD *)(v4 + 80);
      v7 = (std::mutex *)(v6 + 64);
      std::mutex::lock((std::mutex *)(v6 + 64));
      sub_207CC0AA8((_QWORD *)v6, v5);
      v8 = *(_QWORD *)(v6 + 152);
      std::mutex::unlock(v7);
      *(_BYTE *)(v4 + 72) = v8 != 0;
      result = sub_207CBDDAC(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_207CBDE34(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBDE48(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v2);
  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_207CBDBE8(a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32), (uint64_t)&v4);
  }
  std::mutex::unlock(v4);
  std::mutex::unlock(v2);
}

void sub_207CBDEC0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBDED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_207CBDEF0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_207CBE000((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56));
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD **)(v5 + 40);
  v7 = (_QWORD *)(v5 + 48);
  if (v6 != (_QWORD *)(v5 + 48))
  {
    v8 = (_QWORD *)a2[1];
    do
    {
      if ((unint64_t)v8 >= a2[2])
      {
        v8 = sub_207CC0BC8((uint64_t)a2, (__int128 *)(v6 + 5));
      }
      else
      {
        v9 = v6[6];
        *v8 = v6[5];
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v8 += 2;
      }
      a2[1] = v8;
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  std::mutex::unlock(v4);
}

void sub_207CBDFE0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void **v2;

  sub_207CBE108(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBE000(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_207CA420C();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

void **sub_207CBE108(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_207CBE1A0(uint64_t a1, const char *a2, int a3, unint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v8 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = v9 + 128;
  v11 = 40;
  if (a3)
    v11 = 128;
  else
    v10 = v9 + 40;
  if (!a4)
    goto LABEL_28;
  v12 = *(_QWORD **)(v10 + 8);
  if (!v12)
    goto LABEL_28;
  v13 = (_QWORD *)(v10 + 8);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a4;
    if (v14 >= a4)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)(v10 + 8) || (v17 = v13[4], v17 > a4))
  {
LABEL_28:
    if (!a2)
      goto LABEL_30;
    v18 = *(_QWORD **)(v9 + v11);
    v19 = (_QWORD *)(v10 + 8);
    if (v18 == (_QWORD *)(v10 + 8))
      goto LABEL_30;
    while (1)
    {
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18[4] + 24))(v18[4]);
      if (v20 == a2 || !strcmp(v20, a2))
        break;
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v23 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v23);
      }
      v18 = v22;
      if (v22 == v19)
        goto LABEL_30;
    }
    if (v18 == v19)
LABEL_30:
      v17 = 0;
    else
      v17 = v18[4];
  }
  std::mutex::unlock(v8);
  return v17;
}

void sub_207CBE2E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBE2F8(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  _QWORD *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t i;
  void **v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *__p[2];
  __int128 v50;
  __int128 v51;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = operator new(0x10uLL);
  v7 = (std::__shared_weak_count_vtbl *)operator new(4uLL);
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = v7;
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06F8A8;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = v8;
  v9 = (_QWORD *)a1[6];
  a1[6] = v6;
  if (!v9)
  {
LABEL_9:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = 0;
    v18 = (std::__shared_weak_count *)a1[8];
    a1[7] = v7;
    a1[8] = v8;
    if (!v18)
      goto LABEL_20;
    goto LABEL_16;
  }
  v10 = (std::__shared_weak_count *)v9[1];
  if (!v10)
    goto LABEL_8;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(v9);
    v19 = a1[6];
    v7 = *(std::__shared_weak_count_vtbl **)v19;
    v8 = *(std::__shared_weak_count **)(v19 + 8);
    if (v8)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    operator delete(v9);
    v13 = a1[6];
    v7 = *(std::__shared_weak_count_vtbl **)v13;
    v8 = *(std::__shared_weak_count **)(v13 + 8);
    if (v8)
      goto LABEL_9;
  }
  v17 = 1;
  v18 = (std::__shared_weak_count *)a1[8];
  a1[7] = v7;
  a1[8] = v8;
  if (!v18)
    goto LABEL_20;
LABEL_16:
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_20:
  if ((v17 & 1) == 0)
  {
    v22 = (unint64_t *)&v8->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v24 = *(_QWORD **)(a1[10] + 16);
  *(_OWORD *)__p = 0u;
  v50 = 0u;
  v51 = 0u;
  v25 = 0;
  if (v24)
  {
    v26 = v24;
    do
    {
      ++v25;
      v26 = (_QWORD *)*v26;
    }
    while (v26);
  }
  sub_207CC3C18(__p, v24, v25);
  i = *((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v28 = (void **)__p[1];
    v29 = v51;
    while (1)
    {
      v30 = *(uint64_t *)((char *)v28 + ((v29 >> 6) & 0x3FFFFFFFFFFFFF8));
      v31 = v29 & 0x1FF;
      v32 = *(_QWORD **)(v30 + 8 * v31);
      if (!v32[6])
      {
        v34 = a1[7];
        v33 = a1[8];
        if (v33)
        {
          v35 = (unint64_t *)(v33 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = (std::__shared_weak_count *)v32[8];
        v32[7] = v34;
        v32[8] = v33;
        if (!v37)
          goto LABEL_41;
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          v40 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v30 + 8 * v31) + 80) + 16);
          for (i = *((_QWORD *)&v51 + 1); v40; v40 = (_QWORD *)*v40)
          {
LABEL_46:
            v41 = (char *)__p[1];
            if ((void *)v50 == __p[1])
              v42 = 0;
            else
              v42 = (((_QWORD)v50 - (unint64_t)__p[1]) << 6) - 1;
            v43 = v51 + i;
            if (v42 == v43)
            {
              sub_207CC0D28((uint64_t)__p);
              v41 = (char *)__p[1];
              v43 = *((_QWORD *)&v51 + 1) + v51;
            }
            *(_QWORD *)(*(_QWORD *)&v41[(v43 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v43 & 0x1FF)) = v40[2];
            i = ++*((_QWORD *)&v51 + 1);
          }
        }
        else
        {
LABEL_41:
          v40 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v30 + 8 * v31) + 80) + 16);
          i = *((_QWORD *)&v51 + 1);
          if (v40)
            goto LABEL_46;
        }
      }
      v28 = (void **)__p[1];
      --i;
      v29 = v51 + 1;
      *(_QWORD *)&v51 = v29;
      *((_QWORD *)&v51 + 1) = i;
      if (v29 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v28 = (void **)((char *)__p[1] + 8);
        v29 = v51 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v51 = v51 - 512;
        i = *((_QWORD *)&v51 + 1);
      }
      if (!i)
        goto LABEL_52;
    }
  }
  v28 = (void **)__p[1];
LABEL_52:
  v44 = (void **)v50;
  *((_QWORD *)&v51 + 1) = 0;
  v45 = v50 - (_QWORD)v28;
  if ((_QWORD)v50 - (_QWORD)v28 >= 0x11uLL)
  {
    do
    {
      operator delete(*v28);
      v44 = (void **)v50;
      v28 = (void **)((char *)__p[1] + 8);
      __p[1] = v28;
      v45 = v50 - (_QWORD)v28;
    }
    while ((_QWORD)v50 - (_QWORD)v28 > 0x10uLL);
  }
  v46 = v45 >> 3;
  if (v46 == 1)
  {
    v47 = 256;
  }
  else
  {
    if (v46 != 2)
      goto LABEL_59;
    v47 = 512;
  }
  *(_QWORD *)&v51 = v47;
LABEL_59:
  if (v28 != v44)
  {
    do
    {
      v48 = *v28++;
      operator delete(v48);
    }
    while (v28 != v44);
    if ((void *)v50 != __p[1])
      *(_QWORD *)&v50 = v50 + (((unint64_t)__p[1] - v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_207CBE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_207CBE768(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;

  operator delete(v2);
  operator delete(v3);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBE78C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  operator delete(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBE7A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_207CC46C8((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBE7D8(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;

  if (a1[6])
  {
    if (!a1[5])
      return 0;
    v2 = (std::mutex *)(a1[1] + 56);
    std::mutex::lock(v2);
    v3 = a1[5];
    v5 = *(_QWORD *)(v3 + 56);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (std::__shared_weak_count *)a1[8];
    a1[7] = v5;
    a1[8] = v4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD **)(a1[10] + 16);
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v12 = 0;
    if (v11)
    {
      v13 = v11;
      do
      {
        ++v12;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    sub_207CC3C18(__p, v11, v12);
    i = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v15 = (char *)__p[1];
      v16 = v44;
      do
      {
        v17 = *(_QWORD *)&v15[(v16 >> 6) & 0x3FFFFFFFFFFFFF8];
        v18 = v16 & 0x1FF;
        v19 = *(_QWORD **)(v17 + 8 * v18);
        if (!v19[6])
        {
          v21 = a1[7];
          v20 = a1[8];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)v19[8];
          v19[7] = v21;
          v19[8] = v20;
          if (!v24)
            goto LABEL_27;
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            for (i = *((_QWORD *)&v44 + 1); v27; v27 = (_QWORD *)*v27)
            {
LABEL_32:
              v28 = (char *)__p[1];
              if ((void *)v43 == __p[1])
                v29 = 0;
              else
                v29 = (((_QWORD)v43 - (unint64_t)__p[1]) << 6) - 1;
              v30 = v44 + i;
              if (v29 == v30)
              {
                sub_207CC0D28((uint64_t)__p);
                v28 = (char *)__p[1];
                v30 = *((_QWORD *)&v44 + 1) + v44;
              }
              *(_QWORD *)(*(_QWORD *)&v28[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v27[2];
              i = ++*((_QWORD *)&v44 + 1);
            }
          }
          else
          {
LABEL_27:
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            i = *((_QWORD *)&v44 + 1);
            if (v27)
              goto LABEL_32;
          }
        }
        v15 = (char *)__p[1];
        --i;
        v16 = v44 + 1;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = i;
        if (v16 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          v15 = (char *)__p[1] + 8;
          v16 = v44 - 512;
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v44 = v44 - 512;
          i = *((_QWORD *)&v44 + 1);
        }
      }
      while (i);
    }
    v31 = (_QWORD *)a1[6];
    a1[6] = 0;
    if (v31)
    {
      v32 = (std::__shared_weak_count *)v31[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      operator delete(v31);
    }
    v35 = (void **)__p[1];
    v36 = (void **)v43;
    *((_QWORD *)&v44 + 1) = 0;
    v37 = v43 - (unint64_t)__p[1];
    if ((unint64_t)v43 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v36 = (void **)v43;
        v35 = (void **)((char *)__p[1] + 8);
        __p[1] = v35;
        v37 = v43 - (_QWORD)v35;
      }
      while ((_QWORD)v43 - (_QWORD)v35 > 0x10uLL);
    }
    v38 = v37 >> 3;
    if (v38 == 1)
    {
      v39 = 256;
    }
    else
    {
      if (v38 != 2)
        goto LABEL_52;
      v39 = 512;
    }
    *(_QWORD *)&v44 = v39;
LABEL_52:
    if (v35 != v36)
    {
      do
      {
        v41 = *v35++;
        operator delete(v41);
      }
      while (v35 != v36);
      if ((void *)v43 != __p[1])
        *(_QWORD *)&v43 = v43 + (((unint64_t)__p[1] - v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    std::mutex::unlock(v2);
  }
  return 1;
}

void sub_207CBEB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_207CBEB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_207CC46C8((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_207CBEBB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  sub_207CBEC10(a1, a2);
  std::mutex::unlock(v4);
}

void sub_207CBEBFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CBEC10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *i;
  void *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_DWORD ***)(a1 + 48);
  if (v4)
  {
    v5 = **v4 - 1;
    if (v5 > 5)
    {
      v6 = "{error}";
      v7 = strlen("{error}");
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
    }
    else
    {
      v6 = off_24C06F988[v5];
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
        sub_207C95C50();
    }
  }
  else
  {
    v6 = "NONE";
    v7 = strlen("NONE");
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v21 + 1) = v8;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&v21 = v9;
LABEL_13:
    memcpy(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v22) = v7;
  v9 = &v21;
  if (v7)
    goto LABEL_13;
  LOBYTE(v21) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_14:
  sub_207CA40D8((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_15:
  v13 = (_BYTE *)(a2 + 24);
  if (SHIBYTE(v22) < 0)
  {
    v16 = (void *)v21;
    sub_207CA40D8(v13, (void *)v21, *((unint64_t *)&v21 + 1));
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    operator delete(v16);
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16); i; i = (_QWORD *)*i)
    {
LABEL_21:
      while (1)
      {
        sub_207CBEC10(&v21, i[2]);
        v17 = *(_QWORD *)(a2 + 64);
        if (v17 < *(_QWORD *)(a2 + 72))
          break;
        *(_QWORD *)(a2 + 64) = sub_207CC1608(v14, (uint64_t)&v21);
        sub_207CBB72C((uint64_t)&v21);
        i = (_QWORD *)*i;
        if (!i)
          return;
      }
      if (SHIBYTE(v22) < 0)
      {
        sub_207CA40D8(*(_BYTE **)(a2 + 64), (void *)v21, *((unint64_t *)&v21 + 1));
      }
      else
      {
        v18 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        *(_OWORD *)v17 = v18;
      }
      v19 = (_BYTE *)(v17 + 24);
      if (SHIBYTE(v24) < 0)
      {
        sub_207CA40D8(v19, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        v20 = v23;
        *(_QWORD *)(v17 + 40) = v24;
        *(_OWORD *)v19 = v20;
      }
      *(_QWORD *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v26;
      *(_QWORD *)(v17 + 72) = v27;
      v26 = 0uLL;
      v27 = 0;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      sub_207CBB72C((uint64_t)&v21);
    }
  }
  else
  {
    *(_OWORD *)v13 = v21;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16);
    if (i)
      goto LABEL_21;
  }
}

void sub_207CBEEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207CBEEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  *(_QWORD *)(v9 + 64) = v10;
  sub_207CBB72C((uint64_t)&a9);
  sub_207CBB72C(v9);
  JUMPOUT(0x207CBEF34);
}

uint64_t sub_207CBEF3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 80);
  v3 = *(_QWORD **)(v2 + 128);
  v4 = (_QWORD *)(v2 + 136);
  if (v3 != (_QWORD *)(v2 + 136))
  {
    do
    {
      result = v3[5];
      if (*(_BYTE *)(result + 8))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD **sub_207CBEFD0@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_207CBEFE0(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  v3 = *a1;
  sub_207CBBE38(&v3, a2, a3);
}

void sub_207CBF008(_QWORD *a1@<X8>)
{
  void *v2;
  std::__shared_weak_count_vtbl *v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  void *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x78uLL);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_DWORD *)v2 + 12) = 1065353216;
  *((_QWORD *)v2 + 7) = 850045863;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_QWORD *)v2 + 14) = 0;
  v3 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  sub_207CBF32C();
  LOBYTE(v3->~__shared_weak_count_0) = 1;
  v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24C06F800;
  v4 = operator new(0x20uLL);
  *v4 = &off_24C06F780;
  v5 = v4 + 1;
  if (byte_253E50EAF < 0)
  {
    sub_207CA40D8(v5, (void *)xmmword_253E50E98, *((unint64_t *)&xmmword_253E50E98 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_253E50E98;
    v4[3] = unk_253E50EA8;
  }
  v3->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v4;
  LODWORD(v3->__get_deleter) = 63;
  v24[1] = (uint64_t)v3;
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06F948;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v3;
  v25 = v6;
  v8 = operator new(0x58uLL);
  v24[0] = (uint64_t)v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_207CBF420(&__p, &v26, 1uLL);
  sub_207CBB7BC((uint64_t)v8, v24, (uint64_t)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_207CBAEA0((uint64_t *)v2 + 1, (uint64_t)v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207CBF284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_207CBF2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_207CBE108((void **)va);
  sub_207C99D78((uint64_t)va2);
  operator delete(v2);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207CBF2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CBF2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_207CBF304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CBF318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CBF32C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)qword_253E50CF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_253E50CF0))
    return &qword_253E50E90;
  sub_207C96EE8(__p, "%d [%t] %p %c: %m%n");
  sub_207CBF524(&qword_253E50E90, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_207CBF5CC, &qword_253E50E90, &dword_207C77000);
  __cxa_guard_release(qword_253E50CF0);
  return &qword_253E50E90;
}

void sub_207CBF3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_253E50CF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_253E50CF0);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CBF420(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_207CA420C();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_207CBF4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_208216FD4((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CBF4E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

_QWORD *sub_207CBF524(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = &off_24C06F780;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_253E50D10);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_253E50D10);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_253E50D10))
    return a1;
  qword_253E50D08 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_253E50D10);
  return a1;
}

uint64_t sub_207CBF5CC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &off_24C06F780;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_207CBF618(void **__p)
{
  void **v1;

  v1 = __p;
  *__p = &off_24C06F780;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

char *sub_207CBF664()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530828))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_207C77000);
  __cxa_guard_release(&qword_254530828);
  return aPatternlayout;
}

uint64_t sub_207CBF6D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_207CBAB98(v12, (uint64_t)v13, v14);
  sub_207CBAB98(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_207CBAB98(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_207CBAB98(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_207CBF8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_207CBF914()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530828))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_207C77000);
  __cxa_guard_release(&qword_254530828);
  return aPatternlayout;
}

void sub_207CBF984(int a1, void **a2)
{
  unsigned __int8 v2;
  void **v3;
  int v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253E50D00);
  if ((v2 & 1) == 0)
  {
    v3 = a2;
    v4 = __cxa_guard_acquire(&qword_253E50D00);
    a2 = v3;
    if (v4)
    {
      sub_207CBF664();
      if (byte_25452B537 < 0)
      {
        sub_207CA40D8(v5, *(void **)aPatternlayout, *(unint64_t *)&aPatternlayout[8]);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)aPatternlayout;
        v6 = unk_25452B530;
      }
      v8 = 0x700000000000000;
      *(_OWORD *)__p = *(_OWORD *)"ILayout";
      sub_207CAA110(qword_253E50DC8, (uint64_t)v5, 2uLL);
      if (SHIBYTE(v8) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v6) < 0)
        operator delete(v5[0]);
      __cxa_atexit((void (*)(void *))sub_207C99DE0, qword_253E50DC8, &dword_207C77000);
      __cxa_guard_release(&qword_253E50D00);
      a2 = v3;
    }
  }
  if (a2 != (void **)qword_253E50DC8)
    sub_207CC1DDC(a2, (void **)qword_253E50DC8[0], unk_253E50DD0, 0xAAAAAAAAAAAAAAABLL * ((unk_253E50DD0 - qword_253E50DC8[0]) >> 3));
}

void sub_207CBFAE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E50D00);
  _Unwind_Resume(a1);
}

void sub_207CBFAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_253E50D00);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_253E50D00);
  _Unwind_Resume(a1);
}

_BYTE *sub_207CBFB54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = operator new(0x20uLL);
  *v4 = &off_24C06F780;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_207CA40D8(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_207CBFBD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CBFBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  void **p_dst;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v41[2];
  _QWORD v42[3];
  const void *v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  void *__p;
  char v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  void **__dst;
  size_t v53;
  int64_t v54;

  sub_207CA2878((uint64_t)v41);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 < 2)
      goto LABEL_65;
    goto LABEL_5;
  }
  v5 = *(unsigned __int8 *)(a1 + 31);
  if (v5 >= 2)
  {
LABEL_5:
    v6 = 0;
    v7 = (_QWORD *)(a1 + 8);
    v8 = 1;
    while (1)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v11 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v7 + v6) != 37)
        {
LABEL_21:
          v16 = a1 + 8;
          if (v11 < 0)
            v16 = *v7;
          LOBYTE(__dst) = *(_BYTE *)(v16 + v6);
          sub_207CBAB98(v42, (uint64_t)&__dst, 1);
          v8 = v6;
          goto LABEL_8;
        }
      }
      else
      {
        v11 = *(char *)(a1 + 31);
        if (*((_BYTE *)v7 + v6) != 37)
          goto LABEL_21;
      }
      v12 = a1 + 8;
      if (v11 < 0)
        v12 = *v7;
      v13 = (_BYTE *)(v12 + v8);
      if (v5 <= v8 + 1)
        v14 = v8 + 1;
      else
        v14 = v5;
      while (2)
      {
        switch(*v13)
        {
          case '%':
            v19 = "%";
            goto LABEL_33;
          case 'F':
            v9 = *(char **)(a2 + 32);
            v17 = strrchr(v9, 47);
            if (v17)
            {
              v9 = v17 + 1;
            }
            else
            {
              v27 = strrchr(v9, 92);
              if (v27)
                v9 = v27 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            goto LABEL_8;
          case 'c':
            v9 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_207CBF6D4((uint64_t)v41, (_QWORD *)(a2 + 16));
            goto LABEL_8;
          case 'f':
            v9 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            v20 = *(_QWORD *)(a2 + 56);
            v21 = *(_DWORD *)(v20 + 120);
            if ((v21 & 0x10) != 0)
            {
              v24 = *(_QWORD *)(v20 + 112);
              v25 = *(_QWORD *)(v20 + 72);
              if (v24 < v25)
              {
                *(_QWORD *)(v20 + 112) = v25;
                v24 = v25;
              }
              v26 = *(const void **)(v20 + 64);
              v22 = v24 - (_QWORD)v26;
              if (v24 - (unint64_t)v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
                sub_207C95C50();
            }
            else
            {
              if ((v21 & 8) == 0)
              {
                v22 = 0;
                HIBYTE(v54) = 0;
                p_dst = (void **)&__dst;
                goto LABEL_55;
              }
              v26 = *(const void **)(v20 + 40);
              v22 = *(_QWORD *)(v20 + 56) - (_QWORD)v26;
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_83;
            }
            if (v22 >= 0x17)
            {
              v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v28 = v22 | 7;
              v29 = v28 + 1;
              p_dst = (void **)operator new(v28 + 1);
              v53 = v22;
              v54 = v29 | 0x8000000000000000;
              __dst = p_dst;
LABEL_54:
              memmove(p_dst, v26, v22);
              goto LABEL_55;
            }
            HIBYTE(v54) = v22;
            p_dst = (void **)&__dst;
            if (v22)
              goto LABEL_54;
LABEL_55:
            *((_BYTE *)p_dst + v22) = 0;
            if (v54 >= 0)
              v30 = (void **)&__dst;
            else
              v30 = __dst;
            if (v54 >= 0)
              v31 = HIBYTE(v54);
            else
              v31 = v53;
            sub_207CBAB98(v42, (uint64_t)v30, v31);
            if (SHIBYTE(v54) < 0)
              operator delete(__dst);
LABEL_8:
            v6 = v8 + 1;
            v8 += 2;
            if (v8 >= v5)
              goto LABEL_65;
            break;
          case 'n':
            v19 = "\n";
LABEL_33:
            sub_207CBAB98(v42, (uint64_t)v19, 1);
            goto LABEL_8;
          case 'p':
            v9 = off_24C06F7B8[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v10 = strlen(v9);
            sub_207CBAB98(v42, (uint64_t)v9, v10);
            goto LABEL_8;
          case 'r':
            v18 = atomic_load((unsigned __int8 *)&qword_253E50D10);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_253E50D10))
            {
              qword_253E50D08 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_253E50D10);
            }
            std::ostream::operator<<();
            goto LABEL_8;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            goto LABEL_8;
          default:
            v15 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v15 = *v7;
            v13 = (_BYTE *)(v15 + v8++ + 1);
            if (v8 < v5)
              continue;
            v8 = v14;
            goto LABEL_8;
        }
        break;
      }
    }
  }
LABEL_65:
  if ((v50 & 0x10) != 0)
  {
    v33 = v49;
    if (v49 < v46)
    {
      v49 = v46;
      v33 = v46;
    }
    v34 = v45;
    v32 = v33 - (_QWORD)v45;
    if (v33 - (unint64_t)v45 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v32 = 0;
      a3[23] = 0;
      goto LABEL_78;
    }
    v34 = v43;
    v32 = v44 - (_QWORD)v43;
    if ((unint64_t)(v44 - (_QWORD)v43) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
      sub_207C95C50();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)a3 + 1) = v32;
    *((_QWORD *)a3 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)a3 = v37;
    a3 = v37;
    goto LABEL_77;
  }
  a3[23] = v32;
  if (v32)
LABEL_77:
    memmove(a3, v34, v32);
LABEL_78:
  a3[v32] = 0;
  v41[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v42[0] = v38;
  v42[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD027B8](&v51);
}

void sub_207CC0148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CC0190(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C06F800;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CC01D4(_QWORD *__p)
{
  uint64_t v2;

  *__p = &off_24C06F800;
  v2 = __p[2];
  __p[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

const char *sub_207CC0218()
{
  return "ConsoleAppender";
}

void sub_207CC0224(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 24)) == *(_DWORD *)(a1 + 24))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E50D18);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_253E50D18);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25452B538, &dword_207C77000);
        __cxa_guard_release(&qword_253E50D18);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    std::mutex::lock(&stru_25452B538);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)qword_253E50D20);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_253E50D20))
      {
        qword_253E50DA0 = MEMORY[0x24BEDB318];
        qword_253E50DA8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_253E50D20);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_207CBAB98((_QWORD *)qword_253E50DA0, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)qword_253E50D20);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)qword_253E50D20);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(qword_253E50D20))
      {
        qword_253E50DA0 = MEMORY[0x24BEDB318];
        qword_253E50DA8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_253E50D20);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_207CBAB98((_QWORD *)qword_253E50DA8, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)qword_253E50D20);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_25452B538);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(qword_253E50D20))
    {
      qword_253E50DA0 = MEMORY[0x24BEDB318];
      qword_253E50DA8 = MEMORY[0x24BEDB310];
      __cxa_guard_release(qword_253E50D20);
    }
    goto LABEL_22;
  }
}

void sub_207CC0460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CC0490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x20BD021B8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_207CC0570(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD027B8](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CC05B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD021C4](a1 + 2);
  std::istream::~istream();
  MEMORY[0x20BD027B8](a1 + 53);
  return a1;
}

_QWORD *sub_207CC060C(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_207CC0688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

const char *sub_207CC069C()
{
  return "";
}

const char *sub_207CC06A8()
{
  return "ConsoleAppender";
}

void ***sub_207CC06B4(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_207CBB72C(v4 - 80);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_207CC073C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CC0750(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_207CC0760(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CC07D0(void **a1, void *a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_207CC084C((uint64_t)v2 + 128, *((_QWORD **)v2 + 17));
    std::mutex::~mutex((std::mutex *)v2 + 1);
    sub_207CC084C((uint64_t)v2 + 40, *((_QWORD **)v2 + 6));
    v3 = (_QWORD *)*((_QWORD *)v2 + 2);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(_QWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    operator delete(v2);
  }
}

void sub_207CC084C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_207CC084C(a1, *a2);
    sub_207CC084C(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

char *sub_207CC08D4(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_207CC0A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CC0AA8(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = a1 + 17;
  v3 = (uint64_t *)a1[17];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4)
    {
      v10 = v5[4];
      if (v10 <= a2)
      {
        if (*(_BYTE *)(v10 + 8))
          --a1[19];
        v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v13 = v5;
          do
          {
            v12 = (uint64_t *)v13[2];
            v14 = *v12 == (_QWORD)v13;
            v13 = v12;
          }
          while (!v14);
        }
        if ((uint64_t *)a1[16] == v5)
          a1[16] = v12;
        --a1[18];
        sub_207CC2668(v3, v5);
        v15 = (std::__shared_weak_count *)v5[6];
        if (!v15)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          operator delete(v5);
        }
        else
        {
LABEL_27:
          operator delete(v5);
        }
      }
    }
  }
}

_OWORD *sub_207CC0BC8(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207CA420C();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_207CC0D28(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_207CA3AB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_207CC12E4((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_207CC1470((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_207CA3AB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_207CA3AB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_207CC1284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_207CC12A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CC12B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CC12CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CC12E4(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_207CA3AB8();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_207CC1470(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_207CA3AB8();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_207CC1608(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v17;
  __int128 v18;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_207CA420C();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_207CA3AB8();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v17 = v8;
  *((_QWORD *)&v18 + 1) = &v7[80 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(&v7[80 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[80 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_207CA40D8(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[80 * v3 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = 0;
  v11 = &v7[80 * v3];
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)&v18 = v11 + 80;
  v13 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v10) != v13; sub_207CBB578((uint64_t)&v17[v10], (__int128 *)(v10 + i)))
    v10 -= 80;
  v15 = (void *)*a1;
  v14 = a1[1];
  *a1 = &v17[v10];
  for (*(_OWORD *)(a1 + 1) = v18; (void *)v14 != v15; v14 = sub_207CBB72C(v14 - 80))
    ;
  if (v15)
    operator delete(v15);
  return v18;
}

void sub_207CC17E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_207CC1848((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_207CC1848((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CC1848(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_207CBB72C(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_207CC1898(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a3)
    return result;
  v3 = result;
  v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    v6 = (_QWORD *)*result;
    v5 = result[1];
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = v5 - a2;
    if (v5 - a2 <= a3)
      goto LABEL_8;
  }
  else
  {
    v5 = *((unsigned __int8 *)result + 23);
    v6 = result;
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = *((unsigned __int8 *)result + 23) - a2;
    if (v7 <= a3)
      goto LABEL_8;
  }
  result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)v3 + 23);
LABEL_8:
  v9 = v5 - v8;
  if ((v4 & 0x80) != 0)
    v3[1] = v9;
  else
    *((_BYTE *)v3 + 23) = v9 & 0x7F;
  *((_BYTE *)v6 + v9) = 0;
  return result;
}

BOOL sub_207CC1928(int __c)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  _BYTE *v5;

  v2 = atomic_load((unsigned __int8 *)qword_253E50CD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_253E50CD0))
  {
    qword_253E50DB0 = (uint64_t)operator new(0x48uLL);
    *(_OWORD *)&qword_253E50DB8 = xmmword_20822C960;
    strcpy((char *)qword_253E50DB0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E50DB0, &dword_207C77000);
    __cxa_guard_release(qword_253E50CD0);
  }
  if (byte_253E50DC7 >= 0)
    v3 = byte_253E50DC7;
  else
    v3 = qword_253E50DB8;
  if (!v3)
    return 1;
  if (byte_253E50DC7 >= 0)
    v4 = &qword_253E50DB0;
  else
    v4 = (uint64_t *)qword_253E50DB0;
  v5 = memchr(v4, __c, v3);
  return !v5 || v5 - (_BYTE *)v4 == -1;
}

void sub_207CC1A20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_253E50CD0);
  _Unwind_Resume(a1);
}

void sub_207CC1A38(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_207CC2244(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_207CC2180(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_207CC2244(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_207CC2180(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_207CA40D8(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_207CA420C();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_207CA40D8(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

void sub_207CC1DDC(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_207CC2244(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_207CC2180(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_207CC2244(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_207CC2180(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_207CA40D8(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_207CA420C();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_207CA40D8(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

_QWORD *sub_207CC2180(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_207C95C50();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_207CC2244(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_207C95C50();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t **sub_207CC2388(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_207CC24B4(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

uint64_t *sub_207CC24B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_207CC2668(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

void sub_207CC2A30(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CC2A44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CC2A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020822C7F9)
    return a1 + 24;
  if (((v3 & 0x800000020822C7F9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020822C7F9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020822C7F9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_207CC2ADC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

std::string *sub_207CC2D08(uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) == 0)
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_15;
    }
LABEL_11:
    result = std::string::append(result, v7 - v3, 0);
    v8 = *(char *)(a1 + 87);
    if (v8 < 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a1 + 72);
  v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v3 < v7)
    goto LABEL_11;
  result = *(std::string **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v7;
LABEL_15:
  result->__r_.__value_.__s.__data_[v7] = 0;
  v8 = *(char *)(a1 + 87);
  if (v8 < 0)
  {
LABEL_16:
    v9 = (char *)v4 + *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    if ((*(_BYTE *)(a1 + 96) & 3) == 0)
      return result;
    goto LABEL_17;
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) == 0)
    return result;
LABEL_17:
  if (v5 >> 31)
  {
    v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
    v11 = 0x7FFFFFFF * ((v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30);
    v4 = (std::string *)((char *)v4 + v11 + 0x7FFFFFFF);
    v5 = v5 - v11 - 0x7FFFFFFF;
    *(_QWORD *)(a1 + 48) = v4;
  }
  if (v5)
    *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  return result;
}

_QWORD *sub_207CC2E70(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_207CC31B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CC31C8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_207CC32FC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207CC343C(a1, i + 2, i + 2);
  return a1;
}

void sub_207CC3414(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CBD56C(v1);
  _Unwind_Resume(a1);
}

void sub_207CC3428(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CBD56C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CC343C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_207CC3780(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_207CC3794(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_207CA6B84(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207CC3B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CC3BB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CC3BB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_207CC3C18(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_207CC3D70((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_207CC3D70(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_207CC12E4((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_207CC1470((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_207CA3AB8();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_207CA3AB8();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_207CA3AB8();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_207CA3AB8();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_207CC465C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_207CC46A8()
{
  __cxa_end_catch();
  JUMPOUT(0x207CC46B0);
}

uint64_t sub_207CC46C8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207CC4790(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CC47A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CC47BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

double sub_207CC482C(double *a1)
{
  return *a1 * a1[3] - a1[1] * a1[2];
}

void sub_207CC4840(simd_double2x2 *a1@<X0>, simd_double2x2 *a2@<X8>)
{
  *a2 = __invert_d2(*a1);
}

__n128 sub_207CC4868@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, simd_float3x3 a3@<0:Q0, 16:Q1, 32:Q2>)
{
  simd_float3x3 v4;

  a3.columns[2].i64[0] = *(_QWORD *)(a1 + 24);
  a3.columns[2].i32[2] = *(_DWORD *)(a1 + 32);
  a3.columns[1] = *(simd_float3 *)(a1 + 12);
  a3.columns[0] = *(simd_float3 *)a1;
  v4 = __invert_f3(a3);
  v4.columns[0].i32[3] = v4.columns[1].i32[0];
  *(simd_float3 *)a2 = v4.columns[0];
  *(int8x16_t *)(a2 + 16) = vextq_s8(vextq_s8((int8x16_t)v4.columns[1], (int8x16_t)v4.columns[1], 0xCuLL), (int8x16_t)v4.columns[2], 8uLL);
  *(_DWORD *)(a2 + 32) = v4.columns[2].i32[2];
  return (__n128)v4.columns[0];
}

double sub_207CC48B4@<D0>(uint64_t a1@<X8>)
{
  double result;

  __invert_d3();
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void sub_207CC4964(int a1, int a2, int a3, int a4, int a5, const float *a6, int __lda, float *__B, float a9, float a10, int __ldb, float *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_207C953F0(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

uint64_t sub_207CC49DC()
{
  return cblas_sgemv_NEWLAPACK();
}

void sub_207CC4A30(int a1, char a2, int a3, int a4, uint64_t a5, uint64_t a6, float *__A, int __lda, float a9, float *__B, int __ldb)
{
  uint64_t v13;
  CBLAS_UPLO v14;
  int v15;
  CBLAS_TRANSPOSE v16;
  CBLAS_DIAG v17;
  uint64_t v18;

  if (a1)
    v13 = 142;
  else
    v13 = 141;
  if ((a2 & 1) != 0)
    v14 = CblasLower;
  else
    v14 = CblasUpper;
  if (a3)
    v15 = 113;
  else
    v15 = 111;
  if (a3 == 1)
    v16 = CblasTrans;
  else
    v16 = v15;
  if (a4)
    v17 = CblasNonUnit;
  else
    v17 = CblasUnit;
  v18 = 1;
  sub_207C95490(&v18, CblasColMajor, v13, v14, v16, v17, a5, a6, a9, __A, __lda, __B, __ldb);
}

void sub_207CC4ACC(char a1, int a2, int a3, int __N, const float *__A, int __lda, float *__X, int __incX)
{
  CBLAS_UPLO v11;
  int v12;
  CBLAS_TRANSPOSE v13;
  CBLAS_DIAG v14;
  uint64_t v15;

  if ((a1 & 1) != 0)
    v11 = CblasLower;
  else
    v11 = CblasUpper;
  if (a2)
    v12 = 113;
  else
    v12 = 111;
  if (a2 == 1)
    v13 = CblasTrans;
  else
    v13 = v12;
  if (a3)
    v14 = CblasNonUnit;
  else
    v14 = CblasUnit;
  v15 = 1;
  sub_207C953A4(&v15, CblasColMajor, v11, v13, v14, __N, __A, __lda, __X, __incX);
}

uint64_t sub_207CC4B4C()
{
  spotrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_207CC4B9C()
{
  ssytrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_207CC4BFC()
{
  ssytrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_207CC4C54()
{
  return sgesvd_NEWLAPACK();
}

uint64_t sub_207CC4CB8()
{
  return dsysv_NEWLAPACK();
}

void AppC3DConfigCreate(_QWORD *a1, CFTypeRef *a2)
{
  _BYTE *v4;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *v11;
  char *v12;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (!a1)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822C980;
    strcpy(*(char **)__p, "AppC3DConfigRef* is null");
    v5 = (char *)operator new(0x60uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (!a2)
      goto LABEL_26;
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_207D01528(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v15;
    if (!v15)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    goto LABEL_21;
  }
  v4 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (v4)
  {
    v4[12] = 0;
    v4[16] = 0;
    v4[24] = 0;
    *(_QWORD *)v4 = 0;
    v4[8] = 0;
    *a1 = v4;
    return;
  }
  *a1 = 0;
  __p[23] = 13;
  strcpy(__p, "Out of memory");
  v5 = (char *)operator new(0x60uLL);
  v12 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v16.__val_ = 12;
    v16.__cat_ = std::generic_category();
    sub_207D01528(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v10;
    v7 = v15;
    if (!v15)
      goto LABEL_25;
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(v11);
    while (__stlxr(v9 - 1, v11));
LABEL_21:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_25:
    v5 = v12;
  }
LABEL_26:
  operator delete(v5);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_207CC4FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DConfigSetTrackingConfig(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    *(_DWORD *)(a1 + 4) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v10 = xmmword_20822C990;
    strcpy((char *)__p, "AppC3DConfigTrackingConfig is null");
    v4 = (char *)operator new(0x60uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_207CC5160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DConfigGetTrackingConfig(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned int *)(a1 + 4);
  __p = operator new(0x28uLL);
  v10 = xmmword_20822C990;
  strcpy((char *)__p, "AppC3DConfigTrackingConfig is null");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_207CC5324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DConfigSetTrackingMode(_DWORD *a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    *a1 = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v10 = xmmword_20822AB90;
    strcpy((char *)__p, "AppC3DConfigTrackingMode is null");
    v4 = (char *)operator new(0x60uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_207CC54D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DConfigGetTrackingMode(unsigned int *a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *a1;
  __p = operator new(0x28uLL);
  v10 = xmmword_20822AB90;
  strcpy((char *)__p, "AppC3DConfigTrackingMode is null");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_207CC568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DConfigSetANEFallbackDevice(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    *(_DWORD *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 12) = 1;
  }
  else
  {
    __p = operator new(0x28uLL);
    v10 = xmmword_20822C990;
    strcpy((char *)__p, "AppC3DConfigANEFallbackDev is null");
    v4 = (char *)operator new(0x60uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_207CC5848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DConfigGetANEFallbackDevice(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 12))
      return *(unsigned int *)(a1 + 8);
    return 0;
  }
  __p = operator new(0x28uLL);
  v10 = xmmword_20822C990;
  strcpy((char *)__p, "AppC3DConfigANEFallbackDev is null");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return 0;
  operator delete(__p);
  return 0;
}

void sub_207CC5A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DConfigSetMaxNumberCodesToTrack(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    *(_QWORD *)(a1 + 16) = a2;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    __p = operator new(0x28uLL);
    v10 = xmmword_20822AB90;
    strcpy((char *)__p, "AppC3DConfigTrackingMode is null");
    v4 = (char *)operator new(0x60uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_207CC5BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DConfigGetMaxNumberCodesToTrack(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 24))
      return *(_QWORD *)(a1 + 16);
    __p[23] = 13;
    strcpy(__p, "Value not set");
    v9 = (char *)operator new(0x60uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 45;
      v17.__cat_ = std::generic_category();
      sub_207D01528(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20822AB90;
    strcpy(*(char **)__p, "AppC3DConfigTrackingMode is null");
    v4 = (char *)operator new(0x60uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_207D01528(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_207CC5EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DConfigRelease(void *__p)
{
  if (__p)
    operator delete(__p);
}

void AppC3DCalibrationCreate(_QWORD *a1, CFTypeRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  char *v14;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (!a1)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822C9A0;
    strcpy(*(char **)__p, "AppC3DCalibrationRef* is null");
    v7 = (char *)operator new(0x60uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (!a2)
      goto LABEL_26;
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_207D01528(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v9 = v17;
    if (!v17)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    goto LABEL_21;
  }
  v4 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (v4)
  {
    v5 = v4;
    v6 = operator new(0x18uLL);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v5 = v6;
    v5[1] = sub_207CDC8C0;
    *a1 = v5;
    return;
  }
  *a1 = 0;
  __p[23] = 13;
  strcpy(__p, "Out of memory");
  v7 = (char *)operator new(0x60uLL);
  v14 = v7;
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v18.__val_ = 12;
    v18.__cat_ = std::generic_category();
    sub_207D01528(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v12;
    v9 = v17;
    if (!v17)
      goto LABEL_25;
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v13);
    while (__stlxr(v11 - 1, v13));
LABEL_21:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_25:
    v7 = v14;
  }
LABEL_26:
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_207CC61BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void AppC3DCalibrationSetCameraParameters(char ***a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, char *a7, __int128 *a8, double a9, double a10, double a11, double a12, __int128 *a13, unsigned int a14, CFTypeRef *a15)
{
  __int128 *p_p;
  __int128 *v16;
  char *v17;
  std::__shared_weak_count *v18;
  CFTypeRef v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  CFTypeRef v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef cf;
  std::__shared_weak_count *v33;
  void *__p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  std::error_condition v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    memset(v42, 0, sizeof(v42));
    *(_QWORD *)&v43.__val_ = 0;
    v43.__cat_ = 0;
    v39 = 0;
    v38 = 0u;
    v36 = 0u;
    v35 = 0u;
    __p = (void *)0x3FF0000000000000;
    v37 = 0x3FF0000000000000uLL;
    v40 = 0x3FF0000000000000;
    v41 = 0;
    if (a14 >= 3)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp", 85, (uint64_t)"", 0, (uint64_t)"Unexpected AppC3DCameraLensDistortionModel value", 48, (void (*)(void **))sub_208216974);
      abort();
    }
    p_p = a13;
    if (!a13)
      p_p = (__int128 *)&__p;
    v16 = (__int128 *)&v43;
    if (a8)
      v16 = a8;
    if (a7)
      v17 = a7;
    else
      v17 = (char *)v42;
    sub_207CDBCF8(a1, a2 != 0, a3, a4, a5, a6, 4, v17, &cf, *(unint64_t *)&a9, a10, a11, a12, v16, p_p, a14);
    v19 = cf;
    v18 = v33;
    if (!v33)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (a15)
      {
LABEL_16:
        if (v19)
        {
          v23 = cf;
          if (cf)
            CFRetain(cf);
          *a15 = v23;
        }
      }
    }
    else
    {
LABEL_15:
      if (a15)
        goto LABEL_16;
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    return;
  }
  __p = operator new(0x20uLL);
  v35 = xmmword_20822ABB0;
  strcpy((char *)__p, "AppC3DCalibrationRef is null");
  v27 = (char *)operator new(0x60uLL);
  *(_QWORD *)&v42[0] = v27;
  *(_OWORD *)((char *)v42 + 8) = xmmword_20822C970;
  strcpy(v27, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a15)
  {
    *(_QWORD *)&v43.__val_ = 22;
    v43.__cat_ = std::generic_category();
    sub_207D01528(&v43, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a15)
      CFRelease(*a15);
    *a15 = 0;
    v28 = cf;
    if (cf)
      CFRetain(cf);
    *a15 = v28;
    v29 = v33;
    if (v33)
    {
      v30 = (unint64_t *)&v33->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if ((SBYTE7(v42[1]) & 0x80000000) == 0)
      goto LABEL_38;
    v27 = *(char **)&v42[0];
  }
  operator delete(v27);
LABEL_38:
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
}

void sub_207CC64FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CC6510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void AppC3DCalibrationRelease(void (**__p)(void))
{
  void (*v2)(void);

  if (__p)
  {
    v2 = *__p;
    *__p = 0;
    if (v2)
      __p[1]();
    operator delete(__p);
  }
}

void AppC3DCreate(uint64_t a1, uint64_t a2, _QWORD ***a3, std::__shared_weak_count_vtbl *a4, CFTypeRef *a5)
{
  unint64_t v5;
  char v6;
  unsigned int v12;
  void *v13;
  int v14;
  char *v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  const __CFDictionary *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  const void *v37;
  CFTypeID v38;
  __int16 v39;
  __int16 v40;
  unsigned __int16 v41;
  BOOL v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  CFTypeID v48;
  int v49;
  __int16 v50;
  BOOL v51;
  int v52;
  int v53;
  char v54;
  BOOL v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string *p_p;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  std::string::size_type v71;
  std::recursive_mutex ***v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  void **v83;
  char *v84;
  const std::error_category *v85;
  std::string::size_type v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  const void *v103;
  CFTypeID TypeID;
  __int16 v105;
  __int16 v106;
  unsigned __int16 v107;
  std::__shared_weak_count *size;
  unint64_t *v109;
  unint64_t v110;
  std::string::size_type v111;
  const void **v112;
  std::string::size_type v113;
  const void **v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  std::string *v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  unsigned __int8 v122;
  const char *v123;
  size_t v124;
  std::string::size_type *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  std::string::size_type v133;
  _QWORD *v134;
  size_t v135;
  std::string::size_type v136;
  std::string *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  std::string::size_type v141;
  char v142;
  char *v143;
  void *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  const void *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  size_t v161;
  unsigned __int8 v162;
  const char *v163;
  size_t v164;
  std::string::size_type *p_size;
  int v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  std::string::size_type v173;
  _QWORD *v174;
  size_t v175;
  std::string::size_type v176;
  std::string *p_dst;
  void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::string::size_type v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  const char *v187;
  _QWORD *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::string *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  __int128 v213;
  std::string::size_type v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::string::size_type v220;
  char v221;
  _QWORD *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  char *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::string::size_type v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  const char *v242;
  _QWORD *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  _QWORD *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  const char *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  std::string::size_type v268;
  uint64_t **v269;
  uint64_t **v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  void *v275;
  std::__shared_weak_count_vtbl *v276;
  BOOL v277;
  _QWORD ***v278;
  void *__src;
  char v280;
  char v281;
  CFTypeRef *v282;
  CFTypeRef *v283;
  CFTypeRef *v284;
  void *v285;
  int v286;
  int v287;
  const char *v288;
  const char *v289;
  _BYTE value[40];
  uint64_t v291;
  _BYTE v292[32];
  void *v293[2];
  uint64_t v294;
  char v295;
  char v296;
  std::string v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  _BYTE v301[21];
  _BYTE v302[40];
  uint64_t v303;
  _BYTE v304[24];
  uint64_t v305;
  void *v306[2];
  uint64_t v307;
  char v308;
  std::string v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  _BYTE v313[21];
  char v314;
  std::recursive_mutex ***v315;
  uint64_t v316;
  _BYTE cf[24];
  int v318;
  void *v319;
  int v320;
  const char *v321;
  uint64_t v322;
  void *v323;
  char v324;
  char v325;
  char v326;
  std::string __p;
  char v328;
  _DWORD v329[2];
  _DWORD v330[2];
  void *v331;
  __int128 v332;
  std::string __dst;
  char v334;
  void *v335;
  __int128 v336;
  std::string v337;
  char *v338;
  std::__shared_weak_count *v339;
  std::string v340;
  __int128 v341;
  char *v342;
  size_t v343;
  unint64_t v344;
  void *v345;
  char v346;
  char v347;
  char v348;
  _BYTE v349[24];
  void *v350[6];

  v350[3] = *(void **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    sub_2081FFC84((uint64_t *)&v315);
    sub_208200C60(v315, 5);
    HIBYTE(v350[2]) = 16;
    strcpy((char *)v350, "com.apple.AppC3D");
    *(_QWORD *)v349 = operator new(0x30uLL);
    *(_OWORD *)&v349[8] = xmmword_20822C9C0;
    strcpy(*(char **)v349, "CV3D_AppCode_Pipeline_ObjectDetector/model.json");
    sub_207CF80D8((uint64_t)v350, (std::string::size_type)v349, 0, 0, &v337);
    if (!(_BYTE)v338)
    {
      sub_207CCB5A4((uint64_t)&v340, "Detector Param resource not found");
      v348 = 1;
      sub_207CCAFD0(2u, (__int128 *)&v340, (uint64_t)value);
      *(_OWORD *)v302 = *(_OWORD *)value;
      v302[16] = 0;
      v309.__r_.__value_.__s.__data_[0] = 0;
      if (v297.__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v303) = 0;
        if ((_BYTE)v291)
        {
          *(_OWORD *)&v302[16] = *(_OWORD *)&value[16];
          *(_QWORD *)&v302[32] = *(_QWORD *)&value[32];
          memset(&value[16], 0, 24);
          LOBYTE(v303) = 1;
        }
        v304[0] = 0;
        v308 = 0;
        if (v295)
        {
          *(_QWORD *)&v304[16] = *(_QWORD *)&v292[16];
          *(_OWORD *)v304 = *(_OWORD *)v292;
          memset(v292, 0, 24);
          v305 = *(_QWORD *)&v292[24];
          *(_OWORD *)v306 = *(_OWORD *)v293;
          v307 = v294;
          v293[0] = 0;
          v293[1] = 0;
          v294 = 0;
          v308 = 1;
        }
        v309.__r_.__value_.__s.__data_[0] = 1;
        v314 = 0;
        if ((_BYTE)v291 && (value[39] & 0x80000000) != 0)
          operator delete(*(void **)&value[16]);
      }
      else
      {
        v314 = 0;
      }
      if (v348)
      {
        if (v347)
        {
          if (v346 < 0)
            operator delete(v345);
          if (SHIBYTE(v343) < 0)
            operator delete(*((void **)&v341 + 1));
        }
        if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
        {
          v26 = (void *)v340.__r_.__value_.__r.__words[0];
LABEL_222:
          operator delete(v26);
        }
      }
LABEL_223:
      if ((_BYTE)v338 && SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      if ((v349[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v349);
        if ((SHIBYTE(v350[2]) & 0x80000000) == 0)
        {
LABEL_228:
          if (v314)
            goto LABEL_229;
          goto LABEL_234;
        }
      }
      else if ((SHIBYTE(v350[2]) & 0x80000000) == 0)
      {
        goto LABEL_228;
      }
      operator delete(v350[0]);
      if (v314)
      {
LABEL_229:
        if (a3)
        {
          v60 = operator new(0x18uLL);
          *v60 = 0;
          v60[1] = 0;
          v60[2] = 0;
          *(_QWORD *)value = v60;
          *(_QWORD *)&value[8] = sub_207CDC8C0;
          if (v60 != *a3)
            sub_207CDC208((uint64_t)v60, **a3, (uint64_t)(*a3)[1], 0x77A04C8F8D28AC43 * ((*a3)[1] - **a3));
        }
        else
        {
          v68 = operator new(0x18uLL);
          *v68 = 0;
          v68[1] = 0;
          v68[2] = 0;
          *(_QWORD *)value = v68;
          *(_QWORD *)&value[8] = sub_207CDC8C0;
        }
        sub_207CD79B4((uint64_t)v302, (uint64_t **)value, (uint64_t)&__p);
        v69 = *(_QWORD *)value;
        *(_QWORD *)value = 0;
        if (v69)
          (*(void (**)(void))&value[8])();
        if (__p.__r_.__value_.__s.__data_[16])
        {
          v70 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
          if (v70)
          {
            *((_BYTE *)v70 + 8) = 0;
            *((_QWORD *)v70 + 2) = 0;
            *((_QWORD *)v70 + 3) = 0;
            *(_QWORD *)a1 = v70;
            v71 = __p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v70 = v71;
            v72 = v315;
            v73 = v316;
            if (v316)
            {
              v74 = (unint64_t *)(v316 + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
              v76 = (std::__shared_weak_count *)*((_QWORD *)v70 + 3);
              *((_QWORD *)v70 + 2) = v72;
              *((_QWORD *)v70 + 3) = v73;
              if (v76)
              {
                p_shared_owners = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(p_shared_owners);
                while (__stlxr(v78 - 1, p_shared_owners));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
            }
            else
            {
              *((_QWORD *)v70 + 2) = v315;
              *((_QWORD *)v70 + 3) = 0;
            }
            sub_207CF9D84((std::__shared_weak_count_vtbl **)value, a4, 1);
            v90 = *(_QWORD *)value;
            v91 = *(std::__shared_weak_count **)&value[8];
            if (*(_QWORD *)&value[8])
            {
              v92 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
              v340.__r_.__value_.__r.__words[0] = v90;
              v340.__r_.__value_.__l.__size_ = (std::string::size_type)v91;
              do
                v94 = __ldxr(v92);
              while (__stxr(v94 + 1, v92));
              do
                v95 = __ldaxr(v92);
              while (__stlxr(v95 - 1, v92));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            else
            {
              *(_OWORD *)&v340.__r_.__value_.__l.__data_ = *(unint64_t *)value;
            }
            v96 = *(std::__shared_weak_count **)&value[8];
            if (*(_QWORD *)&value[8])
            {
              v97 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v99 = *(_OWORD *)&v340.__r_.__value_.__l.__data_;
            if (v340.__r_.__value_.__l.__size_)
            {
              v100 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
              do
                v102 = __ldaxr(v100);
              while (__stlxr(v102 - 1, v100));
              if (!v102)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v99 + 1) + 16))(*((_QWORD *)&v99 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v99 + 1));
              }
            }
            if ((_QWORD)v99
              && (*(_QWORD *)value = 0,
                  CFDictionaryGetValueIfPresent((CFDictionaryRef)v340.__r_.__value_.__l.__data_, CFSTR("EnableDebugInfo"), (const void **)value))&& ((v103 = *(const void **)value) == 0 || (TypeID = CFBooleanGetTypeID(), CFGetTypeID(v103) != TypeID)? (v105 = 0, v106 = 0): (v105 = CFBooleanGetValue((CFBooleanRef)v103) != 0, v106 = 1), v107 = v105 | (v106 << 8), v107 > 0xFFu))
            {
              *(_BYTE *)(*(_QWORD *)a1 + 8) = v107 != 0;
              size = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
              if (v340.__r_.__value_.__l.__size_)
                goto LABEL_311;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)a1 + 8) = 0;
              size = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
              if (v340.__r_.__value_.__l.__size_)
              {
LABEL_311:
                v109 = (unint64_t *)&size->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (!v110)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
            }
LABEL_620:
            if (__p.__r_.__value_.__s.__data_[16])
            {
              v269 = (uint64_t **)__p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v269)
              {
                v270 = sub_207CDA04C(v269);
                operator delete(v270);
              }
            }
            else
            {
              v271 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v272 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
            }
            goto LABEL_628;
          }
          *(_QWORD *)a1 = 0;
          *(_QWORD *)value = operator new(0x20uLL);
          *(_OWORD *)&value[8] = xmmword_20822ABA0;
          strcpy(*(char **)value, "AppC3DSession allocation failed");
          v84 = (char *)operator new(0x60uLL);
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = xmmword_20822C970;
          strcpy(v84, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
          if (a5)
          {
            v85 = std::generic_category();
            *(_QWORD *)cf = 12;
            *(_QWORD *)&cf[8] = v85;
            sub_207D01528((const std::error_condition *)cf, (uint64_t)value, (CFErrorRef *)&v337);
            if (*a5)
              CFRelease(*a5);
            *a5 = 0;
            v86 = v337.__r_.__value_.__r.__words[0];
            if (v337.__r_.__value_.__r.__words[0])
              CFRetain(v337.__r_.__value_.__l.__data_);
            *a5 = (CFTypeRef)v86;
            v87 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
            if (v337.__r_.__value_.__l.__size_)
            {
              v88 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            if ((SHIBYTE(v340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_280;
            v84 = (char *)v340.__r_.__value_.__r.__words[0];
          }
          operator delete(v84);
LABEL_280:
          if ((value[23] & 0x80000000) != 0)
            operator delete(*(void **)value);
          goto LABEL_620;
        }
        sub_207CC97C0(&v335);
        if (**((int **)v335 + 7) > 5
          || (v79 = *((unsigned __int8 *)v335 + 72),
              v80 = sub_207CBE1A0((uint64_t)v335, "OSLogSurrogateAppender", 1, 0),
              v81 = v80,
              !v79)
          && !v80)
        {
LABEL_616:
          if (a5)
          {
            v268 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
              CFRetain(__p.__r_.__value_.__l.__data_);
            *a5 = (CFTypeRef)v268;
          }
          goto LABEL_620;
        }
        sub_207CA2878((uint64_t)value);
        sub_207D02290(&value[16], __p.__r_.__value_.__l.__data_);
        v284 = a5;
        if ((v297.__r_.__value_.__s.__data_[8] & 0x10) != 0)
        {
          v113 = v297.__r_.__value_.__r.__words[0];
          if (v297.__r_.__value_.__r.__words[0] < *(_QWORD *)&v292[24])
          {
            v297.__r_.__value_.__r.__words[0] = *(_QWORD *)&v292[24];
            v113 = *(_QWORD *)&v292[24];
          }
          v114 = (const void **)&v292[16];
        }
        else
        {
          if ((v297.__r_.__value_.__s.__data_[8] & 8) == 0)
          {
            v82 = 0;
            HIBYTE(v350[2]) = 0;
            v83 = v350;
            goto LABEL_417;
          }
          v114 = (const void **)&v291;
          v113 = *(_QWORD *)&v292[8];
        }
        v155 = *v114;
        v82 = v113 - (_QWORD)*v114;
        if (v82 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v82 >= 0x17)
        {
          v156 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v82 | 7) != 0x17)
            v156 = v82 | 7;
          v157 = v156 + 1;
          v83 = (void **)operator new(v156 + 1);
          v350[1] = (void *)v82;
          v350[2] = (void *)(v157 | 0x8000000000000000);
          v350[0] = v83;
        }
        else
        {
          HIBYTE(v350[2]) = v113 - *(_BYTE *)v114;
          v83 = v350;
          if (!v82)
          {
LABEL_417:
            *((_BYTE *)v83 + v82) = 0;
            *(_QWORD *)cf = &v335;
            *(std::chrono::steady_clock::time_point *)&cf[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&cf[16] = std::chrono::system_clock::now();
            v318 = 5;
            v319 = "unknown file";
            v320 = 450;
            v323 = 0;
            v321 = "unknown function";
            v322 = 0;
            if (SHIBYTE(v350[2]) >= 0)
              v158 = (const char *)v350;
            else
              v158 = (const char *)v350[0];
            v159 = **(_QWORD **)cf;
            v160 = (const char *)(**(_QWORD **)cf + 16);
            v289 = v160;
            if (*(char *)(**(_QWORD **)cf + 39) < 0)
            {
              v160 = *(const char **)(v159 + 16);
              v161 = *(_QWORD *)(v159 + 24);
            }
            else
            {
              v161 = *(unsigned __int8 *)(**(_QWORD **)cf + 39);
            }
            v162 = atomic_load((unsigned __int8 *)&qword_25452B590);
            if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_25452B590))
            {
              sub_207CF696C((uint64_t)&v340);
              sub_207CCBD54("com.apple.cv3d", (unint64_t)&v340, &qword_25452B578);
              if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v340.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25452B578, &dword_207C77000);
              __cxa_guard_release(&qword_25452B590);
            }
            if (byte_25452B58F >= 0)
              v163 = (const char *)&qword_25452B578;
            else
              v163 = (const char *)qword_25452B578;
            if (byte_25452B58F >= 0)
              v164 = byte_25452B58F;
            else
              v164 = unk_25452B580;
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v163, v160);
            p_size = &v340.__r_.__value_.__l.__size_;
            if (v164 > 0x7FFFFFFFFFFFFFF7)
              sub_207C95C50();
            if (v164 >= 0x17)
            {
              v166 = v79;
              v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v164 | 7) != 0x17)
                v167 = v164 | 7;
              v168 = v167 + 1;
              p_size = (std::string::size_type *)operator new(v167 + 1);
              v340.__r_.__value_.__r.__words[2] = v164;
              *(_QWORD *)&v341 = v168 | 0x8000000000000000;
              v340.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v79 = v166;
            }
            else
            {
              BYTE7(v341) = v164;
              if (!v164)
              {
LABEL_438:
                *((_BYTE *)p_size + v164) = 0;
                BYTE8(v341) = 1;
                v169 = (char *)&v342;
                if (v161 > 0x7FFFFFFFFFFFFFF7)
                  sub_207C95C50();
                if (v161 >= 0x17)
                {
                  v170 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v161 | 7) != 0x17)
                    v170 = v161 | 7;
                  v171 = v170 + 1;
                  v169 = (char *)operator new(v170 + 1);
                  v343 = v161;
                  v344 = v171 | 0x8000000000000000;
                  v342 = v169;
                }
                else
                {
                  HIBYTE(v344) = v161;
                  if (!v161)
                  {
LABEL_446:
                    v169[v161] = 0;
                    LOBYTE(v345) = 1;
                    v172 = v340.__r_.__value_.__r.__words[0];
                    if (SHIBYTE(v344) < 0)
                      operator delete(v342);
                    if (BYTE8(v341) && SBYTE7(v341) < 0)
                      operator delete((void *)v340.__r_.__value_.__l.__size_);
                    if (v340.__r_.__value_.__r.__words[0])
                      os_release(v340.__r_.__value_.__l.__data_);
                    if (!v81 || !*(_QWORD *)(v81 + 24))
                    {
                      os_log_type_enabled(v172, OS_LOG_TYPE_ERROR);
                      LODWORD(v340.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v340.__r_.__value_.__r.__words + 4) = (std::string::size_type)v158;
                      v178 = (void *)_os_log_send_and_compose_impl();
                      a5 = v284;
                      if (v178)
                        free(v178);
                      goto LABEL_602;
                    }
                    _os_log_pack_size();
                    v173 = MEMORY[0x20BD028B4]();
                    v174 = operator new(0x20uLL);
                    *v174 = &off_24C06FA20;
                    v174[1] = 0;
                    v174[2] = 0;
                    v174[3] = v173;
                    v337.__r_.__value_.__r.__words[0] = v173;
                    v337.__r_.__value_.__l.__size_ = v173;
                    v339 = 0;
                    v337.__r_.__value_.__r.__words[2] = (std::string::size_type)v174;
                    v338 = 0;
                    v175 = strlen(v158);
                    if (v175 > 0x7FFFFFFFFFFFFFF7)
                      sub_207C95C50();
                    v176 = v175;
                    if (v175 >= 0x17)
                    {
                      v218 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v175 | 7) != 0x17)
                        v218 = v175 | 7;
                      v219 = v218 + 1;
                      p_dst = (std::string *)operator new(v218 + 1);
                      __dst.__r_.__value_.__r.__words[2] = v219 | 0x8000000000000000;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                      __dst.__r_.__value_.__l.__size_ = v176;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v175;
                      p_dst = &__dst;
                      if (!v175)
                      {
LABEL_540:
                        p_dst->__r_.__value_.__s.__data_[v176] = 0;
                        *(_QWORD *)v349 = __dst.__r_.__value_.__l.__size_;
                        v220 = __dst.__r_.__value_.__r.__words[0];
                        *(_QWORD *)&v349[7] = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
                        v221 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                        v222 = operator new(0x38uLL);
                        v222[1] = 0;
                        v222[2] = 0;
                        v222[3] = &off_24C06FAC0;
                        *v222 = off_24C06FA70;
                        v223 = *(_QWORD *)v349;
                        v222[4] = v220;
                        v222[5] = v223;
                        *(_QWORD *)((char *)v222 + 47) = *(_QWORD *)&v349[7];
                        *((_BYTE *)v222 + 55) = v221;
                        *(_QWORD *)v349 = 0;
                        *(_QWORD *)&v349[7] = 0;
                        v224 = v339;
                        v338 = (char *)(v222 + 3);
                        v339 = (std::__shared_weak_count *)v222;
                        if (v224)
                        {
                          v225 = (unint64_t *)&v224->__shared_owners_;
                          do
                            v226 = __ldaxr(v225);
                          while (__stlxr(v226 - 1, v225));
                          if (!v226)
                          {
                            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                            std::__shared_weak_count::__release_weak(v224);
                          }
                        }
                        v340 = v337;
                        v227 = v338;
                        if (v337.__r_.__value_.__r.__words[2])
                        {
                          v228 = (unint64_t *)(v337.__r_.__value_.__r.__words[2] + 8);
                          do
                            v229 = __ldxr(v228);
                          while (__stxr(v229 + 1, v228));
                        }
                        v230 = v339;
                        *(_QWORD *)&v341 = v227;
                        *((_QWORD *)&v341 + 1) = v339;
                        if (v339)
                        {
                          v231 = (unint64_t *)&v339->__shared_owners_;
                          do
                            v232 = __ldxr(v231);
                          while (__stxr(v232 + 1, v231));
                          v342 = v227;
                          do
                            v233 = __ldaxr(v231);
                          while (__stlxr(v233 - 1, v231));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                            std::__shared_weak_count::__release_weak(v230);
                          }
                        }
                        else
                        {
                          v342 = v227;
                        }
                        v234 = (std::__shared_weak_count *)v337.__r_.__value_.__r.__words[2];
                        if (v337.__r_.__value_.__r.__words[2])
                        {
                          v235 = (unint64_t *)(v337.__r_.__value_.__r.__words[2] + 8);
                          do
                            v236 = __ldaxr(v235);
                          while (__stlxr(v236 - 1, v235));
                          if (!v236)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        v237 = v340.__r_.__value_.__r.__words[0];
                        if (v342[31] >= 0)
                          v238 = v342 + 8;
                        else
                          v238 = (char *)*((_QWORD *)v342 + 1);
                        v239 = _os_log_pack_fill();
                        *(_DWORD *)v239 = 136315138;
                        *(_QWORD *)(v239 + 4) = v238;
                        v240 = (char *)operator new(0x40uLL);
                        v241 = *(unsigned __int8 *)(v159 + 39);
                        if ((v241 & 0x80u) == 0)
                          v242 = v289;
                        else
                          v242 = *(const char **)(v159 + 16);
                        if ((v241 & 0x80u) != 0)
                          v241 = *(_QWORD *)(v159 + 24);
                        *(_QWORD *)v240 = v237;
                        *(_OWORD *)(v240 + 8) = *(_OWORD *)&v340.__r_.__value_.__r.__words[1];
                        *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v240 + 24) = v341;
                        v341 = 0uLL;
                        *((_QWORD *)v240 + 5) = v242;
                        *((_QWORD *)v240 + 6) = v241;
                        v240[56] = 16;
                        __dst.__r_.__value_.__r.__words[0] = 0;
                        v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v240;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &v337);
                        a5 = v284;
                        v243 = (_QWORD *)v337.__r_.__value_.__r.__words[0];
                        v337.__r_.__value_.__r.__words[0] = 0;
                        if (v243)
                        {
                          v244 = (std::__shared_weak_count *)v243[4];
                          if (v244)
                          {
                            v245 = (unint64_t *)&v244->__shared_owners_;
                            do
                              v246 = __ldaxr(v245);
                            while (__stlxr(v246 - 1, v245));
                            if (!v246)
                            {
                              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                              std::__shared_weak_count::__release_weak(v244);
                            }
                          }
                          v247 = (std::__shared_weak_count *)v243[2];
                          if (v247)
                          {
                            v248 = (unint64_t *)&v247->__shared_owners_;
                            do
                              v249 = __ldaxr(v248);
                            while (__stlxr(v249 - 1, v248));
                            if (!v249)
                            {
                              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                              std::__shared_weak_count::__release_weak(v247);
                            }
                          }
                          operator delete(v243);
                          v250 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
                          __dst.__r_.__value_.__r.__words[0] = 0;
                          if (v250)
                          {
                            v251 = (std::__shared_weak_count *)v250[4];
                            if (v251)
                            {
                              v252 = (unint64_t *)&v251->__shared_owners_;
                              do
                                v253 = __ldaxr(v252);
                              while (__stlxr(v253 - 1, v252));
                              if (!v253)
                              {
                                ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                                std::__shared_weak_count::__release_weak(v251);
                              }
                            }
                            v254 = (std::__shared_weak_count *)v250[2];
                            if (v254)
                            {
                              v255 = (unint64_t *)&v254->__shared_owners_;
                              do
                                v256 = __ldaxr(v255);
                              while (__stlxr(v256 - 1, v255));
                              if (!v256)
                              {
                                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                                std::__shared_weak_count::__release_weak(v254);
                              }
                            }
                            operator delete(v250);
                          }
                        }
                        v257 = (std::__shared_weak_count *)*((_QWORD *)&v341 + 1);
                        if (*((_QWORD *)&v341 + 1))
                        {
                          v258 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
                          do
                            v259 = __ldaxr(v258);
                          while (__stlxr(v259 - 1, v258));
                          if (!v259)
                          {
                            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                            std::__shared_weak_count::__release_weak(v257);
                          }
                        }
                        v260 = (std::__shared_weak_count *)v340.__r_.__value_.__r.__words[2];
                        if (v340.__r_.__value_.__r.__words[2])
                        {
                          v261 = (unint64_t *)(v340.__r_.__value_.__r.__words[2] + 8);
                          do
                            v262 = __ldaxr(v261);
                          while (__stlxr(v262 - 1, v261));
                          if (!v262)
                          {
                            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                            std::__shared_weak_count::__release_weak(v260);
                          }
                        }
LABEL_602:
                        if (v79)
                        {
                          v263 = (const char *)v350;
                          if (SHIBYTE(v350[2]) < 0)
                            v263 = (const char *)v350[0];
                          sub_207CBB00C((uint64_t)cf, "%s", v263);
                          sub_207CC98B4((uint64_t)cf);
                        }
                        sub_207CC98B4((uint64_t)cf);
                        v264 = (std::__shared_weak_count *)v323;
                        if (v323)
                        {
                          v265 = (unint64_t *)((char *)v323 + 8);
                          do
                            v266 = __ldaxr(v265);
                          while (__stlxr(v266 - 1, v265));
                          if (!v266)
                          {
                            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                            std::__shared_weak_count::__release_weak(v264);
                          }
                        }
                        if (SHIBYTE(v350[2]) < 0)
                          operator delete(v350[0]);
                        *(_QWORD *)value = *MEMORY[0x24BEDB7F0];
                        v267 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)&value[*(_QWORD *)(*(_QWORD *)value - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        *(_QWORD *)&value[16] = v267;
                        *(_QWORD *)&value[24] = MEMORY[0x24BEDB848] + 16;
                        if (v296 < 0)
                          operator delete(v293[1]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x20BD027B8](&v297.__r_.__value_.__r.__words[2]);
                        goto LABEL_616;
                      }
                    }
                    memcpy(p_dst, v158, v176);
                    goto LABEL_540;
                  }
                }
                memmove(v169, v160, v161);
                goto LABEL_446;
              }
            }
            memmove(p_size, v163, v164);
            goto LABEL_438;
          }
        }
        memmove(v83, v155, v82);
        goto LABEL_417;
      }
LABEL_234:
      sub_207CC97C0(v349);
      if (**(int **)(*(_QWORD *)v349 + 56) > 5
        || (v61 = *(unsigned __int8 *)(*(_QWORD *)v349 + 72),
            v62 = sub_207CBE1A0(*(uint64_t *)v349, "OSLogSurrogateAppender", 1, 0),
            v63 = v62,
            !v61)
        && !v62)
      {
LABEL_522:
        if (a5)
        {
          v213 = *(_OWORD *)v302;
          sub_208212E0C((uint64_t)v302, (std::string *)value);
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
          *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = xmmword_20822C970;
          strcpy(v340.__r_.__value_.__l.__data_, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
          *(_OWORD *)cf = v213;
          sub_207D01528((const std::error_condition *)cf, (uint64_t)value, (CFErrorRef *)&v337);
          if (*a5)
            CFRelease(*a5);
          *a5 = 0;
          v214 = v337.__r_.__value_.__r.__words[0];
          if (v337.__r_.__value_.__r.__words[0])
            CFRetain(v337.__r_.__value_.__l.__data_);
          *a5 = (CFTypeRef)v214;
          v215 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
          if (v337.__r_.__value_.__l.__size_)
          {
            v216 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
            do
              v217 = __ldaxr(v216);
            while (__stlxr(v217 - 1, v216));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
          }
          if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v340.__r_.__value_.__l.__data_);
          if ((value[23] & 0x80000000) != 0)
            operator delete(*(void **)value);
        }
LABEL_628:
        if (v314)
        {
          if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v309.__r_.__value_.__l.__data_);
          if (v308 && SHIBYTE(v307) < 0)
            operator delete(v306[0]);
          if (SHIBYTE(v305) < 0)
            operator delete(*(void **)&v304[8]);
          if (v304[0])
          {
            if (SHIBYTE(v303) < 0)
              operator delete(*(void **)&v302[24]);
          }
          if ((v302[23] & 0x80000000) == 0)
            goto LABEL_651;
          v274 = *(void **)v302;
        }
        else
        {
          if (!v309.__r_.__value_.__s.__data_[0])
            goto LABEL_651;
          if (v308)
          {
            if (SHIBYTE(v307) < 0)
              operator delete(v306[0]);
            if ((v304[23] & 0x80000000) != 0)
              operator delete(*(void **)v304);
          }
          if (!(_BYTE)v303 || (v302[39] & 0x80000000) == 0)
            goto LABEL_651;
          v274 = *(void **)&v302[16];
        }
        operator delete(v274);
LABEL_651:
        sub_2081FFA3C((uint64_t)&v315);
        return;
      }
      sub_207CA2878((uint64_t)value);
      sub_208212E0C((uint64_t)v302, &v340);
      if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v340;
      else
        v64 = (std::string *)v340.__r_.__value_.__r.__words[0];
      if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v340.__r_.__value_.__r.__words[2]);
      else
        v65 = v340.__r_.__value_.__l.__size_;
      sub_207CBAB98(&value[16], (uint64_t)v64, v65);
      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v340.__r_.__value_.__l.__data_);
      v283 = a5;
      if ((v297.__r_.__value_.__s.__data_[8] & 0x10) != 0)
      {
        v111 = v297.__r_.__value_.__r.__words[0];
        if (v297.__r_.__value_.__r.__words[0] < *(_QWORD *)&v292[24])
        {
          v297.__r_.__value_.__r.__words[0] = *(_QWORD *)&v292[24];
          v111 = *(_QWORD *)&v292[24];
        }
        v112 = (const void **)&v292[16];
      }
      else
      {
        if ((v297.__r_.__value_.__s.__data_[8] & 8) == 0)
        {
          v66 = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          p_p = &__p;
          goto LABEL_333;
        }
        v112 = (const void **)&v291;
        v111 = *(_QWORD *)&v292[8];
      }
      v115 = *v112;
      v66 = v111 - (_QWORD)*v112;
      if (v66 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v66 >= 0x17)
      {
        v116 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v66 | 7) != 0x17)
          v116 = v66 | 7;
        v117 = v116 + 1;
        p_p = (std::string *)operator new(v116 + 1);
        __p.__r_.__value_.__r.__words[2] = v117 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        __p.__r_.__value_.__l.__size_ = v66;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v111 - *(_BYTE *)v112;
        p_p = &__p;
        if (!v66)
        {
LABEL_333:
          p_p->__r_.__value_.__s.__data_[v66] = 0;
          *(_QWORD *)cf = v349;
          *(std::chrono::steady_clock::time_point *)&cf[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&cf[16] = std::chrono::system_clock::now();
          v318 = 5;
          v319 = "unknown file";
          v320 = 439;
          v323 = 0;
          v321 = "unknown function";
          v322 = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118 = &__p;
          else
            v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v119 = **(_QWORD **)cf;
          v120 = (const char *)(**(_QWORD **)cf + 16);
          v288 = v120;
          if (*(char *)(**(_QWORD **)cf + 39) < 0)
          {
            v120 = *(const char **)(v119 + 16);
            v121 = *(_QWORD *)(v119 + 24);
          }
          else
          {
            v121 = *(unsigned __int8 *)(**(_QWORD **)cf + 39);
          }
          v122 = atomic_load((unsigned __int8 *)&qword_25452B590);
          if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_25452B590))
          {
            sub_207CF696C((uint64_t)&v340);
            sub_207CCBD54("com.apple.cv3d", (unint64_t)&v340, &qword_25452B578);
            if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25452B578, &dword_207C77000);
            __cxa_guard_release(&qword_25452B590);
          }
          if (byte_25452B58F >= 0)
            v123 = (const char *)&qword_25452B578;
          else
            v123 = (const char *)qword_25452B578;
          if (byte_25452B58F >= 0)
            v124 = byte_25452B58F;
          else
            v124 = unk_25452B580;
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v123, v120);
          v125 = &v340.__r_.__value_.__l.__size_;
          if (v124 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          if (v124 >= 0x17)
          {
            v126 = v61;
            v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v124 | 7) != 0x17)
              v127 = v124 | 7;
            v128 = v127 + 1;
            v125 = (std::string::size_type *)operator new(v127 + 1);
            v340.__r_.__value_.__r.__words[2] = v124;
            *(_QWORD *)&v341 = v128 | 0x8000000000000000;
            v340.__r_.__value_.__l.__size_ = (std::string::size_type)v125;
            v61 = v126;
          }
          else
          {
            BYTE7(v341) = v124;
            if (!v124)
            {
LABEL_354:
              *((_BYTE *)v125 + v124) = 0;
              BYTE8(v341) = 1;
              v129 = (char *)&v342;
              if (v121 > 0x7FFFFFFFFFFFFFF7)
                sub_207C95C50();
              if (v121 >= 0x17)
              {
                v130 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v121 | 7) != 0x17)
                  v130 = v121 | 7;
                v131 = v130 + 1;
                v129 = (char *)operator new(v130 + 1);
                v343 = v121;
                v344 = v131 | 0x8000000000000000;
                v342 = v129;
              }
              else
              {
                HIBYTE(v344) = v121;
                if (!v121)
                {
LABEL_362:
                  v129[v121] = 0;
                  LOBYTE(v345) = 1;
                  v132 = v340.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v344) < 0)
                    operator delete(v342);
                  if (BYTE8(v341) && SBYTE7(v341) < 0)
                    operator delete((void *)v340.__r_.__value_.__l.__size_);
                  if (v340.__r_.__value_.__r.__words[0])
                    os_release(v340.__r_.__value_.__l.__data_);
                  if (!v63 || !*(_QWORD *)(v63 + 24))
                  {
                    os_log_type_enabled(v132, OS_LOG_TYPE_ERROR);
                    LODWORD(v340.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v340.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
                    v138 = (void *)_os_log_send_and_compose_impl();
                    a5 = v283;
                    if (v138)
                      free(v138);
                    goto LABEL_508;
                  }
                  _os_log_pack_size();
                  v133 = MEMORY[0x20BD028B4]();
                  v134 = operator new(0x20uLL);
                  *v134 = &off_24C06FA20;
                  v134[1] = 0;
                  v134[2] = 0;
                  v134[3] = v133;
                  v337.__r_.__value_.__r.__words[0] = v133;
                  v337.__r_.__value_.__l.__size_ = v133;
                  v339 = 0;
                  v337.__r_.__value_.__r.__words[2] = (std::string::size_type)v134;
                  v338 = 0;
                  v135 = strlen((const char *)v118);
                  if (v135 > 0x7FFFFFFFFFFFFFF7)
                    sub_207C95C50();
                  v136 = v135;
                  if (v135 >= 0x17)
                  {
                    v139 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v135 | 7) != 0x17)
                      v139 = v135 | 7;
                    v140 = v139 + 1;
                    v137 = (std::string *)operator new(v139 + 1);
                    __dst.__r_.__value_.__r.__words[2] = v140 | 0x8000000000000000;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
                    __dst.__r_.__value_.__l.__size_ = v136;
                  }
                  else
                  {
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v135;
                    v137 = &__dst;
                    if (!v135)
                    {
LABEL_393:
                      v137->__r_.__value_.__s.__data_[v136] = 0;
                      v350[0] = (void *)__dst.__r_.__value_.__l.__size_;
                      v141 = __dst.__r_.__value_.__r.__words[0];
                      *(void **)((char *)v350 + 7) = *(void **)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
                      v142 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                      v143 = (char *)operator new(0x38uLL);
                      *((_QWORD *)v143 + 1) = 0;
                      *((_QWORD *)v143 + 2) = 0;
                      *((_QWORD *)v143 + 3) = &off_24C06FAC0;
                      *(_QWORD *)v143 = off_24C06FA70;
                      v144 = v350[0];
                      *((_QWORD *)v143 + 4) = v141;
                      *((_QWORD *)v143 + 5) = v144;
                      *(void **)(v143 + 47) = *(void **)((char *)v350 + 7);
                      v143[55] = v142;
                      v350[0] = 0;
                      *(void **)((char *)v350 + 7) = 0;
                      v145 = v339;
                      v338 = v143 + 24;
                      v339 = (std::__shared_weak_count *)v143;
                      if (v145)
                      {
                        v146 = (unint64_t *)&v145->__shared_owners_;
                        do
                          v147 = __ldaxr(v146);
                        while (__stlxr(v147 - 1, v146));
                        if (!v147)
                        {
                          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                          std::__shared_weak_count::__release_weak(v145);
                        }
                      }
                      v340 = v337;
                      v148 = v338;
                      if (v337.__r_.__value_.__r.__words[2])
                      {
                        v149 = (unint64_t *)(v337.__r_.__value_.__r.__words[2] + 8);
                        do
                          v150 = __ldxr(v149);
                        while (__stxr(v150 + 1, v149));
                      }
                      v151 = v339;
                      *(_QWORD *)&v341 = v148;
                      *((_QWORD *)&v341 + 1) = v339;
                      if (v339)
                      {
                        v152 = (unint64_t *)&v339->__shared_owners_;
                        do
                          v153 = __ldxr(v152);
                        while (__stxr(v153 + 1, v152));
                        v342 = v148;
                        do
                          v154 = __ldaxr(v152);
                        while (__stlxr(v154 - 1, v152));
                        if (!v154)
                        {
                          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                          std::__shared_weak_count::__release_weak(v151);
                        }
                      }
                      else
                      {
                        v342 = v148;
                      }
                      v179 = (std::__shared_weak_count *)v337.__r_.__value_.__r.__words[2];
                      if (v337.__r_.__value_.__r.__words[2])
                      {
                        v180 = (unint64_t *)(v337.__r_.__value_.__r.__words[2] + 8);
                        do
                          v181 = __ldaxr(v180);
                        while (__stlxr(v181 - 1, v180));
                        if (!v181)
                        {
                          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                          std::__shared_weak_count::__release_weak(v179);
                        }
                      }
                      v182 = v340.__r_.__value_.__r.__words[0];
                      if (v342[31] >= 0)
                        v183 = v342 + 8;
                      else
                        v183 = (char *)*((_QWORD *)v342 + 1);
                      v184 = _os_log_pack_fill();
                      *(_DWORD *)v184 = 136315138;
                      *(_QWORD *)(v184 + 4) = v183;
                      v185 = (char *)operator new(0x40uLL);
                      v186 = *(unsigned __int8 *)(v119 + 39);
                      if ((v186 & 0x80u) == 0)
                        v187 = v288;
                      else
                        v187 = *(const char **)(v119 + 16);
                      if ((v186 & 0x80u) != 0)
                        v186 = *(_QWORD *)(v119 + 24);
                      *(_QWORD *)v185 = v182;
                      *(_OWORD *)(v185 + 8) = *(_OWORD *)&v340.__r_.__value_.__r.__words[1];
                      *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v185 + 24) = v341;
                      v341 = 0uLL;
                      *((_QWORD *)v185 + 5) = v187;
                      *((_QWORD *)v185 + 6) = v186;
                      v185[56] = 16;
                      __dst.__r_.__value_.__r.__words[0] = 0;
                      v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v63 + 24) + 40))(*(_QWORD *)(v63 + 24), &v337);
                      a5 = v283;
                      v188 = (_QWORD *)v337.__r_.__value_.__r.__words[0];
                      v337.__r_.__value_.__r.__words[0] = 0;
                      if (v188)
                      {
                        v189 = (std::__shared_weak_count *)v188[4];
                        if (v189)
                        {
                          v190 = (unint64_t *)&v189->__shared_owners_;
                          do
                            v191 = __ldaxr(v190);
                          while (__stlxr(v191 - 1, v190));
                          if (!v191)
                          {
                            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                            std::__shared_weak_count::__release_weak(v189);
                          }
                        }
                        v192 = (std::__shared_weak_count *)v188[2];
                        if (v192)
                        {
                          v193 = (unint64_t *)&v192->__shared_owners_;
                          do
                            v194 = __ldaxr(v193);
                          while (__stlxr(v194 - 1, v193));
                          if (!v194)
                          {
                            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                            std::__shared_weak_count::__release_weak(v192);
                          }
                        }
                        operator delete(v188);
                        v195 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
                        __dst.__r_.__value_.__r.__words[0] = 0;
                        if (v195)
                        {
                          v196 = (std::__shared_weak_count *)v195[4];
                          if (v196)
                          {
                            v197 = (unint64_t *)&v196->__shared_owners_;
                            do
                              v198 = __ldaxr(v197);
                            while (__stlxr(v198 - 1, v197));
                            if (!v198)
                            {
                              ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                              std::__shared_weak_count::__release_weak(v196);
                            }
                          }
                          v199 = (std::__shared_weak_count *)v195[2];
                          if (v199)
                          {
                            v200 = (unint64_t *)&v199->__shared_owners_;
                            do
                              v201 = __ldaxr(v200);
                            while (__stlxr(v201 - 1, v200));
                            if (!v201)
                            {
                              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                              std::__shared_weak_count::__release_weak(v199);
                            }
                          }
                          operator delete(v195);
                        }
                      }
                      v202 = (std::__shared_weak_count *)*((_QWORD *)&v341 + 1);
                      if (*((_QWORD *)&v341 + 1))
                      {
                        v203 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
                        do
                          v204 = __ldaxr(v203);
                        while (__stlxr(v204 - 1, v203));
                        if (!v204)
                        {
                          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                          std::__shared_weak_count::__release_weak(v202);
                        }
                      }
                      v205 = (std::__shared_weak_count *)v340.__r_.__value_.__r.__words[2];
                      if (v340.__r_.__value_.__r.__words[2])
                      {
                        v206 = (unint64_t *)(v340.__r_.__value_.__r.__words[2] + 8);
                        do
                          v207 = __ldaxr(v206);
                        while (__stlxr(v207 - 1, v206));
                        if (!v207)
                        {
                          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                          std::__shared_weak_count::__release_weak(v205);
                        }
                      }
LABEL_508:
                      if (v61)
                      {
                        v208 = &__p;
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v208 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        sub_207CBB00C((uint64_t)cf, "%s", (const char *)v208);
                        sub_207CC98B4((uint64_t)cf);
                      }
                      sub_207CC98B4((uint64_t)cf);
                      v209 = (std::__shared_weak_count *)v323;
                      if (v323)
                      {
                        v210 = (unint64_t *)((char *)v323 + 8);
                        do
                          v211 = __ldaxr(v210);
                        while (__stlxr(v211 - 1, v210));
                        if (!v211)
                        {
                          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                          std::__shared_weak_count::__release_weak(v209);
                        }
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      *(_QWORD *)value = *MEMORY[0x24BEDB7F0];
                      v212 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&value[*(_QWORD *)(*(_QWORD *)value - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&value[16] = v212;
                      *(_QWORD *)&value[24] = MEMORY[0x24BEDB848] + 16;
                      if (v296 < 0)
                        operator delete(v293[1]);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x20BD027B8](&v297.__r_.__value_.__r.__words[2]);
                      goto LABEL_522;
                    }
                  }
                  memcpy(v137, v118, v136);
                  goto LABEL_393;
                }
              }
              memmove(v129, v120, v121);
              goto LABEL_362;
            }
          }
          memmove(v125, v123, v124);
          goto LABEL_354;
        }
      }
      memmove(p_p, v115, v66);
      goto LABEL_333;
    }
    v335 = operator new(0x38uLL);
    v336 = xmmword_20822C9D0;
    strcpy((char *)v335, "CV3D_AppCode_Pipeline_PatchKeypointTracker/model.json");
    sub_207CF80D8((uint64_t)v350, (std::string::size_type)&v335, 0, 0, &__dst);
    if (!v334)
    {
      sub_207CCB5A4((uint64_t)&v340, "Tracker Param resource not found");
      v348 = 1;
      sub_207CCAFD0(2u, (__int128 *)&v340, (uint64_t)value);
      *(_OWORD *)v302 = *(_OWORD *)value;
      v302[16] = 0;
      v309.__r_.__value_.__s.__data_[0] = 0;
      if (v297.__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v303) = 0;
        if ((_BYTE)v291)
        {
          *(_OWORD *)&v302[16] = *(_OWORD *)&value[16];
          *(_QWORD *)&v302[32] = *(_QWORD *)&value[32];
          memset(&value[16], 0, 24);
          LOBYTE(v303) = 1;
        }
        v304[0] = 0;
        v308 = 0;
        if (v295)
        {
          *(_QWORD *)&v304[16] = *(_QWORD *)&v292[16];
          *(_OWORD *)v304 = *(_OWORD *)v292;
          memset(v292, 0, 24);
          v305 = *(_QWORD *)&v292[24];
          *(_OWORD *)v306 = *(_OWORD *)v293;
          v307 = v294;
          v293[0] = 0;
          v293[1] = 0;
          v294 = 0;
          v308 = 1;
        }
        v309.__r_.__value_.__s.__data_[0] = 1;
        v314 = 0;
        if ((_BYTE)v291 && (value[39] & 0x80000000) != 0)
          operator delete(*(void **)&value[16]);
      }
      else
      {
        v314 = 0;
      }
      if (v348)
      {
        if (v347)
        {
          if (v346 < 0)
            operator delete(v345);
          if (SHIBYTE(v343) < 0)
            operator delete(*((void **)&v341 + 1));
        }
        if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = (void *)v340.__r_.__value_.__r.__words[0];
LABEL_216:
          operator delete(v27);
        }
      }
LABEL_217:
      if (v334 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v336) < 0)
      {
        v26 = v335;
        goto LABEL_222;
      }
      goto LABEL_223;
    }
    v331 = operator new(0x40uLL);
    v332 = xmmword_20822C9E0;
    strcpy((char *)v331, "CV3D_AppCode_Decoder_SegmentationModel/model.espresso.net");
    v12 = (unsigned __int16)sub_207CF7368();
    if (v12 <= 0x100)
      LOBYTE(v12) = 0;
    if (!(_BYTE)v12)
    {
      v286 = 0;
      v287 = 0;
      v285 = 0;
      v13 = 0;
      goto LABEL_49;
    }
    *(_QWORD *)cf = operator new(0x38uLL);
    *(_OWORD *)&cf[8] = xmmword_20822AB50;
    strcpy(*(char **)cf, "CV3D_AppCode_Pipeline_ObjectDetector/model.bundle");
    sub_207CF80D8((uint64_t)v350, (std::string::size_type)cf, 0, 0, (std::string *)value);
    if (!value[24])
    {
      sub_207CCB5A4((uint64_t)&v340, "Detector Model resource not found");
      v348 = 1;
      sub_207CCAFD0(2u, (__int128 *)&v340, (uint64_t)value);
      *(_OWORD *)v302 = *(_OWORD *)value;
      v302[16] = 0;
      v309.__r_.__value_.__s.__data_[0] = 0;
      if (v297.__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v303) = 0;
        if ((_BYTE)v291)
        {
          *(_OWORD *)&v302[16] = *(_OWORD *)&value[16];
          *(_QWORD *)&v302[32] = *(_QWORD *)&value[32];
          memset(&value[16], 0, 24);
          LOBYTE(v303) = 1;
        }
        v304[0] = 0;
        v308 = 0;
        if (v295)
        {
          *(_QWORD *)&v304[16] = *(_QWORD *)&v292[16];
          *(_OWORD *)v304 = *(_OWORD *)v292;
          memset(v292, 0, 24);
          v305 = *(_QWORD *)&v292[24];
          *(_OWORD *)v306 = *(_OWORD *)v293;
          v307 = v294;
          v293[0] = 0;
          v293[1] = 0;
          v294 = 0;
          v308 = 1;
        }
        v309.__r_.__value_.__s.__data_[0] = 1;
        v314 = 0;
        if ((_BYTE)v291 && (value[39] & 0x80000000) != 0)
          operator delete(*(void **)&value[16]);
      }
      else
      {
        v314 = 0;
      }
      if (v348)
      {
        if (v347)
        {
          if (v346 < 0)
            operator delete(v345);
          if (SHIBYTE(v343) < 0)
            operator delete(*((void **)&v341 + 1));
        }
        if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v340.__r_.__value_.__l.__data_);
      }
      v13 = 0;
      v286 = 0;
      v287 = 0;
      v285 = 0;
      v14 = 1;
      if ((cf[23] & 0x80000000) == 0)
      {
LABEL_14:
        if (v14)
          goto LABEL_208;
LABEL_49:
        sub_207CF80D8((uint64_t)v350, (std::string::size_type)&v331, 0, 0, &__p);
        if (!v328)
        {
          sub_207CCB5A4((uint64_t)cf, "Decoder Model resource not found");
          v326 = 1;
          sub_207CCAFD0(2u, (__int128 *)cf, (uint64_t)value);
          *(_OWORD *)v302 = *(_OWORD *)value;
          v302[16] = 0;
          v309.__r_.__value_.__s.__data_[0] = 0;
          if (v297.__r_.__value_.__s.__data_[0])
          {
            LOBYTE(v303) = 0;
            if ((_BYTE)v291)
            {
              *(_OWORD *)&v302[16] = *(_OWORD *)&value[16];
              *(_QWORD *)&v302[32] = *(_QWORD *)&value[32];
              memset(&value[16], 0, 24);
              LOBYTE(v303) = 1;
            }
            v304[0] = 0;
            v308 = 0;
            if (v295)
            {
              *(_QWORD *)&v304[16] = *(_QWORD *)&v292[16];
              *(_OWORD *)v304 = *(_OWORD *)v292;
              memset(v292, 0, 24);
              v305 = *(_QWORD *)&v292[24];
              *(_OWORD *)v306 = *(_OWORD *)v293;
              v307 = v294;
              v293[0] = 0;
              v293[1] = 0;
              v294 = 0;
              v308 = 1;
            }
            v309.__r_.__value_.__s.__data_[0] = 1;
            v314 = 0;
            if ((_BYTE)v291 && (value[39] & 0x80000000) != 0)
              operator delete(*(void **)&value[16]);
          }
          else
          {
            v314 = 0;
          }
          if (v326)
          {
            if (v325)
            {
              if (v324 < 0)
                operator delete(v323);
              if (SHIBYTE(v321) < 0)
                operator delete(v319);
            }
            if ((_BYTE)v318 && (cf[23] & 0x80000000) != 0)
              operator delete(*(void **)cf);
          }
          goto LABEL_205;
        }
        __src = v13;
        v280 = v6;
        sub_207CF9D84((std::__shared_weak_count_vtbl **)value, a4, 1);
        v20 = *(_QWORD *)value;
        v21 = *(std::__shared_weak_count **)&value[8];
        if (*(_QWORD *)&value[8])
        {
          v22 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          *(_QWORD *)cf = v20;
          *(_QWORD *)&cf[8] = v21;
          do
            v24 = __ldxr(v22);
          while (__stxr(v24 + 1, v22));
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          *(_QWORD *)cf = *(_QWORD *)value;
          *(_QWORD *)&cf[8] = 0;
        }
        v28 = *(std::__shared_weak_count **)&value[8];
        if (*(_QWORD *)&value[8])
        {
          v29 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v278 = a3;
        v31 = *(_QWORD *)cf;
        v32 = *(std::__shared_weak_count **)&cf[8];
        v33 = *(const __CFDictionary **)cf;
        if (*(_QWORD *)&cf[8])
        {
          v34 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          do
            v36 = __ldaxr(v34);
          while (__stlxr(v36 - 1, v34));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          v33 = *(const __CFDictionary **)cf;
        }
        if (v31
          && (*(_QWORD *)value = 0,
              CFDictionaryGetValueIfPresent(v33, CFSTR("DeterministicMode"), (const void **)value))
          && ((v37 = *(const void **)value) == 0 || (v38 = CFBooleanGetTypeID(), CFGetTypeID(v37) != v38)
            ? (v39 = 0, v40 = 0)
            : (v39 = CFBooleanGetValue((CFBooleanRef)v37) != 0, v40 = 1),
              v41 = v39 | (v40 << 8),
              v41 > 0xFFu))
        {
          v42 = v41 != 0;
          v43 = *(std::__shared_weak_count **)&cf[8];
          if (*(_QWORD *)&cf[8])
            goto LABEL_123;
        }
        else
        {
          v42 = 0;
          v43 = *(std::__shared_weak_count **)&cf[8];
          if (*(_QWORD *)&cf[8])
          {
LABEL_123:
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            do
              v46 = __ldaxr(v44);
            while (__stlxr(v46 - 1, v44));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
        v282 = a5;
        v276 = a4;
        v277 = v42;
        if (v33
          && (*(_QWORD *)value = 0,
              CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)cf, CFSTR("DecodeAllFrames"), (const void **)value))
          && ((v47 = *(const void **)value) == 0 || (v48 = CFBooleanGetTypeID(), CFGetTypeID(v47) != v48)
            ? (LOWORD(v49) = 0, v50 = 0)
            : (LOWORD(v49) = CFBooleanGetValue((CFBooleanRef)v47) != 0, v50 = 1),
              LOWORD(v49) = v49 | (v50 << 8),
              (unsigned __int16)v49 > 0xFFu))
        {
          v49 = v49;
        }
        else
        {
          v49 = 0;
        }
        v51 = v49 != 0;
        v52 = *(_DWORD *)(a2 + 4);
        if (v52 == 2)
          v53 = 2;
        else
          v53 = v52 == 1;
        v54 = *(_BYTE *)(a2 + 12);
        if (v54)
          v55 = *(_DWORD *)(a2 + 8) == 0;
        else
          v55 = 1;
        v56 = !v55;
        if (!(_BYTE)v338)
          sub_207CA2A4C();
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          sub_207CA40D8(value, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
        else
          *(std::string *)value = v337;
        value[24] = 0;
        v292[0] = 0;
        if (v287)
        {
          if (v280 < 0)
          {
            sub_207CA40D8(&value[24], __src, v5);
          }
          else
          {
            *(_QWORD *)&value[24] = __src;
            *(_QWORD *)&value[32] = v5;
            LODWORD(v291) = v330[0];
            *(_DWORD *)((char *)&v291 + 3) = *(_DWORD *)((char *)v330 + 3);
            HIBYTE(v291) = v280;
          }
          v292[0] = 1;
        }
        if (!v334)
          sub_207CA2A4C();
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_207CA40D8(&v292[8], __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          *(std::string *)&v292[8] = __dst;
        LOBYTE(v293[0]) = 0;
        v295 = 0;
        if (v286)
        {
          if (v281 < 0)
          {
            sub_207CA40D8(v293, v285, (unint64_t)v275);
          }
          else
          {
            v293[0] = v285;
            v293[1] = v275;
            LODWORD(v294) = v329[0];
            *(_DWORD *)((char *)&v294 + 3) = *(_DWORD *)((char *)v329 + 3);
            HIBYTE(v294) = v281;
          }
          v295 = 1;
        }
        if (!v328)
          sub_207CA2A4C();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          sub_207CA40D8(&v297, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v297 = __p;
        LOBYTE(v298) = v277;
        BYTE1(v298) = v51;
        DWORD1(v298) = v53;
        if (*(_DWORD *)a2 >= 2u)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp", 102, (uint64_t)"", 0, (uint64_t)"Unexpected AppC3DConfigTrackingMode value", 41, (void (*)(void **))sub_208216974);
          abort();
        }
        DWORD2(v298) = *(_DWORD *)a2;
        LOBYTE(v299) = 0;
        BYTE8(v299) = 0;
        LOBYTE(v300) = 0;
        BYTE8(v300) = 0;
        *(_QWORD *)v301 = *(_QWORD *)(a2 + 16);
        v301[8] = *(_BYTE *)(a2 + 24);
        *(_DWORD *)&v301[16] = v56;
        v301[20] = v54;
        *(_OWORD *)v302 = *(_OWORD *)value;
        *(_QWORD *)&v302[16] = *(_QWORD *)&value[16];
        memset(value, 0, 24);
        v302[24] = 0;
        v304[0] = 0;
        a5 = v282;
        if (v292[0])
        {
          *(_OWORD *)&v302[24] = *(_OWORD *)&value[24];
          v303 = v291;
          *(_QWORD *)&value[32] = 0;
          v291 = 0;
          *(_QWORD *)&value[24] = 0;
          v304[0] = 1;
        }
        *(_OWORD *)&v304[8] = *(_OWORD *)&v292[8];
        v305 = *(_QWORD *)&v292[24];
        memset(&v292[8], 0, 24);
        LOBYTE(v306[0]) = 0;
        v308 = 0;
        a4 = v276;
        if (v295)
        {
          *(_OWORD *)v306 = *(_OWORD *)v293;
          v307 = v294;
          v293[1] = 0;
          v294 = 0;
          v293[0] = 0;
          v308 = 1;
        }
        v309 = v297;
        v311 = v299;
        v312 = v300;
        *(_OWORD *)v313 = *(_OWORD *)v301;
        memset(&v297, 0, sizeof(v297));
        *(_QWORD *)&v313[13] = *(_QWORD *)&v301[13];
        v310 = v298;
        v314 = 1;
        a3 = v278;
        v6 = v280;
        if (v292[0])
        {
          if (SHIBYTE(v291) < 0)
          {
            operator delete(*(void **)&value[24]);
            if ((value[23] & 0x80000000) != 0)
              operator delete(*(void **)value);
          }
        }
        v57 = *(std::__shared_weak_count **)&cf[8];
        if (*(_QWORD *)&cf[8])
        {
          v58 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v13 = __src;
LABEL_205:
        if (v328 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_208:
        if (v286 && v281 < 0)
          operator delete(v285);
        if (v287 && v6 < 0)
          operator delete(v13);
        if (SHIBYTE(v332) < 0)
        {
          v27 = v331;
          goto LABEL_216;
        }
        goto LABEL_217;
      }
LABEL_13:
      operator delete(*(void **)cf);
      goto LABEL_14;
    }
    v13 = *(void **)value;
    v5 = *(_QWORD *)&value[8];
    v330[0] = *(_DWORD *)&value[16];
    *(_DWORD *)((char *)v330 + 3) = *(_DWORD *)&value[19];
    v6 = value[23];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20822C9F0;
    strcpy(__p.__r_.__value_.__l.__data_, "CV3D_AppCode_Pipeline_PatchKeypointTracker/model.bundle");
    sub_207CF80D8((uint64_t)v350, (std::string::size_type)&__p, 0, 0, (std::string *)value);
    if (value[24])
    {
      v285 = *(void **)value;
      v275 = *(void **)&value[8];
      v329[0] = *(_DWORD *)&value[16];
      *(_DWORD *)((char *)v329 + 3) = *(_DWORD *)&value[19];
      v281 = value[23];
      sub_207CCB6CC(&v331, "CV3D_AppCode_Decoder_SegmentationModel/model.bundle", 0x33uLL);
      v14 = 0;
      v286 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      sub_207CCB5A4((uint64_t)&v340, "Tracker Model resource not found");
      v348 = 1;
      sub_207CCAFD0(2u, (__int128 *)&v340, (uint64_t)value);
      *(_OWORD *)v302 = *(_OWORD *)value;
      v302[16] = 0;
      v309.__r_.__value_.__s.__data_[0] = 0;
      if (v297.__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v303) = 0;
        if ((_BYTE)v291)
        {
          *(_OWORD *)&v302[16] = *(_OWORD *)&value[16];
          *(_QWORD *)&v302[32] = *(_QWORD *)&value[32];
          memset(&value[16], 0, 24);
          LOBYTE(v303) = 1;
        }
        v304[0] = 0;
        v308 = 0;
        if (v295)
        {
          *(_QWORD *)&v304[16] = *(_QWORD *)&v292[16];
          *(_OWORD *)v304 = *(_OWORD *)v292;
          memset(v292, 0, 24);
          v305 = *(_QWORD *)&v292[24];
          *(_OWORD *)v306 = *(_OWORD *)v293;
          v307 = v294;
          v293[0] = 0;
          v293[1] = 0;
          v294 = 0;
          v308 = 1;
        }
        v309.__r_.__value_.__s.__data_[0] = 1;
        v314 = 0;
        if ((_BYTE)v291 && (value[39] & 0x80000000) != 0)
          operator delete(*(void **)&value[16]);
      }
      else
      {
        v314 = 0;
      }
      if (v348)
      {
        if (v347)
        {
          if (v346 < 0)
            operator delete(v345);
          if (SHIBYTE(v343) < 0)
            operator delete(*((void **)&v341 + 1));
        }
        if ((_BYTE)v341 && SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v340.__r_.__value_.__l.__data_);
      }
      v286 = 0;
      v285 = 0;
      v14 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_12:
        v287 = 1;
        if ((cf[23] & 0x80000000) == 0)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
  *(_QWORD *)value = operator new(0x20uLL);
  *(_OWORD *)&value[8] = xmmword_20822C9B0;
  strcpy(*(char **)value, "AppC3DSessionRef* is null");
  v15 = (char *)operator new(0x60uLL);
  *(_QWORD *)v302 = v15;
  *(_OWORD *)&v302[8] = xmmword_20822C970;
  strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a5)
  {
    v340.__r_.__value_.__r.__words[0] = 22;
    v340.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
    sub_207D01528((const std::error_condition *)&v340, (uint64_t)value, (CFErrorRef *)cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v16 = *(const void **)cf;
    if (*(_QWORD *)cf)
      CFRetain(*(CFTypeRef *)cf);
    *a5 = v16;
    v17 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      goto LABEL_25;
    v18 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v302[23] & 0x80000000) == 0)
      {
LABEL_26:
        if ((value[23] & 0x80000000) == 0)
          return;
LABEL_47:
        operator delete(*(void **)value);
        return;
      }
    }
    else
    {
LABEL_25:
      if ((v302[23] & 0x80000000) == 0)
        goto LABEL_26;
    }
    v15 = *(char **)v302;
  }
  operator delete(v15);
  if ((value[23] & 0x80000000) != 0)
    goto LABEL_47;
}

void sub_207CC90CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  if (*(_BYTE *)(v57 - 232) && *(char *)(v57 - 233) < 0)
    operator delete(*(void **)(v57 - 256));
  __cxa_guard_abort(&qword_25452B590);
  sub_207CC9A58((uint64_t)&STACK[0x268]);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  sub_207CA29B0((uint64_t)&a21);
  sub_207CC9AC8((uint64_t)&STACK[0x2D0]);
  sub_207CC9B4C((uint64_t)&a57);
  sub_2081FFA3C((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_207CC9640(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 256);
  if (LOBYTE(STACK[0x368]))
  {
    if (SLOBYTE(STACK[0x367]) < 0)
      operator delete((void *)STACK[0x350]);
  }
  if (*(char *)(v1 - 129) < 0)
  {
    operator delete(*(void **)(v1 - 152));
    if ((*(char *)(v1 - 105) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(v1 - 105) & 0x80000000) == 0)
  {
LABEL_6:
    sub_2081FFA3C((uint64_t)&STACK[0x258]);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v1 - 128));
  sub_2081FFA3C((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_207CC9690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (*a22)(void))
{
  if (a21)
    a22();
  JUMPOUT(0x207CC96C0);
}

void sub_207CC96AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207CC96BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_207CC9B4C((uint64_t)&a57);
  sub_2081FFA3C((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_207CC9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207CC977C()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    JUMPOUT(0x207CC9764);
  JUMPOUT(0x207CC974CLL);
}

void sub_207CC978C(_Unwind_Exception *a1)
{
  sub_2081FFA3C((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_207CC97C0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_253E51090);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51090))
  {
    sub_2082018F8(&v5);
    sub_207C96EE8(__p, "cv3dapi.app_clip_code.appc3d");
    sub_207CBEFE0(&v5, (uint64_t)__p, &qword_253E51088);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_253E51090);
  }
  *a1 = qword_253E51088;
}

void sub_207CC985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E51090);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E51090);
  _Unwind_Resume(a1);
}

void sub_207CC98B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_207CBEF3C(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_207CC9A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207CCB828((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207CC9A58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_207CC98B4(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_207CC9AC8(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(uint64_t ***)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
    {
      v3 = sub_207CDA04C(v2);
      operator delete(v3);
    }
    return a1;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_207CC9B4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 208))
  {
    sub_207CCAEEC(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void AppC3DSetPerformanceMode(uint64_t *a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (a2 >= 3)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp", 63, (uint64_t)"", 0, (uint64_t)"Unexpected AppC3DPerformanceMode value", 38, (void (*)(void **))sub_208216974);
      abort();
    }
    v3 = *a1;
    LODWORD(__p) = a2;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 80) + 256) + 16))(*(_QWORD *)(*(_QWORD *)v3 + 80) + 256, &__p);
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_20822C980;
    strcpy((char *)__p, "AppC3DSessionRef is null");
    v5 = (char *)operator new(0x60uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_207D01528(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
}

void sub_207CC9DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DSetUpdateCallback(uint64_t *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void **p_p;
  uint64_t v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;
  void *__p;
  __int128 v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
  {
    __p = operator new(0x20uLL);
    v26 = xmmword_20822C980;
    strcpy((char *)__p, "AppC3DSessionRef is null");
    v15 = (char *)operator new(0x60uLL);
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_207D01528(&v24, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v16;
      v17 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    operator delete(v15);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    return;
  }
  v7 = *((_BYTE *)a1 + 8);
  v8 = *a1;
  v9 = operator new(0x20uLL);
  *v9 = &off_24C06FAF8;
  v9[1] = a2;
  v9[2] = a3;
  *((_BYTE *)v9 + 24) = v7;
  v27[0] = v9;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 80);
  (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 72) + 64))(*(_QWORD *)(v10 + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 240) + 64))(*(_QWORD *)(v10 + 240));
  v12 = (uint64_t *)(*(_QWORD *)v8 + 192);
  v11 = (_QWORD *)*v12;
  v13 = *(_QWORD *)v8 + 168;
  *v12 = 0;
  if (v11 == (_QWORD *)v13)
  {
    v14 = 4;
    v11 = (_QWORD *)v13;
  }
  else
  {
    if (!v11)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v14))();
LABEL_20:
  if (v27[0])
  {
    if ((void **)v27[0] == &__p)
    {
      *v12 = v13;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v13);
      goto LABEL_25;
    }
    *v12 = v27[0];
    v12 = v27;
  }
  *v12 = 0;
LABEL_25:
  p_p = (void **)v27[0];
  if ((void **)v27[0] == &__p)
  {
    v21 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v27[0])
      return;
    v21 = 5;
  }
  (*((void (**)(void))*p_p + v21))();
}

void sub_207CCA094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void AppC3DProcess(uint64_t *a1, int a2, int a3, std::__shared_weak_count_vtbl *a4, char *a5, uint64_t a6, float64_t *a7, std::__shared_weak_count_vtbl *a8, double a9, CFTypeRef *a10)
{
  float64x2_t v10;
  float32x4_t v11;
  float64x2_t v12;
  float64x2_t v13;
  char *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *cat;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BYTE __p[32];
  float32x4_t v29;
  char *v30;
  __int128 v31;
  CFErrorRef v32;
  std::__shared_weak_count *v33;
  std::error_condition v34;

  if (!a1 || !a6 || !a7)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822CA00;
    strcpy(*(char **)__p, "Mandatory argument is null");
    v14 = (char *)operator new(0x60uLL);
    v30 = v14;
    v31 = xmmword_20822C970;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a10)
    {
      *(_QWORD *)&v34.__val_ = 22;
      v34.__cat_ = std::generic_category();
      sub_207D01528(&v34, (uint64_t)__p, &v32);
      if (*a10)
        CFRelease(*a10);
      *a10 = 0;
      v15 = v32;
      if (v32)
        CFRetain(v32);
      *a10 = v15;
      v16 = v33;
      if (!v33)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v31) & 0x80000000) == 0)
        {
LABEL_16:
          if ((__p[23] & 0x80000000) == 0)
            return;
          goto LABEL_39;
        }
      }
      else
      {
LABEL_15:
        if ((SHIBYTE(v31) & 0x80000000) == 0)
          goto LABEL_16;
      }
      v14 = v30;
    }
    operator delete(v14);
    if ((__p[23] & 0x80000000) == 0)
      return;
LABEL_39:
    operator delete(*(void **)__p);
    return;
  }
  v10.f64[0] = *(float64_t *)(a6 + 16);
  v10.f64[1] = *a7;
  v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a6), v10);
  v12.f64[0] = *(float64_t *)(a6 + 40);
  v12.f64[1] = a7[1];
  v13 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a6 + 24)), v12);
  *(float32x4_t *)__p = v11;
  *(float64x2_t *)&__p[16] = v13;
  v13.f64[0] = *(float64_t *)(a6 + 64);
  v13.f64[1] = a7[2];
  v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a6 + 48)), v13);
  v32 = *(CFErrorRef *)&a9;
  if (a5)
  {
    v30 = a5;
    *(_QWORD *)&v31 = 1;
  }
  else
  {
    LOBYTE(v30) = 0;
    LOBYTE(v31) = 0;
  }
  sub_207CD847C(a4, *a1, a2, a3, (uint64_t *)&v32, (uint64_t)&v30, (__int128 *)__p, a8, (uint64_t)&v34);
  v20 = *(_QWORD *)&v34.__val_;
  cat = (std::__shared_weak_count *)v34.__cat_;
  if (v34.__cat_)
  {
    v21 = (unint64_t *)&v34.__cat_[1];
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
    }
  }
  if (a10 && v20)
  {
    v24 = *(const void **)&v34.__val_;
    if (*(_QWORD *)&v34.__val_)
      CFRetain(*(CFTypeRef *)&v34.__val_);
    *a10 = v24;
  }
  v25 = (std::__shared_weak_count *)v34.__cat_;
  if (v34.__cat_)
  {
    v26 = (unint64_t *)&v34.__cat_[1];
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_207CCA3CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_207CCA3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DProcessSLAMData(uint64_t *a1, uint64_t a2, float64_t *a3, CFTypeRef *a4, double a5)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float32x4_t v9;
  std::__shared_weak_count *v10;
  CFTypeRef v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  CFErrorRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _BYTE __p[32];
  float32x4_t v25;
  CFTypeRef cf;
  __int128 v27;
  CFErrorRef v28;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (!a1 || !a2 || !a3)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822CA00;
    strcpy(*(char **)__p, "Mandatory argument is null");
    v19 = operator new(0x60uLL);
    cf = v19;
    v27 = xmmword_20822C970;
    strcpy((char *)v19, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a4)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_207D01528(&v30, (uint64_t)__p, &v28);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v20 = v28;
      if (v28)
        CFRetain(v28);
      *a4 = v20;
      v21 = v29;
      if (!v29)
        goto LABEL_29;
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if ((SHIBYTE(v27) & 0x80000000) == 0)
        {
LABEL_30:
          if ((__p[23] & 0x80000000) == 0)
            return;
          goto LABEL_35;
        }
      }
      else
      {
LABEL_29:
        if ((SHIBYTE(v27) & 0x80000000) == 0)
          goto LABEL_30;
      }
      v19 = (void *)cf;
    }
    operator delete(v19);
    if ((__p[23] & 0x80000000) == 0)
      return;
LABEL_35:
    operator delete(*(void **)__p);
    return;
  }
  v6.f64[0] = *(float64_t *)(a2 + 16);
  v6.f64[1] = *a3;
  v7 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), v6);
  v8.f64[0] = *(float64_t *)(a2 + 40);
  v8.f64[1] = a3[1];
  v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 24)), v8);
  *(float64x2_t *)__p = v7;
  *(float32x4_t *)&__p[16] = v9;
  v7.f64[0] = *(float64_t *)(a2 + 64);
  v7.f64[1] = a3[2];
  v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 48)), v7);
  *(double *)&v30.__val_ = a5;
  sub_207CD9AA4(*a1, (__int128 *)__p, (uint64_t *)&v30.__val_, (uint64_t)&cf);
  v11 = cf;
  v10 = (std::__shared_weak_count *)v27;
  if ((_QWORD)v27)
  {
    v12 = (unint64_t *)(v27 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a4 && v11)
  {
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v15;
  }
  v16 = (std::__shared_weak_count *)v27;
  if ((_QWORD)v27)
  {
    v17 = (unint64_t *)(v27 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_207CCA6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CCA6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DProcessCameraFrameData(uint64_t *a1, int a2, int a3, std::__shared_weak_count_vtbl *a4, void *a5, std::__shared_weak_count_vtbl *a6, CFTypeRef *a7, double a8)
{
  void *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  CFTypeRef v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CFTypeRef v23;
  __int128 v24;
  void *__p;
  __int128 v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v26 = xmmword_20822CA00;
    strcpy((char *)__p, "Mandatory argument is null");
    v9 = operator new(0x60uLL);
    v23 = v9;
    v24 = xmmword_20822C970;
    strcpy((char *)v9, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a7)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_207D01528(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a7 = v10;
      v11 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if ((SHIBYTE(v24) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          return;
        goto LABEL_38;
      }
      v9 = (void *)v23;
    }
    operator delete(v9);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__p);
    return;
  }
  *(double *)&v29.__val_ = a8;
  if (a5)
  {
    __p = a5;
    *(_QWORD *)&v26 = 1;
  }
  else
  {
    LOBYTE(__p) = 0;
    LOBYTE(v26) = 0;
  }
  sub_207CD90AC(a4, *a1, a2, a3, (uint64_t *)&v29.__val_, (uint64_t)&__p, a6, (CFErrorRef *)&v23);
  v15 = v23;
  v14 = (std::__shared_weak_count *)v24;
  if (!(_QWORD)v24)
    goto LABEL_23;
  v16 = (unint64_t *)(v24 + 8);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (a7)
    {
LABEL_24:
      if (v15)
      {
        v19 = v23;
        if (v23)
          CFRetain(v23);
        *a7 = v19;
      }
    }
  }
  else
  {
LABEL_23:
    if (a7)
      goto LABEL_24;
  }
  v20 = (std::__shared_weak_count *)v24;
  if ((_QWORD)v24)
  {
    v21 = (unint64_t *)(v24 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207CCA960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CCA974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DWait(uint64_t ***a1, CFTypeRef *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    v2 = *a1;
    if (*((_BYTE *)*a1 + 16))
    {
      v3 = *v2;
      v4 = **v2;
      if (v4)
      {
        v5 = *(_QWORD ***)(*(_QWORD *)(v4 + 128) + 72);
        (*(void (**)(_QWORD *))(*v5[9] + 64))(v5[9]);
        (*(void (**)(_QWORD *))(*v5[30] + 64))(v5[30]);
        (*(void (**)(_QWORD *))(*v5[51] + 64))(v5[51]);
        v3 = *v2;
      }
      v6 = v3[10];
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 64))(*(_QWORD *)(v6 + 72));
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 64))(*(_QWORD *)(v6 + 240));
      v7 = *(_QWORD *)((*v2)[20] + 72);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v15 = xmmword_20822CA00;
    strcpy((char *)__p, "Mandatory argument is null");
    v9 = (char *)operator new(0x60uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_207D01528(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
  }
}

void sub_207CCABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DFlush(_BYTE **a1, CFTypeRef *a2)
{
  char *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  CFTypeRef v8;
  unint64_t *p_shared_owners;
  char *v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_20822CA00;
    strcpy((char *)__p, "Mandatory argument is null");
    v3 = (char *)operator new(0x60uLL);
    v10 = v3;
    strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
    if (!a2)
      goto LABEL_25;
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_207D01528(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v5 = v14;
    if (!v14)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_20;
  }
  if (sub_207CD9BF4(*a1))
    return;
  __p = operator new(0x19uLL);
  v12 = xmmword_20822C950;
  strcpy((char *)__p, "Operation not supported");
  v3 = (char *)operator new(0x60uLL);
  v10 = v3;
  strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DInterface.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 45;
    v15.__cat_ = std::generic_category();
    sub_207D01528(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v4 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v4;
    v5 = v14;
    if (!v14)
      goto LABEL_24;
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
LABEL_20:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_24:
    v3 = v10;
  }
LABEL_25:
  operator delete(v3);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
}

void sub_207CCAE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AppC3DRelease(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t **v3;

  if (a1)
  {
    sub_2081FFA3C((uint64_t)(a1 + 2));
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = sub_207CDA04C(v2);
      operator delete(v3);
    }
    operator delete(a1);
  }
}

void sub_207CCAEEC(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_207CCAF70(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_207CCAFD0(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_207CCB3BC(v7, a2);
  sub_207CCB1D4((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_207CCB134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CCB148(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207CCB1D4(uint64_t a1, unsigned int a2, __int128 *a3)
{
  const std::error_category *v6;
  uint64_t v7;
  void *__dst[2];
  uint64_t v10;
  char v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  char v17;
  char v18;

  v6 = std::generic_category();
  sub_207CCB3BC(__dst, a3);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v18)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v10;
    __dst[1] = 0;
    v10 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v17)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v11)
      return a1;
    goto LABEL_13;
  }
  v7 = v14;
  *(_QWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v16;
  __p[1] = 0;
  v16 = 0;
  v13 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    operator delete(v12[0]);
    if (!v11)
      return a1;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_12;
LABEL_7:
  if (!v11)
    return a1;
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

uint64_t sub_207CCB330(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_BYTE *sub_207CCB3BC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_207CCB474(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_207CCB444(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_207CCB148(v1);
  _Unwind_Resume(a1);
}

char *sub_207CCB474(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_207CA40D8(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_207CCB50C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_207CCB544(v1);
    _Unwind_Resume(a1);
  }
  sub_207CCB544(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CCB544(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207CCB5A4(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    v9 = (void *)__dst;
    sub_207CA40D8((_BYTE *)a1, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    operator delete(v9);
    return a1;
  }
  HIBYTE(v12) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v12) < 0)
    goto LABEL_10;
LABEL_5:
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_207CCB6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_207CCB6CC(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_207C95C50();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

uint64_t sub_207CCB828(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207CCB890(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_24C06F9F8;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_207CCB3BC((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_207CCB8CC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_207CCB8E0(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C06F9F8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

void sub_207CCB978(std::exception *this)
{
  void *v2;

  this->__vftable = (std::exception_vtbl *)off_24C06F9F8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    goto LABEL_8;
  }
LABEL_7:
  std::exception::~exception(this);
LABEL_8:
  operator delete(v2);
}

uint64_t sub_207CCBA1C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_24C06FBA8;
  sub_207CCBAD4((std::__shared_weak_count_vtbl **)(a1 + 8), a2);
  return a1;
}

void sub_207CCBA4C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_207CCBA60(std::exception *this)
{
  std::exception_vtbl *v2;
  unint64_t *v3;
  unint64_t v4;

  this->__vftable = (std::exception_vtbl *)off_24C06FBA8;
  v2 = this[2].__vftable;
  if (!v2)
    goto LABEL_5;
  v3 = (unint64_t *)&v2->~exception_0;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*((void (**)(std::exception_vtbl *))v2->~exception + 2))(v2);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
    std::exception::~exception(this);
  }
  else
  {
LABEL_5:
    std::exception::~exception(this);
  }
}

std::__shared_weak_count_vtbl **sub_207CCBAD4(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CCBBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CCBBF8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CCBC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CCBC30(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CCBC44(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CCBC64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CCBCD4(std::exception *this)
{
  std::exception_vtbl *v2;
  unint64_t *v3;
  unint64_t v4;
  void *v5;

  this->__vftable = (std::exception_vtbl *)off_24C06FBA8;
  v2 = this[2].__vftable;
  if (!v2)
    goto LABEL_5;
  v3 = (unint64_t *)&v2->~exception_0;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*((void (**)(std::exception_vtbl *))v2->~exception + 2))(v2);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
    std::exception::~exception(this);
  }
  else
  {
LABEL_5:
    std::exception::~exception(this);
  }
  operator delete(v5);
}

unint64_t sub_207CCBD54@<X0>(char *__s@<X1>, unint64_t result@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = a3;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    a3[2] = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    return result;
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v5;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)v3 + 23) = result;
    if (!result)
    {
      *(_BYTE *)v3 = 0;
      return result;
    }
  }
  result = (unint64_t)memcpy(v3, __s, v5);
  *((_BYTE *)v3 + v5) = 0;
  return result;
}

uint64_t sub_207CCBE34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_207CCBEE0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_207CCBF24(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CCBF38(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_207CCBF48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CCBFB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CCBFC8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CCBFE8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_207CCC000(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

_QWORD **sub_207CCC040(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)v2[2];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v2);
  }
  return a1;
}

__n128 sub_207CCC0F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C06FAF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_207CCC134(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C06FAF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_207CCC15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  CFErrorRef v12;
  __CFError *v13;
  float32x2_t v14;
  CFDictionaryRef DictionaryRepresentation;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  CFMutableArrayRef v20;
  const void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const __CFAllocator *v29;
  __CFDictionary *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFStringRef v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  CFMutableArrayRef v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t i;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  __CFDictionary *theDict;
  unsigned int *v83;
  CFStringRef v84;
  std::__shared_weak_count *v85;
  _BYTE __p[24];
  void *v87[2];
  void *value;
  std::__shared_weak_count *v89;
  CFMutableArrayRef theArray[2];
  CGRect v91;

  if (!*(_BYTE *)(a2 + 48))
  {
    if (CFErrorGetCode(*(CFErrorRef *)a2) != 4)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, double))(a1 + 8))(*(_QWORD *)(a1 + 16), 0, *(_QWORD *)(a2 + 56), a2 + 80, 0, *(_QWORD *)(a2 + 152), *(_QWORD *)a2, *(double *)(a2 + 72));
    return;
  }
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = (unsigned int *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
  {
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    sub_207CCCC78((uint64_t)(v6 + 2), v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 5));
    v7[8] = 1;
    *(_QWORD *)v7 = &off_24C06FCD0;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4, MEMORY[0x24BDBD690]);
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC30;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v12 = *(CFErrorRef *)a2;
  v13 = *(__CFError **)(a2 + 8);
  if (*(__CFError **)a2 != v13)
  {
    do
    {
      v14 = vsub_f32(*(float32x2_t *)((char *)v12 + 8), *(float32x2_t *)v12);
      v91.origin.x = COERCE_FLOAT(*(_QWORD *)v12);
      v91.origin.y = COERCE_FLOAT(HIDWORD(*(_QWORD *)v12));
      v91.size.width = v14.f32[0];
      v91.size.height = v14.f32[1];
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v91);
      CFArrayAppendValue(Mutable, DictionaryRepresentation);
      v12 = (CFErrorRef)((char *)v12 + 16);
    }
    while (v12 != v13);
  }
  if (Mutable)
    CFRetain(Mutable);
  v16 = (unint64_t *)operator new(0x20uLL);
  v16[1] = 0;
  v17 = v16 + 1;
  *v16 = (unint64_t)&off_24C06EAE0;
  v16[2] = 0;
  v16[3] = (unint64_t)Mutable;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(_OWORD *)&__p[8] = 0uLL;
  *(_QWORD *)__p = &__p[8];
  sub_207D00144(__p, theArray);
  v20 = theArray[0];
  v19 = (std::__shared_weak_count *)theArray[1];
  sub_207CFF9E4((uint64_t)__p, *(char **)&__p[8]);
  if (!*(_BYTE *)(a1 + 24))
    goto LABEL_116;
  __p[23] = 10;
  strcpy(__p, "detections");
  sub_207CF9170((uint64_t)__p, (CFStringRef *)v87);
  v21 = v87[0];
  if (!v19)
    goto LABEL_18;
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v20)
      goto LABEL_38;
  }
  else
  {
LABEL_18:
    if (!v20)
      goto LABEL_38;
  }
  theArray[0] = Mutable;
  theArray[1] = (CFMutableArrayRef)v16;
  do
    v25 = __ldxr(v17);
  while (__stxr(v25 + 1, v17));
  v83 = v7;
  sub_207CA66E4((std::__shared_weak_count_vtbl **)&value, (uint64_t)theArray);
  v26 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_25;
  v27 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = v8;
    v30 = v20;
    v31 = value;
    v32 = v89;
    if (!v89)
      goto LABEL_30;
  }
  else
  {
LABEL_25:
    v29 = v8;
    v30 = v20;
    v31 = value;
    v32 = v89;
    if (!v89)
      goto LABEL_30;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  do
    v35 = __ldaxr(v33);
  while (__stlxr(v35 - 1, v33));
  if (v35)
  {
LABEL_30:
    if (!v31)
      goto LABEL_32;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (v31)
LABEL_31:
    CFDictionarySetValue(v30, v21, value);
LABEL_32:
  v36 = v89;
  if (v89)
  {
    v37 = (unint64_t *)&v89->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v20 = v30;
  v8 = v29;
  v7 = v83;
LABEL_38:
  v39 = (std::__shared_weak_count *)v87[1];
  if (!v87[1])
    goto LABEL_42;
  v40 = (unint64_t *)((char *)v87[1] + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_42:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_43;
LABEL_50:
    operator delete(*(void **)__p);
    if (!*(_BYTE *)(a2 + 232))
      goto LABEL_116;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_50;
LABEL_43:
  if (!*(_BYTE *)(a2 + 232))
    goto LABEL_116;
LABEL_51:
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20822C9B0;
  strcpy(*(char **)__p, "worldToCameraPoseRowMajor");
  sub_207CF9170((uint64_t)__p, &v84);
  v42 = v84;
  if (!v19)
    goto LABEL_56;
  v43 = (unint64_t *)&v19->__shared_owners_;
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  do
    v45 = __ldaxr(v43);
  while (__stlxr(v45 - 1, v43));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v20)
      goto LABEL_109;
  }
  else
  {
LABEL_56:
    if (!v20)
      goto LABEL_109;
  }
  theDict = v20;
  v46 = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable(v8, 0, MEMORY[0x24BDBD690]);
  sub_207CF94CC((std::__shared_weak_count_vtbl **)theArray, v46, 0);
  v47 = theArray[0];
  v48 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v49 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (!v47)
  {
    v61 = v87;
    goto LABEL_89;
  }
  for (i = 0; i != 16; ++i)
  {
    sub_207CF8D5C((void *)(a2 + 168 + 4 * i), (CFNumberRef *)&value);
    v53 = value;
    v54 = v89;
    if (!v89)
      goto LABEL_70;
    v55 = (unint64_t *)&v89->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if (v53)
      {
LABEL_71:
        CFArrayAppendValue(theArray[0], value);
        v58 = v89;
        if (!v89)
          goto LABEL_79;
        goto LABEL_75;
      }
    }
    else
    {
LABEL_70:
      if (v53)
        goto LABEL_71;
    }
    v87[0] = 0;
    v87[1] = 0;
    v58 = v89;
    if (!v89)
      goto LABEL_79;
LABEL_75:
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
LABEL_79:
    if (!v53)
      goto LABEL_90;
  }
  *(_OWORD *)v87 = *(_OWORD *)theArray;
  v61 = theArray;
LABEL_89:
  *v61 = 0;
  v61[1] = 0;
LABEL_90:
  v62 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v63 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v87[0];
  v66 = (std::__shared_weak_count *)v87[1];
  if (v87[1])
  {
    v67 = (unint64_t *)((char *)v87[1] + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    do
      v69 = __ldaxr(v67);
    while (__stlxr(v69 - 1, v67));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v65)
    CFDictionarySetValue(theDict, v42, v87[0]);
  v70 = (std::__shared_weak_count *)v87[1];
  if (v87[1])
  {
    v71 = (unint64_t *)((char *)v87[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v20 = theDict;
LABEL_109:
  v73 = v85;
  if (v85)
  {
    v74 = (unint64_t *)&v85->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_116:
  (*(void (**)(_QWORD, unsigned int *, _QWORD, uint64_t, CFMutableArrayRef, _QWORD, _QWORD, double))(a1 + 8))(*(_QWORD *)(a1 + 16), v7, *(_QWORD *)(a2 + 56), a2 + 80, v20, *(_QWORD *)(a2 + 152), 0, *(double *)(a2 + 72));
  if (v19)
  {
    v76 = (unint64_t *)&v19->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  do
    v78 = __ldaxr(v17);
  while (__stlxr(v78 - 1, v17));
  if (!v78)
  {
    (*(void (**)(unint64_t *))(*v16 + 16))(v16);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
  }
  if (v7)
  {
    v79 = v7 + 8;
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
}

void sub_207CCC940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  unsigned int *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  sub_207C99D78((uint64_t)&a20);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a19 < 0)
    operator delete(__p);
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v34 = __ldaxr(v28);
  while (__stlxr(v34 - 1, v28));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v25)
  {
    v35 = v25 + 8;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207CCCC00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23AppC3DSetUpdateCallbackE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23AppC3DSetUpdateCallbackE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23AppC3DSetUpdateCallbackE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23AppC3DSetUpdateCallbackE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CCCC6C()
{
  return &unk_24C06FB58;
}

uint64_t sub_207CCCC78(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x19999999999999ALL)
      sub_207CA420C();
    result = (uint64_t)operator new(160 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 160 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_207CCCDFC(v8 + v9, (__int128 *)(a2 + v9));
        v9 += 160;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207CCCD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207CCCD78(&a9);
  _Unwind_Resume(a1);
}

void sub_207CCCD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 160)
    sub_207CCD214(v10 - 160 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_207CCCD78(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207CCCD78(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 160;
          sub_207CCD214(v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207CCCDFC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count_vtbl **v9;
  int v10;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  v9 = (std::__shared_weak_count_vtbl **)(a1 + 104);
  v10 = *((unsigned __int8 *)a2 + 128);
  *(_BYTE *)(a1 + 128) = v10;
  if (v10)
  {
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    sub_207CCCEF0((std::__shared_weak_count_vtbl **)(a1 + 112), (uint64_t)(a2 + 7));
  }
  else
  {
    sub_207CCBAD4(v9, (uint64_t)a2 + 104);
  }
  sub_207CCD0F0((_QWORD *)(a1 + 136), (uint64_t)a2 + 136);
  return a1;
}

void sub_207CCCE84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *p_shared_owners;

  if (*(_BYTE *)(v1 + 128))
  {
    v3 = *(std::__shared_weak_count **)(v1 + 120);
    if (!v3)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(v1 + 112);
    if (!v3)
      goto LABEL_11;
    v4 = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **sub_207CCCEF0(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CCD000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CCD014(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CCD02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CCD04C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CCD060(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CCD080(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_207CCD0F0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_207CA420C();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_207CCD198(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CCD214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 144);
    v4 = *(void **)(a1 + 136);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 128))
  {
    v8 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v8)
      return;
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(a1 + 112);
    if (!v8)
      return;
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v11);
    while (__stlxr(v10 - 1, v11));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_207CCD318(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CCD32C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CCD34C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CCD3BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 160;
        sub_207CCD214(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207CCD41C(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = __p[1];
  if (v2)
  {
    v3 = __p[2];
    v4 = (void *)__p[1];
    if (v3 != v2)
    {
      do
      {
        v3 -= 160;
        sub_207CCD214(v3);
      }
      while (v3 != v2);
      v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

unint64_t AppC3DTrackingResultGetNumberOfTrackingData(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
  __p = operator new(0x20uLL);
  v10 = xmmword_20822ABA0;
  strcpy((char *)__p, "AppC3DTrackingResultRef is null");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_207D01528(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_207CCD618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DTrackingResultGetId(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) > a2)
      return *(_QWORD *)(v4 + 160 * a2 + 72);
    __p = operator new(0x20uLL);
    v17 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v11 = (char *)operator new(0x60uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 34;
      v20.__cat_ = std::generic_category();
      sub_207D01528(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v6 = (char *)operator new(0x60uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_207D01528(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_207CCD944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 AppC3DTrackingResultCopyTransform(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v5;
  CFErrorRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFErrorRef v10;
  unint64_t *v11;
  __int128 v13;
  char *v14;
  void *__p;
  __int128 v16;
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v13 = xmmword_20822CFC0;
  if (!a1)
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v5 = (char *)operator new(0x60uLL);
    v14 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (!a3)
      goto LABEL_24;
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_207D01528(&v19, (uint64_t)&__p, &v17);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = v17;
    if (v17)
      CFRetain(v17);
    *a3 = v6;
    v7 = v18;
    if (!v18)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) > a2)
    return *(__n128 *)(v4 + 160 * a2);
  __p = operator new(0x20uLL);
  v16 = xmmword_20822ABA0;
  strcpy((char *)__p, "Specified index is out of range");
  v5 = (char *)operator new(0x60uLL);
  v14 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
  if (a3)
  {
    *(_QWORD *)&v19.__val_ = 34;
    v19.__cat_ = std::generic_category();
    sub_207D01528(&v19, (uint64_t)&__p, &v17);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = v17;
    if (v17)
      CFRetain(v17);
    *a3 = v10;
    v7 = v18;
    if (!v18)
      goto LABEL_23;
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v11);
    while (__stlxr(v9 - 1, v11));
LABEL_21:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_23:
    v5 = v14;
  }
LABEL_24:
  operator delete(v5);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  return (__n128)v13;
}

void sub_207CCDC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  operator delete(v25);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double AppC3DTrackingResultGetSize(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) > a2)
      return *(double *)(v4 + 160 * a2 + 80);
    __p = operator new(0x20uLL);
    v15 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 34;
      v18.__cat_ = std::generic_category();
      sub_207D01528(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_23:
      v6 = v13;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v15 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_207D01528(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_23;
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_207CCDF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float AppC3DTrackingResultGetConfidence(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) > a2)
      return *(float *)(v4 + 160 * a2 + 96);
    __p = operator new(0x20uLL);
    v17 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v11 = (char *)operator new(0x60uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 34;
      v20.__cat_ = std::generic_category();
      sub_207D01528(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0.0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v6 = (char *)operator new(0x60uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_207D01528(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0.0;
  }
  operator delete(__p);
  return 0.0;
}

void sub_207CCE244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL AppC3DTrackingResultIsScaleReliable(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  __int128 v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) <= a2)
    {
      __p = operator new(0x20uLL);
      v23 = xmmword_20822ABA0;
      strcpy((char *)__p, "Specified index is out of range");
      v12 = (char *)operator new(0x60uLL);
      strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
      if (a3)
      {
        *(_QWORD *)&v26.__val_ = 34;
        v26.__cat_ = std::generic_category();
        sub_207D01528(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v13 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v13;
        v14 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      operator delete(v12);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        return 0;
    }
    else
    {
      v5 = v4 + 160 * a2;
      if (*(_BYTE *)(v5 + 65))
        return *(_BYTE *)(v5 + 64) != 0;
      __p = operator new(0x20uLL);
      v23 = xmmword_20822ABB0;
      strcpy((char *)__p, "Scale estimation is disabled");
      v17 = (char *)operator new(0x60uLL);
      strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
      if (a3)
      {
        *(_QWORD *)&v26.__val_ = 45;
        v26.__cat_ = std::generic_category();
        sub_207D01528(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v18;
        v19 = v25;
        if (v25)
        {
          v20 = (unint64_t *)&v25->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      operator delete(v17);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        return 0;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v23 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_207D01528(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v25;
      if (v25)
      {
        v10 = (unint64_t *)&v25->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_207CCE6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFStringRef AppC3DTrackingResultCreateDecodedId(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  CFIndex Length;
  const UInt8 *BytePtr;
  const UInt8 *v14;
  const void **v15;
  std::locale::id *v16;
  uint64_t v17;
  char *v18;
  const std::locale::facet *v19;
  size_t v20;
  std::error_condition *v21;
  char *v22;
  CFErrorRef v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  CFErrorRef v27;
  unint64_t *v28;
  CFStringRef v29;
  CFTypeRef v31;
  unsigned int v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const UInt8 *v38;
  CFIndex v39;
  std::error_condition v40;
  unint64_t v41;
  void *__p;
  __int128 v43;
  _QWORD v44[2];
  _BYTE v45[16];
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  char v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[24];
  CFErrorRef v55;
  std::__shared_weak_count *v56;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v43 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v22 = (char *)operator new(0x60uLL);
    *(_QWORD *)v54 = v22;
    *(_OWORD *)&v54[8] = xmmword_20822C970;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_207D01528(&v40, (uint64_t)&__p, &v55);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v23 = v55;
      if (v55)
        CFRetain(v55);
      *a3 = v23;
      v24 = v56;
      if (!v56)
        goto LABEL_37;
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
LABEL_36:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if ((v54[23] & 0x80000000) == 0)
        {
LABEL_40:
          if (SHIBYTE(v43) < 0)
            operator delete(__p);
          return 0;
        }
        goto LABEL_38;
      }
LABEL_37:
      if ((v54[23] & 0x80000000) == 0)
        goto LABEL_40;
LABEL_38:
      v22 = *(char **)v54;
    }
LABEL_39:
    operator delete(v22);
    goto LABEL_40;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) <= a2)
  {
    __p = operator new(0x20uLL);
    v43 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v22 = (char *)operator new(0x60uLL);
    *(_QWORD *)v54 = v22;
    *(_OWORD *)&v54[8] = xmmword_20822C970;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v40.__val_ = 34;
      v40.__cat_ = std::generic_category();
      sub_207D01528(&v40, (uint64_t)&__p, &v55);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v27 = v55;
      if (v55)
        CFRetain(v55);
      *a3 = v27;
      v24 = v56;
      if (!v56)
        goto LABEL_37;
      v28 = (unint64_t *)&v56->__shared_owners_;
      do
        v26 = __ldaxr(v28);
      while (__stlxr(v26 - 1, v28));
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  v5 = v4 + 160 * a2;
  v6 = v5 + 104;
  if (*(_BYTE *)(v5 + 128))
  {
    v8 = *(_QWORD *)(v5 + 112);
    v7 = *(std::__shared_weak_count **)(v5 + 120);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v8)
    {
      v54[23] = 0;
      v54[0] = 0;
      Length = CFDataGetLength(*(CFDataRef *)(v6 + 8));
      if (Length < 1)
      {
        v32 = 0;
LABEL_68:
        if ((v32 & 0x80u) == 0)
          v38 = v54;
        else
          v38 = *(const UInt8 **)v54;
        if ((v32 & 0x80u) == 0)
          v39 = v32;
        else
          v39 = *(_QWORD *)&v54[8];
        v29 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v38, v39, 0x8000100u, 0);
        if ((v54[23] & 0x80000000) != 0)
          operator delete(*(void **)v54);
        return v29;
      }
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v6 + 8));
      sub_207CA2878((uint64_t)&__p);
      v14 = &BytePtr[Length];
      v15 = (const void **)v45;
      v16 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v17 = *((_QWORD *)&v43 + 1);
        v18 = (char *)&v44[-1] + *(_QWORD *)(*((_QWORD *)&v43 + 1) - 24);
        if (*((_DWORD *)v18 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v44[-1] + *(_QWORD *)(*((_QWORD *)&v43 + 1) - 24)));
          v19 = std::locale::use_facet((const std::locale *)&v40, v16);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
          std::locale::~locale((std::locale *)&v40);
          v17 = *((_QWORD *)&v43 + 1);
        }
        *((_DWORD *)v18 + 36) = 48;
        *(_QWORD *)&v45[*(_QWORD *)(v17 - 24)] = 2;
        *(_DWORD *)((char *)v44 + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)v44 + *(_QWORD *)(v17 - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        ++BytePtr;
      }
      while (BytePtr < v14);
      if ((v52 & 0x10) != 0)
      {
        v33 = v51;
        if (v51 < v48)
        {
          v51 = v48;
          v33 = v48;
        }
        v15 = (const void **)&v47;
      }
      else
      {
        if ((v52 & 8) == 0)
        {
          v20 = 0;
          HIBYTE(v41) = 0;
          v21 = &v40;
          goto LABEL_63;
        }
        v33 = v46;
      }
      v34 = *v15;
      v20 = v33 - (_QWORD)*v15;
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      if (v20 >= 0x17)
      {
        v35 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v35 = v20 | 7;
        v36 = v35 + 1;
        v21 = (std::error_condition *)operator new(v35 + 1);
        v40.__cat_ = (const std::error_category *)v20;
        v41 = v36 | 0x8000000000000000;
        *(_QWORD *)&v40.__val_ = v21;
      }
      else
      {
        HIBYTE(v41) = v33 - *(_BYTE *)v15;
        v21 = &v40;
        if (!v20)
          goto LABEL_63;
      }
      memmove(v21, v34, v20);
LABEL_63:
      *((_BYTE *)&v21->__val_ + v20) = 0;
      if ((v54[23] & 0x80000000) != 0)
        operator delete(*(void **)v54);
      *(std::error_condition *)v54 = v40;
      *(_QWORD *)&v54[16] = v41;
      __p = (void *)*MEMORY[0x24BEDB7F0];
      v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      *((_QWORD *)&v43 + 1) = v37;
      v44[0] = MEMORY[0x24BEDB848] + 16;
      if (v50 < 0)
        operator delete(v49);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD027B8](&v53);
      v32 = v54[23];
      goto LABEL_68;
    }
    return 0;
  }
  if (!a3)
    return 0;
  v31 = *(CFTypeRef *)v6;
  if (*(_QWORD *)v6)
    CFRetain(*(CFTypeRef *)v6);
  v29 = 0;
  *a3 = v31;
  return v29;
}

void sub_207CCECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CCECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207CCED10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CCED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  sub_207CA29B0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_207CCED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AppC3DTrackingResultCreateData(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *v15;
  CFTypeRef v16;
  char *v17;
  void *__p;
  __int128 v19;
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v19 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v9 = (char *)operator new(0x60uLL);
    v17 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_207D01528(&v22, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v10;
    v11 = v21;
    if (!v21)
      goto LABEL_26;
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    goto LABEL_24;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) <= a2)
  {
    __p = operator new(0x20uLL);
    v19 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v9 = (char *)operator new(0x60uLL);
    v17 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v22.__val_ = 34;
    v22.__cat_ = std::generic_category();
    sub_207D01528(&v22, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v14;
    v11 = v21;
    if (!v21)
    {
LABEL_26:
      v9 = v17;
LABEL_27:
      operator delete(v9);
      if (SHIBYTE(v19) < 0)
        operator delete(__p);
      return 0;
    }
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v15);
    while (__stlxr(v13 - 1, v15));
LABEL_24:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_26;
  }
  v5 = v4 + 160 * a2;
  v6 = (CFTypeRef *)(v5 + 104);
  if (*(_BYTE *)(v5 + 128))
  {
    v7 = *(_QWORD *)(v5 + 112);
    if (v7)
      CFRetain(*(CFTypeRef *)(v5 + 112));
    return v7;
  }
  if (!a3)
    return 0;
  v16 = *v6;
  if (*v6)
    CFRetain(*v6);
  *a3 = v16;
  return 0;
}

void sub_207CCF034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DTrackingResultGetMetadata(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t result;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  void *__p;
  __int128 v20;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v20 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v8 = (char *)operator new(0x60uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_207D01528(&v23, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v10 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v20) < 0)
      goto LABEL_34;
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v4) >> 5) <= a2)
  {
    __p = operator new(0x20uLL);
    v20 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v13 = (char *)operator new(0x60uLL);
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v23.__val_ = 34;
      v23.__cat_ = std::generic_category();
      sub_207D01528(&v23, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v22;
      if (v22)
      {
        v16 = (unint64_t *)&v22->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v13);
    if (SHIBYTE(v20) < 0)
    {
LABEL_34:
      operator delete(__p);
      return 0;
    }
    return 0;
  }
  v5 = v4 + 160 * a2;
  v6 = (CFTypeRef *)(v5 + 104);
  if (*(_BYTE *)(v5 + 128))
    return *(unsigned __int8 *)v6;
  if (!a3)
    return 0;
  v18 = *v6;
  if (*v6)
    CFRetain(*v6);
  result = 0;
  *a3 = v18;
  return result;
}

void sub_207CCF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DTrackingResultGetDecodingVersion(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v10[4];
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if ((a1 & 0x80) == 0 || !a2)
    return a1 & 0x7F;
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "Unknown metadata");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
  *(_QWORD *)&v13.__val_ = 22;
  v13.__cat_ = std::generic_category();
  sub_207D01528(&v13, (uint64_t)v10, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v4;
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10[2]) < 0)
    operator delete(v10[0]);
  return a1;
}

void sub_207CCF560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t AppC3DTrackingResultGetDataVersion(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  CFTypeRef v9;
  unint64_t *p_shared_owners;
  char *__p;
  char *v12[4];
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if ((a1 & 0x80) == 0 || !a2)
  {
    if ((a1 & 0x7Fu) < 5)
      return (0x203010000uLL >> (8 * (a1 & 0x7Fu))) & 3;
    if (!a2)
      return a1;
    v12[0] = (char *)operator new(0x30uLL);
    *(_OWORD *)&v12[1] = xmmword_20822CF20;
    strcpy(v12[0], "No data version available for given metadata");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    *(_QWORD *)&v15.__val_ = 45;
    v15.__cat_ = std::generic_category();
    sub_207D01528(&v15, (uint64_t)v12, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v5 = v14;
    if (!v14)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_21;
  }
  HIBYTE(v12[2]) = 16;
  strcpy((char *)v12, "Unknown metadata");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
  *(_QWORD *)&v15.__val_ = 22;
  v15.__cat_ = std::generic_category();
  sub_207D01528(&v15, (uint64_t)v12, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v4;
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
LABEL_21:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_25:
  operator delete(__p);
  if ((SHIBYTE(v12[2]) & 0x80000000) == 0)
    return a1;
  operator delete(v12[0]);
  return a1;
}

void sub_207CCF824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *AppC3DTrackingResultCreateCorners(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFArray *Mutable;
  uint64_t v8;
  const void **v9;
  const void **v10;
  const void *v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t *p_shared_owners;
  char *v20;
  void *__p;
  __int128 v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v5) >> 5) > a2)
    {
      v6 = 160 * a2;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], (uint64_t)(*(_QWORD *)(v5 + 160 * a2 + 144) - *(_QWORD *)(v5 + 160 * a2 + 136)) >> 4, MEMORY[0x24BDBD690]);
      v8 = *(_QWORD *)(a1 + 8) + v6;
      v9 = *(const void ***)(v8 + 136);
      v10 = *(const void ***)(v8 + 144);
      while (v9 != v10)
      {
        v11 = *v9;
        v9 += 2;
        CFArrayAppendValue(Mutable, v11);
      }
      return Mutable;
    }
    __p = operator new(0x20uLL);
    v22 = xmmword_20822ABA0;
    strcpy((char *)__p, "Specified index is out of range");
    v13 = (char *)operator new(0x60uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 34;
      v25.__cat_ = std::generic_category();
      sub_207D01528(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v18;
      v15 = v24;
      if (!v24)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
LABEL_23:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_25:
      v13 = v20;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v22 = xmmword_20822ABA0;
    strcpy((char *)__p, "AppC3DTrackingResultRef is null");
    v13 = (char *)operator new(0x60uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppC3D/product/AppCode/AppC3D/src/AppC3DTypesDefs.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_207D01528(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v24;
      if (!v24)
        goto LABEL_25;
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_23;
    }
  }
  operator delete(v13);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  return 0;
}

void sub_207CCFB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AppC3DTrackingResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t AppC3DTrackingResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

double AppC3DGetVersionInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xF00000001;
  *(_QWORD *)a1 = 0xF00000001;
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 16) = "";
  return result;
}

void sub_207CCFC0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  _QWORD *v38;
  char *v39;
  std::__shared_weak_count *v40;
  void *v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  void *__p[2];
  uint64_t v45;
  uint64_t (**v46)();
  _OWORD v47[3];
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::__shared_weak_count *v51;
  uint64_t (**v52)();
  _QWORD *v53;
  char *v54;
  std::__shared_weak_count *v55;
  uint64_t (**v56)();
  char *v57;
  std::__shared_weak_count *v58;
  uint64_t (**v59)();
  char *v60;
  std::__shared_weak_count *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[4];

  v66[2] = *MEMORY[0x24BDAC8D0];
  sub_2081FE31C(a1, "AppCodeCallbackDispatcherNodeQueue", 1, &v41);
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "AppCodeCallbackDispatcherNode");
  v4 = (std::__shared_weak_count_vtbl *)v41;
  v41 = 0;
  v39 = v3;
  sub_207CA40D8(__p, v3, 0x1DuLL);
  v42 = v4;
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FD40;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v4;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a2 = off_24C070678;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 24) = v45;
  __p[0] = 0;
  __p[1] = 0;
  v45 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 64) = v5;
  v42 = 0;
  v43 = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v64[0] = v62[0];
  *(_QWORD *)((char *)v64 + 7) = *(_QWORD *)((char *)v62 + 7);
  *(_QWORD *)((char *)v63 + 7) = *(_QWORD *)((char *)v62 + 7);
  v63[0] = v62[0];
  v62[0] = 0;
  *(_QWORD *)((char *)v62 + 7) = 0;
  v65[0] = v63[0];
  *(_QWORD *)((char *)v65 + 7) = *(_QWORD *)((char *)v63 + 7);
  *(_QWORD *)((char *)v63 + 7) = 0;
  v63[0] = 0;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v40 = v5;
  v11 = (char *)operator new(0x98uLL);
  v66[0] = v65[0];
  *(_QWORD *)((char *)v66 + 7) = *(_QWORD *)((char *)v65 + 7);
  v65[0] = 0;
  *(_QWORD *)((char *)v65 + 7) = 0;
  v11[8] = 1;
  *((_QWORD *)v11 + 2) = &unk_24C06FE08;
  *((_QWORD *)v11 + 3) = &unk_24C06FE48;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_QWORD *)v11 = off_24C06FD90;
  *(_QWORD *)(v11 + 63) = *(_QWORD *)((char *)v66 + 7);
  v12 = v66[0];
  *((_QWORD *)v11 + 6) = 0x6C656E6E616863;
  *((_QWORD *)v11 + 7) = v12;
  v11[71] = 7;
  v66[0] = 0;
  *(_QWORD *)((char *)v66 + 7) = 0;
  *((_QWORD *)v11 + 9) = v4;
  *((_QWORD *)v11 + 10) = v5;
  v13 = operator new(0x10uLL);
  *v13 = &off_24C06FF50;
  *((_QWORD *)v11 + 17) = 0;
  *((_QWORD *)v11 + 11) = v13;
  *((_QWORD *)v11 + 12) = v11 + 96;
  *((_QWORD *)v11 + 13) = v11 + 96;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 15) = v11 + 120;
  *((_QWORD *)v11 + 16) = v11 + 120;
  *((_QWORD *)v11 + 18) = 0;
  if (!v4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070518;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v16 = (std::__shared_weak_count *)*((_QWORD *)v11 + 5);
  if (v16)
  {
    if (v16->__shared_owners_ != -1)
      goto LABEL_26;
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    *((_QWORD *)v11 + 4) = v11;
    *((_QWORD *)v11 + 5) = v14;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    do
      v20 = __ldxr(v15);
    while (__stxr(v20 + 1, v15));
    v21 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    *((_QWORD *)v11 + 4) = v11;
    *((_QWORD *)v11 + 5) = v14;
  }
  do
    v23 = __ldaxr(v15);
  while (__stlxr(v23 - 1, v15));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_26:
  v46 = off_24C0706A8;
  strcpy((char *)v47, "channel");
  *((_QWORD *)&v47[0] + 1) = v64[0];
  *(_QWORD *)((char *)v47 + 15) = *(_QWORD *)((char *)v64 + 7);
  BYTE7(v47[1]) = 7;
  v64[0] = 0;
  *(_QWORD *)((char *)v64 + 7) = 0;
  *((_QWORD *)&v47[1] + 1) = 0x7974706D45;
  *(_QWORD *)&v47[2] = v66[0];
  *(_QWORD *)((char *)&v47[2] + 7) = *(_QWORD *)((char *)v66 + 7);
  HIBYTE(v47[2]) = 5;
  v66[0] = 0;
  *(_QWORD *)((char *)v66 + 7) = 0;
  v48 = v4;
  v49 = v5;
  v24 = (unint64_t *)&v14->__shared_weak_owners_;
  v50 = v11;
  v51 = v14;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v52 = &off_24C070640;
  v26 = operator new(0x18uLL);
  *v26 = &off_24C070568;
  v26[1] = v11;
  v26[2] = v14;
  v53 = v26;
  do
    v27 = __ldxr(v24);
  while (__stxr(v27 + 1, v24));
  v54 = v11;
  v55 = v14;
  do
    v28 = __ldxr(v24);
  while (__stxr(v28 + 1, v24));
  v56 = &off_24C070608;
  v57 = v11 + 16;
  v58 = v14;
  do
    v29 = __ldxr(v24);
  while (__stxr(v29 + 1, v24));
  v59 = &off_24C0705D0;
  v60 = v11 + 24;
  v61 = v14;
  v30 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v30 = off_24C0706A8;
  *(_OWORD *)(v30 + 8) = v47[0];
  *((_QWORD *)v30 + 3) = *(_QWORD *)&v47[1];
  memset(v47, 0, 24);
  *((_OWORD *)v30 + 2) = *(_OWORD *)((char *)&v47[1] + 8);
  v31 = *((_QWORD *)&v47[2] + 1);
  memset((char *)&v47[1] + 8, 0, 24);
  *((_QWORD *)v30 + 6) = v31;
  *((_QWORD *)v30 + 7) = v4;
  v48 = 0;
  v49 = 0;
  *((_QWORD *)v30 + 8) = v40;
  *((_QWORD *)v30 + 9) = v11;
  v50 = 0;
  v51 = 0;
  *((_QWORD *)v30 + 10) = v14;
  *((_QWORD *)v30 + 11) = &off_24C070640;
  v53 = 0;
  *((_QWORD *)v30 + 12) = v26;
  *((_QWORD *)v30 + 13) = v11;
  v54 = 0;
  v55 = 0;
  *((_QWORD *)v30 + 14) = v14;
  *((_QWORD *)v30 + 15) = &off_24C070608;
  *((_QWORD *)v30 + 16) = v11 + 16;
  *((_QWORD *)v30 + 17) = v14;
  v57 = 0;
  v58 = 0;
  *((_QWORD *)v30 + 18) = &off_24C0705D0;
  *((_QWORD *)v30 + 19) = v11 + 24;
  *((_QWORD *)v30 + 20) = v14;
  v60 = 0;
  v61 = 0;
  *(_QWORD *)(a2 + 72) = v30;
  sub_207CD76B8((uint64_t)&v46);
  if (!v40)
    goto LABEL_58;
  v32 = (unint64_t *)&v40->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (*(_QWORD *)(a2 + 56))
      goto LABEL_42;
  }
  else
  {
LABEL_58:
    if (*(_QWORD *)(a2 + 56))
      goto LABEL_42;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_42:
  v34 = v43;
  if (!v43)
    goto LABEL_46;
  v35 = (unint64_t *)&v43->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_46:
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (SHIBYTE(v45) < 0)
LABEL_47:
    operator delete(__p[0]);
LABEL_48:
  operator delete(v39);
  v37 = v41;
  if (v41)
  {
    v38 = *(_QWORD **)v41;
    *(_QWORD *)v41 = 0;
    if (v38)
      sub_2081FDC68((int)v37, v38);
    operator delete(v37);
  }
}

void sub_207CD0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, _QWORD *a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a28 < 0)
    operator delete(__p);
  sub_207CD0664(&a17);
  operator delete(a12);
  sub_207CD0664(&a18);
  _Unwind_Resume(a1);
}

void sub_207CD064C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_207CD0664((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_207CD0664(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    *v2 = 0;
    if (v3)
      sub_2081FDC68((int)v2, v3);
    operator delete(v2);
  }
  return a1;
}

void sub_207CD06B0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CD06C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (_QWORD *)*v1;
    *v1 = 0;
    if (v2)
      sub_2081FDC68((int)v1, v2);
    operator delete(v1);
  }
}

uint64_t sub_207CD0708(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CD077C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CD789C(a1);
  operator delete(v1);
}

void sub_207CD0794(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CD76B8(a1);
  operator delete(v1);
}

_QWORD *sub_207CD07A8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070640;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CD07E8(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070640;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CD0828(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_207CD0838(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070608;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD0870(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070608;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CD08A8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C070640;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C070640;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CD097C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CD09A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C0705D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD09E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C0705D0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CD0A18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD0AC0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CD281C(a1);
  operator delete(v1);
}

void sub_207CD0AD4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_count v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_count v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count **v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::mutex **v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t **v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 *v75;
  uint64_t v76;
  std::__shared_weak_count *v77[2];
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unsigned __int8 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  uint64_t v98;
  __int128 *v99;
  _BYTE v100[24];
  _BYTE *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (!a1[18])
  {
    v35 = (uint64_t **)a1[9];
    *(_OWORD *)v77 = 0uLL;
    v36 = (std::__shared_weak_count *)a1[5];
    if (v36)
    {
      v37 = std::__shared_weak_count::lock(v36);
      if (v37)
      {
        v38 = v37;
        v39 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
        do
          v41 = __ldxr(p_shared_weak_owners);
        while (__stxr(v41 + 1, p_shared_weak_owners));
        v77[0] = v39;
        v77[1] = v37;
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      else
      {
        *(_OWORD *)v77 = 0uLL;
      }
    }
    sub_207CD2698((uint64_t)&v78, a2);
    v58 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)&v83 = *(_QWORD *)(a2 + 56);
    *((_QWORD *)&v83 + 1) = v58;
    if (v58)
    {
      v59 = (unint64_t *)(v58 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v85 = *(_OWORD *)(a2 + 88);
    v86 = *(_OWORD *)(a2 + 104);
    v87 = *(_OWORD *)(a2 + 120);
    v88 = *(_OWORD *)(a2 + 136);
    v84 = *(_OWORD *)(a2 + 72);
    v61 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)&v89 = *(_QWORD *)(a2 + 152);
    *((_QWORD *)&v89 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v91 = *(_OWORD *)(a2 + 184);
    v92 = *(_OWORD *)(a2 + 200);
    v93 = *(_OWORD *)(a2 + 216);
    v94 = *(_DWORD *)(a2 + 232);
    v90 = *(_OWORD *)(a2 + 168);
    v99 = 0;
    v64 = (char *)operator new(0x108uLL);
    *(_QWORD *)v64 = off_24C070100;
    *(_OWORD *)(v64 + 8) = *(_OWORD *)v77;
    v65 = v82;
    v64[72] = v82;
    v66 = v78;
    if (v65)
    {
      *((_QWORD *)v64 + 5) = v79;
      v78 = 0uLL;
      v79 = 0;
      *((_OWORD *)v64 + 3) = v80;
      *((_QWORD *)v64 + 8) = v81;
      v80 = 0uLL;
      v81 = 0;
    }
    else
    {
      v78 = 0uLL;
    }
    *(_OWORD *)(v64 + 24) = v66;
    v67 = v83;
    v68 = v86;
    v69 = v87;
    v70 = v84;
    *((_OWORD *)v64 + 7) = v85;
    *((_OWORD *)v64 + 8) = v68;
    v71 = v88;
    *((_OWORD *)v64 + 9) = v69;
    *((_OWORD *)v64 + 10) = v71;
    *((_OWORD *)v64 + 5) = v67;
    *((_OWORD *)v64 + 6) = v70;
    v72 = *(_OWORD *)(a2 + 168);
    v73 = *(_OWORD *)(a2 + 184);
    *((_OWORD *)v64 + 11) = v89;
    *((_OWORD *)v64 + 12) = v72;
    v74 = *(_OWORD *)(a2 + 216);
    *((_OWORD *)v64 + 14) = *(_OWORD *)(a2 + 200);
    *((_OWORD *)v64 + 15) = v74;
    v83 = 0uLL;
    v89 = 0uLL;
    *((_DWORD *)v64 + 64) = *(_DWORD *)(a2 + 232);
    *((_OWORD *)v64 + 13) = v73;
    v99 = (__int128 *)v64;
    sub_2081FD62C(*v35, (uint64_t)&v97);
    v75 = v99;
    if (v99 == &v97)
    {
      v76 = 4;
      v75 = &v97;
    }
    else
    {
      if (!v99)
      {
LABEL_73:
        sub_207CD2AF0((uint64_t)&v78);
        return;
      }
      v76 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v75 + 8 * v76))(v75);
    goto LABEL_73;
  }
  v4 = (std::__shared_weak_count *)operator new(0x108uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FFA0;
  v6 = v4 + 1;
  sub_207CD2698((uint64_t)&v4[1], a2);
  v7 = *(_QWORD *)(a2 + 64);
  v4[3].__shared_owners_ = *(_QWORD *)(a2 + 56);
  v4[3].__shared_weak_owners_ = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)(a2 + 88);
  v11 = *(std::__shared_count *)(a2 + 120);
  *(_OWORD *)&v4[5].__shared_owners_ = *(_OWORD *)(a2 + 104);
  v4[6].std::__shared_count = v11;
  *(_OWORD *)&v4[6].__shared_weak_owners_ = *(_OWORD *)(a2 + 136);
  v4[4].std::__shared_count = *(std::__shared_count *)(a2 + 72);
  *(_OWORD *)&v4[4].__shared_weak_owners_ = v10;
  v12 = *(_QWORD *)(a2 + 160);
  v4[7].__shared_owners_ = *(_QWORD *)(a2 + 152);
  v4[7].__shared_weak_owners_ = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(std::__shared_count *)(a2 + 216);
  *(_OWORD *)&v4[9].__shared_owners_ = *(_OWORD *)(a2 + 200);
  v4[10].std::__shared_count = v16;
  LODWORD(v4[10].__shared_weak_owners_) = *(_DWORD *)(a2 + 232);
  v4[8].std::__shared_count = *(std::__shared_count *)(a2 + 168);
  *(_OWORD *)&v4[8].__shared_weak_owners_ = v15;
  v17 = (unint64_t *)&v4->__shared_weak_owners_;
  v95 = v4 + 1;
  v96 = v4;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = (uint64_t *)a1[18];
  v20 = operator new(8uLL);
  *v20 = v19 + 7;
  std::mutex::lock((std::mutex *)(v19 + 7));
  *(_QWORD *)&v97 = v20;
  *((_QWORD *)&v97 + 1) = v19;
  if (!*((_BYTE *)v19 + 48))
    sub_207CA2A4C();
  v21 = v19[4];
  v22 = *v19;
  v23 = (std::__shared_weak_count **)(*v19 + 16 * v21);
  do
    v24 = __ldxr(v5);
  while (__stxr(v24 + 1, v5));
  *v23 = v6;
  v25 = v22 + 16 * v21;
  v26 = *(std::__shared_weak_count **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v4;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (v19[1] - *v19) >> 4;
  v30 = v19[5];
  v31 = v19[4] + 1;
  if (v31 >= v29)
    v32 = (v19[1] - *v19) >> 4;
  else
    v32 = 0;
  v19[4] = v31 - v32;
  if (v30 != v29)
  {
    v19[5] = v30 + 1;
    v34 = (std::mutex **)v97;
    if (!(_QWORD)v97)
      goto LABEL_39;
    goto LABEL_38;
  }
  v33 = v19[3] + 1;
  if (v33 < v29)
    v29 = 0;
  v19[3] = v33 - v29;
  v34 = (std::mutex **)v97;
  if ((_QWORD)v97)
  {
LABEL_38:
    std::mutex::unlock(*v34);
    operator delete(v34);
  }
LABEL_39:
  v44 = (uint64_t **)a1[9];
  v97 = 0uLL;
  v45 = (std::__shared_weak_count *)a1[5];
  if (v45)
  {
    v46 = std::__shared_weak_count::lock(v45);
    if (v46)
    {
      v47 = v46;
      v48 = a1[4];
      v49 = (unint64_t *)&v46->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      *(_QWORD *)&v97 = v48;
      *((_QWORD *)&v97 + 1) = v46;
      v51 = (unint64_t *)&v46->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      v97 = 0uLL;
    }
  }
  v53 = (char *)operator new(0x30uLL);
  *(_QWORD *)v53 = &off_24C06FFF0;
  *(_OWORD *)(v53 + 8) = v97;
  v97 = 0uLL;
  *((_QWORD *)v53 + 3) = v6;
  *((_QWORD *)v53 + 4) = v4;
  v98 = 0;
  v99 = 0;
  v101 = v53;
  sub_2081FD62C(*v44, (uint64_t)v100);
  v54 = v101;
  if (v101 == v100)
  {
    v55 = 4;
    v54 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_53;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_53:
  if (v96)
  {
    v56 = &v96->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
}

void sub_207CD10B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_207CD2A0C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_207CD2A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD1104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD11EC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CD11FC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CD1208(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CD1218(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_count v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_count v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count **v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::mutex **v39;
  uint64_t **v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  char *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  char *v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  __int128 *v95;
  std::string *v96;
  std::runtime_error *exception;
  std::runtime_error *v98;
  std::__shared_weak_count *v99[2];
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unsigned __int8 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  _QWORD *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  std::runtime_error v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  _QWORD *v127;
  __int128 *v128;
  _QWORD v129[3];
  std::string v130;
  std::string *v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v126 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v126 + 1) = 45;
    v94 = (_QWORD *)a1[6];
    v93 = a1 + 6;
    v92 = v94;
    v95 = (__int128 *)*((unsigned __int8 *)v93 + 23);
    if ((char)v95 < 0)
      v95 = (__int128 *)v93[1];
    else
      v92 = v93;
    v127 = v92;
    v128 = v95;
    sub_207CAC8F4((uint64_t)&v126, (uint64_t)v129, 0, 0, &v130);
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v96 = &v130;
    else
      v96 = (std::string *)v130.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v123, (const char *)v96);
    v123.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v98 = std::runtime_error::runtime_error(exception, &v123);
    v98->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v98, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
    v6[1].__vftable = *a3;
    v121 = v6 + 1;
    v122 = v6;
    v119 = v6 + 1;
    v120 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x108uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FFA0;
    v11 = v9 + 1;
    sub_207CD2698((uint64_t)&v9[1], a2);
    v12 = *(_QWORD *)(a2 + 64);
    v9[3].__shared_owners_ = *(_QWORD *)(a2 + 56);
    v9[3].__shared_weak_owners_ = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_OWORD *)(a2 + 88);
    v16 = *(std::__shared_count *)(a2 + 120);
    *(_OWORD *)&v9[5].__shared_owners_ = *(_OWORD *)(a2 + 104);
    v9[6].std::__shared_count = v16;
    *(_OWORD *)&v9[6].__shared_weak_owners_ = *(_OWORD *)(a2 + 136);
    v9[4].std::__shared_count = *(std::__shared_count *)(a2 + 72);
    *(_OWORD *)&v9[4].__shared_weak_owners_ = v15;
    v17 = *(_QWORD *)(a2 + 160);
    v9[7].__shared_owners_ = *(_QWORD *)(a2 + 152);
    v9[7].__shared_weak_owners_ = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_OWORD *)(a2 + 184);
    v21 = *(std::__shared_count *)(a2 + 216);
    *(_OWORD *)&v9[9].__shared_owners_ = *(_OWORD *)(a2 + 200);
    v9[10].std::__shared_count = v21;
    LODWORD(v9[10].__shared_weak_owners_) = *(_DWORD *)(a2 + 232);
    v9[8].std::__shared_count = *(std::__shared_count *)(a2 + 168);
    *(_OWORD *)&v9[8].__shared_weak_owners_ = v20;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v124 = v9 + 1;
    v125 = v9;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v24 = (uint64_t *)a1[18];
    v25 = operator new(8uLL);
    *v25 = v24 + 7;
    std::mutex::lock((std::mutex *)(v24 + 7));
    *(_QWORD *)&v126 = v25;
    *((_QWORD *)&v126 + 1) = v24;
    if (!*((_BYTE *)v24 + 48))
      sub_207CA2A4C();
    v26 = v24[4];
    v27 = *v24;
    v28 = (std::__shared_weak_count **)(*v24 + 16 * v26);
    do
      v29 = __ldxr(v10);
    while (__stxr(v29 + 1, v10));
    *v28 = v11;
    v30 = v27 + 16 * v26;
    v31 = *(std::__shared_weak_count **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = v9;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (v24[1] - *v24) >> 4;
    v35 = v24[5];
    v36 = v24[4] + 1;
    if (v36 >= v34)
      v37 = (v24[1] - *v24) >> 4;
    else
      v37 = 0;
    v24[4] = v36 - v37;
    if (v35 == v34)
    {
      v38 = v24[3] + 1;
      if (v38 < v34)
        v34 = 0;
      v24[3] = v38 - v34;
      v39 = (std::mutex **)v126;
      if (!(_QWORD)v126)
      {
LABEL_43:
        v49 = (uint64_t **)a1[9];
        v126 = 0uLL;
        v50 = (std::__shared_weak_count *)a1[5];
        if (v50)
        {
          v51 = std::__shared_weak_count::lock(v50);
          if (v51)
          {
            v52 = v51;
            v53 = a1[4];
            v54 = (unint64_t *)&v51->__shared_weak_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
            *(_QWORD *)&v126 = v53;
            *((_QWORD *)&v126 + 1) = v51;
            v56 = (unint64_t *)&v51->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          else
          {
            v126 = 0uLL;
          }
        }
        v58 = v119;
        v59 = v120;
        v119 = 0;
        v120 = 0;
        v60 = (char *)operator new(0x38uLL);
        *(_QWORD *)v60 = &off_24C0701D0;
        *(_OWORD *)(v60 + 8) = v126;
        v126 = 0uLL;
        *((_QWORD *)v60 + 3) = v11;
        *((_QWORD *)v60 + 4) = v9;
        v127 = 0;
        v128 = 0;
        *((_QWORD *)v60 + 5) = v58;
        *((_QWORD *)v60 + 6) = v59;
        v129[0] = 0;
        v129[1] = 0;
        v131 = (std::string *)v60;
        sub_2081FD62C(*v49, (uint64_t)&v130);
        v61 = v131;
        if (v131 == &v130)
        {
          v62 = 4;
          v61 = &v130;
        }
        else
        {
          if (!v131)
            goto LABEL_57;
          v62 = 5;
        }
        (*(void (**)(void))(v61->__r_.__value_.__r.__words[0] + 8 * v62))();
LABEL_57:
        if (v125)
        {
          v63 = &v125->__shared_owners_;
          do
            v64 = __ldaxr((unint64_t *)v63);
          while (__stlxr(v64 - 1, (unint64_t *)v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        if (v120)
        {
          v65 = &v120->__shared_owners_;
          do
            v66 = __ldaxr((unint64_t *)v65);
          while (__stlxr(v66 - 1, (unint64_t *)v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        if (v122)
        {
          v67 = &v122->__shared_owners_;
          do
            v68 = __ldaxr((unint64_t *)v67);
          while (__stlxr(v68 - 1, (unint64_t *)v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        return;
      }
    }
    else
    {
      v24[5] = v35 + 1;
      v39 = (std::mutex **)v126;
      if (!(_QWORD)v126)
        goto LABEL_43;
    }
    std::mutex::unlock(*v39);
    operator delete(v39);
    goto LABEL_43;
  }
  v40 = (uint64_t **)a1[9];
  *(_OWORD *)v99 = 0uLL;
  v41 = (std::__shared_weak_count *)a1[5];
  if (v41)
  {
    v42 = std::__shared_weak_count::lock(v41);
    if (v42)
    {
      v43 = v42;
      v44 = (std::__shared_weak_count *)a1[4];
      v45 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v99[0] = v44;
      v99[1] = v42;
      v47 = (unint64_t *)&v42->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      *(_OWORD *)v99 = 0uLL;
    }
  }
  sub_207CD2698((uint64_t)&v100, a2);
  v69 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)&v105 = *(_QWORD *)(a2 + 56);
  *((_QWORD *)&v105 + 1) = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v107 = *(_OWORD *)(a2 + 88);
  v108 = *(_OWORD *)(a2 + 104);
  v109 = *(_OWORD *)(a2 + 120);
  v110 = *(_OWORD *)(a2 + 136);
  v106 = *(_OWORD *)(a2 + 72);
  v72 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)&v111 = *(_QWORD *)(a2 + 152);
  *((_QWORD *)&v111 + 1) = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v113 = *(_OWORD *)(a2 + 184);
  v114 = *(_OWORD *)(a2 + 200);
  v115 = *(_OWORD *)(a2 + 216);
  v116 = *(_DWORD *)(a2 + 232);
  v112 = *(_OWORD *)(a2 + 168);
  v75 = (std::__shared_weak_count *)operator new(0x20uLL);
  v75->__shared_owners_ = 0;
  v75->__shared_weak_owners_ = 0;
  v75->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
  v75[1].__vftable = *a3;
  *a3 = 0;
  v117 = &v75[1].__vftable;
  v118 = v75;
  v128 = 0;
  v76 = (char *)operator new(0x118uLL);
  *(_QWORD *)v76 = off_24C070250;
  *(_OWORD *)(v76 + 8) = *(_OWORD *)v99;
  v77 = v104;
  v76[72] = v104;
  v78 = v100;
  if (v77)
  {
    *((_QWORD *)v76 + 5) = v101;
    v100 = 0uLL;
    v101 = 0;
    *((_OWORD *)v76 + 3) = v102;
    *((_QWORD *)v76 + 8) = v103;
    v102 = 0uLL;
    v103 = 0;
  }
  else
  {
    v100 = 0uLL;
  }
  *(_OWORD *)(v76 + 24) = v78;
  v79 = v105;
  v80 = v108;
  v81 = v109;
  v82 = v106;
  *((_OWORD *)v76 + 7) = v107;
  *((_OWORD *)v76 + 8) = v80;
  v83 = v110;
  *((_OWORD *)v76 + 9) = v81;
  *((_OWORD *)v76 + 10) = v83;
  *((_OWORD *)v76 + 5) = v79;
  *((_OWORD *)v76 + 6) = v82;
  v84 = v112;
  v85 = v113;
  *((_OWORD *)v76 + 11) = v111;
  *((_OWORD *)v76 + 12) = v84;
  v86 = v115;
  *((_OWORD *)v76 + 14) = v114;
  *((_OWORD *)v76 + 15) = v86;
  v105 = 0uLL;
  v111 = 0uLL;
  *((_DWORD *)v76 + 64) = v116;
  *((_OWORD *)v76 + 13) = v85;
  *((_QWORD *)v76 + 33) = v75 + 1;
  *((_QWORD *)v76 + 34) = v75;
  v117 = 0;
  v118 = 0;
  v128 = (__int128 *)v76;
  sub_2081FD62C(*v40, (uint64_t)&v126);
  v87 = v128;
  if (v128 == &v126)
  {
    v88 = 4;
    v87 = &v126;
  }
  else
  {
    if (!v128)
      goto LABEL_87;
    v88 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v87 + 8 * v88))(v87);
LABEL_87:
  v89 = v118;
  if (v118)
  {
    v90 = (unint64_t *)&v118->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  sub_207CD2AF0((uint64_t)&v100);
}

void sub_207CD1A1C(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x207CD1930);
    }
    sub_207CD3824(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CD1A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207CD1AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_207CD5048((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_207CD5048((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD1B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_207CD2AF0(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207CD1B6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_207CD5104((_QWORD *)(v2 - 160));
  sub_207C99D78(v2 - 176);
  sub_207C99D78(v2 - 232);
  sub_207C99D78(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_207CD1BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_207C99D78(v2 - 232);
  sub_207C99D78(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_207CD1C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 232);
  sub_207C99D78(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207CD1C40(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2081FD738(*v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    sub_2081FD738(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_207CD1CB4(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C0702D0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C070640;
  v10[4] = v9;
  v14 = v10;
  sub_2081FD62C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_207CD1DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CD1E58(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C070350;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2081FD62C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_207CD1F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207CD1FCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C070418;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CD21D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CD229C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C070498;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CD24A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD256C(uint64_t a1)
{
  return sub_207CD281C(a1 - 16);
}

void sub_207CD2574(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CD281C(a1 - 16);
  operator delete(v1);
}

_QWORD *sub_207CD258C(uint64_t a1, uint64_t a2)
{
  return sub_207CD1CB4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_207CD2594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CD1FCC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_207CD259C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CD229C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_207CD25A4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CD25AC(uint64_t a1)
{
  return sub_207CD281C(a1 - 24);
}

void sub_207CD25B4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CD281C(a1 - 24);
  operator delete(v1);
}

_QWORD *sub_207CD25CC(uint64_t a1)
{
  return sub_207CD1E58((_QWORD *)(a1 - 24));
}

uint64_t sub_207CD25D4(uint64_t a1)
{
  return a1 - 24;
}

__n128 sub_207CD25E4@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl **v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 result;

  v3 = sub_207CD2698(a2, a1);
  v4 = *(_QWORD *)(a1 + 64);
  v3[7] = *(std::__shared_weak_count_vtbl **)(a1 + 56);
  v3[8] = (std::__shared_weak_count_vtbl *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v3 + 11) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v3 + 13) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v3 + 15) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 17) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v3 + 9) = *(_OWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 160);
  v3[19] = *(std::__shared_weak_count_vtbl **)(a1 + 152);
  v3[20] = (std::__shared_weak_count_vtbl *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(v3 + 23) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v3 + 25) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v3 + 27) = *(_OWORD *)(a1 + 216);
  *((_DWORD *)v3 + 58) = *(_DWORD *)(a1 + 232);
  result = *(__n128 *)(a1 + 168);
  *(__n128 *)(v3 + 21) = result;
  return result;
}

std::__shared_weak_count_vtbl **sub_207CD2698(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_BYTE *)a1 = 0;
  v4 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(a1 + 48) = v4;
  if (!v4)
    return sub_207CCBAD4((std::__shared_weak_count_vtbl **)a1, a2);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v7 = (uint64_t)v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD **)a2)
  {
    if (v7 < 0)
      sub_207CA420C();
    v8 = operator new((size_t)v5 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[2 * (v7 >> 4)];
    v9 = v7 - 16;
    if ((unint64_t)(v7 - 16) < 0x90)
      goto LABEL_21;
    v10 = (v9 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v8 < (_QWORD *)((char *)v6 + v10) && v6 < (_QWORD *)((char *)v8 + v10))
      goto LABEL_21;
    v12 = (v9 >> 4) + 1;
    v13 = 2 * (v12 & 0x1FFFFFFFFFFFFFFCLL);
    v14 = &v6[v13];
    v15 = &v8[v13];
    v16 = v8 + 4;
    v17 = (__int128 *)(v6 + 4);
    v18 = v12 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *(v17 - 2);
      v19 = *(v17 - 1);
      v22 = *v17;
      v21 = v17[1];
      v17 += 4;
      *(v16 - 2) = v20;
      *(v16 - 1) = v19;
      *v16 = v22;
      v16[1] = v21;
      v16 += 4;
      v18 -= 4;
    }
    while (v18);
    v6 = v14;
    v8 = v15;
    if (v12 != (v12 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      do
      {
        *v8 = *v6;
        v8[1] = v6[1];
        v8 += 2;
        v6 += 2;
      }
      while (v6 != v5);
      v15 = v8;
    }
    *(_QWORD *)(a1 + 8) = v15;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_207CCCC78(a1 + 24, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5));
  return (std::__shared_weak_count_vtbl **)a1;
}

void sub_207CD27FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD281C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = off_24C06FD90;
  *(_QWORD *)(a1 + 16) = &unk_24C06FE08;
  *(_QWORD *)(a1 + 24) = &unk_24C06FE48;
  v2 = *(char **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    if (v2[48])
    {
      v3 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        v4 = *((_QWORD *)v2 + 1);
        v5 = *(void **)v2;
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *(void **)v2;
        }
        *((_QWORD *)v2 + 1) = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_207CD2A0C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_207CD2AF0(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

std::mutex ***sub_207CD2A40(std::mutex ***a1)
{
  std::mutex **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::unlock(*v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207CD2A7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CD2AB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CD2AC4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C06FFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CD2AE4(uint64_t a1)
{
  return sub_207CD2AF0(a1 + 24);
}

uint64_t sub_207CD2AF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v5)
    goto LABEL_27;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*(_BYTE *)(a1 + 48))
      goto LABEL_11;
  }
  else
  {
LABEL_27:
    if (*(_BYTE *)(a1 + 48))
    {
LABEL_11:
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = *(void **)(a1 + 24);
        if (v9 != v8)
        {
          do
          {
            v9 -= 160;
            sub_207CCD214(v9);
          }
          while (v9 != v8);
          v10 = *(void **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 32) = v8;
        operator delete(v10);
      }
      v11 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v11;
        operator delete(v11);
      }
      return a1;
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v13)
    return a1;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

_QWORD *sub_207CD2C2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C06FFF0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CD2C70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *__p = &off_24C06FFF0;
  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

_QWORD *sub_207CD2CB4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C06FFF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_207CD2D24(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C06FFF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_207CD2D74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_207CD2DB0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_207CD2DE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_207CD310C((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_207CD4AF4(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CD2FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_207CD4AF4(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD3094(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25Enqueue"
                     "MessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD3100()
{
  return &unk_24C0700E0;
}

void sub_207CD310C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  void *__p;
  char *v34;
  char v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v6 = *a1;
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v31, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &v31);
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_207CD3824(3u);
    sub_207CD3880(*(_QWORD *)a3, (uint64_t)&v31);
  }
  v9 = v37;
  if (!v37)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = v36;
    if (!v36)
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v12 = v36;
    if (!v36)
      goto LABEL_17;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v35)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_17:
  if (v35)
  {
LABEL_18:
    v15 = (char *)__p;
    if (!__p)
      goto LABEL_45;
    v16 = v34;
    v17 = __p;
    if (v34 == __p)
    {
LABEL_44:
      v34 = v15;
      operator delete(v17);
LABEL_45:
      if (v31)
      {
        v32 = (std::__shared_weak_count *)v31;
        operator delete(v31);
      }
      return;
    }
    while (1)
    {
      v18 = *((_QWORD *)v16 - 3);
      if (v18)
      {
        v19 = *((_QWORD *)v16 - 2);
        v20 = (void *)*((_QWORD *)v16 - 3);
        if (v19 != v18)
        {
          do
          {
            v21 = *(std::__shared_weak_count **)(v19 - 8);
            if (v21)
            {
              v22 = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v19 -= 16;
          }
          while (v19 != v18);
          v20 = (void *)*((_QWORD *)v16 - 3);
        }
        *((_QWORD *)v16 - 2) = v18;
        operator delete(v20);
      }
      if (*(v16 - 32))
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 5);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          goto LABEL_41;
        }
      }
      else
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 6);
        if (v24)
        {
          v27 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v27);
          while (__stlxr(v26 - 1, v27));
LABEL_41:
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v16 -= 160;
      if (v16 == v15)
      {
        v17 = __p;
        goto LABEL_44;
      }
    }
  }
LABEL_50:
  v28 = v32;
  if (v32)
  {
    v29 = (unint64_t *)&v32->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207CD3404(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;
  va_list v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, va_list);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_207CD2AF0((uint64_t)va3);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    v6 = *v5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (*(uint64_t (**)(void))(v6 + 16))();
    sub_207CD34F4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v16 >= 0)
      va_copy(v7, va2);
    else
      v7 = v13;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v7, v8, (void (*)(void **))sub_208216974);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_207CD34C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CD34E8);
}

uint64_t sub_207CD34F4(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_207CD39B8(v12, __s);
  if (*(_QWORD *)a2)
  {
    v14 = (_QWORD **)v12;
    v15 = a2;
    v16 = v12;
    v17 = a2;
    v18 = a2;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C070080[v13])(&v19, v12);
      goto LABEL_6;
    }
LABEL_18:
    sub_207CA9F48();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_18;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C070068[v13])(&v19, v12);
LABEL_6:
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C070098[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C0700B0[v13])(&v19, v12);
  if (*(_QWORD *)a5)
  {
    v14 = (_QWORD **)v12;
    v15 = a5;
    v16 = v12;
    v17 = a5;
    v18 = a5;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C070080[v13])(&v19, v12);
      goto LABEL_13;
    }
LABEL_21:
    sub_207CA9F48();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_21;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C070068[v13])(&v19, v12);
LABEL_13:
  v14 = (_QWORD **)v12;
  v15 = a6;
  v16 = v12;
  v17 = a6;
  v18 = a6;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C070098[v13])(&v19, v12);
  if (v13 == -1)
    sub_207CA9F48();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C0700C8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C070050[v13])(&v14, v12);
  return result;
}

void sub_207CD3798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD37C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD37D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD37E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD37FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD3810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD3824(unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x20BD02194](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_207CD386C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207CD3880(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::exception_ptr v18;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v18.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v18), v5))
  {
    sub_207CD3824(2u);
  }
  sub_207CD2698(a1 + 144, a2);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 208) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 104);
  v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 232) = v9;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 304) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 360) = v17;
  *(_OWORD *)(a1 + 344) = v16;
  *(_OWORD *)(a1 + 328) = v15;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_207CD39A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CD39B8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C070050[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_207CD3AA8(_DWORD ***a1)
{
  return sub_207CAA238(**a1, (char *)(*a1)[1]);
}

void sub_207CD3AB4(uint64_t a1, uint64_t a2)
{
  sub_207CD3AC4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_207CD3AC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C070050[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207CD3C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207CD3CBC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CD3DB4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207CD3DAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207CD3DB4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_207CD3FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CD3FC4(_DWORD ***a1)
{
  return sub_207CB7878(**a1, (const char **)(*a1)[1]);
}

void sub_207CD3FD0(uint64_t a1, uint64_t a2)
{
  sub_207CD3FE0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_207CD3FE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C070050[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207CD4198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207CD41DC(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CD42D4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207CD42CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207CD42D4(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  void **v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (void **)*a1;
      v15 = (void **)a1[1];
      if (v15 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
LABEL_26:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 3);
    *((_QWORD *)v12 - 1) = *(v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *(v15 - 2) = 0;
    *(v15 - 1) = 0;
    *(v15 - 3) = 0;
    v15 -= 3;
  }
  while (v15 != v14);
  v15 = (void **)*a1;
  v20 = (void **)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  while (v20 != v15)
  {
    if (*((char *)v20 - 1) < 0)
      operator delete(*(v20 - 3));
    v20 -= 3;
  }
LABEL_27:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_207CD44D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_207CD44E8(_DWORD ***a1)
{
  return sub_207CD4504(**a1, (char *)(*a1)[1]);
}

void sub_207CD44F4(uint64_t a1, uint64_t a2)
{
  sub_207CD45F4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_207CD4504(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C070050[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207CD45F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C070050[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207CD47A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207CD47EC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207CD48E4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207CD48DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207CD48E4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_207CD4AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CD4AF4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x20BD02194](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_207CD4BE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x20BD021A0](&a11);
  JUMPOUT(0x207CD4B3CLL);
}

_QWORD *sub_207CD4C1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_24C070100;
  sub_207CD2AF0((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD4C58(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_24C070100;
  sub_207CD2AF0((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

_QWORD *sub_207CD4C94(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = operator new(0x108uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C070100;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_207CD2698((uint64_t)(v2 + 3), a1 + 24);
  v8 = *(_QWORD *)(a1 + 88);
  v3[10] = *(_QWORD *)(a1 + 80);
  v3[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v3 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v3 + 9) = v11;
  *((_OWORD *)v3 + 10) = *(_OWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v3 + 7) = v12;
  v13 = *(_QWORD *)(a1 + 184);
  v3[22] = *(_QWORD *)(a1 + 176);
  v3[23] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_OWORD *)(a1 + 240);
  *((_OWORD *)v3 + 14) = *(_OWORD *)(a1 + 224);
  *((_OWORD *)v3 + 15) = v16;
  *((_DWORD *)v3 + 64) = *(_DWORD *)(a1 + 256);
  v17 = *(_OWORD *)(a1 + 208);
  *((_OWORD *)v3 + 12) = *(_OWORD *)(a1 + 192);
  *((_OWORD *)v3 + 13) = v17;
  return v3;
}

void sub_207CD4D68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_207CD4D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_24C070100;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_207CD2698(a2 + 24, a1 + 24);
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v13;
  *(_OWORD *)(a2 + 112) = v11;
  *(_OWORD *)(a2 + 128) = v12;
  v14 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 184) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
  result = *(__n128 *)(a1 + 208);
  v18 = *(_OWORD *)(a1 + 224);
  v19 = *(_OWORD *)(a1 + 240);
  *(_DWORD *)(a2 + 256) = *(_DWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 224) = v18;
  *(_OWORD *)(a2 + 240) = v19;
  *(__n128 *)(a2 + 208) = result;
  return result;
}

void sub_207CD4E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CD4E70(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_207CD2AF0(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_207CD4EA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_207CD2AF0((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_207CD4EDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_207CD310C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_207CD4AF4(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD4F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_207CD4AF4(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD4FD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD503C()
{
  return &unk_24C070160;
}

uint64_t sub_207CD5048(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 264);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_207CD2AF0(a1 + 16);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_207CD2AF0(a1 + 16);
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207CD50C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CD50D8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t *sub_207CD50F8(uint64_t a1)
{
  return sub_207CD4AF4((uint64_t *)(a1 + 24));
}

_QWORD *sub_207CD5104(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_207CD5180(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C0701D0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_207CD5208(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *__p = &off_24C0701D0;
  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

_QWORD *sub_207CD5290(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C0701D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_207CD5320(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C0701D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_207CD5390(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_207CD5410(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

