std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_219D47280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<cv::Point_<int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_219D476B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_219D48710(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v30;

  if (__p)
    operator delete(__p);
  cv::Mat::~Mat((cv::Mat *)&a17, a2);
  cv::Mat::~Mat((cv::Mat *)&a29, v30);
  _Unwind_Resume(a1);
}

void cv::Mat::~Mat(cv::Mat *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      cv::Mat::deallocate(this, a2);
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  if (*((int *)this + 1) >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 8);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *((int *)this + 1));
  }
  *((_QWORD *)this + 3) = 0;
  v8 = (void **)*((_QWORD *)this + 9);
  if (v8 != (void **)((char *)this + 80))
    cv::fastFree(v8, a2);
}

void sub_219D48990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DBE91C8, MEMORY[0x24BEDAAF0]);
}

void sub_219D48A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

const __CFString *systemResourceUsageLevelAsString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("HMISystemResourceUsageLevelUndefined");
  else
    return off_24DBE9CB0[a1];
}

void sub_219D4B44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

const __CFString *HMIFaceFilteredStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("None");
  else
    return off_24DBE9CD8[a1 - 1];
}

void sub_219D4C0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HMIFourCCString(unsigned int a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%c%c%c%c"), HIBYTE(a1), BYTE2(a1), BYTE1(a1), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByTrimmingCharactersInSet:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t HMICMSampleBufferGetMediaType(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription);
}

BOOL HMICMSampleBufferIsVideo(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription) == 1986618469;
}

BOOL HMICMSampleBufferIsAudio(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription) == 1936684398;
}

BOOL HMICMSampleBufferIsSync(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  void *value;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (!SampleAttachmentsArray)
    return 1;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  value = 0;
  return !CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x24BDC0CC8], (const void **)&value)
      || value == (void *)*MEMORY[0x24BDBD268];
}

id HMICMSampleBufferShortDescription(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  CMItemCount NumSamples;
  _BOOL4 IsSync;
  const __CFString *v11;
  void *v12;
  CMTime v14;
  CMTime v15;
  CMTime time;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  CMSampleBufferGetDecodeTimeStamp(&time, a1);
  v4 = (__CFString *)CMTimeCopyDescription(0, &time);
  CMSampleBufferGetPresentationTimeStamp(&v15, a1);
  v5 = (__CFString *)CMTimeCopyDescription(0, &v15);
  CMSampleBufferGetDuration(&v14, a1);
  v6 = (__CFString *)CMTimeCopyDescription(0, &v14);
  v7 = (void *)MEMORY[0x24BDD17C8];
  HMIFourCCString(MediaType);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  NumSamples = CMSampleBufferGetNumSamples(a1);
  IsSync = HMICMSampleBufferIsSync(a1);
  v11 = &stru_24DBF1B40;
  if (IsSync)
    v11 = CFSTR("Sync");
  objc_msgSend(v7, "stringWithFormat:", CFSTR("Type: %@, DTS: %@, PTS: %@, DUR: %@, NUM: %ld [%@]"), v8, v4, v5, v6, NumSamples, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

uint64_t HMIDurationString(double a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v11;
  double __y;

  __y = 0.0;
  v2 = -a1;
  if (a1 >= 0.0)
    v2 = a1;
  v3 = modf(v2 + 0.0005, &__y);
  LODWORD(v4) = (int)__y;
  LODWORD(v5) = (int)__y / 0xE10u;
  if ((int)__y < 3600)
  {
    v5 = 0;
  }
  else
  {
    LODWORD(v4) = (int)__y % 0xE10u;
    v5 = v5;
  }
  v6 = (int)v4 < 60;
  LODWORD(v7) = v4 / 0x3C;
  if ((int)v4 >= 60)
    v4 = v4 % 0x3C;
  else
    v4 = v4;
  if (v6)
    v7 = 0;
  else
    v7 = v7;
  v8 = v3 * 1000.0;
  v11 = v4;
  v9 = 32;
  if (a1 < 0.0)
    v9 = 45;
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%c%02d:%02d:%02d.%03d"), v9, v5, v7, v11, (int)v8);
}

__CFString *HMITimeString(CMTime *a1, int a2, unsigned int a3)
{
  CMTimeFlags flags;
  uint64_t v5;
  uint64_t timescale;
  void *v7;
  CMTimeValue value;
  double Seconds;
  void *v10;
  double v11;
  void *v12;
  uint64_t v13;
  CMTime time;

  flags = a1->flags;
  if ((flags & 1) == 0)
    return CFSTR("  INVALID TIME   ");
  if ((a1->flags & 0x1D) == 1)
  {
    if (a3)
      v5 = a3;
    else
      v5 = 8;
    timescale = a1->timescale;
    v7 = (void *)MEMORY[0x24BDD17C8];
    value = a1->value;
    time = *a1;
    if ((_DWORD)timescale == a2)
    {
      Seconds = CMTimeGetSeconds(&time);
      HMIDurationString(Seconds);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringWithFormat:", CFSTR("%*lld %@"), v5, value, v10, v13);
    }
    else
    {
      v11 = CMTimeGetSeconds(&time);
      HMIDurationString(v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringWithFormat:", CFSTR("%*lld/%-6d %@"), v5, value, timescale, v10);
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    return (__CFString *)v12;
  }
  else if ((flags & 4) != 0)
  {
    return CFSTR("POSITIVE INFINITY");
  }
  else if ((flags & 8) != 0)
  {
    return CFSTR("NEGATIVE INFINITY");
  }
  else
  {
    if ((flags & 0x10) == 0)
      return CFSTR("  INVALID TIME   ");
    return CFSTR("   INDEFINITE    ");
  }
}

id HMICMSampleBufferFormattedDescription(opaqueCMSampleBuffer *a1, int a2)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 IsSync;
  const __CFString *v12;
  void *v13;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  memset(&v18, 0, sizeof(v18));
  CMSampleBufferGetDecodeTimeStamp(&v18, a1);
  memset(&v17, 0, sizeof(v17));
  CMSampleBufferGetPresentationTimeStamp(&v17, a1);
  memset(&v16, 0, sizeof(v16));
  CMSampleBufferGetDuration(&v16, a1);
  v15 = v18;
  HMITimeString(&v15, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v17;
  HMITimeString(&v15, a2, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v16;
  HMITimeString(&v15, a2, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x24BDD17C8];
  HMIFourCCString(MediaType);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  IsSync = HMICMSampleBufferIsSync(a1);
  v12 = &stru_24DBF1B40;
  if (IsSync)
    v12 = CFSTR(" S");
  objc_msgSend(v9, "stringWithFormat:", CFSTR("%@ DTS %@ PTS %@ dur %@%@"), v10, v6, v7, v8, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id HMICMSampleBufferTinyDescription(opaqueCMSampleBuffer *a1)
{
  CMTime time;
  CMTime v3;

  memset(&v3, 0, sizeof(v3));
  CMSampleBufferGetPresentationTimeStamp(&v3, a1);
  time = v3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("PTS: %.2f"), CMTimeGetSeconds(&time));
  return (id)objc_claimAutoreleasedReturnValue();
}

CMTimeValue HMICMSampleBufferCreateCopyWithTimingOffset(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  opaqueCMSampleBuffer *v3;
  uint64_t SampleTimingInfoArray;
  uint64_t v5;
  uint64_t v6;
  CMSampleTimingInfo *v7;
  __int128 v8;
  CMItemCount v9;
  CMItemCount v10;
  CMTime *p_presentationTimeStamp;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMItemCount timingArrayEntriesNeededOut;
  CMTime time1;
  uint64_t v26;

  v3 = a1;
  v26 = *MEMORY[0x24BDAC8D0];
  timingArrayEntriesNeededOut = 0;
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  if (timingArrayEntriesNeededOut)
  {
    MEMORY[0x24BDAC7A8](SampleTimingInfoArray, v5);
    v7 = (CMSampleTimingInfo *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (!CMSampleBufferGetSampleTimingInfoArray(v3, timingArrayEntriesNeededOut, v7, 0))
    {
      v9 = timingArrayEntriesNeededOut;
      if (timingArrayEntriesNeededOut >= 1)
      {
        v10 = 0;
        p_presentationTimeStamp = &v7->presentationTimeStamp;
        *(_QWORD *)&v8 = 138543362;
        v20 = v8;
        *(_QWORD *)&v8 = 138543618;
        v19 = v8;
        do
        {
          lhs = *a2;
          rhs = *p_presentationTimeStamp;
          CMTimeAdd(&time1, &lhs, &rhs);
          *p_presentationTimeStamp = time1;
          lhs = *a2;
          rhs = p_presentationTimeStamp[1];
          CMTimeAdd(&time1, &lhs, &rhs);
          p_presentationTimeStamp[1] = time1;
          CMTimeMake(&time2, 1, 1);
          time1 = p_presentationTimeStamp[-1];
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            v12 = (void *)MEMORY[0x220735570]();
            HMFGetOSLogHandle();
            v13 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(time1.value) = v20;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)v14;
              _os_log_impl(&dword_219D45000, v13, OS_LOG_TYPE_ERROR, "%{public}@Sample has a very large duration, the source video is corrupt.", (uint8_t *)&time1, 0xCu);

            }
            objc_autoreleasePoolPop(v12);
            v15 = (void *)MEMORY[0x220735570]();
            HMFGetOSLogHandle();
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(time1.value) = v19;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)v17;
              LOWORD(time1.flags) = 2112;
              *(_QWORD *)((char *)&time1.flags + 2) = v3;
              _os_log_impl(&dword_219D45000, v16, OS_LOG_TYPE_ERROR, "%{public}@Original Sample Buffer: %@", (uint8_t *)&time1, 0x16u);

            }
            objc_autoreleasePoolPop(v15);
          }
          ++v10;
          v9 = timingArrayEntriesNeededOut;
          p_presentationTimeStamp += 3;
        }
        while (v10 < timingArrayEntriesNeededOut);
      }
      time1.value = 0;
      CMSampleBufferCreateCopyWithNewTiming(0, v3, v9, v7, (CMSampleBufferRef *)&time1);
      return time1.value;
    }
  }
  return (CMTimeValue)v3;
}

CMTimeValue HMICMSampleBufferCreateCopyWithoutEdits(opaqueCMSampleBuffer *a1)
{
  return HMICMSampleBufferCreateCopyWithTimingOffset(a1, MEMORY[0x24BDC0D88]);
}

CMSampleBufferRef HMICMSampleBufferCreateCopyWithPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2)
{
  const __CFAllocator *v4;
  CMSampleBufferRef sampleBufferOut;
  CMSampleTimingInfo v7;
  CMVideoFormatDescriptionRef formatDescriptionOut;

  formatDescriptionOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, &formatDescriptionOut);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDuration(&v7.duration, a1);
  CMSampleBufferGetPresentationTimeStamp(&v7.presentationTimeStamp, a1);
  CMSampleBufferGetDecodeTimeStamp(&v7.decodeTimeStamp, a1);
  sampleBufferOut = 0;
  CMSampleBufferCreateReadyWithImageBuffer(v4, a2, formatDescriptionOut, &v7, &sampleBufferOut);
  CFRelease(formatDescriptionOut);
  return sampleBufferOut;
}

uint64_t HMICMSampleBufferTimeAscendingComparator(opaqueCMSampleBuffer *a1, opaqueCMSampleBuffer *a2)
{
  CMTime v4;
  CMTime time1;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetPresentationTimeStamp(&v7, a1);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetPresentationTimeStamp(&v6, a2);
  time1 = v7;
  v4 = v6;
  return CMTimeCompare(&time1, &v4);
}

CFStringRef HMICMTimeDescription(CMTime *a1)
{
  CMTime v2;

  v2 = *a1;
  return (id)CMTimeCopyDescription(0, &v2);
}

CFStringRef HMICMTimeRangeDescription(_OWORD *a1)
{
  __int128 v1;
  CMTimeRange v3;

  v1 = a1[1];
  *(_OWORD *)&v3.start.value = *a1;
  *(_OWORD *)&v3.start.epoch = v1;
  *(_OWORD *)&v3.duration.timescale = a1[2];
  return (id)CMTimeRangeCopyDescription(0, &v3);
}

CMTimeRange *HMICMSampleBufferGetPresentationTimeRange@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTimeRange *a2@<X8>)
{
  CMTime v5;
  CMTime start;
  CMTime v7;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDuration(&v7, a1);
  start = v8;
  v5 = v7;
  return CMTimeRangeMake(a2, &start, &v5);
}

CMTime *HMICMSampleBufferGetPresentationTimeRangeEnd@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  CMTimeRange v4;

  HMICMSampleBufferGetPresentationTimeRange(a1, &v4);
  return CMTimeRangeGetEnd(a2, &v4);
}

BOOL HMIMP4HasFTYP(void *a1)
{
  id v1;
  HMIDataReader *v2;
  _BOOL8 v3;

  v1 = a1;
  v2 = -[HMIDataReader initWithData:]([HMIDataReader alloc], "initWithData:", v1);

  if (-[HMIDataReader length](v2, "length") < 8)
  {
    v3 = 0;
  }
  else
  {
    -[HMIDataReader readUInt32](v2, "readUInt32");
    v3 = -[HMIDataReader readUInt32](v2, "readUInt32") == 1718909296;
  }

  return v3;
}

uint64_t HMIMP4Parse(void *a1, char a2, void *a3)
{
  id v4;
  uint64_t (**v5)(id, _QWORD, void *, void *);
  HMIDataReader *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  __int128 v25;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  v5 = a3;
  v6 = -[HMIDataReader initWithData:]([HMIDataReader alloc], "initWithData:", v4);
  *(_QWORD *)&v7 = 138543618;
  v25 = v7;
  while (1)
  {
    v8 = -[HMIDataReader position](v6, "position", v25);
    if (v8 >= objc_msgSend(v4, "length"))
    {
LABEL_14:
      v23 = 1;
      goto LABEL_16;
    }
    v9 = -[HMIDataReader position](v6, "position");
    v10 = -[HMIDataReader readUInt32](v6, "readUInt32");
    v11 = -[HMIDataReader readUInt32](v6, "readUInt32");
    if (!v10)
      break;
    v12 = v11;
    if (v10 == 1)
      v13 = -[HMIDataReader readUInt64](v6, "readUInt64");
    else
      v13 = v10;
    v14 = -[HMIDataReader position](v6, "position");
    -[HMIDataReader seek:](v6, "seek:", v9);
    v15 = -[HMIDataReader position](v6, "position") + v13;
    if (v15 > -[HMIDataReader length](v6, "length"))
    {
      if ((a2 & 1) != 0)
        break;
      v16 = (void *)MEMORY[0x220735570]();
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = v25;
        v28 = v18;
        v29 = 2048;
        v30 = v13;
        _os_log_impl(&dword_219D45000, v17, OS_LOG_TYPE_ERROR, "%{public}@Bogus atomSize %llu, recovering by adjusting size.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      v19 = -[HMIDataReader length](v6, "length");
      v13 = v19 - -[HMIDataReader position](v6, "position");
    }
    if (v13 < v14 - v9)
      break;
    -[HMIDataReader readData:](v6, "readData:", v13);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "subdataWithRange:", v14 - v9, v13 - (v14 - v9));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v5[2](v5, v12, v20, v21);

    if ((v22 & 1) == 0)
      goto LABEL_14;
  }
  v23 = 0;
LABEL_16:

  return v23;
}

void HMIMP4ParseMFHD(void *a1, void *a2)
{
  void (**v3)(id, uint64_t);
  id v4;
  HMIDataReader *v5;
  HMIDataReader *v6;

  v3 = a2;
  v4 = a1;
  v5 = -[HMIDataReader initWithData:]([HMIDataReader alloc], "initWithData:", v4);

  v6 = v5;
  LODWORD(v4) = -[HMIDataReader readUInt32](v6, "readUInt32");
  -[HMIDataReader readUInt32](v6, "readUInt32");
  if ((_DWORD)v4 == 1)
    -[HMIDataReader readUInt64](v6, "readUInt64");

  -[HMIDataReader readUInt32](v6, "readUInt32");
  v3[2](v3, -[HMIDataReader readUInt32](v6, "readUInt32"));

}

id HMIParseDate(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;

  v1 = (objc_class *)MEMORY[0x24BDD1500];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(MEMORY[0x24BDBCEA0], "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLocale:", v4);
  objc_msgSend(v3, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss"));
  objc_msgSend(v3, "dateFromString:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t HMICGSizeDescription(double a1, double a2)
{
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%.3f x %.3f"), *(_QWORD *)&a1, *(_QWORD *)&a2);
}

id HMICGRectDescription(double a1, double a2, double a3, double a4)
{
  void *v6;
  void *v7;
  void *v8;

  v6 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%.3f x %.3f"), *(_QWORD *)&a3, *(_QWORD *)&a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("%.3f, %.3f %@"), *(_QWORD *)&a1, *(_QWORD *)&a2, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t HMINSTimeIntervalDescription(double a1)
{
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%.2f"), *(_QWORD *)&a1);
}

id HMIUUIDShortDescription(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "substringToIndex:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id HMISHA1Data(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 md[20];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = objc_retainAutorelease(a1);
  CC_SHA1((const void *)objc_msgSend(v3, "bytes"), objc_msgSend(v3, "length"), md);
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithCapacity:", 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 >= 20)
    v5 = 20;
  else
    v5 = a2;
  if ((_DWORD)v5)
  {
    v6 = md;
    do
    {
      v7 = *v6++;
      objc_msgSend(v4, "appendFormat:", CFSTR("%02x"), v7);
      --v5;
    }
    while (v5);
  }

  return v4;
}

id HMIRandomData(uint64_t a1)
{
  id v1;
  void *v2;

  objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", a1);
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CCRandomGenerateBytes((void *)objc_msgSend(v1, "mutableBytes"), objc_msgSend(v1, "length"));
  v2 = (void *)objc_msgSend(v1, "copy");

  return v2;
}

BOOL HMIDispatchSyncWait(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  NSObject *v7;
  dispatch_block_t v8;
  dispatch_time_t v9;
  intptr_t v10;
  _BOOL8 v11;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v5 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __HMIDispatchSyncWait_block_invoke;
  v13[3] = &unk_24DBE9D70;
  v6 = v5;
  v14 = v6;
  v15 = &v16;
  v7 = a1;
  v8 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, v13);
  dispatch_async(v7, v8);

  v9 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  v10 = dispatch_block_wait(v8, v9);
  if (v10)
    *((_BYTE *)v17 + 24) = 1;
  v11 = v10 == 0;

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_219D4D970(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D4DA5C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D4DBBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D4DD78(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D4DF74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t HMISimulateCrash(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void (*v20)(uint64_t, uint64_t, id);
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  _BYTE buf[24];
  double v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  if (+[HMIPreference isInternalInstall](HMIPreference, "isInternalInstall"))
  {
    v7 = (void *)HMISimulateCrash_lastCrashReportDate;
    if (!HMISimulateCrash_lastCrashReportDate)
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "distantPast");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)HMISimulateCrash_lastCrashReportDate;
      HMISimulateCrash_lastCrashReportDate = v8;

      v7 = (void *)HMISimulateCrash_lastCrashReportDate;
    }
    v10 = objc_msgSend(v7, "timeIntervalSinceNow");
    v12 = v11;
    if (v11 > -120.0)
      v13 = a3;
    else
      v13 = 0;
    if (v13 == 1)
    {
      v14 = (void *)MEMORY[0x220735570](v10);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2048;
        v29 = -v12;
        _os_log_impl(&dword_219D45000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not generating crash report for %@ since another report was generated within last %f seconds.", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
    }
    else
    {
      v18 = getpid();
      v19 = v6;
      v24 = 0;
      v25 = &v24;
      v26 = 0x2020000000;
      v20 = (void (*)(uint64_t, uint64_t, id))getSimulateCrashSymbolLoc_ptr;
      v27 = getSimulateCrashSymbolLoc_ptr;
      if (!getSimulateCrashSymbolLoc_ptr)
      {
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __getSimulateCrashSymbolLoc_block_invoke;
        v29 = COERCE_DOUBLE(&unk_24DBE9EA0);
        v30 = &v24;
        __getSimulateCrashSymbolLoc_block_invoke((uint64_t)buf);
        v20 = (void (*)(uint64_t, uint64_t, id))v25[3];
      }
      _Block_object_dispose(&v24, 8);
      if (!v20)
        HMISimulateCrash_cold_1();
      v20(v18, 186429173, v19);

      objc_msgSend(MEMORY[0x24BDBCE60], "now", v24);
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = (void *)HMISimulateCrash_lastCrashReportDate;
      HMISimulateCrash_lastCrashReportDate = v21;

    }
    v17 = v13 ^ 1u;
  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_219D4E9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void HMIReportMemoryException(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  ipc_space_t *v15;
  task_read_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  void *v28;
  mach_port_t v29;
  _QWORD v30[4];
  id v31;
  mach_port_t corpse_task_port;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  _BYTE buf[24];
  double v38;
  uint64_t *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  if (+[HMIPreference isInternalInstall](HMIPreference, "isInternalInstall"))
  {
    v4 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
    if (!HMIReportMemoryException_lastReportMemoryExceptionDate)
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "distantPast");
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
      HMIReportMemoryException_lastReportMemoryExceptionDate = v5;

      v4 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
    }
    v7 = objc_msgSend(v4, "timeIntervalSinceNow");
    if (a2 && (v9 = v8, v8 > -120.0))
    {
      v10 = (void *)MEMORY[0x220735570](v7);
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2048;
        v38 = -v9;
        _os_log_impl(&dword_219D45000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not generating a memory exception report for %@ since another report was generated within last %f seconds.", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v10);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "now");
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
      HMIReportMemoryException_lastReportMemoryExceptionDate = v13;

      v15 = (ipc_space_t *)MEMORY[0x24BDAEC58];
      v16 = *MEMORY[0x24BDAEC58];
      corpse_task_port = 0;
      if (task_generate_corpse(v16, &corpse_task_port))
      {
        v17 = (void *)MEMORY[0x220735570]();
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v19;
          _os_log_impl(&dword_219D45000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v17);
      }
      else
      {
        v29 = corpse_task_port;
        objc_msgSend(MEMORY[0x24BE3F258], "processInfo");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "executableURL");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "path");
        v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v23 = objc_msgSend(v22, "UTF8String");
        dispatch_get_global_queue(-32768, 0);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = MEMORY[0x24BDAC760];
        v30[0] = MEMORY[0x24BDAC760];
        v30[1] = 3221225472;
        v30[2] = __HMIReportMemoryException_block_invoke;
        v30[3] = &unk_24DBE9E78;
        v31 = v3;
        v26 = v24;
        v27 = v30;
        v33 = 0;
        v34 = &v33;
        v35 = 0x2020000000;
        v28 = getReportMemoryExceptionFromTaskSymbolLoc_ptr;
        v36 = getReportMemoryExceptionFromTaskSymbolLoc_ptr;
        if (!getReportMemoryExceptionFromTaskSymbolLoc_ptr)
        {
          *(_QWORD *)buf = v25;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke;
          v38 = COERCE_DOUBLE(&unk_24DBE9EA0);
          v39 = &v33;
          __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke((uint64_t)buf);
          v28 = (void *)v34[3];
        }
        _Block_object_dispose(&v33, 8);
        if (!v28)
          HMISimulateCrash_cold_1();
        ((void (*)(_QWORD, uint64_t, uint64_t, id, _QWORD *))v28)(v29, 1, v23, v26, v27);

        mach_port_deallocate(*v15, corpse_task_port);
      }
    }
  }

}

void sub_219D4ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSimulateCrashSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (CrashReporterSupportLibraryCore_frameworkLibrary)
  {
    v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
  }
  else
  {
    CrashReporterSupportLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
    if (!CrashReporterSupportLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSimulateCrashSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  v8 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v9 = xmmword_24DBE9ED8;
    v10 = 0;
    v2 = (void *)_sl_dlopen();
    v6[3] = (uint64_t)v2;
    libMemoryResourceExceptionLibraryCore_frameworkLibrary = (uint64_t)v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
  {
    v4 = (void *)abort_report_np();
    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_219D4F0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219D4FEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D5040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D51404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D515C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D51BBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D5248C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D52E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D53200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HMIPixelBufferTransferOptionsAsString()
{
  return NSPrintF();
}

BOOL HMILessThanOrEqualWithAccuracy(float a1, float a2, float a3)
{
  float v4;

  if (a1 < a2)
    return 1;
  v4 = a1 - a2;
  if (v4 < 0.0)
    v4 = -v4;
  return v4 < a3;
}

BOOL HMIGreaterThanOrEqualWithAccuracy(float a1, float a2, float a3)
{
  float v4;

  if (a1 > a2)
    return 1;
  v4 = a1 - a2;
  if (v4 < 0.0)
    v4 = -v4;
  return v4 < a3;
}

void HMICGRectFlipCoordinateSpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  __int128 v16;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGRect v20;

  HMICGRectNormalizedFromPixel((unint64_t)a5, (unint64_t)a6, a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)&v19.a = *MEMORY[0x24BDBD8B8];
  *(_OWORD *)&v19.c = v16;
  *(_OWORD *)&v19.tx = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  *(_OWORD *)&v18.a = *(_OWORD *)&v19.a;
  *(_OWORD *)&v18.c = v16;
  *(_OWORD *)&v18.tx = *(_OWORD *)&v19.tx;
  CGAffineTransformScale(&v19, &v18, a5, a6);
  v17 = v19;
  CGAffineTransformTranslate(&v18, &v17, 0.0, 1.0);
  v19 = v18;
  v17 = v18;
  CGAffineTransformScale(&v18, &v17, 1.0, -1.0);
  v19 = v18;
  v20.origin.x = v9;
  v20.origin.y = v11;
  v20.size.width = v13;
  v20.size.height = v15;
  CGRectApplyAffineTransform(v20, &v18);
}

void HMICGRectFlipCoordinateSpaceNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGRect v12;

  v8 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)&v11.a = *MEMORY[0x24BDBD8B8];
  *(_OWORD *)&v11.c = v8;
  *(_OWORD *)&v11.tx = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  *(_OWORD *)&v10.a = *(_OWORD *)&v11.a;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = *(_OWORD *)&v11.tx;
  CGAffineTransformTranslate(&v11, &v10, 0.0, 1.0);
  v9 = v11;
  CGAffineTransformScale(&v10, &v9, 1.0, -1.0);
  v11 = v10;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectApplyAffineTransform(v12, &v10);
}

CGFloat HMITransformBoundingBoxCoordinatesFromImageSpaceToRoISpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX;
  double v17;
  CGFloat v19;
  double v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v21.origin.x = 0.0;
  v21.origin.y = 0.0;
  v21.size.width = 1.0;
  v21.size.height = 1.0;
  if (!CGRectEqualToRect(v21, *(CGRect *)&a5))
  {
    v22.origin.x = a1;
    v22.origin.y = a2;
    v22.size.width = a3;
    v22.size.height = a4;
    v19 = a4;
    MinX = CGRectGetMinX(v22);
    v23.origin.x = a5;
    v23.origin.y = a6;
    v23.size.width = a7;
    v23.size.height = a8;
    v17 = MinX - CGRectGetMinX(v23);
    v24.origin.x = a5;
    v24.origin.y = a6;
    v24.size.width = a7;
    v24.size.height = a8;
    v20 = v17 / CGRectGetWidth(v24);
    v25.origin.x = a1;
    v25.origin.y = a2;
    v25.size.width = a3;
    v25.size.height = v19;
    CGRectGetMinY(v25);
    v26.origin.x = a5;
    v26.origin.y = a6;
    v26.size.width = a7;
    v26.size.height = a8;
    CGRectGetMinY(v26);
    v27.origin.x = a5;
    v27.origin.y = a6;
    v27.size.width = a7;
    v27.size.height = a8;
    CGRectGetHeight(v27);
    v28.origin.x = a1;
    v28.origin.y = a2;
    v28.size.width = a3;
    v28.size.height = v19;
    CGRectGetMaxX(v28);
    v29.origin.x = a5;
    v29.origin.y = a6;
    v29.size.width = a7;
    v29.size.height = a8;
    CGRectGetMinX(v29);
    v30.origin.x = a5;
    v30.origin.y = a6;
    v30.size.width = a7;
    v30.size.height = a8;
    CGRectGetWidth(v30);
    v31.origin.x = a1;
    v31.origin.y = a2;
    v31.size.width = a3;
    v31.size.height = v19;
    CGRectGetMaxY(v31);
    v32.origin.x = a5;
    v32.origin.y = a6;
    v32.size.width = a7;
    v32.size.height = a8;
    CGRectGetMinY(v32);
    v33.origin.x = a5;
    v33.origin.y = a6;
    v33.size.width = a7;
    v33.size.height = a8;
    CGRectGetHeight(v33);
    return v20;
  }
  return a1;
}

double HMIConvertBoundingBoxCoordinatesFromImageSpaceToRoISpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double result;
  CGRect v9;
  CGRect v10;

  v9.origin.x = HMITransformBoundingBoxCoordinatesFromImageSpaceToRoISpace(a1, a2, a3, a4, a5, a6, a7, a8);
  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = 1.0;
  v10.size.height = 1.0;
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v9, v10);
  return result;
}

double HMICGRectSquare(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double Width;
  CGFloat Height;
  double v10;
  CGFloat v11;
  CGFloat v12;
  double result;
  CGRect v14;
  CGRect v15;

  Width = CGRectGetWidth(*(CGRect *)&a1);
  v14.origin.x = a1;
  v14.origin.y = a2;
  v14.size.width = a3;
  v14.size.height = a4;
  Height = CGRectGetHeight(v14);
  v10 = (Width + Height) * 0.5;
  v11 = (Width - v10) * 0.5;
  v12 = (Height - v10) * 0.5;
  v15.origin.x = a1;
  v15.origin.y = a2;
  v15.size.width = a3;
  v15.size.height = a4;
  *(_QWORD *)&result = (unint64_t)CGRectInset(v15, v11, v12);
  return result;
}

void HMICGRectSquareNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  CGAffineTransformMakeScale(&v20, a5, a6);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  v22 = CGRectApplyAffineTransform(v21, &v20);
  v12 = HMICGRectSquare(v22.origin.x, v22.origin.y, v22.size.width, v22.size.height);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  CGAffineTransformMakeScale(&v19, 1.0 / a5, 1.0 / a6);
  v23.origin.x = v12;
  v23.origin.y = v14;
  v23.size.width = v16;
  v23.size.height = v18;
  CGRectApplyAffineTransform(v23, &v19);
}

double HMICGRectScaleAroundCenter(double a1, CGFloat a2, CGFloat a3, CGFloat a4, float a5)
{
  double v9;
  double Width;
  CGFloat v11;
  CGFloat x;
  CGFloat y;
  CGFloat v14;
  CGFloat height;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v9 = a1;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  v17.origin.x = v9;
  v17.origin.y = a2;
  v17.size.width = a3;
  v17.size.height = a4;
  v11 = CGRectGetHeight(v17) * a5;
  v18.origin.x = v9;
  v18.origin.y = a2;
  v18.size.width = a3;
  v18.size.height = a4;
  v19 = CGRectInset(v18, Width * a5, v11);
  x = v19.origin.x;
  y = v19.origin.y;
  v14 = v19.size.width;
  height = v19.size.height;
  if (CGRectGetWidth(v19) != 0.0)
  {
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = v14;
    v20.size.height = height;
    if (CGRectGetHeight(v20) != 0.0)
    {
      v21.origin.x = x;
      v21.origin.y = y;
      v21.size.width = v14;
      v21.size.height = height;
      if (!CGRectIsInfinite(v21))
        return x;
    }
  }
  return v9;
}

double HMICGRectDivideAlongHeight(double a1, CGFloat a2, CGFloat a3, CGFloat a4, float a5)
{
  double v9;
  CGFloat v10;
  CGRect v12;
  CGRect slice;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v14.origin.x = v9;
    v14.origin.y = a2;
    v14.size.width = a3;
    v14.size.height = a4;
    if (!CGRectIsNull(v14))
    {
      v15.origin.x = v9;
      v15.origin.y = a2;
      v15.size.width = a3;
      v15.size.height = a4;
      if (!CGRectIsEmpty(v15))
      {
        memset(&slice, 0, sizeof(slice));
        memset(&v12, 0, sizeof(v12));
        v16.origin.x = v9;
        v16.origin.y = a2;
        v16.size.width = a3;
        v16.size.height = a4;
        v10 = CGRectGetHeight(v16) * a5;
        v17.origin.x = v9;
        v17.origin.y = a2;
        v17.size.width = a3;
        v17.size.height = a4;
        CGRectDivide(v17, &slice, &v12, v10, CGRectMinYEdge);
        return slice.origin.x;
      }
    }
  }
  return v9;
}

uint64_t HMILineSgementsIntersect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _BOOL4 v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  _BOOL4 v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  _BOOL4 v42;
  float v43;
  int v44;
  float v45;
  float v46;
  _BOOL4 v47;
  float v48;

  if (a1 >= a3)
    v8 = a3;
  else
    v8 = a1;
  if (a1 <= a3)
    v9 = a3;
  else
    v9 = a1;
  if (a2 >= a4)
    v10 = a4;
  else
    v10 = a2;
  if (a2 <= a4)
    v11 = a4;
  else
    v11 = a2;
  if (a5 >= a7)
    v12 = a7;
  else
    v12 = a5;
  if (a5 <= a7)
    v13 = a7;
  else
    v13 = a5;
  if (a6 >= a8)
    v14 = a8;
  else
    v14 = a6;
  if (a6 <= a8)
    v15 = a8;
  else
    v15 = a6;
  v16 = a1 - a3;
  v17 = 0.0;
  if (v16 == 0.0)
  {
    v18 = INFINITY;
    v19 = 0.0;
  }
  else
  {
    v18 = (a2 - a4) / v16;
    v19 = a2 - v18 * a1;
  }
  if (a5 - a7 == 0.0)
  {
    v20 = INFINITY;
  }
  else
  {
    v20 = (a6 - a8) / (a5 - a7);
    v17 = a6 - v20 * a5;
  }
  if (v18 == v20 || v18 == INFINITY && v20 == INFINITY)
    return 0;
  v22 = v8;
  v23 = v9;
  v24 = v12;
  if (v18 == INFINITY)
  {
    v25 = v17 + (float)(v20 * v22);
    v26 = v8;
  }
  else if (v20 == INFINITY)
  {
    v25 = v19 + (float)(v18 * v24);
    v26 = v12;
  }
  else
  {
    v26 = (float)(v19 - v17) / (float)(v20 - v18);
    v25 = v19 + (float)(v18 * v26);
  }
  v27 = v13;
  if (v26 < v23)
    goto LABEL_44;
  v28 = v26 - v23;
  v29 = -(float)(v26 - v23);
  if (v28 < 0.0)
    v28 = v29;
  if (v28 >= 0.0001)
  {
    v30 = 0;
  }
  else
  {
LABEL_44:
    if (v26 <= v22)
    {
      v31 = v26 - v22;
      v32 = -(float)(v26 - v22);
      if (v31 < 0.0)
        v31 = v32;
      v30 = v31 < 0.0001;
    }
    else
    {
      v30 = 1;
    }
  }
  v33 = v11;
  if (v26 < v27)
    goto LABEL_54;
  v34 = v26 - v27;
  v35 = -(float)(v26 - v27);
  if (v34 < 0.0)
    v34 = v35;
  if (v34 >= 0.0001)
  {
    v36 = 0;
  }
  else
  {
LABEL_54:
    if (v26 <= v24)
    {
      v37 = v26 - v24;
      if (v37 < 0.0)
        v37 = -v37;
      v36 = v37 < 0.0001;
    }
    else
    {
      v36 = 1;
    }
  }
  v38 = v15;
  v39 = v36 && v30;
  if (v25 < v33)
    goto LABEL_64;
  v40 = v25 - v33;
  if (v40 < 0.0)
    v40 = -v40;
  if (v40 >= 0.0001)
  {
    v42 = 0;
  }
  else
  {
LABEL_64:
    v41 = v10;
    if (v25 <= v41)
    {
      v43 = v25 - v41;
      if (v43 < 0.0)
        v43 = -v43;
      v42 = v43 < 0.0001;
    }
    else
    {
      v42 = 1;
    }
  }
  v44 = v39 & v42;
  if (v25 < v38)
    goto LABEL_74;
  v45 = v25 - v38;
  if (v45 < 0.0)
    v45 = -v45;
  if (v45 >= 0.0001)
  {
    v47 = 0;
  }
  else
  {
LABEL_74:
    v46 = v14;
    if (v25 <= v46)
    {
      v48 = v25 - v46;
      if (v48 < 0.0)
        v48 = -v48;
      v47 = v48 < 0.0001;
    }
    else
    {
      v47 = 1;
    }
  }
  return v44 & v47;
}

BOOL HMICGRectIntersectsPolygon(void *a1, double a2, double a3, CGFloat a4, CGFloat a5)
{
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _BOOL8 v24;
  const CGPath *v25;
  void *v26;
  BOOL v27;
  CGPath *v28;
  CGFloat v30;
  CGFloat v31;
  CGPoint v32;
  CGPoint v33;
  CGRect v34;

  v9 = a1;
  v10 = objc_msgSend(v9, "count");
  v30 = a4;
  v31 = a5;
  v11 = a2 + a4;
  v12 = a3 + a5;
  v13 = 1;
  while (v10 != v13)
  {
    objc_msgSend(v9, "objectAtIndexedSubscript:", v13 - 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "point");
    v16 = v15;
    v18 = v17;

    objc_msgSend(v9, "objectAtIndexedSubscript:", v13);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "point");
    v21 = v20;
    v23 = v22;

    if ((HMILineSgementsIntersect(v16, v18, v21, v23, a2, a3, v11, a3) & 1) == 0
      && (HMILineSgementsIntersect(v16, v18, v21, v23, v11, a3, v11, v12) & 1) == 0
      && (HMILineSgementsIntersect(v16, v18, v21, v23, v11, v12, a2, v12) & 1) == 0)
    {
      ++v13;
      if ((HMILineSgementsIntersect(v16, v18, v21, v23, a2, v12, a2, a3) & 1) == 0)
        continue;
    }
    v24 = 1;
    goto LABEL_12;
  }
  v34.origin.x = a2;
  v34.origin.y = a3;
  v34.size.width = v30;
  v34.size.height = v31;
  v25 = CGPathCreateWithRect(v34, 0);
  objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "point");
  v27 = CGPathContainsPoint(v25, 0, v32, 0);

  if (v27)
  {
    v24 = 1;
  }
  else
  {
    v28 = HMICreatePathFromPoints(v9);
    v33.x = a2;
    v33.y = a3;
    v24 = CGPathContainsPoint(v28, 0, v33, 0);
    CGPathRelease(v28);
  }
  CGPathRelease(v25);
LABEL_12:

  return v24;
}

CGPath *HMICreatePathFromPoints(void *a1)
{
  id v1;
  CGPath *Mutable;
  void *v3;
  double v4;
  CGFloat v5;
  void *v6;
  CGFloat v7;
  unint64_t v8;
  void *v9;
  double v10;
  CGFloat v11;
  void *v12;
  CGFloat v13;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "count") >= 3)
  {
    Mutable = CGPathCreateMutable();
    objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "x");
    v5 = v4;
    objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "y");
    CGPathMoveToPoint(Mutable, 0, v5, v7);

    if ((unint64_t)objc_msgSend(v1, "count") >= 2)
    {
      v8 = 1;
      do
      {
        objc_msgSend(v1, "objectAtIndexedSubscript:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "x");
        v11 = v10;
        objc_msgSend(v1, "objectAtIndexedSubscript:", v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "y");
        CGPathAddLineToPoint(Mutable, 0, v11, v13);

        ++v8;
      }
      while (objc_msgSend(v1, "count") > v8);
    }
  }
  else
  {
    Mutable = 0;
  }

  return Mutable;
}

BOOL HMICGRectIntersectionOverUnion(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9;

  v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

BOOL HMICGRectIntersectionOverMinArea(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9;

  v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

BOOL HMICGRectIntersectionOverArea(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9;

  v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

float HMICGRectGeneralizedIntersectionOverUnion(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v16;
  _BOOL4 IsNull;
  double v18;
  CGFloat y;
  CGFloat x;
  double v22;
  double v23;
  double height;
  double width;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v26 = CGRectUnion(*(CGRect *)&a1, *(CGRect *)&a5);
  height = v26.size.height;
  width = v26.size.width;
  v26.origin.x = a1;
  v26.origin.y = a2;
  v26.size.width = a3;
  v26.size.height = a4;
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = a7;
  v30.size.height = a8;
  v27 = CGRectIntersection(v26, v30);
  y = v27.origin.y;
  x = v27.origin.x;
  v22 = v27.size.height;
  v23 = v27.size.width;
  v27.origin.x = a1;
  v27.origin.y = a2;
  v27.size.width = a3;
  v27.size.height = a4;
  v16 = -1.0;
  if (!CGRectIsNull(v27))
  {
    v28.origin.x = a5;
    v28.origin.y = a6;
    v28.size.width = a7;
    v28.size.height = a8;
    if (!CGRectIsNull(v28))
    {
      v29.origin.y = y;
      v29.origin.x = x;
      v29.size.width = v23;
      v29.size.height = v22;
      IsNull = CGRectIsNull(v29);
      v18 = v23 * v22;
      if (IsNull)
        v18 = 0.0;
      return v18 / (a7 * a8 + a3 * a4 - v18 + 0.000000001)
           - (width * height - (a7 * a8 + a3 * a4 - v18)) / (width * height + 0.000000001);
    }
  }
  return v16;
}

double HMICGPointClampWithSize(double a1, double a2, double a3)
{
  if (a1 >= a3)
    a1 = a3;
  return fmax(a1, 0.0);
}

BOOL HMICGRectIntersectionOverUnionWithRespectToROI(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  _BOOL8 result;
  double x;
  double y;
  double width;
  double height;
  _BYTE v29[32];
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  *(double *)&v29[16] = a7;
  *(double *)&v29[24] = a8;
  *(double *)v29 = a5;
  *(double *)&v29[8] = a6;
  v30.origin.x = a9;
  v30.origin.y = a10;
  v30.size.width = a11;
  v30.size.height = a12;
  result = CGRectIsEmpty(v30);
  if (!result)
  {
    v31.origin.x = a9;
    v31.origin.y = a10;
    v31.size.width = a11;
    v31.size.height = a12;
    result = CGRectIsNull(v31);
    if (!result)
    {
      v32.origin.x = a1;
      v32.origin.y = a2;
      v32.size.width = a3;
      v32.size.height = a4;
      v35.origin.x = a9;
      v35.origin.y = a10;
      v35.size.width = a11;
      v35.size.height = a12;
      v33 = CGRectIntersection(v32, v35);
      x = v33.origin.x;
      y = v33.origin.y;
      width = v33.size.width;
      height = v33.size.height;
      v36.origin.x = a9;
      v36.origin.y = a10;
      v36.size.width = a11;
      v36.size.height = a12;
      v34 = CGRectIntersection(*(CGRect *)v29, v36);
      return HMICGRectIntersectionOverUnion(x, y, width, height, v34.origin.x, v34.origin.y, v34.size.width, v34.size.height);
    }
  }
  return result;
}

BOOL HMICGRectIntersectionOverMinAreaWithRespectToROI(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  _BOOL8 result;
  double x;
  double y;
  double width;
  double height;
  _BYTE v29[32];
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  *(double *)&v29[16] = a7;
  *(double *)&v29[24] = a8;
  *(double *)v29 = a5;
  *(double *)&v29[8] = a6;
  v30.origin.x = a9;
  v30.origin.y = a10;
  v30.size.width = a11;
  v30.size.height = a12;
  result = CGRectIsEmpty(v30);
  if (!result)
  {
    v31.origin.x = a9;
    v31.origin.y = a10;
    v31.size.width = a11;
    v31.size.height = a12;
    result = CGRectIsNull(v31);
    if (!result)
    {
      v32.origin.x = a1;
      v32.origin.y = a2;
      v32.size.width = a3;
      v32.size.height = a4;
      v35.origin.x = a9;
      v35.origin.y = a10;
      v35.size.width = a11;
      v35.size.height = a12;
      v33 = CGRectIntersection(v32, v35);
      x = v33.origin.x;
      y = v33.origin.y;
      width = v33.size.width;
      height = v33.size.height;
      v36.origin.x = a9;
      v36.origin.y = a10;
      v36.size.width = a11;
      v36.size.height = a12;
      v34 = CGRectIntersection(*(CGRect *)v29, v36);
      return HMICGRectIntersectionOverMinArea(x, y, width, height, v34.origin.x, v34.origin.y, v34.size.width, v34.size.height);
    }
  }
  return result;
}

float HMICGRectMinElementwiseDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double MinY;
  CGFloat v21;
  CGFloat v22;
  double v23;
  double v24;
  float v25;
  CGFloat v26;
  double MaxY;
  double v28;
  double v29;
  float v30;
  float v31;
  double v33;
  float v34;
  double MinX;
  double v36;
  double MaxX;
  CGFloat v38;
  CGFloat rect;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    rect = a5;
    v41.origin.x = a5;
    v16 = a6;
    v41.origin.y = a6;
    v17 = a7;
    v41.size.width = a7;
    v41.size.height = a8;
    if (!CGRectIsNull(v41))
    {
      v42.origin.x = a1;
      v42.origin.y = a2;
      v42.size.width = a3;
      v42.size.height = a4;
      if (!CGRectIsEmpty(v42))
      {
        v43.origin.x = rect;
        v43.origin.y = v16;
        v43.size.width = a7;
        v43.size.height = a8;
        if (!CGRectIsEmpty(v43))
        {
          v44.origin.x = a1;
          v44.origin.y = a2;
          v44.size.width = a3;
          v18 = v16;
          v44.size.height = a4;
          MinX = CGRectGetMinX(v44);
          v45.origin.x = rect;
          v45.origin.y = v16;
          v45.size.width = v17;
          v45.size.height = a8;
          v36 = vabdd_f64(MinX, CGRectGetMinX(v45));
          v46.origin.x = a1;
          v46.origin.y = a2;
          v38 = a3;
          v46.size.width = a3;
          v19 = a4;
          v46.size.height = a4;
          MinY = CGRectGetMinY(v46);
          v47.origin.x = rect;
          v47.origin.y = v18;
          v47.size.width = v17;
          v47.size.height = a8;
          if (v36 >= vabdd_f64(MinY, CGRectGetMinY(v47)))
          {
            v50.origin.x = a1;
            v22 = a2;
            v21 = v38;
            v50.origin.y = a2;
            v50.size.width = v38;
            v50.size.height = v19;
            v23 = CGRectGetMinY(v50);
            v51.origin.x = rect;
            v51.origin.y = v18;
            v51.size.width = v17;
            v51.size.height = a8;
            v24 = CGRectGetMinY(v51);
          }
          else
          {
            v48.origin.x = a1;
            v22 = a2;
            v21 = v38;
            v48.origin.y = a2;
            v48.size.width = v38;
            v48.size.height = v19;
            v23 = CGRectGetMinX(v48);
            v49.origin.x = rect;
            v49.origin.y = v18;
            v49.size.width = v17;
            v49.size.height = a8;
            v24 = CGRectGetMinX(v49);
          }
          v25 = v23 - v24;
          v34 = fabsf(v25);
          v52.origin.x = a1;
          v52.origin.y = v22;
          v52.size.width = v21;
          v52.size.height = v19;
          MaxX = CGRectGetMaxX(v52);
          v53.origin.x = rect;
          v53.origin.y = v18;
          v53.size.width = v17;
          v53.size.height = a8;
          v33 = vabdd_f64(MaxX, CGRectGetMaxX(v53));
          v54.origin.x = a1;
          v54.origin.y = v22;
          v54.size.width = v21;
          v26 = v19;
          v54.size.height = v19;
          MaxY = CGRectGetMaxY(v54);
          v55.origin.x = rect;
          v55.origin.y = v18;
          v55.size.width = v17;
          v55.size.height = a8;
          if (v33 >= vabdd_f64(MaxY, CGRectGetMaxY(v55)))
          {
            v58.origin.x = a1;
            v58.origin.y = a2;
            v58.size.width = v38;
            v58.size.height = v26;
            v28 = CGRectGetMaxY(v58);
            v59.size.height = a8;
            v59.origin.x = rect;
            v59.origin.y = v18;
            v59.size.width = v17;
            v29 = CGRectGetMaxY(v59);
          }
          else
          {
            v56.origin.x = a1;
            v56.origin.y = a2;
            v56.size.width = v38;
            v56.size.height = v26;
            v28 = CGRectGetMaxX(v56);
            v57.size.height = a8;
            v57.origin.x = rect;
            v57.origin.y = v18;
            v57.size.width = v17;
            v29 = CGRectGetMaxX(v57);
          }
          v30 = v28 - v29;
          v31 = fabsf(v30);
          if (v34 >= v31)
            return v31;
          else
            return v34;
        }
      }
    }
  }
  return v15;
}

float HMICGRectMaxElementwiseDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double MaxX;
  double v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  float v27;
  double v28;
  double MaxY;
  double v30;
  double v31;
  double v32;
  double v33;
  float v34;
  double v36;
  float v37;
  double v38;
  double MinY;
  double MinX;
  CGFloat v41;
  CGFloat v42;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v42 = a4;
    v16 = a5;
    v44.origin.x = a5;
    v17 = a6;
    v44.origin.y = a6;
    v18 = a7;
    v44.size.width = a7;
    v44.size.height = a8;
    if (!CGRectIsNull(v44))
    {
      v45.size.height = v42;
      v45.origin.x = a1;
      v45.origin.y = a2;
      v45.size.width = a3;
      if (!CGRectIsEmpty(v45))
      {
        v46.origin.x = v16;
        v46.origin.y = v17;
        v46.size.width = a7;
        v46.size.height = a8;
        if (!CGRectIsEmpty(v46))
        {
          v47.origin.x = a1;
          v47.origin.y = a2;
          v47.size.width = a3;
          v47.size.height = v42;
          MinX = CGRectGetMinX(v47);
          v48.origin.x = v16;
          v48.origin.y = v17;
          v48.size.width = a7;
          v48.size.height = a8;
          v19 = MinX - CGRectGetMinX(v48);
          if (v19 < 0.0)
            v19 = -v19;
          v38 = v19;
          v41 = a3;
          v49.origin.x = a1;
          v49.origin.y = a2;
          v49.size.width = a3;
          v49.size.height = v42;
          MaxX = CGRectGetMaxX(v49);
          v50.origin.x = v16;
          v50.origin.y = v17;
          v50.size.width = a7;
          v50.size.height = a8;
          v21 = MaxX - CGRectGetMaxX(v50);
          if (v21 < 0.0)
            v21 = -v21;
          v22 = v17;
          if (v38 <= v21)
          {
            v53.origin.x = a1;
            v53.size.width = a3;
            v23 = a2;
            v53.origin.y = a2;
            v53.size.height = v42;
            v24 = CGRectGetMaxX(v53);
            v54.origin.x = v16;
            v54.origin.y = v17;
            v54.size.width = v18;
            v54.size.height = a8;
            v25 = CGRectGetMaxX(v54);
          }
          else
          {
            v51.origin.x = a1;
            v51.size.width = a3;
            v23 = a2;
            v51.origin.y = a2;
            v51.size.height = v42;
            v24 = CGRectGetMinX(v51);
            v52.origin.x = v16;
            v52.origin.y = v17;
            v52.size.width = v18;
            v52.size.height = a8;
            v25 = CGRectGetMinX(v52);
          }
          v26 = v24 - v25;
          if (v26 < 0.0)
            v26 = -v26;
          v27 = v26;
          v37 = v27;
          v55.origin.x = a1;
          v55.origin.y = v23;
          v55.size.width = v41;
          v55.size.height = v42;
          MinY = CGRectGetMinY(v55);
          v56.origin.x = v16;
          v56.origin.y = v17;
          v56.size.width = v18;
          v56.size.height = a8;
          v28 = MinY - CGRectGetMinY(v56);
          if (v28 < 0.0)
            v28 = -v28;
          v36 = v28;
          v57.origin.x = a1;
          v57.origin.y = v23;
          v57.size.width = v41;
          v57.size.height = v42;
          MaxY = CGRectGetMaxY(v57);
          v58.origin.x = v16;
          v58.origin.y = v22;
          v58.size.width = v18;
          v58.size.height = a8;
          v30 = MaxY - CGRectGetMaxY(v58);
          if (v30 < 0.0)
            v30 = -v30;
          if (v36 <= v30)
          {
            v61.origin.x = a1;
            v61.origin.y = a2;
            v61.size.width = v41;
            v61.size.height = v42;
            v31 = CGRectGetMaxY(v61);
            v62.origin.x = v16;
            v62.origin.y = v22;
            v62.size.width = v18;
            v62.size.height = a8;
            v32 = CGRectGetMaxY(v62);
          }
          else
          {
            v59.origin.x = a1;
            v59.origin.y = a2;
            v59.size.width = v41;
            v59.size.height = v42;
            v31 = CGRectGetMinY(v59);
            v60.origin.x = v16;
            v60.origin.y = v22;
            v60.size.width = v18;
            v60.size.height = a8;
            v32 = CGRectGetMinY(v60);
          }
          v33 = v31 - v32;
          if (v33 < 0.0)
            v33 = -v33;
          v34 = v33;
          if (v37 <= v34)
            return v34;
          else
            return v37;
        }
      }
    }
  }
  return v15;
}

float HMICGRectMaxParallelEdgeDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10)
{
  float v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double MaxX;
  CGFloat v35;
  double v36;
  double v37;
  float v38;
  double MaxY;
  double v40;
  double v41;
  float v42;
  double v43;
  double v45;
  float v46;
  double MinX;
  double v48;
  double MinY;
  CGFloat v50;
  CGFloat rect;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  v25 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    rect = a4;
    v26 = a5;
    v53.origin.x = a5;
    v27 = a6;
    v53.origin.y = a6;
    v28 = a7;
    v53.size.width = a7;
    v29 = a8;
    v53.size.height = a8;
    if (!CGRectIsNull(v53))
    {
      v54.origin.x = a1;
      v54.origin.y = a2;
      v54.size.width = a3;
      v54.size.height = rect;
      if (!CGRectIsEmpty(v54))
      {
        v55.origin.x = v26;
        v55.origin.y = v27;
        v30 = v28;
        v55.size.width = v28;
        v50 = v29;
        v55.size.height = v29;
        if (!CGRectIsEmpty(v55))
        {
          v56.origin.x = a1;
          v56.origin.y = a2;
          v31 = v26;
          v56.size.width = a3;
          v32 = v27;
          v56.size.height = rect;
          MinX = CGRectGetMinX(v56);
          v57.origin.x = v26;
          v57.origin.y = v27;
          v57.size.width = v30;
          v57.size.height = v50;
          v48 = vabdd_f64(MinX, CGRectGetMinX(v57));
          v58.origin.x = a1;
          v58.origin.y = a2;
          v33 = a3;
          v58.size.width = a3;
          v58.size.height = rect;
          MaxX = CGRectGetMaxX(v58);
          v59.origin.x = v31;
          v59.origin.y = v27;
          v59.size.width = v30;
          v59.size.height = v50;
          if (v48 >= vabdd_f64(MaxX, CGRectGetMaxX(v59)))
          {
            v62.origin.x = a1;
            v35 = a2;
            v62.origin.y = a2;
            v62.size.width = v33;
            v62.size.height = rect;
            v36 = CGRectGetMaxX(v62);
            v63.origin.x = v31;
            v63.origin.y = v27;
            v63.size.width = v30;
            v63.size.height = v50;
            v37 = CGRectGetMaxX(v63);
          }
          else
          {
            v60.origin.x = a1;
            v35 = a2;
            v60.origin.y = a2;
            v60.size.width = v33;
            v60.size.height = rect;
            v36 = CGRectGetMinX(v60);
            v61.origin.x = v31;
            v61.origin.y = v27;
            v61.size.width = v30;
            v61.size.height = v50;
            v37 = CGRectGetMinX(v61);
          }
          v38 = v36 - v37;
          v46 = fabsf(v38);
          v64.origin.x = a1;
          v64.origin.y = v35;
          v64.size.width = v33;
          v64.size.height = rect;
          MinY = CGRectGetMinY(v64);
          v65.origin.x = v31;
          v65.origin.y = v27;
          v65.size.width = v30;
          v65.size.height = v50;
          v45 = vabdd_f64(MinY, CGRectGetMinY(v65));
          v66.origin.x = a1;
          v66.origin.y = v35;
          v66.size.width = v33;
          v66.size.height = rect;
          MaxY = CGRectGetMaxY(v66);
          v67.origin.x = v31;
          v67.origin.y = v32;
          v67.size.width = v30;
          v67.size.height = v50;
          if (v45 >= vabdd_f64(MaxY, CGRectGetMaxY(v67)))
          {
            v70.origin.x = a1;
            v70.origin.y = a2;
            v70.size.width = v33;
            v70.size.height = rect;
            v40 = CGRectGetMaxY(v70);
            v71.origin.x = v31;
            v71.origin.y = v32;
            v71.size.width = v30;
            v71.size.height = v50;
            v41 = CGRectGetMaxY(v71);
          }
          else
          {
            v68.origin.x = a1;
            v68.origin.y = a2;
            v68.size.width = v33;
            v68.size.height = rect;
            v40 = CGRectGetMinY(v68);
            v69.origin.x = v31;
            v69.origin.y = v32;
            v69.size.width = v30;
            v69.size.height = v50;
            v41 = CGRectGetMinY(v69);
          }
          v42 = v40 - v41;
          v43 = a10 * fabsf(v42);
          if (a9 * v46 > v43)
            return a9 * v46;
          return v43;
        }
      }
    }
  }
  return v25;
}

float HMICGRectMaxParallelEdgeDistanceRatio(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15;
  double v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double MaxX;
  BOOL v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v27;
  double v28;
  float v29;
  double MaxY;
  CGFloat v31;
  double v32;
  double v33;
  float v34;
  CGFloat v35;
  BOOL v36;
  CGFloat v37;
  double v38;
  double v39;
  double v40;
  float v41;
  CGFloat v42;
  BOOL v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  float v48;
  float v49;
  double Height;
  double Width;
  float v53;
  double MinY;
  double v55;
  float v56;
  float v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double MinX;
  CGFloat rect_8;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    rect_8 = a2;
    v16 = a5;
    v64.origin.x = a5;
    v17 = a6;
    v64.origin.y = a6;
    v18 = a7;
    v64.size.width = a7;
    v19 = a8;
    v64.size.height = a8;
    if (!CGRectIsNull(v64))
    {
      v65.origin.x = a1;
      v65.origin.y = rect_8;
      v65.size.width = a3;
      v65.size.height = a4;
      if (!CGRectIsEmpty(v65))
      {
        v66.origin.x = v16;
        v66.origin.y = v17;
        v20 = v18;
        v66.size.width = v18;
        v66.size.height = v19;
        if (!CGRectIsEmpty(v66))
        {
          v67.origin.x = a1;
          v67.origin.y = rect_8;
          v67.size.width = a3;
          v67.size.height = a4;
          MinX = CGRectGetMinX(v67);
          v68.origin.x = v16;
          v68.origin.y = v17;
          v68.size.width = v18;
          v68.size.height = v19;
          v59 = vabdd_f64(MinX, CGRectGetMinX(v68));
          v69.origin.x = a1;
          v69.origin.y = rect_8;
          v69.size.width = a3;
          v69.size.height = a4;
          MaxX = CGRectGetMaxX(v69);
          v70.origin.x = v16;
          v70.origin.y = v17;
          v70.size.width = v18;
          v58 = v19;
          v70.size.height = v19;
          v22 = v59 < vabdd_f64(MaxX, CGRectGetMaxX(v70));
          v60 = v18;
          v23 = a1;
          v24 = rect_8;
          v25 = a3;
          v26 = a4;
          if (v22)
          {
            v27 = CGRectGetMinX(*(CGRect *)&v23);
            v71.origin.x = v16;
            v71.origin.y = v17;
            v71.size.height = v19;
            v71.size.width = v18;
            v28 = CGRectGetMinX(v71);
          }
          else
          {
            v27 = CGRectGetMaxX(*(CGRect *)&v23);
            v72.origin.x = v16;
            v72.origin.y = v17;
            v72.size.height = v19;
            v72.size.width = v18;
            v28 = CGRectGetMaxX(v72);
          }
          v29 = v27 - v28;
          v57 = fabsf(v29);
          v73.origin.x = a1;
          v73.origin.y = rect_8;
          v73.size.width = a3;
          v73.size.height = a4;
          MinY = CGRectGetMinY(v73);
          v74.origin.x = v16;
          v74.origin.y = v17;
          v74.size.width = v18;
          v74.size.height = v19;
          v55 = vabdd_f64(MinY, CGRectGetMinY(v74));
          v75.origin.x = a1;
          v75.origin.y = rect_8;
          v75.size.width = a3;
          v75.size.height = a4;
          MaxY = CGRectGetMaxY(v75);
          v76.origin.x = v16;
          v76.origin.y = v17;
          v76.size.width = v20;
          v76.size.height = v19;
          if (v55 >= vabdd_f64(MaxY, CGRectGetMaxY(v76)))
          {
            v79.origin.x = a1;
            v31 = rect_8;
            v79.origin.y = rect_8;
            v79.size.width = a3;
            v79.size.height = a4;
            v32 = CGRectGetMaxY(v79);
            v80.origin.x = v16;
            v80.origin.y = v17;
            v80.size.height = v58;
            v80.size.width = v20;
            v33 = CGRectGetMaxY(v80);
          }
          else
          {
            v77.origin.x = a1;
            v31 = rect_8;
            v77.origin.y = rect_8;
            v77.size.width = a3;
            v77.size.height = a4;
            v32 = CGRectGetMinY(v77);
            v78.origin.x = v16;
            v78.origin.y = v17;
            v78.size.height = v58;
            v78.size.width = v20;
            v33 = CGRectGetMinY(v78);
          }
          v34 = v32 - v33;
          v56 = fabsf(v34);
          v81.origin.x = a1;
          v81.origin.y = v31;
          v81.size.width = a3;
          v81.size.height = a4;
          Width = CGRectGetWidth(v81);
          v82.origin.x = v16;
          v82.origin.y = v17;
          v82.size.width = v60;
          v82.size.height = v58;
          v35 = CGRectGetWidth(v82);
          v36 = Width <= v35;
          if (Width <= v35)
            v37 = v16;
          else
            v37 = a1;
          if (v36)
            v38 = v17;
          else
            v38 = v31;
          if (v36)
            v39 = v60;
          else
            v39 = a3;
          if (v36)
            v40 = v58;
          else
            v40 = a4;
          v41 = CGRectGetWidth(*(CGRect *)&v37);
          v53 = v41;
          v83.origin.x = a1;
          v83.origin.y = v31;
          v83.size.width = a3;
          v83.size.height = a4;
          Height = CGRectGetHeight(v83);
          v84.origin.x = v16;
          v84.origin.y = v17;
          v84.size.width = v60;
          v84.size.height = v58;
          v42 = CGRectGetHeight(v84);
          v43 = Height <= v42;
          if (Height <= v42)
            v44 = v16;
          else
            v44 = a1;
          if (v43)
            v45 = v17;
          else
            v45 = v31;
          if (v43)
            v46 = v60;
          else
            v46 = a3;
          if (v43)
            v47 = v58;
          else
            v47 = a4;
          v48 = CGRectGetHeight(*(CGRect *)&v44);
          v49 = v56 / v48;
          if ((float)(v57 / v53) <= v49)
            return v49;
          else
            return v57 / v53;
        }
      }
    }
  }
  return v15;
}

void sub_219D55CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_219D56178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t HMIAspectRatioMake(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

BOOL HMIAspectRatioIsValid(uint64_t a1)
{
  return (int)a1 > 0 && SHIDWORD(a1) > 0;
}

uint64_t HMIAspectRatioEqualToAspectRatio(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;

  if (a1 == a2)
    return 1;
  if ((int)a1 < 1 || SHIDWORD(a1) < 1)
    return (int)a2 < 1 || SHIDWORD(a2) < 1;
  v3 = SHIDWORD(a2) > 0 && (int)a1 * (uint64_t)SHIDWORD(a2) == (int)a2 * (uint64_t)SHIDWORD(a1);
  return (int)a2 >= 1 && v3;
}

uint64_t kHMIPairwiseMatchDescendingComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  double v10;
  void *v11;
  uint64_t v12;

  v4 = (void *)MEMORY[0x24BDD16E0];
  v5 = a2;
  objc_msgSend(a3, "score");
  objc_msgSend(v4, "numberWithFloat:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v5, "score");
  v9 = v8;

  LODWORD(v10) = v9;
  objc_msgSend(v7, "numberWithFloat:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v6, "compare:", v11);

  return v12;
}

void sub_219D57458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D5774C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t HMIGetMemoryState()
{
  unint64_t v1;

  v1 = 0;
  if (!HMIGetMemoryStatistics(0, 0, (unint64_t)&v1, 0))
    return 1;
  if (!(v1 >> 24))
    return 3;
  if (v1 >> 25)
    return 1;
  else
    return 2;
}

uint64_t HMIGetMemoryStatistics(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  host_t v8;
  uint64_t v10;
  _OWORD v11[4];
  mach_msg_type_number_t task_info_outCnt[2];
  mach_msg_type_number_t host_info_outCnt;

  if (a1 | a2)
  {
    memset(v11, 0, 40);
    task_info_outCnt[0] = 10;
    if (task_info(*MEMORY[0x24BDAEC58], 0x12u, (task_info_t)v11, task_info_outCnt))
      return 0;
    if (a1)
      *(_QWORD *)a1 = *(_QWORD *)((char *)v11 + 4);
    if (a2)
      *(_QWORD *)a2 = *(_QWORD *)((char *)v11 + 12);
  }
  if (a3 | a4)
  {
    *(_QWORD *)task_info_outCnt = 0;
    memset(v11, 0, 60);
    v8 = MEMORY[0x22073548C]();
    host_info_outCnt = 15;
    host_page_size(v8, (vm_size_t *)task_info_outCnt);
    if (host_statistics(v8, 2, (host_info_t)v11, &host_info_outCnt))
      return 0;
    v10 = *(_QWORD *)task_info_outCnt;
    if (a3)
      *(_QWORD *)a3 = *(_QWORD *)task_info_outCnt * LODWORD(v11[0]);
    if (a4)
      *(_QWORD *)a4 = v10 * LODWORD(v11[0]) + ((DWORD2(v11[0]) + DWORD1(v11[0]) + HIDWORD(v11[0])) * v10);
  }
  return 1;
}

BOOL HMIGetMemoryFootprintForProcessID(int a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  _OWORD v7[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  memset(v7, 0, sizeof(v7));
  v5 = proc_pid_rusage(a1, 6, (rusage_info_t *)v7);
  if (!v5)
  {
    if (a2)
      *a2 = *((_QWORD *)&v8 + 1);
    if (a3)
      *a3 = v19;
  }
  return v5 == 0;
}

BOOL HMIGetMemoryFootprint(_QWORD *a1, _QWORD *a2)
{
  pid_t v4;

  v4 = getpid();
  return HMIGetMemoryFootprintForProcessID(v4, a1, a2);
}

id HMIGetAllProcessIDs()
{
  void *v0;
  unsigned int v1;
  int v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  void *v7;
  void *v8;
  id v9;
  _OWORD v11[4];
  _OWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = proc_listallpids(0, 0);
  if ((v1 & 0x80000000) != 0)
    goto LABEL_10;
  v2 = 4 * v1;
  v3 = malloc_type_malloc(4 * v1, 0x100004052888210uLL);
  v4 = proc_listallpids(v3, v2);
  if ((v4 & 0x80000000) != 0)
  {
    free(v3);
LABEL_10:
    v9 = (id)MEMORY[0x24BDBD1B8];
    goto LABEL_11;
  }
  if (v4)
  {
    v5 = v4;
    v6 = (int *)v3;
    do
    {
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      memset(v11, 0, sizeof(v11));
      if (proc_pidinfo(*v6, 3, 0, v11, 136) == 136)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v0, "setObject:forKeyedSubscript:", v8, v7);

      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  free(v3);
  v9 = v0;
LABEL_11:

  return v9;
}

uint64_t HMIGetProcessID(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  HMIGetAllProcessIDs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v2, "objectForKeyedSubscript:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "integerValue");

  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

uint64_t HMIGetAvailableSpaceForPurgeableAssets(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)CacheDeleteCopyAvailableSpaceForVolume();
  v3 = v2;
  if (a1)
    *a1 = objc_msgSend(v2, "unsignedLongLongValue");

  return 1;
}

const __CFString *HMIThermalPressureLevelAsString(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("HMIThermalPressureLevelNominal");
  else
    return off_24DBEA168[a1];
}

uint64_t _mapOSThermalLevelToHMIThermalLevel(uint64_t a1)
{
  if (a1 > 29)
  {
    switch(a1)
    {
      case 30:
        return 4;
      case 40:
        return 5;
      case 50:
        return 6;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return 1;
      case 10:
        return 2;
      case 20:
        return 3;
    }
  }
  return 0;
}

void sub_219D58784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *HMIPeakPowerPressureLevelAsString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 5)
    return CFSTR("HMIPeakPowerPressureLevelNominal");
  else
    return off_24DBEA1A0[a1 + 1];
}

void sub_219D58C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D59520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_219D5B128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 184), 8);
  _Unwind_Resume(a1);
}

const char *CVML_getStatusDescription(unint64_t a1)
{
  const char *v1;

  v1 = "Not supported error";
  switch(a1)
  {
    case 0x59u:
      return v1;
    case 0x5Au:
      v1 = "General error";
      break;
    case 0x5Bu:
      v1 = "Espresso error";
      break;
    case 0x5Cu:
      v1 = "incorrect binserializer key";
      break;
    case 0x5Du:
      v1 = "small sparsity error";
      break;
    case 0x5Eu:
      v1 = "feature extraction error";
      break;
    case 0x5Fu:
      v1 = "initialization error";
      break;
    case 0x60u:
      v1 = "no saved state to revert";
      break;
    case 0x61u:
      v1 = "nominal distance not changed";
      break;
    case 0x62u:
      v1 = "batch size violation";
      break;
    case 0x63u:
      v1 = "computation kill request was issued";
      break;
    case 0x64u:
      v1 = "too few IDs to build VIP model";
      break;
    case 0x65u:
      v1 = "video error";
      break;
    case 0x66u:
      v1 = "error with projection computation";
      break;
    case 0x67u:
      v1 = "missing positional parameter";
      break;
    case 0x68u:
      v1 = "inconsistent state error";
      break;
    case 0x69u:
      v1 = "warping error";
      break;
    case 0x6Au:
      v1 = "OpenGL error";
      break;
    case 0x6Bu:
      v1 = "invalid format";
      break;
    case 0x6Cu:
      v1 = "out of bounds";
      break;
    case 0x6Du:
      v1 = "singular point configuration error";
      break;
    case 0x6Eu:
      v1 = "division by zero";
      break;
    case 0x6Fu:
      v1 = "LAPACK error";
      break;
    case 0x70u:
      v1 = "platform endianess not supported";
      break;
    case 0x71u:
      v1 = "hash already in use";
      break;
    case 0x72u:
      v1 = "invalid ID";
      break;
    case 0x73u:
      v1 = "invalid data type";
      break;
    case 0x74u:
      v1 = "data inconsistency error";
      break;
    case 0x75u:
      v1 = "I/O error";
      break;
    case 0x76u:
      v1 = "unknown option";
      break;
    case 0x77u:
      v1 = "invalid option";
      break;
    case 0x78u:
      v1 = "missing option";
      break;
    case 0x79u:
      v1 = "delegate error";
      break;
    case 0x7Au:
      v1 = "vImage related error";
      break;
    case 0x7Bu:
      v1 = "memory allocation error";
      break;
    case 0x7Cu:
      v1 = "invalid parameter";
      break;
    case 0x7Du:
      v1 = "unexpected null pointer";
      break;
    case 0x7Eu:
      v1 = "internal error";
      break;
    case 0x7Fu:
      v1 = "not implemented error";
      break;
    case 0x80u:
      v1 = "ok";
      break;
    default:
      v1 = CVML_getStatusDescription_ourSharedDefaultStatusDescription;
      snprintf(CVML_getStatusDescription_ourSharedDefaultStatusDescription, 0x3FuLL, "CVML_status module %d error %lld", a1 >> 8, a1 - 128);
      break;
  }
  return v1;
}

const char *CVML_getModuleDescription(uint64_t a1)
{
  uint64_t v1;
  const char *v2;

  v1 = a1 >> 8;
  v2 = "BinSerializer";
  switch(a1 >> 8)
  {
    case 1:
      return v2;
    case 2:
      v2 = "ERT";
      break;
    case 3:
      v2 = "Face3D";
      break;
    case 4:
      v2 = "FaceDescriptor";
      break;
    case 5:
      v2 = "FaceFrontalizer";
      break;
    case 6:
      v2 = "FaceWarper";
      break;
    case 7:
      v2 = "Geometry2D";
      break;
    case 8:
      v2 = "Geometry3D";
      break;
    case 9:
      v2 = "ImageGrouping";
      break;
    case 10:
      v2 = "ImageQuality";
      break;
    case 11:
      v2 = "LandmarkDetector";
      break;
    case 12:
      v2 = "MomentProcessor";
      break;
    case 13:
      v2 = "FaceboxAligner";
      break;
    case 14:
      v2 = "ImageDescriptor";
      break;
    case 15:
      v2 = "ImageClassifier";
      break;
    case 16:
      v2 = "ImageProcessing";
      break;
    case 17:
      v2 = "VIPIdentification";
      break;
    case 18:
      v2 = "ImageRegistration";
      break;
    case 19:
      v2 = "SimilarityMatrix";
      break;
    case 20:
      v2 = "Clustering";
      break;
    case 21:
      v2 = "HumanDetector";
      break;
    case 22:
      v2 = "FaceRegionMap";
      break;
    case 23:
      v2 = "ObjectDetector";
      break;
    case 24:
      v2 = "DML";
      break;
    case 25:
      v2 = "SGD";
      break;
    case 26:
      v2 = "ObjectTracker";
      break;
    case 27:
      v2 = "SRCClassifier";
      break;
    case 28:
      v2 = "Kmeans";
      break;
    case 29:
      v2 = "SparseCoding";
      break;
    case 30:
      v2 = "FaceID";
      break;
    case 31:
      v2 = "BoostedClassifier";
      break;
    case 32:
      v2 = "FaceSegmenter";
      break;
    case 33:
      v2 = "ImageAnalyzer";
      break;
    case 34:
      v2 = "FaceAttributes";
      break;
    case 35:
      v2 = "FaceprintAndAttributes";
      break;
    case 36:
      v2 = "FaceQuality";
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
LABEL_7:
      v2 = CVML_getModuleDescription_ourSharedModuleNameString;
      snprintf(CVML_getModuleDescription_ourSharedModuleNameString, 0x1FuLL, "CVML Module %lld", a1 >> 8);
      break;
    case 64:
      v2 = "Generic";
      break;
    case 65:
      v2 = "ImageTools";
      break;
    case 66:
      v2 = "VideoTools";
      break;
    case 67:
      v2 = "ImageWarper";
      break;
    case 68:
      v2 = "ThirdParty";
      break;
    case 69:
      v2 = "BinSerializerProcessor";
      break;
    case 70:
      v2 = "AppleNetParser";
      break;
    default:
      switch(v1)
      {
        case 128:
          v2 = "FaceProcessorCLI";
          break;
        case 129:
          v2 = "ImageClassifierCLI";
          break;
        case 130:
          v2 = "MPCmdlineClientCLI";
          break;
        case 131:
          v2 = "ClusteringCLI";
          break;
        case 132:
          v2 = "ImageProcessorCLI";
          break;
        case 133:
          v2 = "PhotosProcessorCLI";
          break;
        default:
          if (v1 != 192)
            goto LABEL_7;
          v2 = "CVMLEngine";
          break;
      }
      break;
  }
  return v2;
}

_QWORD *__HMISignpostScopeLeave(_QWORD *result)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)objc_msgSend(result, "end");
  }
  return result;
}

__CFString *HMIPersonFaceCropSourceAsString(unint64_t a1)
{
  if (a1 < 5)
    return off_24DBEA478[a1];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown source: %ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_219D60C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_219D61688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219D61818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)HMIBackgroundEstimator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_219D61A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219D61CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D61DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_219D61FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D62268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if (v17 == v18)
  if (v14 == v15)

  if (v11 == v12)
  _Unwind_Resume(a1);
}

void sub_219D62390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_219D624B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_219D62588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_219D62688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219D62784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D62CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D6301C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D6338C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219D635CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D636E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_219D637BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D63B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38)
{
  void *v38;
  void *v39;
  uint64_t v40;

  _Unwind_Resume(a1);
}

void sub_219D63CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_219D63D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_219D63EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_219D63FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219D640EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_219D641A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219D642BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D64348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D643F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_219D644B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D64BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219D65AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CGPoint>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 16 * a3);
    a1[1] = &v6[16 * a3];
  }
  return a1;
}

void sub_219D65B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_219D65E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::deque<CGPoint>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<CGPoint *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<CGPoint *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

__n128 std::deque<CGPoint>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<CGPoint>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<CGPoint>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<CGPoint *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<CGPoint *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<CGPoint *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CGPoint *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_219D66710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<CGPoint *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<CGPoint *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void sub_219D67494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  os_unfair_lock_s *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

void sub_219D67648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  os_unfair_lock_s *v21;

  os_unfair_lock_unlock(v21);
  _Unwind_Resume(a1);
}

uint64_t HMIEventClassToCameraVideoAnalyzerEventType(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v7[0] = objc_opt_class();
  v8[0] = &unk_24DC14600;
  v7[1] = objc_opt_class();
  v8[1] = &unk_24DC14618;
  v7[2] = objc_opt_class();
  v8[2] = &unk_24DC14630;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, v7, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    v5 = objc_msgSend(v3, "integerValue");
  else
    v5 = 0;

  return v5;
}

void sub_219D67B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_219D67D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219D67F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219D682C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219D68B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double HMIOpenCVAddPoints(double a1, double a2, double a3)
{
  return (double)((int)a3 + (int)a1);
}

uint64_t HMIOpenCVEcho(int a1)
{
  void *v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  int64x2_t v9;
  double v10;
  double v11;
  _OWORD v12[4];
  char *v13;
  cv *v14;
  _QWORD v15[2];
  int v16[2];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 32;
  *(_QWORD *)v16 = 0x2000000020;
  *(double *)v9.i64 = (double)a1;
  *(double *)&v9.i64[1] = (double)a1;
  v10 = (double)a1;
  v11 = (double)a1;
  v13 = (char *)v12 + 8;
  v14 = (cv *)v15;
  v15[0] = 0;
  v15[1] = 0;
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  cv::Mat::create((cv::Mat *)v12, (cv::Mat *)3, v16, 4);
  cv::Mat::operator=((uint64_t)v12, &v9);
  v2 = (unsigned int *)*((_QWORD *)&v12[1] + 1);
  v3 = *(unsigned int *)(*(_QWORD *)&v12[1]
                       + 16 * *(_QWORD *)v14
                       + 16 * *((_QWORD *)v14 + 1)
                       + 16 * *((_QWORD *)v14 + 2));
  if (*((_QWORD *)&v12[1] + 1))
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
      cv::Mat::deallocate((cv::Mat *)v12, v1);
  }
  *(_QWORD *)&v12[1] = 0;
  memset(&v12[2], 0, 24);
  if (SDWORD1(v12[0]) >= 1)
  {
    v6 = 0;
    v7 = v13;
    do
      *(_DWORD *)&v7[4 * v6++] = 0;
    while (v6 < SDWORD1(v12[0]));
  }
  *((_QWORD *)&v12[1] + 1) = 0;
  if (v14 != (cv *)v15)
    cv::fastFree((void **)v14, v1);
  return v3;
}

void sub_219D699AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void homeai::mod::ImageDescriptorBufferFloat32::computeDistancesFrom(homeai::mod::ImageDescriptorBufferFloat32 *this@<X0>, vDSP_Length *lpsrc@<X1>, float **a3@<X8>)
{
  homeai::mod::ImageDescriptorBufferFloat32 *v6;
  vDSP_Length v7;
  vDSP_Length v8;
  const float *DataForKthDescriptor;
  const float *v10;
  uint64_t v11;
  _QWORD *v12;
  const float *v13;
  const float *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  const float *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  const float *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *exception;

  if (!v6)
    __cxa_bad_cast();
  if (v6 == this)
  {
    (*(void (**)(homeai::mod::ImageDescriptorBufferFloat32 *))(*(_QWORD *)this + 96))(this);
  }
  else
  {
    if (*((_QWORD *)v6 + 12) != *((_QWORD *)this + 12))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3708;
      __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
    }
    v7 = *((_QWORD *)this + 9);
    v8 = lpsrc[9];
    std::vector<float>::vector(a3, v8 * v7);
    if (v7 == 1 && v8 == 1)
    {
      **a3 = (*(float (**)(homeai::mod::ImageDescriptorBufferFloat32 *, vDSP_Length *))(*(_QWORD *)this + 88))(this, lpsrc);
    }
    else if (v7 == 1)
    {
      DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      v10 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      v11 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v10, DataForKthDescriptor, v8, *a3);
      if ((v11 & 0x80) == 0)
      {
        v12 = __cxa_allocate_exception(8uLL);
        *v12 = v11;
        __cxa_throw(v12, MEMORY[0x24BEDB7D0], 0);
      }
    }
    else if (v8 == 1)
    {
      v13 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      v14 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      v15 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v13, v14, v7, *a3);
      if ((v15 & 0x80) == 0)
      {
        v16 = __cxa_allocate_exception(8uLL);
        *v16 = v15;
        __cxa_throw(v16, MEMORY[0x24BEDB7D0], 0);
      }
    }
    else
    {
      v17 = homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      if ((int)v7 >= 1)
      {
        v18 = (const float *)v17;
        v19 = 0;
        v20 = 0;
        v21 = v7;
        do
        {
          v22 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v19);
          v23 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v22, v18, v8, &(*a3)[v20]);
          if ((v23 & 0x80) == 0)
          {
            v24 = __cxa_allocate_exception(8uLL);
            *v24 = v23;
            __cxa_throw(v24, MEMORY[0x24BEDB7D0], 0);
          }
          v20 += v8;
          ++v19;
        }
        while (v21 != v19);
      }
    }
  }
}

void sub_219D77988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, unint64_t a2)
{
  _QWORD *exception;

  if (*((_QWORD *)this + 9) <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3692;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  return *((_QWORD *)this + 7) + *((_QWORD *)this + 8) * a2;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(homeai::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, vDSP_Length __N, float *__C)
{
  const float *v5;
  float *__Y;
  vDSP_Length v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v14;
  uint64_t v15;
  _QWORD *exception;
  float __Aa;
  float v18;

  if (!__A || (v5 = a3) == 0 || (__Y = __C) == 0)
  {
    v12 = &CVML_status_unexpectedNullPointer;
LABEL_10:
    v10 = *v12;
    return (v10 + 128) | 0xE00;
  }
  v7 = __N;
  v10 = 0;
  if (__N > 7)
  {
    v14 = *((_DWORD *)this + 26);
    switch(v14)
    {
      case 3:
        __Aa = 0.5;
        vDSP_vfill(&__Aa, __C, 1, __N);
        cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v7, 0.5, v5, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
        return (v10 + 128) | 0xE00;
      case 2:
        v18 = 0.5;
        vDSP_vfill(&v18, __C, 1, __N);
        cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v7, -0.5, v5, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
        return (v10 + 128) | 0xE00;
      case 1:
        while (1)
        {
          v11 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v5, __Y);
          if ((v11 & 0x80) == 0)
            break;
          v5 = (const float *)((char *)v5 + *((_QWORD *)this + 8));
          ++__Y;
          if (!--v7)
            return (v10 + 128) | 0xE00;
        }
LABEL_21:
        v15 = v11;
        exception = __cxa_allocate_exception(8uLL);
        *exception = v15;
        __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
    }
    v12 = &CVML_status_unknownOption;
    goto LABEL_10;
  }
  if (__N)
  {
    while (1)
    {
      v11 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v5, __Y);
      if ((v11 & 0x80) == 0)
        break;
      v5 = (const float *)((char *)v5 + *((_QWORD *)this + 8));
      ++__Y;
      if (!--v7)
        return (v10 + 128) | 0xE00;
    }
    goto LABEL_21;
  }
  return (v10 + 128) | 0xE00;
}

float homeai::mod::ImageDescriptorBufferFloat32::computeDistanceFrom(homeai::mod::ImageDescriptorBufferFloat32 *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  const float *DataForKthDescriptor;
  const float *v6;
  uint64_t v8;
  _QWORD *exception;
  float __C;

  if (*((_QWORD *)this + 9) != 1 || *((_QWORD *)a2 + 9) != 1)
  {
    v8 = 3708;
    goto LABEL_8;
  }
  DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
  v6 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a2, 0);
  __C = 0.0;
  v8 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, DataForKthDescriptor, v6, &__C);
  if ((v8 & 0x80) == 0)
  {
LABEL_8:
    exception = __cxa_allocate_exception(8uLL);
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  return __C;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(homeai::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, float *__C)
{
  uint64_t v5;
  int v6;
  float v7;
  uint64_t *v8;
  float __Ca;
  float v11;

  if (__A && a3)
  {
    v5 = 0;
    *__C = 0.0;
    v6 = *((_DWORD *)this + 26);
    switch(v6)
    {
      case 3:
        __Ca = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &__Ca, *((_QWORD *)this + 12));
        v7 = (float)(__Ca + 1.0) * 0.5;
        goto LABEL_11;
      case 2:
        v11 = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &v11, *((_QWORD *)this + 12));
        v7 = (float)((float)(v11 + 1.0) * -0.5) + 1.0;
        goto LABEL_11;
      case 1:
        vDSP_distancesq(__A, 1, a3, 1, __C, *((_QWORD *)this + 12));
        v7 = sqrtf(*__C);
LABEL_11:
        *__C = v7;
        return (v5 + 128) | 0xE00;
    }
    v8 = &CVML_status_unknownOption;
  }
  else
  {
    v8 = &CVML_status_unexpectedNullPointer;
  }
  v5 = *v8;
  return (v5 + 128) | 0xE00;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeSelfDistances@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  homeai::mod::ImageDescriptorBufferAbstract *v4;
  const float *DataForKthDescriptor;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  const float *v9;
  uint64_t v10;
  _QWORD *exception;

  v3 = *(_QWORD *)(this + 72);
  if ((int)v3 > 1)
  {
    v4 = (homeai::mod::ImageDescriptorBufferAbstract *)this;
    std::vector<float>::vector(a2, (uint64_t)(int)((v3 - 1) * v3 + (((int)v3 - 1) * (int)v3 < 0)) >> 1);
    DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, 0);
    v6 = 0;
    v7 = v3;
    for (i = 1; i != v7; ++i)
    {
      v9 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, i);
      this = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(v4, v9, DataForKthDescriptor, i, (float *)(*a2 + 4 * v6));
      if ((this & 0x80) == 0)
      {
        v10 = this;
        exception = __cxa_allocate_exception(8uLL);
        *exception = v10;
        __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
      }
      v6 += i;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_219D77E80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *homeai::mod::ImageDescriptorBufferFloat32::getRepresentative(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  vDSP_Length v19;
  vDSP_Length v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *exception;
  unint64_t v26;
  void *__p;
  void *v28;
  _QWORD *v29;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4 == 1)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (v6)
  }
  else
  {
    if (v4)
    {
      v10 = malloc_type_realloc(*(void **)(a1 + 112), 4 * v4, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 112) = v10;
      if (v10)
      {
        v11 = operator new(8uLL);
        __p = v11;
        *v11 = a3;
        v28 = v11 + 1;
        v29 = v11 + 1;
        v12 = *(_QWORD *)(a1 + 96);
        v13 = malloc_type_malloc(4 * v12, 0xDF253555uLL);
        if (!v13)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = 3707;
          __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
        }
        v14 = operator new();
        homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(v14, (_QWORD **)&__p, v13, 4 * v12, 1, 1);
        *(_QWORD *)v14 = &off_24DBEB530;
        *(_DWORD *)(v14 + 104) = 1;
        *(_QWORD *)(v14 + 112) = 0;
        *(_QWORD *)(v14 + 96) = v12 & 0x3FFFFFFFFFFFFFFFLL;
        if (*(_QWORD *)(a1 + 96))
        {
          v15 = 0;
          v16 = *(_QWORD *)(a1 + 72);
          v26 = v16 >> 1;
          v17 = (v16 - 1) >> 1;
          do
          {
            if (*(_QWORD *)(a1 + 72))
            {
              v18 = 0;
              v19 = 0;
              do
              {
                *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v19++) = *(_DWORD *)(homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)a1, v18 >> 32)+ 4 * v15);
                v20 = *(_QWORD *)(a1 + 72);
                v18 += 0x100000000;
              }
              while (v19 < v20);
            }
            else
            {
              v20 = 0;
            }
            if (a2 == 1)
            {
              vDSP_vsort(*(float **)(a1 + 112), v20, -1);
              *((float *)v13 + v15) = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 4 * v26)
                                            + *(float *)(*(_QWORD *)(a1 + 112) + 4 * v17))
                                    * 0.5;
            }
            else
            {
              if (a2 != 2)
              {
                v22 = __cxa_allocate_exception(8uLL);
                *v22 = 3703;
                __cxa_throw(v22, MEMORY[0x24BEDB7D0], 0);
              }
              vDSP_meanv(*(const float **)(a1 + 112), 1, (float *)v13 + v15, v20);
            }
            ++v15;
          }
          while (v15 < *(_QWORD *)(a1 + 96));
        }
        if (__p)
        {
          v28 = __p;
          operator delete(__p);
        }
        return (void *)v14;
      }
      v5 = &CVML_status_memoryAllocationError;
    }
    else
    {
      v5 = &CVML_status_internalError;
    }
    v21 = *v5 + 128;
    if ((v21 & 0x80) == 0)
    {
      v23 = v21 | 0xE00;
      v24 = __cxa_allocate_exception(8uLL);
      *v24 = v23;
      __cxa_throw(v24, MEMORY[0x24BEDB7D0], 0);
    }
  }
  return 0;
}

void sub_219D781A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void homeai::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(void **this)
{
  *this = &off_24DBEB530;
  free(this[14]);
  homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(this);
}

{
  *this = &off_24DBEB530;
  free(this[14]);
  homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(this);
  JUMPOUT(0x2207351BCLL);
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::createEmptyCopy(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
  uint64_t v2;

  v2 = operator new();
  homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract((homeai::mod::ImageDescriptorBufferAbstract *)v2);
  *(_QWORD *)v2 = &off_24DBEB530;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 96) = *((_QWORD *)this + 12);
  *(_DWORD *)(v2 + 104) = *((_DWORD *)this + 26);
  return v2;
}

void sub_219D78334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2207351BC](v1, 0x10B1C408DA78774);
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::createDeepCopy(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 16))(this);
  *(_BYTE *)(v2 + 88) = 1;
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  v3 = malloc_type_malloc(*((_QWORD *)this + 8) * *((_QWORD *)this + 9), 0xA64EA27DuLL);
  *(_QWORD *)(v2 + 56) = v3;
  v4 = *((_QWORD *)this + 9);
  *(_QWORD *)(v2 + 80) = v4;
  memcpy(v3, *((const void **)this + 7), *((_QWORD *)this + 8) * v4);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(v5, v6, v2 + 8);
    std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>((uint64_t *)(v2 + 32), *((_QWORD **)this + 4), (_QWORD *)this + 5);
  }
  return v2;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::print(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unint64_t v9;
  std::locale::id *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;
  std::locale v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Descriptor count = ", 19);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Descriptor length = ", 20);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  (*(void (**)(homeai::mod::ImageDescriptorBufferFloat32 *))(*(_QWORD *)this + 104))(this);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bytes", 6);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if (*((_QWORD *)this + 9))
  {
    v9 = 0;
    v10 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" = [", 4);
      if (*((int *)this + 24) >= 2)
      {
        v12 = 0;
        do
        {
          homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          ++v12;
        }
        while (v12 < *((_DWORD *)this + 24) - 1);
      }
      homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v23, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 9));
  }
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x24BEDB7F0];
  v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v20[0] = v17;
  v20[1] = MEMORY[0x24BEDB848] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x220735180](&v22);
}

void sub_219D7870C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::getDescriptorLengthInBytes(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
  return 4 * *((_QWORD *)this + 12);
}

int64x2_t homeai::mod::ImageDescriptorBufferAbstract::setToReferenceToKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, homeai::mod::ImageDescriptorBufferAbstract *a2, unint64_t a3)
{
  char *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t DataForKthDescriptor;
  uint64_t v23;
  int64x2_t result;
  uint64_t *v25;

  v6 = (char *)a2 + 8;
  *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1);
  v7 = (uint64_t **)((char *)a2 + 32);
  v8 = (_QWORD *)((char *)a2 + 40);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)a2 + 32, *((_QWORD **)a2 + 5));
  *((_QWORD *)v6 + 3) = v8;
  *((_QWORD *)v6 + 5) = 0;
  *v8 = 0;
  v9 = *((_QWORD *)this + 1);
  if (v9 != *((_QWORD *)this + 2))
  {
    v10 = *((_QWORD *)a2 + 3);
    v11 = (_QWORD *)*((_QWORD *)a2 + 2);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(_QWORD **)v6;
      v14 = ((uint64_t)v11 - *(_QWORD *)v6) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)a2 + 24, v17);
        v13 = (_QWORD *)*((_QWORD *)a2 + 1);
        v11 = (_QWORD *)*((_QWORD *)a2 + 2);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = *(_QWORD *)(v9 + 8 * a3);
      v12 = v19 + 8;
      while (v11 != v13)
      {
        v21 = *--v11;
        *((_QWORD *)v19 - 1) = v21;
        v19 -= 8;
      }
      *((_QWORD *)a2 + 1) = v19;
      *((_QWORD *)a2 + 2) = v12;
      *((_QWORD *)a2 + 3) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = *(_QWORD *)(v9 + 8 * a3);
      v12 = v11 + 1;
    }
    *((_QWORD *)a2 + 2) = v12;
    v25 = (uint64_t *)(*((_QWORD *)this + 1) + 8 * a3);
    *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, &v25)+ 10) = 0;
  }
  DataForKthDescriptor = homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a3);
  *((_BYTE *)a2 + 88) = 0;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)a2 + 7) = DataForKthDescriptor;
  *((_QWORD *)a2 + 8) = v23;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)((char *)a2 + 72) = result;
  return result;
}

void homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(void **this)
{
  void *v2;

  *this = off_24DBEB6E0;
  if (*((_BYTE *)this + 88))
    free(this[7]);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)(this + 4), this[5]);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,int> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,int> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_219D7905C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x220735180](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x220735180](a1 + 128);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2207350E4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2207350F0](v13);
  return a1;
}

void sub_219D79214(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2207350F0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x219D791F4);
}

void sub_219D7925C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_219D79390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t **std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_219D79580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_219D79638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t homeai::clustering::GreedyClusterer::GreedyClusterer(uint64_t this, float a2, float a3, float a4)
{
  *(_QWORD *)this = off_24DBEB5C0;
  *(_QWORD *)(this + 20) = 0x13F800000;
  *(_BYTE *)(this + 28) = 1;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(float *)(this + 8) = a2;
  *(float *)(this + 12) = a3;
  *(float *)(this + 16) = a4;
  return this;
}

void homeai::clustering::GreedyClusterer::~GreedyClusterer(homeai::clustering::GreedyClusterer *this)
{
  void **v1;

  *(_QWORD *)this = off_24DBEB5C0;
  v1 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24DBEB5C0;
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2207351BC](this, 0x10A1C40832DF375);
}

void homeai::clustering::GreedyClusterer::performClustering(homeai::clustering::GreedyClusterer *a1, _QWORD *a2, uint64_t a3)
{
  float *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  _QWORD *v26[2];
  uint64_t *v27;
  _QWORD *v28[2];
  uint64_t *v29;
  _QWORD *v30[2];
  uint64_t *v31;

  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  v29 = (uint64_t *)v30;
  v27 = (uint64_t *)v28;
  v28[0] = 0;
  v26[0] = 0;
  v26[1] = 0;
  v25 = (uint64_t *)v26;
  v6 = (float *)a2[7];
  v7 = a2[8];
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 104))(a2);
  homeai::clustering::GreedyClusterer::addDescriptors(a1, v6, (unint64_t)(int)v7 >> 2, (unint64_t)v8 >> 2, a2[9], &v23);
  v9 = *v23;
  v10 = v23[1];
  if (*v23 != v10)
  {
    do
    {
      std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(&v29, v30, v9, v9);
      ++v9;
    }
    while (v9 != v10);
    v11 = v23;
    if (v23[1] != *v23)
    {
      v12 = 0;
      do
      {
        v22 = 0;
        v22 = *(_QWORD *)(a2[1] + 8 * v12);
        v21 = (*v11)[v12];
        v13 = v21;
        v31 = &v21;
        v14 = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v27, (unint64_t *)&v21, (uint64_t)&std::piecewise_construct, &v31);
        v15 = operator new(0x18uLL);
        v15[2] = v22;
        v16 = v14[5];
        v14 += 5;
        *v15 = v16;
        v15[1] = v14;
        *(_QWORD *)(v16 + 8) = v15;
        *v14 = (uint64_t)v15;
        ++v14[2];
        v31 = &v22;
        std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v25, &v22, (uint64_t)&std::piecewise_construct, &v31)[5] = v13;
        ++v12;
        v11 = v23;
      }
      while (v12 < v23[1] - *v23);
    }
  }
  std::map<unsigned long,std::list<long long>>::map[abi:ne180100](v20, (uint64_t)&v27);
  homeai::clustering::GreedyClusterer::computeDeltaAfterUpdate((uint64_t)a1, a3, &v29, (uint64_t)v20);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)v20, (_QWORD *)v20[1]);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v25, v26[0]);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)&v27, v28[0]);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v29, v30[0]);
}

void sub_219D7A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)&a9, a10);
  std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a16, a17);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::addDescriptors(homeai::clustering::GreedyClusterer *this@<X0>, float *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  int v16;
  const float *v17;
  __n128 v18;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  double v29;
  float *v30;
  double v31;
  float v32;
  float v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  void *exception;
  int v38;
  __int128 __C;
  unint64_t v40;
  float *__B;
  unint64_t v42;
  unsigned int v43;

  v43 = a4;
  v42 = a5;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22073509C](exception, "Descriptor vectors nil");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::allocate_shared[abi:ne180100]<std::vector<long long>,std::allocator<std::vector<long long>>,unsigned long &,void>(&v42, a6);
  if (v42)
  {
    v10 = 0;
    v11 = a3;
    do
    {
      __B = &a2[v10 * v11];
      v12 = *((_QWORD *)this + 4);
      if (*((_QWORD *)this + 5) == v12)
      {
        v20 = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0.0;
        v16 = -1;
        do
        {
          v17 = *(const float **)(*(_QWORD *)(v12 + v13) + 16);
          LODWORD(__C) = 0;
          vDSP_dotpr(v17, 1, __B, 1, (float *)&__C, 0x80uLL);
          v18.n128_f32[0] = 1.0 - *(float *)&__C;
          if ((float)(1.0 - *(float *)&__C) < *((float *)this + 2) && (v18.n128_f32[0] < v15 || v16 == -1))
          {
            v15 = 1.0 - *(float *)&__C;
            v16 = v14;
          }
          ++v14;
          v12 = *((_QWORD *)this + 4);
          v20 = (*((_QWORD *)this + 5) - v12) >> 4;
          v13 += 16;
        }
        while (v20 > v14);
        if (v16 != -1)
        {
          v21 = (uint64_t *)(v12 + 16 * v16);
          v22 = *v21;
          v23 = (std::__shared_weak_count *)v21[1];
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v26 = *(_DWORD *)(v22 + 8);
          v27 = v43;
          if ((int)v43 >= 1)
          {
            v28 = *(float **)(v22 + 16);
            v29 = (double)v26 + 1.0;
            v18.n128_f64[0] = (double)v26 / v29;
            v30 = __B;
            v31 = 1.0 / v29;
            do
            {
              v32 = *v30++;
              v33 = v31 * v32 + *v28 * v18.n128_f64[0];
              *v28++ = v33;
              --v27;
            }
            while (v27);
          }
          *(_DWORD *)(v22 + 8) = v26 + 1;
          *(_QWORD *)(*(_QWORD *)*a6 + 8 * v10) = *(_QWORD *)v22;
          if (!v23)
            goto LABEL_30;
          v34 = (unint64_t *)&v23->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          goto LABEL_28;
        }
      }
      v40 = v20;
      v38 = 1;
      std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer::cluster_t,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,int &,float *&,long long &,int,void>((int *)&v43, (const void **)&__B, &v40, &v38, &__C);
      std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::push_back[abi:ne180100]((char **)this + 4, &__C);
      *(_QWORD *)(*(_QWORD *)*a6 + 8 * v10) = v40;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&__C + 1);
      if (*((_QWORD *)&__C + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&__C + 1) + 8);
        do
          v35 = __ldaxr(v36);
        while (__stlxr(v35 - 1, v36));
LABEL_28:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v18);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
LABEL_30:
      ++v10;
    }
    while (v42 > v10);
  }
}

void sub_219D7A764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::computeDeltaAfterUpdate(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  uint64_t v49[3];
  uint64_t *v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;

  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DBEB690;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v54 = (uint64_t *)&v8[1];
  v55 = (uint64_t *)v8;
  v53[0] = (uint64_t)&v8[1];
  v53[1] = (uint64_t)v8;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  homeai::clustering::GreedyClusterer::computeMergePairs(a1, a3, a3, v53, 0);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12 = (std::__shared_weak_count *)v55;
  v50[0] = v54;
  v50[1] = v55;
  if (v55)
  {
    v13 = (unint64_t *)(v55 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::map<unsigned long,std::list<long long>>::map[abi:ne180100](v49, a4);
  homeai::clustering::GreedyClusterer::getClustersFromMergePairs(a1, v50, (uint64_t)v49, &v51);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)v49, (_QWORD *)v49[1]);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = (uint64_t *)v54[1];
  v18 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *v54) >> 3));
  if (v17 == (uint64_t *)*v54)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(*v54, v17, (uint64_t)&v56, v19, 1);
  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  v20 = v51;
  v21 = v52;
  if (v51 != v52)
  {
    do
    {
      v22 = *(uint64_t **)v20;
      v23 = *(uint64_t **)(v20 + 8);
      if (v23 != *(uint64_t **)v20)
      {
        v24 = *v22;
        v25 = *(uint64_t **)v20;
        do
        {
          v27 = *v25++;
          v26 = v27;
          if (v27 < v24)
            v24 = v26;
        }
        while (v25 != v23);
        do
        {
          v56 = v22;
          std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v47, v22++, (uint64_t)&std::piecewise_construct, &v56)[5] = v24;
        }
        while (v22 != v23);
      }
      v20 += 24;
    }
    while (v20 != v21);
    v28 = v47;
    if (v47 != (uint64_t *)v48)
    {
      v29 = (_QWORD *)(a2 + 16);
      v30 = *(uint64_t **)(a2 + 8);
      do
      {
        v32 = v28[4];
        v31 = v28[5];
        if ((unint64_t)v30 >= *v29)
        {
          v33 = *(uint64_t **)a2;
          v34 = ((uint64_t)v30 - *(_QWORD *)a2) >> 4;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = *v29 - (_QWORD)v33;
          if (v36 >> 3 > v35)
            v35 = v36 >> 3;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(a2 + 16, v37);
            v33 = *(uint64_t **)a2;
            v30 = *(uint64_t **)(a2 + 8);
          }
          else
          {
            v38 = 0;
          }
          v39 = (uint64_t *)&v38[16 * v34];
          *v39 = v32;
          v39[1] = v31;
          v40 = v39;
          if (v30 != v33)
          {
            do
            {
              *((_OWORD *)v40 - 1) = *((_OWORD *)v30 - 1);
              v40 -= 2;
              v30 -= 2;
            }
            while (v30 != v33);
            v33 = *(uint64_t **)a2;
          }
          v30 = v39 + 2;
          *(_QWORD *)a2 = v40;
          *(_QWORD *)(a2 + 8) = v39 + 2;
          *(_QWORD *)(a2 + 16) = &v38[16 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v30 = v32;
          v30[1] = v31;
          v30 += 2;
        }
        *(_QWORD *)(a2 + 8) = v30;
        v41 = (uint64_t *)v28[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (uint64_t *)v28[2];
            v43 = *v42 == (_QWORD)v28;
            v28 = v42;
          }
          while (!v43);
        }
        v28 = v42;
      }
      while (v42 != (uint64_t *)v48);
    }
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v47, v48[0]);
  v47 = &v51;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v44 = (std::__shared_weak_count *)v55;
  if (v55)
  {
    v45 = (unint64_t *)(v55 + 1);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_219D7AB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy((va_list)v3, va1);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void homeai::clustering::GreedyClusterer::computeMergePairs(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, int a5)
{
  _QWORD *v5;
  uint64_t *v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const float *v17;
  const float *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  float __C;

  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
  {
    v5 = (_QWORD *)*a2;
    v48 = a2 + 1;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      v7 = a4;
      v9 = a3 + 1;
      do
      {
        v10 = (_QWORD *)*a3;
        if ((_QWORD *)*a3 != v9)
        {
          v11 = v5[4];
          do
          {
            v12 = v10[4];
            v13 = v12 <= v11 && a5 == 0;
            if (!v13)
            {
              v14 = *(_QWORD *)(a1 + 32);
              v15 = 16 * v12;
              v16 = *(_QWORD *)(v14 + 16 * v12);
              if (*(_DWORD *)(v16 + 8))
              {
                v17 = *(const float **)(*(_QWORD *)(v14 + 16 * v11) + 16);
                v18 = *(const float **)(v16 + 16);
                __C = 0.0;
                vDSP_dotpr(v17, 1, v18, 1, &__C, 0x80uLL);
                v19 = 1.0 - __C;
                if ((float)(1.0 - __C) < *(float *)(a1 + 12))
                {
                  v20 = *(_QWORD *)(a1 + 32);
                  v21 = **(_QWORD **)(v20 + 16 * v11);
                  v22 = **(_QWORD **)(v20 + v15);
                  if (v21 >= v22)
                    v23 = v22;
                  else
                    v23 = v21;
                  if (v21 <= v22)
                    v24 = v22;
                  else
                    v24 = v21;
                  v25 = (void **)*v7;
                  v26 = (char *)v25[1];
                  v27 = (char *)v25[2];
                  if (v26 >= v27)
                  {
                    v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (_BYTE *)*v25) >> 3);
                    v30 = v29 + 1;
                    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v31 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (_BYTE *)*v25) >> 3);
                    if (2 * v31 > v30)
                      v30 = 2 * v31;
                    if (v31 >= 0x555555555555555)
                      v32 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v32 = v30;
                    if (v32)
                      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>((uint64_t)(v25 + 2), v32);
                    else
                      v33 = 0;
                    v34 = &v33[24 * v29];
                    *(_QWORD *)v34 = v23;
                    *((_QWORD *)v34 + 1) = v24;
                    *((float *)v34 + 4) = v19;
                    v36 = (char *)*v25;
                    v35 = (char *)v25[1];
                    v37 = v34;
                    if (v35 != *v25)
                    {
                      do
                      {
                        v38 = *(_OWORD *)(v35 - 24);
                        *((_QWORD *)v37 - 1) = *((_QWORD *)v35 - 1);
                        *(_OWORD *)(v37 - 24) = v38;
                        v37 -= 24;
                        v35 -= 24;
                      }
                      while (v35 != v36);
                      v35 = (char *)*v25;
                    }
                    v28 = v34 + 24;
                    *v25 = v37;
                    v25[1] = v34 + 24;
                    v25[2] = &v33[24 * v32];
                    if (v35)
                      operator delete(v35);
                  }
                  else
                  {
                    *(_QWORD *)v26 = v23;
                    *((_QWORD *)v26 + 1) = v24;
                    v28 = v26 + 24;
                    *((float *)v26 + 4) = v19;
                  }
                  v25[1] = v28;
                  v7 = a4;
                  v39 = *(_QWORD *)*a4;
                  v40 = *(_QWORD *)(*a4 + 8);
                  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v39) >> 3);
                  if (v41 >= 0x86471)
                  {
                    v42 = 126 - 2 * __clz(v41);
                    if (v40 == v39)
                      v43 = 0;
                    else
                      v43 = v42;
                    std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(v39, v40, v43, 1);
                    std::vector<std::tuple<long long,long long,float>>::resize(*a4, 0x7A120uLL);
                  }
                }
              }
            }
            v44 = (_QWORD *)v10[1];
            if (v44)
            {
              do
              {
                v45 = v44;
                v44 = (_QWORD *)*v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                v45 = (_QWORD *)v10[2];
                v13 = *v45 == (_QWORD)v10;
                v10 = v45;
              }
              while (!v13);
            }
            v10 = v45;
          }
          while (v45 != v9);
        }
        v46 = (_QWORD *)v5[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (_QWORD *)v5[2];
            v13 = *v47 == (_QWORD)v5;
            v5 = v47;
          }
          while (!v13);
        }
        v5 = v47;
      }
      while (v47 != v48);
    }
  }
}

void homeai::clustering::GreedyClusterer::getClustersFromMergePairs(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  char *v48;
  char *v49;
  void *v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t *v53[2];
  uint64_t v54;
  uint64_t v55;

  v5 = a2[1];
  v53[0] = *a2;
  v53[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  homeai::clustering::GreedyClusterer::getConnectedComponents(a1, v53, &v54);
  if (v5)
  {
    v8 = (unint64_t *)(v5 + 1);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(uint64_t *))(*v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v10 = v54;
  v44 = v55;
  if (v54 != v55)
  {
    v11 = (_QWORD *)(a3 + 8);
    do
    {
      v50 = 0;
      v51 = 0;
      v52 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v50, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
      __p = 0;
      v48 = 0;
      v49 = 0;
      v12 = (unint64_t *)v50;
      if (v50 == v51)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          if (*v11)
          {
            v14 = *v12;
            v15 = (_QWORD *)(a3 + 8);
            v16 = (_QWORD *)*v11;
            do
            {
              v17 = v16[4];
              v18 = v17 >= v14;
              if (v17 >= v14)
                v19 = v16;
              else
                v19 = v16 + 1;
              if (v18)
                v15 = v16;
              v16 = (_QWORD *)*v19;
            }
            while (*v19);
            if (v15 != v11 && v14 >= v15[4])
              v13 += v15[7];
          }
          ++v12;
        }
        while (v12 != v51);
      }
      std::vector<long long>::reserve(&__p, v13);
      v45 = v10;
      v20 = (unint64_t *)v50;
      v21 = v51;
      while (v20 != v21)
      {
        v22 = (_QWORD *)*v11;
        if (*v11)
        {
          v23 = *v20;
          v24 = (_QWORD *)(a3 + 8);
          do
          {
            v25 = v22[4];
            v26 = v25 >= v23;
            if (v25 >= v23)
              v27 = v22;
            else
              v27 = v22 + 1;
            if (v26)
              v24 = v22;
            v22 = (_QWORD *)*v27;
          }
          while (*v27);
          if (v24 != v11 && v23 >= v24[4])
          {
            v28 = v24 + 5;
            v29 = (_QWORD *)v24[6];
            if (v29 != v24 + 5)
            {
              v30 = v48;
              do
              {
                v31 = v29[2];
                if (v30 >= v49)
                {
                  v33 = (char *)__p;
                  v34 = (v30 - (_BYTE *)__p) >> 3;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v36 = v49 - (_BYTE *)__p;
                  if ((v49 - (_BYTE *)__p) >> 2 > v35)
                    v35 = v36 >> 2;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                    v37 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)&v49, v37);
                    v33 = (char *)__p;
                    v30 = v48;
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = &v38[8 * v34];
                  *(_QWORD *)v39 = v31;
                  v32 = v39 + 8;
                  while (v30 != v33)
                  {
                    v40 = *((_QWORD *)v30 - 1);
                    v30 -= 8;
                    *((_QWORD *)v39 - 1) = v40;
                    v39 -= 8;
                  }
                  __p = v39;
                  v48 = v32;
                  v49 = &v38[8 * v37];
                  if (v33)
                    operator delete(v33);
                }
                else
                {
                  *(_QWORD *)v30 = v31;
                  v32 = v30 + 8;
                }
                v48 = v32;
                v29 = (_QWORD *)v29[1];
                v30 = v32;
              }
              while (v29 != v28);
            }
          }
        }
        ++v20;
      }
      v41 = a4[1];
      if (v41 >= a4[2])
      {
        v43 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a4, (uint64_t)&__p);
        v42 = v45;
      }
      else
      {
        std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a4, (uint64_t)&__p);
        v42 = v45;
        v43 = v41 + 24;
      }
      a4[1] = v43;
      if (__p)
      {
        v48 = (char *)__p;
        operator delete(__p);
      }
      if (v50)
      {
        v51 = (unint64_t *)v50;
        operator delete(v50);
      }
      v10 = v42 + 24;
    }
    while (v10 != v44);
  }
  v50 = &v54;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
}

void sub_219D7B2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<long long,long long,float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<long long,long long,float>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t homeai::clustering::GreedyClusterer::getConnectedComponents@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t *v104;
  uint64_t *v105;
  char *v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t *v127;
  _QWORD *v128;
  _QWORD *v129;
  char v130;
  _QWORD *v131;
  void **i;
  void **v133;
  _QWORD *v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  void **v146;
  void *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  __int128 v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  __int128 v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *p_shared_owners;
  unint64_t v178;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  char **v183;
  uint64_t v184;
  int v185;
  uint64_t **v186[2];
  unint64_t v187;
  unint64_t v188;
  void *__p;
  unint64_t *v190;
  uint64_t v191;
  void *p_p;
  unint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200[4];
  int v201;
  _QWORD *v202[4];
  int v203;
  char *v204;
  std::__shared_weak_count *v205;
  _BYTE v206[32];
  int v207;
  uint64_t *v208[3];

  if ((v6 & 1) == 0
  {
    homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED = *(_DWORD *)(a1 + 16);
  }
  memset(v206, 0, sizeof(v206));
  v207 = 1065353216;
  v8 = (unint64_t *)**a2;
  v7 = (unint64_t *)(*a2)[1];
  if (v8 == v7)
  {
    v11 = **a2;
  }
  else
  {
    do
    {
      v9 = (void *)v8[1];
      v200[0] = *v8;
      p_p = v9;
      v202[0] = v200;
      v10 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v206, v200, (uint64_t)&std::piecewise_construct, v202);
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)(v10 + 3), (unint64_t *)&p_p, &p_p);
      v8 += 3;
    }
    while (v8 != v7);
    v11 = **a2;
    v8 = (unint64_t *)(*a2)[1];
  }
  v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v11) >> 3));
  if (v8 == (unint64_t *)v11)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(v11, (unint64_t)v8, v13, 1);
  v14 = (char *)operator new(0x30uLL);
  v180 = a3;
  v181 = a1;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &unk_24DBEB690;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 3) = 0;
  v15 = (uint64_t **)(v14 + 24);
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v204 = v14 + 24;
  v205 = (std::__shared_weak_count *)v14;
  memset(v202, 0, sizeof(v202));
  v203 = 1065353216;
  memset(v200, 0, sizeof(v200));
  v201 = 1065353216;
  v199 = 0;
  srand(0x7C0u);
  v17 = **a2;
  v16 = (*a2)[1];
  if (v17 != v16)
  {
    v183 = (char **)(v14 + 24);
    v184 = (uint64_t)(v14 + 40);
    v182 = (*a2)[1];
    while (1)
    {
      v19 = *(_QWORD *)v17;
      v18 = *(_QWORD *)(v17 + 8);
      v20 = *(float *)(v17 + 16);
      v185 = *(_DWORD *)(v17 + 20);
      v197 = v18;
      v198 = v19;
      v21 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v200, &v198);
      v22 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v200, &v197);
      if (v21)
      {
        v23 = v21[3];
        if (!v22)
          goto LABEL_15;
      }
      else
      {
        v23 = -1;
        if (!v22)
        {
LABEL_15:
          v24 = -1;
          goto LABEL_16;
        }
      }
      v24 = v22[3];
LABEL_16:
      if (v23 == -1 && v24 == -1)
      {
        p_p = &v199;
        v25 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v199, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        v26 = v25;
        v27 = (char *)v25[4];
        v28 = (uint64_t)(v25 + 5);
        v29 = v25[5];
        if ((unint64_t)v27 >= v29)
        {
          v54 = (char *)v25[3];
          v55 = (v27 - v54) >> 3;
          if ((unint64_t)(v55 + 1) >> 61)
            goto LABEL_208;
          v56 = v29 - (_QWORD)v54;
          v57 = (uint64_t)(v29 - (_QWORD)v54) >> 2;
          if (v57 <= v55 + 1)
            v57 = v55 + 1;
          if (v56 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v28, v58);
            v54 = (char *)v26[3];
            v27 = (char *)v26[4];
          }
          else
          {
            v59 = 0;
          }
          v78 = &v59[8 * v55];
          *(_QWORD *)v78 = v198;
          v30 = v78 + 8;
          while (v27 != v54)
          {
            v79 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v78 - 1) = v79;
            v78 -= 8;
          }
          v26[3] = v78;
          v26[4] = v30;
          v26[5] = &v59[8 * v58];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_QWORD *)v27 = v198;
          v30 = v27 + 8;
        }
        v26[4] = v30;
        p_p = &v199;
        v80 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v199, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        v81 = v80;
        v82 = (char *)v80[4];
        v83 = (uint64_t)(v80 + 5);
        v84 = v80[5];
        if ((unint64_t)v82 >= v84)
        {
          v86 = (char *)v80[3];
          v87 = (v82 - v86) >> 3;
          if ((unint64_t)(v87 + 1) >> 61)
LABEL_208:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v88 = v84 - (_QWORD)v86;
          v89 = (uint64_t)(v84 - (_QWORD)v86) >> 2;
          if (v89 <= v87 + 1)
            v89 = v87 + 1;
          if (v88 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (v90)
          {
            v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v83, v90);
            v86 = (char *)v81[3];
            v82 = (char *)v81[4];
          }
          else
          {
            v91 = 0;
          }
          v92 = &v91[8 * v87];
          *(_QWORD *)v92 = v197;
          v85 = v92 + 8;
          while (v82 != v86)
          {
            v93 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *((_QWORD *)v92 - 1) = v93;
            v92 -= 8;
          }
          v81[3] = v92;
          v81[4] = v85;
          v81[5] = &v91[8 * v90];
          if (v86)
            operator delete(v86);
        }
        else
        {
          *(_QWORD *)v82 = v197;
          v85 = v82 + 8;
        }
        v81[4] = v85;
        v94 = v199;
        p_p = &v198;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v198, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3] = v94;
        v95 = v199;
        p_p = &v197;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v197, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3] = v95;
        ++v199;
        v97 = *((_QWORD *)v14 + 4);
        v96 = *((_QWORD *)v14 + 5);
        if (v97 >= v96)
        {
          v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)*v15) >> 3);
          v99 = v98 + 1;
          if (v98 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (_QWORD)*v15) >> 3);
          if (2 * v100 > v99)
            v99 = 2 * v100;
          if (v100 >= 0x555555555555555)
            v101 = 0xAAAAAAAAAAAAAAALL;
          else
            v101 = v99;
          if (v101)
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v184, v101);
          else
            v102 = 0;
          v103 = &v102[24 * v98];
          *(_QWORD *)v103 = v19;
          *((_QWORD *)v103 + 1) = v18;
          *((float *)v103 + 4) = v20;
          *((_DWORD *)v103 + 5) = v185;
          v105 = (uint64_t *)*((_QWORD *)v14 + 3);
          v104 = (uint64_t *)*((_QWORD *)v14 + 4);
          v106 = v103;
          if (v104 != v105)
          {
            do
            {
              v107 = *(_OWORD *)(v104 - 3);
              *((_QWORD *)v106 - 1) = *(v104 - 1);
              *(_OWORD *)(v106 - 24) = v107;
              v106 -= 24;
              v104 -= 3;
            }
            while (v104 != v105);
            goto LABEL_179;
          }
          goto LABEL_180;
        }
      }
      else if (v23 == -1)
      {
        __p = 0;
        p_p = &v197;
        __p = (void *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v197, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
        p_p = &__p;
        v60 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        v61 = v60;
        v62 = (char *)v60[4];
        v63 = (uint64_t)(v60 + 5);
        v64 = v60[5];
        if ((unint64_t)v62 >= v64)
        {
          v72 = (char *)v60[3];
          v73 = (v62 - v72) >> 3;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v74 = v64 - (_QWORD)v72;
          v75 = (uint64_t)(v64 - (_QWORD)v72) >> 2;
          if (v75 <= v73 + 1)
            v75 = v73 + 1;
          if (v74 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76)
          {
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v63, v76);
            v72 = (char *)v61[3];
            v62 = (char *)v61[4];
          }
          else
          {
            v77 = 0;
          }
          v114 = &v77[8 * v73];
          *(_QWORD *)v114 = v198;
          v65 = v114 + 8;
          while (v62 != v72)
          {
            v115 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)v114 - 1) = v115;
            v114 -= 8;
          }
          v61[3] = v114;
          v61[4] = v65;
          v61[5] = &v77[8 * v76];
          if (v72)
            operator delete(v72);
        }
        else
        {
          *(_QWORD *)v62 = v198;
          v65 = v62 + 8;
        }
        v61[4] = v65;
        v116 = __p;
        p_p = &v198;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v198, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3] = v116;
        v97 = *((_QWORD *)v14 + 4);
        v117 = *((_QWORD *)v14 + 5);
        if (v97 >= v117)
        {
          v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)*v15) >> 3);
          v119 = v118 + 1;
          if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - (_QWORD)*v15) >> 3);
          if (2 * v120 > v119)
            v119 = 2 * v120;
          if (v120 >= 0x555555555555555)
            v101 = 0xAAAAAAAAAAAAAAALL;
          else
            v101 = v119;
          if (v101)
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v184, v101);
          else
            v102 = 0;
          v103 = &v102[24 * v118];
          *(_QWORD *)v103 = v19;
          *((_QWORD *)v103 + 1) = v18;
          *((float *)v103 + 4) = v20;
          *((_DWORD *)v103 + 5) = v185;
          v121 = (uint64_t *)*((_QWORD *)v14 + 3);
          v104 = (uint64_t *)*((_QWORD *)v14 + 4);
          v106 = v103;
          if (v104 != v121)
          {
            do
            {
              v122 = *(_OWORD *)(v104 - 3);
              *((_QWORD *)v106 - 1) = *(v104 - 1);
              *(_OWORD *)(v106 - 24) = v122;
              v106 -= 24;
              v104 -= 3;
            }
            while (v104 != v121);
LABEL_179:
            v104 = *v15;
          }
LABEL_180:
          v161 = v103 + 24;
          *((_QWORD *)v14 + 3) = v106;
          *((_QWORD *)v14 + 4) = v103 + 24;
          *((_QWORD *)v14 + 5) = &v102[24 * v101];
          if (v104)
            operator delete(v104);
          goto LABEL_182;
        }
      }
      else
      {
        if (v24 != -1)
        {
          v196 = 0;
          p_p = &v198;
          v31 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v198, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
          v195 = 0;
          v196 = v31;
          p_p = &v197;
          v195 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v197, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
          if (v196 != v195)
          {
            p_p = &v196;
            v32 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v196, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
            v34 = v32[3];
            v33 = v32[4];
            p_p = &v195;
            v35 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v195, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
            if (v20 <= 0.0)
              goto LABEL_132;
            v37 = v35[3];
            v36 = v35[4];
            v38 = *(float *)&homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED;
            __p = &v196;
            v39 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v196, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            v193 = 0;
            v194 = 0;
            p_p = 0;
            std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&p_p, (const void *)v39[3], v39[4], (uint64_t)(v39[4] - v39[3]) >> 3);
            v208[0] = (uint64_t *)&v195;
            v40 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v195, (uint64_t)&std::piecewise_construct, v208);
            v190 = 0;
            v191 = 0;
            __p = 0;
            std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, (const void *)v40[3], v40[4], (uint64_t)(v40[4] - v40[3]) >> 3);
            v41 = (unint64_t)(float)((float)(v38 * (float)(unint64_t)((v33 - v34) >> 3))
                                          * (float)(unint64_t)((v36 - v37) >> 3));
            if (v41 < 0x32)
            {
              v123 = (unint64_t *)p_p;
              v124 = v193;
              if (p_p == v193)
              {
LABEL_126:
                v130 = 1;
              }
              else
              {
                v125 = 0;
                do
                {
                  v188 = 0;
                  v188 = *v123;
                  v126 = (unint64_t *)__p;
                  v127 = v190;
                  while (v126 != v127)
                  {
                    v187 = 0;
                    v187 = *v126;
                    v208[0] = (uint64_t *)&v188;
                    v128 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v206, &v188, (uint64_t)&std::piecewise_construct, v208);
                    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v128 + 3, &v187)|| (v208[0] = (uint64_t *)&v187, v129 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v206, &v187, (uint64_t)&std::piecewise_construct, v208), std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v129 + 3, &v188)))
                    {
                      if (++v125 >= v41)
                        goto LABEL_125;
                    }
                    ++v126;
                  }
                  ++v123;
                  v130 = 1;
                }
                while (v123 != v124);
              }
            }
            else
            {
              v42 = 0;
              v43 = (unint64_t)(float)(*(float *)&homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED
                                            * 50.0);
              v44 = ((char *)v193 - (_BYTE *)p_p) >> 3;
              v45 = ((char *)v190 - (_BYTE *)__p) >> 3;
              v46 = 50;
              while (1)
              {
                v47 = rand();
                v48 = rand();
                v49 = v47 % v44;
                v188 = 0;
                if (v49 >= ((char *)v193 - (_BYTE *)p_p) >> 3)
                  std::vector<long long>::__throw_out_of_range[abi:ne180100]();
                v50 = v48 % v45;
                v51 = *((_QWORD *)p_p + v49);
                v187 = 0;
                v188 = v51;
                if (v50 >= ((char *)v190 - (_BYTE *)__p) >> 3)
                  std::vector<long long>::__throw_out_of_range[abi:ne180100]();
                v187 = *((_QWORD *)__p + v50);
                v208[0] = (uint64_t *)&v188;
                v52 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v206, &v188, (uint64_t)&std::piecewise_construct, v208);
                if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v52 + 3, &v187)|| (v208[0] = (uint64_t *)&v187, v53 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v206, &v187, (uint64_t)&std::piecewise_construct, v208), std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v53 + 3, &v188)))
                {
                  if (++v42 >= v43)
                    break;
                }
                if (!--v46)
                  goto LABEL_126;
              }
LABEL_125:
              v130 = 0;
            }
            if (__p)
            {
              v190 = (unint64_t *)__p;
              operator delete(__p);
            }
            v16 = v182;
            v15 = (uint64_t **)(v14 + 24);
            if (p_p)
            {
              v193 = (unint64_t *)p_p;
              operator delete(p_p);
            }
            if ((v130 & 1) == 0)
            {
LABEL_132:
              p_p = &v195;
              v131 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v195, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
              v133 = (void **)v131[3];
              for (i = (void **)v131[4]; v133 != i; ++v133)
              {
                __p = 0;
                __p = *v133;
                p_p = &v196;
                v134 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, &v196, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
                v135 = v134;
                v136 = (char *)v134[4];
                v137 = (uint64_t)(v134 + 5);
                v138 = v134[5];
                if ((unint64_t)v136 >= v138)
                {
                  v140 = (char *)v134[3];
                  v141 = (v136 - v140) >> 3;
                  if ((unint64_t)(v141 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v142 = v138 - (_QWORD)v140;
                  v143 = (uint64_t)(v138 - (_QWORD)v140) >> 2;
                  if (v143 <= v141 + 1)
                    v143 = v141 + 1;
                  if (v142 >= 0x7FFFFFFFFFFFFFF8)
                    v144 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v144 = v143;
                  if (v144)
                  {
                    v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v137, v144);
                    v140 = (char *)v135[3];
                    v136 = (char *)v135[4];
                  }
                  else
                  {
                    v145 = 0;
                  }
                  v146 = (void **)&v145[8 * v141];
                  *v146 = __p;
                  v139 = v146 + 1;
                  while (v136 != v140)
                  {
                    v147 = (void *)*((_QWORD *)v136 - 1);
                    v136 -= 8;
                    *--v146 = v147;
                  }
                  v135[3] = v146;
                  v135[4] = v139;
                  v135[5] = &v145[8 * v144];
                  if (v140)
                    operator delete(v140);
                }
                else
                {
                  *(_QWORD *)v136 = __p;
                  v139 = v136 + 8;
                }
                v135[4] = v139;
                v148 = v196;
                p_p = &__p;
                std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3] = v148;
              }
              std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__erase_unique<long long>(v202, &v195);
              v16 = v182;
              v15 = (uint64_t **)(v14 + 24);
              v150 = *((_QWORD *)v14 + 4);
              v149 = *((_QWORD *)v14 + 5);
              if (v150 >= v149)
              {
                v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - (_QWORD)*v183) >> 3);
                v153 = v152 + 1;
                if (v152 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (_QWORD)*v183) >> 3);
                if (2 * v154 > v153)
                  v153 = 2 * v154;
                if (v154 >= 0x555555555555555)
                  v155 = 0xAAAAAAAAAAAAAAALL;
                else
                  v155 = v153;
                if (v155)
                  v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v184, v155);
                else
                  v156 = 0;
                v167 = &v156[24 * v152];
                *(_QWORD *)v167 = v19;
                *((_QWORD *)v167 + 1) = v18;
                *((float *)v167 + 4) = v20;
                *((_DWORD *)v167 + 5) = v185;
                v169 = (char *)*((_QWORD *)v14 + 3);
                v168 = (char *)*((_QWORD *)v14 + 4);
                v170 = v167;
                if (v168 != v169)
                {
                  do
                  {
                    v171 = *(_OWORD *)(v168 - 24);
                    *((_QWORD *)v170 - 1) = *((_QWORD *)v168 - 1);
                    *(_OWORD *)(v170 - 24) = v171;
                    v170 -= 24;
                    v168 -= 24;
                  }
                  while (v168 != v169);
                  v168 = *v183;
                }
                v151 = v167 + 24;
                *((_QWORD *)v14 + 3) = v170;
                *((_QWORD *)v14 + 4) = v167 + 24;
                *((_QWORD *)v14 + 5) = &v156[24 * v155];
                if (v168)
                  operator delete(v168);
              }
              else
              {
                *(_QWORD *)v150 = v19;
                *(_QWORD *)(v150 + 8) = v18;
                *(float *)(v150 + 16) = v20;
                v151 = (char *)(v150 + 24);
                *(_DWORD *)(v150 + 20) = v185;
              }
              *((_QWORD *)v14 + 4) = v151;
            }
          }
          goto LABEL_183;
        }
        __p = 0;
        p_p = &v198;
        __p = (void *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v198, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
        p_p = &__p;
        v66 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v202, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        v67 = v66;
        v68 = (char *)v66[4];
        v69 = (uint64_t)(v66 + 5);
        v70 = v66[5];
        if ((unint64_t)v68 >= v70)
        {
          v108 = (char *)v66[3];
          v109 = (v68 - v108) >> 3;
          if ((unint64_t)(v109 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v110 = v70 - (_QWORD)v108;
          v111 = (uint64_t)(v70 - (_QWORD)v108) >> 2;
          if (v111 <= v109 + 1)
            v111 = v109 + 1;
          if (v110 >= 0x7FFFFFFFFFFFFFF8)
            v112 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v112 = v111;
          if (v112)
          {
            v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v69, v112);
            v108 = (char *)v67[3];
            v68 = (char *)v67[4];
          }
          else
          {
            v113 = 0;
          }
          v157 = &v113[8 * v109];
          *(_QWORD *)v157 = v197;
          v71 = v157 + 8;
          while (v68 != v108)
          {
            v158 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *((_QWORD *)v157 - 1) = v158;
            v157 -= 8;
          }
          v67[3] = v157;
          v67[4] = v71;
          v67[5] = &v113[8 * v112];
          if (v108)
            operator delete(v108);
        }
        else
        {
          *(_QWORD *)v68 = v197;
          v71 = v68 + 8;
        }
        v67[4] = v71;
        v159 = __p;
        p_p = &v197;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v200, &v197, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3] = v159;
        v97 = *((_QWORD *)v14 + 4);
        v160 = *((_QWORD *)v14 + 5);
        if (v97 >= v160)
        {
          v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)*v15) >> 3);
          v163 = v162 + 1;
          if (v162 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)*v15) >> 3);
          if (2 * v164 > v163)
            v163 = 2 * v164;
          if (v164 >= 0x555555555555555)
            v101 = 0xAAAAAAAAAAAAAAALL;
          else
            v101 = v163;
          if (v101)
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v184, v101);
          else
            v102 = 0;
          v103 = &v102[24 * v162];
          *(_QWORD *)v103 = v19;
          *((_QWORD *)v103 + 1) = v18;
          *((float *)v103 + 4) = v20;
          *((_DWORD *)v103 + 5) = v185;
          v165 = (uint64_t *)*((_QWORD *)v14 + 3);
          v104 = (uint64_t *)*((_QWORD *)v14 + 4);
          v106 = v103;
          if (v104 != v165)
          {
            do
            {
              v166 = *(_OWORD *)(v104 - 3);
              *((_QWORD *)v106 - 1) = *(v104 - 1);
              *(_OWORD *)(v106 - 24) = v166;
              v106 -= 24;
              v104 -= 3;
            }
            while (v104 != v165);
            goto LABEL_179;
          }
          goto LABEL_180;
        }
      }
      *(_QWORD *)v97 = v19;
      *(_QWORD *)(v97 + 8) = v18;
      *(float *)(v97 + 16) = v20;
      v161 = (char *)(v97 + 24);
      *(_DWORD *)(v97 + 20) = v185;
LABEL_182:
      *((_QWORD *)v14 + 4) = v161;
LABEL_183:
      v17 += 24;
      if (v17 == v16)
      {
        v14 = (char *)v205;
        break;
      }
    }
  }
  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::clear((uint64_t)v206);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::clear((uint64_t)v202);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(v200);
  v186[0] = v15;
  v186[1] = (uint64_t **)v14;
  if (v14)
  {
    v172 = (unint64_t *)(v14 + 8);
    do
      v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }
  homeai::clustering::GreedyClusterer::getConnectedComponentsWithoutFiltering(v181, v186, v180);
  if (v14)
  {
    v174 = (unint64_t *)(v14 + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      (*(void (**)(char *))(*(_QWORD *)v14 + 16))(v14);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
    }
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v200);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table((uint64_t)v202);
  v176 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v178 = __ldaxr(p_shared_owners);
    while (__stlxr(v178 - 1, p_shared_owners));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  return std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table((uint64_t)v206);
}

void sub_219D7C3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)&a31);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table((uint64_t)&a37);
  std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100](v37 - 192);
  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table(v37 - 176);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::getConnectedComponentsWithoutFiltering(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD **v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD **v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *__p;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75[2];
  uint64_t v76;
  uint64_t v77;
  std::vector<int> v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  _QWORD v82[3];

  v82[1] = *MEMORY[0x24BDAC8D0];
  std::vector<int>::vector(&v78, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4);
  begin = v78.__begin_;
  end = v78.__end_;
  if (v78.__begin_ != v78.__end_)
  {
    v7 = 0;
    do
      *begin++ = v7++;
    while (begin != end);
  }
  std::vector<std::vector<long long>>::vector(&v76, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4);
  v8 = **a2;
  for (i = (*a2)[1]; v8 != i; v8 += 3)
  {
    v10 = *v8;
    v11 = v8[1];
    v12 = v76 + 24 * *v8;
    v14 = (_QWORD **)(v12 + 8);
    v13 = *(_QWORD **)(v12 + 8);
    v16 = (_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 16);
    if ((unint64_t)v13 >= v15)
    {
      v18 = *(_QWORD **)v12;
      v19 = ((uint64_t)v13 - *(_QWORD *)v12) >> 3;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_86;
      v21 = v15 - (_QWORD)v18;
      if (v21 >> 2 > v20)
        v20 = v21 >> 2;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v16, v22);
        v13 = *v14;
        v18 = *(_QWORD **)v12;
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[8 * v19];
      *(_QWORD *)v24 = v11;
      v17 = v24 + 8;
      while (v13 != v18)
      {
        v25 = *--v13;
        *((_QWORD *)v24 - 1) = v25;
        v24 -= 8;
      }
      *(_QWORD *)v12 = v24;
      *v14 = v17;
      *v16 = &v23[8 * v22];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v13 = v11;
      v17 = v13 + 1;
    }
    *v14 = v17;
    v26 = v76 + 24 * v11;
    v28 = (_QWORD **)(v26 + 8);
    v27 = *(_QWORD **)(v26 + 8);
    v30 = (_QWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 16);
    if ((unint64_t)v27 >= v29)
    {
      v32 = *(_QWORD **)v26;
      v33 = ((uint64_t)v27 - *(_QWORD *)v26) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
LABEL_86:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v35 = v29 - (_QWORD)v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v30, v36);
        v27 = *v28;
        v32 = *(_QWORD **)v26;
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = v10;
      v31 = v38 + 8;
      while (v27 != v32)
      {
        v39 = *--v27;
        *((_QWORD *)v38 - 1) = v39;
        v38 -= 8;
      }
      *(_QWORD *)v26 = v38;
      *v28 = v31;
      *v30 = &v37[8 * v36];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v27 = v10;
      v31 = v27 + 1;
    }
    *v28 = v31;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v75[0] = 0;
  v75[1] = 0;
  v74 = (uint64_t *)v75;
  v80 = 0;
  std::list<long long>::list(&v71, (uint64_t)&v80, 1);
  v80 = 0;
  v81 = 0;
  v82[0] = 0;
  if (v77 != v76)
  {
    v40 = 0;
    do
    {
      v70 = 0;
      v41 = v73;
      if (v73)
      {
        v42 = (_QWORD **)__p;
        v70 = *((_QWORD *)__p + 2);
        v43 = *(_QWORD *)__p;
        *(_QWORD *)(v43 + 8) = *((_QWORD *)__p + 1);
        *v42[1] = v43;
        v73 = v41 - 1;
        operator delete(v42);
        goto LABEL_57;
      }
      v44 = a3[1];
      if (v44 >= a3[2])
      {
        v45 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a3, (uint64_t)&v80);
      }
      else
      {
        std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a3, (uint64_t)&v80);
        v45 = v44 + 24;
      }
      a3[1] = v45;
      v46 = v80;
      v81 = v80;
      v47 = v78.__end_ - v78.__begin_;
      if (v47 <= v40)
        goto LABEL_81;
      v48 = v40;
LABEL_47:
      v49 = v78.__begin_[v48];
      if (v75[0])
      {
        v50 = v75[0];
        while (1)
        {
          v51 = v50[4];
          if (v51 <= v49)
          {
            if (v51 >= v49)
            {
              if (v47 <= ++v48)
                goto LABEL_81;
              goto LABEL_47;
            }
            ++v50;
          }
          v50 = (_QWORD *)*v50;
          if (!v50)
          {
            v40 = v48;
            break;
          }
        }
      }
      v70 = v78.__begin_[v48];
      ++v40;
LABEL_57:
      v79 = &v70;
      if (!*((_BYTE *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v70, (uint64_t)&std::piecewise_construct, &v79)+ 40))
      {
        v79 = &v70;
        *((_BYTE *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v70, (uint64_t)&std::piecewise_construct, &v79)+ 40) = 1;
        v52 = v81;
        if ((unint64_t)v81 >= v82[0])
        {
          v54 = v80;
          v55 = (v81 - v80) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v57 = v82[0] - (_QWORD)v80;
          if ((uint64_t)(v82[0] - (_QWORD)v80) >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v82, v58);
            v54 = v80;
            v52 = v81;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[8 * v55];
          *(_QWORD *)v60 = v70;
          v53 = v60 + 8;
          while (v52 != v54)
          {
            v61 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v60 - 1) = v61;
            v60 -= 8;
          }
          v80 = v60;
          v81 = v53;
          v82[0] = &v59[8 * v58];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_QWORD *)v81 = v70;
          v53 = v52 + 8;
        }
        v81 = v53;
        v62 = (uint64_t **)(v76 + 24 * v70);
        v63 = *v62;
        v64 = v62[1];
        while (v63 != v64)
        {
          v69 = 0;
          v69 = *v63;
          v79 = &v69;
          if (!*((_BYTE *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v69, (uint64_t)&std::piecewise_construct, &v79)+ 40))
          {
            v65 = operator new(0x18uLL);
            v66 = v69;
            v65[1] = &v71;
            v65[2] = v66;
            v67 = v71;
            *v65 = v71;
            v67[1] = v65;
            v71 = v65;
            ++v73;
          }
          ++v63;
        }
      }
    }
    while (v77 != v76);
    v46 = v80;
LABEL_81:
    if (v46)
    {
      v81 = v46;
      operator delete(v46);
    }
  }
  std::__list_imp<long long>::clear(&v71);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v74, v75[0]);
  v74 = &v76;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_219D7CA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, _QWORD *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a15, a16);
  a15 = a9;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = &a18;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<long long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(a1, a2[1]);
    std::__list_imp<long long>::clear(a2 + 5);
    operator delete(a2);
  }
}

uint64_t std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = (uint64_t)(v12 + 5);
    v12[6] = (uint64_t)(v12 + 5);
    v12[7] = 0;
    v15 = 1;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<long long>::clear(v2 + 5);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::map<unsigned long,std::list<long long>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,std::list<long long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::list<long long>>,std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_219D7CEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,std::list<long long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::list<long long>>,std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::list<long long>> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::list<long long>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__find_equal<unsigned long>(a1, a2, &v12, &v11, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__construct_node<std::pair<unsigned long const,std::list<long long>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__construct_node<std::pair<unsigned long const,std::list<long long>> const&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = *a2;
  result = std::list<long long>::list(v6 + 5, (uint64_t)(a2 + 1));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_219D7D214(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::list<long long>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_219D7D2B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<long long>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<long long>,std::allocator<std::vector<long long>>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<long long>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_219D7D308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<long long>>,0>(_QWORD *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24DBEB5F0;
  std::vector<long long>::vector(a1 + 3, *a2);
  return a1;
}

void sub_219D7D358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DBEB5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DBEB5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2207351BCLL);
}

void std::__shared_ptr_emplace<std::vector<long long>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_219D7D428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer::cluster_t,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,int &,float *&,long long &,int,void>@<X0>(int *a1@<X1>, const void **a2@<X2>, _QWORD *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  char *v10;
  uint64_t result;

  v10 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__shared_ptr_emplace[abi:ne180100]<int &,float *&,long long &,int,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,0>((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 24;
  a5[1] = v10;
  return result;
}

void sub_219D7D4A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__shared_ptr_emplace[abi:ne180100]<int &,float *&,long long &,int,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,0>(uint64_t a1, int *a2, const void **a3, _QWORD *a4, int *a5)
{
  uint64_t v6;
  const void *v7;
  int v8;
  size_t v9;
  void *v10;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24DBEB640;
  v6 = *a2;
  v7 = *a3;
  v8 = *a5;
  *(_QWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 32) = v8;
  v9 = 4 * v6;
  v10 = (void *)operator new[]();
  *(_QWORD *)(a1 + 40) = v10;
  memcpy(v10, v7, v9);
  return a1;
}

void sub_219D7D53C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24DBEB640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24DBEB640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    JUMPOUT(0x2207351A4);
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<std::vector<long long>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DBEB690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DBEB690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2207351BCLL);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

LABEL_1:
  v9 = (float *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v27 = *(a2 - 3);
        v28 = *(_QWORD *)v9;
        if (v27 < *(_QWORD *)v9
          || v28 >= v27
          && ((v29 = *(a2 - 2), v30 = *((_QWORD *)v9 + 1), v29 < v30) || v30 >= v29 && *((float *)a2 - 2) < v9[4]))
        {
          *(_QWORD *)v9 = v27;
          *(a2 - 3) = v28;
          v31 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = *(a2 - 2);
          *(a2 - 2) = v31;
          v32 = *((_DWORD *)v9 + 4);
          v9[4] = *((float *)a2 - 2);
          *((_DWORD *)a2 - 2) = v32;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v9, (uint64_t *)v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t)v9, (uint64_t)(v9 + 6), (uint64_t)(v9 + 12), (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t)v9, (uint64_t)(v9 + 6), (uint64_t)(v9 + 12), (uint64_t)(v9 + 18), a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[6 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)&v9[6 * v14], (uint64_t *)v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v9, (uint64_t *)&v9[6 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = (uint64_t *)&v9[6 * v14 - 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v9 + 3, v17, a2 - 6);
            v18 = (uint64_t *)(v9 + 12);
            v19 = (uint64_t *)&v9[2 * v16 + 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v17, (uint64_t *)v15, v19);
            v20 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v20;
            LODWORD(v20) = *(_DWORD *)(a1 + 16);
            *(float *)(a1 + 16) = v15[4];
            *((_DWORD *)v15 + 4) = v20;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v21 = *(_QWORD *)(a1 - 24);
          if (v21 >= *(_QWORD *)a1)
          {
            if (*(_QWORD *)a1 < v21
              || (v22 = *(_QWORD *)(a1 - 16), v23 = *(_QWORD *)(a1 + 8), v22 >= v23)
              && (v23 < v22 || *(float *)(a1 - 8) >= *(float *)(a1 + 16)))
            {
              v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>((uint64_t *)a1, (float *)a2);
              goto LABEL_20;
            }
          }
LABEL_15:
          v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>((float *)a1, (unint64_t)a2);
          if ((v25 & 1) == 0)
            goto LABEL_18;
          v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, v24);
          v9 = (float *)(v24 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v24 + 24, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v26)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(a1, v24, a3, -v11, a5 & 1);
            v9 = (float *)(v24 + 24);
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if (v9 != (float *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,std::tuple<long long,long long,float> *>((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result == a2)
    return result;
  v2 = result + 3;
  if (result + 3 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = (float *)v4;
    v4 = v2;
    v6 = *((_QWORD *)v5 + 3);
    v7 = *(_QWORD *)v5;
    if (v6 >= *(_QWORD *)v5)
    {
      if (v7 < v6)
        goto LABEL_23;
      v8 = *((_QWORD *)v5 + 4);
      v15 = *((_QWORD *)v5 + 1);
      if (v8 >= v15 && (v15 < v8 || v5[10] >= v5[4]))
        goto LABEL_23;
    }
    else
    {
      v8 = *((_QWORD *)v5 + 4);
    }
    v9 = v5[10];
    *((_QWORD *)v5 + 3) = v7;
    v4[1] = *((_QWORD *)v5 + 1);
    *((float *)v4 + 4) = v5[4];
    v10 = (float *)result;
    if (v5 == (float *)result)
      goto LABEL_22;
    v11 = v3;
    while (1)
    {
      v12 = *(uint64_t *)((char *)result + v11 - 24);
      if (v6 < v12)
      {
        v13 = *(uint64_t *)((char *)result + v11 - 16);
        goto LABEL_14;
      }
      if (v12 < v6)
        goto LABEL_21;
      v13 = *(uint64_t *)((char *)result + v11 - 16);
      if (v8 >= v13)
        break;
LABEL_14:
      v5 -= 6;
      v14 = (uint64_t)result + v11;
      *(_QWORD *)v14 = v12;
      *(_QWORD *)(v14 + 8) = v13;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)((char *)result + v11 - 8);
      v11 -= 24;
      if (!v11)
      {
        v10 = (float *)result;
        goto LABEL_22;
      }
    }
    if (v13 >= v8)
    {
      v10 = (float *)((char *)result + v11);
      if (v9 >= *(float *)((char *)result + v11 - 8))
        goto LABEL_22;
      goto LABEL_14;
    }
LABEL_21:
    v10 = v5;
LABEL_22:
    *(_QWORD *)v10 = v6;
    *((_QWORD *)v10 + 1) = v8;
    v10[4] = v9;
LABEL_23:
    v2 = v4 + 3;
    v3 += 24;
  }
  while (v4 + 3 != a2);
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *i;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t *j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      for (i = result + 1; ; i += 3)
      {
        v4 = (float *)result;
        result = v2;
        v5 = *((_QWORD *)v4 + 3);
        v6 = *(_QWORD *)v4;
        if (v5 < *(_QWORD *)v4)
          break;
        if (v6 >= v5)
        {
          v7 = *((_QWORD *)v4 + 4);
          v12 = *((_QWORD *)v4 + 1);
          if (v7 < v12 || v12 >= v7 && v4[10] < v4[4])
            goto LABEL_6;
        }
LABEL_15:
        v2 = result + 3;
        if (result + 3 == a2)
          return result;
      }
      v7 = *((_QWORD *)v4 + 4);
LABEL_6:
      v8 = v4[10];
      for (j = i; ; j -= 3)
      {
        v10 = *j;
        j[2] = v6;
        j[3] = v10;
        *((_DWORD *)j + 8) = *((_DWORD *)j + 2);
        v6 = *(j - 4);
        if (v5 >= v6)
        {
          if (v6 < v5)
            break;
          v11 = *(j - 3);
          if (v7 >= v11 && (v11 < v7 || v8 >= *((float *)j - 4)))
            break;
        }
      }
      *(j - 1) = v5;
      *j = v7;
      *((float *)j + 2) = v8;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1
    || v4 >= v3 && ((v25 = a2[1], v26 = a1[1], v25 < v26) || v26 >= v25 && *((float *)a2 + 4) < *((float *)a1 + 4)))
  {
    v5 = *a3;
    if (*a3 < v3
      || v3 >= v5 && ((v18 = a3[1], v19 = a2[1], v18 < v19) || v19 >= v18 && *((float *)a3 + 4) < *((float *)a2 + 4)))
    {
      *a1 = v5;
      *a3 = v4;
      v6 = a1[1];
      a1[1] = a3[1];
      a3[1] = v6;
      v7 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a3 + 4) = v7;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      v21 = *((float *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((float *)a2 + 4) = v21;
      v22 = *a3;
      v23 = *a2;
      if (*a3 < *a2 || v23 >= v22 && ((v29 = a3[1], v29 < v20) || v20 >= v29 && *((float *)a3 + 4) < v21))
      {
        *a2 = v22;
        *a3 = v23;
        v24 = a2[1];
        a2[1] = a3[1];
        a3[1] = v24;
        *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
        *((float *)a3 + 4) = v21;
        return 2;
      }
    }
    return 1;
  }
  v9 = *a3;
  if (*a3 < v3
    || v3 >= v9 && ((v10 = a3[1], v11 = a2[1], v10 < v11) || v11 >= v10 && *((float *)a3 + 4) < *((float *)a2 + 4)))
  {
    *a2 = v9;
    *a3 = v3;
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    v13 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = v13;
    v14 = *a2;
    v15 = *a1;
    if (*a2 < *a1
      || v15 >= v14 && ((v27 = a2[1], v28 = a1[1], v27 < v28) || v28 >= v27 && *((float *)a2 + 4) < *((float *)a1 + 4)))
    {
      *a1 = v14;
      *a2 = v15;
      v16 = a1[1];
      a1[1] = a2[1];
      a2[1] = v16;
      v17 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = v17;
      return 2;
    }
    return 1;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>(uint64_t *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((float *)a1 + 4);
  v5 = *((_QWORD *)a2 - 3);
  if (*a1 >= v5 && (v5 < v2 || (v6 = *((_QWORD *)a2 - 2), v3 >= v6) && (v6 < v3 || v4 >= *(a2 - 2))))
  {
    for (i = (float *)(a1 + 3); i < a2; i += 6)
    {
      if (v2 < *(_QWORD *)i)
        break;
      if (*(_QWORD *)i >= v2)
      {
        v23 = *((_QWORD *)i + 1);
        if (v3 < v23 || v23 >= v3 && v4 < i[4])
          break;
      }
    }
  }
  else
  {
    i = (float *)a1;
    while (1)
    {
      v9 = *((_QWORD *)i + 3);
      i += 6;
      v8 = v9;
      if (v2 < v9)
        break;
      if (v8 >= v2)
      {
        v10 = *((_QWORD *)i + 1);
        if (v3 < v10 || v10 >= v3 && v4 < i[4])
          break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 6; ; a2 -= 6)
    {
      if (v2 >= v5)
      {
        if (v5 < v2)
          break;
        v11 = *((_QWORD *)a2 + 1);
        if (v3 >= v11 && (v11 < v3 || v4 >= a2[4]))
          break;
      }
      v12 = *((_QWORD *)a2 - 3);
      v5 = v12;
    }
  }
  if (i < a2)
  {
    v13 = *(_QWORD *)i;
    v14 = *(_QWORD *)a2;
    do
    {
      *(_QWORD *)i = v14;
      *(_QWORD *)a2 = v13;
      v15 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v15;
      v16 = *((_QWORD *)i + 3);
      i += 6;
      v13 = v16;
      v17 = *((_DWORD *)i - 2);
      *(i - 2) = a2[4];
      *((_DWORD *)a2 + 4) = v17;
      while (v2 >= v13)
      {
        if (v13 >= v2)
        {
          v18 = *((_QWORD *)i + 1);
          if (v3 < v18 || v18 >= v3 && v4 < i[4])
            break;
        }
        v19 = *((_QWORD *)i + 3);
        i += 6;
        v13 = v19;
      }
      do
      {
        do
        {
          v20 = *((_QWORD *)a2 - 3);
          a2 -= 6;
          v14 = v20;
        }
        while (v2 < v20);
        if (v14 < v2)
          break;
        v21 = *((_QWORD *)a2 + 1);
      }
      while (v3 < v21 || v21 >= v3 && v4 < a2[4]);
    }
    while (i < a2);
  }
  if (i - 6 != (float *)a1)
  {
    *a1 = *((_QWORD *)i - 3);
    a1[1] = *((_QWORD *)i - 2);
    *((float *)a1 + 4) = *(i - 2);
  }
  *((_QWORD *)i - 3) = v2;
  *((_QWORD *)i - 2) = v3;
  *(i - 2) = v4;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>(float *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = a1[4];
  while (1)
  {
    v6 = *(_QWORD *)&a1[v2 + 6];
    if (v6 >= v3)
    {
      if (v3 < v6)
        break;
      v7 = *(_QWORD *)&a1[v2 + 8];
      if (v7 >= v4 && (v4 < v7 || a1[v2 + 10] >= v5))
        break;
    }
    v2 += 6;
  }
  v8 = (unint64_t)&a1[v2 + 6];
  if (v2 * 4)
  {
    while (1)
    {
      v10 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
      v9 = v10;
      if (v10 < v3)
        break;
      if (v3 >= v9)
      {
        v11 = *(_QWORD *)(a2 + 8);
        if (v11 < v4 || v4 >= v11 && *(float *)(a2 + 16) < v5)
          break;
      }
    }
  }
  else
  {
LABEL_25:
    if (v8 < a2)
    {
      do
      {
        v13 = *(_QWORD *)(a2 - 24);
        a2 -= 24;
        v12 = v13;
        if (v13 < v3)
          break;
        if (v3 < v12)
          goto LABEL_25;
        v14 = *(_QWORD *)(a2 + 8);
        if (v14 < v4)
          break;
        if (v4 < v14)
          goto LABEL_25;
      }
      while (*(float *)(a2 + 16) >= v5 && v8 < a2);
    }
  }
  if (v8 >= a2)
  {
    v17 = v8;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    v17 = v8;
    v18 = a2;
    do
    {
      *(_QWORD *)v17 = v16;
      *(_QWORD *)v18 = v6;
      v19 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = v19;
      v20 = *(_DWORD *)(v17 + 16);
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(v18 + 16);
      *(_DWORD *)(v18 + 16) = v20;
      do
      {
        do
        {
          v21 = *(_QWORD *)(v17 + 24);
          v17 += 24;
          v6 = v21;
        }
        while (v21 < v3);
        if (v3 < v6)
          break;
        v22 = *(_QWORD *)(v17 + 8);
      }
      while (v22 < v4 || v4 >= v22 && *(float *)(v17 + 16) < v5);
      while (1)
      {
        v23 = *(_QWORD *)(v18 - 24);
        v18 -= 24;
        v16 = v23;
        if (v23 < v3)
          break;
        if (v3 >= v16)
        {
          v24 = *(_QWORD *)(v18 + 8);
          if (v24 < v4 || v4 >= v24 && *(float *)(v18 + 16) < v5)
            break;
        }
      }
    }
    while (v17 < v18);
  }
  if ((float *)(v17 - 24) != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v17 - 24);
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v17 - 16);
    a1[4] = *(float *)(v17 - 8);
  }
  *(_QWORD *)(v17 - 24) = v3;
  *(_QWORD *)(v17 - 16) = v4;
  *(float *)(v17 - 8) = v5;
  return v17 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 24);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1
        || v7 >= v6
        && ((v25 = *(_QWORD *)(a2 - 16), v26 = *(_QWORD *)(a1 + 8), v25 < v26)
         || v26 >= v25 && *(float *)(a2 - 8) < *(float *)(a1 + 16)))
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 24) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t *)(a2 - 24));
      return 1;
    default:
      v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = *(_QWORD *)v11;
    v15 = *(_QWORD *)v10;
    if (*(_QWORD *)v11 >= *(_QWORD *)v10)
    {
      if (v15 < v14)
        goto LABEL_27;
      v16 = *(_QWORD *)(v11 + 8);
      v24 = *(_QWORD *)(v10 + 8);
      if (v16 >= v24 && (v24 < v16 || *(float *)(v11 + 16) >= *(float *)(v10 + 16)))
        goto LABEL_27;
    }
    else
    {
      v16 = *(_QWORD *)(v11 + 8);
    }
    v17 = *(float *)(v11 + 16);
    *(_QWORD *)v11 = v15;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v10 + 16);
    v18 = a1;
    if (v10 == a1)
      goto LABEL_26;
    v19 = v12;
    while (1)
    {
      v20 = a1 + v19;
      v21 = *(_QWORD *)(a1 + v19 + 24);
      if (v14 < v21)
      {
        v22 = *(_QWORD *)(v20 + 32);
        goto LABEL_17;
      }
      if (v21 < v14)
        goto LABEL_24;
      v22 = *(_QWORD *)(a1 + v19 + 32);
      if (v16 >= v22)
      {
        if (v22 < v16)
        {
LABEL_24:
          v18 = v10;
          goto LABEL_26;
        }
        if (v17 >= *(float *)(a1 + v19 + 40))
          break;
      }
LABEL_17:
      v10 -= 24;
      *(_QWORD *)(v20 + 48) = v21;
      v23 = a1 + v19;
      *(_QWORD *)(v23 + 56) = v22;
      *(_DWORD *)(v23 + 64) = *(_DWORD *)(a1 + v19 + 40);
      v19 -= 24;
      if (v19 == -48)
      {
        v18 = a1;
        goto LABEL_26;
      }
    }
    v18 = a1 + v19 + 48;
LABEL_26:
    *(_QWORD *)v18 = v14;
    *(_QWORD *)(v18 + 8) = v16;
    *(float *)(v18 + 16) = v17;
    if (++v13 == 8)
      return v11 + 24 == a2;
LABEL_27:
    v10 = v11;
    v12 += 24;
    v11 += 24;
  }
  while (v11 != a2);
  return 1;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 < *(_QWORD *)a3
    || v10 >= v9
    && ((v11 = *(_QWORD *)(a4 + 8), v12 = *(_QWORD *)(a3 + 8), v11 < v12)
     || v12 >= v11 && (result = *(float *)(a4 + 16), result < *(float *)(a3 + 16))))
  {
    *(_QWORD *)a3 = v9;
    *(_QWORD *)a4 = v10;
    v13 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v13;
    result = *(float *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(float *)(a4 + 16) = result;
    v14 = *(_QWORD *)a3;
    v15 = *(_QWORD *)a2;
    if (*(_QWORD *)a3 < *(_QWORD *)a2
      || v15 >= v14
      && ((v16 = *(_QWORD *)(a3 + 8), v17 = *(_QWORD *)(a2 + 8), v16 < v17)
       || v17 >= v16 && (result = *(float *)(a3 + 16), result < *(float *)(a2 + 16))))
    {
      *(_QWORD *)a2 = v14;
      *(_QWORD *)a3 = v15;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v18;
      result = *(float *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(float *)(a3 + 16) = result;
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)a1;
      if (*(_QWORD *)a2 < *(_QWORD *)a1
        || v20 >= v19
        && ((v21 = *(_QWORD *)(a2 + 8), v22 = *(_QWORD *)(a1 + 8), v21 < v22)
         || v22 >= v21 && (result = *(float *)(a2 + 16), result < *(float *)(a1 + 16))))
      {
        *(_QWORD *)a1 = v19;
        *(_QWORD *)a2 = v20;
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v23;
        result = *(float *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(float *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_QWORD *)a4;
  if (*a5 < *(_QWORD *)a4
    || v12 >= v11
    && ((v29 = a5[1], v30 = *(_QWORD *)(a4 + 8), v29 < v30)
     || v30 >= v29 && (result = *((float *)a5 + 4), result < *(float *)(a4 + 16))))
  {
    *(_QWORD *)a4 = v11;
    *a5 = v12;
    v13 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = a5[1];
    a5[1] = v13;
    result = *(float *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *((float *)a5 + 4) = result;
    v14 = *(_QWORD *)a4;
    v15 = *(_QWORD *)a3;
    if (*(_QWORD *)a4 < *(_QWORD *)a3
      || v15 >= v14
      && ((v16 = *(_QWORD *)(a4 + 8), v17 = *(_QWORD *)(a3 + 8), v16 < v17)
       || v17 >= v16 && (result = *(float *)(a4 + 16), result < *(float *)(a3 + 16))))
    {
      *(_QWORD *)a3 = v14;
      *(_QWORD *)a4 = v15;
      v18 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v18;
      result = *(float *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(float *)(a4 + 16) = result;
      v19 = *(_QWORD *)a3;
      v20 = *(_QWORD *)a2;
      if (*(_QWORD *)a3 < *(_QWORD *)a2
        || v20 >= v19
        && ((v21 = *(_QWORD *)(a3 + 8), v22 = *(_QWORD *)(a2 + 8), v21 < v22)
         || v22 >= v21 && (result = *(float *)(a3 + 16), result < *(float *)(a2 + 16))))
      {
        *(_QWORD *)a2 = v19;
        *(_QWORD *)a3 = v20;
        v23 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v23;
        result = *(float *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(float *)(a3 + 16) = result;
        v24 = *(_QWORD *)a2;
        v25 = *(_QWORD *)a1;
        if (*(_QWORD *)a2 < *(_QWORD *)a1
          || v25 >= v24
          && ((v26 = *(_QWORD *)(a2 + 8), v27 = *(_QWORD *)(a1 + 8), v26 < v27)
           || v27 >= v26 && (result = *(float *)(a2 + 16), result < *(float *)(a1 + 16))))
        {
          *(_QWORD *)a1 = v24;
          *(_QWORD *)a2 = v25;
          v28 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v28;
          result = *(float *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(float *)(a2 + 16) = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (float *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *(_QWORD *)a1;
        if (*v14 < *(_QWORD *)a1
          || v16 >= v15
          && ((v17 = v14[1], v18 = *(_QWORD *)(a1 + 8), v17 < v18)
           || v18 >= v17 && *((float *)v14 + 4) < *(float *)(a1 + 16)))
        {
          *v14 = v16;
          *(_QWORD *)a1 = v15;
          v19 = v14[1];
          v14[1] = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v19;
          v20 = *((_DWORD *)v14 + 4);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v9, (float *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v21 = v8 / 0x18uLL;
      v22 = a2 - 3;
      do
      {
        v24 = *(_QWORD *)a1;
        v23 = *(_QWORD *)(a1 + 8);
        v25 = *(_DWORD *)(a1 + 16);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v21);
        if (v22 == (uint64_t *)v26)
        {
          *(_QWORD *)v26 = v24;
          *(_QWORD *)(v26 + 8) = v23;
          *(_DWORD *)(v26 + 16) = v25;
        }
        else
        {
          *(_QWORD *)v26 = *v22;
          *(_QWORD *)(v26 + 8) = v22[1];
          *(_DWORD *)(v26 + 16) = *((_DWORD *)v22 + 4);
          *v22 = v24;
          v22[1] = v23;
          *((_DWORD *)v22 + 4) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, v26 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v26 + 24 - a1) >> 3));
        }
        v22 -= 3;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  int64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = (float *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        v7 = *((_QWORD *)v6 + 3);
        if (*(_QWORD *)v6 < v7
          || v7 >= *(_QWORD *)v6
          && ((v8 = *((_QWORD *)v6 + 1), v9 = *((_QWORD *)v6 + 4), v8 < v9) || v9 >= v8 && v6[4] < v6[10]))
        {
          v6 += 6;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      v10 = *(_QWORD *)v6;
      v11 = *(_QWORD *)a4;
      if (*(_QWORD *)v6 >= *(_QWORD *)a4)
      {
        if (v11 >= v10)
        {
          v13 = *((_QWORD *)v6 + 1);
          v12 = *((_QWORD *)a4 + 1);
          if (v13 < v12 || v12 >= v13 && v6[4] < a4[4])
            return result;
        }
        else
        {
          v12 = *((_QWORD *)a4 + 1);
        }
        v14 = a4[4];
        *(_QWORD *)a4 = v10;
        *((_QWORD *)a4 + 1) = *((_QWORD *)v6 + 1);
        a4[4] = v6[4];
        if (v4 >= v5)
        {
          while (1)
          {
            v15 = v6;
            v16 = 2 * v5;
            v5 = (2 * v5) | 1;
            v6 = (float *)(result + 24 * v5);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *((_QWORD *)v6 + 3);
              if (*(_QWORD *)v6 < v18
                || v18 >= *(_QWORD *)v6
                && ((v19 = *((_QWORD *)v6 + 1), v20 = *((_QWORD *)v6 + 4), v19 < v20) || v20 >= v19 && v6[4] < v6[10]))
              {
                v6 += 6;
                v5 = v17;
              }
            }
            v21 = *(_QWORD *)v6;
            if (*(_QWORD *)v6 < v11)
              break;
            if (v11 >= v21)
            {
              v22 = *((_QWORD *)v6 + 1);
              if (v22 < v12 || v12 >= v22 && v6[4] < v14)
                break;
            }
            *(_QWORD *)v15 = v21;
            *((_QWORD *)v15 + 1) = *((_QWORD *)v6 + 1);
            v15[4] = v6[4];
            if (v4 < v5)
              goto LABEL_32;
          }
          v6 = v15;
        }
LABEL_32:
        *(_QWORD *)v6 = v11;
        *((_QWORD *)v6 + 1) = v12;
        v6[4] = v14;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 24 * v3 + 24;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)a1 < v9
        || v9 >= *(_QWORD *)a1
        && ((v10 = *(_QWORD *)(a1 + 8), v11 = *(_QWORD *)(a1 + 32), v10 < v11)
         || v11 >= v10 && *(float *)(a1 + 16) < *(float *)(a1 + 40)))
      {
        a1 += 24;
        v3 = v8;
      }
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(a1 + 8);
    result = *(float *)(a1 + 16);
    *(float *)(v6 + 16) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v5 = v4 >> 1;
  v6 = (float *)(result + 24 * (v4 >> 1));
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(a2 - 24);
  if (*(_QWORD *)v6 >= v8)
  {
    if (v8 < v7)
      return result;
    v10 = *((_QWORD *)v6 + 1);
    v9 = *(_QWORD *)(a2 - 16);
    if (v10 >= v9 && (v9 < v10 || v6[4] >= *(float *)(a2 - 8)))
      return result;
  }
  else
  {
    v9 = *(_QWORD *)(a2 - 16);
  }
  v11 = *(float *)(a2 - 8);
  *(_QWORD *)(a2 - 24) = v7;
  *(_QWORD *)(a2 - 16) = *((_QWORD *)v6 + 1);
  *(float *)(a2 - 8) = v6[4];
  if (v4 < 2)
    goto LABEL_18;
  while (1)
  {
    v12 = v6;
    v13 = v5 - 1;
    v5 = (v5 - 1) >> 1;
    v6 = (float *)(result + 24 * v5);
    v14 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 >= v8)
      break;
    v15 = *((_QWORD *)v6 + 1);
LABEL_15:
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    v12[4] = v6[4];
    if (v13 <= 1)
      goto LABEL_18;
  }
  if (v8 >= v14)
  {
    v15 = *((_QWORD *)v6 + 1);
    if (v15 < v9 || v9 >= v15 && v6[4] < v11)
      goto LABEL_15;
  }
  v6 = v12;
LABEL_18:
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  v6[4] = v11;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  __int128 v16;
  float v17;
  uint64_t v18;
  __int128 v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  BOOL v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  float v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  float v60;
  __int128 v61;
  float v62;
  __int128 v63;
  _OWORD *v64;
  BOOL v66;
  uint64_t v67;
  _OWORD *v68;
  float v69;
  float v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  float v82;
  float v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  __int128 v101;
  unint64_t v102;
  float *v104;
  float v105;
  float v106;
  __int128 v107;
  float *v108;
  float *v109;
  uint64_t v110;
  int v111;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v47 = *(float *)(a2 - 8);
        v48 = *(float *)(v8 + 16);
        if (v47 < v48)
        {
          v49 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v49;
          v50 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v50;
          *(float *)(v8 + 16) = v47;
          *(float *)(a2 - 8) = v48;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(a2 - 24));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48), (float *)(a2 - 24));
      case 5:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48), (float *)(v8 + 72));
        v51 = *(float *)(a2 - 8);
        v52 = *(float *)(v8 + 88);
        if (v51 < v52)
        {
          v53 = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v53;
          v54 = *(_QWORD *)(v8 + 80);
          *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v54;
          *(float *)(v8 + 88) = v51;
          *(float *)(a2 - 8) = v52;
          v55 = *(float *)(v8 + 88);
          v56 = *(float *)(v8 + 64);
          if (v55 < v56)
          {
            v57 = *(_QWORD *)(v8 + 72);
            v58 = *(_QWORD *)(v8 + 80);
            v59 = *(_OWORD *)(v8 + 48);
            *(_QWORD *)(v8 + 48) = v57;
            *(_QWORD *)(v8 + 56) = v58;
            *(_OWORD *)(v8 + 72) = v59;
            *(float *)(v8 + 64) = v55;
            *(float *)(v8 + 88) = v56;
            v60 = *(float *)(v8 + 40);
            if (v55 < v60)
            {
              v61 = *(_OWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = v57;
              *(_QWORD *)(v8 + 32) = v58;
              *(_OWORD *)(v8 + 48) = v61;
              *(float *)(v8 + 40) = v55;
              *(float *)(v8 + 64) = v60;
              v62 = *(float *)(v8 + 16);
              if (v55 < v62)
              {
                v63 = *(_OWORD *)v8;
                *(_QWORD *)v8 = v57;
                *(_QWORD *)(v8 + 8) = v58;
                *(_OWORD *)(v8 + 24) = v63;
                *(float *)(v8 + 16) = v55;
                *(float *)(v8 + 40) = v62;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 575)
        {
          v64 = (_OWORD *)(v8 + 24);
          v66 = v8 == a2 || v64 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v66)
            {
              v67 = 0;
              v68 = (_OWORD *)v8;
              do
              {
                v69 = *((float *)v68 + 10);
                v70 = *((float *)v68 + 4);
                v68 = v64;
                if (v69 < v70)
                {
                  v71 = *v64;
                  v72 = v67;
                  while (1)
                  {
                    v73 = v8 + v72;
                    v74 = *(_QWORD *)(v8 + v72 + 8);
                    *(_QWORD *)(v73 + 24) = *(_QWORD *)(v8 + v72);
                    *(_QWORD *)(v73 + 32) = v74;
                    *(_DWORD *)(v73 + 40) = *(_DWORD *)(v8 + v72 + 16);
                    if (!v72)
                      break;
                    v72 -= 24;
                    if (v69 >= *(float *)(v73 - 8))
                    {
                      v75 = v8 + v72 + 24;
                      goto LABEL_80;
                    }
                  }
                  v75 = v8;
LABEL_80:
                  *(_OWORD *)v75 = v71;
                  *(float *)(v75 + 16) = v69;
                }
                v64 = (_OWORD *)((char *)v68 + 24);
                v67 += 24;
              }
              while ((_OWORD *)((char *)v68 + 24) != (_OWORD *)a2);
            }
          }
          else if (!v66)
          {
            v104 = (float *)(v8 + 40);
            do
            {
              v105 = *(float *)(v7 + 40);
              v106 = *(float *)(v7 + 16);
              v7 = (uint64_t)v64;
              if (v105 < v106)
              {
                v107 = *v64;
                v108 = v104;
                do
                {
                  v109 = v108;
                  v110 = *((_QWORD *)v108 - 4);
                  *((_QWORD *)v108 - 2) = *((_QWORD *)v108 - 5);
                  *((_QWORD *)v108 - 1) = v110;
                  v111 = *((_DWORD *)v108 - 6);
                  v108 -= 6;
                  *(_DWORD *)v109 = v111;
                }
                while (v105 < *(v109 - 12));
                *((_OWORD *)v108 - 1) = v107;
                *v108 = v105;
              }
              v64 = (_OWORD *)(v7 + 24);
              v104 += 6;
            }
            while (v7 + 24 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v76 = (unint64_t)(v10 - 2) >> 1;
          v77 = v76;
          do
          {
            v78 = v77;
            if (v76 >= v77)
            {
              v79 = (2 * v77) | 1;
              v80 = v8 + 24 * v79;
              if (2 * v78 + 2 < v10 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
              {
                v80 += 24;
                v79 = 2 * v78 + 2;
              }
              v81 = v8 + 24 * v78;
              v82 = *(float *)(v80 + 16);
              v83 = *(float *)(v81 + 16);
              if (v82 >= v83)
              {
                v84 = *(_OWORD *)v81;
                do
                {
                  v85 = v81;
                  v81 = v80;
                  *(_QWORD *)v85 = *(_QWORD *)v80;
                  *(_QWORD *)(v85 + 8) = *(_QWORD *)(v80 + 8);
                  *(float *)(v85 + 16) = v82;
                  if (v76 < v79)
                    break;
                  v86 = 2 * v79;
                  v79 = (2 * v79) | 1;
                  v80 = v8 + 24 * v79;
                  v87 = v86 + 2;
                  if (v87 < v10 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
                  {
                    v80 += 24;
                    v79 = v87;
                  }
                  v82 = *(float *)(v80 + 16);
                }
                while (v82 >= v83);
                *(_OWORD *)v81 = v84;
                *(float *)(v81 + 16) = v83;
              }
            }
            v77 = v78 - 1;
          }
          while (v78);
          v88 = v9 / 0x18uLL;
          while (2)
          {
            v89 = 0;
            v90 = *(_QWORD *)v8;
            v91 = *(_QWORD *)(v8 + 8);
            v92 = *(float *)(v8 + 16);
            v93 = v8;
            do
            {
              v94 = v93;
              v93 += 24 * v89 + 24;
              v95 = 2 * v89;
              result = (2 * v89) | 1;
              v89 = result;
              v96 = v95 + 2;
              if (v96 < v88 && *(float *)(v93 + 16) < *(float *)(v93 + 40))
              {
                v93 += 24;
                v89 = v96;
              }
              *(_QWORD *)v94 = *(_QWORD *)v93;
              *(_QWORD *)(v94 + 8) = *(_QWORD *)(v93 + 8);
              *(_DWORD *)(v94 + 16) = *(_DWORD *)(v93 + 16);
            }
            while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
            if (v93 != a2 - 24)
            {
              *(_QWORD *)v93 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(v93 + 8) = *(_QWORD *)(a2 - 16);
              *(_DWORD *)(v93 + 16) = *(_DWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 24) = v90;
              *(_QWORD *)(a2 - 16) = v91;
              *(float *)(a2 - 8) = v92;
              v97 = v93 - v8 + 24;
              if (v97 >= 25)
              {
                v98 = (v97 / 0x18uLL - 2) >> 1;
                v99 = v8 + 24 * v98;
                v100 = *(float *)(v99 + 16);
                v92 = *(float *)(v93 + 16);
                if (v100 < v92)
                {
                  v101 = *(_OWORD *)v93;
                  do
                  {
                    v102 = v93;
                    v93 = v99;
                    *(_QWORD *)v102 = *(_QWORD *)v99;
                    *(_QWORD *)(v102 + 8) = *(_QWORD *)(v99 + 8);
                    *(float *)(v102 + 16) = v100;
                    if (!v98)
                      break;
                    v98 = (v98 - 1) >> 1;
                    v99 = v8 + 24 * v98;
                    v100 = *(float *)(v99 + 16);
                  }
                  while (v100 < v92);
                  *(_OWORD *)v93 = v101;
LABEL_112:
                  *(float *)(v93 + 16) = v92;
                }
              }
              a2 -= 24;
              if (v88-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v93 = v90;
          *(_QWORD *)(v93 + 8) = v91;
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 24 * v11), (float *)v7, (float *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v7, (float *)(v7 + 24 * v11), (float *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (float *)(v7 + 24 * v11 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 24), v14, (float *)(a2 - 48));
          v15 = (float *)(v7 + 24 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 48), v15, (float *)(a2 - 72));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v14, (float *)v12, v15);
          v16 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v16;
          LODWORD(v16) = *(_DWORD *)(v7 + 16);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(float *)(v7 + 16);
          if (*(float *)(v7 - 8) < v17)
            goto LABEL_12;
          if (v17 >= *(float *)(a2 - 8))
          {
            v36 = v7 + 24;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = *(float *)(v36 + 16);
              v36 += 24;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 24;
              v35 = *(float *)(v34 + 40);
              v34 += 24;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 24;
              v40 = *(float *)(v39 - 8);
              v39 -= 24;
            }
            while (v17 < v40);
          }
          v41 = *(_OWORD *)v7;
          while (v8 < v38)
          {
            v42 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v38;
            *(_QWORD *)v38 = v42;
            v43 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = v43;
            v44 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v38 + 16);
            *(_DWORD *)(v38 + 16) = v44;
            do
            {
              v45 = *(float *)(v8 + 40);
              v8 += 24;
            }
            while (v17 >= v45);
            do
            {
              v46 = *(float *)(v38 - 8);
              v38 -= 24;
            }
            while (v17 < v46);
          }
          if (v8 - 24 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_OWORD *)(v8 - 24) = v41;
          *(float *)(v8 - 8) = v17;
          continue;
        }
        v17 = *(float *)(v7 + 16);
LABEL_12:
        v18 = 0;
        v19 = *(_OWORD *)v7;
        do
        {
          v20 = *(float *)(v7 + v18 + 40);
          v18 += 24;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 24)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 24;
            v26 = *(float *)(v25 - 8);
            v25 -= 24;
            if (v26 < v17)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 24;
            v24 = *(float *)(v22 - 8);
            v22 -= 24;
          }
          while (v24 >= v17);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v27;
            *(_QWORD *)v27 = v28;
            v29 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v27 + 8);
            *(_QWORD *)(v27 + 8) = v29;
            v30 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v27 + 16);
            *(_DWORD *)(v27 + 16) = v30;
            do
            {
              v31 = *(float *)(v8 + 40);
              v8 += 24;
            }
            while (v31 < v17);
            do
            {
              v32 = *(float *)(v27 - 8);
              v27 -= 24;
            }
            while (v32 >= v17);
          }
          while (v8 < v27);
        }
        if (v8 - 24 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 - 8);
        }
        *(_OWORD *)(v8 - 24) = v19;
        *(float *)(v8 - 8) = v17;
        if (v21 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(v7, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v7, v8 - 24);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 24;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2[4];
  v4 = result[4];
  v5 = a3[4];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v8;
      v9 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v9;
      a2[4] = v5;
      a3[4] = v3;
      v10 = a2[4];
      v11 = result[4];
      if (v10 < v11)
      {
        v12 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v12;
        v13 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v13;
        result[4] = v10;
        a2[4] = v11;
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 >= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v6;
      v14 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v14;
      result[4] = v3;
      a2[4] = v4;
      v15 = a3[4];
      if (v15 >= v4)
        return result;
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v16;
      v17 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v17;
      a2[4] = v15;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
      result[4] = v5;
    }
    a3[4] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  __int128 v30;
  float v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)(a1 + 16);
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v9;
        *(float *)(a1 + 16) = v6;
        *(float *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a1 + 72));
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 88);
      if (v20 < v21)
      {
        v22 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v22;
        v23 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v23;
        *(float *)(a1 + 88) = v20;
        *(float *)(a2 - 8) = v21;
        v24 = *(float *)(a1 + 88);
        v25 = *(float *)(a1 + 64);
        if (v24 < v25)
        {
          v26 = *(_QWORD *)(a1 + 72);
          v27 = *(_QWORD *)(a1 + 80);
          v28 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v26;
          *(_QWORD *)(a1 + 56) = v27;
          *(_OWORD *)(a1 + 72) = v28;
          *(float *)(a1 + 64) = v24;
          *(float *)(a1 + 88) = v25;
          v29 = *(float *)(a1 + 40);
          if (v24 < v29)
          {
            v30 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v26;
            *(_QWORD *)(a1 + 32) = v27;
            *(_OWORD *)(a1 + 48) = v30;
            *(float *)(a1 + 40) = v24;
            *(float *)(a1 + 64) = v29;
            v31 = *(float *)(a1 + 16);
            if (v24 < v31)
            {
              v32 = *(_OWORD *)a1;
              *(_QWORD *)a1 = v26;
              *(_QWORD *)(a1 + 8) = v27;
              *(_OWORD *)(a1 + 24) = v32;
              *(float *)(a1 + 16) = v24;
              *(float *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 16);
    if (v14 < *(float *)(v10 + 16))
    {
      v15 = *(_OWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_QWORD *)(a1 + v16 + 56);
        *(_QWORD *)(v17 + 72) = *(_QWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 80) = v18;
        *(_DWORD *)(v17 + 88) = *(_DWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v14 >= *(float *)(v17 + 40))
        {
          v19 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_OWORD *)v19 = v15;
      *(float *)(v19 + 16) = v14;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(float *a1, float *a2, float *a3, float *a4)
{
  float *result;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(a1, a2, a3);
  v9 = a4[4];
  v10 = a3[4];
  if (v9 < v10)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    v12 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = v12;
    a3[4] = v9;
    a4[4] = v10;
    v13 = a3[4];
    v14 = a2[4];
    if (v13 < v14)
    {
      v15 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v15;
      v16 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v16;
      a2[4] = v13;
      a3[4] = v14;
      v17 = a2[4];
      v18 = a1[4];
      if (v17 < v18)
      {
        v19 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v19;
        v20 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v20;
        a1[4] = v17;
        a2[4] = v18;
      }
    }
  }
  return result;
}

void std::vector<std::tuple<long long,long long,float>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      v14 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 4) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[24 * v8];
    v16 = &v15[24 * a2];
    v17 = 24 * a2;
    v18 = v15;
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_DWORD *)v18 + 4) = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v19 = &v12[24 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

_QWORD *std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_219D7FC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_219D7FD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_219D7FFB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<long long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<long long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_219D8005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<long long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::list<long long>::list(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 8 * a3;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *(_QWORD *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_219D8013C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_BYTE *)v11 + 40) = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_219D80520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  __int128 v16;
  float v17;
  uint64_t v18;
  __int128 v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  BOOL v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  float v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  float v60;
  __int128 v61;
  float v62;
  __int128 v63;
  _OWORD *v64;
  BOOL v66;
  uint64_t v67;
  _OWORD *v68;
  float v69;
  float v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  float v82;
  float v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  __int128 v101;
  unint64_t v102;
  float *v104;
  float v105;
  float v106;
  __int128 v107;
  float *v108;
  float *v109;
  uint64_t v110;
  int v111;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v47 = *(float *)(a2 - 8);
        v48 = *(float *)(v8 + 16);
        if (v47 < v48)
        {
          v49 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v49;
          v50 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v50;
          *(float *)(v8 + 16) = v47;
          *(float *)(a2 - 8) = v48;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(a2 - 24));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48), (float *)(a2 - 24));
      case 5:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48), (float *)(v8 + 72));
        v51 = *(float *)(a2 - 8);
        v52 = *(float *)(v8 + 88);
        if (v51 < v52)
        {
          v53 = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v53;
          v54 = *(_QWORD *)(v8 + 80);
          *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v54;
          *(float *)(v8 + 88) = v51;
          *(float *)(a2 - 8) = v52;
          v55 = *(float *)(v8 + 88);
          v56 = *(float *)(v8 + 64);
          if (v55 < v56)
          {
            v57 = *(_QWORD *)(v8 + 72);
            v58 = *(_QWORD *)(v8 + 80);
            v59 = *(_OWORD *)(v8 + 48);
            *(_QWORD *)(v8 + 48) = v57;
            *(_QWORD *)(v8 + 56) = v58;
            *(_OWORD *)(v8 + 72) = v59;
            *(float *)(v8 + 64) = v55;
            *(float *)(v8 + 88) = v56;
            v60 = *(float *)(v8 + 40);
            if (v55 < v60)
            {
              v61 = *(_OWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = v57;
              *(_QWORD *)(v8 + 32) = v58;
              *(_OWORD *)(v8 + 48) = v61;
              *(float *)(v8 + 40) = v55;
              *(float *)(v8 + 64) = v60;
              v62 = *(float *)(v8 + 16);
              if (v55 < v62)
              {
                v63 = *(_OWORD *)v8;
                *(_QWORD *)v8 = v57;
                *(_QWORD *)(v8 + 8) = v58;
                *(_OWORD *)(v8 + 24) = v63;
                *(float *)(v8 + 16) = v55;
                *(float *)(v8 + 40) = v62;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 575)
        {
          v64 = (_OWORD *)(v8 + 24);
          v66 = v8 == a2 || v64 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v66)
            {
              v67 = 0;
              v68 = (_OWORD *)v8;
              do
              {
                v69 = *((float *)v68 + 10);
                v70 = *((float *)v68 + 4);
                v68 = v64;
                if (v69 < v70)
                {
                  v71 = *v64;
                  v72 = v67;
                  while (1)
                  {
                    v73 = v8 + v72;
                    v74 = *(_QWORD *)(v8 + v72 + 8);
                    *(_QWORD *)(v73 + 24) = *(_QWORD *)(v8 + v72);
                    *(_QWORD *)(v73 + 32) = v74;
                    *(_DWORD *)(v73 + 40) = *(_DWORD *)(v8 + v72 + 16);
                    if (!v72)
                      break;
                    v72 -= 24;
                    if (v69 >= *(float *)(v73 - 8))
                    {
                      v75 = v8 + v72 + 24;
                      goto LABEL_80;
                    }
                  }
                  v75 = v8;
LABEL_80:
                  *(_OWORD *)v75 = v71;
                  *(float *)(v75 + 16) = v69;
                }
                v64 = (_OWORD *)((char *)v68 + 24);
                v67 += 24;
              }
              while ((_OWORD *)((char *)v68 + 24) != (_OWORD *)a2);
            }
          }
          else if (!v66)
          {
            v104 = (float *)(v8 + 40);
            do
            {
              v105 = *(float *)(v7 + 40);
              v106 = *(float *)(v7 + 16);
              v7 = (uint64_t)v64;
              if (v105 < v106)
              {
                v107 = *v64;
                v108 = v104;
                do
                {
                  v109 = v108;
                  v110 = *((_QWORD *)v108 - 4);
                  *((_QWORD *)v108 - 2) = *((_QWORD *)v108 - 5);
                  *((_QWORD *)v108 - 1) = v110;
                  v111 = *((_DWORD *)v108 - 6);
                  v108 -= 6;
                  *(_DWORD *)v109 = v111;
                }
                while (v105 < *(v109 - 12));
                *((_OWORD *)v108 - 1) = v107;
                *v108 = v105;
              }
              v64 = (_OWORD *)(v7 + 24);
              v104 += 6;
            }
            while (v7 + 24 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v76 = (unint64_t)(v10 - 2) >> 1;
          v77 = v76;
          do
          {
            v78 = v77;
            if (v76 >= v77)
            {
              v79 = (2 * v77) | 1;
              v80 = v8 + 24 * v79;
              if (2 * v78 + 2 < v10 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
              {
                v80 += 24;
                v79 = 2 * v78 + 2;
              }
              v81 = v8 + 24 * v78;
              v82 = *(float *)(v80 + 16);
              v83 = *(float *)(v81 + 16);
              if (v82 >= v83)
              {
                v84 = *(_OWORD *)v81;
                do
                {
                  v85 = v81;
                  v81 = v80;
                  *(_QWORD *)v85 = *(_QWORD *)v80;
                  *(_QWORD *)(v85 + 8) = *(_QWORD *)(v80 + 8);
                  *(float *)(v85 + 16) = v82;
                  if (v76 < v79)
                    break;
                  v86 = 2 * v79;
                  v79 = (2 * v79) | 1;
                  v80 = v8 + 24 * v79;
                  v87 = v86 + 2;
                  if (v87 < v10 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
                  {
                    v80 += 24;
                    v79 = v87;
                  }
                  v82 = *(float *)(v80 + 16);
                }
                while (v82 >= v83);
                *(_OWORD *)v81 = v84;
                *(float *)(v81 + 16) = v83;
              }
            }
            v77 = v78 - 1;
          }
          while (v78);
          v88 = v9 / 0x18uLL;
          while (2)
          {
            v89 = 0;
            v90 = *(_QWORD *)v8;
            v91 = *(_QWORD *)(v8 + 8);
            v92 = *(float *)(v8 + 16);
            v93 = v8;
            do
            {
              v94 = v93;
              v93 += 24 * v89 + 24;
              v95 = 2 * v89;
              result = (2 * v89) | 1;
              v89 = result;
              v96 = v95 + 2;
              if (v96 < v88 && *(float *)(v93 + 16) < *(float *)(v93 + 40))
              {
                v93 += 24;
                v89 = v96;
              }
              *(_QWORD *)v94 = *(_QWORD *)v93;
              *(_QWORD *)(v94 + 8) = *(_QWORD *)(v93 + 8);
              *(_DWORD *)(v94 + 16) = *(_DWORD *)(v93 + 16);
            }
            while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
            if (v93 != a2 - 24)
            {
              *(_QWORD *)v93 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(v93 + 8) = *(_QWORD *)(a2 - 16);
              *(_DWORD *)(v93 + 16) = *(_DWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 24) = v90;
              *(_QWORD *)(a2 - 16) = v91;
              *(float *)(a2 - 8) = v92;
              v97 = v93 - v8 + 24;
              if (v97 >= 25)
              {
                v98 = (v97 / 0x18uLL - 2) >> 1;
                v99 = v8 + 24 * v98;
                v100 = *(float *)(v99 + 16);
                v92 = *(float *)(v93 + 16);
                if (v100 < v92)
                {
                  v101 = *(_OWORD *)v93;
                  do
                  {
                    v102 = v93;
                    v93 = v99;
                    *(_QWORD *)v102 = *(_QWORD *)v99;
                    *(_QWORD *)(v102 + 8) = *(_QWORD *)(v99 + 8);
                    *(float *)(v102 + 16) = v100;
                    if (!v98)
                      break;
                    v98 = (v98 - 1) >> 1;
                    v99 = v8 + 24 * v98;
                    v100 = *(float *)(v99 + 16);
                  }
                  while (v100 < v92);
                  *(_OWORD *)v93 = v101;
LABEL_112:
                  *(float *)(v93 + 16) = v92;
                }
              }
              a2 -= 24;
              if (v88-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v93 = v90;
          *(_QWORD *)(v93 + 8) = v91;
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 24 * v11), (float *)v7, (float *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v7, (float *)(v7 + 24 * v11), (float *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (float *)(v7 + 24 * v11 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 24), v14, (float *)(a2 - 48));
          v15 = (float *)(v7 + 24 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v7 + 48), v15, (float *)(a2 - 72));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v14, (float *)v12, v15);
          v16 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v16;
          LODWORD(v16) = *(_DWORD *)(v7 + 16);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(float *)(v7 + 16);
          if (*(float *)(v7 - 8) < v17)
            goto LABEL_12;
          if (v17 >= *(float *)(a2 - 8))
          {
            v36 = v7 + 24;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = *(float *)(v36 + 16);
              v36 += 24;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 24;
              v35 = *(float *)(v34 + 40);
              v34 += 24;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 24;
              v40 = *(float *)(v39 - 8);
              v39 -= 24;
            }
            while (v17 < v40);
          }
          v41 = *(_OWORD *)v7;
          while (v8 < v38)
          {
            v42 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v38;
            *(_QWORD *)v38 = v42;
            v43 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = v43;
            v44 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v38 + 16);
            *(_DWORD *)(v38 + 16) = v44;
            do
            {
              v45 = *(float *)(v8 + 40);
              v8 += 24;
            }
            while (v17 >= v45);
            do
            {
              v46 = *(float *)(v38 - 8);
              v38 -= 24;
            }
            while (v17 < v46);
          }
          if (v8 - 24 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_OWORD *)(v8 - 24) = v41;
          *(float *)(v8 - 8) = v17;
          continue;
        }
        v17 = *(float *)(v7 + 16);
LABEL_12:
        v18 = 0;
        v19 = *(_OWORD *)v7;
        do
        {
          v20 = *(float *)(v7 + v18 + 40);
          v18 += 24;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 24)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 24;
            v26 = *(float *)(v25 - 8);
            v25 -= 24;
            if (v26 < v17)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 24;
            v24 = *(float *)(v22 - 8);
            v22 -= 24;
          }
          while (v24 >= v17);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v27;
            *(_QWORD *)v27 = v28;
            v29 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v27 + 8);
            *(_QWORD *)(v27 + 8) = v29;
            v30 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v27 + 16);
            *(_DWORD *)(v27 + 16) = v30;
            do
            {
              v31 = *(float *)(v8 + 40);
              v8 += 24;
            }
            while (v31 < v17);
            do
            {
              v32 = *(float *)(v27 - 8);
              v27 -= 24;
            }
            while (v32 >= v17);
          }
          while (v8 < v27);
        }
        if (v8 - 24 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 - 8);
        }
        *(_OWORD *)(v8 - 24) = v19;
        *(float *)(v8 - 8) = v17;
        if (v21 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(v7, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(v7, v8 - 24);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 24;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  __int128 v30;
  float v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)(a1 + 16);
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v9;
        *(float *)(a1 + 16) = v6;
        *(float *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a1 + 72));
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 88);
      if (v20 < v21)
      {
        v22 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v22;
        v23 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v23;
        *(float *)(a1 + 88) = v20;
        *(float *)(a2 - 8) = v21;
        v24 = *(float *)(a1 + 88);
        v25 = *(float *)(a1 + 64);
        if (v24 < v25)
        {
          v26 = *(_QWORD *)(a1 + 72);
          v27 = *(_QWORD *)(a1 + 80);
          v28 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v26;
          *(_QWORD *)(a1 + 56) = v27;
          *(_OWORD *)(a1 + 72) = v28;
          *(float *)(a1 + 64) = v24;
          *(float *)(a1 + 88) = v25;
          v29 = *(float *)(a1 + 40);
          if (v24 < v29)
          {
            v30 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v26;
            *(_QWORD *)(a1 + 32) = v27;
            *(_OWORD *)(a1 + 48) = v30;
            *(float *)(a1 + 40) = v24;
            *(float *)(a1 + 64) = v29;
            v31 = *(float *)(a1 + 16);
            if (v24 < v31)
            {
              v32 = *(_OWORD *)a1;
              *(_QWORD *)a1 = v26;
              *(_QWORD *)(a1 + 8) = v27;
              *(_OWORD *)(a1 + 24) = v32;
              *(float *)(a1 + 16) = v24;
              *(float *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 16);
    if (v14 < *(float *)(v10 + 16))
    {
      v15 = *(_OWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_QWORD *)(a1 + v16 + 56);
        *(_QWORD *)(v17 + 72) = *(_QWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 80) = v18;
        *(_DWORD *)(v17 + 88) = *(_DWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v14 >= *(float *)(v17 + 40))
        {
          v19 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_OWORD *)v19 = v15;
      *(float *)(v19 + 16) = v14;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_219D8134C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_219D815BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<long long>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DBE91D0, MEMORY[0x24BEDAB00]);
}

void sub_219D81620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__erase_unique<long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

double homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  double result;

  *(_QWORD *)this = off_24DBEB6E0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  return result;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::initBufferWithData(homeai::mod::ImageDescriptorBufferAbstract *this, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _QWORD *v10;
  char *v11;

  if (a2)
  {
    v9 = 0;
    v11 = (char *)this + 40;
    v10 = (_QWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)this + 32, v10);
    *((_QWORD *)v11 - 1) = v11;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = a2;
    *((_QWORD *)v11 + 3) = a3;
    *((_QWORD *)v11 + 4) = a4;
    *((_QWORD *)v11 + 5) = a4;
    v11[48] = a5;
  }
  else
  {
    v9 = -3;
  }
  return (v9 + 128) | 0xE00;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(uint64_t a1, _QWORD **a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;

  *(_QWORD *)a1 = off_24DBEB6E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 88) = a6;
  inited = homeai::mod::ImageDescriptorBufferAbstract::initBufferWithData((homeai::mod::ImageDescriptorBufferAbstract *)a1, a3, a4, a5, a6);
  if ((inited & 0x80) == 0)
  {
    v11 = inited;
    exception = __cxa_allocate_exception(8uLL);
    *exception = v11;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  v9 = homeai::mod::ImageDescriptorBufferAbstract::resetDescriptorIds((_QWORD *)a1, a2);
  if ((v9 & 0x80) == 0)
  {
    v13 = __cxa_allocate_exception(8uLL);
    *v13 = v9;
    __cxa_throw(v13, MEMORY[0x24BEDB7D0], 0);
  }
  return a1;
}

void sub_219D81B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void *v6;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v2, *v4);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::resetDescriptorIds(_QWORD *a1, _QWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;

  if (a1[9] == a2[1] - *a2)
  {
    v4 = (uint64_t)(a1 + 1);
    a1[2] = a1[1];
    v5 = a1 + 4;
    v6 = a1 + 5;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)(a1 + 4), (_QWORD *)a1[5]);
    *(_QWORD *)(v4 + 24) = v6;
    *(_QWORD *)(v4 + 40) = 0;
    *v6 = 0;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(*a2, a2[1], v4);
    v15 = 0;
    v16 = 0;
    __p = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
    v18 = 0;
    v19 = 0;
    v17 = (uint64_t *)&v18;
    v7 = (char *)__p;
    if ((int)((unint64_t)(v15 - (_BYTE *)__p) >> 3) >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v20 = &v7[v8];
        *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v17, (uint64_t *)&v7[v8], (uint64_t)&std::piecewise_construct, (_QWORD **)&v20)+ 10) = v9++;
        v7 = (char *)__p;
        v8 += 8;
      }
      while (v9 < (int)((unint64_t)(v15 - (_BYTE *)__p) >> 3));
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)v5, (_QWORD *)a1[5]);
    v10 = v18;
    a1[4] = v17;
    a1[5] = v10;
    v11 = v19;
    a1[6] = v19;
    if (v11)
    {
      v10[2] = v6;
      v17 = (uint64_t *)&v18;
      v18 = 0;
      v19 = 0;
      v10 = 0;
    }
    else
    {
      *v5 = v6;
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v17, v10);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    v12 = &CVML_status_ok;
  }
  else
  {
    v12 = &CVML_status_invalidParameter;
  }
  return (*v12 + 128) | 0xE00;
}

void sub_219D81D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a12, a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::appendDescriptors(homeai::mod::ImageDescriptorBufferAbstract *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void *DataForKthDescriptor;
  const void *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v28;

  if (!*((_QWORD *)a2 + 9))
  {
LABEL_39:
    v5 = 128;
    return v5 | 0xE00;
  }
  v4 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
  if (v4 != (*(uint64_t (**)(const homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a2 + 104))(a2))
  {
    v5 = 124;
    return v5 | 0xE00;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v6 != v7)
  {
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    if (v8 == v9 && *((_QWORD *)a2 + 9))
    {
      v5 = 124;
      return v5 | 0xE00;
    }
    if (*((_QWORD *)this + 9) == (v7 - v6) >> 3)
      goto LABEL_13;
LABEL_12:
    v5 = 124;
    return v5 | 0xE00;
  }
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  if (*((_QWORD *)this + 9))
  {
    if (v8 == v9)
    {
      v10 = *((_QWORD *)a2 + 9);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
LABEL_13:
  v10 = *((_QWORD *)a2 + 9);
  if (v8 != v9 && v10 != (v9 - v8) >> 3)
  {
    v5 = 124;
    return v5 | 0xE00;
  }
LABEL_17:
  if (!*((_QWORD *)this + 6) || !*((_QWORD *)a2 + 6) || (int)v10 < 1)
  {
LABEL_32:
    v18 = *((_QWORD *)this + 9);
    homeai::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(this, (int)v10 + (int)v18, 1);
    if ((int)v10 >= 1)
    {
      v19 = 0;
      do
      {
        DataForKthDescriptor = (void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, (int)v18 + v19);
        v21 = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a2, v19);
        v22 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
        memcpy(DataForKthDescriptor, v21, v22);
        ++v19;
      }
      while (v10 != v19);
    }
    v23 = (_QWORD *)*((_QWORD *)a2 + 1);
    v24 = (_QWORD *)*((_QWORD *)a2 + 2);
    if (v23 != v24)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(v23, v24, (uint64_t)this + 8);
      if ((int)v10 >= 1)
      {
        v25 = 0;
        v26 = (uint64_t **)((char *)this + 32);
        do
        {
          v28 = (uint64_t *)(*((_QWORD *)a2 + 1) + v25);
          *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v26, v28, (uint64_t)&std::piecewise_construct, &v28)+ 10) = v18;
          LODWORD(v18) = v18 + 1;
          v25 += 8;
        }
        while (8 * v10 != v25);
      }
    }
    goto LABEL_39;
  }
  v11 = 0;
  v5 = 124;
  while (1)
  {
    if (*((_QWORD *)this + 5))
    {
      v12 = *(_QWORD *)(v8 + 8 * v11);
      v13 = (_QWORD *)((char *)this + 40);
      v14 = (_QWORD *)*((_QWORD *)this + 5);
      do
      {
        v15 = v14[4];
        v16 = v15 < v12;
        if (v15 >= v12)
          v17 = v14;
        else
          v17 = v14 + 1;
        if (!v16)
          v13 = v14;
        v14 = (_QWORD *)*v17;
      }
      while (*v17);
      if (v13 != (_QWORD *)((char *)this + 40) && v12 >= v13[4])
        return v5 | 0xE00;
    }
    if (++v11 == v10)
      goto LABEL_32;
  }
}

void *homeai::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(homeai::mod::ImageDescriptorBufferAbstract *this, unint64_t a2, char a3)
{
  uint64_t v6;
  void *result;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *exception;

  if (!(*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this))
  {
    v6 = 126;
    goto LABEL_21;
  }
  if (*((_QWORD *)this + 10) < a2
    || (result = (void *)(*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this
                                                                                                 + 104))(this),
        (unint64_t)result > *((_QWORD *)this + 8)))
  {
    v8 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
    v9 = *((_QWORD *)this + 8);
    if (v8 <= v9)
    {
      v10 = (void *)*((_QWORD *)this + 7);
      if (v10 && (a3 & 1) != 0)
      {
        if (!*((_BYTE *)this + 88))
        {
          v12 = malloc_type_malloc(v9 * a2, 0x36ADFC7EuLL);
          *((_QWORD *)this + 7) = v12;
          if (!v12)
            goto LABEL_16;
          result = memcpy(v12, v10, *((_QWORD *)this + 9) * *((_QWORD *)this + 8));
LABEL_17:
          *((_QWORD *)this + 9) = a2;
          *((_QWORD *)this + 10) = a2;
          *((_BYTE *)this + 88) = 1;
          return result;
        }
        result = malloc_type_realloc(*((void **)this + 7), v9 * a2, 0xA85CFBA0uLL);
LABEL_15:
        *((_QWORD *)this + 7) = result;
        if (!result)
        {
LABEL_16:
          v6 = 123;
LABEL_21:
          v13 = v6 | 0xE00;
          exception = __cxa_allocate_exception(8uLL);
          *exception = v13;
          __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
        }
        goto LABEL_17;
      }
    }
    else
    {
      *((_QWORD *)this + 8) = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
      v10 = (void *)*((_QWORD *)this + 7);
    }
    if (v10)
    {
      if (*((_BYTE *)this + 88))
        free(v10);
    }
    v11 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
    *((_QWORD *)this + 8) = v11;
    result = malloc_type_malloc(v11 * a2, 0x1C09794BuLL);
    goto LABEL_15;
  }
  *((_QWORD *)this + 9) = a2;
  return result;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorAtIndex(homeai::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *DataForKthDescriptor;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  char *v22;
  int v23;
  uint64_t v24;
  _QWORD *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v6 = *((int *)this + 18);
  if ((int)v6 <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  v7 = v6 - 1;
  if ((int)v6 - 1 > a2)
  {
    DataForKthDescriptor = (void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a2);
    v9 = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, (int)v7);
    memcpy(DataForKthDescriptor, v9, *((_QWORD *)this + 8));
    v10 = *((_QWORD *)this + 1);
    if (v10 != *((_QWORD *)this + 2))
    {
      v28 = *(_QWORD *)(v10 + 8 * a2);
      v27 = *(_QWORD *)(v10 + 8 * (int)v7);
      v29 = &v28;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v28, (uint64_t)&std::piecewise_construct, &v29)+ 10) = v7;
      v29 = &v27;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v27, (uint64_t)&std::piecewise_construct, &v29)+ 10) = a2;
      v11 = *((_QWORD *)this + 1);
      *(_QWORD *)(v11 + 8 * a2) = v27;
      *(_QWORD *)(v11 + 8 * (int)v7) = v28;
    }
    if (a3)
    {
      v12 = *(_QWORD *)(a3 + 16);
      v13 = *(int **)(a3 + 8);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(int **)a3;
        v16 = ((uint64_t)v13 - *(_QWORD *)a3) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v19);
          v15 = *(int **)a3;
          v13 = *(int **)(a3 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (int *)&v20[4 * v16];
        v22 = &v20[4 * v19];
        *v21 = a2;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v23 = *--v13;
          *--v21 = v23;
        }
        *(_QWORD *)a3 = v21;
        *(_QWORD *)(a3 + 8) = v14;
        *(_QWORD *)(a3 + 16) = v22;
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = a2;
        v14 = v13 + 1;
      }
      *(_QWORD *)(a3 + 8) = v14;
    }
  }
  v24 = *((_QWORD *)this + 1);
  if (v24 != *((_QWORD *)this + 2))
  {
    v29 = *(uint64_t **)(v24 + 8 * v7);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t)this + 32, (uint64_t *)&v29);
    *((_QWORD *)this + 2) -= 8;
  }
  --*((_QWORD *)this + 9);
  return 3712;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorsAtIndexes(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _BOOL4 v10;
  int *v12;
  int *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(*a2, a2[1], (uint64_t)&v12);
  v6 = 126 - 2 * __clz(v13 - v12);
  if (v13 == v12)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v12, v13, (uint64_t)&v15, v7, 1);
  v8 = v12;
  if ((int)((unint64_t)((char *)v13 - (char *)v12) >> 2) < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v3 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 48))(a1, v8[v9], a3);
      v10 = (v3 & 0x80) == 0;
      v8 = v12;
      if ((v3 & 0x80) == 0)
        break;
      ++v9;
    }
    while (v9 < (int)((unint64_t)((char *)v13 - (char *)v12) >> 2));
  }
  if (v8)
  {
    v13 = v8;
    operator delete(v8);
  }
  if (v10)
    return v3;
  else
    return 3712;
}

void sub_219D824D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorsWithIds(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *exception;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  void *__p;
  char *v44;
  char *v45;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  v6 = *a2;
  if ((int)((unint64_t)(a2[1] - *a2) >> 3) >= 1)
  {
    v7 = 0;
    do
    {
      v42 = 0;
      v42 = *(_QWORD *)(v6 + 8 * v7);
      v39 = &v42;
      v8 = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v42, (uint64_t)&std::piecewise_construct, (_QWORD **)&v39);
      v9 = v8;
      v10 = v44;
      if (v44 >= v45)
      {
        v12 = (char *)__p;
        v13 = (v44 - (_BYTE *)__p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v45 - (_BYTE *)__p;
        if ((v45 - (_BYTE *)__p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, v16);
          v12 = (char *)__p;
          v10 = v44;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *((_DWORD *)v9 + 10);
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        __p = v18;
        v44 = v11;
        v45 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v8 + 10);
        v11 = v10 + 4;
      }
      v44 = v11;
      ++v7;
      v6 = *a2;
    }
    while (v7 < (int)((unint64_t)(a2[1] - *a2) >> 3));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v20 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 56))(a1, &__p, &v39);
  if ((v20 & 0x80) != 0)
  {
    if (a3)
    {
      v22 = (int *)v39;
      v21 = v40;
      if ((int)((unint64_t)(v40 - (_BYTE *)v39) >> 2) >= 1)
      {
        v23 = 0;
        do
        {
          v24 = v22[v23];
          v25 = *(_QWORD *)(a1 + 8);
          if ((int)v24 < (int)((unint64_t)(*(_QWORD *)(a1 + 16) - v25) >> 3))
          {
            v27 = *(_QWORD **)(a3 + 8);
            v26 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v27 >= v26)
            {
              v29 = *(_QWORD **)a3;
              v30 = ((uint64_t)v27 - *(_QWORD *)a3) >> 3;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 2 > v31)
                v31 = v32 >> 2;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(a3 + 16, v33);
                v29 = *(_QWORD **)a3;
                v27 = *(_QWORD **)(a3 + 8);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[8 * v30];
              *(_QWORD *)v35 = *(_QWORD *)(v25 + 8 * v24);
              v28 = v35 + 8;
              while (v27 != v29)
              {
                v36 = *--v27;
                *((_QWORD *)v35 - 1) = v36;
                v35 -= 8;
              }
              *(_QWORD *)a3 = v35;
              *(_QWORD *)(a3 + 8) = v28;
              *(_QWORD *)(a3 + 16) = &v34[8 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *v27 = *(_QWORD *)(v25 + 8 * v24);
              v28 = v27 + 1;
            }
            *(_QWORD *)(a3 + 8) = v28;
            v22 = (int *)v39;
            v21 = v40;
          }
          ++v23;
        }
        while (v23 < (int)((unint64_t)(v21 - (_BYTE *)v22) >> 2));
      }
    }
    v20 = 3712;
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
  return v20;
}

void sub_219D8281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

float homeai::mod::ImageDescriptorBufferAbstract::computeDistanceFrom(homeai::mod::ImageDescriptorBufferAbstract *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  float v3;
  _QWORD *exception;
  void *__p[3];

  if (*((_QWORD *)this + 9) != 1 || *((_QWORD *)a2 + 9) != 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 80))(__p);
  v3 = *(float *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v3;
}

homeai::mod::ImageDescriptorBufferAbstract *homeai::mod::ImageDescriptorBufferAbstract::setDescriptorIdForKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v10 = a3;
  v6 = *((_QWORD *)this + 1);
  if (v6 == *((_QWORD *)this + 2))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
  }
  v9 = *(_QWORD *)(v6 + 8 * a2);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t)this + 32, &v9);
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2) = a3;
  v11 = &v10;
  *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v10, (uint64_t)&std::piecewise_construct, &v11)+ 10) = a2;
  return this;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::createDeepCopyOfSubset(homeai::mod::ImageDescriptorBufferAbstract *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  const void *DataForKthDescriptor;
  uint64_t *v18;

  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v5 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a1 + 104))(a1);
  v6 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a1 + 16))(a1);
  *(_BYTE *)(v6 + 88) = 1;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)a1 + 8);
  *(_QWORD *)(v6 + 72) = v4 >> 3;
  *(_QWORD *)(v6 + 56) = malloc_type_malloc(*((_QWORD *)a1 + 8) * (v4 >> 3), 0x10BB3D13uLL);
  *(_QWORD *)(v6 + 80) = v4 >> 3;
  if (v6 + 8 != a2)
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v6 + 8), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if ((int)((unint64_t)v4 >> 3) >= 1)
  {
    v7 = 0;
    v8 = (_QWORD *)((char *)a1 + 40);
    v9 = *(char **)(v6 + 56);
    while (1)
    {
      v10 = (_QWORD *)*v8;
      if (!*v8)
        break;
      v11 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v7);
      v12 = (_QWORD *)((char *)a1 + 40);
      do
      {
        v13 = v10[4];
        v14 = v13 < v11;
        if (v13 >= v11)
          v15 = v10;
        else
          v15 = v10 + 1;
        if (!v14)
          v12 = v10;
        v10 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v12 == v8 || v11 < v12[4])
        break;
      DataForKthDescriptor = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a1, *((int *)v12 + 10));
      memcpy(v9, DataForKthDescriptor, v5);
      v18 = (uint64_t *)(*(_QWORD *)a2 + 8 * v7);
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(v6 + 32), v18, (uint64_t)&std::piecewise_construct, &v18)+ 10) = v7++;
      v9 += *((_QWORD *)a1 + 8);
      if (v7 == ((unint64_t)v4 >> 3))
        return v6;
    }
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      return 0;
    }
  }
  return v6;
}

void homeai::mod::ImageDescriptorBufferAbstract::createEmptyCopy(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = 3711;
  __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::print(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  std::locale v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Descriptor count = ", 19);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Descriptor length = ", 20);
  (*(void (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bytes", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x220735180](&v12);
}

void sub_219D82D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void homeai::mod::ImageDescriptorBufferAbstract::getRepresentative()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = 3711;
  __cxa_throw(exception, MEMORY[0x24BEDB7D0], 0);
}

uint64_t std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (!v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int *v61;
  BOOL v63;
  uint64_t v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *(a2 - 1);
        else
          v24 = v9[1];
        if (v22 >= v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        v9[1] = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 >= *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *v9;
        v27 = v9[1];
        if (v26 <= v27)
          v28 = v9[1];
        if (v26 < v27)
          v27 = v26;
        *v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = v9[2];
        else
          v31 = *v9;
        if (*v9 < v29)
          v29 = *v9;
        v9[2] = v29;
        *v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 < v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (v34 >= v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 >= v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 >= v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = v9[1];
        else
          v43 = *v9;
        if (v41 >= v42)
          v41 = v9[1];
        *v9 = v43;
        v9[1] = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *(a2 - 1);
        else
          v46 = v9[3];
        if (v44 >= v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        v9[3] = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 >= v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = v9[2];
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
          v51 = v9[3];
        if (v49 < v50)
          v50 = v49;
        v9[2] = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 < v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 >= v55)
          v56 = *v9;
        if (v58 <= v57)
          v55 = v9[2];
        if (v58 < v57)
          v57 = v58;
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 >= v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *v9 = v55;
        v9[1] = v54;
        if (v59 >= v57)
          v60 = v57;
        else
          v60 = v59;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v9, v17);
          v9 = v17 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(int *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(int *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (int *)((char *)v9 + v68 + 4);
                    goto LABEL_123;
                  }
                }
                v69 = v9;
LABEL_123:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              do
              {
                *v61 = v71;
                v71 = *(v61 - 2);
                --v61;
              }
              while (v70 > v71);
              *v61 = v70;
            }
            v61 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (v52 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (v27 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= v41)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 4;
    if (++v12 == a2)
      return 1;
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 >= v23)
              v22 = v20[1];
            if (*v20 <= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 > v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 >= v11)
          v10 = v8[1];
        if (*v8 > v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 >= v14)
              v10 = v8[1];
            if (*v8 <= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

const __CFString *HMITaskResultCodeAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Success");
  if (a1 == 1)
    v1 = CFSTR("Canceled");
  if (a1 == 2)
    return CFSTR("Error");
  else
    return v1;
}

void sub_219D84730(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_219D84A0C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D84F6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_219D8510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

Class __getVCPHomeKitAnalysisServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!MediaAnalysisLibraryCore_frameworkLibrary)
  {
    MediaAnalysisLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!MediaAnalysisLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VCPHomeKitAnalysisService");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getVCPHomeKitAnalysisServiceClass_block_invoke_cold_1();
    free(v3);
  }
  getVCPHomeKitAnalysisServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_219D86A00(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_219D87E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

id HMIConvertNSDateToIsoDateString(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x24BDD15D0];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "stringFromDate:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_219D8F06C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

const __CFString *HMIFaceFamiliarityAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Known");
  if (!a1)
    v1 = CFSTR("Unknown");
  if (a1 == 1)
    return CFSTR("Uncertain");
  else
    return v1;
}

void sub_219D90388(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D90488(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D90560(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D907FC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D90974(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D90BAC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D90F50(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D913F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D915B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D9190C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D91D0C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D923B0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219D92C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D92E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D93528(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

const __CFString *HMIConfidenceLevelAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Low");
  if (a1 == 1)
    v1 = CFSTR("Medium");
  if (a1 == 2)
    return CFSTR("High");
  else
    return v1;
}

__CFString *HMIErrorCodeAsString(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;

  v2 = a1 + 1;
  v3 = CFSTR("Unexpected error");
  switch(v2)
  {
    case 0:
      return v3;
    case 1:
      goto LABEL_7;
    case 2:
      v3 = CFSTR("Failed to analyze");
      return v3;
    case 3:
      return CFSTR("Video analyzer in error state");
    case 4:
      return CFSTR("Model failed to load");
    case 5:
      return CFSTR("Fragment is invalid");
    case 6:
      return CFSTR("Failed to read fragment");
    case 7:
      return CFSTR("Failed to verify fragment");
    case 8:
      return CFSTR("Failed to transcode fragment");
    default:
      if (a1 == 1001)
        return CFSTR("No pixel buffer");
LABEL_7:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown error code %ld"), a1);
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      return v3;
  }
}

__CFString *HMIErrorCodeName(uint64_t a1)
{
  __CFString *v2;
  __CFString *result;

  switch(a1)
  {
    case 1001:
      v2 = CFSTR("HMIPrivateErrorCodeNilPixelBuffer");
      goto LABEL_3;
    case 1002:
      result = CFSTR("HMIPrivateErrorCodeEmptyURL");
      break;
    case 1003:
      result = CFSTR("HMIPrivateErrorCodeAVAssetReaderInitializationFailed");
      break;
    case 1004:
      result = CFSTR("HMIPrivateErrorCodeFailedToLoadProperty");
      break;
    case 1005:
      result = CFSTR("HMIPrivateErrorCodeAssetLoadCancelled");
      break;
    case 1006:
      result = CFSTR("HMIPrivateErrorCodeReadingStartFailed");
      break;
    case 1007:
      result = CFSTR("HMIPrivateErrorCodeNoTrackOutput");
      break;
    case 1008:
      result = CFSTR("HMIPrivateErrorCodeSampleBufferUnavailable");
      break;
    case 1009:
      result = CFSTR("HMIPrivateErrorCodeNoVideoTrackFound");
      break;
    case 1010:
      result = CFSTR("HMIPrivateErrorCodeMultipleVideoTracksFound");
      break;
    case 1011:
      result = CFSTR("HMIPrivateErrorInvalidPresentationTime");
      break;
    case 1012:
      result = CFSTR("HMIPrivateErrorAVAssetReaderNotStarted");
      break;
    case 1013:
      result = CFSTR("HMIPrivateErrorCodeSequentialIntegrityViolated");
      break;
    case 1014:
    case 1016:
    case 1037:
    case 1038:
    case 1039:
    case 1041:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
LABEL_44:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("ERROR_%ld"), a1);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_3:
      result = v2;
      break;
    case 1015:
      result = CFSTR("HMIPrivateErrorCodeInvalidVideoFrameFormatToSave");
      break;
    case 1017:
      result = CFSTR("HMIPrivateErrorCodeAnalysisServiceNoConfiguration");
      break;
    case 1018:
      result = CFSTR("HMIPrivateErrorCodeLoadingCoreMLModelFailed");
      break;
    case 1019:
      result = CFSTR("HMIPrivateErrorCodeCoreMLPredictionFailed");
      break;
    case 1020:
      result = CFSTR("HMIPrivateErrorCodeCoreMLOutputIncorrect");
      break;
    case 1021:
      result = CFSTR("HMIPrivateErrorCodeCropAndResizeFailed");
      break;
    case 1022:
      result = CFSTR("HMIPrivateErrorCodeScalerError");
      break;
    case 1023:
      result = CFSTR("HMIPrivateErrorCodeCodecNotAvailable");
      break;
    case 1024:
      result = CFSTR("HMIPrivateErrorCodeEncodingFailed");
      break;
    case 1025:
      result = CFSTR("HMIPrivateErrorCodeFaceprintingFailed");
      break;
    case 1026:
      result = CFSTR("HMIPrivateErrorCodeUpdatePersonsModelTaskFailed");
      break;
    case 1027:
      result = CFSTR("HMIPrivateErrorCodeRemovePersonsModelTaskFailed");
      break;
    case 1028:
      result = CFSTR("HMIPrivateErrorCodeHomePersonClusteringTaskFailed");
      break;
    case 1029:
      result = CFSTR("HMIPrivateErrorCodeFaceMisclassificationTaskFailed");
      break;
    case 1030:
      result = CFSTR("HMIPrivateErrorCodePersonsModelsSummaryTaskFailed");
      break;
    case 1031:
      result = CFSTR("HMIPrivateErrorCodeExternalPersonSourceDiskError");
      break;
    case 1032:
      result = CFSTR("HMIPrivateErrorCodeLoadPersonsModelsFailed");
      break;
    case 1033:
      result = CFSTR("HMIPrivateErrorCodeUpdatePersonsModelFailed");
      break;
    case 1034:
      result = CFSTR("HMIPrivateErrorCodeRemovePersonsModelFailed");
      break;
    case 1035:
      result = CFSTR("HMIPrivateErrorCodePersonsModelPredictionFailed");
      break;
    case 1036:
      result = CFSTR("HMIPrivateErrorCodeNilDataSource");
      break;
    case 1040:
      result = CFSTR("HMIPrivateErrorCodeCleanupImpureHomePersonsOperationFailed");
      break;
    case 1042:
      result = CFSTR("HMIPrivateErrorCodeUnknownTask");
      break;
    case 1049:
      result = CFSTR("HMIPrivateErrorCodeFeedbackServiceInternalServerError");
      break;
    case 1050:
      result = CFSTR("HMIPrivateErrorCodeFeedbackServiceResourceNotFoundError");
      break;
    default:
      v2 = CFSTR("HMIErrorCodeUnexpectedError");
      switch(a1)
      {
        case -1:
          goto LABEL_3;
        case 1:
          result = CFSTR("HMIErrorCodeFailedToAnalyze");
          break;
        case 2:
          result = CFSTR("HMIErrorCodeAnalyzerInErrorState");
          break;
        case 3:
          result = CFSTR("HMIErrorCodeModelFailedToLoad");
          break;
        case 4:
          result = CFSTR("HMIErrorCodeFragmentIsInvalid");
          break;
        case 5:
          result = CFSTR("HMIErrorCodeFailedToReadFragment");
          break;
        case 6:
          result = CFSTR("HMIErrorCodeFailedToVerifyFragment");
          break;
        case 7:
          result = CFSTR("HMIErrorcodeFailedToTranscodeFragment");
          break;
        default:
          goto LABEL_44;
      }
      break;
  }
  return result;
}

void HMIErrorLog(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x220735570]();
  v6 = v3;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMIErrorCodeName(objc_msgSend(v4, "code"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543874;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    v14 = 2112;
    v15 = v4;
    _os_log_impl(&dword_219D45000, v7, OS_LOG_TYPE_ERROR, "%{public}@%@: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v5);

}

void HMIErrorLogC(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = (void *)MEMORY[0x220735570]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HMIErrorCodeName(objc_msgSend(v1, "code"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543874;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    v10 = 2112;
    v11 = v1;
    _os_log_impl(&dword_219D45000, v3, OS_LOG_TYPE_ERROR, "%{public}@%@: %@", (uint8_t *)&v6, 0x20u);

  }
  objc_autoreleasePoolPop(v2);

}

void sub_219D95A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

void getTimeRangeAssetTrackProperty(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  void (*v9)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  CFTypeRef v10;
  void (*v11)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, CMTimeRange *);
  CFTypeRef v14;
  unsigned int (*v15)(CFTypeRef, CMTimeRange *);
  CMTimeEpoch v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CMTimeRange *);
  const void *v19;
  uint64_t v20;
  void (*value)(uint64_t, _QWORD, uint64_t, CMTime *);
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, CMTimeRange *);
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t, CMTimeRange *);
  CFTypeID v26;
  __int128 v27;
  __int128 v28;
  CMTime cf;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v32;
  CMTimeRange v33[2];
  CMTimeRange v34[2];
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;

  v36 = 0;
  v37 = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  v4 = *(_OWORD *)(MEMORY[0x24BDC0D78] + 16);
  *(_OWORD *)&v32.start.value = *MEMORY[0x24BDC0D78];
  *(_OWORD *)&v32.start.epoch = v4;
  *(_OWORD *)&v32.duration.timescale = *(_OWORD *)(MEMORY[0x24BDC0D78] + 32);
  v5 = *MEMORY[0x24BDBD240];
  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7 || (v7(FigBaseObject, *MEMORY[0x24BDDCF98], v5, &v37), (v8 = v37) == 0))
  {
    v28 = *MEMORY[0x24BDC0D88];
    *(_OWORD *)&range.start.value = *MEMORY[0x24BDC0D88];
    v16 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
    range.start.epoch = v16;
    otherRange.start.value = 0;
    v17 = FigTrackReaderGetFigBaseObject();
    v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (!v18 || (v18(v17, *MEMORY[0x24BDDCFB8], v5, &otherRange), (v19 = (const void *)otherRange.start.value) == 0))
    {
      cf.value = 0;
      v20 = FigFormatReaderGetFigBaseObject();
      value = *(void (**)(uint64_t, _QWORD, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (value)
      {
        value(v20, *MEMORY[0x24BDDCF28], v5, &cf);
        value = (void (*)(uint64_t, _QWORD, uint64_t, CMTime *))cf.value;
      }
      if (value != (void (*)(uint64_t, _QWORD, uint64_t, CMTime *))*MEMORY[0x24BDBD270])
      {
        v22 = FigFormatReaderGetFigBaseObject();
        v23 = *(void (**)(uint64_t, _QWORD, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v23)
          v23(v22, *MEMORY[0x24BDDCF20], v5, &otherRange);
      }
      if (!otherRange.start.value)
      {
        v24 = FigFormatReaderGetFigBaseObject();
        v25 = *(void (**)(uint64_t, _QWORD, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v25)
          v25(v24, *MEMORY[0x24BDDCF18], v5, &otherRange);
      }
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
      v19 = (const void *)otherRange.start.value;
      if (!otherRange.start.value)
        goto LABEL_28;
    }
    v26 = CFGetTypeID(v19);
    if (v26 == CFDictionaryGetTypeID())
    {
      CMTimeMakeFromDictionary(&range.start, (CFDictionaryRef)otherRange.start.value);
    }
    else
    {
LABEL_28:
      *(_OWORD *)&range.start.value = v28;
      range.start.epoch = v16;
    }
    if (otherRange.start.value)
      CFRelease((CFTypeRef)otherRange.start.value);
    *(_OWORD *)&otherRange.start.value = v28;
    otherRange.start.epoch = v16;
    cf = range.start;
    CMTimeRangeMake(&v32, &otherRange.start, &cf);
    goto LABEL_32;
  }
  v9 = *(void (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v9)
  {
    *(_OWORD *)&range.start.value = *MEMORY[0x24BDC0D48];
    range.start.epoch = *(_QWORD *)(MEMORY[0x24BDC0D48] + 16);
    v9(v8, &range, &v36);
  }
  v10 = v37;
  v11 = *(void (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11
    || (*(_OWORD *)&range.start.value = *MEMORY[0x24BDC0D58],
        range.start.epoch = *(_QWORD *)(MEMORY[0x24BDC0D58] + 16),
        v11(v10, &range, &v35),
        (v12 = v36) == 0)
    || !v35)
  {
LABEL_32:
    v27 = *(_OWORD *)&v32.start.epoch;
    *a3 = *(_OWORD *)&v32.start.value;
    a3[1] = v27;
    a3[2] = *(_OWORD *)&v32.duration.timescale;
    goto LABEL_33;
  }
  v13 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v13)
  {
    if (!v13(v12, v34))
    {
      v14 = v35;
      v15 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v15)
      {
        if (!v15(v14, v33))
        {
          range = v34[1];
          otherRange = v33[1];
          CMTimeRangeGetUnion(&v32, &range, &otherRange);
          goto LABEL_32;
        }
      }
    }
  }
LABEL_33:
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (v37)
    CFRelease(v37);
}

void sub_219D96C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_219D97060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_219D9918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_219D99870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_219D9AC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219D9B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double HMIExpandFaceRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9;
  CGFloat v10;
  CGFloat v11;
  double result;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v9 = a5 + -1.0;
  v10 = -(CGRectGetWidth(*(CGRect *)&a1) * (a5 + -1.0)) * 0.5;
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  v11 = -(CGRectGetHeight(v13) * v9) * 0.5;
  v14.origin.x = a1;
  v14.origin.y = a2;
  v14.size.width = a3;
  v14.size.height = a4;
  v15 = CGRectInset(v14, v10, v11);
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = 1.0;
  v16.size.height = 1.0;
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v15, v16);
  return result;
}

uint64_t getImagePropertiesFromCGImageSource(CGImageSource *a1, int *a2, size_t *a3, size_t *a4)
{
  uint64_t result;
  CGImage *ImageAtIndex;
  CFDictionaryRef v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  size_t Height;
  size_t Width;
  size_t v16;
  id v17;
  void *context;

  result = 0;
  if (a1 && a2 && a3 && a4)
  {
    context = (void *)MEMORY[0x220735570](0);
    ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0);
    if (!ImageAtIndex)
    {
      objc_msgSend(MEMORY[0x24BDBCE88], "exceptionWithName:reason:userInfo:", *MEMORY[0x24BDBCA98], CFSTR("could not create image ref"), 0);
      v17 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v17);
    }
    v9 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
    v10 = 1;
    -[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x24BDD9698]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
      v10 = objc_msgSend(v11, "intValue");
    if ((v10 - 9) < 0xFFFFFFF8)
      v13 = 1;
    else
      v13 = v10;
    if (v13 > 4)
    {
      Height = CGImageGetHeight(ImageAtIndex);
      Width = CGImageGetWidth(ImageAtIndex);
    }
    else
    {
      Height = CGImageGetWidth(ImageAtIndex);
      Width = CGImageGetHeight(ImageAtIndex);
    }
    v16 = Width;

    CGImageRelease(ImageAtIndex);
    objc_autoreleasePoolPop(context);
    *a2 = v13;
    *a3 = Height;
    result = 1;
    *a4 = v16;
  }
  return result;
}

void sub_219D9F744(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_219D9F770()
{
  JUMPOUT(0x219D9F77CLL);
}

void sub_219D9F784()
{
  JUMPOUT(0x219D9F78CLL);
}

void sub_219DA1DF8(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_219DA235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  id v13;
  void *v14;

  if (a2)
  {
    if (a2 == 2)
    {
      v10 = objc_begin_catch(exception_object);
      v11 = (void *)MEMORY[0x220735570]();
      HMFGetOSLogHandle();
      v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "reason");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(a9) = 138543618;
        *(_QWORD *)((char *)&a9 + 4) = v13;
        WORD6(a9) = 2112;
        *(_QWORD *)((char *)&a9 + 14) = v14;
        _os_log_impl(&dword_219D45000, v12, OS_LOG_TYPE_ERROR, "%{public}@Couldn't retrieve metadata from photos crop:%@", (uint8_t *)&a9, 0x16u);

      }
      objc_autoreleasePoolPop(v11);

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    if (!v9)
      JUMPOUT(0x219DA2280);
    JUMPOUT(0x219DA2274);
  }
  _Unwind_Resume(exception_object);
}

void sub_219DA3E90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_219DAA220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DAA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_219DAB884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_219DABBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DAC834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_219DAD118(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DAD468(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DAD79C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DADDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  os_unfair_lock_s *v39;
  uint64_t v40;

  os_unfair_lock_unlock(v39);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v40 - 240), 8);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_219DAEC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_t lock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Block_object_dispose(&a25, 8);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_219DAF540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_219DAF830(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DAFE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DB0318(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB0604(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB3434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  os_unfair_lock_s *v28;
  uint64_t v29;

  os_unfair_lock_unlock(v28);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_219DB36B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_219DB3880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DB3980(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB43D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DB5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DB5E80(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB5F3C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB67AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_219DB6A5C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB7950(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB8374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_219DB8614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<homeai::clustering::GreedyClusterer>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_219DB88FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a2)
  {

    v20 = __cxa_begin_catch(exception_object);
    v21 = (void *)MEMORY[0x220735570](v20);
    v22 = v14;
    HMFGetOSLogHandle();
    v23 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v18 - 128) = 138543362;
      *(_QWORD *)(v17 + 4) = v24;
      _os_log_impl(&dword_219D45000, v23, OS_LOG_TYPE_ERROR, "%{public}@Clustering error", (uint8_t *)(v18 - 128), 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1540], "hmiPrivateErrorWithCode:", 1047);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if (v13)
      *v13 = objc_retainAutorelease(v25);
    HMIErrorLog(v22, v26);

    __cxa_end_catch();
    JUMPOUT(0x219DB886CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_219DB8D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219DB8E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219DB9304(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer,std::allocator<homeai::clustering::GreedyClusterer>,float,float,float,void>@<X0>(float *a1@<X1>, float *a2@<X2>, float *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__shared_ptr_emplace[abi:ne180100]<float,float,float,std::allocator<homeai::clustering::GreedyClusterer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_219DB948C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__shared_ptr_emplace[abi:ne180100]<float,float,float,std::allocator<homeai::clustering::GreedyClusterer>,0>(_QWORD *a1, float *a2, float *a3, float *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24DBED0D0;
  homeai::clustering::GreedyClusterer::GreedyClusterer((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_219DB94E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24DBED0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24DBED0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_219DB9C8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DB9DF4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id camera_recording_log()
{
  if (camera_recording_log__hmf_once_t0 != -1)
    dispatch_once(&camera_recording_log__hmf_once_t0, &__block_literal_global_28);
  return (id)camera_recording_log__hmf_once_v1;
}

void __camera_recording_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_log__hmf_once_v1;
  camera_recording_log__hmf_once_v1 = v0;

}

id camera_recording_analyzer_log()
{
  if (camera_recording_analyzer_log__hmf_once_t2 != -1)
    dispatch_once(&camera_recording_analyzer_log__hmf_once_t2, &__block_literal_global_6);
  return (id)camera_recording_analyzer_log__hmf_once_v3;
}

void __camera_recording_analyzer_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording_analyzer"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_analyzer_log__hmf_once_v3;
  camera_recording_analyzer_log__hmf_once_v3 = v0;

}

id camera_recording_analyzer_media_log()
{
  if (camera_recording_analyzer_media_log__hmf_once_t4 != -1)
    dispatch_once(&camera_recording_analyzer_media_log__hmf_once_t4, &__block_literal_global_9_1);
  return (id)camera_recording_analyzer_media_log__hmf_once_v5;
}

void __camera_recording_analyzer_media_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording_analyzer_media"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_analyzer_media_log__hmf_once_v5;
  camera_recording_analyzer_media_log__hmf_once_v5 = v0;

}

id camera_recording_analyzer_scheduler_log()
{
  if (camera_recording_analyzer_scheduler_log__hmf_once_t6 != -1)
    dispatch_once(&camera_recording_analyzer_scheduler_log__hmf_once_t6, &__block_literal_global_12_1);
  return (id)camera_recording_analyzer_scheduler_log__hmf_once_v7;
}

void __camera_recording_analyzer_scheduler_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording_analyzer_scheduler"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_analyzer_scheduler_log__hmf_once_v7;
  camera_recording_analyzer_scheduler_log__hmf_once_v7 = v0;

}

id camera_recording_analyzer_scheduler_json_log()
{
  if (camera_recording_analyzer_scheduler_json_log__hmf_once_t8 != -1)
    dispatch_once(&camera_recording_analyzer_scheduler_json_log__hmf_once_t8, &__block_literal_global_15_0);
  return (id)camera_recording_analyzer_scheduler_json_log__hmf_once_v9;
}

void __camera_recording_analyzer_scheduler_json_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording_analyzer_scheduler_json"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_analyzer_scheduler_json_log__hmf_once_v9;
  camera_recording_analyzer_scheduler_json_log__hmf_once_v9 = v0;

}

id camera_recording_maintenance_log()
{
  if (camera_recording_maintenance_log__hmf_once_t10 != -1)
    dispatch_once(&camera_recording_maintenance_log__hmf_once_t10, &__block_literal_global_18_0);
  return (id)camera_recording_maintenance_log__hmf_once_v11;
}

void __camera_recording_maintenance_log_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(CFSTR("camera_recording_maintenance"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)camera_recording_maintenance_log__hmf_once_v11;
  camera_recording_maintenance_log__hmf_once_v11 = v0;

}

void sub_219DBA404(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DBA684(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DBA82C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DBA9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219DBAE30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v30;

  cv::Mat::~Mat((cv::Mat *)&a17, a2);
  cv::Mat::~Mat((cv::Mat *)&a29, v30);
  _Unwind_Resume(a1);
}

void sub_219DBB2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

const __CFString *HMIVideoAnalyzerDecodeModeAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("None");
  if (a1 == 1)
    v1 = CFSTR("IFrameOnly");
  if (a1 == 2)
    return CFSTR("Full");
  else
    return v1;
}

void sub_219DC2A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DC4B00(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC4B78(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC4BF8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC4C98(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC4CFC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC4ED8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DC50F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id objectAsString(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

id objectAsNumber(void *a1)
{
  id v1;
  id v2;
  id v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = objc_alloc_init(MEMORY[0x24BDD16F0]);
      objc_msgSend(v3, "setNumberStyle:", 1);
      objc_msgSend(v3, "numberFromString:", v1);
      v2 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

void sub_219DC5F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DCA1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_219DCD570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id HMIDispatchQueueNameString(void *a1, void *a2)
{
  void *v3;
  __CFString *v4;
  id v5;
  objc_class *v6;
  void *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;

  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = a2;
  v5 = a1;
  v6 = (objc_class *)objc_opt_class();
  NSStringFromClass(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v8 = CFSTR(".");
  else
    v8 = &stru_24DBF1B40;
  if (v4)
    v9 = v4;
  else
    v9 = &stru_24DBF1B40;
  v10 = objc_msgSend(v5, "hash");

  objc_msgSend(v3, "stringWithFormat:", CFSTR("com.apple.HomeAI.%@%@%@.%tu"), v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

unint64_t HMIHashCGRect(double a1, double a2, double a3, double a4)
{
  double v7;
  long double v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  long double v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  long double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v7 = -a1;
  if (a1 >= 0.0)
    v7 = a1;
  v8 = floor(v7 + 0.5);
  v9 = (v7 - v8) * 1.84467441e19;
  v10 = fmod(v8, 1.84467441e19);
  v11 = 2654435761u * (unint64_t)v10;
  v12 = v11 + (unint64_t)v9;
  if (v9 <= 0.0)
    v12 = 2654435761u * (unint64_t)v10;
  v13 = v11 - (unint64_t)fabs(v9);
  if (v9 < 0.0)
    v14 = v13;
  else
    v14 = v12;
  if (a2 >= 0.0)
    v15 = a2;
  else
    v15 = -a2;
  v16 = floor(v15 + 0.5);
  v17 = (v15 - v16) * 1.84467441e19;
  v18 = fmod(v16, 1.84467441e19);
  v19 = 2654435761u * (unint64_t)v18;
  v20 = v19 + (unint64_t)v17;
  if (v17 <= 0.0)
    v20 = 2654435761u * (unint64_t)v18;
  v21 = v19 - (unint64_t)fabs(v17);
  if (v17 < 0.0)
    v22 = v21;
  else
    v22 = v20;
  if (a3 >= 0.0)
    v23 = a3;
  else
    v23 = -a3;
  v24 = floor(v23 + 0.5);
  v25 = (v23 - v24) * 1.84467441e19;
  v26 = fmod(v24, 1.84467441e19);
  v27 = 2654435761u * (unint64_t)v26;
  v28 = v27 + (unint64_t)v25;
  if (v25 <= 0.0)
    v28 = 2654435761u * (unint64_t)v26;
  v29 = v27 - (unint64_t)fabs(v25);
  if (v25 < 0.0)
    v30 = v29;
  else
    v30 = v28;
  if (a4 >= 0.0)
    v31 = a4;
  else
    v31 = -a4;
  v32 = floor(v31 + 0.5);
  v33 = (v31 - v32) * 1.84467441e19;
  v34 = fmod(v32, 1.84467441e19);
  v35 = 2654435761u * (unint64_t)v34;
  v36 = v35 + (unint64_t)v33;
  if (v33 <= 0.0)
    v36 = 2654435761u * (unint64_t)v34;
  v37 = v35 - (unint64_t)fabs(v33);
  if (v33 >= 0.0)
    v37 = v36;
  return v22 ^ v14 ^ v30 ^ v37;
}

uint64_t HMIHashCMTime(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (*a1 < 0)
    v1 = -v1;
  return 2654435761 * v1;
}

double HMICGRectArea(double a1, double a2, double a3, double a4)
{
  return a3 * a4;
}

double HMICGRectMakeWithSize()
{
  return 0.0;
}

BOOL HMICGSizeIsIntegral(double a1, double a2)
{
  return a2 == (double)(int)a2 && a1 == (double)(int)a1;
}

double HMICGSizeMakeIntegral(double a1)
{
  return (double)(int)a1;
}

double HMICVPixelBufferGetSize(__CVBuffer *a1)
{
  double Width;

  Width = (double)CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return Width;
}

uint64_t HMICVPixelBufferSetValue(__CVBuffer *a1, int a2)
{
  size_t v4;
  void *BaseAddressOfPlane;
  size_t HeightOfPlane;
  size_t v7;
  int v8;
  void *BaseAddress;
  size_t Height;
  size_t BytesPerRow;

  CVPixelBufferLockBaseAddress(a1, 0);
  if (CVPixelBufferIsPlanar(a1))
  {
    if (CVPixelBufferGetPlaneCount(a1))
    {
      v4 = 0;
      do
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v4);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v4);
        v7 = CVPixelBufferGetBytesPerRowOfPlane(a1, v4) * HeightOfPlane;
        if (v4)
          v8 = -128;
        else
          v8 = a2;
        memset(BaseAddressOfPlane, v8, v7);
        ++v4;
      }
      while (v4 < CVPixelBufferGetPlaneCount(a1));
    }
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    Height = CVPixelBufferGetHeight(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    memset(BaseAddress, a2, BytesPerRow * Height);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

id HMIVideoIdForVideoFragment(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "absoluteString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "hasPrefix:", CFSTR("HKD://"));

  if (v6)
  {
    objc_msgSend(v4, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v3, "lastPathComponent");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringByDeletingPathExtension");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

id HMICGRectCreateArrayRepresentation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[5];
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (CGRectIsNull(*(CGRect *)&a1))
  {
    v8 = &unk_24DC152A8;
  }
  else
  {
    v15.origin.x = a1;
    v15.origin.y = a2;
    v15.size.width = a3;
    v15.size.height = a4;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", CGRectGetMinY(v15));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v9;
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", CGRectGetMinX(v16));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14[1] = v10;
    v17.origin.x = a1;
    v17.origin.y = a2;
    v17.size.width = a3;
    v17.size.height = a4;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", CGRectGetMaxY(v17));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14[2] = v11;
    v18.origin.x = a1;
    v18.origin.y = a2;
    v18.size.width = a3;
    v18.size.height = a4;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", CGRectGetMaxX(v18));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14[3] = v12;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v14, 4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

void HMICGRectNormalizedFromPixel(unint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGRect v12;

  memset(&v11, 0, sizeof(v11));
  CGAffineTransformMakeScale(&v11, 1.0 / (float)a1, 1.0 / (float)a2);
  v10 = v11;
  v12.origin.x = a3;
  v12.origin.y = a4;
  v12.size.width = a5;
  v12.size.height = a6;
  CGRectApplyAffineTransform(v12, &v10);
}

void HMICGRectPixelFromNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  __int128 v10;
  CGAffineTransform v11;
  CGAffineTransform v12;
  CGRect v13;
  CGRect v14;

  v10 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)&v12.a = *MEMORY[0x24BDBD8B8];
  *(_OWORD *)&v12.c = v10;
  *(_OWORD *)&v12.tx = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  *(_OWORD *)&v11.a = *(_OWORD *)&v12.a;
  *(_OWORD *)&v11.c = v10;
  *(_OWORD *)&v11.tx = *(_OWORD *)&v12.tx;
  CGAffineTransformScale(&v12, &v11, a5, a6);
  v11 = v12;
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  v14 = CGRectApplyAffineTransform(v13, &v11);
  CGRectIntegral(v14);
}

double HMICGRectTransferToNewCoordinate(double a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  return a5 / (a3 + (float)(a7 + a7)) * a7;
}

double HMICGRectExpandWithinLimit(double a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;

  v7 = a3 * (float)(a7 + -1.0) * 0.5;
  if (a1 + a3 + v7 <= a5)
  {
    v9 = a3 * (float)(a7 + -1.0) * 0.5;
  }
  else
  {
    v8 = a5 - (a1 + a3);
    v9 = v8;
  }
  if (a1 - v7 < 0.0)
  {
    v10 = a1;
    v7 = v10;
  }
  if (v9 >= v7)
    v9 = v7;
  return a1 - v9;
}

double HMICGSizeAreaInPixelsFromNormalized(double a1, double a2, double a3, double a4)
{
  return a1 * a3 * (a2 * a4);
}

id HMIFormatNumber(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x24BDD16F0];
  v4 = a1;
  v5 = objc_alloc_init(v3);
  objc_msgSend(v5, "setMaximumFractionDigits:", a2);
  objc_msgSend(v5, "stringFromNumber:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id HMIJSONFormattedStringForDate(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (objc_class *)MEMORY[0x24BDD1500];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
  objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneForSecondsFromGMT:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTimeZone:", v4);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEA0]), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend(v3, "setLocale:", v5);

  objc_msgSend(v3, "stringFromDate:", v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id HMIJSONDecimalNumberForNumber(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[2];
  int v10;

  v3 = a1;
  objc_msgSend(MEMORY[0x24BDD1520], "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", 0, a2, 0, 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x24BDD1518];
  if (v3)
  {
    objc_msgSend(v3, "decimalValue");
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
  }
  objc_msgSend(v5, "decimalNumberWithDecimal:", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "decimalNumberByRoundingAccordingToBehavior:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t HMIIsResidentDevice()
{
  void *v0;
  unint64_t v1;

  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "productClass");

  return (v1 < 7) & (0x58u >> v1);
}

id HMIURLForCacheDirectory(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v8;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  objc_msgSend(v2, "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 1, &v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v8;

  if (v3)
  {
    objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", CFSTR("com.apple.HomeAI"), 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "absoluteURL");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (a1)
      *a1 = objc_retainAutorelease(v4);
    HMIErrorLogC(v4);
    v6 = 0;
  }

  return v6;
}

id HMIURLForDirectoryPathRelativeToCacheDirectory(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v10;

  v3 = a1;
  v10 = 0;
  HMIURLForCacheDirectory(&v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v10;
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v4, "URLByAppendingPathComponent:isDirectory:", v3, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "absoluteURL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v5);
    HMIErrorLogC(v6);
    v8 = 0;
  }

  return v8;
}

uint64_t HMIIsDebug()
{
  return 0;
}

id HMIVersionInformation()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.HomeAI"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "infoDictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x24BDBD2A0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "appendFormat:", CFSTR("homeai: %@\n"), v3);

  return v0;
}

uint64_t HMIVisionRuntimeVersion()
{
  uint64_t result;

  result = NSVersionOfRunTimeLibrary("Vision");
  if ((_DWORD)result == -1)
  {
    objc_opt_class();
    return NSVersionOfRunTimeLibrary("Vision");
  }
  return result;
}

id HMIModelUUID(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(MEMORY[0x24BDBCEC8], "data", a2, a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendBytes:length:", &v8, 8);
  objc_msgSend(v2, "appendBytes:length:", &v7, 8);
  v3 = (void *)MEMORY[0x24BDD1880];
  objc_msgSend(MEMORY[0x24BDD1880], "hmf_zeroUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_UUIDWithNamespace:data:", v4, v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_219DD05B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD084C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD0F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location)
{
  uint64_t v17;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v17 - 160));
  _Unwind_Resume(a1);
}

void sub_219DD14B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD17CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD2010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17)
{
  uint64_t v17;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v17 - 144));
  _Unwind_Resume(a1);
}

void sub_219DD2DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD32F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void sub_219DD3540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD3710(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DD38E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DD3AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD3F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DD64B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DD9294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_219DDBAB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_219DDBEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HMIVideoAnalyzerEventTriggersAsString()
{
  return NSPrintF();
}

void _decoderDidDecodeFrameCallback(void *a1, uint64_t a2, CMTimeFlags a3, uint64_t a4, __CVBuffer *a5, CMTime *a6, uint64_t a7)
{
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  const __CFAllocator *v18;
  NSObject *v19;
  void *v20;
  CFTypeRef cf;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMSampleTimingInfo buf;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  objc_msgSend(v11, "object");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (a3)
  {
    v14 = (void *)MEMORY[0x220735570]();
    v15 = v13;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.duration.value) = 138543618;
      *(CMTimeValue *)((char *)&buf.duration.value + 4) = (CMTimeValue)v17;
      LOWORD(buf.duration.flags) = 1024;
      *(CMTimeFlags *)((char *)&buf.duration.flags + 2) = a3;
      _os_log_impl(&dword_219D45000, v16, OS_LOG_TYPE_ERROR, "%{public}@Frame decode error %d", (uint8_t *)&buf, 0x12u);

    }
LABEL_5:
    objc_autoreleasePoolPop(v14);
    goto LABEL_6;
  }
  if (!v12)
  {
    v14 = (void *)MEMORY[0x220735570]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.duration.value) = 138543362;
      *(CMTimeValue *)((char *)&buf.duration.value + 4) = (CMTimeValue)v20;
      _os_log_impl(&dword_219D45000, v19, OS_LOG_TYPE_ERROR, "%{public}@Decompression session decoded frames after decoder was deallocated, ignoring frames.", (uint8_t *)&buf, 0xCu);

    }
    goto LABEL_5;
  }
  if (a5)
  {
    *(_OWORD *)&buf.duration.value = *(_OWORD *)a7;
    buf.duration.epoch = *(_QWORD *)(a7 + 16);
    buf.presentationTimeStamp = *a6;
    buf.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
    formatDescriptionOut = 0;
    v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], a5, &formatDescriptionOut);
    cf = 0;
    CMSampleBufferCreateForImageBuffer(v18, a5, 1u, 0, 0, formatDescriptionOut, &buf, (CMSampleBufferRef *)&cf);
    objc_msgSend(v13, "_didDecodeSampleBuffer:", cf);
    CFRelease(cf);
    CFRelease(formatDescriptionOut);
  }
LABEL_6:

}

void sub_219DE1424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;
  void *v10;
  id v11;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Couldn't append sample buffer because, exception %@"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_failWithDescription:", v10);

    objc_end_catch();
    JUMPOUT(0x219DE13E4);
  }
  _Unwind_Resume(exception_object);
}

void sub_219DE21BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_219DE2F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_219DE340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_219DE3A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DE40F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219DE4308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219DE4488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_219DE47FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219DE4864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)HMIMotionDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_219DE54FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;

  v67 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v67;
    operator delete(v67);
  }
  v68 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v68;
    operator delete(v68);
  }
  v69 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v69;
    operator delete(v69);
  }
  v70 = (void *)STACK[0x438];
  if (STACK[0x438])
  {
    STACK[0x440] = (unint64_t)v70;
    operator delete(v70);
  }
  a62 = (uint64_t)&STACK[0x458];
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x470], v71);
  a62 = v65 - 248;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  cv::Mat::~Mat((cv::Mat *)(v65 - 224), v72);
  __HMISignpostScopeLeave((_QWORD *)(v65 - 128));

  _Unwind_Resume(a1);
}

uint64_t cv::MatExpr::operator cv::Mat@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = a2 + 8;
  *(_QWORD *)(a2 + 72) = a2 + 80;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)a2 = 1124007936;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1, a2, 0xFFFFFFFFLL);
}

void sub_219DE5800(_Unwind_Exception *a1, void *a2)
{
  cv::Mat *v2;

  cv::Mat::~Mat(v2, a2);
  _Unwind_Resume(a1);
}

void sub_219DE5F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219DE6174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219DE6328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_219DE650C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void cv::MatExpr::~MatExpr(cv::MatExpr *this, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v3 = (unsigned int *)*((_QWORD *)this + 29);
  if (v3)
  {
    v4 = (cv::MatExpr *)((char *)this + 208);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  if (*((int *)this + 53) >= 1)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 34);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *((int *)this + 53));
  }
  *((_QWORD *)this + 29) = 0;
  v9 = (void **)*((_QWORD *)this + 35);
  if (v9 != (void **)((char *)this + 288))
    cv::fastFree(v9, a2);
  v10 = (unsigned int *)*((_QWORD *)this + 17);
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      cv::Mat::deallocate((cv::MatExpr *)((char *)this + 112), a2);
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  if (*((int *)this + 29) >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 22);
    do
      *(_DWORD *)(v14 + 4 * v13++) = 0;
    while (v13 < *((int *)this + 29));
  }
  *((_QWORD *)this + 17) = 0;
  v15 = (void **)*((_QWORD *)this + 23);
  if (v15 != (void **)((char *)this + 192))
    cv::fastFree(v15, a2);
  v16 = (unsigned int *)*((_QWORD *)this + 5);
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      cv::Mat::deallocate((cv::MatExpr *)((char *)this + 16), a2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (*((int *)this + 5) >= 1)
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 10);
    do
      *(_DWORD *)(v20 + 4 * v19++) = 0;
    while (v19 < *((int *)this + 5));
  }
  *((_QWORD *)this + 5) = 0;
  v21 = (void **)*((_QWORD *)this + 11);
  if (v21 != (void **)((char *)this + 96))
    cv::fastFree(v21, a2);
}

void std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  cv::Mat *v2;
  cv::Mat *v4;
  void *v5;

  v1 = *a1;
  v2 = (cv::Mat *)**a1;
  if (v2)
  {
    v4 = (cv::Mat *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (cv::Mat *)((char *)v4 - 96);
        std::allocator<cv::Mat>::destroy[abi:ne180100]((_DWORD)v1 + 16, v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<cv::Mat>::destroy[abi:ne180100](int a1, cv::Mat *this)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      cv::Mat::deallocate(this, this);
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  if (*((int *)this + 1) >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 8);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *((int *)this + 1));
  }
  *((_QWORD *)this + 3) = 0;
  v8 = (void **)*((_QWORD *)this + 9);
  if (v8 != (void **)((char *)this + 80))
    cv::fastFree(v8, this);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_219DE682C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_219DE68E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv::Point_<float>>::__init_with_size[abi:ne180100]<cv::Point_<float>*,cv::Point_<float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_219DE6954(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

cv::Mat *std::vector<cv::Mat>::__init_with_size[abi:ne180100]<cv::Mat*,cv::Mat*>(cv::Mat *result, cv::Mat *a2, cv::Mat *a3, unint64_t a4)
{
  cv::Mat *v6;

  if (a4)
  {
    v6 = result;
    std::vector<cv::Mat>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv::Mat>,cv::Mat*,cv::Mat*,cv::Mat*>((uint64_t)v6 + 16, a2, a3, *((cv::Mat **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_219DE69D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<cv::Mat>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Mat>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Mat>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

cv::Mat *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv::Mat>,cv::Mat*,cv::Mat*,cv::Mat*>(uint64_t a1, cv::Mat *a2, cv::Mat *a3, cv::Mat *this)
{
  cv::Mat *v4;
  cv::Mat *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  cv::Mat *v11;
  cv::Mat *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<cv::Mat>::construct[abi:ne180100]<cv::Mat,cv::Mat&>(v7, v4, v6);
      v6 = (cv::Mat *)((char *)v6 + 96);
      v4 = (cv::Mat *)((char *)v12 + 96);
      v12 = (cv::Mat *)((char *)v12 + 96);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_219DE6B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<cv::Mat>::construct[abi:ne180100]<cv::Mat,cv::Mat&>(int a1, cv::Mat *this, cv::Mat *a3)
{
  __int128 v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_OWORD *)this = *(_OWORD *)a3;
  *((_QWORD *)this + 2) = *((_QWORD *)a3 + 2);
  v3 = *(_OWORD *)((char *)a3 + 24);
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a3 + 40);
  *((_QWORD *)this + 7) = *((_QWORD *)a3 + 7);
  *((_QWORD *)this + 8) = (char *)this + 8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 11) = 0;
  if ((_QWORD)v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  if (*((int *)a3 + 1) > 2)
  {
    *((_DWORD *)this + 1) = 0;
    cv::Mat::copySize(this, a3);
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)a3 + 9);
    v6 = (_QWORD *)*((_QWORD *)this + 9);
    *v6 = *v5;
    v6[1] = v5[1];
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>::operator()[abi:ne180100](uint64_t *a1)
{
  cv::Mat **v1;
  cv::Mat **v2;
  cv::Mat *v3;
  cv::Mat *v4;
  uint64_t v5;

  v2 = (cv::Mat **)a1[1];
  v1 = (cv::Mat **)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 = (cv::Mat *)((char *)v3 - 96);
      std::allocator<cv::Mat>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_219DE7850(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_219DE7AA0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

const __CFString *HMISessionEntityAssignmentAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_24DBEE3C0[a1 - 1];
}

void sub_219DEB750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  _Block_object_dispose(&a21, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_219DEDC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a38);
  _Unwind_Resume(a1);
}

void sub_219DF0544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_219DF089C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCPHomeKitAnalysisSessionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!MediaAnalysisLibraryCore_frameworkLibrary_0)
  {
    MediaAnalysisLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    if (!MediaAnalysisLibraryCore_frameworkLibrary_0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VCPHomeKitAnalysisSession");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getVCPHomeKitAnalysisSessionClass_block_invoke_cold_1();
    free(v3);
  }
  getVCPHomeKitAnalysisSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t cvCreateMemStorage(int a1)
{
  uint64_t v2;
  const cv::Exception *v3;
  int v4;
  void *__p[2];
  void *v7[2];
  void *v8[2];
  _BYTE v9[120];

  v2 = cvAlloc(40);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    std::string::basic_string[abi:ne180100]<0>(v7, "icvInitMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v9, 4294967269, v8, v7, __p, 86);
    cv::error((cv *)v9, v3);
  }
  if (a1 >= 1)
    v4 = a1;
  else
    v4 = 65408;
  if (v4 == 0x7FFFFFFF)
    cvCreateMemStorage_cold_1();
  *(_QWORD *)(v2 + 32) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)v2 = 1116274688;
  *(_DWORD *)(v2 + 32) = (v4 + 7) & 0xFFFFFFF8;
  return v2;
}

void sub_219DFA9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void cvReleaseMemStorage(void ***a1, void *a2)
{
  const cv::Exception *v2;
  void **v3;
  void *v4;
  void *__p[2];
  void *v6[2];
  void *v7[2];
  _BYTE v8[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvReleaseMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 177);
    cv::error((cv *)v8, v2);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    icvDestroyMemStorage((uint64_t)v3, a2);
    cv::fastFree(v3, v4);
  }
}

void sub_219DFAAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvDestroyMemStorage(uint64_t result, void *a2)
{
  uint64_t v2;
  const cv::Exception *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v2 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "icvDestroyMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967269, v12, v11, __p, 134);
    cv::error((cv *)v13, v3);
  }
  v4 = *(_QWORD *)(result + 24);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  v6 = (_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 8); i; v5 = result)
  {
    result = i;
    i = *(_QWORD *)(i + 8);
    v8 = *(_QWORD *)(v2 + 24);
    if (v8)
    {
      if (v5)
      {
        *(_QWORD *)result = v5;
        v9 = *(_QWORD **)(v5 + 8);
        *(_QWORD *)(result + 8) = v9;
        if (v9)
          *v9 = result;
        *(_QWORD *)(v5 + 8) = result;
      }
      else
      {
        *(_QWORD *)(v8 + 8) = result;
        *(_QWORD *)(v8 + 16) = result;
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(v2 + 36) = *(_DWORD *)(v2 + 32) - 16;
      }
    }
    else
    {
      cv::fastFree((void **)result, a2);
      result = v5;
    }
  }
  *(_DWORD *)(v2 + 36) = 0;
  *v6 = 0;
  *(_QWORD *)(v2 + 16) = 0;
  return result;
}

void sub_219DFAC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvRestoreMemStoragePos(uint64_t result, uint64_t *a2)
{
  const cv::Exception *v2;
  int v3;
  const cv::Exception *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  _BYTE v10[120];

  if (!result || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvRestoreMemStoragePos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967269, v9, v8, __p, 282);
    cv::error((cv *)v10, v2);
  }
  v3 = *((_DWORD *)a2 + 2);
  if (v3 > *(_DWORD *)(result + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvRestoreMemStoragePos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967095, v9, v8, __p, 284);
    cv::error((cv *)v10, v4);
  }
  v5 = *a2;
  *(_QWORD *)(result + 16) = *a2;
  *(_DWORD *)(result + 36) = v3;
  if (!v5)
  {
    v6 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 16) = v6;
    if (v6)
      LODWORD(v6) = *(_DWORD *)(result + 32) - 16;
    *(_DWORD *)(result + 36) = v6;
  }
  return result;
}

void sub_219DFAE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvMemStorageAlloc(uint64_t a1, unint64_t a2)
{
  int v2;
  const cv::Exception *v4;
  const cv::Exception *v5;
  int v6;
  uint64_t v7;
  const cv::Exception *v8;
  uint64_t result;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v2 = a2;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "NULL storage pointer");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967269, v12, v11, __p, 321);
    cv::error((cv *)v13, v4);
  }
  if (a2 >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Too large memory block is requested");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967085, v12, v11, __p, 324);
    cv::error((cv *)v13, v5);
  }
  v6 = *(_DWORD *)(a1 + 36);
  if ((v6 & 7) != 0)
    cvMemStorageAlloc_cold_2();
  v7 = v6;
  if (v6 < a2)
  {
    if ((int)((*(_DWORD *)(a1 + 32) & 0xFFFFFFF8) - 16) < a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "requested size is negative or too big");
      std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v13, 4294967085, v12, v11, __p, 332);
      cv::error((cv *)v13, v8);
    }
    icvGoNextMemBlock(a1);
    v6 = *(_DWORD *)(a1 + 36);
    v7 = v6;
  }
  result = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 32) - v7;
  if ((result & 7) != 0)
    cvMemStorageAlloc_cold_1();
  *(_DWORD *)(a1 + 36) = (v6 - v2) & 0xFFFFFFF8;
  return result;
}

void sub_219DFB114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvGoNextMemBlock(uint64_t result)
{
  uint64_t v1;
  const cv::Exception *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  uint64_t v13;
  int v14;

  v1 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "icvGoNextMemBlock");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v13, 4294967269, v12, v11, __p, 212);
    cv::error((cv *)&v13, v2);
  }
  v3 = *(_QWORD *)(result + 16);
  if (!v3 || (v4 = *(_QWORD **)(v3 + 8)) == 0)
  {
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v14 = *(_DWORD *)(v5 + 36);
      icvGoNextMemBlock(v5);
      v4 = *(_QWORD **)(v5 + 16);
      result = cvRestoreMemStoragePos(v5, &v13);
      v6 = *(_QWORD **)(v5 + 16);
      if (v4 == v6)
      {
        if (*(_QWORD **)(v5 + 8) != v4)
          icvGoNextMemBlock();
        *(_DWORD *)(v5 + 36) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
      }
      else
      {
        v6[1] = v4[1];
        v7 = (_QWORD *)v4[1];
        if (v7)
          *v7 = v6;
      }
    }
    else
    {
      result = cvAlloc(*(int *)(result + 32));
      v4 = (_QWORD *)result;
    }
    v4[1] = 0;
    v8 = *(_QWORD *)(v1 + 16);
    *v4 = v8;
    if (!v8)
      v8 = v1;
    *(_QWORD *)(v8 + 8) = v4;
  }
  *(_QWORD *)(v1 + 16) = v4;
  v9 = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 36) = v9 - 16;
  if ((v9 & 7) != 0)
    icvGoNextMemBlock();
  return result;
}

void sub_219DFB310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_DWORD *cvCreateSeq(unsigned int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  const cv::Exception *v8;
  const cv::Exception *v9;
  _DWORD *v10;
  const cv::Exception *v11;
  void *__p[2];
  void *v14[2];
  void *v15[2];
  _BYTE v16[120];

  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967269, v15, v14, __p, 371);
    cv::error((cv *)v16, v8);
  }
  if (a2 < 0x60 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967095, v15, v14, __p, 373);
    cv::error((cv *)v16, v9);
  }
  v10 = (_DWORD *)cvMemStorageAlloc(a4, a2);
  bzero(v10, a2);
  *v10 = (unsigned __int16)a1 | 0x42990000;
  v10[1] = a2;
  if ((a1 & 0xFFF) != 0
    && (a1 & 0xFFF) != 7
    && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != (_DWORD)a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967095, v15, v14, __p, 389);
    cv::error((cv *)v16, v11);
  }
  v10[11] = a3;
  *((_QWORD *)v10 + 9) = a4;
  cvSetSeqBlockSize((uint64_t)v10, 0x400 / a3);
  return v10;
}

void sub_219DFB5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvSetSeqBlockSize(uint64_t result, int a2)
{
  int v2;
  const cv::Exception *v3;
  int v4;
  const cv::Exception *v5;
  signed int v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  v2 = a2;
  if (!result || !*(_QWORD *)(result + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 409);
    cv::error((cv *)v11, v3);
  }
  if (a2 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967085, v10, v9, __p, 411);
    cv::error((cv *)v11, v5);
  }
  v4 = *(_DWORD *)(result + 44);
  if (!a2)
  {
    if (1024 / v4 <= 1)
      v2 = 1;
    else
      v2 = 1024 / v4;
  }
  v6 = (*(_DWORD *)(*(_QWORD *)(result + 72) + 32) & 0xFFFFFFF8) - 48;
  if (v2 * v4 > v6)
  {
    v2 = v6 / v4;
    if (!(v6 / v4))
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "Storage block size is too small to fit the sequence elements");
      std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v11, 4294967085, v10, v9, __p, 427);
      cv::error((cv *)v11, v7);
    }
  }
  *(_DWORD *)(result + 64) = v2;
  return result;
}

void sub_219DFB884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvGetSeqElem(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t *v5;
  int v7;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    v3 = (v2 & (a2 >> 31)) + a2;
    v4 = v3 >= v2 ? *(_DWORD *)(a1 + 40) : 0;
    a2 = v3 - v4;
    if (v3 - v4 >= v2)
      return 0;
  }
  v5 = *(uint64_t **)(a1 + 88);
  if (v2 >= 2 * a2)
  {
    while (1)
    {
      v7 = *((_DWORD *)v5 + 5);
      if (a2 < v7)
        break;
      v5 = (uint64_t *)v5[1];
      a2 -= v7;
    }
  }
  else
  {
    do
    {
      v5 = (uint64_t *)*v5;
      v2 -= *((_DWORD *)v5 + 5);
    }
    while (a2 < v2);
    a2 -= v2;
  }
  return v5[3] + *(int *)(a1 + 44) * (uint64_t)a2;
}

uint64_t cvSliceLength(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a2 + 40);
  if (SHIDWORD(a1) <= 0)
    v3 = *(_DWORD *)(a2 + 40);
  else
    v3 = 0;
  if (HIDWORD(a1) == (_DWORD)a1)
    v4 = 0;
  else
    v4 = v3 + HIDWORD(a1) - ((v2 & ((int)a1 >> 31)) + a1);
  if (v2 <= 1)
    v5 = 1;
  else
    v5 = *(_DWORD *)(a2 + 40);
  v6 = v4 + v2 * (((v4 & ~(v4 >> 31)) - (v4 + (v4 >> 31))) / v5 + (v4 >> 31));
  if ((int)v6 >= (int)v2)
    return v2;
  else
    return v6;
}

char *cvCvtSeqToArray(uint64_t a1, char *a2, uint64_t a3)
{
  int v3;
  char *v4;
  const cv::Exception *v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  void *__p[2];
  void *v18[2];
  void *v19[2];
  _BYTE v20[120];
  _QWORD v21[2];
  uint64_t v22;
  char *v23;
  char *v24;

  v3 = a3;
  v4 = a2;
  if (!a1 || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    std::string::basic_string[abi:ne180100]<0>(v18, "cvCvtSeqToArray");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v20, 4294967269, v19, v18, __p, 545);
    cv::error((cv *)v20, v6);
  }
  v7 = *(_DWORD *)(a1 + 44);
  v8 = cvSliceLength(a3, a1) * v7;
  if (!v8)
    return 0;
  cvStartReadSeq(a1, (uint64_t)v21, 0);
  cvSetSeqReaderPos(v21, v3, 0);
  v9 = (int)v24;
  v10 = v4;
  v12 = v22;
  v11 = v23;
  do
  {
    v13 = v9 - (_DWORD)v11;
    if (v8 >= v13)
      v14 = v13;
    else
      v14 = v8;
    memcpy(v10, v11, v14);
    v10 += v14;
    v12 = *(_QWORD *)(v12 + 8);
    v11 = *(char **)(v12 + 24);
    v22 = v12;
    v23 = v11;
    v9 = (_DWORD)v11 + *(_DWORD *)(v12 + 20) * v7;
    v24 = &v11[*(int *)(v12 + 20) * (uint64_t)v7];
    v15 = __OFSUB__(v8, v14);
    v8 -= v14;
  }
  while (!((v8 < 0) ^ v15 | (v8 == 0)));
  return v4;
}

void sub_219DFBB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

double cvStartReadSeq(uint64_t a1, uint64_t a2, int a3)
{
  double result;
  const cv::Exception *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  void *v12[2];
  void *v13[2];
  _BYTE v14[120];

  if (!a2 || (*(_QWORD *)(a2 + 40) = 0, result = 0.0, *(_OWORD *)(a2 + 24) = 0u, *(_OWORD *)(a2 + 8) = 0u, !a1))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    std::string::basic_string[abi:ne180100]<0>(v12, "cvStartReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v14, 4294967269, v13, v12, __p, 939);
    cv::error((cv *)v14, v4);
  }
  *(_DWORD *)a2 = 64;
  *(_QWORD *)(a2 + 8) = a1;
  v5 = *(uint64_t **)(a1 + 88);
  if (v5)
  {
    v6 = (uint64_t *)*v5;
    v7 = v5[3];
    *(_QWORD *)(a2 + 24) = v7;
    v8 = *(int *)(a1 + 44);
    v9 = v6[3] + (*((int *)v6 + 5) - 1) * v8;
    *(_QWORD *)(a2 + 56) = v9;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v5 + 4);
    if (a3)
    {
      *(_QWORD *)(a2 + 24) = v9;
      *(_QWORD *)(a2 + 56) = v7;
      v5 = v6;
    }
    *(_QWORD *)(a2 + 16) = v5;
    v10 = v5[3];
    *(_QWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 40) = v10 + *((int *)v5 + 5) * (uint64_t)(int)v8;
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 48) = 0;
  }
  return result;
}

void sub_219DFBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_QWORD *cvSetSeqReaderPos(_QWORD *result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  const cv::Exception *v5;
  int v6;
  int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  const cv::Exception *v14;
  unint64_t v15;
  const cv::Exception *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  void *__p[2];
  void *v21[2];
  void *v22[2];
  _BYTE v23[120];

  v3 = a2;
  if (!result || (v4 = result[1]) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v23, 4294967269, v22, v21, __p, 1039);
    cv::error((cv *)v23, v5);
  }
  v6 = *(_DWORD *)(v4 + 44);
  if (a3)
  {
    v7 = v6 * a2;
    v8 = (uint64_t **)result[2];
    v9 = result[3];
    if (v6 * a2 <= 0)
    {
      v15 = result[4];
      v11 = v9 + v7;
      if (v11 < v15)
      {
        do
        {
          v7 += v9 - v15;
          v8 = (uint64_t **)*v8;
          v15 = (unint64_t)v8[3];
          v9 = v15 + *((int *)v8 + 5) * (uint64_t)v6;
          v11 = v9 + v7;
        }
        while (v11 < v15);
        result[2] = v8;
        result[4] = v15;
        result[5] = v9;
      }
    }
    else
    {
      v10 = result[5];
      v11 = v9 + v7;
      if (v11 >= v10)
      {
        do
        {
          v7 += v9 - v10;
          v8 = (uint64_t **)v8[1];
          v9 = (unint64_t)v8[3];
          v12 = *((int *)v8 + 5) * (uint64_t)v6;
          v10 = v9 + v12;
        }
        while (v7 >= (int)v12);
        result[2] = v8;
        v11 = v9 + v7;
        result[4] = v9;
        result[5] = v10;
      }
    }
    result[3] = v11;
  }
  else
  {
    v13 = *(_DWORD *)(v4 + 40);
    if (a2 < 0)
    {
      if (-v13 > a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "");
        std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
        cv::Exception::Exception(v23, 4294967085, v22, v21, __p, 1049);
        cv::error((cv *)v23, v16);
      }
      v3 = v13 + a2;
    }
    else if (a2 >= v13)
    {
      if (a2 - v13 >= v13)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "");
        std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
        cv::Exception::Exception(v23, 4294967085, v22, v21, __p, 1056);
        cv::error((cv *)v23, v14);
      }
      v3 = a2 - v13;
    }
    v17 = *(uint64_t **)(result[1] + 88);
    v18 = *((_DWORD *)v17 + 5);
    if (v3 >= v18)
    {
      if (v13 >= 2 * v3)
      {
        do
        {
          v17 = (uint64_t *)v17[1];
          v3 -= v18;
          v18 = *((_DWORD *)v17 + 5);
        }
        while (v3 >= v18);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)*v17;
          v18 = *((_DWORD *)v17 + 5);
          v13 -= v18;
        }
        while (v3 < v13);
        v3 -= v13;
      }
    }
    v19 = v17[3];
    result[3] = v19 + v3 * v6;
    if ((uint64_t *)result[2] != v17)
    {
      result[2] = v17;
      result[4] = v19;
      result[5] = v19 + v18 * v6;
    }
  }
  return result;
}

void sub_219DFC078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvGrowSeq(uint64_t a1, int a2)
{
  const cv::Exception *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  const cv::Exception *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    std::string::basic_string[abi:ne180100]<0>(v27, "icvGrowSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v29, 4294967269, v28, v27, __p, 631);
    cv::error((cv *)v29, v4);
  }
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(result + 8);
LABEL_23:
    v17 = *(_QWORD *)(a1 + 88);
    if (v17)
    {
      *(_QWORD *)result = *(_QWORD *)v17;
      *(_QWORD *)(result + 8) = v17;
      *(_QWORD *)v17 = result;
      v18 = *(_QWORD *)result;
      v19 = (_QWORD *)(*(_QWORD *)result + 8);
    }
    else
    {
      *(_QWORD *)(a1 + 88) = result;
      *(_QWORD *)(result + 8) = result;
      v19 = (_QWORD *)result;
      v17 = result;
      v18 = result;
    }
    *v19 = result;
    v20 = *(unsigned int *)(result + 20);
    if ((int)v20 < 1 || (v21 = *(_DWORD *)(a1 + 44), v22 = (int)v20 / v21, (int)v20 % v21))
      icvGrowSeq();
    v23 = *(_QWORD *)(result + 24);
    if (a2)
    {
      v24 = v23 + v20;
      *(_QWORD *)(result + 24) = v24;
      if (result == v18)
      {
        *(_QWORD *)(a1 + 48) = v24;
        *(_QWORD *)(a1 + 56) = v24;
      }
      else
      {
        if (*(_DWORD *)(v17 + 16))
          icvGrowSeq();
        *(_QWORD *)(a1 + 88) = result;
        v17 = result;
      }
      *(_DWORD *)(result + 16) = 0;
      do
      {
        *(_DWORD *)(result + 16) += v22;
        result = *(_QWORD *)(result + 8);
      }
      while (result != v17);
      result = v17;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v23 + v20;
      *(_QWORD *)(a1 + 56) = v23;
      if (result == v18)
        v25 = 0;
      else
        v25 = *(_DWORD *)(v18 + 20) + *(_DWORD *)(v18 + 16);
      *(_DWORD *)(result + 16) = v25;
    }
    *(_DWORD *)(result + 20) = 0;
    return result;
  }
  v6 = *(_DWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) >= 4 * v6)
    result = cvSetSeqBlockSize(a1, 2 * v6);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "The sequence has NULL storage pointer");
    std::string::basic_string[abi:ne180100]<0>(v27, "icvGrowSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v29, 4294967269, v28, v27, __p, 644);
    cv::error((cv *)v29, v9);
  }
  v10 = *(_DWORD *)(v7 + 36);
  v11 = *(_QWORD *)(v7 + 16) + *(int *)(v7 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v11 - v10 - v12) > 7 || a2 || v10 < *(_DWORD *)(a1 + 44))
  {
    v15 = v6 * v8 + 32;
    if (v10 < v15)
    {
      v16 = v6 / 3;
      if (v6 <= 5)
        v16 = 1;
      if (v10 >= v16 * v8 + 40)
      {
        v15 = (v10 - 32) / *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 44) + 32;
      }
      else
      {
        icvGoNextMemBlock(v7);
        if (*(_DWORD *)(v7 + 36) < v15)
          icvGrowSeq();
      }
    }
    result = cvMemStorageAlloc(v7, v15);
    *(_QWORD *)(result + 24) = (result + 39) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(result + 20) = v15 - 32;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_23;
  }
  v13 = v10 / v8;
  if (v13 >= v6)
    v13 = v6;
  v14 = v12 + v13 * v8;
  *(_QWORD *)(a1 + 48) = v14;
  *(_DWORD *)(v7 + 36) = (v11 - v14) & 0xFFFFFFF8;
  return result;
}

void sub_219DFC448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_QWORD *cvChangeSeqBlock(_QWORD *result, int a2)
{
  const cv::Exception *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvChangeSeqBlock");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 989);
    cv::error((cv *)v11, v2);
  }
  v3 = (uint64_t *)result[2];
  if (a2 < 1)
  {
    v4 = *v3;
    result[2] = v4;
    v6 = result[1];
    v5 = *(_QWORD *)(v4 + 24) + *(int *)(v6 + 44) * (*(int *)(v4 + 20) - 1);
  }
  else
  {
    v4 = v3[1];
    result[2] = v4;
    v5 = *(_QWORD *)(v4 + 24);
    v6 = result[1];
  }
  result[3] = v5;
  v7 = *(_QWORD *)(v4 + 24);
  result[4] = v7;
  result[5] = v7 + *(int *)(v6 + 44) * (uint64_t)*(int *)(v4 + 20);
  return result;
}

void sub_219DFC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvGetSeqReaderPos(uint64_t a1)
{
  const cv::Exception *v1;
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  void *v6[2];
  void *v7[2];
  _BYTE v8[120];

  if (!a1 || !*(_QWORD *)(a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvGetSeqReaderPos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 1014);
    cv::error((cv *)v8, v1);
  }
  v2 = *(int *)(*(_QWORD *)(a1 + 8) + 44);
  if ((int)v2 <= 32 && ((0x8000808BuLL >> (v2 - 1)) & 1) != 0)
    v3 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 32)) >> icvPower2ShiftTab[v2 - 1];
  else
    v3 = (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 32)) / v2;
  return (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16) + v3 - *(_DWORD *)(a1 + 48));
}

void sub_219DFC740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

char *cvSeqPush(uint64_t a1, void *__src)
{
  const cv::Exception *v4;
  size_t v5;
  char *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSeqPush");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 1132);
    cv::error((cv *)v11, v4);
  }
  v5 = *(int *)(a1 + 44);
  v6 = *(char **)(a1 + 56);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 48))
  {
    icvGrowSeq(a1, 0);
    v6 = *(char **)(a1 + 56);
    if ((unint64_t)&v6[v5] > *(_QWORD *)(a1 + 48))
      cvSeqPush_cold_1();
  }
  if (__src)
    memcpy(v6, __src, v5);
  ++*(_DWORD *)(**(_QWORD **)(a1 + 88) + 20);
  ++*(_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = &v6[v5];
  return v6;
}

void sub_219DFC8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvFreeSeqBlock(uint64_t result, int a2)
{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD **v4;
  int v5;
  int v6;
  int v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD ***)(result + 88);
  v3 = v2;
  if (!a2)
    v3 = (_QWORD **)*v2;
  if (*((_DWORD *)v3 + 5))
    icvFreeSeqBlock();
  v4 = (_QWORD **)*v2;
  if (v2 == *v2)
  {
    v11 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(result + 44);
    v7 = v11 - *((_DWORD *)v2 + 6) + v6 * *((_DWORD *)v2 + 4);
    *((_DWORD *)v2 + 5) = v7;
    v2[3] = (_QWORD *)(v11 - v7);
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
  }
  else
  {
    if (a2)
    {
      v5 = *((_DWORD *)v2 + 4);
      v6 = *(_DWORD *)(result + 44);
      v7 = v6 * v5;
      *((_DWORD *)v2 + 5) = v6 * v5;
      v2[3] = (_QWORD *)((char *)v2[3] - v6 * v5);
      v8 = v2;
      do
      {
        *((_DWORD *)v8 + 4) -= v5;
        v8 = (_QWORD **)v8[1];
      }
      while (v8 != v2);
      v9 = v2[1];
      *(_QWORD *)(result + 88) = v9;
      v10 = v4;
      v4 = v2;
    }
    else
    {
      v12 = *(_QWORD **)(result + 56);
      if (v12 != v4[3])
        icvFreeSeqBlock();
      v6 = *(_DWORD *)(result + 44);
      v7 = *(_DWORD *)(result + 48) - (_DWORD)v12;
      *((_DWORD *)v4 + 5) = v7;
      v10 = (_QWORD **)*v4;
      v9 = v4[1];
      v13 = (*v4)[3] + v6 * (uint64_t)*((int *)*v4 + 5);
      *(_QWORD *)(result + 48) = v13;
      *(_QWORD *)(result + 56) = v13;
      v2 = v4;
    }
    v10[1] = v9;
    *v4[1] = v10;
  }
  if (v7 < 1 || v7 % v6)
    icvFreeSeqBlock();
  v2[1] = *(_QWORD **)(result + 80);
  *(_QWORD *)(result + 80) = v2;
  return result;
}

int *cvSeqPushMulti(int *result, char *__src, int a3, int a4)
{
  int v4;
  uint64_t v6;
  const cv::Exception *v7;
  const cv::Exception *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  void *__p[2];
  void *v17[2];
  void *v18[2];
  _BYTE v19[120];

  v4 = a3;
  v6 = (uint64_t)result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "NULL sequence pointer");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSeqPushMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 1453);
    cv::error((cv *)v19, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "number of removed elements is negative");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSeqPushMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967095, v18, v17, __p, 1455);
    cv::error((cv *)v19, v8);
  }
  v9 = result[11];
  if (a4)
  {
    if (a3 >= 1)
    {
      v10 = *((_QWORD *)result + 11);
      do
      {
        if (!v10 || (v11 = *(_DWORD *)(v10 + 16)) == 0)
        {
          icvGrowSeq(v6, 1);
          v10 = *(_QWORD *)(v6 + 88);
          v11 = *(_DWORD *)(v10 + 16);
          if (v11 <= 0)
            cvSeqPushMulti_cold_1();
        }
        if (v11 >= v4)
          v12 = v4;
        else
          v12 = v11;
        v4 -= v12;
        v13 = *(_DWORD *)(v10 + 20) + v12;
        *(_DWORD *)(v10 + 16) = v11 - v12;
        *(_DWORD *)(v10 + 20) = v13;
        *(_DWORD *)(v6 + 40) += v12;
        result = (int *)(*(_QWORD *)(v10 + 24) - (int)v9 * (uint64_t)v12);
        *(_QWORD *)(v10 + 24) = result;
        if (__src)
          result = (int *)memcpy(result, &__src[v4 * (int)v9], (int)v9 * (uint64_t)v12);
      }
      while (v4 > 0);
    }
  }
  else if (a3 >= 1)
  {
    while (1)
    {
      result = *(int **)(v6 + 56);
      v14 = v4 >= (int)((*(_QWORD *)(v6 + 48) - (_QWORD)result) / v9)
          ? (*(_QWORD *)(v6 + 48) - (_QWORD)result) / v9
          : v4;
      if (v14 >= 1)
      {
        *(_DWORD *)(**(_QWORD **)(v6 + 88) + 20) += v14;
        *(_DWORD *)(v6 + 40) += v14;
        v15 = v14 * (int)v9;
        if (__src)
        {
          memcpy(result, __src, v14 * (int)v9);
          __src += v15;
          result = *(int **)(v6 + 56);
        }
        v4 -= v14;
        *(_QWORD *)(v6 + 56) = (char *)result + v15;
        if (v4 < 1)
          break;
      }
      icvGrowSeq(v6, 0);
    }
  }
  return result;
}

void sub_219DFCCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvSeqPopMulti(uint64_t result, char *__dst, int a3, int a4)
{
  int v4;
  char *v5;
  uint64_t v6;
  const cv::Exception *v7;
  const cv::Exception *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const void *v20;
  void *__p[2];
  void *v22[2];
  void *v23[2];
  _BYTE v24[120];

  v4 = a3;
  v5 = __dst;
  v6 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "NULL sequence pointer");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvSeqPopMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v24, 4294967269, v23, v22, __p, 1522);
    cv::error((cv *)v24, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "number of removed elements is negative");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvSeqPopMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v24, 4294967095, v23, v22, __p, 1524);
    cv::error((cv *)v24, v8);
  }
  if (*(_DWORD *)(result + 40) < a3)
    v4 = *(_DWORD *)(result + 40);
  if (a4)
  {
    if (v4 >= 1)
    {
      do
      {
        v9 = *(_QWORD *)(v6 + 88);
        v10 = *(_DWORD *)(v9 + 20);
        if (v10 >= v4)
          v11 = v4;
        else
          v11 = *(_DWORD *)(v9 + 20);
        if (v11 <= 0)
          cvSeqPopMulti_cold_2();
        v12 = v10 - v11;
        *(_DWORD *)(v9 + 20) = v12;
        *(_DWORD *)(v6 + 40) -= v11;
        *(_DWORD *)(v9 + 16) += v11;
        v13 = *(int *)(v6 + 44) * (uint64_t)v11;
        if (v5)
        {
          result = (uint64_t)memcpy(v5, *(const void **)(v9 + 24), (int)v13);
          v5 += (int)v13;
          v9 = *(_QWORD *)(v6 + 88);
          v12 = *(_DWORD *)(v9 + 20);
          v13 = (int)v13;
        }
        *(_QWORD *)(v9 + 24) += v13;
        if (!v12)
          result = icvFreeSeqBlock(v6, 1);
        v14 = __OFSUB__(v4, v11);
        v4 -= v11;
      }
      while (!((v4 < 0) ^ v14 | (v4 == 0)));
    }
  }
  else
  {
    if (__dst)
      v5 = &__dst[*(int *)(result + 44) * (uint64_t)v4];
    if (v4 >= 1)
    {
      do
      {
        v15 = **(_QWORD **)(v6 + 88);
        v16 = *(_DWORD *)(v15 + 20);
        if (v16 >= v4)
          v17 = v4;
        else
          v17 = *(_DWORD *)(v15 + 20);
        if (v17 <= 0)
          cvSeqPopMulti_cold_1();
        v18 = v16 - v17;
        *(_DWORD *)(v15 + 20) = v18;
        v19 = *(_DWORD *)(v6 + 44);
        *(_DWORD *)(v6 + 40) -= v17;
        v20 = (const void *)(*(_QWORD *)(v6 + 56) - v19 * (uint64_t)v17);
        *(_QWORD *)(v6 + 56) = v20;
        if (v5)
        {
          v5 -= v19 * (uint64_t)v17;
          result = (uint64_t)memcpy(v5, v20, v19 * (uint64_t)v17);
          v18 = *(_DWORD *)(**(_QWORD **)(v6 + 88) + 20);
        }
        if (!v18)
          result = icvFreeSeqBlock(v6, 0);
        v14 = __OFSUB__(v4, v17);
        v4 -= v17;
      }
      while (!((v4 < 0) ^ v14 | (v4 == 0)));
    }
  }
  return result;
}

void sub_219DFCFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvClearSeq(uint64_t a1)
{
  const cv::Exception *v1;
  void *__p[2];
  void *v4[2];
  void *v5[2];
  _BYTE v6[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    std::string::basic_string[abi:ne180100]<0>(v4, "cvClearSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v6, 4294967269, v5, v4, __p, 1590);
    cv::error((cv *)v6, v1);
  }
  return cvSeqPopMulti(a1, 0, *(_DWORD *)(a1 + 40), 0);
}

void sub_219DFD12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

int *cvSeqSlice(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  const cv::Exception *v8;
  const cv::Exception *v9;
  int64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  const cv::Exception *v18;
  int *Seq;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  void *__p[2];
  void *v30[2];
  void *v31[2];
  _BYTE v32[120];
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v5 = a3;
  v6 = a2;
  if (!a1 || *(_WORD *)(a1 + 2) != 17049)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "Invalid sequence header");
    std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v32, 4294967291, v31, v30, __p, 1604);
    cv::error((cv *)v32, v8);
  }
  if (!a3)
  {
    v5 = *(_QWORD *)(a1 + 72);
    if (!v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "NULL storage pointer");
      std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v32, 4294967269, v31, v30, __p, 1610);
      cv::error((cv *)v32, v9);
    }
  }
  v10 = *(int *)(a1 + 44);
  v11 = cvSliceLength(a2, a1);
  v12 = v11;
  v13 = *(_DWORD *)(a1 + 40);
  if ((int)v13 <= v6)
    v14 = *(_DWORD *)(a1 + 40);
  else
    v14 = 0;
  if (v6 >= 0)
    v15 = -v14;
  else
    v15 = *(_DWORD *)(a1 + 40);
  v16 = v15 + v6;
  if (v11 > v13 || (v16 >= v13 ? (v17 = v11 == 0) : (v17 = 1), !v17))
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "Bad sequence slice");
    std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v32, 4294967085, v31, v30, __p, 1621);
    cv::error((cv *)v32, v18);
  }
  Seq = cvCreateSeq(*(_DWORD *)a1, *(int *)(a1 + 4), v10, v5);
  if (v12 >= 1)
  {
    cvStartReadSeq(a1, (uint64_t)v33, 0);
    cvSetSeqReaderPos(v33, v16, 0);
    v20 = 0;
    v21 = 0;
    v22 = v35;
    v23 = (v36 - (uint64_t)v35) / v10;
    do
    {
      if ((int)v23 >= v12)
        v24 = v12;
      else
        v24 = v23;
      if (a4)
      {
        cvSeqPushMulti(Seq, v22, v24, 0);
      }
      else
      {
        v25 = cvMemStorageAlloc(v5, 0x20uLL);
        if (v20)
        {
          *(_QWORD *)v25 = v21;
          *(_QWORD *)(v25 + 8) = v20;
          *v20 = v25;
          *(_QWORD *)(v21 + 8) = v25;
          v26 = *(_DWORD *)(v21 + 20) + *(_DWORD *)(v21 + 16);
        }
        else
        {
          v26 = 0;
          *(_QWORD *)v25 = v25;
          *(_QWORD *)(v25 + 8) = v25;
          v20 = (_QWORD *)v25;
          *((_QWORD *)Seq + 11) = v25;
        }
        *(_DWORD *)(v25 + 16) = v26;
        *(_QWORD *)(v25 + 24) = v35;
        *(_DWORD *)(v25 + 20) = v24;
        Seq[10] += v24;
        v21 = v25;
      }
      v23 = *(_QWORD *)(v34 + 8);
      v22 = *(char **)(v23 + 24);
      v34 = v23;
      v35 = v22;
      LODWORD(v23) = *(_DWORD *)(v23 + 20);
      v27 = __OFSUB__(v12, v24);
      v12 -= v24;
    }
    while (!((v12 < 0) ^ v27 | (v12 == 0)));
  }
  return Seq;
}

void sub_219DFD4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void cvSeqSort(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  const cv::Exception *v6;
  const cv::Exception *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int SeqReaderPos;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t i;
  char v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t j;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t m;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t k;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t n;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int ii;
  uint64_t jj;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int kk;
  uint64_t mm;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t **v117;
  unint64_t v118;
  _BYTE *v119;
  uint64_t *v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char v128;
  unsigned int v129;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  void *__p[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  void *v147[2];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v5 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v151, "Bad input sequence");
    std::string::basic_string[abi:ne180100]<0>(v147, "cvSeqSort");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v155, v5, v151, v147, __p, 1915);
    cv::error((cv *)&v155, v6);
  }
  if (*(_WORD *)(a1 + 2) != 17049)
  {
    v5 = 4294967291;
    goto LABEL_5;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v151, "Null compare function");
    std::string::basic_string[abi:ne180100]<0>(v147, "cvSeqSort");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v155, 4294967269, v151, v147, __p, 1918);
    cv::error((cv *)&v155, v7);
  }
  if (*(int *)(a1 + 40) < 2)
    return;
  v8 = *(unsigned int *)(a1 + 44);
  cvStartReadSeq(a1, (uint64_t)&v163, 0);
  v159 = v163;
  v160 = v164;
  v161 = v165;
  v162 = v166;
  v167[0] = v164;
  v167[1] = v165;
  v9 = v164;
  v10 = *((_QWORD *)&v164 + 1) - (int)v8;
  v11 = v165;
  if (v10 >= (unint64_t)v165)
  {
    v14 = *((_QWORD *)&v161 + 1);
  }
  else
  {
    v9 = *(_QWORD *)v164;
    v11 = *(_QWORD *)(*(_QWORD *)v164 + 24);
    v12 = *(_DWORD *)(*(_QWORD *)v164 + 20);
    v13 = *(_DWORD *)(*((_QWORD *)&v159 + 1) + 44);
    v10 = v11 + v13 * (v12 - 1);
    v14 = v11 + v12 * v13;
  }
  v15 = 0;
  v168 = v9;
  v169 = v10;
  v170 = v11;
  v171 = v14;
  do
  {
    v16 = &v167[4 * (unint64_t)v15];
    v17 = v16[1];
    v164 = *v16;
    v165 = v17;
    v18 = v16[3];
    v160 = v16[2];
    v161 = v18;
    v129 = v15 - 1;
    while (1)
    {
      if ((_QWORD)v164 == (_QWORD)v160)
      {
        v20 = v8 + DWORD2(v160) - DWORD2(v164);
      }
      else
      {
        SeqReaderPos = cvGetSeqReaderPos((uint64_t)&v159);
        v20 = v8 + v8 * (SeqReaderPos - cvGetSeqReaderPos((uint64_t)&v163));
      }
      if (v20 <= 7 * (int)v8)
        break;
      v139 = v163;
      v140 = v164;
      v141 = v165;
      v142 = v166;
      v157 = v165;
      v158 = v166;
      v155 = v163;
      v156 = v164;
      v145 = v161;
      v146 = v162;
      *(_OWORD *)__p = v159;
      v144 = v160;
      v149 = v161;
      v150 = v162;
      v21 = v20 / (int)v8;
      *(_OWORD *)v147 = v159;
      v148 = v160;
      if (v20 / (int)v8 >= 41)
      {
        v22 = v21 >> 3;
        v23 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        v133 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        v24 = *((_QWORD *)&v140 + 1);
        v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v133, a3);
        v26 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v24, a3);
        if (v25 < 0)
        {
          if ((v26 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v24, a3) >= 0)
              v27 = v23;
            else
              v27 = v24;
LABEL_32:
            v133 = v27;
          }
        }
        else if (v26 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v24, a3) >= 0)
            v27 = v24;
          else
            v27 = v23;
          goto LABEL_32;
        }
        cvSetSeqReaderPos(&v139, (v21 >> 1) - 3 * v22, 1);
        v32 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        v30 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        v33 = *((_QWORD *)&v140 + 1);
        v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v30, a3);
        v35 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v30, v33, a3);
        if (v34 < 0)
        {
          if ((v35 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v33, a3) >= 0)
              v30 = v32;
            else
              v30 = v33;
          }
        }
        else if (v35 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v33, a3) >= 0)
            v30 = v33;
          else
            v30 = v32;
        }
        cvSetSeqReaderPos(&v139, v21 - (v21 >> 1) + ~(3 * v22), 1);
        v36 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        v31 = *((_QWORD *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v22, 1);
        v37 = *((_QWORD *)&v140 + 1);
        v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v31, a3);
        v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v31, v37, a3);
        if (v38 < 0)
        {
          if ((v39 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v37, a3) >= 0)
              v31 = v36;
            else
              v31 = v37;
          }
        }
        else if (v39 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v37, a3) >= 0)
            v31 = v37;
          else
            v31 = v36;
        }
        goto LABEL_51;
      }
      v133 = *((_QWORD *)&v140 + 1);
      if ((v21 & 0x80000000) == 0)
        v28 = v20 / (int)v8;
      else
        v28 = v21 + 1;
      v29 = v28 >> 1;
      cvSetSeqReaderPos(&v139, v28 >> 1, 1);
      v30 = *((_QWORD *)&v140 + 1);
      cvSetSeqReaderPos(&v139, v21 + ~v29, 1);
      v31 = *((_QWORD *)&v140 + 1);
LABEL_51:
      v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v30, a3);
      v41 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v30, v31, a3);
      if (v40 < 0)
      {
        if ((v41 & 0x80000000) == 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v31, a3) >= 0)
            v30 = v133;
          else
            v30 = v31;
        }
      }
      else if (v41 <= 0)
      {
        if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v31, a3) >= 0)
          v30 = v31;
        else
          v30 = v133;
      }
      v163 = v155;
      v164 = v156;
      v165 = v157;
      v166 = v158;
      v42 = *((_QWORD *)&v156 + 1);
      if (v30 != *((_QWORD *)&v156 + 1) && (int)v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          v44 = *(_BYTE *)(v30 + i);
          *(_BYTE *)(v30 + i) = *(_BYTE *)(*((_QWORD *)&v164 + 1) + i);
          *(_BYTE *)(*((_QWORD *)&v164 + 1) + i) = v44;
        }
        v42 = *((_QWORD *)&v164 + 1);
      }
      v45 = v42 + (int)v8;
      *((_QWORD *)&v164 + 1) = v45;
      if (v45 >= *((_QWORD *)&v165 + 1))
      {
        v46 = *(_QWORD *)(v164 + 8);
        v45 = *(_QWORD *)(v46 + 24);
        *(_QWORD *)&v164 = v46;
        *((_QWORD *)&v164 + 1) = v45;
        *(_QWORD *)&v165 = *(_QWORD *)(v46 + 24);
        *((_QWORD *)&v165 + 1) = v165 + *(int *)(*((_QWORD *)&v163 + 1) + 44) * (uint64_t)*(int *)(v46 + 20);
      }
      v47 = 0;
      *(_OWORD *)v151 = v163;
      v152 = v164;
      v153 = v165;
      v154 = v166;
      v48 = *((_QWORD *)&v160 + 1);
LABEL_68:
      if (v45 == v48)
      {
        v56 = v48;
      }
      else
      {
        while (1)
        {
          v49 = a2();
          if (v49 > 0)
            break;
          if (!v49)
          {
            v50 = *((_QWORD *)&v152 + 1);
            if (*((_QWORD *)&v152 + 1) != *((_QWORD *)&v164 + 1) && (int)v8 >= 1)
            {
              for (j = 0; j != v8; ++j)
              {
                v53 = *(_BYTE *)(*((_QWORD *)&v152 + 1) + j);
                *(_BYTE *)(*((_QWORD *)&v152 + 1) + j) = *(_BYTE *)(*((_QWORD *)&v164 + 1) + j);
                *(_BYTE *)(*((_QWORD *)&v164 + 1) + j) = v53;
              }
              v50 = *((_QWORD *)&v152 + 1);
            }
            *((_QWORD *)&v152 + 1) = v50 + (int)v8;
            if (*((_QWORD *)&v152 + 1) >= *((_QWORD *)&v153 + 1))
            {
              v54 = *(_QWORD *)(v152 + 8);
              v55 = *(_QWORD *)(v54 + 24);
              *(_QWORD *)&v152 = v54;
              *((_QWORD *)&v152 + 1) = v55;
              *(_QWORD *)&v153 = *(_QWORD *)(v54 + 24);
              *((_QWORD *)&v153 + 1) = v153 + *((int *)v151[1] + 11) * (uint64_t)*(int *)(v54 + 20);
            }
            v47 = 1;
          }
          v56 = *((_QWORD *)&v164 + 1) + (int)v8;
          *((_QWORD *)&v164 + 1) = v56;
          if (v56 >= *((_QWORD *)&v165 + 1))
          {
            v57 = *(_QWORD *)(v164 + 8);
            v56 = *(_QWORD *)(v57 + 24);
            *(_QWORD *)&v164 = v57;
            *((_QWORD *)&v164 + 1) = v56;
            *(_QWORD *)&v165 = *(_QWORD *)(v57 + 24);
            *((_QWORD *)&v165 + 1) = v165 + *(int *)(*((_QWORD *)&v163 + 1) + 44) * (uint64_t)*(int *)(v57 + 20);
          }
          if (v56 == *((_QWORD *)&v160 + 1))
            goto LABEL_114;
        }
        v58 = *((_QWORD *)&v164 + 1);
        v56 = *((_QWORD *)&v160 + 1);
        while (v58 != v56)
        {
          v59 = a2();
          if (v59 < 0)
          {
            v66 = *((_QWORD *)&v164 + 1);
            v56 = *((_QWORD *)&v160 + 1);
            if (*((_QWORD *)&v164 + 1) == *((_QWORD *)&v160 + 1))
              break;
            if ((int)v8 >= 1)
            {
              for (k = 0; k != v8; ++k)
              {
                v68 = *(_BYTE *)(*((_QWORD *)&v164 + 1) + k);
                *(_BYTE *)(*((_QWORD *)&v164 + 1) + k) = *(_BYTE *)(*((_QWORD *)&v160 + 1) + k);
                *(_BYTE *)(*((_QWORD *)&v160 + 1) + k) = v68;
              }
              v66 = *((_QWORD *)&v164 + 1);
            }
            v45 = v66 + (int)v8;
            *((_QWORD *)&v164 + 1) = v45;
            if (v45 >= *((_QWORD *)&v165 + 1))
            {
              v69 = *(_QWORD *)(v164 + 8);
              v45 = *(_QWORD *)(v69 + 24);
              *(_QWORD *)&v164 = v69;
              *((_QWORD *)&v164 + 1) = v45;
              *(_QWORD *)&v165 = *(_QWORD *)(v69 + 24);
              *((_QWORD *)&v165 + 1) = v165 + *(int *)(*((_QWORD *)&v163 + 1) + 44) * (uint64_t)*(int *)(v69 + 20);
            }
            v70 = *((_QWORD *)&v160 + 1);
            v48 = *((_QWORD *)&v160 + 1) - (int)v8;
            *((_QWORD *)&v160 + 1) = v48;
            if (v48 < (unint64_t)v161)
            {
              *(_QWORD *)&v160 = *(_QWORD *)v160;
              v71 = *(int *)(*((_QWORD *)&v159 + 1) + 44);
              v48 = *(_QWORD *)(v160 + 24) + v71 * (*(int *)(v160 + 20) - 1);
              *((_QWORD *)&v160 + 1) = v48;
              *(_QWORD *)&v161 = *(_QWORD *)(v160 + 24);
              *((_QWORD *)&v161 + 1) = v161 + *(int *)(v160 + 20) * (uint64_t)(int)v71;
            }
            v47 = 1;
            if (v45 != v70)
              goto LABEL_68;
            goto LABEL_132;
          }
          if (!v59)
          {
            v60 = *((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1) != *((_QWORD *)&v160 + 1) && (int)v8 >= 1)
            {
              for (m = 0; m != v8; ++m)
              {
                v63 = *(_BYTE *)(*((_QWORD *)&v144 + 1) + m);
                *(_BYTE *)(*((_QWORD *)&v144 + 1) + m) = *(_BYTE *)(*((_QWORD *)&v160 + 1) + m);
                *(_BYTE *)(*((_QWORD *)&v160 + 1) + m) = v63;
              }
              v60 = *((_QWORD *)&v144 + 1);
            }
            *((_QWORD *)&v144 + 1) = v60 - (int)v8;
            if (*((_QWORD *)&v144 + 1) < (unint64_t)v145)
            {
              *(_QWORD *)&v144 = *(_QWORD *)v144;
              v64 = *((int *)__p[1] + 11);
              *((_QWORD *)&v144 + 1) = *(_QWORD *)(v144 + 24) + v64 * (*(int *)(v144 + 20) - 1);
              *(_QWORD *)&v145 = *(_QWORD *)(v144 + 24);
              *((_QWORD *)&v145 + 1) = v145 + *(int *)(v144 + 20) * (uint64_t)(int)v64;
            }
            v47 = 1;
          }
          v56 = *((_QWORD *)&v160 + 1) - (int)v8;
          *((_QWORD *)&v160 + 1) = v56;
          if (v56 < (unint64_t)v161)
          {
            *(_QWORD *)&v160 = *(_QWORD *)v160;
            v65 = *(int *)(*((_QWORD *)&v159 + 1) + 44);
            v56 = *(_QWORD *)(v160 + 24) + v65 * (*(int *)(v160 + 20) - 1);
            *((_QWORD *)&v160 + 1) = v56;
            *(_QWORD *)&v161 = *(_QWORD *)(v160 + 24);
            *((_QWORD *)&v161 + 1) = v161 + *(int *)(v160 + 20) * (uint64_t)(int)v65;
          }
          v58 = *((_QWORD *)&v164 + 1);
        }
      }
LABEL_114:
      v72 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v56, v42, a3);
      if (!v72)
      {
        v73 = *((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1) != *((_QWORD *)&v164 + 1) && (int)v8 >= 1)
        {
          for (n = 0; n != v8; ++n)
          {
            v76 = *(_BYTE *)(*((_QWORD *)&v152 + 1) + n);
            *(_BYTE *)(*((_QWORD *)&v152 + 1) + n) = *(_BYTE *)(*((_QWORD *)&v164 + 1) + n);
            *(_BYTE *)(*((_QWORD *)&v164 + 1) + n) = v76;
          }
          v73 = *((_QWORD *)&v152 + 1);
        }
        *((_QWORD *)&v152 + 1) = v73 + (int)v8;
        if (*((_QWORD *)&v152 + 1) >= *((_QWORD *)&v153 + 1))
        {
          v77 = *(_QWORD *)(v152 + 8);
          v78 = *(_QWORD *)(v77 + 24);
          *(_QWORD *)&v152 = v77;
          *((_QWORD *)&v152 + 1) = v78;
          *(_QWORD *)&v153 = *(_QWORD *)(v77 + 24);
          *((_QWORD *)&v153 + 1) = v153 + *((int *)v151[1] + 11) * (uint64_t)*(int *)(v77 + 20);
        }
        v47 = 1;
      }
      if (v72 <= 0)
      {
        *((_QWORD *)&v164 + 1) += (int)v8;
        if (*((_QWORD *)&v164 + 1) < *((_QWORD *)&v165 + 1))
          goto LABEL_131;
        v80 = *(_QWORD *)(v164 + 8);
        v83 = *(_QWORD *)(v80 + 24);
        *(_QWORD *)&v164 = v80;
        *((_QWORD *)&v164 + 1) = v83;
        v81 = *(_QWORD *)(v80 + 24);
        *(_QWORD *)&v165 = v81;
        LODWORD(v80) = *(_DWORD *)(v80 + 20);
        v79 = (int *)(*((_QWORD *)&v163 + 1) + 44);
        v82 = (char *)&v165 + 8;
      }
      else
      {
        *((_QWORD *)&v160 + 1) -= (int)v8;
        if (*((_QWORD *)&v160 + 1) >= (unint64_t)v161)
          goto LABEL_131;
        *(_QWORD *)&v160 = *(_QWORD *)v160;
        v79 = (int *)(v160 + 20);
        v80 = *(int *)(*((_QWORD *)&v159 + 1) + 44);
        *((_QWORD *)&v160 + 1) = *(_QWORD *)(v160 + 24) + v80 * (*(int *)(v160 + 20) - 1);
        v81 = *(_QWORD *)(v160 + 24);
        *(_QWORD *)&v161 = v81;
        v82 = (char *)&v161 + 8;
      }
      *(_QWORD *)v82 = v81 + *v79 * (uint64_t)(int)v80;
LABEL_131:
      if (!v47)
      {
        v163 = v155;
        v164 = v156;
        v165 = v157;
        v166 = v158;
        v159 = *(_OWORD *)v147;
        v160 = v148;
        v161 = v149;
        v162 = v150;
        break;
      }
LABEL_132:
      v84 = cvGetSeqReaderPos((uint64_t)&v163);
      if (!v84)
        v84 = *(_DWORD *)(a1 + 40);
      v85 = cvGetSeqReaderPos((uint64_t)&v155);
      v86 = cvGetSeqReaderPos((uint64_t)v151);
      if (!v86)
        v86 = *(_DWORD *)(a1 + 40);
      v87 = v84 - v86;
      if (v84 - v86 >= v86 - v85)
        v88 = v86 - v85;
      else
        v88 = v84 - v86;
      if (v88 >= 1)
      {
        v139 = v155;
        v140 = v156;
        v141 = v157;
        v142 = v158;
        v135 = v163;
        v136 = v164;
        v137 = v165;
        v138 = v166;
        cvSetSeqReaderPos(&v135, -v88, 1);
        for (ii = 0; ii != v88; ++ii)
        {
          if ((int)v8 >= 1)
          {
            for (jj = 0; jj != v8; ++jj)
            {
              v91 = *(_BYTE *)(*((_QWORD *)&v140 + 1) + jj);
              *(_BYTE *)(*((_QWORD *)&v140 + 1) + jj) = *(_BYTE *)(*((_QWORD *)&v136 + 1) + jj);
              *(_BYTE *)(*((_QWORD *)&v136 + 1) + jj) = v91;
            }
          }
          *((_QWORD *)&v140 + 1) += (int)v8;
          if (*((_QWORD *)&v140 + 1) >= *((_QWORD *)&v141 + 1))
          {
            v92 = *(_QWORD *)(v140 + 8);
            v93 = *(_QWORD *)(v92 + 24);
            *(_QWORD *)&v140 = v92;
            *((_QWORD *)&v140 + 1) = v93;
            *(_QWORD *)&v141 = *(_QWORD *)(v92 + 24);
            *((_QWORD *)&v141 + 1) = v141 + *(int *)(*((_QWORD *)&v139 + 1) + 44) * (uint64_t)*(int *)(v92 + 20);
          }
          *((_QWORD *)&v136 + 1) += (int)v8;
          if (*((_QWORD *)&v136 + 1) >= *((_QWORD *)&v137 + 1))
          {
            v94 = *(_QWORD *)(v136 + 8);
            v95 = *(_QWORD *)(v94 + 24);
            *(_QWORD *)&v136 = v94;
            *((_QWORD *)&v136 + 1) = v95;
            *(_QWORD *)&v137 = *(_QWORD *)(v94 + 24);
            *((_QWORD *)&v137 + 1) = v137 + *(int *)(*((_QWORD *)&v135 + 1) + 44) * (uint64_t)*(int *)(v94 + 20);
          }
        }
      }
      v96 = cvGetSeqReaderPos((uint64_t)&v159);
      v97 = cvGetSeqReaderPos((uint64_t)v147);
      v98 = cvGetSeqReaderPos((uint64_t)__p);
      v99 = v97 - v98;
      v100 = v98 - v96;
      if (v99 >= v98 - v96)
        v101 = v98 - v96;
      else
        v101 = v99;
      if (v101 >= 1)
      {
        v139 = v163;
        v140 = v164;
        v141 = v165;
        v142 = v166;
        v135 = *(_OWORD *)v147;
        v136 = v148;
        v137 = v149;
        v138 = v150;
        cvSetSeqReaderPos(&v135, 1 - v101, 1);
        for (kk = 0; kk != v101; ++kk)
        {
          if ((int)v8 >= 1)
          {
            for (mm = 0; mm != v8; ++mm)
            {
              v104 = *(_BYTE *)(*((_QWORD *)&v140 + 1) + mm);
              *(_BYTE *)(*((_QWORD *)&v140 + 1) + mm) = *(_BYTE *)(*((_QWORD *)&v136 + 1) + mm);
              *(_BYTE *)(*((_QWORD *)&v136 + 1) + mm) = v104;
            }
          }
          *((_QWORD *)&v140 + 1) += (int)v8;
          if (*((_QWORD *)&v140 + 1) >= *((_QWORD *)&v141 + 1))
          {
            v105 = *(_QWORD *)(v140 + 8);
            v106 = *(_QWORD *)(v105 + 24);
            *(_QWORD *)&v140 = v105;
            *((_QWORD *)&v140 + 1) = v106;
            *(_QWORD *)&v141 = *(_QWORD *)(v105 + 24);
            *((_QWORD *)&v141 + 1) = v141 + *(int *)(*((_QWORD *)&v139 + 1) + 44) * (uint64_t)*(int *)(v105 + 20);
          }
          *((_QWORD *)&v136 + 1) += (int)v8;
          if (*((_QWORD *)&v136 + 1) >= *((_QWORD *)&v137 + 1))
          {
            v107 = *(_QWORD *)(v136 + 8);
            v108 = *(_QWORD *)(v107 + 24);
            *(_QWORD *)&v136 = v107;
            *((_QWORD *)&v136 + 1) = v108;
            *(_QWORD *)&v137 = *(_QWORD *)(v107 + 24);
            *((_QWORD *)&v137 + 1) = v137 + *(int *)(*((_QWORD *)&v135 + 1) + 44) * (uint64_t)*(int *)(v107 + 20);
          }
        }
      }
      if (v87 <= 1)
      {
        if (v100 <= 1)
          goto LABEL_192;
        v159 = *(_OWORD *)v147;
        v160 = v148;
        v161 = v149;
        v162 = v150;
        v163 = *(_OWORD *)v147;
        v164 = v148;
        v165 = v149;
        v166 = v150;
        cvSetSeqReaderPos(&v163, 1 - v100, 1);
      }
      else if (v100 < 2)
      {
        v159 = v155;
        v160 = v156;
        v161 = v157;
        v162 = v158;
        v163 = v155;
        v164 = v156;
        v165 = v157;
        v166 = v158;
        cvSetSeqReaderPos(&v159, v87 - 1, 1);
      }
      else
      {
        v109 = (int)v129 + 1;
        v110 = &v167[4 * v109];
        if (v87 <= v100)
        {
          v114 = v149;
          v110[2] = v148;
          v110[3] = v114;
          cvSetSeqReaderPos(v147, 1 - v100, 1);
          v115 = v149;
          *v110 = v148;
          v110[1] = v115;
          v159 = v155;
          v160 = v156;
          v161 = v157;
          v162 = v158;
          v165 = v157;
          v166 = v158;
          v163 = v155;
          v164 = v156;
          cvSetSeqReaderPos(&v159, v87 - 1, 1);
        }
        else
        {
          v111 = v157;
          *v110 = v156;
          v110[1] = v111;
          cvSetSeqReaderPos(&v155, v87 - 1, 1);
          v112 = v157;
          v113 = &v167[4 * v109];
          v113[2] = v156;
          v113[3] = v112;
          v159 = *(_OWORD *)v147;
          v160 = v148;
          v161 = v149;
          v162 = v150;
          v165 = v149;
          v166 = v150;
          v163 = *(_OWORD *)v147;
          v164 = v148;
          cvSetSeqReaderPos(&v163, 1 - v100, 1);
        }
        ++v129;
      }
    }
    v116 = *((_QWORD *)&v163 + 1);
    v117 = (uint64_t **)v164;
    v118 = v165;
    v119 = (_BYTE *)(*((_QWORD *)&v164 + 1) + (int)v8);
    v132 = (_BYTE *)*((_QWORD *)&v165 + 1);
    if ((unint64_t)v119 >= *((_QWORD *)&v165 + 1))
    {
      v120 = *(uint64_t **)(v164 + 8);
      v119 = (_BYTE *)v120[3];
      v132 = &v119[*(int *)(*((_QWORD *)&v163 + 1) + 44) * (uint64_t)*((int *)v120 + 5)];
      v121 = v119;
    }
    else
    {
      v120 = (uint64_t *)v164;
      v121 = (_BYTE *)v165;
    }
    v122 = (_BYTE *)(*((_QWORD *)&v160 + 1) + (int)v8);
    *((_QWORD *)&v160 + 1) = v122;
    if ((unint64_t)v122 >= *((_QWORD *)&v161 + 1))
    {
      v123 = *(_QWORD *)(v160 + 8);
      v122 = *(_BYTE **)(v123 + 24);
      *(_QWORD *)&v160 = v123;
      *((_QWORD *)&v160 + 1) = v122;
      *(_QWORD *)&v161 = *(_QWORD *)(v123 + 24);
      *((_QWORD *)&v161 + 1) = v161 + *(int *)(*((_QWORD *)&v159 + 1) + 44) * (uint64_t)*(int *)(v123 + 20);
    }
    while (v119 != v122)
    {
      v131 = v121;
      if (v117 != (uint64_t **)v120)
        v118 = (unint64_t)v121;
      v134 = v120;
      v117 = (uint64_t **)v120;
      v124 = v119;
      while (v124 != *((char **)&v164 + 1))
      {
        v125 = v124;
        v124 -= (int)v8;
        if ((unint64_t)v124 < v118)
        {
          v117 = (uint64_t **)*v117;
          v118 = (unint64_t)v117[3];
          v124 = (char *)(v118 + *(int *)(v116 + 44) * (*((int *)v117 + 5) - 1));
        }
        if (((int (*)(char *, char *, uint64_t))a2)(v124, v125, a3) < 1)
          break;
        if ((int)v8 >= 1)
        {
          v126 = v8;
          v127 = v124;
          do
          {
            v128 = *v127;
            *v127++ = *v125;
            *v125++ = v128;
            --v126;
          }
          while (v126);
        }
      }
      v119 += (int)v8;
      if (v119 >= v132)
      {
        v120 = (uint64_t *)v134[1];
        v119 = (_BYTE *)v120[3];
        v132 = &v119[*(int *)(v116 + 44) * (uint64_t)*((int *)v120 + 5)];
        v121 = v119;
      }
      else
      {
        v120 = v134;
        v121 = v131;
      }
      v122 = (_BYTE *)*((_QWORD *)&v160 + 1);
    }
LABEL_192:
    v15 = v129;
  }
  while ((v129 & 0x80000000) == 0);
}

void sub_219DFE5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  char a68;

  cv::Exception::~Exception((cv::Exception *)&a68);
  if (a40 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a62 < 0)
    operator delete(a57);
  _Unwind_Resume(a1);
}

_DWORD *cvCreateSet(unsigned int a1, int a2, int a3, uint64_t a4)
{
  const cv::Exception *v4;
  const cv::Exception *v5;
  _DWORD *result;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  _BYTE v10[120];

  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvCreateSet");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967269, v9, v8, __p, 2480);
    cv::error((cv *)v10, v4);
  }
  if (a2 < 112 || a3 < 16 || (a3 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvCreateSet");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967095, v9, v8, __p, 2484);
    cv::error((cv *)v10, v5);
  }
  result = cvCreateSeq(a1, a2, a3, a4);
  *((_WORD *)result + 1) = 17048;
  return result;
}

void sub_219DFE7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvSetAdd(uint64_t a1, void *__src, _QWORD *a3)
{
  const cv::Exception *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  void *__p[2];
  void *v17[2];
  void *v18[2];
  _BYTE v19[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSetAdd");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 2501);
    cv::error((cv *)v19, v6);
  }
  v7 = *(_QWORD **)(a1 + 96);
  if (!v7)
  {
    v8 = *(_DWORD *)(a1 + 40);
    v9 = *(int *)(a1 + 44);
    icvGrowSeq(a1, 0);
    v10 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD **)(a1 + 56);
    *(_QWORD *)(a1 + 96) = v7;
    if ((unint64_t)v7 + v9 <= v10)
    {
      v12 = v7;
      do
      {
        v11 = (_QWORD *)((char *)v12 + v9);
        *(_DWORD *)v12 = v8 | 0x80000000;
        v12[1] = (char *)v12 + v9;
        ++v8;
        v13 = (char *)v12 + v9 + v9;
        v12 = (_QWORD *)((char *)v12 + v9);
      }
      while ((unint64_t)v13 <= v10);
    }
    else
    {
      v11 = v7;
    }
    if (v8 >= 67108865)
      cvSetAdd_cold_1();
    *(_QWORD *)((char *)v11 - v9 + 8) = 0;
    *(_DWORD *)(**(_QWORD **)(a1 + 88) + 20) += v8 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 96) = v7[1];
  v14 = *(_DWORD *)v7 & 0x3FFFFFF;
  if (__src)
    memcpy(v7, __src, *(int *)(a1 + 44));
  *(_DWORD *)v7 = v14;
  ++*(_DWORD *)(a1 + 104);
  if (a3)
    *a3 = v7;
  return v14;
}

void sub_219DFEA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvClearSet(uint64_t a1)
{
  uint64_t result;

  result = cvClearSeq(a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

_DWORD *cvCreateGraph(unsigned int a1, int a2, int a3, int a4, uint64_t a5)
{
  const cv::Exception *v7;
  _DWORD *Set;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  if (a3 < 16 || a2 < 120 || a4 <= 39)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvCreateGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967095, v12, v11, __p, 2579);
    cv::error((cv *)v13, v7);
  }
  Set = cvCreateSet(a1, a2, a3, a5);
  *((_QWORD *)Set + 14) = cvCreateSet(0, 112, a4, a5);
  return Set;
}

void sub_219DFEBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvGraphAddVtx(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const cv::Exception *v6;
  unsigned int *v7;
  uint64_t result;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _QWORD v12[15];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvGraphAddVtx");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 2613);
    cv::error((cv *)v12, v6);
  }
  v7 = *(unsigned int **)(a1 + 96);
  v12[0] = v7;
  if (v7)
  {
    *(_QWORD *)(a1 + 96) = *((_QWORD *)v7 + 1);
    *v7 &= 0x3FFFFFFu;
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    cvSetAdd(a1, 0, v12);
    v7 = (unsigned int *)v12[0];
    if (!v12[0])
    {
      result = 0xFFFFFFFFLL;
      if (!a3)
        return result;
      goto LABEL_9;
    }
  }
  if (a2)
    memcpy(v7 + 4, (const void *)(a2 + 16), *(int *)(a1 + 44) - 16);
  *((_QWORD *)v7 + 1) = 0;
  result = *v7;
  if (a3)
LABEL_9:
    *a3 = v7;
  return result;
}

void sub_219DFED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvFindGraphEdgeByPtr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  const cv::Exception *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _DWORD *v9;
  uint64_t result;
  _DWORD *v11;
  void *__p[2];
  void *v13[2];
  void *v14[2];
  _BYTE v15[120];

  v3 = a3;
  v4 = a2;
  if (!a1 || !a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    std::string::basic_string[abi:ne180100]<0>(v13, "cvFindGraphEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v15, 4294967269, v14, v13, __p, 2698);
    cv::error((cv *)v15, v5);
  }
  if (a2 == a3)
    return 0;
  if ((*(_BYTE *)(a1 + 1) & 0x40) == 0)
  {
    v6 = *a2 & 0x3FFFFFF;
    v7 = *a3 & 0x3FFFFFF;
    v8 = v6 > v7;
    if (v6 <= v7)
      v9 = a2;
    else
      v9 = a3;
    if (v8)
      v3 = a2;
    v4 = v9;
  }
  for (result = *((_QWORD *)v4 + 1); result; result = *(_QWORD *)(result + 8 * (v4 == v11) + 8))
  {
    v11 = *(_DWORD **)(result + 32);
    if (v4 != v11 && v4 != *(_DWORD **)(result + 24))
      cvFindGraphEdgeByPtr_cold_1();
    if (v11 == v3)
      break;
  }
  return result;
}

void sub_219DFEEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvGraphAddEdgeByPtr(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t *a5)
{
  _DWORD *v7;
  _DWORD *v8;
  const cv::Exception *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _DWORD *v14;
  uint64_t GraphEdgeByPtr;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  const cv::Exception *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  float v23;
  void *__p[2];
  void *v25[2];
  void *v26[2];
  _QWORD v27[15];

  v7 = a3;
  v8 = a2;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "graph pointer is NULL");
    std::string::basic_string[abi:ne180100]<0>(v25, "cvGraphAddEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v27, 4294967269, v26, v25, __p, 2755);
    cv::error((cv *)v27, v10);
  }
  if ((*(_BYTE *)(a1 + 1) & 0x40) == 0)
  {
    v11 = *a2 & 0x3FFFFFF;
    v12 = *a3 & 0x3FFFFFF;
    v13 = v11 > v12;
    if (v11 <= v12)
      v14 = a3;
    else
      v14 = a2;
    if (v13)
      v8 = a3;
    v7 = v14;
  }
  GraphEdgeByPtr = cvFindGraphEdgeByPtr(a1, v8, v7);
  if (GraphEdgeByPtr)
  {
    v16 = GraphEdgeByPtr;
    result = 0;
    if (!a5)
      return result;
    goto LABEL_12;
  }
  if (v8 == v7)
  {
    if (v7)
      v18 = 4294967291;
    else
      v18 = 4294967269;
    std::string::basic_string[abi:ne180100]<0>(v26, "vertex pointers coinside (or set to NULL)");
    std::string::basic_string[abi:ne180100]<0>(v25, "cvGraphAddEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v27, v18, v26, v25, __p, 2775);
    cv::error((cv *)v27, v19);
  }
  v20 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(v20 + 96);
  v27[0] = v16;
  if (v16)
  {
    *(_QWORD *)(v20 + 96) = *(_QWORD *)(v16 + 8);
    *(_DWORD *)v16 &= 0x3FFFFFFu;
    ++*(_DWORD *)(v20 + 104);
  }
  else
  {
    cvSetAdd(v20, 0, v27);
    v16 = v27[0];
  }
  if ((*(_DWORD *)v16 & 0x80000000) != 0)
    cvGraphAddEdgeByPtr_cold_1();
  *(_QWORD *)(v16 + 24) = v8;
  *(_QWORD *)(v16 + 32) = v7;
  *(_QWORD *)(v16 + 8) = *((_QWORD *)v8 + 1);
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v16;
  *((_QWORD *)v8 + 1) = v16;
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 44);
  v22 = (v21 - 40);
  if (a4)
  {
    if ((int)v22 >= 1)
      memcpy((void *)(v16 + 40), (const void *)(a4 + 40), v22);
    v23 = *(float *)(a4 + 4);
  }
  else
  {
    v23 = 1.0;
    if ((int)v22 >= 1)
      bzero((void *)(v16 + 40), (v21 - 40));
  }
  *(float *)(v16 + 4) = v23;
  result = 1;
  if (a5)
LABEL_12:
    *a5 = v16;
  return result;
}

void sub_219DFF1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_DWORD *cvCloneGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const cv::Exception *v4;
  const cv::Exception *v5;
  int v6;
  uint64_t v7;
  int v8;
  void **v9;
  void **v10;
  _DWORD *Graph;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  void *v31;
  void *__p[2];
  void *v34[2];
  void *v35[2];
  uint64_t v36[15];
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;

  v2 = a2;
  if (!a1 || (*(_DWORD *)a1 & 0xFFFF3000) != 0x42981000)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "Invalid graph pointer");
    std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v36, 4294967291, v35, v34, __p, 3255);
    cv::error((cv *)v36, v4);
  }
  if (!a2)
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (!v2)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "NULL storage pointer");
      std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneGraph");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v36, 4294967269, v35, v34, __p, 3261);
      cv::error((cv *)v36, v5);
    }
  }
  v6 = *(_DWORD *)(a1 + 44);
  v7 = v6;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 44);
  v9 = (void **)cvAlloc(4 * *(int *)(a1 + 40));
  v10 = (void **)cvAlloc(8 * *(int *)(a1 + 40));
  Graph = cvCreateGraph(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), v6, v8, v2);
  memcpy(Graph + 3600, (const void *)(a1 + 14400), *(int *)(a1 + 4) - 120);
  cvStartReadSeq(a1, (uint64_t)v37, 0);
  if (*(int *)(a1 + 40) >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = v40;
    do
    {
      if ((*v14 & 0x80000000) == 0)
      {
        v36[0] = 0;
        cvGraphAddVtx((uint64_t)Graph, (uint64_t)v14, v36);
        v15 = *v14;
        v16 = v36[0];
        *(_DWORD *)v36[0] = *v14;
        *((_DWORD *)v9 + v13) = v15;
        *v14 = v13;
        v10[v13++] = (void *)v16;
        v14 = v40;
      }
      v14 = (_DWORD *)((char *)v14 + v7);
      v40 = v14;
      if ((unint64_t)v14 >= v42)
      {
        v17 = *(_QWORD *)(v39 + 8);
        v14 = *(_DWORD **)(v17 + 24);
        v39 = v17;
        v40 = v14;
        v41 = *(_QWORD *)(v17 + 24);
        v42 = v41 + *(int *)(v38 + 44) * (uint64_t)*(int *)(v17 + 20);
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)(a1 + 40));
  }
  cvStartReadSeq(*(_QWORD *)(a1 + 112), (uint64_t)v37, 0);
  if (*(int *)(*(_QWORD *)(a1 + 112) + 40) >= 1)
  {
    v18 = 0;
    v19 = v8;
    v20 = (unint64_t)v40;
    do
    {
      if ((*(_DWORD *)v20 & 0x80000000) == 0)
      {
        v36[0] = 0;
        cvGraphAddEdgeByPtr((uint64_t)Graph, v10[**(int **)(v20 + 24)], v10[**(int **)(v20 + 32)], v20, v36);
        *(_DWORD *)v36[0] = *(_DWORD *)v20;
        v20 = (unint64_t)v40;
      }
      v20 += v19;
      v40 = (_DWORD *)v20;
      if (v20 >= v42)
      {
        v21 = *(_QWORD *)(v39 + 8);
        v20 = *(_QWORD *)(v21 + 24);
        v39 = v21;
        v40 = (_DWORD *)v20;
        v41 = *(_QWORD *)(v21 + 24);
        v42 = v41 + *(int *)(v38 + 44) * (uint64_t)*(int *)(v21 + 20);
      }
      ++v18;
    }
    while (v18 < *(_DWORD *)(*(_QWORD *)(a1 + 112) + 40));
  }
  cvStartReadSeq(a1, (uint64_t)v37, 0);
  v23 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 40);
  if (v23 >= 1)
  {
    v24 = 0;
    v25 = 0;
    v26 = v38;
    v27 = v39;
    v28 = v42;
    v29 = v40;
    do
    {
      if ((*v29 & 0x80000000) == 0)
      {
        v30 = *((_DWORD *)v9 + v25++);
        *v29 = v30;
      }
      v29 = (_DWORD *)((char *)v29 + v7);
      v40 = v29;
      if ((unint64_t)v29 >= v28)
      {
        v27 = *(_QWORD *)(v27 + 8);
        v29 = *(_DWORD **)(v27 + 24);
        v39 = v27;
        v40 = v29;
        v41 = *(_QWORD *)(v27 + 24);
        v28 = v41 + *(int *)(v26 + 44) * (uint64_t)*(int *)(v27 + 20);
        v42 = v28;
      }
      ++v24;
    }
    while (v24 < v23);
  }
  cv::fastFree(v9, v22);
  cv::fastFree(v10, v31);
  if ((int)cvGetErrStatus() >= 0)
    return Graph;
  else
    return 0;
}

void sub_219DFF658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvInitTreeNodeIterator(uint64_t result, uint64_t a2, int a3)
{
  const cv::Exception *v3;
  const cv::Exception *v4;
  void *__p[2];
  void *v6[2];
  void *v7[2];
  _BYTE v8[120];

  if (!result || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvInitTreeNodeIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 3436);
    cv::error((cv *)v8, v3);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvInitTreeNodeIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967085, v7, v6, __p, 3439);
    cv::error((cv *)v8, v4);
  }
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void sub_219DFF82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvNextTreeNode(uint64_t *a1)
{
  const cv::Exception *v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "NULL iterator pointer");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvNextTreeNode");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 3455);
    cv::error((cv *)v12, v2);
  }
  result = *a1;
  v4 = *((_DWORD *)a1 + 2);
  if (*a1)
  {
    v5 = *(_QWORD *)(result + 32);
    if (v5 && (v6 = v4 + 1, v4 + 1 < *((_DWORD *)a1 + 3)))
    {
LABEL_11:
      v4 = v6;
    }
    else
    {
      v6 = (v4 & (v4 >> 31)) - 1;
      v7 = *a1;
      while (!*(_QWORD *)(v7 + 16))
      {
        v7 = *(_QWORD *)(v7 + 24);
        v8 = __OFSUB__(v4--, 1);
        if (v4 < 0 != v8)
        {
          v5 = 0;
          goto LABEL_11;
        }
      }
      if (*((_DWORD *)a1 + 3))
        v5 = *(_QWORD *)(v7 + 16);
      else
        v5 = 0;
    }
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  *((_DWORD *)a1 + 2) = v4;
  return result;
}

void sub_219DFF9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void cvCreateMemStorage_cold_1()
{
  __assert_rtn("cvAlign", "internal.hpp", 450, "(align & (align-1)) == 0 && size < INT_MAX");
}

void cvMemStorageAlloc_cold_1()
{
  __assert_rtn("cvMemStorageAlloc", "datastructs.cpp", 338, "(size_t)ptr % CV_STRUCT_ALIGN == 0");
}

void cvMemStorageAlloc_cold_2()
{
  __assert_rtn("cvMemStorageAlloc", "datastructs.cpp", 326, "storage->free_space % CV_STRUCT_ALIGN == 0");
}

void icvGoNextMemBlock()
{
  __assert_rtn("icvGoNextMemBlock", "datastructs.cpp", 261, "storage->free_space % CV_STRUCT_ALIGN == 0");
}

{
  __assert_rtn("icvGoNextMemBlock", "datastructs.cpp", 235, "parent->bottom == block");
}

void icvGrowSeq()
{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 678, "storage->free_space >= delta");
}

{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 711, "block->count % seq->elem_size == 0 && block->count > 0");
}

{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 727, "seq->first->start_index == 0");
}

void cvSeqPush_cold_1()
{
  __assert_rtn("cvSeqPush", "datastructs.cpp", 1142, "ptr + elem_size <= seq->block_max");
}

void icvFreeSeqBlock()
{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 799, "block->count > 0 && block->count % seq->elem_size == 0");
}

{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 770, "seq->ptr == block->data");
}

{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 755, "(in_front_of ? block : block->prev)->count == 0");
}

void cvSeqPushMulti_cold_1()
{
  __assert_rtn("cvSeqPushMulti", "datastructs.cpp", 1497, "block->start_index > 0");
}

void cvSeqPopMulti_cold_1()
{
  __assert_rtn("cvSeqPopMulti", "datastructs.cpp", 1538, "delta > 0");
}

void cvSeqPopMulti_cold_2()
{
  __assert_rtn("cvSeqPopMulti", "datastructs.cpp", 1563, "delta > 0");
}

void cvSetAdd_cold_1()
{
  __assert_rtn("cvSetAdd", "datastructs.cpp", 2516, "count <= CV_SET_ELEM_IDX_MASK+1");
}

void cvFindGraphEdgeByPtr_cold_1()
{
  __assert_rtn("cvFindGraphEdgeByPtr", "datastructs.cpp", 2714, "ofs == 1 || start_vtx == edge->vtx[0]");
}

void cvGraphAddEdgeByPtr_cold_1()
{
  __assert_rtn("cvGraphAddEdgeByPtr", "datastructs.cpp", 2778, "edge->flags >= 0");
}

uint64_t cv::borderInterpolate(cv *this, int a2, int a3)
{
  unint64_t v3;
  int v4;
  uint64_t result;
  const cv::Exception *v6;
  int v7;
  int v8;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  v3 = (unint64_t)this;
  v4 = (_DWORD)this - a2;
  if (this < a2)
    return v3;
  result = 0xFFFFFFFFLL;
  switch(a3)
  {
    case 0:
      return result;
    case 1:
      if ((v3 & 0x80000000) == 0)
        return (a2 - 1);
      else
        return 0;
    case 2:
    case 4:
      if (a2 == 1)
        return 0;
      LODWORD(result) = v3;
      do
      {
        if ((int)result >= 0)
          v7 = ~(result + (a3 == 4));
        else
          v7 = a3 == 4;
        if ((int)result < 0)
          v8 = ~(_DWORD)result;
        else
          v8 = 2 * a2;
        result = (v8 + v7);
      }
      while (result >= a2);
      return result;
    case 3:
      if ((v3 & 0x80000000) != 0)
        v3 = (~v4 + v3 + (v4 + 1) % a2);
      if ((int)v3 < a2)
        return v3;
      result = ((int)v3 % a2);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v11, "Unknown/unsupported border type");
      std::string::basic_string[abi:ne180100]<0>(v10, "borderInterpolate");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v12, 4294967291, v11, v10, __p, 94);
      cv::error((cv *)v12, v6);
  }
  return result;
}

void sub_219E00034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

double cv::BaseRowFilter::BaseRowFilter(cv::BaseRowFilter *this)
{
  double result;

  *(_QWORD *)this = off_24DBEE648;
  result = NAN;
  *((_QWORD *)this + 1) = -1;
  return result;
}

double cv::BaseColumnFilter::BaseColumnFilter(cv::BaseColumnFilter *this)
{
  double result;

  *(_QWORD *)this = off_24DBEE670;
  result = NAN;
  *((_QWORD *)this + 1) = -1;
  return result;
}

_QWORD *cv::BaseFilter::BaseFilter(_QWORD *this)
{
  *this = off_24DBEE6A0;
  this[1] = -1;
  this[2] = -1;
  return this;
}

uint64_t *cv::Ptr<cv::BaseColumnFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)a1[1];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      cv::fastFree((void **)a1[1], a2);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t *cv::Ptr<cv::BaseRowFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)a1[1];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      cv::fastFree((void **)a1[1], a2);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t *cv::Ptr<cv::BaseFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)a1[1];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      cv::fastFree((void **)a1[1], a2);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t cv::FilterEngine::FilterEngine(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, uint64_t a10)
{
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_24DBEE6D0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  cv::FilterEngine::init(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

{
  return cv::FilterEngine::FilterEngine(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_219E002BC(_Unwind_Exception *a1, void *a2)
{
  uint64_t *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  cv::Ptr<cv::BaseColumnFilter>::~Ptr(v2 + 36, a2);
  cv::Ptr<cv::BaseRowFilter>::~Ptr(v2 + 34, v6);
  cv::Ptr<cv::BaseFilter>::~Ptr(v2 + 32, v7);
  v8 = (void *)v2[29];
  if (v8)
  {
    v2[30] = (uint64_t)v8;
    operator delete(v8);
  }
  v9 = (void *)v2[23];
  if (v9)
  {
    v2[24] = (uint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)v2[20];
  if (v10)
  {
    v2[21] = (uint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)v2[17];
  if (v11)
  {
    v2[18] = (uint64_t)v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v2[15] = (uint64_t)v12;
    operator delete(v12);
  }
  v13 = *v3;
  if (*v3)
  {
    v2[11] = (uint64_t)v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

double cv::FilterEngine::init(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, uint64_t a10)
{
  _QWORD *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  const cv::Exception *v35;
  _DWORD *v36;
  const cv::Exception *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  const cv::Exception *v44;
  const cv::Exception *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  size_t v53;
  unsigned int v54;
  int v55;
  int v56;
  double result;
  void *__p[2];
  void *v59[2];
  void *v60[2];
  _BYTE v61[120];

  *(_DWORD *)(a1 + 8) = a5 & 0xFFF;
  *(_DWORD *)(a1 + 12) = a6 & 0xFFF;
  *(_DWORD *)(a1 + 16) = a7 & 0xFFF;
  v15 = (_QWORD *)(a1 + 256);
  if ((_QWORD *)(a1 + 256) != a2)
  {
    v17 = (unsigned int *)a2[1];
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    v19 = *(unsigned int **)(a1 + 264);
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        if (*v15)
          (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 8))(*v15);
        cv::fastFree(*(void ***)(a1 + 264), a2);
      }
    }
    *v15 = 0;
    v15[1] = 0;
    *(_QWORD *)(a1 + 256) = *a2;
    *(_QWORD *)(a1 + 264) = v17;
  }
  v22 = (_QWORD *)(a1 + 272);
  if ((_QWORD *)(a1 + 272) != a3)
  {
    v23 = (unsigned int *)a3[1];
    if (v23)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    v25 = *(unsigned int **)(a1 + 280);
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        if (*v22)
          (*(void (**)(_QWORD))(*(_QWORD *)*v22 + 8))(*v22);
        cv::fastFree(*(void ***)(a1 + 280), a2);
      }
    }
    *v22 = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 272) = *a3;
    *(_QWORD *)(a1 + 280) = v23;
  }
  v28 = (_QWORD *)(a1 + 288);
  if ((_QWORD *)(a1 + 288) != a4)
  {
    v29 = (unsigned int *)a4[1];
    if (v29)
    {
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    v31 = *(unsigned int **)(a1 + 296);
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        if (*v28)
          (*(void (**)(_QWORD))(*(_QWORD *)*v28 + 8))(*v28);
        cv::fastFree(*(void ***)(a1 + 296), a2);
      }
    }
    *v28 = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 288) = *a4;
    *(_QWORD *)(a1 + 296) = v29;
  }
  if (a9 >= 0)
    v34 = a9;
  else
    v34 = a8;
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v34;
  if (v34 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v60, "columnBorderType != BORDER_WRAP");
    std::string::basic_string[abi:ne180100]<0>(v59, "init");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v61, 4294967081, v60, v59, __p, 166);
    cv::error((cv *)v61, v35);
  }
  v36 = (_DWORD *)*v15;
  if (*v15)
  {
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(v60, "bufType == srcType");
      std::string::basic_string[abi:ne180100]<0>(v59, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v61, 4294967081, v60, v59, __p, 176);
      cv::error((cv *)v61, v37);
    }
    v38 = v36[2];
    *(_DWORD *)(a1 + 20) = v38;
    v39 = v36[3];
    *(_DWORD *)(a1 + 24) = v39;
    v40 = v36[4];
    *(_DWORD *)(a1 + 28) = v40;
    v41 = v36[5];
  }
  else
  {
    v42 = *v22;
    if (!*v22 || (v43 = *v28) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v60, "!rowFilter.empty() && !columnFilter.empty()");
      std::string::basic_string[abi:ne180100]<0>(v59, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v61, 4294967081, v60, v59, __p, 170);
      cv::error((cv *)v61, v44);
    }
    v38 = *(_DWORD *)(v42 + 8);
    v39 = *(_DWORD *)(v43 + 8);
    *(_DWORD *)(a1 + 20) = v38;
    *(_DWORD *)(a1 + 24) = v39;
    v40 = *(_DWORD *)(v42 + 12);
    v41 = *(_DWORD *)(v43 + 12);
    *(_DWORD *)(a1 + 28) = v40;
  }
  *(_DWORD *)(a1 + 32) = v41;
  if (v40 < 0 || v40 >= v38 || v41 < 0 || v41 >= v39)
  {
    std::string::basic_string[abi:ne180100]<0>(v60, "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height");
    std::string::basic_string[abi:ne180100]<0>(v59, "init");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v61, 4294967081, v60, v59, __p, 182);
    cv::error((cv *)v61, v45);
  }
  v46 = (((a5 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a5 & 7))) & 3);
  v47 = v46 >> ((*(_DWORD *)(a1 + 8) >> 1) & 2);
  *(_DWORD *)(a1 + 104) = v47;
  if (v38 <= 2)
    v38 = 2;
  v48 = v38 - 1;
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), (int)((v38 - 1) * v47));
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  if (!*(_DWORD *)(a1 + 72) || !*(_DWORD *)(a1 + 76))
  {
    v49 = (int)(v48 * v46);
    v50 = *(_QWORD *)(a1 + 160);
    v51 = *(_QWORD *)(a1 + 168) - v50;
    v52 = v49 >= v51;
    v53 = v49 - v51;
    if (v53 != 0 && v52)
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 160), v53);
      v50 = *(_QWORD *)(a1 + 160);
    }
    else if (!v52)
    {
      *(_QWORD *)(a1 + 168) = v50 + v49;
    }
    v54 = *(_DWORD *)(a1 + 8);
    v55 = (v54 >> 3) & 0x1FF;
    if (((v54 >> 3) & 0x1FC) != 0)
      v56 = 24;
    else
      v56 = 8 * v55;
    cv::scalarToRawData(a10, v50, v56 & 0xFFFFFFF8 | *(_DWORD *)(a1 + 8) & 7, v48 + v48 * v55);
  }
  result = NAN;
  *(_QWORD *)(a1 + 40) = -1;
  return result;
}

void sub_219E008A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void cv::FilterEngine::~FilterEngine(cv::FilterEngine *this, void *a2)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  *(_QWORD *)this = &off_24DBEE6D0;
  v3 = (_QWORD *)((char *)this + 288);
  v4 = (unsigned int *)*((_QWORD *)this + 37);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      cv::fastFree(*((void ***)this + 37), a2);
    }
  }
  *v3 = 0;
  v3[1] = 0;
  v7 = (_QWORD *)((char *)this + 272);
  v8 = (unsigned int *)*((_QWORD *)this + 35);
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      if (*v7)
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
      cv::fastFree(*((void ***)this + 35), a2);
    }
  }
  *v7 = 0;
  *((_QWORD *)this + 35) = 0;
  v11 = (_QWORD *)((char *)this + 256);
  v12 = (unsigned int *)*((_QWORD *)this + 33);
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      if (*v11)
        (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 8))(*v11);
      cv::fastFree(*((void ***)this + 33), a2);
    }
  }
  *v11 = 0;
  *((_QWORD *)this + 33) = 0;
  v15 = (void *)*((_QWORD *)this + 29);
  if (v15)
  {
    *((_QWORD *)this + 30) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 23);
  if (v16)
  {
    *((_QWORD *)this + 24) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 20);
  if (v17)
  {
    *((_QWORD *)this + 21) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 17);
  if (v18)
  {
    *((_QWORD *)this + 18) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 14);
  if (v19)
  {
    *((_QWORD *)this + 15) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 10);
  if (v20)
  {
    *((_QWORD *)this + 11) = v20;
    operator delete(v20);
  }
}

{
  cv::FilterEngine::~FilterEngine(this, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::FilterEngine::start(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  const cv::Exception *v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void *__p[2];
  void *v80[2];
  void *v81[2];
  _BYTE v82[120];

  v5 = *a2;
  v6 = *a3;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  v8 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 56) = v8;
  v9 = *((_DWORD *)a3 + 3);
  *(_DWORD *)(a1 + 60) = v9;
  if ((v6 & 0x80000000) != 0
    || v6 < 0
    || v8 < 0
    || v9 < 0
    || ((v10 = v9 + HIDWORD(v6), v8 + (int)v6 <= (int)v5) ? (v11 = v10 <= SHIDWORD(v5)) : (v11 = 0), !v11))
  {
    std::string::basic_string[abi:ne180100]<0>(v81, "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height");
    std::string::basic_string[abi:ne180100]<0>(v80, "start");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v82, 4294967081, v81, v80, __p, 212);
    cv::error((cv *)v82, v12);
  }
  v13 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  v14 = (((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3);
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 168))
    v15 = 0;
  else
    v15 = *(char **)(a1 + 160);
  v16 = *(_DWORD *)(a1 + 24);
  v17 = v16 + 3;
  if (a4 >= 0)
    v17 = a4;
  v18 = *(_DWORD *)(a1 + 32);
  v19 = v16 + ~v18;
  if (v18 > v19)
    v19 = *(_DWORD *)(a1 + 32);
  v20 = (2 * v19) | 1;
  if (v17 > v20)
    v20 = v17;
  if (*(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 56)
    || v20 != ((*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3))
  {
    std::vector<unsigned char *>::resize(a1 + 232, v20);
    v21 = *(_QWORD *)(a1 + 136);
    if (*(_DWORD *)(a1 + 36) <= *(_DWORD *)(a1 + 56))
      v22 = *(_DWORD *)(a1 + 56);
    else
      v22 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v22;
    v23 = v13 * (uint64_t)(v22 + *(_DWORD *)(a1 + 20) - 1);
    v24 = *(_QWORD *)(a1 + 144) - v21;
    if (v23 <= v24)
    {
      if (v23 < v24)
        *(_QWORD *)(a1 + 144) = v21 + v23;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 136), v23 - v24);
      v22 = *(_DWORD *)(a1 + 36);
    }
    if (!*(_DWORD *)(a1 + 76))
    {
      v25 = *(_QWORD *)(a1 + 184);
      v26 = *(_DWORD *)(a1 + 20);
      v27 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
          * (uint64_t)(v22 + v26 + 15);
      v28 = *(_QWORD *)(a1 + 192) - v25;
      if (v27 <= v28)
      {
        if (v27 < v28)
          *(_QWORD *)(a1 + 192) = v25 + v27;
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)(a1 + 184), v27 - v28);
        v25 = *(_QWORD *)(a1 + 184);
        v22 = *(_DWORD *)(a1 + 36);
        v26 = *(_DWORD *)(a1 + 20);
      }
      v29 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
      v30 = (v22 + v26 - 1) * v13;
      v31 = *(_QWORD *)(a1 + 256);
      v32 = v29;
      if (!v31)
        v32 = *(_QWORD *)(a1 + 136);
      if (v30 >= 1)
      {
        v33 = 0;
        LODWORD(v34) = *(_DWORD *)(a1 + 168) - *(_DWORD *)(a1 + 160);
        do
        {
          if (v30 - v33 >= (int)v34)
            v34 = v34;
          else
            v34 = (v30 - v33);
          if ((int)v34 >= 1)
          {
            v35 = (_BYTE *)(v32 + v33);
            v36 = v34;
            v37 = v15;
            do
            {
              v38 = *v37++;
              *v35++ = v38;
              --v36;
            }
            while (v36);
          }
          v33 += v34;
        }
        while (v33 < v30);
        v31 = *(_QWORD *)(a1 + 256);
        v22 = *(_DWORD *)(a1 + 36);
      }
      if (!v31)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 136));
        v22 = *(_DWORD *)(a1 + 36);
      }
    }
    v39 = *(_QWORD *)(a1 + 256);
    if (v39)
      LODWORD(v39) = *(_DWORD *)(a1 + 20) - 1;
    v40 = v22 + v39 + 15;
    v41 = *(_QWORD *)(a1 + 112);
    v42 = (int)(v14 * (v40 & 0xFFFFFFF0)) * ((uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3) + 16;
    v43 = *(_QWORD *)(a1 + 120) - v41;
    if (v42 <= v43)
    {
      if (v42 < v43)
        *(_QWORD *)(a1 + 120) = v41 + v42;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 112), v42 - v43);
    }
  }
  v44 = *(_DWORD *)(a1 + 56);
  v45 = *(_QWORD *)(a1 + 256);
  v46 = *(_DWORD *)(a1 + 20);
  v47 = v46 - 1;
  if (!v45)
    v47 = 0;
  *(_DWORD *)(a1 + 208) = ((v44 + v47 + 15) & 0xFFFFFFF0) * v14;
  v48 = *(_DWORD *)(a1 + 28);
  v49 = *(_DWORD *)(a1 + 48);
  v50 = v48 - v49;
  LODWORD(v51) = v50 & ~(v50 >> 31);
  v52 = *(_DWORD *)(a1 + 40);
  v53 = v44 + v49 + ~v48 + v46 - v52;
  v54 = v53 & ~(v53 >> 31);
  *(_DWORD *)(a1 + 64) = v51;
  *(_DWORD *)(a1 + 68) = v54;
  if (v48 > v49 || v53 >= 1)
  {
    if (*(_DWORD *)(a1 + 72))
    {
      if (v48 >= v49)
        v55 = v49;
      else
        v55 = v48;
      v56 = v55 - v49;
      v57 = *(int *)(a1 + 104);
      v58 = *(unsigned int *)(a1 + 104);
      v59 = *(_QWORD *)(a1 + 80);
      if (v50 >= 1)
      {
        v60 = 0;
        v61 = *(_DWORD **)(a1 + 80);
        do
        {
          v62 = cv::borderInterpolate((cv *)(v60 - v51), v52, *(_DWORD *)(a1 + 72));
          if ((int)v57 >= 1)
          {
            v63 = (v62 + v56) * v58;
            v64 = v58;
            v65 = v61;
            do
            {
              *v65++ = v63++;
              --v64;
            }
            while (v64);
          }
          ++v60;
          v51 = *(int *)(a1 + 64);
          v61 += v57;
        }
        while (v60 < v51);
        v54 = *(_DWORD *)(a1 + 68);
      }
      if (v54 >= 1)
      {
        v66 = 0;
        do
        {
          v67 = cv::borderInterpolate((cv *)(v66 + v52), v52, *(_DWORD *)(a1 + 72));
          if ((int)v58 >= 1)
          {
            v68 = 0;
            do
            {
              *(_DWORD *)(v59 + 4 * (v68 + (int)v58 * (v66 + *(_DWORD *)(a1 + 64)))) = (v67 + v56) * v58 + v68;
              ++v68;
            }
            while ((_DWORD)v58 != (_DWORD)v68);
          }
          ++v66;
        }
        while (v66 < *(_DWORD *)(a1 + 68));
      }
    }
    else
    {
      if (v45)
      {
        v69 = (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3;
        if ((int)v69 < 1)
          goto LABEL_84;
      }
      else
      {
        LODWORD(v69) = 1;
      }
      v70 = 0;
      do
      {
        if (*(_QWORD *)(a1 + 256))
          v71 = (char *)(((*(_QWORD *)(a1 + 112) + 15) & 0xFFFFFFFFFFFFFFF0) + *(int *)(a1 + 208) * (uint64_t)v70);
        else
          v71 = *(char **)(a1 + 136);
        memcpy(v71, v15, *(int *)(a1 + 64) * (uint64_t)v13);
        memcpy(&v71[v13 * (uint64_t)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 56) + ~*(_DWORD *)(a1 + 68))], v15, *(_DWORD *)(a1 + 68) * v13);
        ++v70;
      }
      while ((_DWORD)v69 != v70);
    }
  }
LABEL_84:
  *(_QWORD *)(a1 + 224) = 0;
  v72 = *(_DWORD *)(a1 + 52);
  v73 = *(_DWORD *)(a1 + 32);
  v74 = (v72 - v73) & ~((v72 - v73) >> 31);
  *(_DWORD *)(a1 + 212) = v74;
  *(_DWORD *)(a1 + 216) = v74;
  v75 = v72 + *(_DWORD *)(a1 + 60) + ~v73 + *(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 44) < v75)
    v75 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 220) = v75;
  v76 = *(_QWORD *)(a1 + 288);
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
  v77 = *(_QWORD *)(a1 + 256);
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
  return *(unsigned int *)(a1 + 212);
}

void sub_219E010BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned char *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t cv::FilterEngine::start(_DWORD *a1, uint64_t a2, int *a3, char a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  signed int v11;
  signed int v12;
  const cv::Exception *v13;
  int v14;
  int v15;
  _DWORD v17[4];
  _DWORD v18[2];
  void *__p[2];
  void *v20[2];
  void *v21[2];
  _QWORD v22[15];

  v7 = *a3;
  v8 = a3[1];
  v10 = a3[2];
  v9 = a3[3];
  if (*(_QWORD *)a3)
  {
LABEL_7:
    if (v7 < 0)
      goto LABEL_13;
    goto LABEL_8;
  }
  if (v10 != -1)
  {
    v8 = 0;
    if (v7 < 0)
      goto LABEL_13;
    goto LABEL_8;
  }
  if (v9 != -1)
  {
    v8 = 0;
    v10 = -1;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 12);
  if (v7 < 0)
    goto LABEL_13;
LABEL_8:
  if (v8 < 0
    || v10 < 0
    || v9 < 0
    || (v11 = *(_DWORD *)(a2 + 12), v10 + v7 > v11)
    || (v12 = *(_DWORD *)(a2 + 8), v9 + v8 > v12))
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(v21, "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows");
    std::string::basic_string[abi:ne180100]<0>(v20, "start");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 317);
    cv::error((cv *)v22, v13);
  }
  v14 = 0;
  v15 = 0;
  v22[0] = 0;
  v21[0] = (void *)__PAIR64__(v12, v11);
  if ((a4 & 1) == 0)
  {
    cv::Mat::locateROI(a2, v21, v22);
    v11 = (signed int)v21[0];
    v12 = HIDWORD(v21[0]);
    v15 = v22[0];
    v14 = HIDWORD(v22[0]);
  }
  v18[0] = v11;
  v18[1] = v12;
  v17[0] = v15 + v7;
  v17[1] = v14 + v8;
  v17[2] = v10;
  v17[3] = v9;
  (*(void (**)(_DWORD *, _DWORD *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18, v17, a5);
  return (a1[53] - HIDWORD(v22[0]));
}

void sub_219E01304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  cv::Exception::~Exception((cv::Exception *)&a31);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t cv::FilterEngine::proceed(cv::FilterEngine *this, const unsigned __int8 *a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6)
{
  cv *v7;
  const cv::Exception *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  cv *v15;
  const cv::Exception *v16;
  int v17;
  unint64_t v18;
  const unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int *v39;
  _DWORD *v40;
  uint64_t v41;
  int *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _BYTE *v48;
  uint64_t v49;
  int *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  cv *v61;
  const cv::Exception *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  cv *v67;
  const cv::Exception *v68;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  void *__p[2];
  void *v94[2];
  void *v95[2];
  _BYTE v96[128];

  if (*((int *)this + 10) < 1 || *((int *)this + 11) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "wholeSize.width > 0 && wholeSize.height > 0");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    v7 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 342);
    cv::error(v7, v8);
  }
  v9 = *((_DWORD *)this + 16);
  v10 = *((_DWORD *)this + 17);
  if (*((_DWORD *)this + 7) >= *((_DWORD *)this + 12))
    v11 = *((_DWORD *)this + 12);
  else
    v11 = *((_DWORD *)this + 7);
  v92 = (v9 > 0 || v10 >= 1) && *((_DWORD *)this + 18) != 0;
  v89 = (int *)*((_QWORD *)this + 10);
  v90 = *((_QWORD *)this + 29);
  v84 = *((_DWORD *)this + 14);
  v12 = *((_DWORD *)this + 26);
  v71 = *((_DWORD *)this + 6);
  v72 = *((_DWORD *)this + 8);
  v13 = *((_QWORD *)this + 32);
  if (*((_DWORD *)this + 55) - (*((_DWORD *)this + 53) + *((_DWORD *)this + 56)) >= a4)
    v14 = a4;
  else
    v14 = *((_DWORD *)this + 55) - (*((_DWORD *)this + 53) + *((_DWORD *)this + 56));
  if (!a2 || !a5 || v14 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "src && dst && count > 0");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    v15 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 361);
    cv::error(v15, v16);
  }
  v81 = 0;
  v17 = (((*((_DWORD *)this + 2) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)this + 2) & 7))) & 3);
  v18 = (unint64_t)(*((_QWORD *)this + 30) - v90) >> 3;
  v70 = ((*((_DWORD *)this + 4) >> 3) & 0x1FF) + 1;
  v19 = &a2[-(v11 * v17)];
  v20 = (v9 * v17);
  v91 = (int)v20;
  v21 = *((_DWORD *)this + 5) + v84 + ~v10;
  v22 = (v21 - v9) * v17;
  v87 = 4 * v12;
  v88 = v17;
  v86 = (v10 * v17);
  v23 = v21 * v17;
  v24 = (v9 * v12);
  v85 = (v10 * v12);
  v25 = a3;
  v75 = v71 - 1;
  v80 = v23;
  v82 = v24;
  v83 = v20;
  v78 = v21 * v12;
  v79 = &v89[(int)v20];
  v77 = &v89[(int)v24];
  v26 = a6;
  v27 = a5;
  v28 = v14;
  while (2)
  {
    v76 = v27;
    v29 = *((_DWORD *)this + 13);
    v30 = v18 - (v72 + *((_DWORD *)this + 53) + *((_DWORD *)this + 56));
    v31 = __OFADD__(v30, v29);
    v32 = v30 + v29;
    if ((v32 < 0) ^ v31 | (v32 == 0))
      v32 = v18 - v71 + 1;
    if (v28 >= v32)
      v33 = v32;
    else
      v33 = v28;
    v73 = v33;
    v74 = v28;
    if (v33 >= 1)
    {
      do
      {
        v34 = *((_DWORD *)this + 53);
        v35 = *((_DWORD *)this + 56);
        v36 = ((*((_QWORD *)this + 14) + 15) & 0xFFFFFFFFFFFFFFF0)
            + *((int *)this + 52) * (uint64_t)((v34 - *((_DWORD *)this + 54) + v35) % (int)v18);
        v37 = (_DWORD *)v36;
        if (!v13)
          v37 = (_DWORD *)*((_QWORD *)this + 17);
        *((_DWORD *)this + 56) = v35 + 1;
        if (v35 >= (int)v18)
        {
          *((_DWORD *)this + 56) = v35;
          *((_DWORD *)this + 53) = v34 + 1;
        }
        memcpy((char *)v37 + v91, v19, v22);
        if (v92)
        {
          if (v87 == v88)
          {
            v38 = v82;
            v39 = v89;
            v40 = v37;
            if ((int)v82 >= 1)
            {
              do
              {
                v41 = *v39++;
                *v40++ = *(_DWORD *)&v19[4 * v41];
                --v38;
              }
              while (v38);
            }
            if ((int)v85 >= 1)
            {
              v42 = v77;
              v43 = &v37[v78];
              v44 = v85;
              do
              {
                v45 = *v42++;
                *v43++ = *(_DWORD *)&v19[4 * v45];
                --v44;
              }
              while (v44);
            }
          }
          else
          {
            v46 = v83;
            v47 = v89;
            v48 = v37;
            if ((int)v83 >= 1)
            {
              do
              {
                v49 = *v47++;
                *v48++ = v19[v49];
                --v46;
              }
              while (v46);
            }
            if ((int)v86 >= 1)
            {
              v50 = v79;
              v51 = (char *)v37 + v80;
              v52 = v86;
              do
              {
                v53 = *v50++;
                *v51++ = v19[v53];
                --v52;
              }
              while (v52);
            }
          }
        }
        if (!v13)
          (*(void (**)(_QWORD, _DWORD *, unint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 34) + 16))(*((_QWORD *)this + 34), v37, v36, v84, ((*((_DWORD *)this + 2) >> 3) & 0x1FFu) + 1);
        v19 += v25;
      }
      while (v33-- > 1);
    }
    result = v81;
    v56 = v75 + *((_DWORD *)this + 15) - (v81 + *((_DWORD *)this + 57));
    if (v56 >= (int)v18)
      v57 = v18;
    else
      v57 = v56;
    if ((int)v57 < 1)
    {
      LODWORD(v57) = 0;
      goto LABEL_63;
    }
    v58 = 0;
    while (1)
    {
      v59 = cv::borderInterpolate((cv *)(v81 - v72 + v58 + *((_DWORD *)this + 13) + *((_DWORD *)this + 57)), *((_DWORD *)this + 11), *((_DWORD *)this + 19));
      if (v59 < 0)
      {
        v63 = (*((_QWORD *)this + 23) + 15) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_58;
      }
      v60 = *((_DWORD *)this + 53);
      if (v59 < v60)
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "srcY >= startY");
        std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
        v61 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 417);
        cv::error(v61, v62);
      }
      if (v59 >= *((_DWORD *)this + 56) + v60)
        break;
      v63 = ((*((_QWORD *)this + 14) + 15) & 0xFFFFFFFFFFFFFFF0)
          + *((int *)this + 52) * (uint64_t)((v59 - *((_DWORD *)this + 54)) % (int)v18);
LABEL_58:
      *(_QWORD *)(v90 + 8 * v58++) = v63;
      if (v57 == v58)
        goto LABEL_62;
    }
    LODWORD(v57) = v58;
LABEL_62:
    v26 = a6;
    result = v81;
LABEL_63:
    if ((int)v57 >= v71)
    {
      v64 = (v57 - v75);
      v65 = *((_QWORD *)this + 32);
      if (v65)
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 16))(v65, v90, v76, v26, v64, *((unsigned int *)this + 14), v70);
      else
        (*(void (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 36)
                                                                                             + 16))(*((_QWORD *)this + 36), v90, v76, v26, v64, *((_DWORD *)this + 14) * v70);
      v28 = v74 - v73;
      v27 = &v76[(int)v64 * (int)v26];
      v81 += v64;
      continue;
    }
    break;
  }
  v66 = *((_DWORD *)this + 57) + result;
  *((_DWORD *)this + 57) = v66;
  if (v66 > *((_DWORD *)this + 15))
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "dstY <= roi.height");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    v67 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 434);
    cv::error(v67, v68);
  }
  return result;
}

void sub_219E01AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  cv::Exception::~Exception((cv::Exception *)(v47 - 208));
  if (a35 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

_DWORD *cv::FilterEngine::apply(_DWORD *result, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  _DWORD *v7;
  const cv::Exception *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const cv::Exception *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  void *__p[2];
  void *v23[2];
  void *v24[2];
  _BYTE v25[120];

  v7 = result;
  if ((*(_DWORD *)a2 & 0xFFF) != result[2] || (*a3 & 0xFFF) != result[3])
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "src.type() == srcType && dst.type() == dstType");
    std::string::basic_string[abi:ne180100]<0>(v23, "apply");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 442);
    cv::error((cv *)v25, v8);
  }
  v9 = a4[1];
  LODWORD(v19) = *a4;
  HIDWORD(v19) = v9;
  v11 = a4[2];
  v10 = a4[3];
  v20 = v11;
  v21 = v10;
  if (!(_DWORD)v19 && !v9 && v11 == -1 && v10 == -1)
  {
    v10 = *(_DWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    v19 = 0;
    v20 = v11;
    v21 = v10;
  }
  if (v10 * v11)
  {
    if ((*a5 & 0x80000000) != 0 || (v12 = a5[1], v12 < 0) || *a5 + v11 > a3[3] || v12 + v10 > a3[2])
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows");
      std::string::basic_string[abi:ne180100]<0>(v23, "apply");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 453);
      cv::error((cv *)v25, v13);
    }
    v14 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2, &v19, a6, 0xFFFFFFFFLL);
    v15 = *(_DWORD *)(a2 + 4);
    v16 = __OFSUB__(v15, 1);
    v17 = v15 - 1;
    if (v17 < 0 != v16)
      v18 = 0;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v17);
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 32))(v7, *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 80) * v14 + v18 * (int)v19);
  }
  return result;
}

void sub_219E01E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t cv::getKernelType(void (***a1)(uint64_t *__return_ptr, _QWORD, uint64_t), _DWORD *a2)
{
  const cv::Exception *v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v27[2];
  void *__p[2];
  void *v29[2];
  _OWORD v30[4];
  char *v31;
  cv *v32;
  _QWORD v33[5];
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;

  (**a1)(&v34, a1, 0xFFFFFFFFLL);
  if ((v34 & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "_kernel.channels() == 1");
    std::string::basic_string[abi:ne180100]<0>(v29, "getKernelType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v30, 4294967081, v27, v29, __p, 472);
    cv::error((cv *)v30, v3);
  }
  v4 = v35;
  v5 = v36;
  v31 = (char *)v30 + 8;
  v32 = (cv *)v33;
  v33[0] = 0;
  v33[1] = 0;
  LODWORD(v30[0]) = 1124007936;
  memset((char *)v30 + 4, 0, 48);
  v30[3] = 0u;
  cv::_OutputArray::_OutputArray((uint64_t)v27, (cv::Mat *)v30);
  cv::Mat::convertTo((cv::Mat *)&v34, (const cv::_OutputArray *)v27, 6, 1.0, 0.0);
  v7 = (v5 * v4);
  if (v35 == 1 || v36 == 1)
  {
    v8 = 12;
    if (((2 * *a2) | 1) == v36)
    {
      if (((2 * a2[1]) | 1) == v35)
        v8 = 15;
      else
        v8 = 12;
    }
  }
  else
  {
    v8 = 12;
  }
  if ((int)v7 < 1)
  {
    v9 = 0.0;
  }
  else
  {
    v9 = 0.0;
    v10 = *(double **)&v30[1];
    do
    {
      v11 = *v10++;
      v12 = v11;
      v9 = v9 + v11;
      v13 = *(double *)(*(_QWORD *)&v30[1] + 8 * (int)--v7);
      v14 = v8 & 0xFFFFFFFE;
      if (v11 == v13)
        v14 = v8;
      if (v12 != -v13)
        v14 &= ~2u;
      v15 = (uint64_t)rint(v12);
      if (v12 < 0.0)
        v14 &= ~4u;
      if (v12 == (double)(int)v15)
        v8 = v14;
      else
        v8 = v14 & 0xFFFFFFF7;
    }
    while (v7);
  }
  v16 = (unsigned int *)*((_QWORD *)&v30[1] + 1);
  if (*((_QWORD *)&v30[1] + 1))
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      cv::Mat::deallocate((cv::Mat *)v30, v6);
  }
  *(_QWORD *)&v30[1] = 0;
  memset(&v30[2], 0, 24);
  if (SDWORD1(v30[0]) >= 1)
  {
    v19 = 0;
    v20 = v31;
    do
      *(_DWORD *)&v20[4 * v19++] = 0;
    while (v19 < SDWORD1(v30[0]));
  }
  *((_QWORD *)&v30[1] + 1) = 0;
  if (v32 != (cv *)v33)
    cv::fastFree((void **)v32, v6);
  v21 = v38;
  if (v38)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      cv::Mat::deallocate((cv::Mat *)&v34, v6);
  }
  v37 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (SHIDWORD(v34) >= 1)
  {
    v24 = 0;
    v25 = v42;
    do
      *(_DWORD *)(v25 + 4 * v24++) = 0;
    while (v24 < SHIDWORD(v34));
  }
  v38 = 0;
  if (v43 != (void **)&v44)
    cv::fastFree(v43, v6);
  if (fabs(v9 + -1.0) <= (fabs(v9) + 1.0) * 0.00000011920929)
    return v8;
  else
    return v8 & 0xFFFFFFFB;
}

void sub_219E02178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a15 < 0)
    operator delete(a10);
  cv::Mat::~Mat((cv::Mat *)(v29 - 160), v31);
  _Unwind_Resume(a1);
}

void cv::getLinearRowFilter(cv *this@<X0>, const cv::_InputArray *a2@<X3>, uint64_t a3@<X1>, void (***a4)(uint64_t *__return_ptr, _QWORD, uint64_t)@<X2>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v7;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  const cv::Exception *v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const cv::Exception *v35;
  void *__p[2];
  void *v37[2];
  void *v38[2];
  _BYTE v39[120];
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;

  v7 = (int)a2;
  (**a4)(&v40, a4, 0xFFFFFFFFLL);
  v11 = this & 7;
  v12 = a3 & 7;
  if (v11 <= 4)
    v13 = 4;
  else
    v13 = this & 7;
  v14 = v12 >= v13 && (((unsigned __int16)a3 ^ (unsigned __int16)this) & 0xFF8) == 0;
  if (!v14 || (v40 & 0xFFF) != v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth");
    std::string::basic_string[abi:ne180100]<0>(v37, "getLinearRowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v39, 4294967081, v38, v37, __p, 2834);
    cv::error((cv *)v39, v15);
  }
  if ((a5 & 3) != 0 && v42 + v41 <= 6)
  {
    if ((this & 7) == 0 && v12 == 4)
    {
      v16 = operator new();
      cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(v16, (cv::Mat *)&v40, v7, a5);
      *a6 = v16;
      v17 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_49;
    }
    if (v11 == 5 && v12 == 5)
    {
      v19 = operator new();
      cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(v19, (cv::Mat *)&v40, v7, a5);
      *a6 = v19;
      v17 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_49;
    }
  }
  if ((this & 7) != 0 || v12 != 4)
  {
    if ((this & 7) != 0 || v12 != 5)
    {
      if ((this & 7) != 0 || v12 != 6)
      {
        if (v11 == 2 && v12 == 5)
        {
          v23 = operator new();
          cv::RowFilter<unsigned short,float,cv::RowNoVec>::RowFilter(v23, (cv::Mat *)&v40, v7);
          *a6 = v23;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else if (v11 == 2 && v12 == 6)
        {
          v24 = operator new();
          cv::RowFilter<unsigned short,double,cv::RowNoVec>::RowFilter(v24, (cv::Mat *)&v40, v7);
          *a6 = v24;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else if (v11 == 3 && v12 == 5)
        {
          v25 = operator new();
          cv::RowFilter<short,float,cv::RowNoVec>::RowFilter(v25, (cv::Mat *)&v40, v7);
          *a6 = v25;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else if (v11 == 3 && v12 == 6)
        {
          v26 = operator new();
          cv::RowFilter<short,double,cv::RowNoVec>::RowFilter(v26, (cv::Mat *)&v40, v7);
          *a6 = v26;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else if (v11 == 5 && v12 == 5)
        {
          v27 = operator new();
          cv::RowFilter<float,float,cv::RowNoVec>::RowFilter(v27, (cv::Mat *)&v40, v7);
          *a6 = v27;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else if (v11 == 5 && v12 == 6)
        {
          v28 = operator new();
          cv::RowFilter<float,double,cv::RowNoVec>::RowFilter(v28, (cv::Mat *)&v40, v7);
          *a6 = v28;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
        else
        {
          if (v11 != 6 || v12 != 6)
          {
            cv::format(v38, this, a3);
            std::string::basic_string[abi:ne180100]<0>(v37, "getLinearRowFilter");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
            cv::Exception::Exception(v39, 4294967083, v38, v37, __p, 2873);
            cv::error((cv *)v39, v35);
          }
          v29 = operator new();
          cv::RowFilter<double,double,cv::RowNoVec>::RowFilter(v29, (cv::Mat *)&v40, v7);
          *a6 = v29;
          v17 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
      }
      else
      {
        v22 = operator new();
        cv::RowFilter<unsigned char,double,cv::RowNoVec>::RowFilter(v22, (cv::Mat *)&v40, v7);
        *a6 = v22;
        v17 = (_DWORD *)cv::fastMalloc((cv *)4);
      }
    }
    else
    {
      v21 = operator new();
      cv::RowFilter<unsigned char,float,cv::RowNoVec>::RowFilter(v21, (cv::Mat *)&v40, v7);
      *a6 = v21;
      v17 = (_DWORD *)cv::fastMalloc((cv *)4);
    }
  }
  else
  {
    v20 = operator new();
    cv::RowFilter<unsigned char,int,cv::RowNoVec>::RowFilter(v20, (cv::Mat *)&v40, v7);
    *a6 = v20;
    v17 = (_DWORD *)cv::fastMalloc((cv *)4);
  }
LABEL_49:
  *v17 = 1;
  a6[1] = (uint64_t)v17;
  v30 = v44;
  if (v44)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      cv::Mat::deallocate((cv::Mat *)&v40, v18);
  }
  v43 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (SHIDWORD(v40) >= 1)
  {
    v33 = 0;
    v34 = v48;
    do
      *(_DWORD *)(v34 + 4 * v33++) = 0;
    while (v33 < SHIDWORD(v40));
  }
  v44 = 0;
  if (v49 != (void **)&v50)
    cv::fastFree(v49, v18);
}

void sub_219E027D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  cv::Mat::~Mat((cv::Mat *)(v29 - 160), v31);
  _Unwind_Resume(a1);
}

void cv::getLinearColumnFilter(cv *this@<X0>, const cv::_InputArray *a2@<X3>, double a3@<D0>, uint64_t a4@<X1>, void (***a5)(uint64_t *__return_ptr, _QWORD, uint64_t)@<X2>, int a6@<W4>, unsigned int a7@<W5>, uint64_t *a8@<X8>)
{
  int v11;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  const cv::Exception *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  const cv::Exception *v54;
  void *__p[2];
  void *v56[2];
  void *v57[2];
  _QWORD v58[15];
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;

  v11 = (int)a2;
  (**a5)(&v59, a5, 0xFFFFFFFFLL);
  v15 = this & 7;
  v16 = a4 & 7;
  if (v16 <= 4)
    v17 = 4;
  else
    v17 = a4 & 7;
  if ((((unsigned __int16)a4 ^ (unsigned __int16)this) & 0xFF8) != 0 || v15 < v17 || (v59 & 0xFFF) != v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth");
    std::string::basic_string[abi:ne180100]<0>(v56, "getLinearColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v58, 4294967081, v57, v56, __p, 2889);
    cv::error((cv *)v58, v18);
  }
  if ((a6 & 3) != 0)
  {
    if (v61 + v60 == 4)
    {
      if (v15 == 4 && (a4 & 7) == 0)
      {
        v19 = operator new();
        v20 = v19;
        v21 = 1 << (a7 - 1);
        if (!a7)
          v21 = 0;
        v58[0] = __PAIR64__(v21, a7);
        cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnSmallFilter(v19, (cv::Mat *)&v59, v11, a6, v58, a3);
        *a8 = v20;
        v22 = (_DWORD *)cv::fastMalloc((cv *)4);
        goto LABEL_83;
      }
      if (v15 == 4 && v16 == 3 && !a7)
      {
        v28 = operator new();
        cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(v28, (cv::Mat *)&v59, v11, a6, a3);
        *a8 = v28;
        v22 = (_DWORD *)cv::fastMalloc((cv *)4);
        goto LABEL_83;
      }
      if (v15 == 5 && v16 == 5)
      {
        v30 = operator new();
        cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(v30, (cv::Mat *)&v59, v11, a6, a3);
        *a8 = v30;
        v22 = (_DWORD *)cv::fastMalloc((cv *)4);
        goto LABEL_83;
      }
    }
    if (v15 == 4 && (a4 & 7) == 0)
    {
      v31 = operator new();
      v32 = v31;
      v33 = 1 << (a7 - 1);
      if (!a7)
        v33 = 0;
      v58[0] = __PAIR64__(v33, a7);
      cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(v31, (cv::Mat *)&v59, v11, a6, v58, a3);
      *a8 = v32;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && (a4 & 7) == 0)
    {
      v34 = operator new();
      cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(v34, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v34;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && (a4 & 7) == 0)
    {
      v35 = operator new();
      cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(v35, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v35;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 2)
    {
      v37 = operator new();
      cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(v37, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v37;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 2)
    {
      v39 = operator new();
      cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(v39, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v39;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 4 && v16 == 3)
    {
      v41 = operator new();
      cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::SymmColumnFilter(v41, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v41;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 3)
    {
      v43 = operator new();
      cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::SymmColumnFilter(v43, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v43;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 3)
    {
      v45 = operator new();
      cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::SymmColumnFilter(v45, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v45;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 5)
    {
      v47 = operator new();
      cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::SymmColumnFilter(v47, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v47;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 6)
    {
      v48 = operator new();
      cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::SymmColumnFilter(v48, (cv::Mat *)&v59, v11, a6, a3);
      *a8 = v48;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
LABEL_93:
    cv::format(v57, this, a4);
    std::string::basic_string[abi:ne180100]<0>(v56, "getLinearColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v58, 4294967083, v57, v56, __p, 2970);
    cv::error((cv *)v58, v54);
  }
  if (v15 != 4 || (a4 & 7) != 0)
  {
    if (v15 == 5 && (a4 & 7) == 0)
    {
      v27 = operator new();
      cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::ColumnFilter(v27, (cv::Mat *)&v59, v11, a3);
      *a8 = v27;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && (a4 & 7) == 0)
    {
      v29 = operator new();
      cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::ColumnFilter(v29, (cv::Mat *)&v59, v11, a3);
      *a8 = v29;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 2)
    {
      v36 = operator new();
      cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::ColumnFilter(v36, (cv::Mat *)&v59, v11, a3);
      *a8 = v36;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 2)
    {
      v38 = operator new();
      cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::ColumnFilter(v38, (cv::Mat *)&v59, v11, a3);
      *a8 = v38;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 3)
    {
      v40 = operator new();
      cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::ColumnFilter(v40, (cv::Mat *)&v59, v11, a3);
      *a8 = v40;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 3)
    {
      v42 = operator new();
      cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::ColumnFilter(v42, (cv::Mat *)&v59, v11, a3);
      *a8 = v42;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 5 && v16 == 5)
    {
      v44 = operator new();
      cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::ColumnFilter(v44, (cv::Mat *)&v59, v11, a3);
      *a8 = v44;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    if (v15 == 6 && v16 == 6)
    {
      v46 = operator new();
      cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::ColumnFilter(v46, (cv::Mat *)&v59, v11, a3);
      *a8 = v46;
      v22 = (_DWORD *)cv::fastMalloc((cv *)4);
      goto LABEL_83;
    }
    goto LABEL_93;
  }
  v24 = operator new();
  v25 = v24;
  v26 = 1 << (a7 - 1);
  if (!a7)
    v26 = 0;
  v58[0] = __PAIR64__(v26, a7);
  cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::ColumnFilter(v24, (cv::Mat *)&v59, v11, v58, a3);
  *a8 = v25;
  v22 = (_DWORD *)cv::fastMalloc((cv *)4);
LABEL_83:
  *v22 = 1;
  a8[1] = (uint64_t)v22;
  v49 = v63;
  if (v63)
  {
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
      cv::Mat::deallocate((cv::Mat *)&v59, v23);
  }
  v62 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  if (SHIDWORD(v59) >= 1)
  {
    v52 = 0;
    v53 = v67;
    do
      *(_DWORD *)(v53 + 4 * v52++) = 0;
    while (v52 < SHIDWORD(v59));
  }
  v63 = 0;
  if (v68 != (void **)&v69)
    cv::fastFree(v68, v23);
}

void sub_219E032F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  cv::Mat::~Mat((cv::Mat *)(v29 - 192), a2);
  _Unwind_Resume(a1);
}

void cv::createSeparableLinearFilter(unsigned int a1@<W0>, unsigned int a2@<W1>, void (***a3)(uint64_t *__return_ptr, _QWORD, uint64_t)@<X2>, void (***a4)(uint64_t *__return_ptr, _QWORD, uint64_t)@<X3>, int *a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  int v19;
  const cv::Exception *v20;
  int v21;
  int v22;
  int v23;
  int KernelType;
  unsigned int v25;
  unsigned int v26;
  int v27;
  void *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  unsigned int v41;
  void **v42;
  cv *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  cv *v51;
  cv *v52;
  cv *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _BYTE *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  cv *v91;
  void *v92;
  cv *v93;
  _BYTE v94[64];
  _BYTE *v95;
  cv *v96;
  _QWORD v97[2];
  _DWORD v98[2];
  _DWORD v99[2];
  void *__p;
  cv *v101;
  _BYTE v102[64];
  _BYTE *v103;
  cv *v104;
  _QWORD v105[5];
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  cv *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;

  (**a3)(&v114, a3, 0xFFFFFFFFLL);
  (**a4)(&v106, a4, 0xFFFFFFFFLL);
  v19 = (a1 >> 3) & 0x1FF;
  if (v19 != ((a2 >> 3) & 0x1FF))
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "cn == CV_MAT_CN(_dstType)");
    std::string::basic_string[abi:ne180100]<0>(&v92, "createSeparableLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v102, 4294967081, v94, &v92, &__p, 2988);
    cv::error((cv *)v102, v20);
  }
  if (*a5 < 0)
  {
    v21 = v115 + HIDWORD(v115);
    if ((int)v115 + HIDWORD(v115) - 1 >= 0)
      v21 = v115 + HIDWORD(v115) - 1;
    *a5 = v21 >> 1;
  }
  if (a5[1] < 0)
    a5[1] = ((int)v107 + HIDWORD(v107) - 1) / 2;
  cv::_InputArray::_InputArray((uint64_t)v102, (const cv::Mat *)&v114);
  v22 = *a5;
  if ((_DWORD)v115 == 1)
    v23 = *a5;
  else
    v23 = 0;
  if ((_DWORD)v115 == 1)
    v22 = 0;
  v99[0] = v23;
  v99[1] = v22;
  KernelType = cv::getKernelType((void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))v102, v99);
  v88 = a8;
  v89 = a7;
  cv::_InputArray::_InputArray((uint64_t)v102, (const cv::Mat *)&v106);
  v25 = a5[1];
  if ((_DWORD)v107 == 1)
    v26 = a5[1];
  else
    v26 = 0;
  if ((_DWORD)v107 == 1)
    v25 = 0;
  v98[0] = v26;
  v98[1] = v25;
  v27 = cv::getKernelType((void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))v102, v98);
  v29 = v27;
  v30 = a2 & 7;
  v103 = &v102[8];
  v104 = (cv *)v105;
  v105[0] = 0;
  v105[1] = 0;
  *(_DWORD *)v102 = 1124007936;
  memset(&v102[4], 0, 60);
  v95 = &v94[8];
  v96 = (cv *)v97;
  v97[0] = 0;
  v97[1] = 0;
  *(_DWORD *)v94 = 1124007936;
  memset(&v94[4], 0, 60);
  if ((a1 & 7) <= v30)
    v31 = a2 & 7;
  else
    v31 = a1 & 7;
  if (v31 <= 5)
    v32 = 5;
  else
    v32 = v31;
  if ((a1 & 7) == 0
    && ((a2 & 7) == 0 && KernelType == 5 && v27 == 5
     || (KernelType & 3) != 0 && (v27 & 3) != 0 && v30 == 3 && (KernelType & v27 & 8) != 0))
  {
    v40 = v30 == 0;
    cv::_OutputArray::_OutputArray((uint64_t)&v92, (cv::Mat *)v102);
    v40 *= 8;
    cv::Mat::convertTo((cv::Mat *)&v114, (const cv::_OutputArray *)&v92, 4, (double)(1 << v40), 0.0);
    cv::_OutputArray::_OutputArray((uint64_t)&v92, (cv::Mat *)v94);
    cv::Mat::convertTo((cv::Mat *)&v106, (const cv::_OutputArray *)&v92, 4, (double)(1 << v40), 0.0);
    v41 = 2 * v40;
    a10 = (double)(1 << v41) * a10;
    v32 = 4;
    goto LABEL_71;
  }
  if ((v114 & 0xFFF) == v32)
  {
    v33 = (unsigned int *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
      v35 = *(unsigned int **)&v102[24];
      if (*(_QWORD *)&v102[24])
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          cv::Mat::deallocate((cv::Mat *)v102, v28);
      }
    }
    *(_QWORD *)&v102[16] = 0;
    memset(&v102[32], 0, 24);
    if (*(uint64_t *)v102 <= 0)
    {
      *(_QWORD *)&v102[24] = 0;
      *(_DWORD *)v102 = v114;
    }
    else
    {
      v38 = 0;
      v39 = v103;
      do
        *(_DWORD *)&v39[4 * v38++] = 0;
      while (v38 < *(int *)&v102[4]);
      *(_QWORD *)&v102[24] = 0;
      *(_DWORD *)v102 = v114;
      if (*(int *)&v102[4] > 2)
        goto LABEL_51;
    }
    if (SHIDWORD(v114) <= 2)
    {
      *(_DWORD *)&v102[4] = HIDWORD(v114);
      *(_QWORD *)&v102[8] = v115;
      v42 = v120;
      v43 = v104;
      *(_QWORD *)v104 = *v120;
      *((_QWORD *)v43 + 1) = v42[1];
LABEL_52:
      *(_OWORD *)&v102[16] = v116;
      *(_OWORD *)&v102[32] = v117;
      *(_OWORD *)&v102[48] = v118;
      goto LABEL_53;
    }
LABEL_51:
    cv::Mat::copySize((cv::Mat *)v102, (const cv::Mat *)&v114);
    goto LABEL_52;
  }
  cv::_OutputArray::_OutputArray((uint64_t)&v92, (cv::Mat *)v102);
  cv::Mat::convertTo((cv::Mat *)&v114, (const cv::_OutputArray *)&v92, v32, 1.0, 0.0);
LABEL_53:
  if ((v106 & 0xFFF) == v32)
  {
    v44 = (unsigned int *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
    v46 = *(unsigned int **)&v94[24];
    if (*(_QWORD *)&v94[24])
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        cv::Mat::deallocate((cv::Mat *)v94, v28);
    }
    *(_QWORD *)&v94[16] = 0;
    memset(&v94[32], 0, 24);
    if (*(uint64_t *)v94 <= 0)
    {
      *(_QWORD *)&v94[24] = 0;
      *(_DWORD *)v94 = v106;
    }
    else
    {
      v49 = 0;
      v50 = v95;
      do
        *(_DWORD *)&v50[4 * v49++] = 0;
      while (v49 < *(int *)&v94[4]);
      *(_QWORD *)&v94[24] = 0;
      *(_DWORD *)v94 = v106;
      if (*(int *)&v94[4] > 2)
        goto LABEL_69;
    }
    if (SHIDWORD(v106) <= 2)
    {
      *(_DWORD *)&v94[4] = HIDWORD(v106);
      *(_QWORD *)&v94[8] = v107;
      v51 = v112;
      v52 = v96;
      *(_QWORD *)v96 = *(_QWORD *)v112;
      *((_QWORD *)v52 + 1) = *((_QWORD *)v51 + 1);
LABEL_70:
      v41 = 0;
      *(_OWORD *)&v94[32] = v109;
      *(_OWORD *)&v94[16] = v108;
      *(_OWORD *)&v94[48] = v110;
      goto LABEL_71;
    }
LABEL_69:
    cv::Mat::copySize((cv::Mat *)v94, (const cv::Mat *)&v106);
    goto LABEL_70;
  }
  cv::_OutputArray::_OutputArray((uint64_t)&v92, (cv::Mat *)v94);
  cv::Mat::convertTo((cv::Mat *)&v106, (const cv::_OutputArray *)&v92, v32, 1.0, 0.0);
  v41 = 0;
LABEL_71:
  cv::_InputArray::_InputArray((uint64_t)&v92, (const cv::Mat *)v102);
  v53 = (cv *)(a1 & 0xFFF);
  v54 = v32 | (8 * v19);
  cv::getLinearRowFilter(v53, (const cv::_InputArray *)*a5, v54, (void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))&v92, KernelType, (uint64_t *)&__p);
  cv::_InputArray::_InputArray((uint64_t)&v92, (const cv::Mat *)v94);
  v55 = a2 & 0xFFF;
  cv::getLinearColumnFilter((cv *)v54, (const cv::_InputArray *)a5[1], a10, v55, (void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))&v92, v29, v41, &v90);
  v56 = operator new();
  v92 = 0;
  v93 = 0;
  cv::FilterEngine::FilterEngine(v56, &v92, &__p, &v90, v53, v55, v54, a6, v89, v88);
  *a9 = v56;
  v57 = (_DWORD *)cv::fastMalloc((cv *)4);
  *v57 = 1;
  a9[1] = (uint64_t)v57;
  v59 = (unsigned int *)v93;
  if (v93)
  {
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      if (v92)
        (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
      cv::fastFree((void **)v93, v58);
    }
  }
  v62 = (unsigned int *)v91;
  if (v91)
  {
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
    {
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
      cv::fastFree((void **)v91, v58);
    }
  }
  v65 = (unsigned int *)v101;
  if (v101)
  {
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
      cv::fastFree((void **)v101, v58);
    }
  }
  v68 = *(unsigned int **)&v94[24];
  if (*(_QWORD *)&v94[24])
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      cv::Mat::deallocate((cv::Mat *)v94, v58);
  }
  *(_QWORD *)&v94[16] = 0;
  memset(&v94[32], 0, 24);
  if (*(int *)&v94[4] >= 1)
  {
    v71 = 0;
    v72 = v95;
    do
      *(_DWORD *)&v72[4 * v71++] = 0;
    while (v71 < *(int *)&v94[4]);
  }
  *(_QWORD *)&v94[24] = 0;
  if (v96 != (cv *)v97)
    cv::fastFree((void **)v96, v58);
  v73 = *(unsigned int **)&v102[24];
  if (*(_QWORD *)&v102[24])
  {
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      cv::Mat::deallocate((cv::Mat *)v102, v58);
  }
  *(_QWORD *)&v102[16] = 0;
  memset(&v102[32], 0, 24);
  if (*(int *)&v102[4] >= 1)
  {
    v76 = 0;
    v77 = v103;
    do
      *(_DWORD *)&v77[4 * v76++] = 0;
    while (v76 < *(int *)&v102[4]);
  }
  *(_QWORD *)&v102[24] = 0;
  if (v104 != (cv *)v105)
    cv::fastFree((void **)v104, v58);
  v78 = (unsigned int *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
      cv::Mat::deallocate((cv::Mat *)&v106, v58);
  }
  *(_QWORD *)&v108 = 0;
  v109 = 0uLL;
  *(_QWORD *)&v110 = 0;
  if (SHIDWORD(v106) >= 1)
  {
    v81 = 0;
    v82 = v111;
    do
      *(_DWORD *)(v82 + 4 * v81++) = 0;
    while (v81 < SHIDWORD(v106));
  }
  *((_QWORD *)&v108 + 1) = 0;
  if (v112 != (cv *)&v113)
    cv::fastFree((void **)v112, v58);
  v83 = (unsigned int *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
      cv::Mat::deallocate((cv::Mat *)&v114, v58);
  }
  *(_QWORD *)&v116 = 0;
  v117 = 0uLL;
  *(_QWORD *)&v118 = 0;
  if (SHIDWORD(v114) >= 1)
  {
    v86 = 0;
    v87 = v119;
    do
      *(_DWORD *)(v87 + 4 * v86++) = 0;
    while (v86 < SHIDWORD(v114));
  }
  *((_QWORD *)&v116 + 1) = 0;
  if (v120 != (void **)&v121)
    cv::fastFree(v120, v58);
}

void sub_219E03D5C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;

  cv::Mat::~Mat((cv::Mat *)&a23, a2);
  cv::Mat::~Mat((cv::Mat *)&a46, v63);
  cv::Mat::~Mat((cv::Mat *)&a61, v64);
  cv::Mat::~Mat((cv::Mat *)(v61 - 200), v65);
  _Unwind_Resume(a1);
}

void cv::preprocess2DKernel(cv::Mat *a1, _QWORD *a2, unint64_t *a3)
{
  const cv::_InputArray *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  float v25;
  _DWORD *v26;
  double v27;
  _DWORD *v28;
  const cv::Exception *v29;
  void *__p[2];
  void *v31[2];
  void *v32[2];
  _BYTE v33[120];

  cv::_InputArray::_InputArray((uint64_t)v33, a1);
  v7 = cv::countNonZero((cv *)v33, v6);
  v8 = *(_DWORD *)a1 & 0xFFF;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  if (v8 > 6 || ((1 << *(_BYTE *)a1) & 0x71) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(v31, "preprocess2DKernel");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v33, 4294967081, v32, v31, __p, 3055);
    cv::error((cv *)v33, v29);
  }
  std::vector<cv::Point_<int>>::resize((uint64_t)a2, v9);
  v11 = (int)(((v8 >> 3) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3)) * (uint64_t)v9;
  v12 = *a3;
  v13 = a3[1] - *a3;
  if (v11 <= v13)
  {
    if (v11 < v13)
      a3[1] = v12 + v11;
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v11 - v13);
    v12 = *a3;
  }
  v14 = *((_DWORD *)a1 + 2);
  if (v14 < 1)
    return;
  v15 = 0;
  v16 = 0;
  LODWORD(v17) = *((_DWORD *)a1 + 3);
  do
  {
    if ((int)v17 < 1)
      goto LABEL_30;
    v18 = 0;
    v19 = 0;
    v20 = *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 10) * v15;
    do
    {
      if (v8 == 5)
      {
        v25 = *(float *)(v20 + v18);
        if (v25 == 0.0)
          goto LABEL_28;
        v26 = (_DWORD *)(*a2 + 8 * v16);
        *v26 = v19;
        v26[1] = v15;
        *(float *)(v12 + 4 * v16) = v25;
      }
      else if (v8 == 4)
      {
        v23 = *(_DWORD *)(v20 + v18);
        if (!v23)
          goto LABEL_28;
        v24 = (_DWORD *)(*a2 + 8 * v16);
        *v24 = v19;
        v24[1] = v15;
        *(_DWORD *)(v12 + 4 * v16) = v23;
      }
      else if (v8)
      {
        v27 = *(double *)(v20 + 8 * v19);
        if (v27 == 0.0)
          goto LABEL_28;
        v28 = (_DWORD *)(*a2 + 8 * v16);
        *v28 = v19;
        v28[1] = v15;
        *(double *)(v12 + 8 * v16) = v27;
      }
      else
      {
        v21 = *(_BYTE *)(v20 + v19);
        if (!v21)
          goto LABEL_28;
        v22 = (_DWORD *)(*a2 + 8 * v16);
        *v22 = v19;
        v22[1] = v15;
        *(_BYTE *)(v12 + v16) = v21;
      }
      ++v16;
LABEL_28:
      ++v19;
      v17 = *((int *)a1 + 3);
      v18 += 4;
    }
    while (v19 < v17);
    v14 = *((_DWORD *)a1 + 2);
LABEL_30:
    ++v15;
  }
  while (v15 < v14);
}

void sub_219E040BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void std::vector<cv::Point_<int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<cv::Point_<int>>::__append((char **)a1, a2 - v2);
  }
}

void cv::getLinearFilter(uint64_t a1@<X0>, uint64_t a2@<X1>, void (***a3)(_QWORD *__return_ptr, _QWORD, uint64_t)@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  unsigned int v13;
  unsigned int v14;
  const cv::Exception *v15;
  uint64_t v16;
  void *v17;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  double v27;
  void **v28;
  cv *v29;
  uint64_t v30;
  _DWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int32x2_t *v54;
  const cv::Exception *v55;
  void *v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[64];
  _BYTE *v71;
  cv *v72;
  _QWORD v73[2];
  int32x2_t v74;
  uint64_t v75;
  void *__p[2];
  void *v77[2];
  int v78[30];
  _QWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int32x2_t *v83;
  void **v84;
  uint64_t v85;

  (**a3)(v79, a3, 0xFFFFFFFFLL);
  v13 = a1 & 7;
  v14 = a2 & 7;
  if (v14 < v13 || (((unsigned __int16)a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "cn == CV_MAT_CN(dstType) && ddepth >= sdepth");
    std::string::basic_string[abi:ne180100]<0>(v77, "getLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v78, 4294967081, v70, v77, __p, 3185);
    cv::error((cv *)v78, v15);
  }
  v16 = *a4;
  v74 = vrev64_s32(*v83);
  v75 = v16;
  cv::normalizeAnchor((int *)&v75, (int *)&v74, v78);
  *a4 = *(_QWORD *)v78;
  if (v14 == 6 || v13 == 6)
    v19 = 6;
  else
    v19 = 5;
  v71 = &v70[8];
  v72 = (cv *)v73;
  v73[0] = 0;
  v73[1] = 0;
  *(_DWORD *)v70 = 1124007936;
  memset(&v70[4], 0, 60);
  if ((v79[0] & 0xFFF) == v19)
  {
    v20 = (unsigned int *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      v22 = *(unsigned int **)&v70[24];
      if (*(_QWORD *)&v70[24])
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          cv::Mat::deallocate((cv::Mat *)v70, v17);
      }
    }
    *(_QWORD *)&v70[16] = 0;
    memset(&v70[32], 0, 24);
    if (*(uint64_t *)v70 <= 0)
    {
      *(_QWORD *)&v70[24] = 0;
      *(_DWORD *)v70 = v79[0];
    }
    else
    {
      v25 = 0;
      v26 = v71;
      do
        *(_DWORD *)&v26[4 * v25++] = 0;
      while (v25 < *(int *)&v70[4]);
      *(_QWORD *)&v70[24] = 0;
      *(_DWORD *)v70 = v79[0];
      if (*(int *)&v70[4] > 2)
        goto LABEL_28;
    }
    if (SHIDWORD(v79[0]) <= 2)
    {
      *(_DWORD *)&v70[4] = HIDWORD(v79[0]);
      *(_QWORD *)&v70[8] = v79[1];
      v28 = v84;
      v29 = v72;
      *(_QWORD *)v72 = *v84;
      *((_QWORD *)v29 + 1) = v28[1];
LABEL_29:
      *(_OWORD *)&v70[16] = v80;
      *(_OWORD *)&v70[32] = v81;
      *(_OWORD *)&v70[48] = v82;
      goto LABEL_30;
    }
LABEL_28:
    cv::Mat::copySize((cv::Mat *)v70, (const cv::Mat *)v79);
    goto LABEL_29;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v78, (cv::Mat *)v70);
  v27 = 1.0;
  if ((v79[0] & 0xFFF) == 4)
    v27 = 1.0 / (double)(1 << a5);
  cv::Mat::convertTo((cv::Mat *)v79, (const cv::_OutputArray *)v78, v19, v27, 0.0);
LABEL_30:
  if (((a2 | a1) & 7) != 0)
  {
    if ((a1 & 7) != 0 || v14 != 2)
    {
      if ((a1 & 7) != 0 || v14 != 3)
      {
        if ((a1 & 7) != 0 || v14 != 5)
        {
          if ((a1 & 7) != 0 || v14 != 6)
          {
            if (v13 == 2 && v14 == 2)
            {
              v37 = operator new();
              v64 = *a4;
              cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(v37, (int32x2_t **)v70, &v64, a7);
              *a6 = v37;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 2 && v14 == 5)
            {
              v38 = operator new();
              v63 = *a4;
              cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(v38, (int32x2_t **)v70, &v63, a7);
              *a6 = v38;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 2 && v14 == 6)
            {
              v39 = operator new();
              v62 = *a4;
              cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(v39, (int32x2_t **)v70, &v62, a7);
              *a6 = v39;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 3 && v14 == 3)
            {
              v40 = operator new();
              v61 = *a4;
              cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(v40, (int32x2_t **)v70, &v61, a7);
              *a6 = v40;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 3 && v14 == 5)
            {
              v41 = operator new();
              v60 = *a4;
              cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(v41, (int32x2_t **)v70, &v60, a7);
              *a6 = v41;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 3 && v14 == 6)
            {
              v42 = operator new();
              v59 = *a4;
              cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(v42, (int32x2_t **)v70, &v59, a7);
              *a6 = v42;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else if (v13 == 5 && v14 == 5)
            {
              v43 = operator new();
              v58 = *a4;
              cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(v43, (int32x2_t **)v70, &v58, a7);
              *a6 = v43;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
            else
            {
              if (v13 != 6 || v14 != 6)
              {
                cv::format(v77, a1, a2);
                std::string::basic_string[abi:ne180100]<0>(__p, "getLinearFilter");
                std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
                cv::Exception::Exception(v78, 4294967083, v77, __p, v56, 3250);
                cv::error((cv *)v78, v55);
              }
              v44 = operator new();
              v57 = *a4;
              cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(v44, (int32x2_t **)v70, &v57, a7);
              *a6 = v44;
              v31 = (_DWORD *)cv::fastMalloc((cv *)4);
            }
          }
          else
          {
            v36 = operator new();
            v65 = *a4;
            cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(v36, (int32x2_t **)v70, &v65, a7);
            *a6 = v36;
            v31 = (_DWORD *)cv::fastMalloc((cv *)4);
          }
        }
        else
        {
          v35 = operator new();
          v66 = *a4;
          cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(v35, (int32x2_t **)v70, &v66, a7);
          *a6 = v35;
          v31 = (_DWORD *)cv::fastMalloc((cv *)4);
        }
      }
      else
      {
        v34 = operator new();
        v67 = *a4;
        cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(v34, (int32x2_t **)v70, &v67, a7);
        *a6 = v34;
        v31 = (_DWORD *)cv::fastMalloc((cv *)4);
      }
    }
    else
    {
      v30 = operator new();
      v68 = *a4;
      cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(v30, (int32x2_t **)v70, &v68, a7);
      *a6 = v30;
      v31 = (_DWORD *)cv::fastMalloc((cv *)4);
    }
  }
  else
  {
    v33 = operator new();
    v69 = *a4;
    cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::Filter2D(v33, (int32x2_t **)v70, &v69, a7);
    *a6 = v33;
    v31 = (_DWORD *)cv::fastMalloc((cv *)4);
  }
  *v31 = 1;
  a6[1] = (uint64_t)v31;
  v45 = *(unsigned int **)&v70[24];
  if (*(_QWORD *)&v70[24])
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      cv::Mat::deallocate((cv::Mat *)v70, v32);
  }
  *(_QWORD *)&v70[16] = 0;
  memset(&v70[32], 0, 24);
  if (*(int *)&v70[4] >= 1)
  {
    v48 = 0;
    v49 = v71;
    do
      *(_DWORD *)&v49[4 * v48++] = 0;
    while (v48 < *(int *)&v70[4]);
  }
  *(_QWORD *)&v70[24] = 0;
  if (v72 != (cv *)v73)
    cv::fastFree((void **)v72, v32);
  v50 = (unsigned int *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
      cv::Mat::deallocate((cv::Mat *)v79, v32);
  }
  *(_QWORD *)&v80 = 0;
  v81 = 0uLL;
  *(_QWORD *)&v82 = 0;
  if (SHIDWORD(v79[0]) >= 1)
  {
    v53 = 0;
    v54 = v83;
    do
      v54->i32[v53++] = 0;
    while (v53 < SHIDWORD(v79[0]));
  }
  *((_QWORD *)&v80 + 1) = 0;
  if (v84 != (void **)&v85)
    cv::fastFree(v84, v32);
}

void sub_219E04A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  uint64_t v60;
  void *v62;
  void *v63;

  cv::Exception::~Exception((cv::Exception *)&a60);
  if (a17 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  cv::Mat::~Mat((cv::Mat *)&a31, v62);
  cv::Mat::~Mat((cv::Mat *)(v60 - 192), v63);
  _Unwind_Resume(a1);
}

int *cv::normalizeAnchor@<X0>(int *result@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v4;
  int v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  _BYTE v10[120];

  v4 = *result;
  if (*result == -1)
  {
    v4 = *a2 / 2;
    *result = v4;
  }
  v5 = result[1];
  if (v5 == -1)
  {
    v5 = a2[1] / 2;
    result[1] = v5;
    if (v4 < 0)
      goto LABEL_10;
  }
  else if (v4 < 0)
  {
    goto LABEL_10;
  }
  if (v4 >= *a2 || v5 < 0 || v5 >= a2[1])
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(v9, "anchor.inside(Rect(0, 0, ksize.width, ksize.height))");
    std::string::basic_string[abi:ne180100]<0>(v8, "normalizeAnchor");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/precomp.hpp");
    cv::Exception::Exception(v10, 4294967081, v9, v8, __p, 88);
    cv::error((cv *)v10, v6);
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

{
  int v4;
  int v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  _BYTE v10[120];

  v4 = *result;
  if (*result == -1)
  {
    v4 = *a2 / 2;
    *result = v4;
  }
  v5 = result[1];
  if (v5 == -1)
  {
    v5 = a2[1] / 2;
    result[1] = v5;
    if (v4 < 0)
      goto LABEL_10;
  }
  else if (v4 < 0)
  {
    goto LABEL_10;
  }
  if (v4 >= *a2 || v5 < 0 || v5 >= a2[1])
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(v9, "anchor.inside(Rect(0, 0, ksize.width, ksize.height))");
    std::string::basic_string[abi:ne180100]<0>(v8, "normalizeAnchor");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/precomp.hpp");
    cv::Exception::Exception(v10, 4294967081, v9, v8, __p, 88);
    cv::error((cv *)v10, v6);
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

void sub_219E04CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void cv::createLinearFilter(unsigned __int16 a1@<W0>, unsigned __int16 a2@<W1>, void (***a3)(__int128 *__return_ptr, _QWORD, uint64_t)@<X2>, uint64_t *a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X8>, double a9@<D0>)
{
  const cv::Exception *v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  void **v21;
  cv *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  cv *v49;
  void *__p;
  cv *v51;
  void *v52;
  cv *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  cv *v60;
  _QWORD v61[6];
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;

  (**a3)(&v62, a3, 0xFFFFFFFFLL);
  if (((a2 ^ a1) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "cn == CV_MAT_CN(_dstType)");
    std::string::basic_string[abi:ne180100]<0>(&v52, "createLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(&v54, 4294967081, &v48, &v52, &__p, 3266);
    cv::error((cv *)&v54, v17);
  }
  v55 = v63;
  v54 = v62;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v59 = (char *)&v54 + 8;
  v61[0] = 0;
  v61[1] = 0;
  v18 = (unsigned int *)v64;
  v60 = (cv *)v61;
  if ((_QWORD)v64)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = DWORD1(v62);
  }
  else
  {
    v20 = DWORD1(v62);
  }
  if (v20 > 2)
  {
    DWORD1(v54) = 0;
    cv::Mat::copySize((cv::Mat *)&v54, (const cv::Mat *)&v62);
  }
  else
  {
    v21 = v68;
    v22 = v60;
    *(_QWORD *)v60 = *v68;
    *((_QWORD *)v22 + 1) = v21[1];
  }
  cv::_InputArray::_InputArray((uint64_t)&v48, (const cv::Mat *)&v54);
  v23 = a1 & 0xFFF;
  v24 = a2 & 0xFFF;
  v47 = *a4;
  cv::getLinearFilter(v23, v24, (void (***)(_QWORD *__return_ptr, _QWORD, uint64_t))&v48, &v47, 0, (uint64_t *)&v52, a9);
  v25 = operator new();
  v48 = 0;
  v49 = 0;
  __p = 0;
  v51 = 0;
  cv::FilterEngine::FilterEngine(v25, &v52, &v48, &__p, v23, v24, v23, a5, a6, a7);
  *a8 = v25;
  v26 = (_DWORD *)cv::fastMalloc((cv *)4);
  *v26 = 1;
  a8[1] = (uint64_t)v26;
  v28 = (unsigned int *)v51;
  if (v51)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
      cv::fastFree((void **)v51, v27);
    }
  }
  v31 = (unsigned int *)v49;
  if (v49)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      if (v48)
        (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
      cv::fastFree((void **)v49, v27);
    }
  }
  v34 = (unsigned int *)v53;
  if (v53)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      if (v52)
        (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
      cv::fastFree((void **)v53, v27);
    }
  }
  v37 = (unsigned int *)v56;
  if ((_QWORD)v56)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      cv::Mat::deallocate((cv::Mat *)&v54, v27);
  }
  v55 = 0;
  v57 = 0uLL;
  *((_QWORD *)&v56 + 1) = 0;
  if (SDWORD1(v54) >= 1)
  {
    v40 = 0;
    v41 = v59;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < SDWORD1(v54));
  }
  *(_QWORD *)&v56 = 0;
  if (v60 != (cv *)v61)
    cv::fastFree((void **)v60, v27);
  v42 = (unsigned int *)v64;
  if ((_QWORD)v64)
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      cv::Mat::deallocate((cv::Mat *)&v62, v27);
  }
  v63 = 0;
  v65 = 0uLL;
  *((_QWORD *)&v64 + 1) = 0;
  if (SDWORD1(v62) >= 1)
  {
    v45 = 0;
    v46 = v67;
    do
      *(_DWORD *)(v46 + 4 * v45++) = 0;
    while (v45 < SDWORD1(v62));
  }
  *(_QWORD *)&v64 = 0;
  if (v68 != (void **)&v69)
    cv::fastFree(v68, v27);
}

void sub_219E05128(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  cv::Mat::~Mat((cv::Mat *)(v32 - 208), a2);
  _Unwind_Resume(a1);
}

void cv::filter2D(void (***a1)(_QWORD *__return_ptr, _QWORD, uint64_t), uint64_t a2, int a3, void (***a4)(uint64_t *__return_ptr, _QWORD, uint64_t), uint64_t *a5, unsigned int a6, double a7)
{
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  __int16 v22;
  __int16 v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  cv *v28;
  cv *v29;
  int32x2_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int32x2_t *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int32x2_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  cv *v54;
  uint64_t v55;
  int32x2_t v56;
  _BYTE v57[64];
  _BYTE *v58;
  cv *v59;
  _QWORD v60[3];
  int32x2_t v61;
  uint64_t v62;
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  cv *v68;
  uint64_t v69;
  int32x2_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x2_t *v79;
  cv *v80;
  uint64_t v81;
  _QWORD v82[2];
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int32x2_t *v88;
  void **v89;
  uint64_t v90;
  int v91[4];
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  (**a1)(v82, a1, 0xFFFFFFFFLL);
  (**a4)(&v71, a4, 0xFFFFFFFFLL);
  if (a3 < 0)
    LOBYTE(a3) = v82[0];
  v70 = vrev64_s32(*v88);
  (*(void (**)(uint64_t, int32x2_t *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, &v70, v82[0] & 0xFF8 | a3 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t))a2)(v63, a2, 0xFFFFFFFFLL);
  v13 = *a5;
  v61 = vrev64_s32(*v79);
  v62 = v13;
  cv::normalizeAnchor((int *)&v62, (int *)&v61, (int *)v57);
  *a5 = *(_QWORD *)v57;
  if (v72 * v73 >= 50)
  {
    v58 = &v57[8];
    v59 = (cv *)v60;
    v60[0] = 0;
    v60[1] = 0;
    *(_DWORD *)v57 = 1124007936;
    memset(&v57[4], 0, 60);
    if (v83 == (_QWORD)v64)
    {
      *(_QWORD *)v91 = *v67;
      cv::Mat::create((cv::Mat *)v57, (cv::Mat *)2, v91, v63[0] & 0xFFF);
LABEL_28:
      v30 = vrev64_s32(*v88);
      v55 = *a5;
      v56 = v30;
      cv::crossCorr((cv::Mat *)v82, (cv::Mat *)&v71, (cv::Mat *)v57, (int *)&v56, v82[0] & 0xFF8 | a3 & 7, &v55, a6, a7);
      if (*(_QWORD *)&v57[16] != (_QWORD)v64)
      {
        cv::_OutputArray::_OutputArray((uint64_t)v91, (cv::Mat *)v63);
        cv::Mat::copyTo((cv::Mat *)v57, (const cv::_OutputArray *)v91);
      }
      v31 = *(unsigned int **)&v57[24];
      if (*(_QWORD *)&v57[24])
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
          cv::Mat::deallocate((cv::Mat *)v57, v24);
      }
      *(_QWORD *)&v57[16] = 0;
      memset(&v57[32], 0, 24);
      if (*(int *)&v57[4] >= 1)
      {
        v34 = 0;
        v35 = v58;
        do
          *(_DWORD *)&v35[4 * v34++] = 0;
        while (v34 < *(int *)&v57[4]);
      }
      *(_QWORD *)&v57[24] = 0;
      if (v59 != (cv *)v60)
        cv::fastFree((void **)v59, v24);
      goto LABEL_39;
    }
    v15 = (unsigned int *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v17 = *(unsigned int **)&v57[24];
      if (*(_QWORD *)&v57[24])
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
          cv::Mat::deallocate((cv::Mat *)v57, v14);
      }
    }
    *(_QWORD *)&v57[16] = 0;
    memset(&v57[32], 0, 24);
    if (*(int *)&v57[4] <= 0)
    {
      *(_QWORD *)&v57[24] = 0;
      *(_DWORD *)v57 = v63[0];
    }
    else
    {
      v20 = 0;
      v21 = v58;
      do
        *(_DWORD *)&v21[4 * v20++] = 0;
      while (v20 < *(int *)&v57[4]);
      *(_QWORD *)&v57[24] = 0;
      *(_DWORD *)v57 = v63[0];
      if (*(int *)&v57[4] > 2)
        goto LABEL_26;
    }
    if (SHIDWORD(v63[0]) <= 2)
    {
      *(_DWORD *)&v57[4] = HIDWORD(v63[0]);
      *(_QWORD *)&v57[8] = v63[1];
      v28 = v68;
      v29 = v59;
      *(_QWORD *)v59 = *(_QWORD *)v68;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v28 + 1);
LABEL_27:
      *(_OWORD *)&v57[16] = v64;
      *(_OWORD *)&v57[32] = v65;
      *(_OWORD *)&v57[48] = v66;
      goto LABEL_28;
    }
LABEL_26:
    cv::Mat::copySize((cv::Mat *)v57, (const cv::Mat *)v63);
    goto LABEL_27;
  }
  v22 = v82[0];
  v23 = v63[0];
  cv::_InputArray::_InputArray((uint64_t)v57, (const cv::Mat *)&v71);
  v52 = *a5;
  *(_OWORD *)v91 = 0u;
  v92 = 0u;
  cv::createLinearFilter(v22 & 0xFFF, v23 & 0xFFF, (void (***)(__int128 *__return_ptr, _QWORD, uint64_t))v57, &v52, a6 & 0xFFFFFFEF, -1, (uint64_t)v91, &v53, a7);
  *(_OWORD *)v57 = xmmword_219E9E130;
  v51 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *, _BYTE *, uint64_t *, _QWORD))(*(_QWORD *)v53 + 40))(v53, v82, v63, v57, &v51, (a6 >> 4) & 1);
  v25 = (unsigned int *)v54;
  if (v54)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      cv::fastFree((void **)v54, v24);
    }
  }
LABEL_39:
  v36 = (unsigned int *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      cv::Mat::deallocate((cv::Mat *)v63, v24);
  }
  *(_QWORD *)&v64 = 0;
  v65 = 0uLL;
  *(_QWORD *)&v66 = 0;
  if (SHIDWORD(v63[0]) >= 1)
  {
    v39 = 0;
    v40 = v67;
    do
      *((_DWORD *)v40 + v39++) = 0;
    while (v39 < SHIDWORD(v63[0]));
  }
  *((_QWORD *)&v64 + 1) = 0;
  if (v68 != (cv *)&v69)
    cv::fastFree((void **)v68, v24);
  v41 = v75;
  if (v75)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      cv::Mat::deallocate((cv::Mat *)&v71, v24);
  }
  v74 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  if (SHIDWORD(v71) >= 1)
  {
    v44 = 0;
    v45 = v79;
    do
      v45->i32[v44++] = 0;
    while (v44 < SHIDWORD(v71));
  }
  v75 = 0;
  if (v80 != (cv *)&v81)
    cv::fastFree((void **)v80, v24);
  v46 = v84;
  if (v84)
  {
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      cv::Mat::deallocate((cv::Mat *)v82, v24);
  }
  v83 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  if (SHIDWORD(v82[0]) >= 1)
  {
    v49 = 0;
    v50 = v88;
    do
      v50->i32[v49++] = 0;
    while (v49 < SHIDWORD(v82[0]));
  }
  v84 = 0;
  if (v89 != (void **)&v90)
    cv::fastFree(v89, v24);
}

void sub_219E05778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_219E057F4()
{
  JUMPOUT(0x219E057E4);
}

void sub_219E057FC()
{
  JUMPOUT(0x219E057ECLL);
}

uint64_t *cv::Ptr<cv::FilterEngine>::~Ptr(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)a1[1];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      cv::fastFree((void **)a1[1], a2);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void cv::sepFilter2D(void (***a1)(_QWORD *__return_ptr, _QWORD, uint64_t), uint64_t a2, int a3, void (***a4)(_QWORD *__return_ptr, _QWORD, uint64_t), void (***a5)(_QWORD *__return_ptr, _QWORD, uint64_t), uint64_t *a6, unsigned int a7, double a8)
{
  char v15;
  __int16 v16;
  __int16 v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int32x2_t *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  void (**v45[4])(uint64_t *__return_ptr, _QWORD, uint64_t);
  _OWORD v46[2];
  uint64_t v47;
  cv *v48;
  _QWORD v49[3];
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  cv *v55;
  uint64_t v56;
  int32x2_t v57;
  _QWORD v58[3];
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  cv *v64;
  uint64_t v65;
  _QWORD v66[3];
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  cv *v72;
  uint64_t v73;
  _QWORD v74[3];
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x2_t *v79;
  void **v80;
  uint64_t v81;

  (**a1)(v74, a1, 0xFFFFFFFFLL);
  (**a4)(v66, a4, 0xFFFFFFFFLL);
  (**a5)(v58, a5, 0xFFFFFFFFLL);
  if (a3 >= 0)
    v15 = a3;
  else
    v15 = v74[0];
  v57 = vrev64_s32(*v79);
  (*(void (**)(uint64_t, int32x2_t *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, &v57, v74[0] & 0xFF8 | v15 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t))a2)(v49, a2, 0xFFFFFFFFLL);
  v16 = v74[0];
  v17 = v49[0];
  cv::_InputArray::_InputArray((uint64_t)v46, (const cv::Mat *)v66);
  cv::_InputArray::_InputArray((uint64_t)v45, (const cv::Mat *)v58);
  v44 = *a6;
  memset(v43, 0, sizeof(v43));
  cv::createSeparableLinearFilter(v16 & 0xFFF, v17 & 0xFFF, (void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))v46, v45, (int *)&v44, a7 & 0xFFFFFFEF, -1, (uint64_t)v43, &v47, a8);
  v46[0] = xmmword_219E9E130;
  v42 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *, _OWORD *, uint64_t *, _QWORD))(*(_QWORD *)v47 + 40))(v47, v74, v49, v46, &v42, (a7 >> 4) & 1);
  v19 = (unsigned int *)v48;
  if (v48)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      cv::fastFree((void **)v48, v18);
    }
  }
  v22 = v50;
  if (v50)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      cv::Mat::deallocate((cv::Mat *)v49, v18);
  }
  v49[2] = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (SHIDWORD(v49[0]) >= 1)
  {
    v25 = 0;
    v26 = v54;
    do
      *(_DWORD *)(v26 + 4 * v25++) = 0;
    while (v25 < SHIDWORD(v49[0]));
  }
  v50 = 0;
  if (v55 != (cv *)&v56)
    cv::fastFree((void **)v55, v18);
  v27 = v59;
  if (v59)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      cv::Mat::deallocate((cv::Mat *)v58, v18);
  }
  v58[2] = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  if (SHIDWORD(v58[0]) >= 1)
  {
    v30 = 0;
    v31 = v63;
    do
      *(_DWORD *)(v31 + 4 * v30++) = 0;
    while (v30 < SHIDWORD(v58[0]));
  }
  v59 = 0;
  if (v64 != (cv *)&v65)
    cv::fastFree((void **)v64, v18);
  v32 = v67;
  if (v67)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      cv::Mat::deallocate((cv::Mat *)v66, v18);
  }
  v66[2] = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (SHIDWORD(v66[0]) >= 1)
  {
    v35 = 0;
    v36 = v71;
    do
      *(_DWORD *)(v36 + 4 * v35++) = 0;
    while (v35 < SHIDWORD(v66[0]));
  }
  v67 = 0;
  if (v72 != (cv *)&v73)
    cv::fastFree((void **)v72, v18);
  v37 = v75;
  if (v75)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      cv::Mat::deallocate((cv::Mat *)v74, v18);
  }
  v74[2] = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  if (SHIDWORD(v74[0]) >= 1)
  {
    v40 = 0;
    v41 = v79;
    do
      v41->i32[v40++] = 0;
    while (v40 < SHIDWORD(v74[0]));
  }
  v75 = 0;
  if (v80 != (void **)&v81)
    cv::fastFree(v80, v18);
}

void sub_219E05C0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  cv::Ptr<cv::FilterEngine>::~Ptr(&a26, a2);
  cv::Mat::~Mat((cv::Mat *)&a28, v55);
  cv::Mat::~Mat((cv::Mat *)&a41, v56);
  cv::Mat::~Mat((cv::Mat *)&a53, v57);
  cv::Mat::~Mat((cv::Mat *)(v53 - 176), v58);
  _Unwind_Resume(a1);
}

void sub_219E05C5C()
{
  JUMPOUT(0x219E05C44);
}

void sub_219E05C64()
{
  JUMPOUT(0x219E05C4CLL);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<unsigned char *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4)
{
  uint64_t v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  v6 = cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::RowFilter(a1, a2, a3);
  *(_QWORD *)v6 = &off_24DBEE750;
  *(_DWORD *)(v6 + 116) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmRowSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2321);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_219E05F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE7A8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E0624C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE7A8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE7A8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE7A8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE7A8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

unint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::operator()(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  int v94;

  v5 = *(_DWORD *)(result + 8);
  if (v5 >= 0)
    v6 = *(_DWORD *)(result + 8);
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v8 = (uint64_t)v6 >> 1;
  v9 = (v6 >> 1) * (uint64_t)a5;
  v10 = *(_QWORD *)(result + 32);
  v11 = (int *)(v10 + 4 * (v6 >> 1));
  v12 = (unsigned __int8 *)(a2 + v7 * (uint64_t)a5);
  v13 = (a5 * a4);
  if ((*(_BYTE *)(result + 116) & 1) == 0)
  {
    if (v5 == 5)
    {
      if ((int)v13 < 2)
        goto LABEL_44;
      v18 = 0;
      v19 = v11[1];
      result = v11[2];
      v20 = (_DWORD *)(a3 + 4);
      v21 = a2 + v9 + a5;
      v22 = v9 + -2 * a5;
      v23 = v9 + 1;
      v24 = v9 + a5 + 1;
      v25 = v9 + 2 * a5;
      v26 = a2 + v9 + 1 - 2 * a5;
      v27 = v25 + a2 + 1;
      v28 = a2 + v22;
      v29 = a2 + v24;
      v30 = a2 + v23 - a5;
      do
      {
        v31 = (*(unsigned __int8 *)(v29 + v18) - *(unsigned __int8 *)(v30 + v18)) * v19
            + (*(unsigned __int8 *)(v27 + v18) - *(unsigned __int8 *)(v26 + v18)) * result;
        *(v20 - 1) = (*(unsigned __int8 *)(v21 + v18) - *(unsigned __int8 *)(v30 + v18 - 1)) * v19
                   + (*(unsigned __int8 *)(v27 + v18 - 1) - *(unsigned __int8 *)(v28 + v18)) * result;
        *v20 = v31;
        v18 += 2;
        v20 += 2;
      }
      while (v18 <= (v13 - 2));
      v12 += v18;
    }
    else
    {
      if (v5 != 3)
        goto LABEL_44;
      v14 = v11[1];
      if (*v11)
        v15 = 0;
      else
        v15 = v14 == 1;
      if (!v15)
      {
        if ((int)v13 >= 2)
        {
          v16 = 0;
          result = -(uint64_t)a5;
          do
          {
            v17 = (v12[a5 + 1] - v12[1 - a5]) * v14;
            *(_DWORD *)(a3 + 4 * v16) = (v12[a5] - v12[-a5]) * v14;
            *(_DWORD *)(a3 + ((4 * v16) | 4)) = v17;
            v16 += 2;
            v12 += 2;
          }
          while (v16 <= (v13 - 2));
          LODWORD(v18) = v16;
          goto LABEL_45;
        }
LABEL_44:
        LODWORD(v18) = 0;
        goto LABEL_45;
      }
      if ((int)v13 < 2)
        goto LABEL_44;
      v18 = 0;
      result = a5 + 1;
      do
      {
        v76 = v12[result] - v12[1 - a5];
        *(_DWORD *)(a3 + 4 * v18) = v12[a5] - v12[-a5];
        *(_DWORD *)(a3 + ((4 * v18) | 4)) = v76;
        v18 += 2;
        v12 += 2;
      }
      while (v18 <= (v13 - 2));
    }
LABEL_45:
    if ((int)v18 < (int)v13)
    {
      v56 = a5;
      v57 = (v8 + 1);
      v18 = v18;
      v58 = v10 + 4 * v8 + 4;
      v59 = v57 - 1;
      v60 = -(uint64_t)a5;
      do
      {
        result = *v12;
        v61 = *v11 * result;
        if (v5 >= 2)
        {
          result = v60;
          v62 = v59;
          v63 = (int *)v58;
          v64 = v56;
          do
          {
            v65 = *v63++;
            v61 += (v12[v64] - v12[result]) * v65;
            v64 += v56;
            result -= v56;
            --v62;
          }
          while (v62);
        }
        *(_DWORD *)(a3 + 4 * v18++) = v61;
        ++v12;
      }
      while (v18 != v13);
    }
    return result;
  }
  if (v5 == 5)
  {
    v32 = *v11;
    v33 = v11[1];
    v34 = v11[2];
    if (*v11 == -2 && v33 == 0 && v34 == 1)
    {
      if ((int)v13 >= 2)
      {
        result = 0;
        v66 = (int *)(a3 + 4);
        v67 = a2 + v9 + -2 * a5;
        v68 = v9 + 2 * a5 + a2 + 1;
        v69 = v9 - 2 * a5 + a2 + 1;
        do
        {
          v70 = *(unsigned __int8 *)(v68 + result) - 2 * v12[result + 1] + *(unsigned __int8 *)(v69 + result);
          *(v66 - 1) = *(unsigned __int8 *)(v68 + result - 1) - 2 * v12[result] + *(unsigned __int8 *)(v67 + result);
          *v66 = v70;
          result += 2;
          v66 += 2;
        }
        while (result <= (v13 - 2));
        goto LABEL_69;
      }
    }
    else if ((int)v13 >= 2)
    {
      result = 0;
      v37 = v9 + 1;
      v38 = (int *)(a3 + 4);
      v39 = v9 + -2 * a5;
      v40 = a2 + v9 + 1 - 2 * a5;
      v41 = v9 + 2 * a5;
      v42 = v9 + a5 + 1;
      v43 = a2 + v9 + a5;
      v44 = a2 + v39;
      v45 = a2 + v41;
      v46 = a2 + v37 - a5;
      v47 = a2 + v42;
      do
      {
        v48 = v32 * v12[result + 1]
            + (*(unsigned __int8 *)(v47 + result) + *(unsigned __int8 *)(v46 + result)) * v33
            + (*(unsigned __int8 *)(v45 + result + 1) + *(unsigned __int8 *)(v40 + result)) * v34;
        *(v38 - 1) = v32 * v12[result]
                   + (*(unsigned __int8 *)(v43 + result) + *(unsigned __int8 *)(v46 + result - 1)) * v33
                   + (*(unsigned __int8 *)(v45 + result) + *(unsigned __int8 *)(v44 + result)) * v34;
        *v38 = v48;
        result += 2;
        v38 += 2;
      }
      while (result <= (v13 - 2));
      goto LABEL_69;
    }
    goto LABEL_63;
  }
  if (v5 == 3)
  {
    v49 = *v11;
    if (*v11 == -2)
    {
      v50 = v11[1];
      if (v50 == 1)
      {
        if ((int)v13 >= 2)
        {
          result = 0;
          v71 = (int *)(a3 + 4);
          v72 = a2 + v9 + a5 + 1;
          v73 = a2 + v9 + a5;
          v74 = v9 - a5 + a2 + 1;
          do
          {
            v75 = *(unsigned __int8 *)(v72 + result) - 2 * v12[result + 1] + *(unsigned __int8 *)(v74 + result);
            *(v71 - 1) = *(unsigned __int8 *)(v73 + result) - 2 * v12[result] + *(unsigned __int8 *)(v74 + result - 1);
            *v71 = v75;
            result += 2;
            v71 += 2;
          }
          while (result <= (v13 - 2));
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }
    else if (v49 == 2)
    {
      v50 = v11[1];
      if (v50 == 1)
      {
        if ((int)v13 >= 2)
        {
          result = 0;
          v51 = (int *)(a3 + 4);
          v52 = a2 + v9 + a5 + 1;
          v53 = a2 + v9 + a5;
          v54 = v9 - a5 + a2 + 1;
          do
          {
            v55 = *(unsigned __int8 *)(v54 + result) + 2 * v12[result + 1] + *(unsigned __int8 *)(v52 + result);
            *(v51 - 1) = *(unsigned __int8 *)(v54 + result - 1) + 2 * v12[result] + *(unsigned __int8 *)(v53 + result);
            *v51 = v55;
            result += 2;
            v51 += 2;
          }
          while (result <= (v13 - 2));
LABEL_69:
          v12 += result;
          goto LABEL_73;
        }
        goto LABEL_63;
      }
    }
    else
    {
      v50 = v11[1];
    }
    if ((int)v13 >= 2)
    {
      result = 0;
      v77 = (int *)(a3 + 4);
      v78 = a2 + v9 + a5 + 1;
      v79 = a2 + v9 + a5;
      v80 = v9 - a5 + a2 + 1;
      do
      {
        v81 = v49 * v12[result + 1] + (*(unsigned __int8 *)(v78 + result) + *(unsigned __int8 *)(v80 + result)) * v50;
        *(v77 - 1) = v49 * v12[result]
                   + (*(unsigned __int8 *)(v79 + result) + *(unsigned __int8 *)(v80 + result - 1)) * v50;
        *v77 = v81;
        result += 2;
        v77 += 2;
      }
      while (result <= (v13 - 2));
      goto LABEL_69;
    }
LABEL_63:
    result = 0;
    goto LABEL_73;
  }
  if (v5 != 1 || *v11 != 1)
    goto LABEL_63;
  if ((int)v13 >= 2)
  {
    result = 0;
    do
    {
      v82 = v12[result + 1];
      v83 = (_DWORD *)(a3 + 4 * result);
      *v83 = v12[result];
      v83[1] = v82;
      result += 2;
    }
    while (result <= (v13 - 2));
  }
  else
  {
    result = 0;
  }
  v12 += result;
LABEL_73:
  if ((int)result < (int)v13)
  {
    v84 = a5;
    v85 = (v8 + 1);
    v86 = result;
    v87 = v10 + 4 * v8 + 4;
    v88 = v85 - 1;
    v89 = -(uint64_t)a5;
    do
    {
      result = *v12;
      v90 = *v11 * result;
      if (v5 >= 2)
      {
        result = v89;
        v91 = v88;
        v92 = (int *)v87;
        v93 = v84;
        do
        {
          v94 = *v92++;
          v90 += (v12[result] + v12[v93]) * v94;
          v93 += v84;
          result -= v84;
          --v91;
        }
        while (v91);
      }
      *(_DWORD *)(a3 + 4 * v86++) = v90;
      ++v12;
    }
    while (v86 != v13);
  }
  return result;
}

void cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE7A8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int32x4_t a6)
{
  uint64_t v6;
  const float *v7;
  uint64_t v8;
  unint64_t v9;
  __int32 *v10;
  int32x4_t v11;
  __int32 *v12;
  uint64_t v13;
  const float *v14;
  int32x4_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v6 = *(unsigned int *)(result + 8);
  v7 = *(const float **)(result + 32);
  v8 = (a5 * a4);
  if ((int)v8 >= 4)
  {
    v9 = 0;
    v10 = (__int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v9);
      v11 = (int32x4_t)vld1q_dup_f32(v7);
      a6 = vmulq_s32(v11, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      if ((int)v6 >= 2)
      {
        v12 = v10;
        v13 = v6 - 1;
        v14 = v7 + 1;
        do
        {
          v11.i32[0] = *v12;
          v11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8));
          v15 = (int32x4_t)vld1q_dup_f32(v14++);
          a6 = vmlaq_s32(a6, v15, v11);
          v12 = (__int32 *)((char *)v12 + a5);
          --v13;
        }
        while (v13);
      }
      result = 4 * v9;
      *(int32x4_t *)(a3 + 4 * v9) = a6;
      v9 += 4;
      ++v10;
    }
    while (v9 <= (v8 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v8)
  {
    v9 = v9;
    do
    {
      v16 = *(_DWORD *)v7 * *(unsigned __int8 *)(a2 + v9);
      if ((int)v6 >= 2)
      {
        v17 = a2 + a5;
        result = v6 - 1;
        v18 = (int *)(v7 + 1);
        do
        {
          v19 = *v18++;
          v16 += v19 * *(unsigned __int8 *)(v17 + v9);
          v17 += a5;
          --result;
        }
        while (result);
      }
      *(_DWORD *)(a3 + 4 * v9++) = v16;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4)
{
  uint64_t v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  v6 = cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::RowFilter(a1, a2, a3);
  *(_QWORD *)v6 = &off_24DBEE7D0;
  *(_DWORD *)(v6 + 116) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmRowSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2321);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_219E06E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE828;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E07124(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE828;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE828;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE828;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE828;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::operator()(uint64_t result, uint64_t a2, float32x2_t *a3, int a4, int a5, double a6, double a7, double a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float32x2_t *v15;
  uint64_t v16;
  float v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  float32x2_t *v23;
  float32x2_t v24;
  float32x2_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float *v39;
  float v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  float32x2_t v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t v81;
  float32x2_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  float v91;

  v8 = *(_DWORD *)(result + 8);
  if (v8 >= 0)
    v9 = *(_DWORD *)(result + 8);
  else
    v9 = v8 + 1;
  v10 = (v9 >> 1) * a5;
  v11 = *(_QWORD *)(result + 32);
  v12 = (uint64_t)v9 >> 1;
  v13 = (float *)(v11 + 4 * (v9 >> 1));
  v14 = v10;
  v15 = (float32x2_t *)(a2 + 4 * v10);
  v16 = (a5 * a4);
  if ((*(_BYTE *)(result + 116) & 1) == 0)
  {
    if (v8 == 5)
    {
      if ((int)v16 < 2)
        goto LABEL_42;
      v27 = 0;
      v19 = 0;
      v28 = 4 * v14;
      v29 = v13[1];
      v30 = v13[2];
      v31 = a2 + 4 * v14 + 4 * a5;
      v32 = v28 + 4;
      result = a2 + v28 + 4 - 8 * a5;
      v33 = v28 + 8 * a5 + a2;
      v34 = a2 + v28 + -8 * a5;
      v35 = a2 + v28 + 4 * (a5 + 1);
      v36 = a2 + v32 - 4 * a5;
      v37 = v33 + 4;
      do
      {
        v38 = (float)(v30 * (float)(*(float *)(v37 + v27) - *(float *)(result + v27)))
            + (float)((float)(*(float *)(v35 + v27) - *(float *)(v36 + v27)) * v29);
        v39 = (float *)&a3[v27 / 8] + 1;
        *(v39 - 1) = (float)(v30 * (float)(*(float *)(v37 + v27 - 4) - *(float *)(v34 + v27)))
                   + (float)((float)(*(float *)(v31 + v27) - *(float *)(v36 + v27 - 4)) * v29);
        *v39 = v38;
        v19 += 2;
        v27 += 8;
      }
      while (v19 <= (v16 - 2));
      v15 = (float32x2_t *)((char *)v15 + v27);
    }
    else
    {
      if (v8 != 3)
        goto LABEL_42;
      v17 = v13[1];
      if (*v13 != 0.0 || v17 != 1.0)
      {
        if ((int)v16 >= 2)
        {
          v19 = 0;
          v20 = 4 * v14;
          v21 = a2 + 4 * v14 + 4 * a5;
          v22 = (float32x2_t *)(a2 + v20 - 4 * a5);
          result = a2 + v20 + 4 * (a5 + 1);
          v23 = a3;
          do
          {
            v24 = *v22++;
            v25.i32[0] = *(_DWORD *)(v21 + 4 * v19);
            v25.i32[1] = *(_DWORD *)(result + 4 * v19);
            *v23++ = vmul_n_f32(vsub_f32(v25, v24), v17);
            v19 += 2;
            ++v15;
          }
          while (v19 <= (v16 - 2));
          goto LABEL_43;
        }
LABEL_42:
        LODWORD(v19) = 0;
        goto LABEL_43;
      }
      if ((int)v16 < 2)
        goto LABEL_42;
      v72 = 0;
      v19 = 0;
      result = (uint64_t)a3 + 4;
      v73 = 4 * v14;
      v74 = a2 + 4 * v14 + 4 * a5;
      v75 = v73 - 4 * a5 + a2 + 4;
      v76 = a2 + v73 + 4 * (a5 + 1);
      do
      {
        v77 = *(float *)(v76 + v72) - *(float *)(v75 + v72);
        v78 = (float *)(result + v72);
        *(v78 - 1) = *(float *)(v74 + v72) - *(float *)(v75 + v72 - 4);
        *v78 = v77;
        v19 += 2;
        v72 += 8;
      }
      while (v19 <= (v16 - 2));
      v15 = (float32x2_t *)((char *)v15 + v72);
    }
LABEL_43:
    if ((int)v19 < (int)v16)
    {
      v48 = v19;
      v49 = v11 + 4 * v12 + 4;
      v50 = (v12 + 1) - 1;
      v51 = 4 * a5;
      do
      {
        v52 = *v13 * v15->f32[0];
        if (v8 >= 2)
        {
          v53 = -4 * a5;
          result = 4 * a5;
          v54 = v50;
          v55 = (float *)v49;
          do
          {
            v56 = *v55++;
            v52 = v52
                + (float)(v56 * (float)(*(float *)((char *)v15->f32 + result) - *(float *)((char *)v15->f32 + v53)));
            result += v51;
            v53 -= v51;
            --v54;
          }
          while (v54);
        }
        a3->f32[v48++] = v52;
        v15 = (float32x2_t *)((char *)v15 + 4);
      }
      while (v48 != v16);
    }
    return result;
  }
  if (v8 == 5)
  {
    v40 = v13[1];
    *(float *)&a8 = v13[2];
    if (*v13 == -2.0 && (v40 == 0.0 ? (v41 = *(float *)&a8 == 1.0) : (v41 = 0), v41))
    {
      if ((int)v16 < 2)
        goto LABEL_69;
      v42 = 0;
      v26 = 0;
      v43 = 4 * v14;
      v44 = a2 + 4 * v14 + -8 * a5;
      result = a2 + v43 + 8 * a5;
      v45 = v43 - 8 * a5 + a2 + 4;
      do
      {
        v46.i32[0] = *(_DWORD *)(v44 + v42);
        v46.i32[1] = *(_DWORD *)(v45 + v42);
        a3[v42 / 8] = vadd_f32(vmla_f32(v46, (float32x2_t)0xC0000000C0000000, v15[v42 / 8]), *(float32x2_t *)(result + v42));
        v26 += 2;
        v42 += 8;
      }
      while (v26 <= (v16 - 2));
    }
    else
    {
      if ((int)v16 < 2)
        goto LABEL_69;
      v42 = 0;
      v26 = 0;
      v61 = 4 * v14;
      v62 = a2 + 4 * v14 - 4 * a5;
      v63 = v61 - 8 * a5;
      result = a2 + v61 + 4 * a5;
      v64 = a2 + v61 + -8 * a5;
      v65 = a2 + v61 + 8 * a5;
      v66 = a2 + v61 + 4 * (a5 + 1);
      v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
      *(float *)&a7 = *v13;
      v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
      v69 = v63 + a2 + 4;
      do
      {
        v70.i32[0] = *(_DWORD *)(result + v42);
        v70.i32[1] = *(_DWORD *)(v66 + v42);
        v71.i32[0] = *(_DWORD *)(v64 + v42);
        v71.i32[1] = *(_DWORD *)(v69 + v42);
        a3[v42 / 8] = vmla_f32(vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v62 + v42), v70), v40), v68, v15[v42 / 8]), v67, vadd_f32(v71, *(float32x2_t *)(v65 + v42)));
        v26 += 2;
        v42 += 8;
      }
      while (v26 <= (v16 - 2));
    }
    v15 = (float32x2_t *)((char *)v15 + v42);
    goto LABEL_72;
  }
  if (v8 == 3)
  {
    *(float *)&a7 = *v13;
    if (*v13 == 2.0 && v13[1] == 1.0)
    {
      if ((int)v16 >= 2)
      {
        v26 = 0;
        result = -4 * a5;
        do
        {
          v47.i32[0] = v15->i32[a5];
          v47.i32[1] = v15->i32[a5 + 1];
          *(float32x2_t *)((char *)a3 + 4 * v26) = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v15 - 4 * a5), (float32x2_t)0x4000000040000000, *v15), v47);
          v26 += 2;
          ++v15;
        }
        while (v26 <= (v16 - 2));
        goto LABEL_72;
      }
    }
    else
    {
      v57 = v13[1];
      if (*(float *)&a7 == -2.0 && v57 == 1.0)
      {
        if ((int)v16 >= 2)
        {
          v26 = 0;
          result = -4 * a5;
          do
          {
            v82.i32[0] = v15->i32[a5];
            v82.i32[1] = v15->i32[a5 + 1];
            *(float32x2_t *)((char *)a3 + 4 * v26) = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v15 - 4 * a5), (float32x2_t)0xC0000000C0000000, *v15), v82);
            v26 += 2;
            ++v15;
          }
          while (v26 <= (v16 - 2));
          goto LABEL_72;
        }
      }
      else if ((int)v16 >= 2)
      {
        v26 = 0;
        v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
        result = -4 * a5;
        do
        {
          v60.i32[0] = v15->i32[a5];
          v60.i32[1] = v15->i32[a5 + 1];
          *(float32x2_t *)((char *)a3 + 4 * v26) = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)((char *)v15 - 4 * a5), v60), v57), v59, *v15);
          v26 += 2;
          ++v15;
        }
        while (v26 <= (v16 - 2));
        goto LABEL_72;
      }
    }
LABEL_69:
    LODWORD(v26) = 0;
    goto LABEL_72;
  }
  if (v8 != 1 || *v13 != 1.0)
    goto LABEL_69;
  if ((int)v16 >= 2)
  {
    v26 = 0;
    v79 = v15;
    v80 = a3;
    do
    {
      v81 = *v79++;
      *v80++ = v81;
      v26 += 2;
    }
    while (v26 <= (v16 - 2));
  }
  else
  {
    LODWORD(v26) = 0;
  }
  v15 = (float32x2_t *)((char *)v15 + 4 * v26);
LABEL_72:
  if ((int)v26 < (int)v16)
  {
    v83 = v26;
    v84 = v11 + 4 * v12 + 4;
    v85 = (v12 + 1) - 1;
    v86 = 4 * a5;
    do
    {
      v87 = *v13 * v15->f32[0];
      if (v8 >= 2)
      {
        v88 = -4 * a5;
        result = 4 * a5;
        v89 = v85;
        v90 = (float *)v84;
        do
        {
          v91 = *v90++;
          v87 = v87 + (float)(v91 * (float)(*(float *)((char *)v15->f32 + result) + *(float *)((char *)v15->f32 + v88)));
          result += v86;
          v88 -= v86;
          --v89;
        }
        while (v89);
      }
      a3->f32[v83++] = v87;
      v15 = (float32x2_t *)((char *)v15 + 4);
    }
    while (v83 != v16);
  }
  return result;
}

void cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE828;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

float32x4_t *cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::operator()(float32x4_t *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  float *v18;
  uint64_t v19;
  float v20;

  v5 = result->u32[2];
  v6 = (float *)result[2].i64[0];
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = (float32x4_t *)(a2 + 4 * a5);
    do
    {
      v10 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v8), *v6);
      if ((int)v5 >= 2)
      {
        result = v9;
        v11 = v5 - 1;
        v12 = v6 + 1;
        do
        {
          v13 = *v12++;
          v10 = vmlaq_n_f32(v10, *result, v13);
          result = (float32x4_t *)((char *)result + 4 * a5);
          --v11;
        }
        while (v11);
      }
      *(float32x4_t *)(a3 + 4 * v8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v14 = v8;
    v15 = 4 * a5;
    v16 = (float *)(a2 + v15 + 4 * v8);
    do
    {
      v17 = *v6 * *(float *)(a2 + 4 * v14);
      if ((int)v5 >= 2)
      {
        v18 = v16;
        v19 = v5 - 1;
        result = (float32x4_t *)(v6 + 1);
        do
        {
          v20 = result->f32[0];
          result = (float32x4_t *)((char *)result + 4);
          v17 = v17 + (float)(v20 * *v18);
          v18 = (float *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE850;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E07E48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE850;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<unsigned char,int,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE850;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int32x4_t a6)
{
  uint64_t v6;
  const float *v7;
  uint64_t v8;
  unint64_t v9;
  __int32 *v10;
  int32x4_t v11;
  __int32 *v12;
  uint64_t v13;
  const float *v14;
  int32x4_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v6 = *(unsigned int *)(result + 8);
  v7 = *(const float **)(result + 32);
  v8 = (a5 * a4);
  if ((int)v8 >= 4)
  {
    v9 = 0;
    v10 = (__int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v9);
      v11 = (int32x4_t)vld1q_dup_f32(v7);
      a6 = vmulq_s32(v11, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      if ((int)v6 >= 2)
      {
        v12 = v10;
        v13 = v6 - 1;
        v14 = v7 + 1;
        do
        {
          v11.i32[0] = *v12;
          v11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8));
          v15 = (int32x4_t)vld1q_dup_f32(v14++);
          a6 = vmlaq_s32(a6, v15, v11);
          v12 = (__int32 *)((char *)v12 + a5);
          --v13;
        }
        while (v13);
      }
      result = 4 * v9;
      *(int32x4_t *)(a3 + 4 * v9) = a6;
      v9 += 4;
      ++v10;
    }
    while (v9 <= (v8 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v8)
  {
    v9 = v9;
    do
    {
      v16 = *(_DWORD *)v7 * *(unsigned __int8 *)(a2 + v9);
      if ((int)v6 >= 2)
      {
        v17 = a2 + a5;
        result = v6 - 1;
        v18 = (int *)(v7 + 1);
        do
        {
          v19 = *v18++;
          v16 += v19 * *(unsigned __int8 *)(v17 + v9);
          v17 += a5;
          --result;
        }
        while (result);
      }
      *(_DWORD *)(a3 + 4 * v9++) = v16;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE890;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E0836C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE890;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<unsigned char,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE890;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, float32x4_t a6, float a7, float32x4_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int32 *v12;
  unsigned __int32 *v13;
  uint64_t v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  v8 = *(unsigned int *)(result + 8);
  v9 = *(float **)(result + 32);
  v10 = (a5 * a4);
  if ((int)v10 >= 4)
  {
    v11 = 0;
    v12 = (unsigned __int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v11);
      a7 = *v9;
      a6 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.f32))), *v9);
      if ((int)v8 >= 2)
      {
        v13 = v12;
        v14 = v8 - 1;
        v15 = v9 + 1;
        do
        {
          v16 = *v15++;
          a7 = v16;
          a8.i32[0] = *v13;
          a8 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a8.f32)));
          a6 = vmlaq_n_f32(a6, a8, v16);
          v13 = (unsigned __int32 *)((char *)v13 + a5);
          --v14;
        }
        while (v14);
      }
      result = 4 * v11;
      *(float32x4_t *)(a3 + 4 * v11) = a6;
      v11 += 4;
      ++v12;
    }
    while (v11 <= (v10 - 4));
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < (int)v10)
  {
    v11 = v11;
    do
    {
      LOBYTE(a7) = *(_BYTE *)(a2 + v11);
      a7 = (float)LODWORD(a7);
      v17 = *v9 * a7;
      if ((int)v8 >= 2)
      {
        v18 = a2 + a5;
        v19 = v8 - 1;
        result = (uint64_t)(v9 + 1);
        do
        {
          v20 = *(float *)result;
          result += 4;
          a7 = v20;
          a8.i8[0] = *(_BYTE *)(v18 + v11);
          a8.f32[0] = (float)a8.u32[0];
          v17 = v17 + (float)(v20 * a8.f32[0]);
          v18 += a5;
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v11++) = v17;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE8D0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E088A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE8D0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<unsigned char,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE8D0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  _BYTE *v17;
  uint64_t v18;
  double *v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;

  v11 = *(unsigned int *)(result + 8);
  v12 = *(double **)(result + 32);
  v13 = (a5 * a4);
  if ((int)v13 >= 4)
  {
    v14 = 0;
    v15 = a2 + a5 + 3;
    do
    {
      LOBYTE(a6) = *(_BYTE *)(a2 + v14);
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOBYTE(a7) = *(_BYTE *)(a2 + v14 + 1);
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a8) = *(_BYTE *)(a2 + v14 + 2);
      a8 = *v12 * (double)*(unint64_t *)&a8;
      LOBYTE(a10) = *(_BYTE *)(a2 + v14 + 3);
      a10 = (double)*(unint64_t *)&a10;
      v16 = *v12 * a10;
      if ((int)v11 >= 2)
      {
        v17 = (_BYTE *)v15;
        v18 = v11 - 1;
        v19 = v12 + 1;
        do
        {
          v20 = *v19++;
          a10 = v20;
          LOBYTE(a11) = *(v17 - 3);
          *(double *)&v21 = (double)*(unint64_t *)&a11;
          a6 = a6 + v20 * *(double *)&v21;
          LOBYTE(v21) = *(v17 - 2);
          *(double *)&v22 = (double)v21;
          a7 = a7 + v20 * *(double *)&v22;
          LOBYTE(v22) = *(v17 - 1);
          *(double *)&v23 = (double)v22;
          a8 = a8 + v20 * *(double *)&v23;
          LOBYTE(v23) = *v17;
          a11 = (double)v23;
          v16 = v16 + v20 * a11;
          v17 += a5;
          --v18;
        }
        while (v18);
      }
      *(double *)(a3 + 8 * v14) = a6;
      *(double *)(a3 + ((8 * v14) | 8)) = a7;
      *(double *)(a3 + ((8 * v14) | 0x10)) = a8;
      result = (8 * v14) | 0x18;
      *(double *)(a3 + result) = v16;
      v14 += 4;
      v15 += 4;
    }
    while (v14 <= (v13 - 4));
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((int)v14 < (int)v13)
  {
    v14 = v14;
    do
    {
      LOBYTE(a7) = *(_BYTE *)(a2 + v14);
      a7 = (double)*(unint64_t *)&a7;
      v24 = *v12 * a7;
      if ((int)v11 >= 2)
      {
        v25 = a2 + a5;
        v26 = v11 - 1;
        result = (uint64_t)(v12 + 1);
        do
        {
          v27 = *(double *)result;
          result += 8;
          a7 = v27;
          LOBYTE(a8) = *(_BYTE *)(v25 + v14);
          a8 = (double)*(unint64_t *)&a8;
          v24 = v24 + v27 * a8;
          v25 += a5;
          --v26;
        }
        while (v26);
      }
      *(double *)(a3 + 8 * v14++) = v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned short,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE910;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E08E28(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE910;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<unsigned short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE910;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

float *cv::RowFilter<unsigned short,float,cv::RowNoVec>::operator()(float *result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  uint16x4_t *v12;
  float32x4_t v13;
  uint16x4_t *v14;
  float *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  float v20;
  unsigned __int16 *v21;
  uint64_t v22;
  float v23;

  v8 = *((unsigned int *)result + 2);
  v9 = (float *)*((_QWORD *)result + 4);
  v10 = (a5 * a4);
  if ((int)v10 >= 4)
  {
    v11 = 0;
    v12 = (uint16x4_t *)(a2 + 2 * a5);
    do
    {
      a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(a2 + 2 * v11)));
      v13 = vmulq_n_f32(a7, *v9);
      if ((int)v8 >= 2)
      {
        v14 = v12;
        result = (float *)(v8 - 1);
        v15 = v9 + 1;
        do
        {
          v16 = *v15++;
          a7.i16[1] = HIWORD(v16);
          a8 = vcvtq_f32_u32(vmovl_u16(*v14));
          v13 = vmlaq_n_f32(v13, a8, v16);
          v14 = (uint16x4_t *)((char *)v14 + 2 * a5);
          result = (float *)((char *)result - 1);
        }
        while (result);
      }
      *(float32x4_t *)(a3 + 4 * v11) = v13;
      v11 += 4;
      ++v12;
    }
    while (v11 <= (v10 - 4));
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < (int)v10)
  {
    v17 = v11;
    v18 = 2 * a5;
    v19 = (unsigned __int16 *)(a2 + v18 + 2 * v11);
    do
    {
      a7.i16[0] = *(_WORD *)(a2 + 2 * v17);
      a7.f32[0] = (float)a7.u32[0];
      v20 = *v9 * a7.f32[0];
      if ((int)v8 >= 2)
      {
        v21 = v19;
        v22 = v8 - 1;
        result = v9 + 1;
        do
        {
          v23 = *result++;
          a7.i16[1] = HIWORD(v23);
          a8.i16[0] = *v21;
          a8.f32[0] = (float)a8.u32[0];
          v20 = v20 + (float)(v23 * a8.f32[0]);
          v21 = (unsigned __int16 *)((char *)v21 + v18);
          --v22;
        }
        while (v22);
      }
      *(float *)(a3 + 4 * v17++) = v20;
      ++v19;
    }
    while (v17 != v10);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE950;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E09360(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE950;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<unsigned short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE950;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _WORD *v16;
  double v17;
  _WORD *v18;
  uint64_t v19;
  double *v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  double v28;
  _WORD *v29;
  uint64_t v30;
  double v31;

  v11 = *(unsigned int *)(result + 8);
  v12 = *(double **)(result + 32);
  v13 = (a5 * a4);
  if ((int)v13 >= 4)
  {
    v14 = 0;
    v15 = a2 + 2 * a5 + 4;
    do
    {
      v16 = (_WORD *)(a2 + 2 * v14);
      LOWORD(a6) = *v16;
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOWORD(a7) = v16[1];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOWORD(a8) = v16[2];
      a8 = *v12 * (double)*(unint64_t *)&a8;
      LOWORD(a10) = v16[3];
      a10 = (double)*(unint64_t *)&a10;
      v17 = *v12 * a10;
      if ((int)v11 >= 2)
      {
        v18 = (_WORD *)v15;
        v19 = v11 - 1;
        v20 = v12 + 1;
        do
        {
          v21 = *v20++;
          a10 = v21;
          LOWORD(a11) = *(v18 - 2);
          *(double *)&v22 = (double)*(unint64_t *)&a11;
          a6 = a6 + v21 * *(double *)&v22;
          LOWORD(v22) = *(v18 - 1);
          *(double *)&v23 = (double)v22;
          a7 = a7 + v21 * *(double *)&v23;
          LOWORD(v23) = *v18;
          *(double *)&v24 = (double)v23;
          a8 = a8 + v21 * *(double *)&v24;
          LOWORD(v24) = v18[1];
          a11 = (double)v24;
          v17 = v17 + v21 * a11;
          v18 += a5;
          --v19;
        }
        while (v19);
      }
      *(double *)(a3 + 8 * v14) = a6;
      *(double *)(a3 + ((8 * v14) | 8)) = a7;
      result = (8 * v14) | 0x10;
      *(double *)(a3 + result) = a8;
      *(double *)(a3 + ((8 * v14) | 0x18)) = v17;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= (v13 - 4));
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((int)v14 < (int)v13)
  {
    v25 = v14;
    v26 = 2 * a5;
    v27 = (_WORD *)(a2 + v26 + 2 * v14);
    do
    {
      LOWORD(a7) = *(_WORD *)(a2 + 2 * v25);
      a7 = (double)*(unint64_t *)&a7;
      v28 = *v12 * a7;
      if ((int)v11 >= 2)
      {
        v29 = v27;
        v30 = v11 - 1;
        result = (uint64_t)(v12 + 1);
        do
        {
          v31 = *(double *)result;
          result += 8;
          a7 = v31;
          LOWORD(a8) = *v29;
          a8 = (double)*(unint64_t *)&a8;
          v28 = v28 + v31 * a8;
          v29 = (_WORD *)((char *)v29 + v26);
          --v30;
        }
        while (v30);
      }
      *(double *)(a3 + 8 * v25++) = v28;
      ++v27;
    }
    while (v25 != v13);
  }
  return result;
}

uint64_t cv::RowFilter<short,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE990;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E098F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE990;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE990;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

float *cv::RowFilter<short,float,cv::RowNoVec>::operator()(float *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  int16x4_t *v9;
  float32x4_t v10;
  int16x4_t *v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  float v17;
  __int16 *v18;
  uint64_t v19;
  float v20;

  v5 = *((unsigned int *)result + 2);
  v6 = (float *)*((_QWORD *)result + 4);
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = (int16x4_t *)(a2 + 2 * a5);
    do
    {
      v10 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a2 + 2 * v8))), *v6);
      if ((int)v5 >= 2)
      {
        v11 = v9;
        result = (float *)(v5 - 1);
        v12 = v6 + 1;
        do
        {
          v13 = *v12++;
          v10 = vmlaq_n_f32(v10, vcvtq_f32_s32(vmovl_s16(*v11)), v13);
          v11 = (int16x4_t *)((char *)v11 + 2 * a5);
          result = (float *)((char *)result - 1);
        }
        while (result);
      }
      *(float32x4_t *)(a3 + 4 * v8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v14 = v8;
    v15 = 2 * a5;
    v16 = (__int16 *)(a2 + v15 + 2 * v8);
    do
    {
      v17 = *v6 * (float)*(__int16 *)(a2 + 2 * v14);
      if ((int)v5 >= 2)
      {
        v18 = v16;
        v19 = v5 - 1;
        result = v6 + 1;
        do
        {
          v20 = *result++;
          v17 = v17 + (float)(v20 * (float)*v18);
          v18 = (__int16 *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEE9D0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E09E2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE9D0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEE9D0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int16 *v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  double v22;
  __int16 *v23;
  uint64_t v24;
  double v25;

  v5 = *(unsigned int *)(result + 8);
  v6 = *(double **)(result + 32);
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = a2 + 2 * a5 + 4;
    do
    {
      v10 = (__int16 *)(a2 + 2 * v8);
      v11 = *v6 * (double)*v10;
      v12 = *v6 * (double)v10[1];
      v13 = *v6 * (double)v10[2];
      v14 = *v6 * (double)v10[3];
      if ((int)v5 >= 2)
      {
        v15 = (__int16 *)v9;
        v16 = v5 - 1;
        v17 = v6 + 1;
        do
        {
          v18 = *v17++;
          v11 = v11 + v18 * (double)*(v15 - 2);
          v12 = v12 + v18 * (double)*(v15 - 1);
          v13 = v13 + v18 * (double)*v15;
          v14 = v14 + v18 * (double)v15[1];
          v15 += a5;
          --v16;
        }
        while (v16);
      }
      *(double *)(a3 + 8 * v8) = v11;
      *(double *)(a3 + ((8 * v8) | 8)) = v12;
      result = (8 * v8) | 0x10;
      *(double *)(a3 + result) = v13;
      *(double *)(a3 + ((8 * v8) | 0x18)) = v14;
      v8 += 4;
      v9 += 8;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v19 = v8;
    v20 = 2 * a5;
    v21 = (__int16 *)(a2 + v20 + 2 * v8);
    do
    {
      v22 = *v6 * (double)*(__int16 *)(a2 + 2 * v19);
      if ((int)v5 >= 2)
      {
        v23 = v21;
        v24 = v5 - 1;
        result = (uint64_t)(v6 + 1);
        do
        {
          v25 = *(double *)result;
          result += 8;
          v22 = v22 + v25 * (double)*v23;
          v23 = (__int16 *)((char *)v23 + v20);
          --v24;
        }
        while (v24);
      }
      *(double *)(a3 + 8 * v19++) = v22;
      ++v21;
    }
    while (v19 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<float,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEA10;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E0A3C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<float,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

float32x4_t *cv::RowFilter<float,float,cv::RowNoVec>::operator()(float32x4_t *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  float *v18;
  uint64_t v19;
  float v20;

  v5 = result->u32[2];
  v6 = (float *)result[2].i64[0];
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = (float32x4_t *)(a2 + 4 * a5);
    do
    {
      v10 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v8), *v6);
      if ((int)v5 >= 2)
      {
        result = v9;
        v11 = v5 - 1;
        v12 = v6 + 1;
        do
        {
          v13 = *v12++;
          v10 = vmlaq_n_f32(v10, *result, v13);
          result = (float32x4_t *)((char *)result + 4 * a5);
          --v11;
        }
        while (v11);
      }
      *(float32x4_t *)(a3 + 4 * v8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v14 = v8;
    v15 = 4 * a5;
    v16 = (float *)(a2 + v15 + 4 * v8);
    do
    {
      v17 = *v6 * *(float *)(a2 + 4 * v14);
      if ((int)v5 >= 2)
      {
        v18 = v16;
        v19 = v5 - 1;
        result = (float32x4_t *)(v6 + 1);
        do
        {
          v20 = result->f32[0];
          result = (float32x4_t *)((char *)result + 4);
          v17 = v17 + (float)(v20 * *v18);
          v18 = (float *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<float,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEA50;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E0A8DC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA50;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<float,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA50;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

double *cv::RowFilter<float,double,cv::RowNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x2_t *v13;
  const double *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  double v19;
  float *v20;
  uint64_t v21;
  double v22;

  v5 = *((unsigned int *)result + 2);
  v6 = (double *)*((_QWORD *)result + 4);
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = a2 + 4 * a5 + 8;
    do
    {
      v10 = (float32x2_t *)(a2 + 4 * v8);
      v11 = vmulq_n_f64(vcvtq_f64_f32(*v10), *v6);
      v12 = vmulq_n_f64(vcvtq_f64_f32(v10[1]), *v6);
      if ((int)v5 >= 2)
      {
        v13 = (float32x2_t *)v9;
        result = (double *)(v5 - 1);
        v14 = v6 + 1;
        do
        {
          v15 = vld1q_dup_f64(v14++);
          v11 = vmlaq_f64(v11, vcvtq_f64_f32(v13[-1]), v15);
          v12 = vmlaq_f64(v12, vcvtq_f64_f32(*v13), v15);
          v13 = (float32x2_t *)((char *)v13 + 4 * a5);
          result = (double *)((char *)result - 1);
        }
        while (result);
      }
      *(float64x2_t *)(a3 + 8 * v8) = v11;
      *(float64x2_t *)(a3 + ((8 * v8) | 0x10)) = v12;
      v8 += 4;
      v9 += 16;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v16 = v8;
    v17 = 4 * a5;
    v18 = (float *)(a2 + v17 + 4 * v8);
    do
    {
      v19 = *v6 * *(float *)(a2 + 4 * v16);
      if ((int)v5 >= 2)
      {
        v20 = v18;
        v21 = v5 - 1;
        result = v6 + 1;
        do
        {
          v22 = *result++;
          v19 = v19 + v22 * *v20;
          v20 = (float *)((char *)v20 + v17);
          --v21;
        }
        while (v21);
      }
      *(double *)(a3 + 8 * v16++) = v19;
      ++v18;
    }
    while (v16 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<double,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  cv::Mat *v6;
  int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEA90;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2)
      goto LABEL_20;
    v8 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(unsigned int **)(a1 + 40);
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *v7;
      }
      while (v13 < v15);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v15 > 2)
        goto LABEL_18;
    }
    v16 = *((_DWORD *)a2 + 1);
    if (v16 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v16;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v17 = (_QWORD *)*((_QWORD *)a2 + 9);
      v18 = *(_QWORD **)(a1 + 88);
      *v18 = *v17;
      v18[1] = v17[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v6, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_20:
  v20 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v20 + v19 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v20 != 1 && v19 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2262);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_219E0AE2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<double,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::RowFilter<double,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEA90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

double *cv::RowFilter<double,double,cv::RowNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  const double *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double *v20;
  uint64_t v21;
  double v22;

  v5 = *((unsigned int *)result + 2);
  v6 = (double *)*((_QWORD *)result + 4);
  v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    v8 = 0;
    v9 = a2 + 8 * a5 + 16;
    do
    {
      v10 = (float64x2_t *)(a2 + 8 * v8);
      v11 = vmulq_n_f64(*v10, *v6);
      v12 = vmulq_n_f64(v10[1], *v6);
      if ((int)v5 >= 2)
      {
        v13 = (float64x2_t *)v9;
        result = (double *)(v5 - 1);
        v14 = v6 + 1;
        do
        {
          v15 = vld1q_dup_f64(v14++);
          v11 = vmlaq_f64(v11, v13[-1], v15);
          v12 = vmlaq_f64(v12, *v13, v15);
          v13 = (float64x2_t *)((char *)v13 + 8 * a5);
          result = (double *)((char *)result - 1);
        }
        while (result);
      }
      *(float64x2_t *)(a3 + 8 * v8) = v11;
      *(float64x2_t *)(a3 + ((8 * v8) | 0x10)) = v12;
      v8 += 4;
      v9 += 32;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    v16 = v8;
    v17 = 8 * a5;
    v18 = (double *)(a2 + v17 + 8 * v8);
    do
    {
      v19 = *v6 * *(double *)(a2 + 8 * v16);
      if ((int)v5 >= 2)
      {
        v20 = v18;
        v21 = v5 - 1;
        result = v6 + 1;
        do
        {
          v22 = *result++;
          v19 = v19 + v22 * *v20;
          v20 = (double *)((char *)v20 + v17);
          --v21;
        }
        while (v21);
      }
      *(double *)(a3 + 8 * v16++) = v19;
      ++v18;
    }
    while (v16 != v7);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, _QWORD *a4, double a5)
{
  cv::Mat *v10;
  int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  const cv::Exception *v25;
  void *__p[2];
  void *v28[2];
  void *v29[2];
  _BYTE v30[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v10 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)a1 = &off_24DBEEAD0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v11 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v10 == a2)
      goto LABEL_20;
    v12 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(unsigned int **)(a1 + 40);
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v11;
      }
      while (v17 < v19);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v19 > 2)
        goto LABEL_18;
    }
    v20 = *((_DWORD *)a2 + 1);
    if (v20 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v20;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v21 = (_QWORD *)*((_QWORD *)a2 + 9);
      v22 = *(_QWORD **)(a1 + 88);
      *v22 = *v21;
      v22[1] = v21[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v10, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v30, v10);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v30);
LABEL_20:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 124) = (uint64_t)rint(a5);
  *(_QWORD *)(a1 + 112) = *a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v24 != 1 && v23 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v28, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 2460);
    cv::error((cv *)v30, v25);
  }
  return a1;
}

void sub_219E0B390(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, _QWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  const float *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t i;
  const float *v20;
  int32x4_t v21;
  int16x8_t v22;
  unsigned int v23;
  uint64_t j;

  if (a5)
  {
    v6 = *(const float **)(result + 32);
    v7 = *(_DWORD *)(result + 124);
    v8 = *(_DWORD *)(result + 112);
    v9 = *(_DWORD *)(result + 116);
    v10 = *(unsigned int *)(result + 8);
    v11 = a4;
    v12 = vdupq_n_s32(v7);
    v13 = vdupq_n_s32(v9);
    v14 = vnegq_s32(vdupq_n_s32(v8));
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v16 = 0;
        do
        {
          result = 4 * v16;
          v17 = (int32x4_t)vld1q_dup_f32(v6);
          v18 = vmlaq_s32(v12, *(int32x4_t *)(*a2 + 4 * v16), v17);
          if ((int)v10 >= 2)
          {
            for (i = 1; i != v10; ++i)
            {
              v20 = &v6[i];
              v21 = (int32x4_t)vld1q_dup_f32(v20);
              v18 = vmlaq_s32(v18, *(int32x4_t *)(a2[i] + 4 * v16), v21);
            }
          }
          v22 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v18, v13), v14), (int32x4_t)0), v15);
          *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
          *(_DWORD *)(a3 + v16) = vmovn_s16(v22).u32[0];
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        v16 = v16;
      }
      else
      {
        v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          v23 = v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6;
          if ((int)v10 >= 2)
          {
            for (j = 1; j != v10; ++j)
              v23 += *(_DWORD *)(a2[j] + 4 * v16) * LODWORD(v6[j]);
          }
          LODWORD(result) = ((int)(v23 + v9) >> v8) & ~((int)(v23 + v9) >> v8 >> 31);
          if ((int)result >= 255)
            result = 255;
          else
            result = result;
          *(_BYTE *)(a3 + v16++) = result;
        }
        while (v16 != a6);
      }
      a3 += v11;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  float v23;
  const cv::Exception *v24;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEB18;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v29, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v29);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v23 = a4;
  *(float *)(a1 + 116) = v23;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v27, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v29, 4294967081, v28, v27, __p, 2460);
    cv::error((cv *)v29, v24);
  }
  return a1;
}

void sub_219E0B9AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB18;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB18;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB18;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, _QWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  uint64_t v8;
  int32x4_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t i;
  float *v17;
  float v18;
  int32x4_t v19;
  int16x8_t v20;
  float v21;
  uint64_t j;
  double v23;
  int v24;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v10 = 0;
        do
        {
          v11 = (float *)(*a2 + 4 * v10);
          v12 = v7 + (float)(*v6 * *v11);
          v13 = v7 + (float)(*v6 * v11[1]);
          v14 = v7 + (float)(*v6 * v11[2]);
          v15 = v7 + (float)(*v6 * v11[3]);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
            {
              v17 = (float *)(a2[i] + 4 * v10);
              v18 = v6[i];
              v12 = v12 + (float)(v18 * *v17);
              v13 = v13 + (float)(v18 * v17[1]);
              v14 = v14 + (float)(v18 * v17[2]);
              v15 = v15 + (float)(v18 * v17[3]);
            }
          }
          result = (uint64_t)rint(v15);
          v19.i32[0] = (uint64_t)rint(v12);
          v19.i32[1] = (uint64_t)rint(v13);
          v19.i32[2] = (uint64_t)rint(v14);
          v19.i32[3] = result;
          v20 = (int16x8_t)vminq_s32(vmaxq_s32(v19, (int32x4_t)0), v9);
          *(int16x4_t *)v20.i8 = vmovn_s32((int32x4_t)v20);
          *(_DWORD *)(a3 + v10) = vmovn_s16(v20).u32[0];
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < a6)
      {
        do
        {
          v21 = v7 + (float)(*v6 * *(float *)(*a2 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v21 = v21 + (float)(v6[j] * *(float *)(a2[j] + 4 * v10));
          }
          v23 = rint(v21);
          v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          *(_BYTE *)(a3 + v10++) = v24;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEB60;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E0C008(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB60;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB60;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB60;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, _QWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  int32x4_t v21;
  int16x8_t v22;
  double v23;
  uint64_t v24;
  double v25;
  int v26;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(double *)(result + 120);
    v8 = *(unsigned int *)(result + 8);
    v9 = 8 * v8;
    v10.i64[0] = 0xFF000000FFLL;
    v10.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        do
        {
          v12 = (double *)(*a2 + 8 * v11);
          v13 = v7 + *v6 * *v12;
          v14 = v7 + *v6 * v12[1];
          v15 = v7 + *v6 * v12[2];
          v16 = v7 + *v6 * v12[3];
          if ((int)v8 >= 2)
          {
            v17 = 8;
            do
            {
              v18 = (double *)(a2[(unint64_t)v17 / 8] + 8 * v11);
              v19 = v6[(unint64_t)v17 / 8];
              v13 = v13 + v19 * *v18;
              v14 = v14 + v19 * v18[1];
              v15 = v15 + v19 * v18[2];
              v16 = v16 + v19 * v18[3];
              v17 += 8;
            }
            while (v9 != v17);
          }
          v20 = (uint64_t)rint(v14);
          result = (uint64_t)rint(v15);
          v21.i32[0] = (uint64_t)rint(v13);
          v21.i32[1] = v20;
          v21.i64[1] = __PAIR64__((uint64_t)rint(v16), result);
          v22 = (int16x8_t)vminq_s32(vmaxq_s32(v21, (int32x4_t)0), v10);
          *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
          *(_DWORD *)(a3 + v11) = vmovn_s16(v22).u32[0];
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        do
        {
          v23 = v7 + *v6 * *(double *)(*a2 + 8 * v11);
          if ((int)v8 >= 2)
          {
            v24 = 8;
            do
            {
              v23 = v23 + v6[(unint64_t)v24 / 8] * *(double *)(a2[(unint64_t)v24 / 8] + 8 * v11);
              v24 += 8;
            }
            while (v9 != v24);
          }
          v25 = rint(v23);
          v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          *(_BYTE *)(a3 + v11++) = v26;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  float v23;
  const cv::Exception *v24;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEBA8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v29, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v29);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v23 = a4;
  *(float *)(a1 + 116) = v23;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v27, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v29, 4294967081, v28, v27, __p, 2460);
    cv::error((cv *)v29, v24);
  }
  return a1;
}

void sub_219E0C658(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBA8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBA8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBA8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t i;
  float *v20;
  float v21;
  uint64_t v22;
  int32x4_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t j;
  double v28;
  int v29;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9 = a4;
    v10.i64[0] = 0xFFFF0000FFFFLL;
    v10.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *v6;
        v13 = *a2;
        do
        {
          v14 = (float *)(v13 + 4 * v11);
          v15 = v7 + (float)(v12 * *v14);
          v16 = v7 + (float)(v12 * v14[1]);
          v17 = v7 + (float)(v12 * v14[2]);
          v18 = v7 + (float)(v12 * v14[3]);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
            {
              v20 = (float *)(a2[i] + 4 * v11);
              v21 = v6[i];
              v15 = v15 + (float)(v21 * *v20);
              v16 = v16 + (float)(v21 * v20[1]);
              v17 = v17 + (float)(v21 * v20[2]);
              v18 = v18 + (float)(v21 * v20[3]);
            }
          }
          result = (uint64_t)rint(v17);
          v22 = (uint64_t)rint(v18);
          v23.i32[0] = (uint64_t)rint(v15);
          v23.i32[1] = (uint64_t)rint(v16);
          v23.i64[1] = __PAIR64__(v22, result);
          *(int16x4_t *)(a3 + 2 * v11) = vmovn_s32(vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v10));
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v24 = *v6;
        v25 = *a2;
        do
        {
          v26 = v7 + (float)(v24 * *(float *)(v25 + 4 * v11));
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v26 = v26 + (float)(v6[j] * *(float *)(a2[j] + 4 * v11));
          }
          v28 = rint(v26);
          v29 = (uint64_t)v28 & ~((int)(uint64_t)v28 >> 31);
          if (v29 >= 0xFFFF)
            LOWORD(v29) = -1;
          *(_WORD *)(a3 + 2 * v11++) = v29;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEBF0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E0CCB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBF0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBF0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBF0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  int32x4_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  int v28;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(double *)(result + 120);
    v8 = *(unsigned int *)(result + 8);
    v9 = 8 * v8;
    v10.i64[0] = 0xFFFF0000FFFFLL;
    v10.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *v6;
        v13 = *a2;
        do
        {
          v14 = (double *)(v13 + 8 * v11);
          v15 = v7 + v12 * *v14;
          v16 = v7 + v12 * v14[1];
          v17 = v7 + v12 * v14[2];
          v18 = v7 + v12 * v14[3];
          if ((int)v8 >= 2)
          {
            v19 = 8;
            do
            {
              v20 = (double *)(a2[(unint64_t)v19 / 8] + 8 * v11);
              v21 = v6[(unint64_t)v19 / 8];
              v15 = v15 + v21 * *v20;
              v16 = v16 + v21 * v20[1];
              v17 = v17 + v21 * v20[2];
              v18 = v18 + v21 * v20[3];
              v19 += 8;
            }
            while (v9 != v19);
          }
          result = (uint64_t)rint(v16);
          v22.i32[0] = (uint64_t)rint(v15);
          v22.i32[1] = result;
          v22.i64[1] = __PAIR64__((uint64_t)rint(v18), (uint64_t)rint(v17));
          *(int16x4_t *)(a3 + 2 * v11) = vmovn_s32(vminq_s32(vmaxq_s32(v22, (int32x4_t)0), v10));
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v23 = *v6;
        v24 = *a2;
        do
        {
          v25 = v7 + v23 * *(double *)(v24 + 8 * v11);
          if ((int)v8 >= 2)
          {
            v26 = 8;
            do
            {
              result = a2[(unint64_t)v26 / 8];
              v25 = v25 + v6[(unint64_t)v26 / 8] * *(double *)(result + 8 * v11);
              v26 += 8;
            }
            while (v9 != v26);
          }
          v27 = rint(v25);
          v28 = (uint64_t)v27 & ~((int)(uint64_t)v27 >> 31);
          if (v28 >= 0xFFFF)
            LOWORD(v28) = -1;
          *(_WORD *)(a3 + 2 * v11++) = v28;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  float v23;
  const cv::Exception *v24;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEC38;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v29, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v29);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v23 = a4;
  *(float *)(a1 + 116) = v23;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v27, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v29, 4294967081, v28, v27, __p, 2460);
    cv::error((cv *)v29, v24);
  }
  return a1;
}

void sub_219E0D304(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC38;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC38;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC38;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t i;
  float *v18;
  float v19;
  uint64_t v20;
  int32x4_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t j;
  uint64_t v26;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    do
    {
      if (a6 >= 4)
      {
        v9 = 0;
        v10 = *v6;
        v11 = *a2;
        do
        {
          v12 = (float *)(v11 + 4 * v9);
          v13 = v7 + (float)(v10 * *v12);
          v14 = v7 + (float)(v10 * v12[1]);
          v15 = v7 + (float)(v10 * v12[2]);
          v16 = v7 + (float)(v10 * v12[3]);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
            {
              v18 = (float *)(a2[i] + 4 * v9);
              v19 = v6[i];
              v13 = v13 + (float)(v19 * *v18);
              v14 = v14 + (float)(v19 * v18[1]);
              v15 = v15 + (float)(v19 * v18[2]);
              v16 = v16 + (float)(v19 * v18[3]);
            }
          }
          result = (uint64_t)rint(v14);
          v20 = (uint64_t)rint(v16);
          v21.i32[0] = (uint64_t)rint(v13);
          v21.i32[1] = result;
          v21.i32[2] = (uint64_t)rint(v15);
          v21.i32[3] = v20;
          *(int16x4_t *)(a3 + 2 * v9) = vqmovn_s32(v21);
          v9 += 4;
        }
        while (v9 <= a6 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < a6)
      {
        v22 = *v6;
        v23 = *a2;
        do
        {
          v24 = v7 + (float)(v22 * *(float *)(v23 + 4 * v9));
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
            {
              result = a2[j];
              v24 = v24 + (float)(v6[j] * *(float *)(result + 4 * v9));
            }
          }
          v26 = (uint64_t)rint(v24);
          if ((int)v26 <= -32768)
            LODWORD(v26) = -32768;
          if ((int)v26 >= 0x7FFF)
            LOWORD(v26) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v9++) = v26;
        }
        while (v9 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEC80;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E0D958(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC80;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC80;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC80;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  int32x4_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(double *)(result + 120);
    v8 = a4;
    v9 = *(unsigned int *)(result + 8);
    v10 = 8 * v9;
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *v6;
        v13 = *a2;
        do
        {
          v14 = (double *)(v13 + 8 * v11);
          v15 = v7 + v12 * *v14;
          v16 = v7 + v12 * v14[1];
          v17 = v7 + v12 * v14[2];
          v18 = v7 + v12 * v14[3];
          if ((int)v9 >= 2)
          {
            v19 = 8;
            do
            {
              v20 = (double *)(a2[(unint64_t)v19 / 8] + 8 * v11);
              v21 = v6[(unint64_t)v19 / 8];
              v15 = v15 + v21 * *v20;
              v16 = v16 + v21 * v20[1];
              v17 = v17 + v21 * v20[2];
              v18 = v18 + v21 * v20[3];
              v19 += 8;
            }
            while (v10 != v19);
          }
          v22 = (uint64_t)rint(v16);
          v23.i32[0] = (uint64_t)rint(v15);
          v23.i32[1] = v22;
          v23.i64[1] = __PAIR64__((uint64_t)rint(v18), (uint64_t)rint(v17));
          result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v23);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v24 = *v6;
        v25 = *a2;
        do
        {
          v26 = v7 + v24 * *(double *)(v25 + 8 * v11);
          if ((int)v9 >= 2)
          {
            v27 = 8;
            do
            {
              v26 = v26 + v6[(unint64_t)v27 / 8] * *(double *)(a2[(unint64_t)v27 / 8] + 8 * v11);
              v27 += 8;
            }
            while (v10 != v27);
          }
          result = (uint64_t)rint(v26);
          if ((int)result <= -32768)
            LODWORD(result) = -32768;
          if ((int)result >= 0x7FFF)
            result = 0x7FFFLL;
          else
            result = result;
          *(_WORD *)(a3 + 2 * v11++) = result;
        }
        while (v11 != a6);
      }
      a3 += v8;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  float v23;
  const cv::Exception *v24;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEECC8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v29, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v29);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v23 = a4;
  *(float *)(a1 + 116) = v23;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v27, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v29, 4294967081, v28, v27, __p, 2460);
    cv::error((cv *)v29, v24);
  }
  return a1;
}

void sub_219E0DFA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEECC8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEECC8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEECC8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  float *v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint64_t i;
  uint64_t v14;
  float v15;
  uint64_t j;

  if (a5)
  {
    v7 = *(float **)(result + 32);
    LODWORD(a7) = *(_DWORD *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    do
    {
      if (a6 >= 4)
      {
        v10 = 0;
        v11 = *a2;
        do
        {
          v12 = vmlaq_n_f32(v9, *(float32x4_t *)(v11 + 4 * v10), *v7);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
              v12 = vmlaq_n_f32(v12, *(float32x4_t *)(a2[i] + 4 * v10), v7[i]);
          }
          *(float32x4_t *)(a3 + 4 * v10) = v12;
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < a6)
      {
        v14 = *a2;
        do
        {
          v15 = *(float *)&a7 + (float)(*v7 * *(float *)(v14 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v15 = v15 + (float)(v7[j] * *(float *)(a2[j] + 4 * v10));
          }
          *(float *)(a3 + 4 * v10++) = v15;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEED10;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E0E56C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEED10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEED10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEED10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(uint64_t *)(result + 120);
    v8 = *(unsigned int *)(result + 8);
    v9 = (float64x2_t)vdupq_lane_s64(v7, 0);
    v10 = 8 * v8;
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *a2;
        do
        {
          v13 = v12 + 8 * v11;
          v14 = *(double *)&v7 + *v6 * *(double *)v13;
          v15 = vmlaq_n_f64(v9, *(float64x2_t *)(v13 + 8), *v6);
          v16 = *(double *)&v7 + *v6 * *(double *)(v13 + 24);
          if ((int)v8 >= 2)
          {
            v17 = 8;
            do
            {
              v18 = a2[(unint64_t)v17 / 8] + 8 * v11;
              v19 = v6[(unint64_t)v17 / 8];
              v14 = v14 + v19 * *(double *)v18;
              v15 = vmlaq_n_f64(v15, *(float64x2_t *)(v18 + 8), v19);
              v16 = v16 + v19 * *(double *)(v18 + 24);
              v17 += 8;
            }
            while (v10 != v17);
          }
          *(double *)(a3 + 8 * v11) = v14;
          *(float64x2_t *)(a3 + ((8 * v11) | 8)) = v15;
          *(double *)(a3 + ((8 * v11) | 0x18)) = v16;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v20 = *a2;
        do
        {
          v21 = *(double *)&v7 + *v6 * *(double *)(v20 + 8 * v11);
          if ((int)v8 >= 2)
          {
            v22 = 8;
            do
            {
              v21 = v21 + v6[(unint64_t)v22 / 8] * *(double *)(a2[(unint64_t)v22 / 8] + 8 * v11);
              v22 += 8;
            }
            while (v10 != v22);
          }
          *(double *)(a3 + 8 * v11++) = v21;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, _QWORD *a5, double a6)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v7 = &off_24DBEED58;
  if (*(_DWORD *)(v7 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2629);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E0E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, _QWORD *a5, double a6)
{
  uint64_t v8;
  const cv::Exception *v9;
  void *__p[2];
  void *v12[2];
  void *v13[2];
  _BYTE v14[120];

  v8 = cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5, a6);
  *(_QWORD *)v8 = &off_24DBEEDB8;
  *(_DWORD *)(v8 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v12, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v14, 4294967081, v13, v12, __p, 2523);
    cv::error((cv *)v14, v9);
  }
  return a1;
}

void sub_219E0EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  signed int v11;
  _BOOL4 v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t **v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t *v26;
  int32x2_t *v27;
  int32x2_t *v28;
  int32x2_t *v29;
  int32x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  int32x2_t *v33;
  int32x2_t *v34;
  int32x2_t *v35;
  int32x2_t v36;
  _BYTE *v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int32x2_t *v47;
  int32x2_t *v48;
  int32x2_t *v49;
  int32x2_t v50;
  _BYTE *v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int v58;
  int v59;
  int32x2_t *v60;
  int32x2_t *v61;
  _BYTE *v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int v68;
  int v69;
  int32x2_t *v70;
  int32x2_t *v71;
  int32x2_t *v72;
  int32x2_t v73;
  _BYTE *v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int32x2_t *v86;
  int32x2_t *v87;
  int32x2_t *v88;
  _BYTE *v89;
  int32x2_t v90;
  int v91;
  unsigned int v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int32x2_t v96;
  int v97;
  int v98;
  int32x2_t *v99;
  int32x2_t *v100;
  _BYTE *v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int v107;
  int v108;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = (unsigned int *)(*(_QWORD *)(result + 32) + 4 * (v7 >> 1));
  v9 = *v8;
  if (*v8 == -2)
  {
    v12 = 0;
    v11 = v8[1];
    v10 = v11 == 1;
  }
  else if (v9 == 2)
  {
    v10 = 0;
    v11 = v8[1];
    v12 = v11 == 1;
  }
  else
  {
    v12 = 0;
    v10 = 0;
    v11 = v8[1];
  }
  if (v11 == 1 || v11 == -1)
  {
    if (v11 + *(v8 - 1))
      v14 = 0;
    else
      v14 = v9 == 0;
    v15 = v14;
    if (a5)
      goto LABEL_23;
  }
  else
  {
    v15 = 0;
    if (a5)
    {
LABEL_23:
      v16 = (uint64_t)v7 >> 1;
      v17 = *(_QWORD *)(result + 112);
      v18 = (int32x2_t **)(a2 + 8 * v16);
      v19 = *(_DWORD *)(result + 128);
      v20 = *(_DWORD *)(result + 124) + HIDWORD(v17);
      result = a4;
      v21 = a6 - 4;
      v22 = vdup_n_s32(v11);
      v23 = vdup_n_s32(v9);
      v24 = vdup_n_s32(v20);
      v25 = vneg_s32(vdup_n_s32(v17));
      do
      {
        v26 = *(v18 - 1);
        v27 = *v18;
        v29 = v18[1];
        ++v18;
        v28 = v29;
        if ((v19 & 1) != 0)
        {
          v32 = 0;
          if (!v12)
          {
            if (v10)
            {
              if (a6 >= 4)
              {
                v47 = v27 + 1;
                v48 = v26 + 1;
                v49 = v28 + 1;
                do
                {
                  v50 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(v24, v48[-1]), vadd_s32(v47[-1], v47[-1])), v49[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v51 = (_BYTE *)(a3 + v32);
                  v51[1] = v50.i8[4];
                  *v51 = v50.i8[0];
                  v52 = *v48;
                  v48 += 2;
                  v53 = v52;
                  v54 = *v47;
                  v47 += 2;
                  v55 = v54;
                  v56 = *v49;
                  v49 += 2;
                  v57 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(v24, v53), vadd_s32(v55, v55)), v56), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v51[3] = v57.i8[4];
                  v32 += 4;
                  v51[2] = v57.i8[0];
                }
                while (v32 <= v21);
                v32 = v32;
              }
              if ((int)v32 < a6)
              {
                do
                {
                  v58 = (int)(v20 + v26->i32[v32] - 2 * v27->i32[v32] + v28->i32[v32]) >> v17;
                  v59 = v58 & ~(v58 >> 31);
                  if (v59 >= 255)
                    LOBYTE(v59) = -1;
                  *(_BYTE *)(a3 + v32++) = v59;
                }
                while (a6 != v32);
                goto LABEL_95;
              }
            }
            else
            {
              if (a6 >= 4)
              {
                v70 = v28 + 1;
                v71 = v26 + 1;
                v72 = v27 + 1;
                do
                {
                  v73 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v72[-1], v23), vadd_s32(v70[-1], v71[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v74 = (_BYTE *)(a3 + v32);
                  v74[1] = v73.i8[4];
                  *v74 = v73.i8[0];
                  v75 = *v71;
                  v71 += 2;
                  v76 = v75;
                  v77 = *v70;
                  v70 += 2;
                  v78 = vadd_s32(v77, v76);
                  v79 = *v72;
                  v72 += 2;
                  v80 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v79, v23), v78, v22), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v74[3] = v80.i8[4];
                  v32 += 4;
                  v74[2] = v80.i8[0];
                }
                while (v32 <= v21);
                v32 = v32;
              }
              if ((int)v32 < a6)
              {
                do
                {
                  v81 = (int)(v20 + v27->i32[v32] * v9 + (v28->i32[v32] + v26->i32[v32]) * v11) >> v17;
                  v82 = v81 & ~(v81 >> 31);
                  if (v82 >= 255)
                    LOBYTE(v82) = -1;
                  *(_BYTE *)(a3 + v32++) = v82;
                }
                while (a6 != v32);
                goto LABEL_95;
              }
            }
LABEL_73:
            if ((int)v32 < a6)
            {
              do
              {
                v83 = (int)(v20 + v27->i32[v32] * v9 + (v28->i32[v32] + v26->i32[v32]) * v11) >> v17;
                v84 = v83 & ~(v83 >> 31);
                if (v84 >= 255)
                  LOBYTE(v84) = -1;
                *(_BYTE *)(a3 + v32++) = v84;
              }
              while (a6 != v32);
            }
            goto LABEL_95;
          }
          if (a6 >= 4)
          {
            v33 = v27 + 1;
            v34 = v26 + 1;
            v35 = v28 + 1;
            do
            {
              v36 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(v24, v34[-1]), vadd_s32(v33[-1], v33[-1])), v35[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
              v37 = (_BYTE *)(a3 + v32);
              v37[1] = v36.i8[4];
              *v37 = v36.i8[0];
              v38 = *v34;
              v34 += 2;
              v39 = v38;
              v40 = *v33;
              v33 += 2;
              v41 = vadd_s32(v40, v40);
              v42 = *v35;
              v35 += 2;
              v43 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(v24, v39), v41), v42), v25), 0), (int32x2_t)0xFF000000FFLL);
              v37[3] = v43.i8[4];
              v32 += 4;
              v37[2] = v43.i8[0];
            }
            while (v32 <= v21);
            v32 = v32;
          }
          if ((int)v32 >= a6)
            goto LABEL_73;
          do
          {
            v44 = (int)(v20 + v26->i32[v32] + 2 * v27->i32[v32] + v28->i32[v32]) >> v17;
            v45 = v44 & ~(v44 >> 31);
            if (v45 >= 255)
              LOBYTE(v45) = -1;
            *(_BYTE *)(a3 + v32++) = v45;
          }
          while (a6 != v32);
        }
        else if (v15)
        {
          if (v11 >= 0)
            v30 = v26;
          else
            v30 = v28;
          if (v11 >= 0)
            v26 = v28;
          if (a6 >= 4)
          {
            v31 = 0;
            v60 = v26 + 1;
            v61 = v30 + 1;
            do
            {
              v62 = (_BYTE *)(a3 + v31);
              v63 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(v24, v60[-1]), v61[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
              v62[1] = v63.i8[4];
              *v62 = v63.i8[0];
              v64 = *v60;
              v60 += 2;
              v65 = v64;
              v66 = *v61;
              v61 += 2;
              v67 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(v24, v65), v66), v25), 0), (int32x2_t)0xFF000000FFLL);
              v62[3] = v67.i8[4];
              v62[2] = v67.i8[0];
              v31 += 4;
            }
            while (v31 <= v21);
            v31 = v31;
          }
          else
          {
            v31 = 0;
          }
          if ((int)v31 < a6)
          {
            do
            {
              v68 = (int)(v20 + v26->i32[v31] - v30->i32[v31]) >> v17;
              v69 = v68 & ~(v68 >> 31);
              if (v69 >= 255)
                LOBYTE(v69) = -1;
              *(_BYTE *)(a3 + v31++) = v69;
            }
            while (a6 != v31);
          }
        }
        else if (*v8)
        {
          if (a6 >= 4)
          {
            v46 = 0;
            v86 = v27 + 1;
            v87 = v28 + 1;
            v88 = v26 + 1;
            do
            {
              v89 = (_BYTE *)(a3 + v46);
              v90 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v86[-1], v23), vsub_s32(v87[-1], v88[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v89[1] = v90.i8[4];
              *v89 = v90.i8[0];
              v91 = v86->i32[0];
              v86 += 2;
              v92 = v20 + v91 * v9;
              v93 = *v87;
              v87 += 2;
              v94 = v93;
              v95 = *v88;
              v88 += 2;
              v96 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vdup_n_s32(v92), vsub_s32(v94, v95), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v89[3] = v96.i8[4];
              v46 += 4;
              v89[2] = v96.i8[0];
            }
            while (v46 <= v21);
            v46 = v46;
          }
          else
          {
            v46 = 0;
          }
          if ((int)v46 < a6)
          {
            do
            {
              v97 = (int)(v20 + v27->i32[v46] * v9 + (v28->i32[v46] - v26->i32[v46]) * v11) >> v17;
              v98 = v97 & ~(v97 >> 31);
              if (v98 >= 255)
                LOBYTE(v98) = -1;
              *(_BYTE *)(a3 + v46++) = v98;
            }
            while (a6 != v46);
          }
        }
        else
        {
          if (a6 >= 4)
          {
            v85 = 0;
            v99 = v28 + 1;
            v100 = v26 + 1;
            do
            {
              v101 = (_BYTE *)(a3 + v85);
              v102 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(v24, vsub_s32(v99[-1], v100[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v101[1] = v102.i8[4];
              *v101 = v102.i8[0];
              v103 = *v99;
              v99 += 2;
              v104 = v103;
              v105 = *v100;
              v100 += 2;
              v106 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(v24, vsub_s32(v104, v105), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v101[3] = v106.i8[4];
              v101[2] = v106.i8[0];
              v85 += 4;
            }
            while (v85 <= v21);
            v85 = v85;
          }
          else
          {
            v85 = 0;
          }
          if ((int)v85 < a6)
          {
            do
            {
              v107 = (int)(v20 + (v28->i32[v85] - v26->i32[v85]) * v11) >> v17;
              v108 = v107 & ~(v107 >> 31);
              if (v108 >= 255)
                LOBYTE(v108) = -1;
              *(_BYTE *)(a3 + v85++) = v108;
            }
            while (a6 != v85);
          }
        }
LABEL_95:
        a3 += a4;
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

void cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEAD0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  const float *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;
  int32x4_t v27;
  int16x8_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  const float *v46;
  int32x4_t v47;
  int16x8_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v7 >> 1));
  v11 = *(_DWORD *)(result + 124);
  v12 = *(_DWORD *)(result + 112);
  v13 = *(_DWORD *)(result + 116);
  v14 = (_QWORD *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v34 = a4;
      v35 = (v9 + 1);
      v36 = vdupq_n_s32(v11);
      v37 = vdupq_n_s32(v13);
      result = a2 + 8 * v9 - 8;
      v38 = vnegq_s32(vdupq_n_s32(v12));
      v39.i64[0] = 0xFF000000FFLL;
      v39.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          v40 = 0;
          do
          {
            v41 = (int32x4_t)vld1q_dup_f32(v10);
            v42 = vmlaq_s32(v36, *(int32x4_t *)(*v14 + 4 * v40), v41);
            if (v6 >= 2)
            {
              v43 = (uint64_t *)result;
              v44 = 1;
              do
              {
                v45 = *v43--;
                v46 = &v10[v44];
                v47 = (int32x4_t)vld1q_dup_f32(v46);
                v42 = vmlaq_s32(v42, vaddq_s32(*(int32x4_t *)(v45 + 4 * v40), *(int32x4_t *)(v14[v44++] + 4 * v40)), v47);
              }
              while (v35 != v44);
            }
            v48 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v42, v37), v38), (int32x4_t)0), v39);
            *(int16x4_t *)v48.i8 = vmovn_s32((int32x4_t)v48);
            *(_DWORD *)(a3 + v40) = vmovn_s16(v48).u32[0];
            v40 += 4;
          }
          while (v40 <= a6 - 4);
          v40 = v40;
        }
        else
        {
          v40 = 0;
        }
        if ((int)v40 < a6)
        {
          do
          {
            v49 = v11 + *(_DWORD *)(*v14 + 4 * v40) * *(_DWORD *)v10;
            if (v6 >= 2)
            {
              v50 = (uint64_t *)result;
              v51 = 1;
              do
              {
                v52 = *v50--;
                v49 += (*(_DWORD *)(v52 + 4 * v40) + *(_DWORD *)(v14[v51] + 4 * v40)) * LODWORD(v10[v51]);
                ++v51;
              }
              while (v35 != v51);
            }
            v53 = ((int)(v49 + v13) >> v12) & ~((int)(v49 + v13) >> v12 >> 31);
            if (v53 >= 255)
              LOBYTE(v53) = -1;
            *(_BYTE *)(a3 + v40++) = v53;
          }
          while (v40 != a6);
        }
        a3 += v34;
        ++v14;
        result += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v15 = a4;
    v16 = (v9 + 1);
    v17 = vdupq_n_s32(v11);
    v18 = vdupq_n_s32(v13);
    result = a2 + 8 * v9 - 8;
    v19 = vnegq_s32(vdupq_n_s32(v12));
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v21 = 0;
        do
        {
          v22 = v17;
          if (v6 >= 2)
          {
            v23 = (uint64_t *)result;
            v24 = 1;
            v22 = v17;
            do
            {
              v25 = *v23--;
              v26 = &v10[v24];
              v27 = (int32x4_t)vld1q_dup_f32(v26);
              v22 = vmlaq_s32(v22, vsubq_s32(*(int32x4_t *)(v14[v24++] + 4 * v21), *(int32x4_t *)(v25 + 4 * v21)), v27);
            }
            while (v16 != v24);
          }
          v28 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v22, v18), v19), (int32x4_t)0), v20);
          *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)v28);
          *(_DWORD *)(a3 + v21) = vmovn_s16(v28).u32[0];
          v21 += 4;
        }
        while (v21 <= a6 - 4);
        v21 = v21;
      }
      else
      {
        v21 = 0;
      }
      if ((int)v21 < a6)
      {
        do
        {
          v29 = v11;
          if (v6 >= 2)
          {
            v30 = (uint64_t *)result;
            v31 = 1;
            v29 = v11;
            do
            {
              v32 = *v30--;
              v29 += (*(_DWORD *)(v14[v31] + 4 * v21) - *(_DWORD *)(v32 + 4 * v21)) * LODWORD(v10[v31]);
              ++v31;
            }
            while (v16 != v31);
          }
          v33 = ((int)(v29 + v13) >> v12) & ~((int)(v29 + v13) >> v12 >> 31);
          if (v33 >= 255)
            LOBYTE(v33) = -1;
          *(_BYTE *)(a3 + v21++) = v33;
        }
        while (v21 != a6);
      }
      a3 += v15;
      ++v14;
      result += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  v6 = cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_24DBEEDE8;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2629);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_219E0F8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEEE60;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E0FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

int32x4_t *cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(int32x4_t *result, uint64_t a2, int16x4_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11, int32x4_t a12)
{
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  signed int v17;
  _BOOL4 v18;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int32x4_t **v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t *v31;
  int32x4_t *v32;
  int32x4_t *v33;
  int32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  int32x4_t *v37;
  int32x4_t *v38;
  int32x4_t *v39;
  int16x4_t *v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int v45;
  int32x4_t *v46;
  int32x4_t *v47;
  int32x4_t *v48;
  int16x4_t *v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int v55;
  int32x4_t *v56;
  int32x4_t *v57;
  int16x4_t *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int v62;
  int32x4_t *v63;
  int32x4_t *v64;
  int32x4_t *v65;
  int16x4_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int32x4_t *v74;
  int32x4_t *v75;
  int16x4_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int16x4_t *v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int v87;

  v12 = result->i32[2];
  if (v12 >= 0)
    v13 = result->i32[2];
  else
    v13 = v12 + 1;
  v14 = (unsigned int *)(result[2].i64[0] + 4 * (v13 >> 1));
  v15 = *v14;
  if (*v14 == -2)
  {
    v18 = 0;
    v17 = v14[1];
    v16 = v17 == 1;
  }
  else if (v15 == 2)
  {
    v16 = 0;
    v17 = v14[1];
    v18 = v17 == 1;
  }
  else
  {
    v18 = 0;
    v16 = 0;
    v17 = v14[1];
  }
  if (v17 == 1 || v17 == -1)
  {
    if (v17 + *(v14 - 1))
      v20 = 0;
    else
      v20 = v15 == 0;
    v21 = v20;
    if (a5)
      goto LABEL_23;
  }
  else
  {
    v21 = 0;
    if (a5)
    {
LABEL_23:
      v22 = (uint64_t)v13 >> 1;
      v24 = result[7].u32[1];
      v23 = result[7].i32[2];
      v25 = (int32x4_t **)(a2 + 8 * v22);
      v26 = a6 - 4;
      result = *v25;
      a10.i64[0] = __PAIR64__(v24, v17);
      v27 = vdupq_n_s32(v17);
      v28 = vdupq_n_s32(v15);
      v29 = vdupq_n_s32(v24);
      v30 = vzip1q_s32(a10, a10);
      v30.i32[2] = v17;
      do
      {
        v31 = result;
        v32 = v25[1];
        ++v25;
        result = v32;
        v33 = *(v25 - 2);
        if ((v23 & 1) != 0)
        {
          v36 = 0;
          if (!v18)
          {
            if (v16)
            {
              if (a6 >= 4)
              {
                v46 = *(v25 - 2);
                v47 = v31;
                v48 = result;
                v49 = a3;
                do
                {
                  v50 = *v46++;
                  v51 = v50;
                  v52 = *v47++;
                  v53 = v52;
                  v54 = *v48++;
                  a12 = vaddq_s32(v53, v53);
                  a11 = vaddq_s32(vsubq_s32(vaddq_s32(v51, v29), a12), v54);
                  *v49++ = vqmovn_s32(a11);
                  v36 += 4;
                }
                while (v36 <= v26);
                v36 = v36;
              }
              if ((int)v36 < a6)
              {
                do
                {
                  v55 = v33->i32[v36] + v24 - 2 * v31->i32[v36] + result->i32[v36];
                  if (v55 <= -32768)
                    v55 = -32768;
                  if (v55 >= 0x7FFF)
                    LOWORD(v55) = 0x7FFF;
                  a3->i16[v36++] = v55;
                }
                while (a6 != v36);
                goto LABEL_108;
              }
            }
            else
            {
              if (a6 >= 4)
              {
                v63 = *(v25 - 2);
                v64 = result;
                v65 = v31;
                v66 = a3;
                do
                {
                  v67 = *v63++;
                  v68 = v67;
                  v69 = *v64++;
                  a11 = vaddq_s32(v69, v68);
                  v70 = *v65++;
                  a12.i32[3] = v70.i32[3];
                  *v66++ = vqmovn_s32(vmlaq_s32(vmlaq_s32(v29, v70, v28), a11, v27));
                  v36 += 4;
                }
                while (v36 <= v26);
                v36 = v36;
              }
              if ((int)v36 < a6)
              {
                do
                {
                  v71 = v24 + v31->i32[v36] * v15 + (result->i32[v36] + v33->i32[v36]) * v17;
                  if (v71 <= -32768)
                    v71 = -32768;
                  if (v71 >= 0x7FFF)
                    LOWORD(v71) = 0x7FFF;
                  a3->i16[v36++] = v71;
                }
                while (a6 != v36);
                goto LABEL_108;
              }
            }
LABEL_82:
            if ((int)v36 < a6)
            {
              do
              {
                v72 = v24 + v31->i32[v36] * v15 + (result->i32[v36] + v33->i32[v36]) * v17;
                if (v72 <= -32768)
                  v72 = -32768;
                if (v72 >= 0x7FFF)
                  LOWORD(v72) = 0x7FFF;
                a3->i16[v36++] = v72;
              }
              while (a6 != v36);
            }
            goto LABEL_108;
          }
          if (a6 >= 4)
          {
            v37 = *(v25 - 2);
            v38 = v31;
            v39 = result;
            v40 = a3;
            do
            {
              v41 = *v37++;
              v42 = v41;
              v43 = *v38++;
              a12 = vaddq_s32(v43, v43);
              v44 = *v39++;
              a11 = vaddq_s32(vaddq_s32(vaddq_s32(v42, v29), a12), v44);
              *v40++ = vqmovn_s32(a11);
              v36 += 4;
            }
            while (v36 <= v26);
            v36 = v36;
          }
          if ((int)v36 >= a6)
            goto LABEL_82;
          do
          {
            v45 = v33->i32[v36] + v24 + 2 * v31->i32[v36] + result->i32[v36];
            if (v45 <= -32768)
              v45 = -32768;
            if (v45 >= 0x7FFF)
              LOWORD(v45) = 0x7FFF;
            a3->i16[v36++] = v45;
          }
          while (a6 != v36);
        }
        else if (v21)
        {
          if (v17 >= 0)
            v34 = *(v25 - 2);
          else
            v34 = result;
          if (v17 >= 0)
            v33 = result;
          if (a6 >= 4)
          {
            v35 = 0;
            v56 = v33;
            v57 = v34;
            v58 = a3;
            do
            {
              v59 = *v56++;
              v60 = v59;
              v61 = *v57++;
              a12.i32[3] = v61.i32[3];
              a11 = vsubq_s32(vaddq_s32(v60, v29), v61);
              *v58++ = vqmovn_s32(a11);
              v35 += 4;
            }
            while (v35 <= v26);
            v35 = v35;
          }
          else
          {
            v35 = 0;
          }
          if ((int)v35 < a6)
          {
            do
            {
              v62 = v33->i32[v35] + v24 - v34->i32[v35];
              if (v62 <= -32768)
                v62 = -32768;
              if (v62 >= 0x7FFF)
                LOWORD(v62) = 0x7FFF;
              a3->i16[v35++] = v62;
            }
            while (a6 != v35);
          }
        }
        else if (v15)
        {
          if (a6 < 4)
          {
            v82 = 0;
          }
          else
          {
            v81 = 0;
            v82 = 0;
            v83 = a3;
            do
            {
              a11.i64[0] = result[v81].i64[0];
              a12.i64[0] = v33[v81].i64[0];
              a11.i32[2] = result[v81].i32[2];
              a12.i32[2] = v33[v81].i32[2];
              v84 = vsubq_s32(a11, a12);
              a11.i32[3] = v31[v81].i32[2];
              a12.i32[3] = v15;
              *(int32x2_t *)v85.i8 = vmla_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v31[v81].i8, *(int32x2_t *)v28.i8);
              v86 = vmulq_s32(v84, v30);
              v86.i32[3] = vmlaq_s32(v30, a11, a12).i32[3];
              v85.i32[2] = v86.i32[3];
              v85.i32[3] = (result[v81].i32[3] - v33[v81].i32[3]) * v17;
              a11 = vaddq_s32(v86, v85);
              *v83++ = vqmovn_s32(a11);
              v82 += 4;
              ++v81;
            }
            while (v82 <= v26);
            v82 = v82;
          }
          if ((int)v82 < a6)
          {
            do
            {
              v87 = v24 + v31->i32[v82] * v15 + (result->i32[v82] - v33->i32[v82]) * v17;
              if (v87 <= -32768)
                v87 = -32768;
              if (v87 >= 0x7FFF)
                LOWORD(v87) = 0x7FFF;
              a3->i16[v82++] = v87;
            }
            while (a6 != v82);
          }
        }
        else
        {
          v73 = 0;
          if (a6 >= 4)
          {
            v74 = result;
            v75 = *(v25 - 2);
            v76 = a3;
            do
            {
              v77 = *v74++;
              v78 = v77;
              v79 = *v75++;
              a11 = vsubq_s32(v78, v79);
              a12 = vmlaq_s32(v29, a11, v27);
              *v76++ = vqmovn_s32(a12);
              v73 += 4;
            }
            while (v73 <= v26);
            v73 = v73;
          }
          if ((int)v73 < a6)
          {
            do
            {
              v80 = v24 + (result->i32[v73] - v33->i32[v73]) * v17;
              if (v80 <= -32768)
                v80 = -32768;
              if (v80 >= 0x7FFF)
                LOWORD(v80) = 0x7FFF;
              a3->i16[v73++] = v80;
            }
            while (a6 != v73);
          }
        }
LABEL_108:
        a3 = (int16x4_t *)((char *)a3 + a4);
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEE90;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E10414(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  const float *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  const float *v22;
  int32x4_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  const float *v39;
  int32x4_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v7 >> 1));
  v11 = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v28 = a4;
      v29 = (v9 + 1);
      v30 = vdupq_n_s32(v11);
      v31 = a2 + 8 * v9 - 8;
      result = 0x7FFFLL;
      do
      {
        if (a6 >= 4)
        {
          v32 = 0;
          v33 = *v12;
          v34 = (int32x4_t)vld1q_dup_f32(v10);
          do
          {
            v35 = vmlaq_s32(v30, *(int32x4_t *)(v33 + 4 * v32), v34);
            if (v6 >= 2)
            {
              v36 = (uint64_t *)v31;
              v37 = 1;
              do
              {
                v38 = *v36--;
                v39 = &v10[v37];
                v40 = (int32x4_t)vld1q_dup_f32(v39);
                v35 = vmlaq_s32(v35, vaddq_s32(*(int32x4_t *)(v38 + 4 * v32), *(int32x4_t *)(v12[v37++] + 4 * v32)), v40);
              }
              while (v29 != v37);
            }
            *(int16x4_t *)(a3 + 2 * v32) = vqmovn_s32(v35);
            v32 += 4;
          }
          while (v32 <= a6 - 4);
          v32 = v32;
        }
        else
        {
          v32 = 0;
        }
        if ((int)v32 < a6)
        {
          v41 = *v10;
          v42 = *v12;
          do
          {
            v43 = v11 + *(_DWORD *)(v42 + 4 * v32) * LODWORD(v41);
            if (v6 >= 2)
            {
              v44 = (uint64_t *)v31;
              v45 = 1;
              do
              {
                v46 = *v44--;
                v43 += (*(_DWORD *)(v46 + 4 * v32) + *(_DWORD *)(v12[v45] + 4 * v32)) * LODWORD(v10[v45]);
                ++v45;
              }
              while (v29 != v45);
            }
            if (v43 <= -32768)
              v43 = -32768;
            if (v43 >= 0x7FFF)
              LOWORD(v43) = 0x7FFF;
            *(_WORD *)(a3 + 2 * v32++) = v43;
          }
          while (v32 != a6);
        }
        a3 += v28;
        ++v12;
        v31 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = (v9 + 1);
    v15 = vdupq_n_s32(v11);
    v16 = a2 + 8 * v9 - 8;
    result = 0x7FFFLL;
    do
    {
      if (a6 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = v15;
          if (v6 >= 2)
          {
            v19 = (uint64_t *)v16;
            v20 = 1;
            v18 = v15;
            do
            {
              v21 = *v19--;
              v22 = &v10[v20];
              v23 = (int32x4_t)vld1q_dup_f32(v22);
              v18 = vmlaq_s32(v18, vsubq_s32(*(int32x4_t *)(v12[v20++] + 4 * v17), *(int32x4_t *)(v21 + 4 * v17)), v23);
            }
            while (v14 != v20);
          }
          *(int16x4_t *)(a3 + 2 * v17) = vqmovn_s32(v18);
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          v24 = v11;
          if (v6 >= 2)
          {
            v25 = (uint64_t *)v16;
            v26 = 1;
            v24 = v11;
            do
            {
              v27 = *v25--;
              v24 += (*(_DWORD *)(v12[v26] + 4 * v17) - *(_DWORD *)(v27 + 4 * v17)) * LODWORD(v10[v26]);
              ++v26;
            }
            while (v14 != v26);
          }
          if (v24 <= -32768)
            v24 = -32768;
          if (v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v17++) = v24;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEE90;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  const float *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t i;
  const float *v16;
  int32x4_t v17;
  float v18;
  int v19;
  uint64_t j;

  if (a5)
  {
    v6 = *(const float **)(result + 32);
    v7 = *(_DWORD *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9 = a4;
    v10 = vdupq_n_s32(v7);
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *a2;
        v13 = (int32x4_t)vld1q_dup_f32(v6);
        do
        {
          v14 = vmlaq_s32(v10, *(int32x4_t *)(v12 + 4 * v11), v13);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
            {
              v16 = &v6[i];
              v17 = (int32x4_t)vld1q_dup_f32(v16);
              v14 = vmlaq_s32(v14, *(int32x4_t *)(a2[i] + 4 * v11), v17);
            }
          }
          result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v14);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v18 = *v6;
        result = *a2;
        do
        {
          v19 = v7 + *(_DWORD *)(result + 4 * v11) * LODWORD(v18);
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v19 += *(_DWORD *)(a2[j] + 4 * v11) * LODWORD(v6[j]);
          }
          if (v19 <= -32768)
            v19 = -32768;
          if (v19 >= 0x7FFF)
            LOWORD(v19) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v11++) = v19;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  v6 = cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_24DBEEEC0;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2629);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_219E10C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEEF38;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E10D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9)
{
  int v9;
  int v10;
  float *v11;
  float v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  uint64_t v38;
  float32x2_t *v39;
  uint64_t v40;
  float32x2_t *v41;
  uint64_t v42;
  float32x2_t *v43;
  int32x2_t v44;

  v9 = *(_DWORD *)(result + 8);
  if (v9 >= 0)
    v10 = *(_DWORD *)(result + 8);
  else
    v10 = v9 + 1;
  v11 = (float *)(*(_QWORD *)(result + 32) + 4 * (v10 >> 1));
  v12 = *v11;
  v13 = *v11 == 2.0 && v11[1] == 1.0;
  v14 = v12 == -2.0;
  *(float *)&a8 = v11[1];
  if (*(float *)&a8 == 1.0)
  {
    v15 = 1;
  }
  else
  {
    v14 = 0;
    v15 = *(float *)&a8 == -1.0;
  }
  if (!v15 || *(float *)&a8 != (float)-*(v11 - 1))
  {
    v16 = 0;
    if (!a5)
      return result;
    goto LABEL_16;
  }
  v16 = v12 == 0.0;
  if (a5)
  {
LABEL_16:
    v17 = (uint64_t)v10 >> 1;
    v18 = *(_DWORD *)(result + 120);
    LODWORD(a9) = *(_DWORD *)(result + 116);
    v19 = (uint64_t *)(a2 + 8 * v17);
    v20 = a4;
    v21 = a6 - 4;
    v22 = *v19;
    v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
    v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    do
    {
      v25 = v22;
      v26 = v19[1];
      ++v19;
      v22 = v26;
      result = *(v19 - 2);
      if ((v18 & 1) != 0)
      {
        if (v13)
        {
          if (a6 < 4)
          {
            v33 = 0;
          }
          else
          {
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = (float32x2_t *)(a3 + v32);
              *v34 = vadd_f32(v24, vadd_f32(vmla_f32(*(float32x2_t *)(result + v32), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + v32)), *(float32x2_t *)(v22 + v32)));
              v34[1] = vadd_f32(v24, vadd_f32(vmla_f32(*(float32x2_t *)(result + v32 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + 8 + v32)), *(float32x2_t *)(v22 + 8 + v32)));
              v33 += 4;
              v32 += 16;
            }
            while (v33 <= v21);
            v33 = v33;
          }
          if ((int)v33 >= a6)
            goto LABEL_69;
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(*(float *)(result + 4 * v33)
                                                     + (float)(*(float *)(v25 + 4 * v33) * 2.0))
                                             + *(float *)(v22 + 4 * v33));
            ++v33;
          }
          while (a6 != v33);
        }
        else if (v14)
        {
          if (a6 < 4)
          {
            v33 = 0;
          }
          else
          {
            v38 = 0;
            v33 = 0;
            do
            {
              v39 = (float32x2_t *)(a3 + v38);
              *v39 = vadd_f32(v24, vadd_f32(vmls_f32(*(float32x2_t *)(result + v38), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + v38)), *(float32x2_t *)(v22 + v38)));
              v39[1] = vadd_f32(v24, vadd_f32(vmls_f32(*(float32x2_t *)(result + v38 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + 8 + v38)), *(float32x2_t *)(v22 + 8 + v38)));
              v33 += 4;
              v38 += 16;
            }
            while (v33 <= v21);
            v33 = v33;
          }
          if ((int)v33 >= a6)
            goto LABEL_69;
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(*(float *)(result + 4 * v33)
                                                     + (float)(*(float *)(v25 + 4 * v33) * -2.0))
                                             + *(float *)(v22 + 4 * v33));
            ++v33;
          }
          while (a6 != v33);
        }
        else
        {
          if (a6 < 4)
          {
            v33 = 0;
          }
          else
          {
            v40 = 0;
            v33 = 0;
            do
            {
              v41 = (float32x2_t *)(a3 + v40);
              *v41 = vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + v40), v12), v23, vadd_f32(*(float32x2_t *)(result + v40), *(float32x2_t *)(v22 + v40))));
              v41[1] = vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + 8 + v40), v12), v23, vadd_f32(*(float32x2_t *)(result + v40 + 8), *(float32x2_t *)(v22 + 8 + v40))));
              v33 += 4;
              v40 += 16;
            }
            while (v33 <= v21);
            v33 = v33;
          }
          if ((int)v33 >= a6)
          {
LABEL_69:
            if ((int)v33 < a6)
            {
              do
              {
                *(float *)(a3 + 4 * v33) = *(float *)&a9
                                         + (float)((float)(v12 * *(float *)(v25 + 4 * v33))
                                                 + (float)((float)(*(float *)(result + 4 * v33)
                                                                 + *(float *)(v22 + 4 * v33))
                                                         * *(float *)&a8));
                ++v33;
              }
              while (a6 != v33);
            }
            goto LABEL_77;
          }
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(v12 * *(float *)(v25 + 4 * v33))
                                             + (float)((float)(*(float *)(result + 4 * v33) + *(float *)(v22 + 4 * v33))
                                                     * *(float *)&a8));
            ++v33;
          }
          while (a6 != v33);
        }
      }
      else if (v16)
      {
        if (*(float *)&a8 >= 0.0)
          v27 = *(v19 - 2);
        else
          v27 = v22;
        if (*(float *)&a8 >= 0.0)
          result = v22;
        if (a6 >= 4)
        {
          v30 = 0;
          v28 = 0;
          do
          {
            v31 = (float32x2_t *)(a3 + v30);
            *v31 = vadd_f32(v24, vsub_f32(*(float32x2_t *)(result + v30), *(float32x2_t *)(v27 + v30)));
            v31[1] = vadd_f32(v24, vsub_f32(*(float32x2_t *)(result + v30 + 8), *(float32x2_t *)(v27 + v30 + 8)));
            v28 += 4;
            v30 += 16;
          }
          while (v28 <= v21);
          v28 = v28;
        }
        else
        {
          v28 = 0;
        }
        if ((int)v28 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v28) = *(float *)&a9 + (float)(*(float *)(result + 4 * v28) - *(float *)(v27 + 4 * v28));
            ++v28;
          }
          while (a6 != v28);
        }
      }
      else if (*v11 == 0.0)
      {
        if (a6 >= 4)
        {
          v36 = 0;
          v29 = 0;
          do
          {
            v37 = (float32x2_t *)(a3 + v36);
            *v37 = vmla_f32(v24, v23, vsub_f32(*(float32x2_t *)(v22 + v36), *(float32x2_t *)(result + v36)));
            v37[1] = vmla_f32(v24, v23, vsub_f32(*(float32x2_t *)(v22 + v36 + 8), *(float32x2_t *)(result + v36 + 8)));
            v29 += 4;
            v36 += 16;
          }
          while (v29 <= v21);
          v29 = v29;
        }
        else
        {
          v29 = 0;
        }
        if ((int)v29 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v29) = *(float *)&a9
                                     + (float)((float)(*(float *)(v22 + 4 * v29) - *(float *)(result + 4 * v29))
                                             * *(float *)&a8);
            ++v29;
          }
          while (a6 != v29);
        }
      }
      else
      {
        if (a6 >= 4)
        {
          v42 = 0;
          v35 = 0;
          do
          {
            v43 = (float32x2_t *)(a3 + v42);
            v44 = (int32x2_t)vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + v42), v12), v23, vsub_f32(*(float32x2_t *)(v22 + v42), *(float32x2_t *)(result + v42))));
            *v43 = (float32x2_t)v44;
            *(float *)v44.i32 = v12 * *(float *)(v25 + v42 + 8);
            v43[1] = vadd_f32(v24, vmla_f32((float32x2_t)vdup_lane_s32(v44, 0), v23, vsub_f32(*(float32x2_t *)(v22 + 8 + v42), *(float32x2_t *)(result + 8 + v42))));
            v35 += 4;
            v42 += 16;
          }
          while (v35 <= v21);
          v35 = v35;
        }
        else
        {
          v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v35) = *(float *)&a9
                                     + (float)((float)(v12 * *(float *)(v25 + 4 * v35))
                                             + (float)((float)(*(float *)(v22 + 4 * v35) - *(float *)(result + 4 * v35))
                                                     * *(float *)&a8));
            ++v35;
          }
          while (a6 != v35);
        }
      }
LABEL_77:
      a3 += v20;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  float v23;
  const cv::Exception *v24;
  void *__p[2];
  void *v27[2];
  void *v28[2];
  _BYTE v29[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEEF68;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v29, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v29);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v23 = a4;
  *(float *)(a1 + 116) = v23;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v27, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v29, 4294967081, v28, v27, __p, 2460);
    cv::error((cv *)v29, v24);
  }
  return a1;
}

void sub_219E117C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = (uint64_t)v8 >> 1;
  v11 = (float *)(*(_QWORD *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v23 = a4;
      v24 = (v10 + 1);
      v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v26 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          v27 = 0;
          v28 = *v12;
          do
          {
            result = 4 * v27;
            v29 = vmlaq_n_f32(v25, *(float32x4_t *)(v28 + 4 * v27), *v11);
            if (v7 >= 2)
            {
              v30 = (uint64_t *)v26;
              v31 = 1;
              do
              {
                v32 = *v30--;
                v29 = vmlaq_n_f32(v29, vaddq_f32(*(float32x4_t *)(v12[v31] + 4 * v27), *(float32x4_t *)(v32 + 4 * v27)), v11[v31]);
                ++v31;
              }
              while (v24 != v31);
            }
            *(float32x4_t *)(a3 + 4 * v27) = v29;
            v27 += 4;
          }
          while (v27 <= a6 - 4);
          v27 = v27;
        }
        else
        {
          v27 = 0;
        }
        if ((int)v27 < a6)
        {
          v33 = *v12;
          do
          {
            v34 = *(float *)&a7 + (float)(*v11 * *(float *)(v33 + 4 * v27));
            if (v7 >= 2)
            {
              result = v26;
              v35 = 1;
              do
              {
                v36 = *(_QWORD *)result;
                result -= 8;
                v34 = v34 + (float)(v11[v35] * (float)(*(float *)(v12[v35] + 4 * v27) + *(float *)(v36 + 4 * v27)));
                ++v35;
              }
              while (v24 != v35);
            }
            *(float *)(a3 + 4 * v27++) = v34;
          }
          while (v27 != a6);
        }
        a3 += v23;
        ++v12;
        v26 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = (v10 + 1);
    v14 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        v16 = 0;
        do
        {
          v17 = (float32x4_t)v14;
          if (v7 >= 2)
          {
            result = v15;
            v18 = 1;
            v17 = (float32x4_t)v14;
            do
            {
              v19 = *(_QWORD *)result;
              result -= 8;
              v17 = vmlaq_n_f32(v17, vsubq_f32(*(float32x4_t *)(v12[v18] + 4 * v16), *(float32x4_t *)(v19 + 4 * v16)), v11[v18]);
              ++v18;
            }
            while (v13 != v18);
          }
          *(float32x4_t *)(a3 + 4 * v16) = v17;
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        v16 = v16;
      }
      else
      {
        v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          v20 = *(float *)&a7;
          if (v7 >= 2)
          {
            v21 = (uint64_t *)v15;
            result = 1;
            v20 = *(float *)&a7;
            do
            {
              v22 = *v21--;
              v20 = v20 + (float)(v11[result] * (float)(*(float *)(v12[result] + 4 * v16) - *(float *)(v22 + 4 * v16)));
              ++result;
            }
            while (v13 != result);
          }
          *(float *)(a3 + 4 * v16++) = v20;
        }
        while (v16 != a6);
      }
      a3 += a4;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEF68;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  float *v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint64_t i;
  uint64_t v14;
  float v15;
  uint64_t j;

  if (a5)
  {
    v7 = *(float **)(result + 32);
    LODWORD(a7) = *(_DWORD *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    do
    {
      if (a6 >= 4)
      {
        v10 = 0;
        v11 = *a2;
        do
        {
          v12 = vmlaq_n_f32(v9, *(float32x4_t *)(v11 + 4 * v10), *v7);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
              v12 = vmlaq_n_f32(v12, *(float32x4_t *)(a2[i] + 4 * v10), v7[i]);
          }
          *(float32x4_t *)(a3 + 4 * v10) = v12;
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < a6)
      {
        v14 = *a2;
        do
        {
          v15 = *(float *)&a7 + (float)(*v7 * *(float *)(v14 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v15 = v15 + (float)(v7[j] * *(float *)(a2[j] + 4 * v10));
          }
          *(float *)(a3 + 4 * v10++) = v15;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEEF98;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E11F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB18;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB18;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  float *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t *v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int32x4_t v29;
  int16x8_t v30;
  float v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  int32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int16x8_t v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = (uint64_t)v8 >> 1;
  v11 = (float *)(*(_QWORD *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v12 = (_QWORD *)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v36 = a4;
      v37 = (v10 + 1);
      v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v39 = a2 + 8 * v10 - 8;
      v40.i64[0] = 0xFF000000FFLL;
      v40.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          v41 = 0;
          do
          {
            v42 = vmlaq_n_f32(v38, *(float32x4_t *)(*v12 + 4 * v41), *v11);
            if (v7 >= 2)
            {
              v43 = (uint64_t *)v39;
              v44 = 1;
              do
              {
                v45 = *v43--;
                v42 = vmlaq_n_f32(v42, vaddq_f32(*(float32x4_t *)(v12[v44] + 4 * v41), *(float32x4_t *)(v45 + 4 * v41)), v11[v44]);
                ++v44;
              }
              while (v37 != v44);
            }
            result = (uint64_t)rint(v42.f32[0]);
            v42.i32[0] = result;
            v42.i32[1] = (uint64_t)rint(v42.f32[1]);
            v42.i32[2] = (uint64_t)rint(v42.f32[2]);
            v42.i32[3] = (uint64_t)rint(v42.f32[3]);
            v46 = (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v42, (int32x4_t)0), v40);
            *(int16x4_t *)v46.i8 = vmovn_s32((int32x4_t)v46);
            *(_DWORD *)(a3 + v41) = vmovn_s16(v46).u32[0];
            v41 += 4;
          }
          while (v41 <= a6 - 4);
          v41 = v41;
        }
        else
        {
          v41 = 0;
        }
        if ((int)v41 < a6)
        {
          do
          {
            v47 = *(float *)&a7 + (float)(*v11 * *(float *)(*v12 + 4 * v41));
            if (v7 >= 2)
            {
              v48 = (uint64_t *)v39;
              v49 = 1;
              do
              {
                v50 = *v48--;
                v47 = v47 + (float)(v11[v49] * (float)(*(float *)(v12[v49] + 4 * v41) + *(float *)(v50 + 4 * v41)));
                ++v49;
              }
              while (v37 != v49);
            }
            v51 = rint(v47);
            LODWORD(result) = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
            if ((int)result >= 255)
              result = 255;
            else
              result = result;
            *(_BYTE *)(a3 + v41++) = result;
          }
          while (v41 != a6);
        }
        a3 += v36;
        ++v12;
        v39 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = (v10 + 1);
    v15 = a2 + 8 * v10 - 8;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = *(float *)&a7;
          v19 = *(float *)&a7;
          v20 = *(float *)&a7;
          v21 = *(float *)&a7;
          if (v7 >= 2)
          {
            v22 = (uint64_t *)v15;
            v23 = 1;
            v21 = *(float *)&a7;
            v20 = *(float *)&a7;
            v19 = *(float *)&a7;
            v18 = *(float *)&a7;
            do
            {
              v24 = (float *)(v12[v23] + 4 * v17);
              v25 = *v22--;
              v26 = (float *)(v25 + 4 * v17);
              v27 = v11[v23];
              v18 = v18 + (float)(v27 * (float)(*v24 - *v26));
              v19 = v19 + (float)(v27 * (float)(v24[1] - v26[1]));
              v20 = v20 + (float)(v27 * (float)(v24[2] - v26[2]));
              v21 = v21 + (float)(v27 * (float)(v24[3] - v26[3]));
              ++v23;
            }
            while (v14 != v23);
          }
          result = (uint64_t)rint(v18);
          v28 = (uint64_t)rint(v21);
          v29.i32[0] = result;
          v29.i32[1] = (uint64_t)rint(v19);
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          v30 = (int16x8_t)vminq_s32(vmaxq_s32(v29, (int32x4_t)0), v16);
          *(int16x4_t *)v30.i8 = vmovn_s32((int32x4_t)v30);
          *(_DWORD *)(a3 + v17) = vmovn_s16(v30).u32[0];
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          v31 = *(float *)&a7;
          if (v7 >= 2)
          {
            v32 = (uint64_t *)v15;
            v33 = 1;
            v31 = *(float *)&a7;
            do
            {
              v34 = *v32--;
              v31 = v31 + (float)(v11[v33] * (float)(*(float *)(v12[v33] + 4 * v17) - *(float *)(v34 + 4 * v17)));
              ++v33;
            }
            while (v14 != v33);
          }
          v35 = rint(v31);
          LODWORD(result) = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          if ((int)result >= 255)
            result = 255;
          else
            result = result;
          *(_BYTE *)(a3 + v17++) = result;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEEFE0;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E12584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB60;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEB60;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double *v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t *v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  int32x4_t v30;
  int16x8_t v31;
  double v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t *v49;
  double *v50;
  uint64_t v51;
  double *v52;
  double v53;
  int32x4_t v54;
  int16x8_t v55;
  double v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  double v60;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (double *)(*(_QWORD *)(result + 32) + 8 * (v7 >> 1));
  v11 = *(double *)(result + 120);
  v12 = (_QWORD *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v37 = a4;
      v38 = v9 + 1;
      v39 = a2 + 8 * v9 - 8;
      v40 = 8 * v38;
      v41.i64[0] = 0xFF000000FFLL;
      v41.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          v42 = 0;
          do
          {
            v43 = (double *)(*v12 + 8 * v42);
            v44 = v11 + *v10 * *v43;
            v45 = v11 + *v10 * v43[1];
            v46 = v11 + *v10 * v43[2];
            v47 = v11 + *v10 * v43[3];
            if (v6 >= 2)
            {
              v48 = 8;
              v49 = (uint64_t *)v39;
              do
              {
                v50 = (double *)(v12[(unint64_t)v48 / 8] + 8 * v42);
                v51 = *v49--;
                v52 = (double *)(v51 + 8 * v42);
                v53 = v10[(unint64_t)v48 / 8];
                v44 = v44 + v53 * (*v50 + *v52);
                v45 = v45 + v53 * (v50[1] + v52[1]);
                v46 = v46 + v53 * (v50[2] + v52[2]);
                v47 = v47 + v53 * (v50[3] + v52[3]);
                v48 += 8;
              }
              while (v40 != v48);
            }
            result = (uint64_t)rint(v44);
            v54.i64[0] = __PAIR64__((uint64_t)rint(v45), result);
            v54.i64[1] = __PAIR64__((uint64_t)rint(v47), (uint64_t)rint(v46));
            v55 = (int16x8_t)vminq_s32(vmaxq_s32(v54, (int32x4_t)0), v41);
            *(int16x4_t *)v55.i8 = vmovn_s32((int32x4_t)v55);
            *(_DWORD *)(a3 + v42) = vmovn_s16(v55).u32[0];
            v42 += 4;
          }
          while (v42 <= a6 - 4);
          v42 = v42;
        }
        else
        {
          v42 = 0;
        }
        if ((int)v42 < a6)
        {
          do
          {
            v56 = v11 + *v10 * *(double *)(*v12 + 8 * v42);
            if (v6 >= 2)
            {
              v57 = 8;
              v58 = (uint64_t *)v39;
              do
              {
                v59 = *v58--;
                v56 = v56
                    + v10[(unint64_t)v57 / 8]
                    * (*(double *)(v12[(unint64_t)v57 / 8] + 8 * v42) + *(double *)(v59 + 8 * v42));
                v57 += 8;
              }
              while (v40 != v57);
            }
            v60 = rint(v56);
            LODWORD(result) = (uint64_t)v60 & ~((int)(uint64_t)v60 >> 31);
            if ((int)result >= 255)
              result = 255;
            else
              result = result;
            *(_BYTE *)(a3 + v42++) = result;
          }
          while (v42 != a6);
        }
        a3 += v37;
        ++v12;
        v39 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = v9 + 1;
    v15 = a2 + 8 * v9 - 8;
    v16 = 8 * v14;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        v18 = 0;
        do
        {
          v19 = v11;
          v20 = v11;
          v21 = v11;
          v22 = v11;
          if (v6 >= 2)
          {
            v23 = 8;
            v24 = (uint64_t *)v15;
            v22 = v11;
            v21 = v11;
            v20 = v11;
            v19 = v11;
            do
            {
              v25 = (double *)(v12[(unint64_t)v23 / 8] + 8 * v18);
              v26 = *v24--;
              v27 = (double *)(v26 + 8 * v18);
              v28 = v10[(unint64_t)v23 / 8];
              v19 = v19 + v28 * (*v25 - *v27);
              v20 = v20 + v28 * (v25[1] - v27[1]);
              v21 = v21 + v28 * (v25[2] - v27[2]);
              v22 = v22 + v28 * (v25[3] - v27[3]);
              v23 += 8;
            }
            while (v16 != v23);
          }
          result = (uint64_t)rint(v19);
          v29 = (uint64_t)rint(v22);
          v30.i32[0] = result;
          v30.i32[1] = (uint64_t)rint(v20);
          v30.i32[2] = (uint64_t)rint(v21);
          v30.i32[3] = v29;
          v31 = (int16x8_t)vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v17);
          *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
          *(_DWORD *)(a3 + v18) = vmovn_s16(v31).u32[0];
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        v18 = v18;
      }
      else
      {
        v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          v32 = v11;
          if (v6 >= 2)
          {
            v33 = 8;
            v34 = (uint64_t *)v15;
            v32 = v11;
            do
            {
              v35 = *v34--;
              v32 = v32
                  + v10[(unint64_t)v33 / 8]
                  * (*(double *)(v12[(unint64_t)v33 / 8] + 8 * v18) - *(double *)(v35 + 8 * v18));
              v33 += 8;
            }
            while (v16 != v33);
          }
          v36 = rint(v32);
          LODWORD(result) = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
          if ((int)result >= 255)
            result = 255;
          else
            result = result;
          *(_BYTE *)(a3 + v18++) = result;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF028;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E12B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBA8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBA8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t *v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int32x4_t v29;
  float v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  int32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  int v52;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = (uint64_t)v8 >> 1;
  v11 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v35 = a4;
      v36 = (v10 + 1);
      v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v38 = a2 + 8 * v10 - 8;
      v39.i64[0] = 0xFFFF0000FFFFLL;
      v39.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        if (a6 >= 4)
        {
          v40 = 0;
          result = *v12;
          v41 = vld1q_dup_f32(v11);
          do
          {
            v42 = vmlaq_f32(v37, *(float32x4_t *)(result + 4 * v40), v41);
            if (v7 >= 2)
            {
              v43 = (uint64_t *)v38;
              v44 = 1;
              do
              {
                v45 = *v43--;
                v42 = vmlaq_n_f32(v42, vaddq_f32(*(float32x4_t *)(v12[v44] + 4 * v40), *(float32x4_t *)(v45 + 4 * v40)), v11[v44]);
                ++v44;
              }
              while (v36 != v44);
            }
            v42.i32[0] = (uint64_t)rint(v42.f32[0]);
            v42.i32[1] = (uint64_t)rint(v42.f32[1]);
            v42.i32[2] = (uint64_t)rint(v42.f32[2]);
            v42.i32[3] = (uint64_t)rint(v42.f32[3]);
            *(int16x4_t *)(a3 + 2 * v40) = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)v42, (int32x4_t)0), v39));
            v40 += 4;
          }
          while (v40 <= a6 - 4);
          v40 = v40;
        }
        else
        {
          v40 = 0;
        }
        if ((int)v40 < a6)
        {
          v46 = *v11;
          result = *v12;
          do
          {
            v47 = *(float *)&a7 + (float)(v46 * *(float *)(result + 4 * v40));
            if (v7 >= 2)
            {
              v48 = (uint64_t *)v38;
              v49 = 1;
              do
              {
                v50 = *v48--;
                v47 = v47 + (float)(v11[v49] * (float)(*(float *)(v12[v49] + 4 * v40) + *(float *)(v50 + 4 * v40)));
                ++v49;
              }
              while (v36 != v49);
            }
            v51 = rint(v47);
            v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
            if (v52 >= 0xFFFF)
              LOWORD(v52) = -1;
            *(_WORD *)(a3 + 2 * v40++) = v52;
          }
          while (v40 != a6);
        }
        a3 += v35;
        ++v12;
        v38 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = (v10 + 1);
    v15 = a2 + 8 * v10 - 8;
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = *(float *)&a7;
          v19 = *(float *)&a7;
          v20 = *(float *)&a7;
          v21 = *(float *)&a7;
          if (v7 >= 2)
          {
            v22 = (uint64_t *)v15;
            v23 = 1;
            v21 = *(float *)&a7;
            v20 = *(float *)&a7;
            v19 = *(float *)&a7;
            v18 = *(float *)&a7;
            do
            {
              v24 = (float *)(v12[v23] + 4 * v17);
              v25 = *v22--;
              v26 = (float *)(v25 + 4 * v17);
              v27 = v11[v23];
              v18 = v18 + (float)(v27 * (float)(*v24 - *v26));
              v19 = v19 + (float)(v27 * (float)(v24[1] - v26[1]));
              v20 = v20 + (float)(v27 * (float)(v24[2] - v26[2]));
              v21 = v21 + (float)(v27 * (float)(v24[3] - v26[3]));
              ++v23;
            }
            while (v14 != v23);
          }
          v28 = (uint64_t)rint(v21);
          v29.i32[0] = (uint64_t)rint(v18);
          v29.i32[1] = (uint64_t)rint(v19);
          result = 2 * v17;
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          *(int16x4_t *)(a3 + 2 * v17) = vmovn_s32(vminq_s32(vmaxq_s32(v29, (int32x4_t)0), v16));
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          v30 = *(float *)&a7;
          if (v7 >= 2)
          {
            v31 = (uint64_t *)v15;
            v32 = 1;
            v30 = *(float *)&a7;
            do
            {
              v33 = *v31--;
              v30 = v30 + (float)(v11[v32] * (float)(*(float *)(v12[v32] + 4 * v17) - *(float *)(v33 + 4 * v17)));
              ++v32;
            }
            while (v14 != v32);
          }
          v34 = rint(v30);
          LODWORD(result) = (uint64_t)v34 & ~((int)(uint64_t)v34 >> 31);
          if ((int)result >= 0xFFFF)
            result = 0xFFFFLL;
          else
            result = result;
          *(_WORD *)(a3 + 2 * v17++) = result;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF070;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E13198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBF0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEBF0;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t *v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  int32x4_t v30;
  double v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  uint64_t v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t *v49;
  double *v50;
  uint64_t v51;
  double *v52;
  double v53;
  uint64_t v54;
  int32x4_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  int v62;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (double *)(*(_QWORD *)(result + 32) + 8 * (v7 >> 1));
  v11 = *(double *)(result + 120);
  v12 = (uint64_t *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v36 = a4;
      v37 = v9 + 1;
      v38 = a2 + 8 * v9 - 8;
      v39 = 8 * v37;
      v40.i64[0] = 0xFFFF0000FFFFLL;
      v40.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        if (a6 >= 4)
        {
          v41 = 0;
          v42 = *v10;
          result = *v12;
          do
          {
            v43 = (double *)(result + 8 * v41);
            v44 = v11 + v42 * *v43;
            v45 = v11 + v42 * v43[1];
            v46 = v11 + v42 * v43[2];
            v47 = v11 + v42 * v43[3];
            if (v6 >= 2)
            {
              v48 = 8;
              v49 = (uint64_t *)v38;
              do
              {
                v50 = (double *)(v12[(unint64_t)v48 / 8] + 8 * v41);
                v51 = *v49--;
                v52 = (double *)(v51 + 8 * v41);
                v53 = v10[(unint64_t)v48 / 8];
                v44 = v44 + v53 * (*v50 + *v52);
                v45 = v45 + v53 * (v50[1] + v52[1]);
                v46 = v46 + v53 * (v50[2] + v52[2]);
                v47 = v47 + v53 * (v50[3] + v52[3]);
                v48 += 8;
              }
              while (v39 != v48);
            }
            v54 = (uint64_t)rint(v45);
            v55.i32[0] = (uint64_t)rint(v44);
            v55.i32[1] = v54;
            v55.i64[1] = __PAIR64__((uint64_t)rint(v47), (uint64_t)rint(v46));
            *(int16x4_t *)(a3 + 2 * v41) = vmovn_s32(vminq_s32(vmaxq_s32(v55, (int32x4_t)0), v40));
            v41 += 4;
          }
          while (v41 <= a6 - 4);
          v41 = v41;
        }
        else
        {
          v41 = 0;
        }
        if ((int)v41 < a6)
        {
          v56 = *v10;
          result = *v12;
          do
          {
            v57 = v11 + v56 * *(double *)(result + 8 * v41);
            if (v6 >= 2)
            {
              v58 = 8;
              v59 = (uint64_t *)v38;
              do
              {
                v60 = *v59--;
                v57 = v57
                    + v10[(unint64_t)v58 / 8]
                    * (*(double *)(v12[(unint64_t)v58 / 8] + 8 * v41) + *(double *)(v60 + 8 * v41));
                v58 += 8;
              }
              while (v39 != v58);
            }
            v61 = rint(v57);
            v62 = (uint64_t)v61 & ~((int)(uint64_t)v61 >> 31);
            if (v62 >= 0xFFFF)
              LOWORD(v62) = -1;
            *(_WORD *)(a3 + 2 * v41++) = v62;
          }
          while (v41 != a6);
        }
        a3 += v36;
        ++v12;
        v38 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = v9 + 1;
    v15 = a2 + 8 * v9 - 8;
    v16 = 8 * v14;
    v17.i64[0] = 0xFFFF0000FFFFLL;
    v17.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        v18 = 0;
        do
        {
          v19 = v11;
          v20 = v11;
          v21 = v11;
          v22 = v11;
          if (v6 >= 2)
          {
            v23 = 8;
            v24 = (uint64_t *)v15;
            v22 = v11;
            v21 = v11;
            v20 = v11;
            v19 = v11;
            do
            {
              v25 = (double *)(v12[(unint64_t)v23 / 8] + 8 * v18);
              v26 = *v24--;
              v27 = (double *)(v26 + 8 * v18);
              v28 = v10[(unint64_t)v23 / 8];
              v19 = v19 + v28 * (*v25 - *v27);
              v20 = v20 + v28 * (v25[1] - v27[1]);
              v21 = v21 + v28 * (v25[2] - v27[2]);
              v22 = v22 + v28 * (v25[3] - v27[3]);
              v23 += 8;
            }
            while (v16 != v23);
          }
          v29 = (uint64_t)rint(v22);
          v30.i32[0] = (uint64_t)rint(v19);
          v30.i32[1] = (uint64_t)rint(v20);
          result = 2 * v18;
          v30.i32[2] = (uint64_t)rint(v21);
          v30.i32[3] = v29;
          *(int16x4_t *)(a3 + 2 * v18) = vmovn_s32(vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v17));
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        v18 = v18;
      }
      else
      {
        v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          v31 = v11;
          if (v6 >= 2)
          {
            v32 = 8;
            v33 = (uint64_t *)v15;
            v31 = v11;
            do
            {
              v34 = *v33--;
              v31 = v31
                  + v10[(unint64_t)v32 / 8]
                  * (*(double *)(v12[(unint64_t)v32 / 8] + 8 * v18) - *(double *)(v34 + 8 * v18));
              v32 += 8;
            }
            while (v16 != v32);
          }
          v35 = rint(v31);
          LODWORD(result) = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          if ((int)result >= 0xFFFF)
            result = 0xFFFFLL;
          else
            result = result;
          *(_WORD *)(a3 + 2 * v18++) = result;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF0B8;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E137A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  cv::Mat *v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24DBEF118;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (cv::Mat *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2)
      goto LABEL_20;
    v10 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(unsigned int **)(a1 + 40);
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v9;
      }
      while (v15 < v17);
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v17 > 2)
        goto LABEL_18;
    }
    v18 = *((_DWORD *)a2 + 1);
    if (v18 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = *(_QWORD **)(a1 + 88);
      *v20 = *v19;
      v20[1] = v19[1];
LABEL_19:
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 7);
      goto LABEL_20;
    }
LABEL_18:
    cv::Mat::copySize(v8, a2);
    goto LABEL_19;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v28, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v28);
LABEL_20:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v22 != 1 && v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v26, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v28, 4294967081, v27, v26, __p, 2460);
    cv::error((cv *)v28, v23);
  }
  return a1;
}

void sub_219E13A8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat *v27;

  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEF118;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEF118;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEF118;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEF118;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  const float *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  const float *v22;
  int32x4_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  const float *v39;
  int32x4_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v7 >> 1));
  v11 = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v28 = a4;
      v29 = (v9 + 1);
      v30 = vdupq_n_s32(v11);
      v31 = a2 + 8 * v9 - 8;
      result = 0x7FFFLL;
      do
      {
        if (a6 >= 4)
        {
          v32 = 0;
          v33 = *v12;
          v34 = (int32x4_t)vld1q_dup_f32(v10);
          do
          {
            v35 = vmlaq_s32(v30, *(int32x4_t *)(v33 + 4 * v32), v34);
            if (v6 >= 2)
            {
              v36 = (uint64_t *)v31;
              v37 = 1;
              do
              {
                v38 = *v36--;
                v39 = &v10[v37];
                v40 = (int32x4_t)vld1q_dup_f32(v39);
                v35 = vmlaq_s32(v35, vaddq_s32(*(int32x4_t *)(v38 + 4 * v32), *(int32x4_t *)(v12[v37++] + 4 * v32)), v40);
              }
              while (v29 != v37);
            }
            *(int16x4_t *)(a3 + 2 * v32) = vqmovn_s32(v35);
            v32 += 4;
          }
          while (v32 <= a6 - 4);
          v32 = v32;
        }
        else
        {
          v32 = 0;
        }
        if ((int)v32 < a6)
        {
          v41 = *v10;
          v42 = *v12;
          do
          {
            v43 = v11 + *(_DWORD *)(v42 + 4 * v32) * LODWORD(v41);
            if (v6 >= 2)
            {
              v44 = (uint64_t *)v31;
              v45 = 1;
              do
              {
                v46 = *v44--;
                v43 += (*(_DWORD *)(v46 + 4 * v32) + *(_DWORD *)(v12[v45] + 4 * v32)) * LODWORD(v10[v45]);
                ++v45;
              }
              while (v29 != v45);
            }
            if (v43 <= -32768)
              v43 = -32768;
            if (v43 >= 0x7FFF)
              LOWORD(v43) = 0x7FFF;
            *(_WORD *)(a3 + 2 * v32++) = v43;
          }
          while (v32 != a6);
        }
        a3 += v28;
        ++v12;
        v31 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = (v9 + 1);
    v15 = vdupq_n_s32(v11);
    v16 = a2 + 8 * v9 - 8;
    result = 0x7FFFLL;
    do
    {
      if (a6 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = v15;
          if (v6 >= 2)
          {
            v19 = (uint64_t *)v16;
            v20 = 1;
            v18 = v15;
            do
            {
              v21 = *v19--;
              v22 = &v10[v20];
              v23 = (int32x4_t)vld1q_dup_f32(v22);
              v18 = vmlaq_s32(v18, vsubq_s32(*(int32x4_t *)(v12[v20++] + 4 * v17), *(int32x4_t *)(v21 + 4 * v17)), v23);
            }
            while (v14 != v20);
          }
          *(int16x4_t *)(a3 + 2 * v17) = vqmovn_s32(v18);
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          v24 = v11;
          if (v6 >= 2)
          {
            v25 = (uint64_t *)v16;
            v26 = 1;
            v24 = v11;
            do
            {
              v27 = *v25--;
              v24 += (*(_DWORD *)(v12[v26] + 4 * v17) - *(_DWORD *)(v27 + 4 * v17)) * LODWORD(v10[v26]);
              ++v26;
            }
            while (v14 != v26);
          }
          if (v24 <= -32768)
            v24 = -32768;
          if (v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v17++) = v24;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEF118;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  const float *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t i;
  const float *v16;
  int32x4_t v17;
  float v18;
  int v19;
  uint64_t j;

  if (a5)
  {
    v6 = *(const float **)(result + 32);
    v7 = *(_DWORD *)(result + 116);
    v8 = *(unsigned int *)(result + 8);
    v9 = a4;
    v10 = vdupq_n_s32(v7);
    do
    {
      if (a6 >= 4)
      {
        v11 = 0;
        v12 = *a2;
        v13 = (int32x4_t)vld1q_dup_f32(v6);
        do
        {
          v14 = vmlaq_s32(v10, *(int32x4_t *)(v12 + 4 * v11), v13);
          if ((int)v8 >= 2)
          {
            for (i = 1; i != v8; ++i)
            {
              v16 = &v6[i];
              v17 = (int32x4_t)vld1q_dup_f32(v16);
              v14 = vmlaq_s32(v14, *(int32x4_t *)(a2[i] + 4 * v11), v17);
            }
          }
          result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v14);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < a6)
      {
        v18 = *v6;
        result = *a2;
        do
        {
          v19 = v7 + *(_DWORD *)(result + 4 * v11) * LODWORD(v18);
          if ((int)v8 >= 2)
          {
            for (j = 1; j != v8; ++j)
              v19 += *(_DWORD *)(a2[j] + 4 * v11) * LODWORD(v6[j]);
          }
          if (v19 <= -32768)
            v19 = -32768;
          if (v19 >= 0x7FFF)
            LOWORD(v19) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v11++) = v19;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF148;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E142D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC38;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC38;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t *v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  int32x4_t v27;
  float v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = (uint64_t)v8 >> 1;
  v11 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v33 = a4;
      v34 = (v10 + 1);
      v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v36 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          result = 0;
          v37 = *v12;
          v38 = vld1q_dup_f32(v11);
          do
          {
            v39 = vmlaq_f32(v35, *(float32x4_t *)(v37 + 4 * result), v38);
            if (v7 >= 2)
            {
              v40 = (uint64_t *)v36;
              v41 = 1;
              do
              {
                v42 = *v40--;
                v39 = vmlaq_n_f32(v39, vaddq_f32(*(float32x4_t *)(v12[v41] + 4 * result), *(float32x4_t *)(v42 + 4 * result)), v11[v41]);
                ++v41;
              }
              while (v34 != v41);
            }
            v39.i32[0] = (uint64_t)rint(v39.f32[0]);
            v39.i32[1] = (uint64_t)rint(v39.f32[1]);
            v39.i32[2] = (uint64_t)rint(v39.f32[2]);
            v39.i32[3] = (uint64_t)rint(v39.f32[3]);
            *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32((int32x4_t)v39);
            result += 4;
          }
          while (result <= a6 - 4);
          result = result;
        }
        else
        {
          result = 0;
        }
        if ((int)result < a6)
        {
          v43 = *v11;
          v44 = *v12;
          do
          {
            v45 = *(float *)&a7 + (float)(v43 * *(float *)(v44 + 4 * result));
            if (v7 >= 2)
            {
              v46 = (uint64_t *)v36;
              v47 = 1;
              do
              {
                v48 = *v46--;
                v45 = v45
                    + (float)(v11[v47] * (float)(*(float *)(v12[v47] + 4 * result) + *(float *)(v48 + 4 * result)));
                ++v47;
              }
              while (v34 != v47);
            }
            v49 = (uint64_t)rint(v45);
            if ((int)v49 <= -32768)
              LODWORD(v49) = -32768;
            if ((int)v49 >= 0x7FFF)
              LOWORD(v49) = 0x7FFF;
            *(_WORD *)(a3 + 2 * result++) = v49;
          }
          while (result != a6);
        }
        a3 += v33;
        ++v12;
        v36 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = (v10 + 1);
    v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        result = 0;
        do
        {
          v16 = *(float *)&a7;
          v17 = *(float *)&a7;
          v18 = *(float *)&a7;
          v19 = *(float *)&a7;
          if (v7 >= 2)
          {
            v20 = (uint64_t *)v15;
            v21 = 1;
            v19 = *(float *)&a7;
            v18 = *(float *)&a7;
            v17 = *(float *)&a7;
            v16 = *(float *)&a7;
            do
            {
              v22 = (float *)(v12[v21] + 4 * result);
              v23 = *v20--;
              v24 = (float *)(v23 + 4 * result);
              v25 = v11[v21];
              v16 = v16 + (float)(v25 * (float)(*v22 - *v24));
              v17 = v17 + (float)(v25 * (float)(v22[1] - v24[1]));
              v18 = v18 + (float)(v25 * (float)(v22[2] - v24[2]));
              v19 = v19 + (float)(v25 * (float)(v22[3] - v24[3]));
              ++v21;
            }
            while (v14 != v21);
          }
          v26 = (uint64_t)rint(v19);
          v27.i32[0] = (uint64_t)rint(v16);
          v27.i32[1] = (uint64_t)rint(v17);
          v27.i32[2] = (uint64_t)rint(v18);
          v27.i32[3] = v26;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v27);
          result += 4;
        }
        while (result <= a6 - 4);
        result = result;
      }
      else
      {
        result = 0;
      }
      if ((int)result < a6)
      {
        do
        {
          v28 = *(float *)&a7;
          if (v7 >= 2)
          {
            v29 = (uint64_t *)v15;
            v30 = 1;
            v28 = *(float *)&a7;
            do
            {
              v31 = *v29--;
              v28 = v28 + (float)(v11[v30] * (float)(*(float *)(v12[v30] + 4 * result) - *(float *)(v31 + 4 * result)));
              ++v30;
            }
            while (v14 != v30);
          }
          v32 = (uint64_t)rint(v28);
          if ((int)v32 <= -32768)
            LODWORD(v32) = -32768;
          if ((int)v32 >= 0x7FFF)
            LOWORD(v32) = 0x7FFF;
          *(_WORD *)(a3 + 2 * result++) = v32;
        }
        while (result != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF190;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E148D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC80;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEEC80;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  uint64_t v27;
  int32x4_t v28;
  double v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  double *v47;
  uint64_t v48;
  double *v49;
  double v50;
  uint64_t v51;
  int32x4_t v52;
  double v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (double *)(*(_QWORD *)(result + 32) + 8 * (v7 >> 1));
  v11 = *(double *)(result + 120);
  v12 = (uint64_t *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v34 = a4;
      v35 = v9 + 1;
      v36 = a2 + 8 * v9 - 8;
      v37 = 8 * v35;
      do
      {
        if (a6 >= 4)
        {
          result = 0;
          v38 = *v10;
          v39 = *v12;
          do
          {
            v40 = (double *)(v39 + 8 * result);
            v41 = v11 + v38 * *v40;
            v42 = v11 + v38 * v40[1];
            v43 = v11 + v38 * v40[2];
            v44 = v11 + v38 * v40[3];
            if (v6 >= 2)
            {
              v45 = 8;
              v46 = (uint64_t *)v36;
              do
              {
                v47 = (double *)(v12[(unint64_t)v45 / 8] + 8 * result);
                v48 = *v46--;
                v49 = (double *)(v48 + 8 * result);
                v50 = v10[(unint64_t)v45 / 8];
                v41 = v41 + v50 * (*v47 + *v49);
                v42 = v42 + v50 * (v47[1] + v49[1]);
                v43 = v43 + v50 * (v47[2] + v49[2]);
                v44 = v44 + v50 * (v47[3] + v49[3]);
                v45 += 8;
              }
              while (v37 != v45);
            }
            v51 = (uint64_t)rint(v42);
            v52.i32[0] = (uint64_t)rint(v41);
            v52.i32[1] = v51;
            v52.i64[1] = __PAIR64__((uint64_t)rint(v44), (uint64_t)rint(v43));
            *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v52);
            result += 4;
          }
          while (result <= a6 - 4);
          result = result;
        }
        else
        {
          result = 0;
        }
        if ((int)result < a6)
        {
          v53 = *v10;
          v54 = *v12;
          do
          {
            v55 = v11 + v53 * *(double *)(v54 + 8 * result);
            if (v6 >= 2)
            {
              v56 = 8;
              v57 = (uint64_t *)v36;
              do
              {
                v58 = *v57--;
                v55 = v55
                    + v10[(unint64_t)v56 / 8]
                    * (*(double *)(v12[(unint64_t)v56 / 8] + 8 * result) + *(double *)(v58 + 8 * result));
                v56 += 8;
              }
              while (v37 != v56);
            }
            v59 = (uint64_t)rint(v55);
            if ((int)v59 <= -32768)
              LODWORD(v59) = -32768;
            if ((int)v59 >= 0x7FFF)
              LOWORD(v59) = 0x7FFF;
            *(_WORD *)(a3 + 2 * result++) = v59;
          }
          while (result != a6);
        }
        a3 += v34;
        ++v12;
        v36 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = v9 + 1;
    v15 = a2 + 8 * v9 - 8;
    v16 = 8 * v14;
    do
    {
      if (a6 >= 4)
      {
        result = 0;
        do
        {
          v17 = v11;
          v18 = v11;
          v19 = v11;
          v20 = v11;
          if (v6 >= 2)
          {
            v21 = 8;
            v22 = (uint64_t *)v15;
            v20 = v11;
            v19 = v11;
            v18 = v11;
            v17 = v11;
            do
            {
              v23 = (double *)(v12[(unint64_t)v21 / 8] + 8 * result);
              v24 = *v22--;
              v25 = (double *)(v24 + 8 * result);
              v26 = v10[(unint64_t)v21 / 8];
              v17 = v17 + v26 * (*v23 - *v25);
              v18 = v18 + v26 * (v23[1] - v25[1]);
              v19 = v19 + v26 * (v23[2] - v25[2]);
              v20 = v20 + v26 * (v23[3] - v25[3]);
              v21 += 8;
            }
            while (v16 != v21);
          }
          v27 = (uint64_t)rint(v20);
          v28.i32[0] = (uint64_t)rint(v17);
          v28.i32[1] = (uint64_t)rint(v18);
          v28.i32[2] = (uint64_t)rint(v19);
          v28.i32[3] = v27;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v28);
          result += 4;
        }
        while (result <= a6 - 4);
        result = result;
      }
      else
      {
        result = 0;
      }
      if ((int)result < a6)
      {
        do
        {
          v29 = v11;
          if (v6 >= 2)
          {
            v30 = 8;
            v31 = (uint64_t *)v15;
            v29 = v11;
            do
            {
              v32 = *v31--;
              v29 = v29
                  + v10[(unint64_t)v30 / 8]
                  * (*(double *)(v12[(unint64_t)v30 / 8] + 8 * result) - *(double *)(v32 + 8 * result));
              v30 += 8;
            }
            while (v16 != v30);
          }
          v33 = (uint64_t)rint(v29);
          if ((int)v33 <= -32768)
            LODWORD(v33) = -32768;
          if ((int)v33 >= 0x7FFF)
            LOWORD(v33) = 0x7FFF;
          *(_WORD *)(a3 + 2 * result++) = v33;
        }
        while (result != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF1D8;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E14ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEECC8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEECC8;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = (uint64_t)v8 >> 1;
  v11 = (float *)(*(_QWORD *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v12 = (uint64_t *)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (a5)
    {
      v23 = a4;
      v24 = (v10 + 1);
      v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v26 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          v27 = 0;
          v28 = *v12;
          do
          {
            result = 4 * v27;
            v29 = vmlaq_n_f32(v25, *(float32x4_t *)(v28 + 4 * v27), *v11);
            if (v7 >= 2)
            {
              v30 = (uint64_t *)v26;
              v31 = 1;
              do
              {
                v32 = *v30--;
                v29 = vmlaq_n_f32(v29, vaddq_f32(*(float32x4_t *)(v12[v31] + 4 * v27), *(float32x4_t *)(v32 + 4 * v27)), v11[v31]);
                ++v31;
              }
              while (v24 != v31);
            }
            *(float32x4_t *)(a3 + 4 * v27) = v29;
            v27 += 4;
          }
          while (v27 <= a6 - 4);
          v27 = v27;
        }
        else
        {
          v27 = 0;
        }
        if ((int)v27 < a6)
        {
          v33 = *v12;
          do
          {
            v34 = *(float *)&a7 + (float)(*v11 * *(float *)(v33 + 4 * v27));
            if (v7 >= 2)
            {
              result = v26;
              v35 = 1;
              do
              {
                v36 = *(_QWORD *)result;
                result -= 8;
                v34 = v34 + (float)(v11[v35] * (float)(*(float *)(v12[v35] + 4 * v27) + *(float *)(v36 + 4 * v27)));
                ++v35;
              }
              while (v24 != v35);
            }
            *(float *)(a3 + 4 * v27++) = v34;
          }
          while (v27 != a6);
        }
        a3 += v23;
        ++v12;
        v26 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = (v10 + 1);
    v14 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        v16 = 0;
        do
        {
          v17 = (float32x4_t)v14;
          if (v7 >= 2)
          {
            result = v15;
            v18 = 1;
            v17 = (float32x4_t)v14;
            do
            {
              v19 = *(_QWORD *)result;
              result -= 8;
              v17 = vmlaq_n_f32(v17, vsubq_f32(*(float32x4_t *)(v12[v18] + 4 * v16), *(float32x4_t *)(v19 + 4 * v16)), v11[v18]);
              ++v18;
            }
            while (v13 != v18);
          }
          *(float32x4_t *)(a3 + 4 * v16) = v17;
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        v16 = v16;
      }
      else
      {
        v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          v20 = *(float *)&a7;
          if (v7 >= 2)
          {
            v21 = (uint64_t *)v15;
            result = 1;
            v20 = *(float *)&a7;
            do
            {
              v22 = *v21--;
              v20 = v20 + (float)(v11[result] * (float)(*(float *)(v12[result] + 4 * v16) - *(float *)(v22 + 4 * v16)));
              ++result;
            }
            while (v13 != result);
          }
          *(float *)(a3 + 4 * v16++) = v20;
        }
        while (v16 != a6);
      }
      a3 += a4;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7;
  const cv::Exception *v8;
  void *__p[2];
  void *v11[2];
  void *v12[2];
  _BYTE v13[120];

  v7 = cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_24DBEF220;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_219E153AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEED10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)a1 = &off_24DBEED10;
  v3 = *(unsigned int **)(a1 + 40);
  if (v3)
  {
    v4 = (cv::Mat *)(a1 + 16);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void ***)(a1 + 88);
  if (v9 != (void **)(a1 + 96))
    cv::fastFree(v9, a2);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  uint64_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t *v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t *v49;
  uint64_t v50;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  v9 = (uint64_t)v7 >> 1;
  v10 = (double *)(*(_QWORD *)(result + 32) + 8 * (v7 >> 1));
  v11 = *(uint64_t *)(result + 120);
  v12 = (uint64_t *)(a2 + 8 * v8);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v31 = a4;
      v32 = v9 + 1;
      v33 = (float64x2_t)vdupq_lane_s64(v11, 0);
      v34 = a2 + 8 * v9 - 8;
      v35 = 8 * v32;
      do
      {
        if (a6 >= 4)
        {
          v36 = 0;
          v37 = *v12;
          do
          {
            v38 = (float64x2_t *)(v37 + 8 * v36);
            v39 = vmlaq_n_f64(v33, *v38, *v10);
            v40 = vmlaq_n_f64(v33, v38[1], *v10);
            if (v6 >= 2)
            {
              v41 = 8;
              v42 = (uint64_t *)v34;
              do
              {
                v43 = (float64x2_t *)(v12[(unint64_t)v41 / 8] + 8 * v36);
                v44 = *v42--;
                v45 = (float64x2_t *)(v44 + 8 * v36);
                v46 = v10[(unint64_t)v41 / 8];
                v39 = vmlaq_n_f64(v39, vaddq_f64(*v43, *v45), v46);
                v40 = vmlaq_n_f64(v40, vaddq_f64(v43[1], v45[1]), v46);
                v41 += 8;
              }
              while (v35 != v41);
            }
            *(float64x2_t *)(a3 + 8 * v36) = v39;
            result = (8 * v36) | 0x10;
            *(float64x2_t *)(a3 + result) = v40;
            v36 += 4;
          }
          while (v36 <= a6 - 4);
          v36 = v36;
        }
        else
        {
          v36 = 0;
        }
        if ((int)v36 < a6)
        {
          v47 = *v12;
          do
          {
            v48 = *(double *)&v11 + *v10 * *(double *)(v47 + 8 * v36);
            if (v6 >= 2)
            {
              result = 8;
              v49 = (uint64_t *)v34;
              do
              {
                v50 = *v49--;
                v48 = v48
                    + *(double *)((char *)v10 + result)
                    * (*(double *)(*(uint64_t *)((char *)v12 + result) + 8 * v36) + *(double *)(v50 + 8 * v36));
                result += 8;
              }
              while (v35 != result);
            }
            *(double *)(a3 + 8 * v36++) = v48;
          }
          while (v36 != a6);
        }
        a3 += v31;
        ++v12;
        v34 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v13 = a4;
    v14 = v9 + 1;
    v15 = vdupq_lane_s64(v11, 0);
    v16 = a2 + 8 * v9 - 8;
    v17 = 8 * v14;
    do
    {
      if (a6 >= 4)
      {
        v18 = 0;
        do
        {
          v19 = *(double *)&v11;
          v20 = *(double *)&v11;
          v21 = (float64x2_t)v15;
          if (v6 >= 2)
          {
            v22 = 8;
            v23 = (uint64_t *)v16;
            v20 = *(double *)&v11;
            v19 = *(double *)&v11;
            v21 = (float64x2_t)v15;
            do
            {
              v24 = *v23--;
              v25 = v12[(unint64_t)v22 / 8] + 8 * v18;
              v26 = v24 + 8 * v18;
              v27 = v10[(unint64_t)v22 / 8];
              v19 = v19 + v27 * (*(double *)v25 - *(double *)v26);
              v21 = vmlaq_n_f64(v21, vsubq_f64(*(float64x2_t *)(v25 + 8), *(float64x2_t *)(v26 + 8)), v27);
              v20 = v20 + v27 * (*(double *)(v25 + 24) - *(double *)(v26 + 24));
              v22 += 8;
            }
            while (v17 != v22);
          }
          *(double *)(a3 + 8 * v18) = v19;
          result = (8 * v18) | 8;
          *(float64x2_t *)(a3 + result) = v21;
          *(double *)(a3 + ((8 * v18) | 0x18)) = v20;
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        v18 = v18;
      }
      else
      {
        v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          v28 = *(double *)&v11;
          if (v6 >= 2)
          {
            v29 = 8;
            result = v16;
            v28 = *(double *)&v11;
            do
            {
              v30 = *(_QWORD *)result;
              result -= 8;
              v28 = v28
                  + v10[(unint64_t)v29 / 8]
                  * (*(double *)(v12[(unint64_t)v29 / 8] + 8 * v18) - *(double *)(v30 + 8 * v18));
              v29 += 8;
            }
            while (v17 != v29);
          }
          *(double *)(a3 + 8 * v18++) = v28;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF268;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E15970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF268;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF268;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  float v13;
  float v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int32x4_t v39;
  int16x8_t v40;
  float v41;
  uint64_t v42;
  float *v43;
  uint64_t *v44;
  float v45;
  float v46;
  uint64_t v47;
  double v48;
  BOOL v49;

  if (a5 >= 1)
  {
    v14 = *(float *)(result + 96);
    v15 = *(_DWORD **)(result + 48);
    v16 = *(_QWORD **)(result + 72);
    v17 = (a7 * a6);
    v18 = *(_QWORD *)(result + 24);
    v19 = (unint64_t)(*(_QWORD *)(result + 32) - v18) >> 3;
    v20 = a4;
    v21 = v18 + 4;
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    do
    {
      v23 = v19;
      result = v21;
      v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(_QWORD *)(a2 + 8 * *(int *)result) + *(int *)(result - 4) * (uint64_t)a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        v25 = 0;
        do
        {
          v26 = v14;
          v27 = v14;
          v28 = v14;
          v29 = v14;
          if ((int)v19 >= 1)
          {
            v30 = v19;
            v31 = v16;
            v32 = v15;
            v29 = v14;
            v28 = v14;
            v27 = v14;
            v26 = v14;
            do
            {
              v33 = *v31++;
              v34 = (_BYTE *)(v33 + v25);
              LODWORD(v33) = *v32++;
              LOBYTE(v13) = *v34;
              *(float *)&v35 = (float)LODWORD(v13);
              v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOBYTE(v35) = v34[1];
              *(float *)&v36 = (float)v35;
              v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOBYTE(v36) = v34[2];
              *(float *)&v37 = (float)v36;
              v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOBYTE(v37) = v34[3];
              v13 = (float)v37;
              v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          result = (uint64_t)rint(v26);
          a13 = rint(v27);
          v38 = (uint64_t)rint(v29);
          v39.i32[0] = result;
          v39.i32[1] = (uint64_t)a13;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          v40 = (int16x8_t)vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22);
          *(int16x4_t *)v40.i8 = vmovn_s32((int32x4_t)v40);
          *(_DWORD *)(a3 + v25) = vmovn_s16(v40).u32[0];
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        v25 = v25;
      }
      else
      {
        v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          v41 = v14;
          if ((int)v19 >= 1)
          {
            v42 = v19;
            v43 = (float *)v15;
            v44 = v16;
            v41 = v14;
            do
            {
              v45 = *v43++;
              v46 = v45;
              v47 = *v44++;
              LOBYTE(a13) = *(_BYTE *)(v47 + v25);
              *(float *)&a13 = (float)LODWORD(a13);
              v41 = v41 + (float)(v46 * *(float *)&a13);
              --v42;
            }
            while (v42);
          }
          v48 = rint(v41);
          LODWORD(result) = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
          if ((int)result >= 255)
            result = 255;
          else
            result = result;
          *(_BYTE *)(a3 + v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      v49 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v49 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF2B0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E15E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF2B0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF2B0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  float v13;
  float v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int32x4_t v39;
  float v40;
  uint64_t v41;
  float *v42;
  uint64_t *v43;
  float v44;
  float v45;
  uint64_t v46;
  double v47;
  BOOL v48;

  if (a5 >= 1)
  {
    v14 = *(float *)(result + 96);
    v15 = *(_DWORD **)(result + 48);
    v16 = *(_QWORD **)(result + 72);
    v17 = (a7 * a6);
    v18 = *(_QWORD *)(result + 24);
    v19 = (unint64_t)(*(_QWORD *)(result + 32) - v18) >> 3;
    v20 = a4;
    v21 = v18 + 4;
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v23 = v19;
      result = v21;
      v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(_QWORD *)(a2 + 8 * *(int *)result) + *(int *)(result - 4) * (uint64_t)a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        v25 = 0;
        do
        {
          v26 = v14;
          v27 = v14;
          v28 = v14;
          v29 = v14;
          if ((int)v19 >= 1)
          {
            v30 = v19;
            v31 = v16;
            v32 = v15;
            v29 = v14;
            v28 = v14;
            v27 = v14;
            v26 = v14;
            do
            {
              v33 = *v31++;
              v34 = (_BYTE *)(v33 + v25);
              LODWORD(v33) = *v32++;
              LOBYTE(v13) = *v34;
              *(float *)&v35 = (float)LODWORD(v13);
              v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOBYTE(v35) = v34[1];
              *(float *)&v36 = (float)v35;
              v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOBYTE(v36) = v34[2];
              *(float *)&v37 = (float)v36;
              v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOBYTE(v37) = v34[3];
              v13 = (float)v37;
              v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          a13 = rint(v27);
          v38 = (uint64_t)rint(v29);
          v39.i32[0] = (uint64_t)rint(v26);
          v39.i32[1] = (uint64_t)a13;
          result = 2 * v25;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          *(int16x4_t *)(a3 + 2 * v25) = vmovn_s32(vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22));
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        v25 = v25;
      }
      else
      {
        v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          v40 = v14;
          if ((int)v19 >= 1)
          {
            v41 = v19;
            v42 = (float *)v15;
            v43 = v16;
            v40 = v14;
            do
            {
              v44 = *v42++;
              v45 = v44;
              v46 = *v43++;
              LOBYTE(a13) = *(_BYTE *)(v46 + v25);
              *(float *)&a13 = (float)LODWORD(a13);
              v40 = v40 + (float)(v45 * *(float *)&a13);
              --v41;
            }
            while (v41);
          }
          v47 = rint(v40);
          LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if ((int)result >= 0xFFFF)
            result = 0xFFFFLL;
          else
            result = result;
          *(_WORD *)(a3 + 2 * v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      v48 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v48 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF2F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E16298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF2F8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF2F8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, float a14)
{
  float v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t *v30;
  _DWORD *v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int32x4_t v38;
  float v39;
  uint64_t v40;
  float *v41;
  uint64_t *v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;

  if (a5 >= 1)
  {
    v14 = *(float *)(result + 96);
    v15 = *(_DWORD **)(result + 48);
    v16 = (a7 * a6);
    v17 = *(_QWORD *)(result + 24);
    v18 = (unint64_t)(*(_QWORD *)(result + 32) - v17) >> 3;
    v19 = a4;
    v20 = *(_QWORD **)(result + 72);
    v21 = (int *)(v17 + 4);
    do
    {
      v22 = v18;
      v23 = v21;
      v24 = v20;
      if ((int)v18 >= 1)
      {
        do
        {
          *v24++ = *(_QWORD *)(a2 + 8 * *v23) + *(v23 - 1) * (uint64_t)a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v16 >= 4)
      {
        result = 0;
        do
        {
          v25 = v14;
          v26 = v14;
          v27 = v14;
          v28 = v14;
          if ((int)v18 >= 1)
          {
            v29 = v18;
            v30 = v20;
            v31 = v15;
            v28 = v14;
            v27 = v14;
            v26 = v14;
            v25 = v14;
            do
            {
              v32 = *v30++;
              v33 = (_BYTE *)(v32 + result);
              LODWORD(v32) = *v31++;
              LOBYTE(a14) = *v33;
              *(float *)&v34 = (float)LODWORD(a14);
              v25 = v25 + (float)(*(float *)&v32 * *(float *)&v34);
              LOBYTE(v34) = v33[1];
              *(float *)&v35 = (float)v34;
              v26 = v26 + (float)(*(float *)&v32 * *(float *)&v35);
              LOBYTE(v35) = v33[2];
              *(float *)&v36 = (float)v35;
              v27 = v27 + (float)(*(float *)&v32 * *(float *)&v36);
              LOBYTE(v36) = v33[3];
              a14 = (float)v36;
              v28 = v28 + (float)(*(float *)&v32 * a14);
              --v29;
            }
            while (v29);
          }
          a11 = rint(v26);
          v37 = (uint64_t)rint(v28);
          v38.i32[0] = (uint64_t)rint(v25);
          v38.i32[1] = (uint64_t)a11;
          v38.i32[2] = (uint64_t)rint(v27);
          v38.i32[3] = v37;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v38);
          result += 4;
        }
        while (result <= (int)v16 - 4);
        result = result;
      }
      else
      {
        result = 0;
      }
      if ((int)result < (int)v16)
      {
        do
        {
          v39 = v14;
          if ((int)v18 >= 1)
          {
            v40 = v18;
            v41 = (float *)v15;
            v42 = v20;
            v39 = v14;
            do
            {
              v43 = *v41++;
              v44 = v43;
              v45 = *v42++;
              LOBYTE(a11) = *(_BYTE *)(v45 + result);
              *(float *)&a11 = (float)LODWORD(a11);
              v39 = v39 + (float)(v44 * *(float *)&a11);
              --v40;
            }
            while (v40);
          }
          v46 = (uint64_t)rint(v39);
          if ((int)v46 <= -32768)
            LODWORD(v46) = -32768;
          if ((int)v46 >= 0x7FFF)
            LOWORD(v46) = 0x7FFF;
          *(_WORD *)(a3 + 2 * result++) = v46;
        }
        while (result != v16);
      }
      a3 += v19;
      a2 += 8;
      v47 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v47 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF340;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E1672C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF340;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF340;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t *cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t *v30;
  float v31;
  float v32;
  uint64_t v33;
  BOOL v34;

  if (a5 >= 1)
  {
    LODWORD(a8) = *((_DWORD *)result + 24);
    v12 = (_DWORD *)result[6];
    v13 = (uint64_t *)result[9];
    v14 = (a7 * a6);
    v15 = result[3];
    v16 = (unint64_t)(result[4] - v15) >> 3;
    v17 = a4;
    v18 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    v19 = (int *)(v15 + 4);
    do
    {
      v20 = v16;
      v21 = v19;
      result = v13;
      if ((int)v16 >= 1)
      {
        do
        {
          *result++ = *(_QWORD *)(a2 + 8 * *v21) + *(v21 - 1) * (uint64_t)a7;
          v21 += 2;
          --v20;
        }
        while (v20);
      }
      if ((int)v14 >= 4)
      {
        v22 = 0;
        do
        {
          v23 = (float32x4_t)v18;
          if ((int)v16 >= 1)
          {
            v24 = v16;
            result = v13;
            v25 = v12;
            v23 = (float32x4_t)v18;
            do
            {
              v27 = *result++;
              v26 = v27;
              LODWORD(v27) = *v25++;
              a12.i32[0] = *(_DWORD *)(v26 + v22);
              a12 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a12.f32)));
              v23 = vmlaq_n_f32(v23, a12, *(float *)&v27);
              --v24;
            }
            while (v24);
          }
          *(float32x4_t *)(a3 + 4 * v22) = v23;
          v22 += 4;
        }
        while (v22 <= (int)v14 - 4);
        v22 = v22;
      }
      else
      {
        v22 = 0;
      }
      if ((int)v22 < (int)v14)
      {
        do
        {
          v28 = *(float *)&a8;
          if ((int)v16 >= 1)
          {
            v29 = v16;
            result = (uint64_t *)v12;
            v30 = v13;
            v28 = *(float *)&a8;
            do
            {
              v31 = *(float *)result;
              result = (uint64_t *)((char *)result + 4);
              v32 = v31;
              v33 = *v30++;
              a12.i8[0] = *(_BYTE *)(v33 + v22);
              a12.f32[0] = (float)a12.u32[0];
              v28 = v28 + (float)(v32 * a12.f32[0]);
              --v29;
            }
            while (v29);
          }
          *(float *)(a3 + 4 * v22++) = v28;
        }
        while (v22 != v14);
      }
      a3 += v17;
      a2 += 8;
      v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_24DBEF388;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E16B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF388;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF388;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

double *cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  _BYTE *v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  uint64_t v42;
  BOOL v43;

  if (a5 >= 1)
  {
    v14 = result[12];
    v15 = (double *)*((_QWORD *)result + 6);
    v16 = (double *)*((_QWORD *)result + 9);
    v17 = (a7 * a6);
    v18 = *((_QWORD *)result + 3);
    v19 = (unint64_t)(*((_QWORD *)result + 4) - v18) >> 3;
    v20 = a4;
    v21 = (int *)(v18 + 4);
    do
    {
      v22 = v19;
      v23 = v21;
      result = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *(_QWORD *)result++ = *(_QWORD *)(a2 + 8 * *v23) + *(v23 - 1) * (uint64_t)a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v17 >= 4)
      {
        v24 = 0;
        do
        {
          v25 = v14;
          a11 = v14;
          v26 = v14;
          v27 = v14;
          if ((int)v19 >= 1)
          {
            v28 = v19;
            v29 = v16;
            v30 = v15;
            v27 = v14;
            v26 = v14;
            a11 = v14;
            v25 = v14;
            do
            {
              v31 = *(_QWORD *)v29++;
              v32 = (_BYTE *)(v31 + v24);
              v33 = *v30++;
              LOBYTE(a14) = *v32;
              *(double *)&v34 = (double)*(unint64_t *)&a14;
              v25 = v25 + v33 * *(double *)&v34;
              LOBYTE(v34) = v32[1];
              *(double *)&v35 = (double)v34;
              a11 = a11 + v33 * *(double *)&v35;
              LOBYTE(v35) = v32[2];
              *(double *)&v36 = (double)v35;
              v26 = v26 + v33 * *(double *)&v36;
              LOBYTE(v36) = v32[3];
              a14 = (double)v36;
              v27 = v27 + v33 * a14;
              --v28;
            }
            while (v28);
          }
          *(double *)(a3 + 8 * v24) = v25;
          *(double *)(a3 + ((8 * v24) | 8)) = a11;
          result = (double *)((8 * v24) | 0x10);
          *(double *)((char *)result + a3) = v26;
          *(double *)(a3 + ((8 * v24) | 0x18)) = v27;
          v24 += 4;
        }
        while (v24 <= (int)v17 - 4);
        v24 = v24;
      }
      else
      {
        v24 = 0;
      }
      if ((int)v24 < (int)v17)
      {
        do
        {
          v37 = v14;
          if ((int)v19 >= 1)
          {
            v38 = v19;
            result = v15;
            v39 = v16;
            v37 = v14;
            do
            {
              v40 = *result++;
              v41 = v40;
              v42 = *(_QWORD *)v39++;
              LOBYTE(a11) = *(_BYTE *)(v42 + v24);
              a11 = (double)*(unint64_t *)&a11;
              v37 = v37 + v41 * a11;
              --v38;
            }
            while (v38);
          }
          *(double *)(a3 + 8 * v24++) = v37;
        }
        while (v24 != v17);
      }
      a3 += v20;
      a2 += 8;
      v43 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v43 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF3D0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E16F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF3D0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF3D0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  float v13;
  float v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  _WORD *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int32x4_t v39;
  float v40;
  uint64_t v41;
  float *v42;
  uint64_t *v43;
  float v44;
  float v45;
  uint64_t v46;
  double v47;
  BOOL v48;

  if (a5 >= 1)
  {
    v14 = *(float *)(result + 96);
    v15 = *(_DWORD **)(result + 48);
    v16 = *(_QWORD **)(result + 72);
    v17 = (a7 * a6);
    v18 = *(_QWORD *)(result + 24);
    v19 = (unint64_t)(*(_QWORD *)(result + 32) - v18) >> 3;
    v20 = a4;
    v21 = v18 + 4;
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v23 = v19;
      result = v21;
      v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(_QWORD *)(a2 + 8 * *(int *)result) + 2 * *(_DWORD *)(result - 4) * a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        v25 = 0;
        do
        {
          v26 = v14;
          v27 = v14;
          v28 = v14;
          v29 = v14;
          if ((int)v19 >= 1)
          {
            v30 = v19;
            v31 = v16;
            v32 = v15;
            v29 = v14;
            v28 = v14;
            v27 = v14;
            v26 = v14;
            do
            {
              v33 = *v31++;
              v34 = (_WORD *)(v33 + 2 * v25);
              LODWORD(v33) = *v32++;
              LOWORD(v13) = *v34;
              *(float *)&v35 = (float)LODWORD(v13);
              v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOWORD(v35) = v34[1];
              *(float *)&v36 = (float)v35;
              v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOWORD(v36) = v34[2];
              *(float *)&v37 = (float)v36;
              v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOWORD(v37) = v34[3];
              v13 = (float)v37;
              v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          a13 = rint(v27);
          v38 = (uint64_t)rint(v29);
          v39.i32[0] = (uint64_t)rint(v26);
          v39.i32[1] = (uint64_t)a13;
          result = 2 * v25;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          *(int16x4_t *)(a3 + 2 * v25) = vmovn_s32(vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22));
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        v25 = v25;
      }
      else
      {
        v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          v40 = v14;
          if ((int)v19 >= 1)
          {
            v41 = v19;
            v42 = (float *)v15;
            v43 = v16;
            v40 = v14;
            do
            {
              v44 = *v42++;
              v45 = v44;
              v46 = *v43++;
              LOWORD(a13) = *(_WORD *)(v46 + 2 * v25);
              *(float *)&a13 = (float)LODWORD(a13);
              v40 = v40 + (float)(v45 * *(float *)&a13);
              --v41;
            }
            while (v41);
          }
          v47 = rint(v40);
          LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if ((int)result >= 0xFFFF)
            result = 0xFFFFLL;
          else
            result = result;
          *(_WORD *)(a3 + 2 * v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      v48 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v48 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF418;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E173F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF418;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF418;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t *cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t *v30;
  float v31;
  float v32;
  uint64_t v33;
  BOOL v34;

  if (a5 >= 1)
  {
    LODWORD(a8) = *((_DWORD *)result + 24);
    v12 = (_DWORD *)result[6];
    v13 = (uint64_t *)result[9];
    v14 = (a7 * a6);
    v15 = result[3];
    v16 = (unint64_t)(result[4] - v15) >> 3;
    v17 = a4;
    v18 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    v19 = (int *)(v15 + 4);
    do
    {
      v20 = v16;
      v21 = v19;
      result = v13;
      if ((int)v16 >= 1)
      {
        do
        {
          *result++ = *(_QWORD *)(a2 + 8 * *v21) + 2 * *(v21 - 1) * a7;
          v21 += 2;
          --v20;
        }
        while (v20);
      }
      if ((int)v14 >= 4)
      {
        v22 = 0;
        do
        {
          v23 = (float32x4_t)v18;
          if ((int)v16 >= 1)
          {
            v24 = v16;
            result = v13;
            v25 = v12;
            v23 = (float32x4_t)v18;
            do
            {
              v27 = *result++;
              v26 = v27;
              LODWORD(v27) = *v25++;
              a12 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(v26 + 2 * v22)));
              v23 = vmlaq_n_f32(v23, a12, *(float *)&v27);
              --v24;
            }
            while (v24);
          }
          *(float32x4_t *)(a3 + 4 * v22) = v23;
          v22 += 4;
        }
        while (v22 <= (int)v14 - 4);
        v22 = v22;
      }
      else
      {
        v22 = 0;
      }
      if ((int)v22 < (int)v14)
      {
        do
        {
          v28 = *(float *)&a8;
          if ((int)v16 >= 1)
          {
            v29 = v16;
            result = (uint64_t *)v12;
            v30 = v13;
            v28 = *(float *)&a8;
            do
            {
              v31 = *(float *)result;
              result = (uint64_t *)((char *)result + 4);
              v32 = v31;
              v33 = *v30++;
              a12.i16[0] = *(_WORD *)(v33 + 2 * v22);
              a12.f32[0] = (float)a12.u32[0];
              v28 = v28 + (float)(v32 * a12.f32[0]);
              --v29;
            }
            while (v29);
          }
          *(float *)(a3 + 4 * v22++) = v28;
        }
        while (v22 != v14);
      }
      a3 += v17;
      a2 += 8;
      v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_24DBEF460;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E177E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF460;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF460;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

double *cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  _WORD *v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  uint64_t v42;
  BOOL v43;

  if (a5 >= 1)
  {
    v14 = result[12];
    v15 = (double *)*((_QWORD *)result + 6);
    v16 = (double *)*((_QWORD *)result + 9);
    v17 = (a7 * a6);
    v18 = *((_QWORD *)result + 3);
    v19 = (unint64_t)(*((_QWORD *)result + 4) - v18) >> 3;
    v20 = a4;
    v21 = (int *)(v18 + 4);
    do
    {
      v22 = v19;
      v23 = v21;
      result = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *(_QWORD *)result++ = *(_QWORD *)(a2 + 8 * *v23) + 2 * *(v23 - 1) * a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v17 >= 4)
      {
        v24 = 0;
        do
        {
          v25 = v14;
          a11 = v14;
          v26 = v14;
          v27 = v14;
          if ((int)v19 >= 1)
          {
            v28 = v19;
            v29 = v16;
            v30 = v15;
            v27 = v14;
            v26 = v14;
            a11 = v14;
            v25 = v14;
            do
            {
              v31 = *(_QWORD *)v29++;
              v32 = (_WORD *)(v31 + 2 * v24);
              v33 = *v30++;
              LOWORD(a14) = *v32;
              *(double *)&v34 = (double)*(unint64_t *)&a14;
              v25 = v25 + v33 * *(double *)&v34;
              LOWORD(v34) = v32[1];
              *(double *)&v35 = (double)v34;
              a11 = a11 + v33 * *(double *)&v35;
              LOWORD(v35) = v32[2];
              *(double *)&v36 = (double)v35;
              v26 = v26 + v33 * *(double *)&v36;
              LOWORD(v36) = v32[3];
              a14 = (double)v36;
              v27 = v27 + v33 * a14;
              --v28;
            }
            while (v28);
          }
          *(double *)(a3 + 8 * v24) = v25;
          *(double *)(a3 + ((8 * v24) | 8)) = a11;
          result = (double *)((8 * v24) | 0x10);
          *(double *)((char *)result + a3) = v26;
          *(double *)(a3 + ((8 * v24) | 0x18)) = v27;
          v24 += 4;
        }
        while (v24 <= (int)v17 - 4);
        v24 = v24;
      }
      else
      {
        v24 = 0;
      }
      if ((int)v24 < (int)v17)
      {
        do
        {
          v37 = v14;
          if ((int)v19 >= 1)
          {
            v38 = v19;
            result = v15;
            v39 = v16;
            v37 = v14;
            do
            {
              v40 = *result++;
              v41 = v40;
              v42 = *(_QWORD *)v39++;
              LOWORD(a11) = *(_WORD *)(v42 + 2 * v24);
              a11 = (double)*(unint64_t *)&a11;
              v37 = v37 + v41 * a11;
              --v38;
            }
            while (v38);
          }
          *(double *)(a3 + 8 * v24++) = v37;
        }
        while (v24 != v17);
      }
      a3 += v20;
      a2 += 8;
      v43 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v43 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF4A8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E17C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF4A8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF4A8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  float v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  int32x4_t v29;
  float v30;
  uint64_t v31;
  float *v32;
  uint64_t *v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;

  if (a5 >= 1)
  {
    v7 = *(float *)(result + 96);
    v8 = *(_DWORD **)(result + 48);
    v9 = (a7 * a6);
    v10 = *(_QWORD *)(result + 24);
    v11 = (unint64_t)(*(_QWORD *)(result + 32) - v10) >> 3;
    v12 = a4;
    v13 = *(_QWORD **)(result + 72);
    v14 = (int *)(v10 + 4);
    do
    {
      v15 = v11;
      v16 = v14;
      v17 = v13;
      if ((int)v11 >= 1)
      {
        do
        {
          *v17++ = *(_QWORD *)(a2 + 8 * *v16) + 2 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v9 >= 4)
      {
        result = 0;
        do
        {
          v18 = v7;
          v19 = v7;
          v20 = v7;
          v21 = v7;
          if ((int)v11 >= 1)
          {
            v22 = v11;
            v23 = v13;
            v24 = v8;
            v21 = v7;
            v20 = v7;
            v19 = v7;
            v18 = v7;
            do
            {
              v26 = *v23++;
              v25 = v26;
              LODWORD(v26) = *v24++;
              v27 = (__int16 *)(v25 + 2 * result);
              v18 = v18 + (float)(*(float *)&v26 * (float)*v27);
              v19 = v19 + (float)(*(float *)&v26 * (float)v27[1]);
              v20 = v20 + (float)(*(float *)&v26 * (float)v27[2]);
              v21 = v21 + (float)(*(float *)&v26 * (float)v27[3]);
              --v22;
            }
            while (v22);
          }
          v28 = (uint64_t)rint(v21);
          v29.i32[0] = (uint64_t)rint(v18);
          v29.i32[1] = (uint64_t)rint(v19);
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v29);
          result += 4;
        }
        while (result <= (int)v9 - 4);
        result = result;
      }
      else
      {
        result = 0;
      }
      if ((int)result < (int)v9)
      {
        do
        {
          v30 = v7;
          if ((int)v11 >= 1)
          {
            v31 = v11;
            v32 = (float *)v8;
            v33 = v13;
            v30 = v7;
            do
            {
              v34 = *v32++;
              v35 = v34;
              v36 = *v33++;
              v30 = v30 + (float)(v35 * (float)*(__int16 *)(v36 + 2 * result));
              --v31;
            }
            while (v31);
          }
          v37 = (uint64_t)rint(v30);
          if ((int)v37 <= -32768)
            LODWORD(v37) = -32768;
          if ((int)v37 >= 0x7FFF)
            LOWORD(v37) = 0x7FFF;
          *(_WORD *)(a3 + 2 * result++) = v37;
        }
        while (result != v9);
      }
      a3 += v12;
      a2 += 8;
      v38 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v38 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF4F0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E180C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF4F0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF4F0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

uint64_t *cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8)
{
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  float v27;
  float v28;
  uint64_t v29;
  BOOL v30;

  if (a5 >= 1)
  {
    LODWORD(a8) = *((_DWORD *)result + 24);
    v8 = (_DWORD *)result[6];
    v9 = (uint64_t *)result[9];
    v10 = (a7 * a6);
    v11 = result[3];
    v12 = (unint64_t)(result[4] - v11) >> 3;
    v13 = a4;
    v14 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    v15 = (int *)(v11 + 4);
    do
    {
      v16 = v12;
      v17 = v15;
      result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *result++ = *(_QWORD *)(a2 + 8 * *v17) + 2 * *(v17 - 1) * a7;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      if ((int)v10 >= 4)
      {
        v18 = 0;
        do
        {
          v19 = (float32x4_t)v14;
          if ((int)v12 >= 1)
          {
            v20 = v12;
            result = v9;
            v21 = v8;
            v19 = (float32x4_t)v14;
            do
            {
              v23 = *result++;
              v22 = v23;
              LODWORD(v23) = *v21++;
              v19 = vmlaq_n_f32(v19, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(v22 + 2 * v18))), *(float *)&v23);
              --v20;
            }
            while (v20);
          }
          *(float32x4_t *)(a3 + 4 * v18) = v19;
          v18 += 4;
        }
        while (v18 <= (int)v10 - 4);
        v18 = v18;
      }
      else
      {
        v18 = 0;
      }
      if ((int)v18 < (int)v10)
      {
        do
        {
          v24 = *(float *)&a8;
          if ((int)v12 >= 1)
          {
            v25 = v12;
            result = (uint64_t *)v8;
            v26 = v9;
            v24 = *(float *)&a8;
            do
            {
              v27 = *(float *)result;
              result = (uint64_t *)((char *)result + 4);
              v28 = v27;
              v29 = *v26++;
              v24 = v24 + (float)(v28 * (float)*(__int16 *)(v29 + 2 * v18));
              --v25;
            }
            while (v25);
          }
          *(float *)(a3 + 4 * v18++) = v24;
        }
        while (v18 != v10);
      }
      a3 += v13;
      a2 += 8;
      v30 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v30 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_24DBEF538;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E184B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF538;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF538;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

double *cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  double v7;
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  __int16 *v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  BOOL v35;

  if (a5 >= 1)
  {
    v7 = result[12];
    v8 = (double *)*((_QWORD *)result + 6);
    v9 = (double *)*((_QWORD *)result + 9);
    v10 = (a7 * a6);
    v11 = *((_QWORD *)result + 3);
    v12 = (unint64_t)(*((_QWORD *)result + 4) - v11) >> 3;
    v13 = a4;
    v14 = (int *)(v11 + 4);
    do
    {
      v15 = v12;
      v16 = v14;
      result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(_QWORD *)result++ = *(_QWORD *)(a2 + 8 * *v16) + 2 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v10 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = v7;
          v19 = v7;
          v20 = v7;
          v21 = v7;
          if ((int)v12 >= 1)
          {
            v22 = v12;
            v23 = v9;
            v24 = v8;
            v21 = v7;
            v20 = v7;
            v19 = v7;
            v18 = v7;
            do
            {
              v26 = *(_QWORD *)v23++;
              v25 = v26;
              v27 = *v24++;
              v28 = (__int16 *)(v25 + 2 * v17);
              v18 = v18 + v27 * (double)*v28;
              v19 = v19 + v27 * (double)v28[1];
              v20 = v20 + v27 * (double)v28[2];
              v21 = v21 + v27 * (double)v28[3];
              --v22;
            }
            while (v22);
          }
          *(double *)(a3 + 8 * v17) = v18;
          *(double *)(a3 + ((8 * v17) | 8)) = v19;
          result = (double *)((8 * v17) | 0x10);
          *(double *)((char *)result + a3) = v20;
          *(double *)(a3 + ((8 * v17) | 0x18)) = v21;
          v17 += 4;
        }
        while (v17 <= (int)v10 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          v29 = v7;
          if ((int)v12 >= 1)
          {
            v30 = v12;
            result = v8;
            v31 = v9;
            v29 = v7;
            do
            {
              v32 = *result++;
              v33 = v32;
              v34 = *(_QWORD *)v31++;
              v29 = v29 + v33 * (double)*(__int16 *)(v34 + 2 * v17);
              --v30;
            }
            while (v30);
          }
          *(double *)(a3 + 8 * v17++) = v29;
        }
        while (v17 != v10);
      }
      a3 += v13;
      a2 += 8;
      v35 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v35 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  float v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = &off_24DBEF580;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E188FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF580;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF580;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

unint64_t cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::operator()(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8)
{
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  float v27;
  float v28;
  uint64_t v29;
  BOOL v30;

  if (a5 >= 1)
  {
    LODWORD(a8) = *(_DWORD *)(result + 96);
    v8 = *(_DWORD **)(result + 48);
    v9 = *(uint64_t **)(result + 72);
    v10 = (a7 * a6);
    v11 = *(_QWORD *)(result + 24);
    v12 = (unint64_t)(*(_QWORD *)(result + 32) - v11) >> 3;
    v13 = a4;
    v14 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    v15 = (int *)(v11 + 4);
    do
    {
      v16 = v12;
      v17 = v15;
      result = (unint64_t)v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)(a2 + 8 * *v17) + 4 * *(v17 - 1) * a7;
          result += 8;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      if ((int)v10 >= 4)
      {
        v18 = 0;
        do
        {
          v19 = (float32x4_t)v14;
          if ((int)v12 >= 1)
          {
            result = v12;
            v20 = v9;
            v21 = v8;
            v19 = (float32x4_t)v14;
            do
            {
              v23 = *v20++;
              v22 = v23;
              LODWORD(v23) = *v21++;
              v19 = vmlaq_n_f32(v19, *(float32x4_t *)(v22 + 4 * v18), *(float *)&v23);
              --result;
            }
            while (result);
          }
          *(float32x4_t *)(a3 + 4 * v18) = v19;
          v18 += 4;
        }
        while (v18 <= (int)v10 - 4);
        v18 = v18;
      }
      else
      {
        v18 = 0;
      }
      if ((int)v18 < (int)v10)
      {
        do
        {
          v24 = *(float *)&a8;
          if ((int)v12 >= 1)
          {
            v25 = v12;
            result = (unint64_t)v8;
            v26 = v9;
            v24 = *(float *)&a8;
            do
            {
              v27 = *(float *)result;
              result += 4;
              v28 = v27;
              v29 = *v26++;
              v24 = v24 + (float)(v28 * *(float *)(v29 + 4 * v18));
              --v25;
            }
            while (v25);
          }
          *(float *)(a3 + 4 * v18++) = v24;
        }
        while (v18 != v10);
      }
      a3 += v13;
      a2 += 8;
      v30 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v30 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_24DBEF5C8;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (_QWORD *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  return a1;
}

void sub_219E18CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;
  void *v34;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

_QWORD *cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF5C8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24DBEF5C8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2207351BCLL);
}

double *cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  double v7;
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double *v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  uint64_t v33;
  BOOL v34;

  if (a5 >= 1)
  {
    v7 = result[12];
    v8 = (double *)*((_QWORD *)result + 6);
    v9 = (double *)*((_QWORD *)result + 9);
    v10 = (a7 * a6);
    v11 = *((_QWORD *)result + 3);
    v12 = (unint64_t)(*((_QWORD *)result + 4) - v11) >> 3;
    v13 = a4;
    v14 = (int *)(v11 + 4);
    do
    {
      v15 = v12;
      v16 = v14;
      result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(_QWORD *)result++ = *(_QWORD *)(a2 + 8 * *v16) + 8 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v10 >= 4)
      {
        v17 = 0;
        do
        {
          v18 = v7;
          v19 = v7;
          v20 = v7;
          v21 = v7;
          if ((int)v12 >= 1)
          {
            v22 = v12;
            v23 = v9;
            v24 = v8;
            v21 = v7;
            v20 = v7;
            v19 = v7;
            v18 = v7;
            do
            {
              v25 = *(_QWORD *)v23++;
              v26 = (double *)(v25 + 8 * v17);
              v27 = *v24++;
              v18 = v18 + v27 * *v26;
              v19 = v19 + v27 * v26[1];
              v20 = v20 + v27 * v26[2];
              v21 = v21 + v27 * v26[3];
              --v22;
            }
            while (v22);
          }
          *(double *)(a3 + 8 * v17) = v18;
          *(double *)(a3 + ((8 * v17) | 8)) = v19;
          result = (double *)((8 * v17) | 0x10);
          *(double *)((char *)result + a3) = v20;
          *(double *)(a3 + ((8 * v17) | 0x18)) = v21;
          v17 += 4;
        }
        while (v17 <= (int)v10 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          v28 = v7;
          if ((int)v12 >= 1)
          {
            v29 = v12;
            result = v8;
            v30 = v9;
            v28 = v7;
            do
            {
              v31 = *result++;
              v32 = v31;
              v33 = *(_QWORD *)v30++;
              v28 = v28 + v32 * *(double *)(v33 + 8 * v17);
              --v29;
            }
            while (v29);
          }
          *(double *)(a3 + 8 * v17++) = v28;
        }
        while (v17 != v10);
      }
      a3 += v13;
      a2 += 8;
      v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

unint64_t cv::fastMalloc(cv *this)
{
  void *v2;
  const cv::Exception *v3;
  void *__p[2];
  void *v6[2];
  void *v7[2];
  _BYTE v8[120];

  v2 = malloc_type_malloc((size_t)this + 24, 0x583E1841uLL);
  if (!v2)
  {
    cv::format(v7, this);
    std::string::basic_string[abi:ne180100]<0>(v6, "OutOfMemoryError");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/alloc.cpp");
    cv::Exception::Exception(v8, 4294967292, v7, v6, __p, 52);
    cv::error((cv *)v8, v3);
  }
  *(_QWORD *)((((unint64_t)v2 + 23) & 0xFFFFFFFFFFFFFFF0) - 8) = v2;
  return ((unint64_t)v2 + 23) & 0xFFFFFFFFFFFFFFF0;
}

void sub_219E19094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void cv::fastFree(void **this, void *a2)
{
  if (this)
    free(*(this - 1));
}

void cv::pyrDown(void (***a1)(void **__return_ptr, _QWORD, uint64_t), uint64_t a2, int *a3, uint64_t a4)
{
  cv *v7;
  const cv::Exception *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  cv *v25;
  const cv::Exception *v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  cv *v35;
  uint64_t v36;
  _DWORD v37[2];
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  cv *v47;
  uint64_t v48;
  std::string v49;
  _BYTE v50[120];

  if (!(_DWORD)a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "borderType != BORDER_CONSTANT");
    std::string::basic_string[abi:ne180100]<0>(__p, "pyrDown");
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    v7 = (cv *)cv::Exception::Exception(v50, 4294967081, &v38, __p, &v49, 422);
    cv::error(v7, v8);
  }
  (**a1)(&v38, a1, 0xFFFFFFFFLL);
  v9 = *a3;
  v10 = a3[1];
  if (!*(_QWORD *)a3)
  {
    if (v40 >= -1)
      v11 = v40 + 1;
    else
      v11 = v40 + 2;
    v9 = v11 >> 1;
    if (v39 >= -1)
      v12 = v39 + 1;
    else
      v12 = v39 + 2;
    v10 = v12 >> 1;
  }
  v37[0] = v9;
  v37[1] = v10;
  (*(void (**)(uint64_t, _DWORD *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, v37, (unsigned __int16)v38 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))a2)(__p, a2, 0xFFFFFFFFLL);
  v13 = v38 & 7;
  if ((_DWORD)v13 == 7 || ((0x6Du >> v13) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "");
    std::string::basic_string[abi:ne180100]<0>(&v28, "pyrDown");
    std::string::basic_string[abi:ne180100]<0>(&v27, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    v25 = (cv *)cv::Exception::Exception(v50, 4294967086, &v49, &v28, &v27, 447);
    cv::error(v25, v26);
  }
  ((void (*)(void **, void **, uint64_t))off_24DBEF600[v13])(&v38, __p, a4);
  v15 = v30;
  if (v30)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      cv::Mat::deallocate((cv::Mat *)__p, v14);
  }
  __p[2] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (SHIDWORD(__p[0]) >= 1)
  {
    v18 = 0;
    v19 = v34;
    do
      *(_DWORD *)(v19 + 4 * v18++) = 0;
    while (v18 < SHIDWORD(__p[0]));
  }
  v30 = 0;
  if (v35 != (cv *)&v36)
    cv::fastFree((void **)v35, v14);
  v20 = v42;
  if (v42)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      cv::Mat::deallocate((cv::Mat *)&v38, v14);
  }
  v41 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (SHIDWORD(v38) >= 1)
  {
    v23 = 0;
    v24 = v46;
    do
      *(_DWORD *)(v24 + 4 * v23++) = 0;
    while (v23 < SHIDWORD(v38));
  }
  v42 = 0;
  if (v47 != (cv *)&v48)
    cv::fastFree((void **)v47, v14);
}

void sub_219E193F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;
  void *v46;

  cv::Exception::~Exception((cv::Exception *)(v43 - 168));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v43 - 169) < 0)
    operator delete(*(void **)(v43 - 192));
  cv::Mat::~Mat((cv::Mat *)&a22, v45);
  cv::Mat::~Mat((cv::Mat *)&a38, v46);
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<unsigned char,8>,cv::NoVec<int,unsigned char>>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  const cv::Exception *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  const cv::Exception *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int j;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t k;
  int *v78;
  int *v79;
  int *v80;
  int *v81;
  _BYTE *v82;
  uint64_t v83;
  int *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  int v89;
  __int16 v90;
  __int16 v91;
  int v92;
  int v93;
  void *result;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int *v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115[2];
  void *v116[2];
  void *v117[2];
  void *v118[2];
  _BYTE v119[120];
  void *__p;
  uint64_t v121;
  _BYTE v122[7];
  void *v123;
  uint64_t v124;
  _BYTE v125[4144];
  __int128 v126;
  __int128 v127;
  int *v128;
  void *v129[1792];
  _BYTE v130[14336];
  uint64_t v131;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v96 = v3;
  v6 = v2;
  v131 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_7;
  v7 = v2[1];
  if ((int)v7 >= 3)
  {
    v9 = (int *)*((_QWORD *)v2 + 8);
    v8 = 1;
    do
    {
      v10 = *v9++;
      v8 *= v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v8)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v129, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v123, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v130, 4294967081, v129, &v123, &__p, 194);
    cv::error((cv *)v130, v11);
  }
  v114 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 4);
  v105 = **((_DWORD **)v2 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4);
  v97 = **(unsigned int **)(v3 + 64);
  v106 = *v2;
  v13 = (v106 >> 3) & 0x1FF;
  v14 = ((v13 + 1) * v12);
  v15 = 0x500000000 * (((int)v14 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  v16 = v125;
  v123 = v125;
  v124 = 1032;
  if ((unint64_t)v15 >= 0x40800000001)
  {
    v124 = v15 >> 32;
    v16 = (_BYTE *)operator new[]();
    v123 = v16;
  }
  v17 = v122;
  __p = v122;
  v121 = 1032;
  if (v14 >= 0x409)
  {
    v121 = (int)v14;
    v17 = (_BYTE *)operator new[]();
    __p = v17;
  }
  v128 = 0;
  v127 = 0u;
  v126 = 0u;
  v18 = 2 * v12 - v114;
  if (v18 < 0)
    v18 = v114 - 2 * v12;
  if (v18 > 2)
    goto LABEL_18;
  v19 = 2 * v97 - v105;
  if (v19 < 0)
    v19 = v105 - 2 * v97;
  if (v19 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v118, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v117, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v116, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v119, 4294967081, v118, v117, v116, 208);
    cv::error((cv *)v119, v20);
  }
  v108 = (v14 + 15) & 0xFFFFFFF0;
  v104 = v6;
  v110 = v5;
  v21 = 0;
  v22 = 0;
  v109 = (unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = v114 - 3;
  if (v114 < 3)
    v23 = v114 - 2;
  v24 = v23 >> 1;
  if (v12 >= v24 + 1)
    v25 = v24 + 1;
  else
    v25 = v12;
  v103 = v25;
  v112 = 2 * v25 - 2;
  v111 = v13 + 1;
  do
  {
    v26 = cv::borderInterpolate((cv *)(v22 - 2), v114, v110);
    v27 = cv::borderInterpolate((cv *)(v112 + v22), v114, v110);
    v28 = v26 * v111;
    v29 = v13 + 1;
    v30 = v21;
    v31 = v27 * v111;
    do
    {
      *(_DWORD *)&v130[v30] = v28;
      *(_DWORD *)((char *)v129 + v30) = v31;
      v30 += 4;
      ++v31;
      ++v28;
      --v29;
    }
    while (v29);
    ++v22;
    v21 += 4 * ((v106 >> 3) & 0x1FF) + 4;
  }
  while (v22 != 7);
  if ((int)v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
      *(_DWORD *)&v17[4 * i] = i % v111 + 2 * v111 * (i / v111);
  }
  if ((int)v97 < 1)
    goto LABEL_72;
  v102 = 0;
  v33 = 0;
  v34 = v111 * v103;
  v35 = (v106 >> 3) & 0x1FF;
  v113 = 12 * v35 + 12;
  *(_QWORD *)v115 = 16 * v35 + 16;
  v36 = v35;
  v37 = 8 * v35 + 8;
  v38 = 4294967294;
  v100 = 2;
  do
  {
    v98 = *(_QWORD *)(v96 + 80);
    v99 = *(_QWORD *)(v96 + 16);
    v101 = v33;
    if (2 * v33 + 2 < (int)v38)
      goto LABEL_66;
    v39 = v100;
    if ((int)v38 > v100)
      v39 = v38;
    v107 = v39;
    v95 = v39 + 1;
    while (2)
    {
      v40 = cv::borderInterpolate((cv *)v38, v105, v110);
      v41 = 0;
      v42 = ((int)v38 + 2) % 5 * v108;
      v43 = *((_QWORD *)v104 + 2) + *((_QWORD *)v104 + 10) * v40;
      v44 = v109 + 4 * v42;
      v45 = v109 + 8 + 4 * v42;
      v46 = v109 + 4 + 4 * v42;
      v47 = v130;
      for (j = v13 + 1; ; j = v14)
      {
        if (v41 < j)
        {
          v49 = 0;
          v50 = &v47[4 * v41];
          v51 = v44 + 4 * v41;
          v52 = (uint64_t)&v47[4 * v36 + 4 + 4 * v41];
          v53 = j - (uint64_t)v41;
          do
          {
            *(_DWORD *)(v51 + 4 * v49) = 6 * *(unsigned __int8 *)(v43 + *(int *)&v50[4 * v49 + v37])
                                       + 4
                                       * (*(unsigned __int8 *)(v43 + *(int *)&v50[4 * v49 + v113])
                                        + *(unsigned __int8 *)(v43 + *(int *)(v52 + 4 * v49)))
                                       + *(unsigned __int8 *)(v43 + *(int *)&v50[4 * v49])
                                       + *(unsigned __int8 *)(v43 + *(int *)&v50[4 * v49 + *(_QWORD *)v115]);
            ++v49;
          }
          while (v53 != v49);
          v41 = j;
        }
        if (v41 == (_DWORD)v14)
          break;
        switch((_DWORD)v13)
        {
          case 0:
            if (v41 >= v34)
              goto LABEL_62;
            v66 = 2 * v41;
            v67 = (_DWORD *)(v44 + 4 * v41);
            v68 = v34 - (uint64_t)v41;
            do
            {
              v69 = *(unsigned __int8 *)(v43 + v66);
              v70 = *(unsigned __int8 *)(v43 + v66 + 1) + *(unsigned __int8 *)(v43 + v66 - 1);
              v71 = *(unsigned __int8 *)(v43 + v66 - 2);
              v66 += 2;
              *v67++ = v71 + 6 * v69 + 4 * v70 + *(unsigned __int8 *)(v43 + v66);
              --v68;
            }
            while (v68);
            goto LABEL_61;
          case 2:
            if (v41 >= v34)
              goto LABEL_62;
            v54 = 0;
            v55 = v41;
            v61 = 2 * v41;
            v62 = (int *)(v46 + 4 * v41);
            do
            {
              v63 = (unsigned __int8 *)(v43 + v61);
              v64 = *(v63 - 6) + 6 * *v63 + 4 * (v63[3] + *(v63 - 3)) + v63[6];
              v65 = *(v63 - 5) + 6 * v63[1] + 4 * (v63[4] + *(v63 - 2)) + v63[7];
              LODWORD(v63) = *(v63 - 4) + 6 * v63[2] + 4 * (v63[5] + *(v63 - 1)) + v63[8];
              *(v62 - 1) = v64;
              *v62 = v65;
              v62[1] = (int)v63;
              v61 += 6;
              v54 += 3;
              v62 += 3;
            }
            while (v55 + v54 < v34);
            goto LABEL_53;
          case 3:
            if (v41 >= v34)
              goto LABEL_62;
            v54 = 0;
            v55 = v41;
            v56 = 2 * v41;
            v57 = (int *)(v45 + 4 * v41);
            do
            {
              v58 = (unsigned __int8 *)(v43 + v56);
              v59 = *(v58 - 7) + 6 * v58[1] + 4 * (v58[5] + *(v58 - 3)) + v58[9];
              *(v57 - 2) = *(v58 - 8) + 6 * *v58 + 4 * (v58[4] + *(v58 - 4)) + v58[8];
              *(v57 - 1) = v59;
              v60 = *(v58 - 6) + 6 * v58[2] + 4 * (v58[6] + *(v58 - 2)) + v58[10];
              LODWORD(v58) = *(v58 - 5) + 6 * v58[3] + 4 * (v58[7] + *(v58 - 1)) + v58[11];
              *v57 = v60;
              v57[1] = (int)v58;
              v57 += 4;
              v56 += 8;
              v54 += 4;
            }
            while (v55 + v54 < v34);
LABEL_53:
            v41 = v55 + v54;
            goto LABEL_62;
        }
        if (v41 < v34)
        {
          v72 = (int *)&v17[4 * v41];
          v73 = (_DWORD *)(v44 + 4 * v41);
          v74 = v34 - (uint64_t)v41;
          do
          {
            v75 = *v72++;
            *v73++ = *(unsigned __int8 *)(v43 + v75 - 2 * v111)
                   + 6 * *(unsigned __int8 *)(v43 + v75)
                   + 4 * (*(unsigned __int8 *)(v43 + v75 + v111) + *(unsigned __int8 *)(v43 + v75 - v111))
                   + *(unsigned __int8 *)(v43 + v75 + 2 * v111);
            --v74;
          }
          while (v74);
LABEL_61:
          v41 = v111 * v103;
        }
LABEL_62:
        v47 = (char *)v129 - 4 * v41;
      }
      v76 = (_DWORD)v38 == v107;
      v38 = (v38 + 1);
      if (!v76)
        continue;
      break;
    }
    v38 = v95;
LABEL_66:
    for (k = 0; k != 5; ++k)
      *((_QWORD *)&v126 + k) = v109 + 4 * (v102 + (int)k) % 5 * v108;
    if ((int)v14 >= 1)
    {
      v79 = (int *)*((_QWORD *)&v126 + 1);
      v78 = (int *)v126;
      v81 = (int *)*((_QWORD *)&v127 + 1);
      v80 = (int *)v127;
      v82 = (_BYTE *)(v99 + v98 * v101);
      v83 = 4 * v14;
      v84 = v128;
      do
      {
        v86 = *v80++;
        v85 = v86;
        v88 = *v79++;
        v87 = v88;
        v89 = *v81++;
        v90 = v89 + v87;
        v92 = *v78++;
        v91 = v92;
        v93 = *v84++;
        *v82++ = (unsigned __int16)(v91 + 6 * v85 + 4 * v90 + v93 + 128) >> 8;
        v83 -= 4;
      }
      while (v83);
    }
    v33 = v101 + 1;
    v100 += 2;
    v102 += 2;
  }
  while (v101 + 1 != v97);
LABEL_72:
  if (__p != v122 && __p)
    MEMORY[0x2207351A4]();
  result = v123;
  if (v123 != v125 && v123)
    return (void *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E19E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11C0] != a11 && STACK[0x11C0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<short,8>,cv::NoVec<int,short>>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  const cv::Exception *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int j;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int32x4_t *v57;
  int16x4_t *v58;
  int v59;
  int *v60;
  __int16 *v61;
  int v62;
  int v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t k;
  int *v76;
  int *v77;
  int *v78;
  int *v79;
  _WORD *v80;
  uint64_t v81;
  int *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  void *result;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unsigned int *v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  int v108;
  _BYTE *v109;
  int v110;
  int v111;
  int v112[2];
  void *v113[2];
  void *v114[2];
  void *v115[2];
  _BYTE v116[120];
  void *__p;
  uint64_t v118;
  _BYTE v119[7];
  void *v120;
  uint64_t v121;
  _BYTE v122[4144];
  __int128 v123;
  __int128 v124;
  int *v125;
  void *v126[1792];
  _BYTE v127[14336];
  uint64_t v128;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v94 = v3;
  v6 = v2;
  v128 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_7;
  v7 = v2[1];
  if ((int)v7 >= 3)
  {
    v9 = (int *)*((_QWORD *)v2 + 8);
    v8 = 1;
    do
    {
      v10 = *v9++;
      v8 *= v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v8)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v126, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v120, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v127, 4294967081, v126, &v120, &__p, 194);
    cv::error((cv *)v127, v11);
  }
  v111 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 4);
  v104 = **((_DWORD **)v2 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4);
  v95 = **(unsigned int **)(v3 + 64);
  v102 = *v2;
  v13 = (v102 >> 3) & 0x1FF;
  v14 = v13 + 1;
  v15 = ((v13 + 1) * v12);
  v16 = 0x500000000 * (((int)v15 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  v17 = v122;
  v120 = v122;
  v121 = 1032;
  if ((unint64_t)v16 >= 0x40800000001)
  {
    v121 = v16 >> 32;
    v17 = (_BYTE *)operator new[]();
    v120 = v17;
  }
  v18 = v119;
  __p = v119;
  v118 = 1032;
  if (v15 >= 0x409)
  {
    v118 = (int)v15;
    v18 = (_BYTE *)operator new[]();
    __p = v18;
  }
  v125 = 0;
  v124 = 0u;
  v123 = 0u;
  v19 = 2 * v12 - v111;
  if (v19 < 0)
    v19 = v111 - 2 * v12;
  if (v19 > 2)
    goto LABEL_18;
  v20 = 2 * v95 - v104;
  if (v20 < 0)
    v20 = v104 - 2 * v95;
  if (v20 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v115, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v114, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v116, 4294967081, v115, v114, v113, 208);
    cv::error((cv *)v116, v21);
  }
  v109 = v18;
  v106 = (v15 + 15) & 0xFFFFFFF0;
  v103 = v6;
  v108 = v5;
  v22 = 0;
  v23 = 0;
  v24 = v111 - 3;
  if (v111 < 3)
    v24 = v111 - 2;
  v25 = v24 >> 1;
  if (v12 >= v25 + 1)
    v26 = v25 + 1;
  else
    v26 = v12;
  v99 = v26;
  v110 = 2 * v26 - 2;
  v107 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v27 = cv::borderInterpolate((cv *)(v23 - 2), v111, v108);
    v28 = cv::borderInterpolate((cv *)(v110 + v23), v111, v108);
    v29 = v27 * v14;
    v30 = v13 + 1;
    v31 = v22;
    v32 = v28 * v14;
    do
    {
      *(_DWORD *)&v127[v31] = v29;
      *(_DWORD *)((char *)v126 + v31) = v32;
      v31 += 4;
      ++v32;
      ++v29;
      --v30;
    }
    while (v30);
    ++v23;
    v22 += 4 * ((v102 >> 3) & 0x1FF) + 4;
  }
  while (v23 != 7);
  v33 = 2 * v14;
  if ((int)v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
      *(_DWORD *)&v18[4 * i] = i % v14 + v33 * (i / v14);
  }
  if ((int)v95 < 1)
    goto LABEL_72;
  v35 = 0;
  v36 = v14 * v99;
  v37 = (v102 >> 3) & 0x1FF;
  *(_QWORD *)v112 = 16 * v37 + 16;
  v38 = 8 * v37 + 8;
  v101 = 0;
  v39 = 4294967294;
  v98 = 2;
  do
  {
    v96 = *(_QWORD *)(v94 + 80);
    v97 = *(_QWORD *)(v94 + 16);
    v100 = v35;
    if (2 * v35 + 2 < (int)v39)
      goto LABEL_66;
    v40 = v98;
    if ((int)v39 > v98)
      v40 = v39;
    v105 = v40;
    v93 = v40 + 1;
    while (2)
    {
      v41 = cv::borderInterpolate((cv *)v39, v104, v108);
      v42 = 0;
      v43 = ((int)v39 + 2) % 5 * v106;
      v44 = *((_QWORD *)v103 + 2) + *((_QWORD *)v103 + 10) * v41;
      v45 = v107 + 4 * v43;
      v46 = v107 + 4 + 4 * v43;
      v47 = v127;
      for (j = v13 + 1; ; j = (v13 + 1) * v12)
      {
        if (v42 < j)
        {
          v49 = 0;
          v50 = &v47[4 * v42];
          v51 = v45 + 4 * v42;
          v52 = (uint64_t)&v47[4 * ((v102 >> 3) & 0x1FF) + 4 + 4 * v42];
          v53 = j - (uint64_t)v42;
          do
          {
            *(_DWORD *)(v51 + 4 * v49) = 6 * *(__int16 *)(v44 + 2 * *(int *)&v50[4 * v49 + v38])
                                       + 4
                                       * (*(__int16 *)(v44
                                                     + 2 * *(int *)&v50[12 * ((v102 >> 3) & 0x1FF) + 12 + 4 * v49])
                                        + *(__int16 *)(v44 + 2 * *(int *)(v52 + 4 * v49)))
                                       + *(__int16 *)(v44 + 2 * *(int *)&v50[4 * v49])
                                       + *(__int16 *)(v44 + 2 * *(int *)&v50[4 * v49 + *(_QWORD *)v112]);
            ++v49;
          }
          while (v53 != v49);
          v42 = j;
        }
        if (v42 == (_DWORD)v15)
          break;
        switch((_DWORD)v13)
        {
          case 0:
            if (v42 >= v36)
              goto LABEL_62;
            v64 = 2 * v42;
            v65 = (_DWORD *)(v45 + 4 * v42);
            v66 = v36 - (uint64_t)v42;
            do
            {
              v67 = *(__int16 *)(v44 + 2 * v64);
              v68 = *(__int16 *)(v44 + 2 * (v64 + 1)) + *(__int16 *)(v44 + 2 * (v64 - 1));
              v69 = *(__int16 *)(v44 + 2 * (v64 - 2));
              v64 += 2;
              *v65++ = v69 + 6 * v67 + 4 * v68 + *(__int16 *)(v44 + 2 * v64);
              --v66;
            }
            while (v66);
            goto LABEL_61;
          case 2:
            if (v42 >= v36)
              goto LABEL_62;
            v54 = 0;
            v55 = v42;
            v59 = 2 * v42;
            v60 = (int *)(v46 + 4 * v42);
            do
            {
              v61 = (__int16 *)(v44 + 2 * v59);
              v62 = *(v61 - 6) + 6 * *v61 + 4 * (v61[3] + *(v61 - 3)) + v61[6];
              v63 = *(v61 - 5) + 6 * v61[1] + 4 * (v61[4] + *(v61 - 2)) + v61[7];
              LODWORD(v61) = *(v61 - 4) + 6 * v61[2] + 4 * (v61[5] + *(v61 - 1)) + v61[8];
              *(v60 - 1) = v62;
              *v60 = v63;
              v60[1] = (int)v61;
              v59 += 6;
              v54 += 3;
              v60 += 3;
            }
            while (v55 + v54 < v36);
            goto LABEL_53;
          case 3:
            if (v42 >= v36)
              goto LABEL_62;
            v54 = 0;
            v55 = v42;
            v56 = 2 * v42;
            v57 = (int32x4_t *)(v45 + 4 * v42);
            do
            {
              v58 = (int16x4_t *)(v44 + 2 * v56);
              *v57++ = vaddw_s16(vaddq_s32(vaddw_s16(vmull_s16(*v58, (int16x4_t)0x6000600060006), v58[-2]), vshlq_n_s32(vaddl_s16(v58[1], v58[-1]), 2uLL)), v58[2]);
              v56 += 8;
              v54 += 4;
            }
            while (v55 + v54 < v36);
LABEL_53:
            v42 = v55 + v54;
            goto LABEL_62;
        }
        if (v42 < v36)
        {
          v70 = (int *)&v109[4 * v42];
          v71 = (_DWORD *)(v45 + 4 * v42);
          v72 = v36 - (uint64_t)v42;
          do
          {
            v73 = *v70++;
            *v71++ = *(__int16 *)(v44 + 2 * ((int)v73 - v33))
                   + 6 * *(__int16 *)(v44 + 2 * v73)
                   + 4 * (*(__int16 *)(v44 + 2 * (int)(v73 + v14)) + *(__int16 *)(v44 + 2 * (int)(v73 - v14)))
                   + *(__int16 *)(v44 + 2 * ((int)v73 + v33));
            --v72;
          }
          while (v72);
LABEL_61:
          v42 = v36;
        }
LABEL_62:
        v47 = (char *)v126 - 4 * v42;
      }
      v74 = (_DWORD)v39 == v105;
      v39 = (v39 + 1);
      if (!v74)
        continue;
      break;
    }
    v39 = v93;
LABEL_66:
    for (k = 0; k != 5; ++k)
      *((_QWORD *)&v123 + k) = v107 + 4 * (v101 + (int)k) % 5 * v106;
    if ((int)v15 >= 1)
    {
      v77 = (int *)*((_QWORD *)&v123 + 1);
      v76 = (int *)v123;
      v79 = (int *)*((_QWORD *)&v124 + 1);
      v78 = (int *)v124;
      v80 = (_WORD *)(v97 + v96 * v100);
      v81 = 2 * ((v13 + 1) * v12);
      v82 = v125;
      do
      {
        v84 = *v78++;
        v83 = v84;
        v86 = *v77++;
        v85 = v86;
        v87 = *v79++;
        v88 = v87 + v85;
        v90 = *v76++;
        v89 = v90;
        v91 = *v82++;
        *v80++ = (v89 + 6 * v83 + 4 * v88 + v91 + 128) >> 8;
        v81 -= 2;
      }
      while (v81);
    }
    v35 = v100 + 1;
    v98 += 2;
    v101 += 2;
  }
  while (v100 + 1 != v95);
LABEL_72:
  if (__p != v119 && __p)
    MEMORY[0x2207351A4]();
  result = v120;
  if (v120 != v122 && v120)
    return (void *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E1A90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<unsigned short,8>,cv::NoVec<int,unsigned short>>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  const cv::Exception *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int j;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint32x4_t *v57;
  uint16x4_t *v58;
  int v59;
  int *v60;
  unsigned __int16 *v61;
  int v62;
  int v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t k;
  int *v76;
  int *v77;
  int *v78;
  int *v79;
  _WORD *v80;
  uint64_t v81;
  int *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  void *result;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unsigned int *v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  int v108;
  _BYTE *v109;
  int v110;
  int v111;
  int v112[2];
  void *v113[2];
  void *v114[2];
  void *v115[2];
  _BYTE v116[120];
  void *__p;
  uint64_t v118;
  _BYTE v119[7];
  void *v120;
  uint64_t v121;
  _BYTE v122[4144];
  __int128 v123;
  __int128 v124;
  int *v125;
  void *v126[1792];
  _BYTE v127[14336];
  uint64_t v128;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v94 = v3;
  v6 = v2;
  v128 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_7;
  v7 = v2[1];
  if ((int)v7 >= 3)
  {
    v9 = (int *)*((_QWORD *)v2 + 8);
    v8 = 1;
    do
    {
      v10 = *v9++;
      v8 *= v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v8)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v126, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v120, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v127, 4294967081, v126, &v120, &__p, 194);
    cv::error((cv *)v127, v11);
  }
  v111 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 4);
  v104 = **((_DWORD **)v2 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4);
  v95 = **(unsigned int **)(v3 + 64);
  v102 = *v2;
  v13 = (v102 >> 3) & 0x1FF;
  v14 = v13 + 1;
  v15 = ((v13 + 1) * v12);
  v16 = 0x500000000 * (((int)v15 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  v17 = v122;
  v120 = v122;
  v121 = 1032;
  if ((unint64_t)v16 >= 0x40800000001)
  {
    v121 = v16 >> 32;
    v17 = (_BYTE *)operator new[]();
    v120 = v17;
  }
  v18 = v119;
  __p = v119;
  v118 = 1032;
  if (v15 >= 0x409)
  {
    v118 = (int)v15;
    v18 = (_BYTE *)operator new[]();
    __p = v18;
  }
  v125 = 0;
  v124 = 0u;
  v123 = 0u;
  v19 = 2 * v12 - v111;
  if (v19 < 0)
    v19 = v111 - 2 * v12;
  if (v19 > 2)
    goto LABEL_18;
  v20 = 2 * v95 - v104;
  if (v20 < 0)
    v20 = v104 - 2 * v95;
  if (v20 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v115, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v114, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v116, 4294967081, v115, v114, v113, 208);
    cv::error((cv *)v116, v21);
  }
  v109 = v18;
  v106 = (v15 + 15) & 0xFFFFFFF0;
  v103 = v6;
  v108 = v5;
  v22 = 0;
  v23 = 0;
  v24 = v111 - 3;
  if (v111 < 3)
    v24 = v111 - 2;
  v25 = v24 >> 1;
  if (v12 >= v25 + 1)
    v26 = v25 + 1;
  else
    v26 = v12;
  v99 = v26;
  v110 = 2 * v26 - 2;
  v107 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v27 = cv::borderInterpolate((cv *)(v23 - 2), v111, v108);
    v28 = cv::borderInterpolate((cv *)(v110 + v23), v111, v108);
    v29 = v27 * v14;
    v30 = v13 + 1;
    v31 = v22;
    v32 = v28 * v14;
    do
    {
      *(_DWORD *)&v127[v31] = v29;
      *(_DWORD *)((char *)v126 + v31) = v32;
      v31 += 4;
      ++v32;
      ++v29;
      --v30;
    }
    while (v30);
    ++v23;
    v22 += 4 * ((v102 >> 3) & 0x1FF) + 4;
  }
  while (v23 != 7);
  v33 = 2 * v14;
  if ((int)v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
      *(_DWORD *)&v18[4 * i] = i % v14 + v33 * (i / v14);
  }
  if ((int)v95 < 1)
    goto LABEL_72;
  v35 = 0;
  v36 = v14 * v99;
  v37 = (v102 >> 3) & 0x1FF;
  *(_QWORD *)v112 = 16 * v37 + 16;
  v38 = 8 * v37 + 8;
  v101 = 0;
  v39 = 4294967294;
  v98 = 2;
  do
  {
    v96 = *(_QWORD *)(v94 + 80);
    v97 = *(_QWORD *)(v94 + 16);
    v100 = v35;
    if (2 * v35 + 2 < (int)v39)
      goto LABEL_66;
    v40 = v98;
    if ((int)v39 > v98)
      v40 = v39;
    v105 = v40;
    v93 = v40 + 1;
    while (2)
    {
      v41 = cv::borderInterpolate((cv *)v39, v104, v108);
      v42 = 0;
      v43 = ((int)v39 + 2) % 5 * v106;
      v44 = *((_QWORD *)v103 + 2) + *((_QWORD *)v103 + 10) * v41;
      v45 = v107 + 4 * v43;
      v46 = v107 + 4 + 4 * v43;
      v47 = v127;
      for (j = v13 + 1; ; j = (v13 + 1) * v12)
      {
        if (v42 < j)
        {
          v49 = 0;
          v50 = &v47[4 * v42];
          v51 = v45 + 4 * v42;
          v52 = (uint64_t)&v47[4 * ((v102 >> 3) & 0x1FF) + 4 + 4 * v42];
          v53 = j - (uint64_t)v42;
          do
          {
            *(_DWORD *)(v51 + 4 * v49) = 6 * *(unsigned __int16 *)(v44 + 2 * *(int *)&v50[4 * v49 + v38])
                                       + 4
                                       * (*(unsigned __int16 *)(v44
                                                              + 2
                                                              * *(int *)&v50[12 * ((v102 >> 3) & 0x1FF) + 12 + 4 * v49])
                                        + *(unsigned __int16 *)(v44 + 2 * *(int *)(v52 + 4 * v49)))
                                       + *(unsigned __int16 *)(v44 + 2 * *(int *)&v50[4 * v49])
                                       + *(unsigned __int16 *)(v44 + 2 * *(int *)&v50[4 * v49 + *(_QWORD *)v112]);
            ++v49;
          }
          while (v53 != v49);
          v42 = j;
        }
        if (v42 == (_DWORD)v15)
          break;
        switch((_DWORD)v13)
        {
          case 0:
            if (v42 >= v36)
              goto LABEL_62;
            v64 = 2 * v42;
            v65 = (_DWORD *)(v45 + 4 * v42);
            v66 = v36 - (uint64_t)v42;
            do
            {
              v67 = *(unsigned __int16 *)(v44 + 2 * v64);
              v68 = *(unsigned __int16 *)(v44 + 2 * (v64 + 1)) + *(unsigned __int16 *)(v44 + 2 * (v64 - 1));
              v69 = *(unsigned __int16 *)(v44 + 2 * (v64 - 2));
              v64 += 2;
              *v65++ = v69 + 6 * v67 + 4 * v68 + *(unsigned __int16 *)(v44 + 2 * v64);
              --v66;
            }
            while (v66);
            goto LABEL_61;
          case 2:
            if (v42 >= v36)
              goto LABEL_62;
            v54 = 0;
            v55 = v42;
            v59 = 2 * v42;
            v60 = (int *)(v46 + 4 * v42);
            do
            {
              v61 = (unsigned __int16 *)(v44 + 2 * v59);
              v62 = *(v61 - 6) + 6 * *v61 + 4 * (v61[3] + *(v61 - 3)) + v61[6];
              v63 = *(v61 - 5) + 6 * v61[1] + 4 * (v61[4] + *(v61 - 2)) + v61[7];
              LODWORD(v61) = *(v61 - 4) + 6 * v61[2] + 4 * (v61[5] + *(v61 - 1)) + v61[8];
              *(v60 - 1) = v62;
              *v60 = v63;
              v60[1] = (int)v61;
              v59 += 6;
              v54 += 3;
              v60 += 3;
            }
            while (v55 + v54 < v36);
            goto LABEL_53;
          case 3:
            if (v42 >= v36)
              goto LABEL_62;
            v54 = 0;
            v55 = v42;
            v56 = 2 * v42;
            v57 = (uint32x4_t *)(v45 + 4 * v42);
            do
            {
              v58 = (uint16x4_t *)(v44 + 2 * v56);
              *v57++ = vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*v58, (uint16x4_t)0x6000600060006), v58[-2]), vshlq_n_s32((int32x4_t)vaddl_u16(v58[1], v58[-1]), 2uLL)), v58[2]);
              v56 += 8;
              v54 += 4;
            }
            while (v55 + v54 < v36);
LABEL_53:
            v42 = v55 + v54;
            goto LABEL_62;
        }
        if (v42 < v36)
        {
          v70 = (int *)&v109[4 * v42];
          v71 = (_DWORD *)(v45 + 4 * v42);
          v72 = v36 - (uint64_t)v42;
          do
          {
            v73 = *v70++;
            *v71++ = *(unsigned __int16 *)(v44 + 2 * ((int)v73 - v33))
                   + 6 * *(unsigned __int16 *)(v44 + 2 * v73)
                   + 4
                   * (*(unsigned __int16 *)(v44 + 2 * (int)(v73 + v14))
                    + *(unsigned __int16 *)(v44 + 2 * (int)(v73 - v14)))
                   + *(unsigned __int16 *)(v44 + 2 * ((int)v73 + v33));
            --v72;
          }
          while (v72);
LABEL_61:
          v42 = v36;
        }
LABEL_62:
        v47 = (char *)v126 - 4 * v42;
      }
      v74 = (_DWORD)v39 == v105;
      v39 = (v39 + 1);
      if (!v74)
        continue;
      break;
    }
    v39 = v93;
LABEL_66:
    for (k = 0; k != 5; ++k)
      *((_QWORD *)&v123 + k) = v107 + 4 * (v101 + (int)k) % 5 * v106;
    if ((int)v15 >= 1)
    {
      v77 = (int *)*((_QWORD *)&v123 + 1);
      v76 = (int *)v123;
      v79 = (int *)*((_QWORD *)&v124 + 1);
      v78 = (int *)v124;
      v80 = (_WORD *)(v97 + v96 * v100);
      v81 = 2 * ((v13 + 1) * v12);
      v82 = v125;
      do
      {
        v84 = *v78++;
        v83 = v84;
        v86 = *v77++;
        v85 = v86;
        v87 = *v79++;
        v88 = v87 + v85;
        v90 = *v76++;
        v89 = v90;
        v91 = *v82++;
        *v80++ = (v89 + 6 * v83 + 4 * v88 + v91 + 128) >> 8;
        v81 -= 2;
      }
      while (v81);
    }
    v35 = v100 + 1;
    v98 += 2;
    v101 += 2;
  }
  while (v100 + 1 != v95);
LABEL_72:
  if (__p != v119 && __p)
    MEMORY[0x2207351A4]();
  result = v120;
  if (v120 != v122 && v120)
    return (void *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E1B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FltCast<float,8>,cv::NoVec<float,float>>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  const cv::Exception *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  int j;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  float32x2_t *v63;
  float32x2_t *v64;
  int v65;
  float *v66;
  uint64_t v67;
  float v68;
  int v69;
  float *v70;
  uint64_t v71;
  float v72;
  int *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t k;
  float *v78;
  float *v79;
  float *v80;
  float *v81;
  float *v82;
  uint64_t v83;
  float *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  void *result;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  unsigned int *v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  int v110;
  _BYTE *v111;
  int v112;
  int v113;
  int v114[2];
  void *v115[2];
  void *v116[2];
  void *v117[2];
  _BYTE v118[120];
  void *__p;
  uint64_t v120;
  _BYTE v121[7];
  void *v122;
  uint64_t v123;
  _BYTE v124[4144];
  __int128 v125;
  __int128 v126;
  float *v127;
  void *v128[1792];
  _BYTE v129[14336];
  uint64_t v130;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v96 = v3;
  v6 = v2;
  v130 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_7;
  v7 = v2[1];
  if ((int)v7 >= 3)
  {
    v9 = (int *)*((_QWORD *)v2 + 8);
    v8 = 1;
    do
    {
      v10 = *v9++;
      v8 *= v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v8)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v128, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v122, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v129, 4294967081, v128, &v122, &__p, 194);
    cv::error((cv *)v129, v11);
  }
  v113 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 4);
  v106 = **((_DWORD **)v2 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4);
  v97 = **(unsigned int **)(v3 + 64);
  v104 = *v2;
  v13 = (v104 >> 3) & 0x1FF;
  v14 = v13 + 1;
  v15 = ((v13 + 1) * v12);
  v16 = 0x500000000 * (((int)v15 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  v17 = v124;
  v122 = v124;
  v123 = 1032;
  if ((unint64_t)v16 >= 0x40800000001)
  {
    v123 = v16 >> 32;
    v17 = (_BYTE *)operator new[]();
    v122 = v17;
  }
  v18 = v121;
  __p = v121;
  v120 = 1032;
  if (v15 >= 0x409)
  {
    v120 = (int)v15;
    v18 = (_BYTE *)operator new[]();
    __p = v18;
  }
  v127 = 0;
  v126 = 0u;
  v125 = 0u;
  v19 = 2 * v12 - v113;
  if (v19 < 0)
    v19 = v113 - 2 * v12;
  if (v19 > 2)
    goto LABEL_18;
  v20 = 2 * v97 - v106;
  if (v20 < 0)
    v20 = v106 - 2 * v97;
  if (v20 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v117, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v116, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v115, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v118, 4294967081, v117, v116, v115, 208);
    cv::error((cv *)v118, v21);
  }
  v111 = v18;
  v108 = (v15 + 15) & 0xFFFFFFF0;
  v105 = v6;
  v110 = v5;
  v22 = 0;
  v23 = 0;
  v24 = v113 - 3;
  if (v113 < 3)
    v24 = v113 - 2;
  v25 = v24 >> 1;
  if (v12 >= v25 + 1)
    v26 = v25 + 1;
  else
    v26 = v12;
  v101 = v26;
  v112 = 2 * v26 - 2;
  v109 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v27 = cv::borderInterpolate((cv *)(v23 - 2), v113, v110);
    v28 = cv::borderInterpolate((cv *)(v112 + v23), v113, v110);
    v29 = v27 * v14;
    v30 = v13 + 1;
    v31 = v22;
    v32 = v28 * v14;
    do
    {
      *(_DWORD *)&v129[v31] = v29;
      *(_DWORD *)((char *)v128 + v31) = v32;
      v31 += 4;
      ++v32;
      ++v29;
      --v30;
    }
    while (v30);
    ++v23;
    v22 += 4 * ((v104 >> 3) & 0x1FF) + 4;
  }
  while (v23 != 7);
  v33 = 2 * v14;
  if ((int)v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
      *(_DWORD *)&v18[4 * i] = i % v14 + v33 * (i / v14);
  }
  if ((int)v97 < 1)
    goto LABEL_72;
  v35 = 0;
  v36 = v14 * v101;
  v37 = (v104 >> 3) & 0x1FF;
  *(_QWORD *)v114 = 16 * v37 + 16;
  v38 = 8 * v37 + 8;
  v103 = 0;
  v39 = 4294967294;
  v100 = 2;
  __asm
  {
    FMOV            V10.2S, #4.0
    FMOV            V11.2S, #6.0
  }
  do
  {
    v98 = *(_QWORD *)(v96 + 80);
    v99 = *(_QWORD *)(v96 + 16);
    v102 = v35;
    if (2 * v35 + 2 < (int)v39)
      goto LABEL_66;
    v46 = v100;
    if ((int)v39 > v100)
      v46 = v39;
    v107 = v46;
    v95 = v46 + 1;
    while (2)
    {
      v47 = cv::borderInterpolate((cv *)v39, v106, v110);
      v48 = 0;
      v49 = ((int)v39 + 2) % 5 * v108;
      v50 = *((_QWORD *)v105 + 2) + *((_QWORD *)v105 + 10) * v47;
      v51 = v109 + 4 * v49;
      v52 = v109 + 8 + 4 * v49;
      v53 = v129;
      for (j = v13 + 1; ; j = (v13 + 1) * v12)
      {
        if (v48 < j)
        {
          v55 = 0;
          v56 = &v53[4 * v48];
          v57 = v51 + 4 * v48;
          v58 = (uint64_t)&v53[4 * ((v104 >> 3) & 0x1FF) + 4 + 4 * v48];
          v59 = j - (uint64_t)v48;
          do
          {
            *(float *)(v57 + 4 * v55) = (float)(*(float *)(v50 + 4 * *(int *)&v56[4 * v55])
                                              + (float)((float)((float)(*(float *)(v50 + 4 * *(int *)(v58 + 4 * v55))
                                                                      + *(float *)(v50
                                                                                 + 4
                                                                                 * *(int *)&v56[12
                                                                                              * ((v104 >> 3) & 0x1FF)
                                                                                              + 12
                                                                                              + 4 * v55]))
                                                              * 4.0)
                                                      + (float)(*(float *)(v50 + 4 * *(int *)&v56[4 * v55 + v38]) * 6.0)))
                                      + *(float *)(v50 + 4 * *(int *)&v56[4 * v55 + *(_QWORD *)v114]);
            ++v55;
          }
          while (v59 != v55);
          v48 = j;
        }
        if (v48 == (_DWORD)v15)
          break;
        switch((_DWORD)v13)
        {
          case 0:
            if (v48 >= v36)
              goto LABEL_62;
            v69 = 2 * v48;
            v70 = (float *)(v51 + 4 * v48);
            v71 = v36 - (uint64_t)v48;
            do
            {
              v72 = *(float *)(v50 + 4 * (v69 - 2))
                  + (float)((float)((float)(*(float *)(v50 + 4 * (v69 - 1)) + *(float *)(v50 + 4 * (v69 + 1))) * 4.0)
                          + (float)(*(float *)(v50 + 4 * v69) * 6.0));
              v69 += 2;
              *v70++ = *(float *)(v50 + 4 * v69) + v72;
              --v71;
            }
            while (v71);
            goto LABEL_61;
          case 2:
            if (v48 >= v36)
              goto LABEL_62;
            v60 = 0;
            v61 = v48;
            v65 = 2 * v48;
            v66 = (float *)(v52 + 4 * v48);
            do
            {
              v67 = v50 + 4 * v65;
              v68 = *(float *)(v67 + 32)
                  + (float)(*(float *)(v67 - 16)
                          + (float)((float)((float)(*(float *)(v67 - 4) + *(float *)(v67 + 20)) * 4.0)
                                  + (float)(*(float *)(v67 + 8) * 6.0)));
              *((float32x2_t *)v66 - 1) = vadd_f32(*(float32x2_t *)(v67 + 24), vadd_f32(*(float32x2_t *)(v67 - 24), vmla_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v67 - 12), *(float32x2_t *)(v67 + 12)), _D10), _D11, *(float32x2_t *)v67)));
              *v66 = v68;
              v66 += 3;
              v65 += 6;
              v60 += 3;
            }
            while (v61 + v60 < v36);
            goto LABEL_53;
          case 3:
            if (v48 >= v36)
              goto LABEL_62;
            v60 = 0;
            v61 = v48;
            v62 = 2 * v48;
            v63 = (float32x2_t *)(v52 + 4 * v48);
            do
            {
              v64 = (float32x2_t *)(v50 + 4 * v62);
              v63[-1] = vadd_f32(v64[4], vadd_f32(v64[-4], vmla_f32(vmul_f32(vadd_f32(v64[-2], v64[2]), _D10), _D11, *v64)));
              *v63 = vadd_f32(v64[5], vadd_f32(v64[-3], vmla_f32(vmul_f32(vadd_f32(v64[-1], v64[3]), _D10), _D11, v64[1])));
              v63 += 2;
              v62 += 8;
              v60 += 4;
            }
            while (v61 + v60 < v36);
LABEL_53:
            v48 = v61 + v60;
            goto LABEL_62;
        }
        if (v48 < v36)
        {
          v73 = (int *)&v111[4 * v48];
          v74 = (float *)(v51 + 4 * v48);
          v75 = v36 - (uint64_t)v48;
          do
          {
            v76 = *v73++;
            *v74++ = *(float *)(v50 + 4 * ((int)v76 + v33))
                   + (float)(*(float *)(v50 + 4 * ((int)v76 - v33))
                           + (float)((float)((float)(*(float *)(v50 + 4 * (int)(v76 - v14))
                                                   + *(float *)(v50 + 4 * (int)(v76 + v14)))
                                           * 4.0)
                                   + (float)(*(float *)(v50 + 4 * v76) * 6.0)));
            --v75;
          }
          while (v75);
LABEL_61:
          v48 = v36;
        }
LABEL_62:
        v53 = (char *)v128 - 4 * v48;
      }
      _ZF = (_DWORD)v39 == v107;
      v39 = (v39 + 1);
      if (!_ZF)
        continue;
      break;
    }
    v39 = v95;
LABEL_66:
    for (k = 0; k != 5; ++k)
      *((_QWORD *)&v125 + k) = v109 + 4 * (v103 + (int)k) % 5 * v108;
    if ((int)v15 >= 1)
    {
      v79 = (float *)*((_QWORD *)&v125 + 1);
      v78 = (float *)v125;
      v81 = (float *)*((_QWORD *)&v126 + 1);
      v80 = (float *)v126;
      v82 = (float *)(v99 + v98 * v102);
      v83 = 4 * ((v13 + 1) * v12);
      v84 = v127;
      do
      {
        v85 = *v80++;
        v86 = v85;
        v87 = *v79++;
        v88 = v87;
        v89 = *v81++;
        v90 = (float)((float)(v88 + v89) * 4.0) + (float)(v86 * 6.0);
        v91 = *v78++;
        v92 = v91 + v90;
        v93 = *v84++;
        *v82++ = (float)(v93 + v92) * 0.0039062;
        v83 -= 4;
      }
      while (v83);
    }
    v35 = v102 + 1;
    v100 += 2;
    v103 += 2;
  }
  while (v102 + 1 != v97);
LABEL_72:
  if (__p != v121 && __p)
    MEMORY[0x2207351A4]();
  result = v122;
  if (v122 != v124 && v122)
    return (void *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E1BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FltCast<double,8>,cv::NoVec<double,double>>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  const cv::Exception *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  int j;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  float64x2_t *v64;
  float64x2_t *v65;
  int v66;
  double *v67;
  uint64_t v68;
  double v69;
  int v70;
  double *v71;
  uint64_t v72;
  double v73;
  int v74;
  int *v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t k;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  uint64_t v85;
  double *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  void *result;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  _BYTE *v112;
  unint64_t v113;
  float64x2_t v114;
  float64x2_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119[2];
  void *v120[2];
  void *v121[2];
  void *v122[2];
  _BYTE v123[120];
  void *__p;
  uint64_t v125;
  _BYTE v126[7];
  void *v127;
  uint64_t v128;
  _BYTE v129[4176];
  __int128 v130;
  __int128 v131;
  double *v132;
  void *v133[1792];
  _BYTE v134[14336];
  uint64_t v135;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v98 = v3;
  v6 = v2;
  v135 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_7;
  v7 = v2[1];
  if ((int)v7 >= 3)
  {
    v9 = (int *)*((_QWORD *)v2 + 8);
    v8 = 1;
    do
    {
      v10 = *v9++;
      v8 *= v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v8)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v133, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v127, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v134, 4294967081, v133, &v127, &__p, 194);
    cv::error((cv *)v134, v11);
  }
  v118 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 4);
  v106 = **((_DWORD **)v2 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4);
  v99 = **(unsigned int **)(v3 + 64);
  v113 = *v2;
  v13 = (v113 >> 3) & 0x1FF;
  v14 = v13 + 1;
  v15 = ((v13 + 1) * v12);
  v16 = 0x500000000 * (((int)v15 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  v17 = v129;
  v127 = v129;
  v128 = 520;
  if ((unint64_t)v16 >= 0x20800000001)
  {
    v128 = v16 >> 32;
    v17 = (_BYTE *)operator new[]();
    v127 = v17;
  }
  v18 = v126;
  __p = v126;
  v125 = 1032;
  if (v15 >= 0x409)
  {
    v125 = (int)v15;
    v18 = (_BYTE *)operator new[]();
    __p = v18;
  }
  v132 = 0;
  v131 = 0u;
  v130 = 0u;
  v19 = 2 * v12 - v118;
  if (v19 < 0)
    v19 = v118 - 2 * v12;
  if (v19 > 2)
    goto LABEL_18;
  v20 = 2 * v99 - v106;
  if (v20 < 0)
    v20 = v106 - 2 * v99;
  if (v20 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v122, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v121, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v120, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v123, 4294967081, v122, v121, v120, 208);
    cv::error((cv *)v123, v21);
  }
  v112 = v18;
  v109 = (v15 + 15) & 0xFFFFFFF0;
  v105 = v6;
  v111 = v5;
  v22 = 0;
  v23 = 0;
  v24 = v118 - 3;
  if (v118 < 3)
    v24 = v118 - 2;
  v25 = v24 >> 1;
  if (v12 >= v25 + 1)
    v26 = v25 + 1;
  else
    v26 = v12;
  v107 = v26;
  v116 = 2 * v26 - 2;
  v110 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v27 = cv::borderInterpolate((cv *)(v23 - 2), v118, v111);
    v28 = cv::borderInterpolate((cv *)(v116 + v23), v118, v111);
    v29 = v27 * v14;
    v30 = v13 + 1;
    v31 = v22;
    v32 = v28 * v14;
    do
    {
      *(_DWORD *)&v134[v31] = v29;
      *(_DWORD *)((char *)v133 + v31) = v32;
      v31 += 4;
      ++v32;
      ++v29;
      --v30;
    }
    while (v30);
    ++v23;
    v22 += 4 * ((v113 >> 3) & 0x1FF) + 4;
  }
  while (v23 != 7);
  v33 = 2 * v14;
  if ((int)v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
      *(_DWORD *)&v18[4 * i] = i % v14 + v33 * (i / v14);
  }
  if ((int)v99 < 1)
    goto LABEL_72;
  v35 = 0;
  v36 = v14 * v107;
  v37 = (v113 >> 3) & 0x1FF;
  v117 = 12 * v37 + 12;
  *(_QWORD *)v119 = 16 * v37 + 16;
  v38 = v37;
  v39 = 8 * v37 + 8;
  v104 = 0;
  v40 = 4294967294;
  v102 = 2;
  __asm
  {
    FMOV            V1.2D, #4.0
    FMOV            V0.2D, #6.0
  }
  v114 = _Q0;
  v115 = _Q1;
  do
  {
    v100 = *(_QWORD *)(v98 + 80);
    v101 = *(_QWORD *)(v98 + 16);
    v103 = v35;
    if (2 * v35 + 2 < (int)v40)
      goto LABEL_66;
    v47 = v102;
    if ((int)v40 > v102)
      v47 = v40;
    v108 = v47;
    v97 = v47 + 1;
    while (2)
    {
      v48 = cv::borderInterpolate((cv *)v40, v106, v111);
      v49 = 0;
      v50 = ((int)v40 + 2) % 5 * v109;
      v51 = *((_QWORD *)v105 + 2) + *((_QWORD *)v105 + 10) * v48;
      v52 = v110 + 8 * v50;
      v53 = v110 + 16 + 8 * v50;
      v54 = v134;
      for (j = v13 + 1; ; j = (v13 + 1) * v12)
      {
        if (v49 < j)
        {
          v56 = 0;
          v57 = &v54[4 * v49];
          v58 = v52 + 8 * v49;
          v59 = (uint64_t)&v54[4 * v38 + 4 + 4 * v49];
          v60 = j - (uint64_t)v49;
          do
          {
            *(double *)(v58 + 8 * v56) = *(double *)(v51 + 8 * *(int *)&v57[4 * v56])
                                       + (*(double *)(v51 + 8 * *(int *)(v59 + 4 * v56))
                                        + *(double *)(v51 + 8 * *(int *)&v57[4 * v56 + v117]))
                                       * 4.0
                                       + *(double *)(v51 + 8 * *(int *)&v57[4 * v56 + v39]) * 6.0
                                       + *(double *)(v51 + 8 * *(int *)&v57[4 * v56 + *(_QWORD *)v119]);
            ++v56;
          }
          while (v60 != v56);
          v49 = j;
        }
        if (v49 == (_DWORD)v15)
          break;
        switch((_DWORD)v13)
        {
          case 0:
            if (v49 >= v36)
              goto LABEL_62;
            v70 = 2 * v49;
            v71 = (double *)(v52 + 8 * v49);
            v72 = v36 - (uint64_t)v49;
            do
            {
              v73 = (*(double *)(v51 + 8 * (v70 - 1)) + *(double *)(v51 + 8 * (v70 + 1))) * 4.0
                  + *(double *)(v51 + 8 * v70) * 6.0;
              v74 = v70 - 2;
              v70 += 2;
              *v71++ = *(double *)(v51 + 8 * v70) + *(double *)(v51 + 8 * v74) + v73;
              --v72;
            }
            while (v72);
            goto LABEL_61;
          case 2:
            if (v49 >= v36)
              goto LABEL_62;
            v61 = 0;
            v62 = v49;
            v66 = 2 * v49;
            v67 = (double *)(v53 + 8 * v49);
            do
            {
              v68 = v51 + 8 * v66;
              v69 = *(double *)(v68 + 64)
                  + *(double *)(v68 - 32)
                  + (*(double *)(v68 - 8) + *(double *)(v68 + 40)) * 4.0
                  + *(double *)(v68 + 16) * 6.0;
              *((float64x2_t *)v67 - 1) = vaddq_f64(*(float64x2_t *)(v68 + 48), vaddq_f64(*(float64x2_t *)(v68 - 48), vmlaq_f64(vmulq_f64(vaddq_f64(*(float64x2_t *)(v68 - 24), *(float64x2_t *)(v68 + 24)), v115), v114, *(float64x2_t *)v68)));
              *v67 = v69;
              v67 += 3;
              v66 += 6;
              v61 += 3;
            }
            while (v62 + v61 < v36);
            goto LABEL_53;
          case 3:
            if (v49 >= v36)
              goto LABEL_62;
            v61 = 0;
            v62 = v49;
            v63 = 2 * v49;
            v64 = (float64x2_t *)(v53 + 8 * v49);
            do
            {
              v65 = (float64x2_t *)(v51 + 8 * v63);
              v64[-1] = vaddq_f64(v65[4], vaddq_f64(v65[-4], vmlaq_f64(vmulq_f64(vaddq_f64(v65[-2], v65[2]), v115), v114, *v65)));
              *v64 = vaddq_f64(v65[5], vaddq_f64(v65[-3], vmlaq_f64(vmulq_f64(vaddq_f64(v65[-1], v65[3]), v115), v114, v65[1])));
              v64 += 2;
              v63 += 8;
              v61 += 4;
            }
            while (v62 + v61 < v36);
LABEL_53:
            v49 = v62 + v61;
            goto LABEL_62;
        }
        if (v49 < v36)
        {
          v75 = (int *)&v112[4 * v49];
          v76 = (double *)(v52 + 8 * v49);
          v77 = v36 - (uint64_t)v49;
          do
          {
            v78 = *v75++;
            *v76++ = *(double *)(v51 + 8 * ((int)v78 + v33))
                   + *(double *)(v51 + 8 * ((int)v78 - v33))
                   + (*(double *)(v51 + 8 * (int)(v78 - v14)) + *(double *)(v51 + 8 * (int)(v78 + v14))) * 4.0
                   + *(double *)(v51 + 8 * v78) * 6.0;
            --v77;
          }
          while (v77);
LABEL_61:
          v49 = v36;
        }
LABEL_62:
        v54 = (char *)v133 - 4 * v49;
      }
      _ZF = (_DWORD)v40 == v108;
      v40 = (v40 + 1);
      if (!_ZF)
        continue;
      break;
    }
    v40 = v97;
LABEL_66:
    for (k = 0; k != 5; ++k)
      *((_QWORD *)&v130 + k) = v110 + 8 * (v104 + (int)k) % 5 * v109;
    if ((int)v15 >= 1)
    {
      v81 = (double *)*((_QWORD *)&v130 + 1);
      v80 = (double *)v130;
      v83 = (double *)*((_QWORD *)&v131 + 1);
      v82 = (double *)v131;
      v84 = (double *)(v101 + v100 * v103);
      v85 = 8 * ((v13 + 1) * v12);
      v86 = v132;
      do
      {
        v87 = *v82++;
        v88 = v87;
        v89 = *v81++;
        v90 = v89;
        v91 = *v83++;
        v92 = (v90 + v91) * 4.0 + v88 * 6.0;
        v93 = *v80++;
        v94 = v93 + v92;
        v95 = *v86++;
        *v84++ = (v95 + v94) * 0.00390625;
        v85 -= 8;
      }
      while (v85);
    }
    v35 = v103 + 1;
    v102 += 2;
    v104 += 2;
  }
  while (v103 + 1 != v99);
LABEL_72:
  if (__p != v126 && __p)
    MEMORY[0x2207351A4]();
  result = v127;
  if (v127 != v129 && v127)
    return (void *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E1C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (STACK[0x11C0] != a10 && STACK[0x11C0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

void cv::GlBuffer::GlBuffer(uint64_t a1, int a2)
{
  const cv::Exception *v2;
  void *__p[2];
  void *v4[2];
  void *v5[2];
  _BYTE v6[120];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "This function in deprecated, do not use it");
  std::string::basic_string[abi:ne180100]<0>(v4, "GlBuffer");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/opengl_interop_deprecated.cpp");
  cv::Exception::Exception(v6, 4294967083, v5, v4, __p, 68);
  cv::error((cv *)v6, v2);
}

void sub_219E1CAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::Ptr<cv::GlBuffer::Impl>::~Ptr(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::Ptr<cv::GlBuffer::Impl>::~Ptr(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(unsigned int **)(a1 + 8);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      if (*(_QWORD *)a1)
        MEMORY[0x2207351BC]();
      cv::fastFree(*(void ***)(a1 + 8), a2);
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void cv::GlTexture::GlTexture(cv::GlTexture *this)
{
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  cv::GlBuffer::GlBuffer((uint64_t)this + 32, 35052);
}

void sub_219E1CC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  cv::GlBuffer *v28;
  void *v30;
  void *v31;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::GlBuffer::~GlBuffer(v28, v30);
  cv::Ptr<cv::GlTexture::Impl>::~Ptr(v27, v31);
  _Unwind_Resume(a1);
}

void sub_219E1CCE8()
{
  JUMPOUT(0x219E1CCD8);
}

void cv::GlBuffer::~GlBuffer(cv::GlBuffer *this, void *a2)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_QWORD *)((char *)this + 16);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      if (*v3)
        MEMORY[0x2207351BC](*v3, 0xC400A2AC0F1);
      cv::fastFree(*((void ***)this + 3), a2);
    }
  }
  *v3 = 0;
  v3[1] = 0;
}

uint64_t cv::Ptr<cv::GlTexture::Impl>::~Ptr(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(unsigned int **)(a1 + 8);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      if (*(_QWORD *)a1)
        MEMORY[0x2207351BC]();
      cv::fastFree(*(void ***)(a1 + 8), a2);
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

const char *cvAttrValue(const char *result, char *__s1)
{
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  uint64_t v6;
  const char *v7;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = 1;
    while (1)
    {
      v5 = *(const char ***)v3;
      if (!*(_QWORD *)v3)
        return 0;
      if (*v5)
      {
        if (!strcmp(__s1, *v5))
          return v5[v4];
        LODWORD(v6) = 1;
        while (1)
        {
          v7 = v5[(v6 + 1)];
          if (!v7)
            break;
          v6 = (v6 + 2);
          if (!strcmp(__s1, v7))
          {
            v4 = v6;
            return v5[v4];
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        return 0;
    }
  }
  return result;
}

uint64_t cvGetFileNodeByName(uint64_t a1, uint64_t a2, _BYTE *__s2)
{
  const cv::Exception *v6;
  const cv::Exception *v7;
  int v8;
  size_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t SeqElem;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const cv::Exception *v23;
  void *__p[2];
  void *v26[2];
  void *v27[2];
  _BYTE v28[120];

  if (!a1)
    return 0;
  if (*(_DWORD *)a1 != 1280131417)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v28, 4294967291, v27, v26, __p, 740);
    cv::error((cv *)v28, v6);
  }
  if (!__s2)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Null element name");
    std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v28, 4294967269, v27, v26, __p, 743);
    cv::error((cv *)v28, v7);
  }
  v8 = *__s2;
  if (*__s2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v10 = 33 * v10 + v8;
      v8 = __s2[++v9];
    }
    while (v8);
    v11 = v10 & 0x7FFFFFFF;
    v12 = v9;
    if (a2)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v9 = 0;
    if (a2)
    {
LABEL_10:
      v13 = 1;
      goto LABEL_11;
    }
  }
  v22 = *(_QWORD *)(a1 + 48);
  if (!v22)
    return 0;
  v13 = *(_DWORD *)(v22 + 40);
  if (v13 < 1)
    return 0;
LABEL_11:
  v14 = 0;
  while (1)
  {
    SeqElem = a2;
    if (!a2)
      SeqElem = cvGetSeqElem(*(_QWORD *)(a1 + 48), v14);
    v16 = *(_DWORD *)SeqElem & 7;
    if (v16 != 6)
    {
      if (v16 && (v16 != 5 || *(_DWORD *)(*(_QWORD *)(SeqElem + 16) + 40)))
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "The node is neither a map nor an empty collection");
        std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v28, 4294967294, v27, v26, __p, 770);
        cv::error((cv *)v28, v23);
      }
      return 0;
    }
    v17 = *(_QWORD *)(SeqElem + 16);
    v18 = *(_DWORD *)(v17 + 108);
    v19 = (v18 & (v18 - 1)) != 0 ? v11 % v18 : (v18 - 1) & v11;
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 112) + 8 * v19);
    if (v20)
      break;
LABEL_23:
    if (++v14 == v13)
      return 0;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v20 + 32);
    if (*(_DWORD *)v21 == v11 && *(_DWORD *)(v21 + 8) == v12 && !memcmp(*(const void **)(v21 + 16), __s2, v9))
      return v20;
    v20 = *(_QWORD *)(v20 + 40);
    if (!v20)
      goto LABEL_23;
  }
}

void sub_219E1D20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void icvPuts(uint64_t a1, char *__s)
{
  char *v2;
  _QWORD *v3;
  size_t v4;
  size_t v5;
  FILE *v6;
  const cv::Exception *v7;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  v2 = __s;
  v3 = *(_QWORD **)(a1 + 376);
  if (v3)
  {
    v4 = strlen(__s);
    if (v4)
    {
      v5 = v4;
      do
      {
        std::deque<char>::push_back(v3, v2++);
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v6 = *(FILE **)(a1 + 104);
    if (!v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "The storage is not opened");
      std::string::basic_string[abi:ne180100]<0>(v9, "icvPuts");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 286);
      cv::error((cv *)v11, v7);
    }
    fputs(v2, v6);
  }
}

void sub_219E1D394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvStartWriteStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const cv::Exception *v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  if (!a1)
  {
    v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvStartWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, v4, v10, v9, __p, 2963);
    cv::error((cv *)v11, v5);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v4 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvStartWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 2963);
    cv::error((cv *)v11, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
}

void sub_219E1D58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvEndWriteStruct(uint64_t a1)
{
  uint64_t v1;
  const cv::Exception *v2;
  const cv::Exception *v3;
  void *__p[2];
  void *v6[2];
  void *v7[2];
  _BYTE v8[120];

  if (!a1)
  {
    v1 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvEndWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v8, v1, v7, v6, __p, 2971);
    cv::error((cv *)v8, v2);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v1 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvEndWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v8, 4294967294, v7, v6, __p, 2971);
    cv::error((cv *)v8, v3);
  }
  return (*(uint64_t (**)(uint64_t))(a1 + 304))(a1);
}

void sub_219E1D76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvWriteInt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const cv::Exception *v4;
  const cv::Exception *v5;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  _BYTE v10[120];

  if (!a1)
  {
    v3 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v9, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvWriteInt");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v10, v3, v9, v8, __p, 2979);
    cv::error((cv *)v10, v4);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v3 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvWriteInt");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v10, 4294967294, v9, v8, __p, 2979);
    cv::error((cv *)v10, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 312))(a1, a2, a3);
}

void sub_219E1D964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cvWriteString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const cv::Exception *v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v9[2];
  void *v10[2];
  _BYTE v11[120];

  if (!a1)
  {
    v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvWriteString");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, v4, v10, v9, __p, 2995);
    cv::error((cv *)v11, v5);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v4 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvWriteString");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 2995);
    cv::error((cv *)v11, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 328))(a1, a2, a3, a4);
}

void sub_219E1DB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *cvWriteRawData(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v5;
  const cv::Exception *v6;
  const cv::Exception *v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  const cv::Exception *v12;
  const cv::Exception *v13;
  int v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  int v18;
  int v19;
  double *v20;
  int v21;
  unsigned int v22;
  char *v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  float v35;
  int v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  void *__p[2];
  void *v49[2];
  void *v50[2];
  char v51[120];
  char __dst[16];
  _OWORD v53[15];
  _QWORD v54[130];

  v45 = a3;
  v54[128] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__dst = 0u;
  memset(v53, 0, sizeof(v53));
  if (!a1)
  {
    v5 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v50, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v49, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v51, v5, v50, v49, __p, 3131);
    cv::error((cv *)v51, v6);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v5 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v49, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v51, 4294967294, v50, v49, __p, 3131);
    cv::error((cv *)v51, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "Negative number of elements");
    std::string::basic_string[abi:ne180100]<0>(v49, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v51, 4294967085, v50, v49, __p, 3134);
    cv::error((cv *)v51, v12);
  }
  result = (void *)icvDecodeFormat(a4, (int *)v54);
  v44 = (int)result;
  if (v45)
  {
    if (!a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "Null data pointer");
      std::string::basic_string[abi:ne180100]<0>(v49, "cvWriteRawData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v51, 4294967269, v50, v49, __p, 3142);
      cv::error((cv *)v51, v13);
    }
    if ((_DWORD)result == 1)
    {
      LODWORD(v54[0]) *= v45;
      v45 = 1;
    }
    v14 = 0;
    do
    {
      if (v44 >= 1)
      {
        v15 = 0;
        do
        {
          if (v14 == 0x7FFFFFFF
            || (v16 = (int *)&v54[v15],
                v17 = v16[1],
                v11.i32[0] = (((v17 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v17 & 7))) & 3),
                v11 = vcnt_s8(v11),
                v11.i16[0] = vaddlv_u8((uint8x8_t)v11),
                v11.i32[0] >= 2u))
          {
            cvWriteRawData_cold_1((uint64_t)result, v9, v10);
          }
          v19 = *v16;
          v18 = (((v17 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v17 & 7))) & 3);
          v20 = (double *)(a2 + ((v14 + v18 - 1) & -v18));
          v46 = v15;
          if (*v16 >= 1)
          {
            if (v17 > 7)
              cvWriteRawData_cold_2();
            v21 = 0;
            while (1)
            {
              switch(v17)
              {
                case 0u:
                  v22 = *(unsigned __int8 *)v20;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 7;
                  do
                  {
                    *--v23 = v22 % 0xA + 48;
                    v24 = v22 >= 0xA;
                    v22 /= 0xAu;
                  }
                  while (v24);
                  goto LABEL_74;
                case 1u:
                  v33 = *(char *)v20;
                  if (v33 >= 0)
                    v34 = *(char *)v20;
                  else
                    v34 = -v33;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 6;
                  do
                  {
                    *v23-- = v34 % 0xA + 48;
                    v27 = v34 > 9;
                    v34 /= 0xAu;
                  }
                  while (v27);
                  if (v33 < 0)
                    *v23 = 45;
                  else
                    ++v23;
LABEL_74:
                  v39 = 1;
                  goto LABEL_84;
                case 2u:
                  v28 = *(unsigned __int16 *)v20;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 7;
                  do
                  {
                    *--v23 = v28 % 0xA + 48;
                    v24 = v28 >= 0xA;
                    v28 /= 0xAu;
                  }
                  while (v24);
                  goto LABEL_70;
                case 3u:
                  v29 = *(__int16 *)v20;
                  if (v29 >= 0)
                    v30 = *(__int16 *)v20;
                  else
                    v30 = -v29;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 6;
                  do
                  {
                    *v23-- = v30 % 0xA + 48;
                    v27 = v30 > 9;
                    v30 /= 0xAu;
                  }
                  while (v27);
                  if (v29 < 0)
                    *v23 = 45;
                  else
                    ++v23;
LABEL_70:
                  v39 = 2;
                  goto LABEL_84;
                case 4u:
                  v25 = *(_DWORD *)v20;
                  if (*(int *)v20 >= 0)
                    v26 = *(_DWORD *)v20;
                  else
                    v26 = -v25;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 6;
                  do
                  {
                    *v23-- = v26 % 0xA + 48;
                    v27 = v26 > 9;
                    v26 /= 0xAu;
                  }
                  while (v27);
                  if (v25 < 0)
                    *v23 = 45;
                  else
                    ++v23;
                  goto LABEL_83;
                case 5u:
                  v35 = *(float *)v20;
                  v36 = *(_DWORD *)v20;
                  if ((~*(_DWORD *)v20 & 0x7F800000) != 0)
                  {
                    v38 = (uint64_t)rint(v35);
                    if (v35 == (float)(int)v38)
                    {
                      v23 = __dst;
                      sprintf(__dst, "%d.", v38);
                      goto LABEL_83;
                    }
                    v40 = __dst;
                    sprintf(__dst, "%.8e", v35);
                    if (__dst[0] == 45 || __dst[0] == 43)
                      v40 = &__dst[1];
                    do
                    {
                      v42 = *v40++;
                      v41 = v42;
                    }
                    while ((v42 - 48) < 0xA);
                    if (v41 == 44)
                      *(v40 - 1) = 46;
                    goto LABEL_82;
                  }
                  if ((v36 & 0x7FFFFFFF) != 0x7F800000)
                  {
                    strcpy(__dst, ".Nan");
LABEL_82:
                    v23 = __dst;
                    goto LABEL_83;
                  }
                  if (v36 >= 0)
                    v37 = ".Inf";
                  else
                    v37 = "-.Inf";
                  v23 = __dst;
                  strcpy(__dst, v37);
LABEL_83:
                  v39 = 4;
LABEL_84:
                  if (*(_DWORD *)(a1 + 4) == 8)
                  {
                    v43 = strlen(v23);
                    result = icvXMLWriteScalar(a1, 0, v23, v43);
                  }
                  else
                  {
                    result = icvYMLWrite((char *)a1, 0, v23);
                  }
                  v20 = (double *)((char *)v20 + v39);
                  if (++v21 == v19)
                    goto LABEL_88;
                  break;
                case 6u:
                  v23 = __dst;
                  icvDoubleToString(__dst, *v20);
                  goto LABEL_72;
                default:
                  v31 = *(_DWORD *)v20;
                  if (*(int *)v20 >= 0)
                    v32 = *(_DWORD *)v20;
                  else
                    v32 = -v31;
                  BYTE7(v53[0]) = 0;
                  v23 = (char *)v53 + 6;
                  do
                  {
                    *v23-- = v32 % 0xA + 48;
                    v27 = v32 > 9;
                    v32 /= 0xAu;
                  }
                  while (v27);
                  if (v31 < 0)
                    *v23 = 45;
                  else
                    ++v23;
LABEL_72:
                  v39 = 8;
                  goto LABEL_84;
              }
            }
          }
LABEL_88:
          v14 = (_DWORD)v20 - a2;
          v15 = v46 + 1;
        }
        while (v46 + 1 != v44);
      }
      --v45;
    }
    while (v45);
  }
  return result;
}

void sub_219E1E334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  cv::Exception::~Exception((cv::Exception *)&a35);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

const char *icvDecodeFormat(const char *result, int *a2)
{
  const char *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  const cv::Exception *v11;
  void *v12;
  const cv::Exception *v13;
  int v14;
  int v15;
  const cv::Exception *v16;
  int v17;
  void *__p[2];
  void *v19[2];
  void *v20[2];
  char *__endptr[16];

  if (result)
  {
    v3 = result;
    v4 = strlen(result);
    v5 = v4;
    if (v4)
    {
      if (!a2)
        icvDecodeFormat();
      *a2 = 0;
      if (v4 < 1)
      {
        v7 = 0;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = &v3[v6];
          v9 = *(unsigned __int8 *)v8;
          v10 = v9 - 48;
          if ((v9 - 48) > 9)
          {
            v12 = memchr("ucwsifdr", (char)v9, 9uLL);
            if (!v12)
            {
              std::string::basic_string[abi:ne180100]<0>(v20, "Invalid data type specification");
              std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3062);
              cv::error((cv *)__endptr, v13);
            }
            v14 = a2[v7];
            if (!v14)
            {
              v14 = 1;
              a2[v7] = 1;
            }
            v15 = (_DWORD)v12 - "ucwsifdr";
            a2[v7 + 1] = v15;
            if (v7 <= 0)
            {
              v10 = 0;
              v7 += 2;
            }
            else if (v15 == a2[v7 - 1])
            {
              v10 = 0;
              a2[v7 - 2] += v14;
            }
            else
            {
              if (v7 >= 0xFE)
              {
                std::string::basic_string[abi:ne180100]<0>(v20, "Too long data type specification");
                std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
                std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
                cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3072);
                cv::error((cv *)__endptr, v16);
              }
              v10 = 0;
              v7 += 2;
            }
          }
          else
          {
            if (v3[v6 + 1] - 48 <= 9)
            {
              __endptr[0] = 0;
              v10 = strtol(v8, __endptr, 10);
              v6 = ~(_DWORD)v3 + LODWORD(__endptr[0]);
            }
            if (v10 <= 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v20, "Invalid data type specification");
              std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3054);
              cv::error((cv *)__endptr, v11);
            }
          }
          a2[v7] = v10;
          ++v6;
        }
        while (v6 < v5);
      }
      if (v7 >= 0)
        v17 = v7;
      else
        v17 = v7 + 1;
      return (const char *)(v17 >> 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_219E1E6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

char *icvDoubleToString(char *__dst, double a2)
{
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  int v6;
  char *v7;
  int v8;
  int v9;

  if ((~HIDWORD(a2) & 0x7FF00000) != 0)
  {
    v4 = (uint64_t)rint(a2);
    if ((double)(int)v4 == a2)
    {
      sprintf(__dst, "%d.", v4);
    }
    else
    {
      sprintf(__dst, "%.16e", a2);
      v6 = *__dst;
      if (v6 == 45 || (v7 = __dst, v6 == 43))
        v7 = __dst + 1;
      do
      {
        v9 = *v7++;
        v8 = v9;
      }
      while ((v9 - 48) < 0xA);
      if (v8 == 44)
        *(v7 - 1) = 46;
    }
  }
  else
  {
    v3 = HIDWORD(a2) & 0x7FFFFFFF;
    if (LODWORD(a2))
      ++v3;
    if (v3 < 0x7FF00001)
    {
      if (a2 >= 0.0)
        v5 = ".Inf";
      else
        v5 = "-.Inf";
      strcpy(__dst, v5);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  return __dst;
}

void *icvXMLWriteScalar(uint64_t a1, const char *a2, const void *a3, int a4)
{
  char *v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  char *v15;
  char *v16;
  const void *v17;
  void *result;
  _BYTE *v19;
  const cv::Exception *v20;
  int v21;
  unint64_t v22;
  void *__p[2];
  void *v24[2];
  void *v25[2];
  _BYTE v26[120];

  if ((*(_DWORD *)(a1 + 68) & 7) == 6 || a2 && (*(_DWORD *)(a1 + 68) & 7u) <= 4)
  {
    icvXMLWriteTag(a1, a2, 1, 0, 0);
    v8 = *(char **)(a1 + 120);
    v9 = a4;
    v10 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)&v8[a4] >= v10)
    {
      v11 = *(_QWORD *)(a1 + 128);
      v12 = (_DWORD)v8 - v11;
      v13 = (3 * (v10 - v11) + (((3 * (v10 - v11)) & 0x8000000000000000) != 0)) >> 1;
      if (v12 + a4 <= (int)v13)
        v14 = v13;
      else
        v14 = v12 + a4;
      v15 = (char *)cvAlloc(v14 + 256);
      v16 = v15;
      v17 = *(const void **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = &v15[*(_QWORD *)(a1 + 120) - (_QWORD)v17];
      if (v12 >= 1)
        memcpy(v15, v17, v12);
      *(_QWORD *)(a1 + 128) = v16;
      *(_QWORD *)(a1 + 136) = &v16[v14];
      v8 = &v16[v12];
    }
    memcpy(v8, a3, v9);
    *(_QWORD *)(a1 + 120) = &v8[v9];
    return (void *)icvXMLWriteTag(a1, a2, 2, 0, 0);
  }
  else
  {
    v19 = *(_BYTE **)(a1 + 120);
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "elements with keys can not be written to sequence");
      std::string::basic_string[abi:ne180100]<0>(v24, "icvXMLWriteScalar");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v26, 4294967291, v25, v24, __p, 2489);
      cv::error((cv *)v26, v20);
    }
    v21 = (_DWORD)v19 - *(_DWORD *)(a1 + 128) + a4;
    *(_DWORD *)(a1 + 68) = 5;
    if (v21 > *(_DWORD *)(a1 + 144) && v21 - *(_DWORD *)(a1 + 64) > 10
      || (v22 = *(_QWORD *)(a1 + 128), (unint64_t)v19 > v22) && *(v19 - 1) == 62)
    {
      v19 = (_BYTE *)icvFSFlush(a1);
    }
    else if ((unint64_t)v19 > v22 + *(int *)(a1 + 64) && *(v19 - 1) != 62)
    {
      *v19++ = 32;
    }
    result = memcpy(v19, a3, a4);
    *(_QWORD *)(a1 + 120) = &v19[a4];
  }
  return result;
}

void sub_219E1EAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

char *icvYMLWrite(char *result, const char *a2, const char *a3)
{
  uint64_t v4;
  int v5;
  const char *v6;
  const cv::Exception *v7;
  int v8;
  const cv::Exception *v9;
  const cv::Exception *v10;
  int v11;
  char *v12;
  _BYTE *v13;
  int v14;
  int v15;
  const cv::Exception *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  _DWORD *v22;
  const void *v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 v26;
  char v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  const cv::Exception *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  char *v39;
  char *v40;
  const void *v41;
  void *__p[2];
  void *v43[2];
  void *v44[2];
  _BYTE v45[128];

  v4 = (uint64_t)result;
  v5 = *((_DWORD *)result + 17);
  if (a2)
  {
    if (*a2)
      v6 = a2;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if ((*((_DWORD *)result + 17) & 7u) < 5)
  {
    *((_DWORD *)result + 3) = 0;
    if (v6)
      v5 = 38;
    else
      v5 = 37;
  }
  else if (((*((_DWORD *)result + 17) & 7) == 6) != (v6 != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "An attempt to add element without a key to a map, or add element with key to sequence");
    std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1459);
    cv::error((cv *)v45, v7);
  }
  if (v6)
  {
    result = (char *)strlen(v6);
    if (!(_DWORD)result)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "The key is an empty");
      std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1471);
      cv::error((cv *)v45, v10);
    }
    v8 = (int)result;
    if ((int)result > 4096)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "The key is too long");
      std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1474);
      cv::error((cv *)v45, v9);
    }
  }
  else
  {
    v8 = 0;
  }
  if (a3)
  {
    result = (char *)strlen(a3);
    v11 = (int)result;
    if ((v5 & 8) == 0)
      goto LABEL_20;
  }
  else
  {
    v11 = 0;
    if ((v5 & 8) == 0)
    {
LABEL_20:
      result = (char *)icvFSFlush(v4);
      v12 = result;
      if ((v5 & 7) != 6)
      {
        *result = 45;
        if (a3)
        {
          result[1] = 32;
          v12 = result + 2;
          if (!v6)
            goto LABEL_58;
        }
        else
        {
          v12 = result + 1;
          if (!v6)
            goto LABEL_58;
        }
        goto LABEL_33;
      }
LABEL_32:
      if (!v6)
        goto LABEL_58;
      goto LABEL_33;
    }
  }
  v13 = *(_BYTE **)(v4 + 120);
  if ((v5 & 0x20) == 0)
    *v13++ = 44;
  v14 = v11 + v8 + (_DWORD)v13 - *(_DWORD *)(v4 + 128);
  if (v14 <= *(_DWORD *)(v4 + 144) || v14 - *(_DWORD *)(v4 + 64) < 11)
  {
    *v13 = 32;
    v12 = v13 + 1;
    goto LABEL_32;
  }
  *(_QWORD *)(v4 + 120) = v13;
  result = (char *)icvFSFlush(v4);
  v12 = result;
  if (!v6)
    goto LABEL_58;
LABEL_33:
  v15 = *(unsigned __int8 *)v6;
  if (v15 != 95 && (v15 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "Key must start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1509);
    cv::error((cv *)v45, v16);
  }
  v17 = *(_QWORD *)(v4 + 136);
  if ((unint64_t)&v12[v8] >= v17)
  {
    v18 = *(_QWORD *)(v4 + 128);
    v19 = (_DWORD)v12 - v18;
    v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
    if (v8 + (int)v12 - (int)v18 <= (int)v20)
      v21 = v20;
    else
      v21 = v8 + v19;
    result = (char *)cvAlloc(v21 + 256);
    v22 = result;
    v23 = *(const void **)(v4 + 128);
    *(_QWORD *)(v4 + 120) = &result[*(_QWORD *)(v4 + 120) - (_QWORD)v23];
    if (v19 >= 1)
      result = (char *)memcpy(result, v23, v19);
    *(_QWORD *)(v4 + 128) = v22;
    *(_QWORD *)(v4 + 136) = (char *)v22 + v21;
    v12 = (char *)v22 + v19;
  }
  if (v8 >= 1)
  {
    v24 = v8;
    v25 = v12;
    do
    {
      v27 = *v6++;
      v26 = v27;
      *v25 = v27;
      if ((v27 - 58) <= 0xF5u && ((v26 & 0xDF) - 91) <= 0xE5u)
      {
        v28 = v26 - 32;
        v29 = v28 > 0x3F;
        v30 = (1 << v28) & 0x8000000000002001;
        if (v29 || v30 == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '");
          std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
          cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1519);
          cv::error((cv *)v45, v32);
        }
      }
      ++v25;
      --v24;
    }
    while (v24);
  }
  v33 = &v12[v8];
  *v33 = 58;
  v12 = v33 + 1;
  if (!a3 || (v5 & 8) != 0)
  {
LABEL_58:
    if (!a3)
      goto LABEL_67;
    goto LABEL_59;
  }
  v12 = v33 + 2;
  v33[1] = 32;
LABEL_59:
  v34 = *(_QWORD *)(v4 + 136);
  if ((unint64_t)&v12[v11] >= v34)
  {
    v35 = *(_QWORD *)(v4 + 128);
    v36 = (_DWORD)v12 - v35;
    v37 = (3 * (v34 - v35) + (((3 * (v34 - v35)) & 0x8000000000000000) != 0)) >> 1;
    if (v11 + (int)v12 - (int)v35 <= (int)v37)
      v38 = v37;
    else
      v38 = v11 + v36;
    v39 = (char *)cvAlloc(v38 + 256);
    v40 = v39;
    v41 = *(const void **)(v4 + 128);
    *(_QWORD *)(v4 + 120) = &v39[*(_QWORD *)(v4 + 120) - (_QWORD)v41];
    if (v36 >= 1)
      memcpy(v39, v41, v36);
    *(_QWORD *)(v4 + 128) = v40;
    *(_QWORD *)(v4 + 136) = &v40[v38];
    v12 = &v40[v36];
  }
  result = (char *)memcpy(v12, a3, v11);
  v12 += v11;
LABEL_67:
  *(_QWORD *)(v4 + 120) = v12;
  *(_DWORD *)(v4 + 68) = v5 & 0xFFFFFFDF;
  return result;
}

void sub_219E1F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

double cvStartReadRawData(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const cv::Exception *v4;
  const cv::Exception *v5;
  int v6;
  double result;
  const cv::Exception *v8;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  if (!a1)
  {
    v3 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, v3, v11, v10, __p, 3222);
    cv::error((cv *)v12, v4);
  }
  if (*a1 != 1280131417)
  {
    v3 = 4294967291;
    goto LABEL_5;
  }
  if (!a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "Null pointer to source file node or reader");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 3225);
    cv::error((cv *)v12, v5);
  }
  v6 = *(_DWORD *)a2 & 7;
  if ((v6 - 1) > 1)
  {
    if (v6)
    {
      if (v6 != 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "The file node should be a numerical scalar or a sequence");
        std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v12, 4294967291, v11, v10, __p, 3245);
        cv::error((cv *)v12, v8);
      }
      return cvStartReadSeq(*(_QWORD *)(a2 + 16), a3, 0);
    }
    else
    {
      result = 0.0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = a2;
    *(_QWORD *)(a3 + 40) = a2 + 64;
    *(_QWORD *)(a3 + 24) = a2;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void sub_219E1F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *cvReadRawDataSlice(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, char *a5)
{
  uint64_t v6;
  const cv::Exception *v7;
  const cv::Exception *v8;
  const cv::Exception *v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  _WORD *v21;
  int v22;
  uint64_t v23;
  float v24;
  BOOL v25;
  char v26;
  const cv::Exception *v27;
  int v28;
  unint64_t v29;
  const cv::Exception *v30;
  uint64_t v31;
  int v32;
  void *__p[2];
  void *v35[2];
  void *v36[2];
  _BYTE v37[120];
  _QWORD v38[130];

  v32 = a3;
  v38[128] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v6 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v36, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v35, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v37, v6, v36, v35, __p, 3257);
    cv::error((cv *)v37, v7);
  }
  if (*a1 != 1280131417)
  {
    v6 = 4294967291;
    goto LABEL_5;
  }
  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "Null pointer to reader or destination array");
    std::string::basic_string[abi:ne180100]<0>(v35, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v37, 4294967269, v36, v35, __p, 3260);
    cv::error((cv *)v37, v8);
  }
  if (a3 != 1 && !a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "The readed sequence is a scalar, thus len must be 1");
    std::string::basic_string[abi:ne180100]<0>(v35, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v37, 4294967095, v36, v35, __p, 3263);
    cv::error((cv *)v37, v9);
  }
  result = (void *)icvDecodeFormat(a5, (int *)v38);
  v14 = 0;
  v15 = result;
  v31 = result;
LABEL_13:
  while ((int)v15 < 1)
    ;
  v16 = 0;
  while (1)
  {
    if (v14 == 0x7FFFFFFF
      || (v17 = (int *)&v38[v16],
          v18 = v17[1],
          LODWORD(v13) = (((v18 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v18 & 7))) & 3),
          v13 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v13)),
          LOWORD(v13) = vaddlv_u8(*(uint8x8_t *)&v13),
          LODWORD(v13) >= 2))
    {
      cvWriteRawData_cold_1((uint64_t)result, v11, v12);
    }
    v20 = *v17;
    v19 = (((v18 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v18 & 7))) & 3);
    v21 = (_WORD *)(a4 + ((v14 + v19 - 1) & -v19));
    if (*v17 >= 1)
      break;
LABEL_56:
    v14 = (_DWORD)v21 - a4;
    if (++v16 == v15)
      goto LABEL_13;
  }
  v22 = 0;
  while (1)
  {
    v23 = a2[3];
    if ((*(_DWORD *)v23 & 7) != 2)
    {
      if ((*(_DWORD *)v23 & 7) == 1)
      {
        LODWORD(v23) = *(_DWORD *)(v23 + 16);
        switch(v18)
        {
          case 0u:
            goto LABEL_25;
          case 1u:
            goto LABEL_43;
          case 2u:
            goto LABEL_30;
          case 3u:
            goto LABEL_34;
          case 4u:
            goto LABEL_28;
          case 5u:
            v24 = (float)(int)v23;
            goto LABEL_50;
          case 6u:
            v13 = (double)(int)v23;
            goto LABEL_32;
          case 7u:
            goto LABEL_41;
          default:
            cvReadRawDataSlice_cold_2();
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v36, "The sequence element is not a numerical scalar");
      std::string::basic_string[abi:ne180100]<0>(v35, "cvReadRawDataSlice");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v37, 4294967294, v36, v35, __p, 3377);
      cv::error((cv *)v37, v27);
    }
    v13 = *(double *)(v23 + 16);
    switch(v18)
    {
      case 0u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_25:
        LODWORD(v23) = v23 & ~((int)v23 >> 31);
        v25 = (int)v23 < 255;
        v26 = -1;
        goto LABEL_46;
      case 1u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_43:
        if ((int)v23 <= -128)
          LODWORD(v23) = -128;
        v25 = (int)v23 < 127;
        v26 = 127;
LABEL_46:
        if (!v25)
          LOBYTE(v23) = v26;
        *(_BYTE *)v21 = v23;
        v21 = (_WORD *)((char *)v21 + 1);
        break;
      case 2u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_30:
        LODWORD(v23) = v23 & ~((int)v23 >> 31);
        v28 = 0xFFFF;
        goto LABEL_37;
      case 3u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_34:
        if ((int)v23 <= -32768)
          LODWORD(v23) = -32768;
        v28 = 0x7FFF;
LABEL_37:
        if ((int)v23 >= v28)
          LOWORD(v23) = v28;
        *v21++ = v23;
        break;
      case 4u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_28:
        *(_DWORD *)v21 = v23;
        v21 += 2;
        break;
      case 5u:
        v24 = v13;
LABEL_50:
        *(float *)v21 = v24;
        v21 += 2;
        break;
      case 6u:
LABEL_32:
        *(double *)v21 = v13;
        v21 += 4;
        break;
      case 7u:
        v13 = rint(v13);
        v23 = (uint64_t)v13;
LABEL_41:
        *(_QWORD *)v21 = (int)v23;
        v21 += 4;
        break;
      default:
        cvReadRawDataSlice_cold_3();
    }
    v29 = a2[3] + 32;
    a2[3] = v29;
    if (v29 >= a2[5])
      result = cvChangeSeqBlock(a2, 1);
    if (v32 - 1 == v22)
      break;
    if (v20 == ++v22)
    {
      v32 -= v20;
      v15 = v31;
      goto LABEL_56;
    }
  }
  if (v32 != v20 || (_DWORD)v31 - 1 != (_DWORD)v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "The sequence slice does not fit an integer number of records");
    std::string::basic_string[abi:ne180100]<0>(v35, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v37, 4294967095, v36, v35, __p, 3391);
    cv::error((cv *)v37, v30);
  }
  if (!a2[1])
    a2[3] -= 32;
  return result;
}

void sub_219E1FAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  cv::Exception::~Exception((cv::Exception *)&a31);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void *cvReadRawData(_DWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  const cv::Exception *v8;
  int v9;
  void *__p[2];
  void *v12[2];
  void *v13[2];
  _BYTE v14[120];
  _QWORD v15[8];

  if (!a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "Null pointers to source file node or destination array");
    std::string::basic_string[abi:ne180100]<0>(v12, "cvReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v14, 4294967269, v13, v12, __p, 3405);
    cv::error((cv *)v14, v8);
  }
  cvStartReadRawData(a1, a2, (uint64_t)v15);
  if ((*(_DWORD *)a2 & 7) == 5)
    v9 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 40);
  else
    v9 = 1;
  return cvReadRawDataSlice(a1, v15, v9, a3, a4);
}

void sub_219E1FCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void *cvRegisterType(uint64_t a1)
{
  const cv::Exception *v2;
  const cv::Exception *v3;
  const char *v4;
  int v5;
  const cv::Exception *v7;
  int v8;
  int v9;
  uint64_t i;
  char v11;
  int v12;
  const cv::Exception *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  uint64_t *v20;
  void *__p[2];
  void *v22[2];
  void *v23[2];
  _BYTE v24[120];

  if (!a1 || *(_DWORD *)(a1 + 4) != 72)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Invalid type info");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967095, v23, v22, __p, 4851);
    cv::error((cv *)v24, v2);
  }
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Some of required function pointers (is_instance, release, read or write) are NULL");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967269, v23, v22, __p, 4857);
    cv::error((cv *)v24, v3);
  }
  v4 = *(const char **)(a1 + 24);
  v5 = *(unsigned __int8 *)v4;
  if (v5 != 95 && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Type name should start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967291, v23, v22, __p, 4861);
    cv::error((cv *)v24, v7);
  }
  v8 = strlen(v4);
  v9 = v8;
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      v11 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + i);
      if ((v11 - 58) <= 0xF5u && ((v11 & 0xDF) - 91) <= 0xE5u)
      {
        v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + i);
        if (v12 != 45 && v12 != 95)
        {
          std::string::basic_string[abi:ne180100]<0>(v23, "Type name should contain only letters, digits, - and _");
          std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
          cv::Exception::Exception(v24, 4294967291, v23, v22, __p, 4870);
          cv::error((cv *)v24, v13);
        }
      }
    }
  }
  v14 = cvAlloc(v8 + 73);
  v16 = *(_OWORD *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a1;
  *(_QWORD *)(v14 + 64) = v17;
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)(v14 + 48) = v15;
  *(_QWORD *)(v14 + 24) = v14 + 72;
  result = memcpy((void *)(v14 + 72), *(const void **)(a1 + 24), v9 + 1);
  *(_DWORD *)v14 = 0;
  v19 = CvType::first;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v19;
  if (v19)
    v20 = (uint64_t *)(v19 + 8);
  else
    v20 = (uint64_t *)&CvType::last;
  *v20 = v14;
  CvType::first = v14;
  return result;
}

void sub_219E200A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

BOOL icvIsSeq(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 17049;
  return result;
}

_QWORD *icvReleaseSeq(_QWORD *result)
{
  const cv::Exception *v1;
  void *__p[2];
  void *v3[2];
  void *v4[2];
  _BYTE v5[120];

  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "NULL double pointer");
    std::string::basic_string[abi:ne180100]<0>(v3, "icvReleaseSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v5, 4294967269, v4, v3, __p, 4026);
    cv::error((cv *)v5, v1);
  }
  *result = 0;
  return result;
}

void sub_219E20200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

int *icvReadSeq(uint64_t a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const cv::Exception *v10;
  unsigned int v11;
  const cv::Exception *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL4 v19;
  const cv::Exception *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const cv::Exception *v25;
  int v26;
  int v27;
  int v28;
  int *Seq;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  const cv::Exception *v49;
  int v50;
  const cv::Exception *v51;
  uint64_t i;
  int v54;
  void *__p[2];
  void *v56[2];
  void *v57[2];
  _BYTE v58[120];
  char *__endptr;
  _QWORD v60[8];
  int v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  __endptr = 0;
  FileNodeByName = cvGetFileNodeByName(a1, a2, "flags");
  if (FileNodeByName && (*(_DWORD *)FileNodeByName & 7) == 3)
    v5 = *(char **)(FileNodeByName + 24);
  else
    v5 = 0;
  v6 = cvGetFileNodeByName(a1, a2, "count");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v7) = -1;
  }
  v54 = v7;
  v8 = cvGetFileNodeByName(a1, a2, "dt");
  if (!v8 || (*(_DWORD *)v8 & 7) != 3 || (v9 = *(char **)(v8 + 24), !v5) || v54 == -1 || !v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "Some of essential sequence attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4250);
    cv::error((cv *)v58, v10);
  }
  if (*v5 - 48 > 9)
  {
    if (strstr(v5, "curve"))
      v15 = 1117327360;
    else
      v15 = 1117323264;
    if (strstr(v5, "closed"))
      v15 |= 0x4000u;
    if (strstr(v5, "hole"))
      v14 = v15 | 0x8000;
    else
      v14 = v15;
    if (!strstr(v5, "untyped"))
      v14 |= icvDecodeSimpleFormat(v9);
  }
  else
  {
    v11 = strtol(v5, &__endptr, 16);
    if (__endptr == v5 || (v11 & 0xFFFF0000) != 0x42990000)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "The sequence flags are invalid");
      std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4267);
      cv::error((cv *)v58, v12);
    }
    if ((v11 & 0xE00) == 0x200)
      v13 = 1117327360;
    else
      v13 = 1117323264;
    v14 = v11 & 0x81FF | (((v11 >> 12) & 1) << 14) | v13;
  }
  v16 = cvGetFileNodeByName(a1, a2, "header_dt");
  if (v16 && (*(_DWORD *)v16 & 7) == 3)
    v17 = *(char **)(v16 + 24);
  else
    v17 = 0;
  v18 = cvGetFileNodeByName(a1, a2, "header_user_data");
  v19 = v18 != 0;
  if ((v17 != 0) != v19)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "One of \"header_dt\" and \"header_user_data\" is there, while the other is not");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4301);
    cv::error((cv *)v58, v20);
  }
  v21 = cvGetFileNodeByName(a1, a2, "rect");
  v22 = cvGetFileNodeByName(a1, a2, "origin");
  v23 = v22;
  if (v21)
    v24 = v19 + 1;
  else
    v24 = v18 != 0;
  if (v22)
    ++v24;
  if (v24 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4307);
    cv::error((cv *)v58, v25);
  }
  if (v17)
  {
    v26 = icvCalcElemSize(v17, 96);
  }
  else
  {
    if (v22)
      v27 = 104;
    else
      v27 = 96;
    if (v21)
      v26 = 128;
    else
      v26 = v27;
  }
  v28 = icvCalcElemSize(v9, 0);
  Seq = cvCreateSeq(v14, v26, v28, *(_QWORD *)(a1 + 24));
  v30 = Seq;
  if (v18)
  {
    cvReadRawData((_DWORD *)a1, v18, (uint64_t)(Seq + 24), v17);
  }
  else if (v21)
  {
    v31 = cvGetFileNodeByName(a1, v21, "x");
    if (v31)
    {
      if ((*(_DWORD *)v31 & 7) == 2)
      {
        v32 = (uint64_t)rint(*(double *)(v31 + 16));
      }
      else if ((*(_DWORD *)v31 & 7) == 1)
      {
        LODWORD(v32) = *(_DWORD *)(v31 + 16);
      }
      else
      {
        LODWORD(v32) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v32) = 0;
    }
    v30[24] = v32;
    v35 = cvGetFileNodeByName(a1, v21, "y");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        LODWORD(v36) = *(_DWORD *)(v35 + 16);
      }
      else
      {
        LODWORD(v36) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
    v30[25] = v36;
    v37 = cvGetFileNodeByName(a1, v21, "width");
    if (v37)
    {
      if ((*(_DWORD *)v37 & 7) == 2)
      {
        v38 = (uint64_t)rint(*(double *)(v37 + 16));
      }
      else if ((*(_DWORD *)v37 & 7) == 1)
      {
        LODWORD(v38) = *(_DWORD *)(v37 + 16);
      }
      else
      {
        LODWORD(v38) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v38) = 0;
    }
    v30[26] = v38;
    v39 = cvGetFileNodeByName(a1, v21, "height");
    if (v39)
    {
      if ((*(_DWORD *)v39 & 7) == 2)
      {
        v40 = (uint64_t)rint(*(double *)(v39 + 16));
      }
      else if ((*(_DWORD *)v39 & 7) == 1)
      {
        LODWORD(v40) = *(_DWORD *)(v39 + 16);
      }
      else
      {
        LODWORD(v40) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v40) = 0;
    }
    v30[27] = v40;
    v41 = cvGetFileNodeByName(a1, a2, "color");
    if (v41)
    {
      if ((*(_DWORD *)v41 & 7) == 2)
      {
        v42 = (uint64_t)rint(*(double *)(v41 + 16));
      }
      else if ((*(_DWORD *)v41 & 7) == 1)
      {
        LODWORD(v42) = *(_DWORD *)(v41 + 16);
      }
      else
      {
        LODWORD(v42) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    v30[28] = v42;
  }
  else if (v23)
  {
    v33 = cvGetFileNodeByName(a1, v23, "x");
    if (v33)
    {
      if ((*(_DWORD *)v33 & 7) == 2)
      {
        v34 = (uint64_t)rint(*(double *)(v33 + 16));
      }
      else if ((*(_DWORD *)v33 & 7) == 1)
      {
        LODWORD(v34) = *(_DWORD *)(v33 + 16);
      }
      else
      {
        LODWORD(v34) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v34) = 0;
    }
    v30[24] = v34;
    v43 = cvGetFileNodeByName(a1, v23, "y");
    if (v43)
    {
      if ((*(_DWORD *)v43 & 7) == 2)
      {
        v44 = (uint64_t)rint(*(double *)(v43 + 16));
      }
      else if ((*(_DWORD *)v43 & 7) == 1)
      {
        LODWORD(v44) = *(_DWORD *)(v43 + 16);
      }
      else
      {
        LODWORD(v44) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v44) = 0;
    }
    v30[25] = v44;
  }
  cvSeqPushMulti(v30, 0, v54, 0);
  v45 = icvDecodeFormat(v9, v61);
  if (v45 < 1)
  {
    v47 = 0;
  }
  else
  {
    v46 = 0;
    v47 = 0;
    do
    {
      v47 += v61[v46];
      v46 += 2;
    }
    while (v46 < (2 * v45));
  }
  v48 = cvGetFileNodeByName(a1, a2, "data");
  if (!v48)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "The image data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4349);
    cv::error((cv *)v58, v49);
  }
  if ((*(_DWORD *)v48 & 7u) < 5)
    v50 = (*(_DWORD *)v48 & 7) != 0;
  else
    v50 = *(_DWORD *)(*(_QWORD *)(v48 + 16) + 40);
  if (v50 != v47 * v54)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "The number of stored elements does not match to \"count\"");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4352);
    cv::error((cv *)v58, v51);
  }
  cvStartReadRawData((_DWORD *)a1, v48, (uint64_t)v60);
  for (i = *((_QWORD *)v30 + 11); i; i = *(_QWORD *)(i + 8))
  {
    cvReadRawDataSlice((_DWORD *)a1, v60, *(_DWORD *)(i + 20) * v47, *(_QWORD *)(i + 24), v9);
    if (i == **((_QWORD **)v30 + 11))
      break;
  }
  return v30;
}

void sub_219E20C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x219E20568);
  }
  _Unwind_Resume(exception_object);
}

uint64_t icvWriteSeqTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  const char *v11;
  BOOL v12;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a4;
  v17 = a5;
  v10 = cvAttrValue((const char *)&v16, "recursive");
  v12 = v10
     && (v11 = v10, strcmp(v10, "0"))
     && strcmp(v11, "false")
     && strcmp(v11, "False")
     && strcmp(v11, "FALSE") != 0;
  if (!a3 || *(_WORD *)(a3 + 2) != 17049)
    icvWriteSeqTree();
  if (!v12)
    return icvWriteSeq(a1, a2, (int *)a3, a4, a5, 0xFFFFFFFFLL);
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sequence-tree");
  cvStartWriteStruct(a1, (uint64_t)"sequences", 5, 0);
  cvInitTreeNodeIterator((uint64_t)&v14, a3, 0x7FFFFFFF);
  while (v14)
  {
    icvWriteSeq(a1, 0, v14, v16, v17, v15);
    cvNextTreeNode((uint64_t *)&v14);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

int *icvCloneSeq(uint64_t a1)
{
  return cvSeqSlice(a1, 0x3FFFFFFF00000000, 0, 1);
}

uint64_t icvReadSeqTree(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  const cv::Exception *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const cv::Exception *v16;
  void *__p[2];
  void *v19[2];
  void *v20[2];
  _BYTE v21[120];
  _QWORD v22[3];
  unint64_t v23;
  unint64_t v24;

  FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "sequences");
  if (!FileNodeByName || (*(_DWORD *)FileNodeByName & 7) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence");
    std::string::basic_string[abi:ne180100]<0>(v19, "icvReadSeqTree");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v21, 4294967084, v20, v19, __p, 4383);
    cv::error((cv *)v21, v4);
  }
  v5 = *(_QWORD *)(FileNodeByName + 16);
  v6 = *(_DWORD *)(v5 + 40);
  cvStartReadSeq(v5, (uint64_t)v22, 0);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v23;
      v13 = cvRead(a1, v23, 0);
      v14 = cvGetFileNodeByName((uint64_t)a1, v12, "level");
      if (!v14)
      {
LABEL_10:
        std::string::basic_string[abi:ne180100]<0>(v20, "All the sequence tree nodes should contain \"level\" field");
        std::string::basic_string[abi:ne180100]<0>(v19, "icvReadSeqTree");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v21, 4294967084, v20, v19, __p, 4397);
        cv::error((cv *)v21, v16);
      }
      if ((*(_DWORD *)v14 & 7) == 2)
      {
        v15 = (uint64_t)rint(*(double *)(v14 + 16));
        if ((v15 & 0x80000000) != 0)
          goto LABEL_10;
      }
      else if ((*(_DWORD *)v14 & 7) == 1)
      {
        LODWORD(v15) = *(_DWORD *)(v14 + 16);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_10;
      }
      else
      {
        LODWORD(v15) = 0x7FFFFFFF;
      }
      if (!v11)
        v11 = v13;
      if ((int)v15 > v7)
      {
        if ((_DWORD)v15 != v7 + 1)
          icvReadSeqTree();
        if (v9)
          v9[4] = v13;
        *(_QWORD *)(v13 + 8) = 0;
        v10 = v9;
        goto LABEL_26;
      }
      if ((int)v15 < v7)
        break;
      *(_QWORD *)(v13 + 8) = v9;
      if (v9)
        goto LABEL_25;
LABEL_26:
      *(_QWORD *)(v13 + 24) = v10;
      v23 += *(int *)(v5 + 44);
      if (v23 >= v24)
        cvChangeSeqBlock(v22, 1);
      ++v8;
      v7 = v15;
      v9 = (_QWORD *)v13;
      if (v8 == v6)
        return v11;
    }
    do
    {
      v9 = (_QWORD *)v9[3];
      --v7;
    }
    while (v7 > (int)v15);
    v10 = (_QWORD *)v9[3];
    *(_QWORD *)(v13 + 8) = v9;
LABEL_25:
    v9[2] = v13;
    goto LABEL_26;
  }
  return 0;
}

void sub_219E21184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

_DWORD *icvIsGraph(_DWORD *result)
{
  if (result)
  {
    if (HIWORD(*result) == 17048)
      return (_DWORD *)((*result & 0x3000) == 4096);
    else
      return 0;
  }
  return result;
}

_QWORD *icvReleaseGraph(_QWORD *result)
{
  const cv::Exception *v1;
  void *__p[2];
  void *v3[2];
  void *v4[2];
  _BYTE v5[120];

  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "NULL double pointer");
    std::string::basic_string[abi:ne180100]<0>(v3, "icvReleaseGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v5, 4294967269, v4, v3, __p, 4440);
    cv::error((cv *)v5, v1);
  }
  *result = 0;
  return result;
}

void sub_219E212CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_DWORD *icvReadGraph(uint64_t a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const cv::Exception *v12;
  BOOL v13;
  int v14;
  const cv::Exception *v15;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  const cv::Exception *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  const cv::Exception *v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  void *v41;
  const cv::Exception *v42;
  char *v43;
  const cv::Exception *v44;
  char v45;
  char v46;
  BOOL v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void **v56;
  void **v57;
  int v58;
  int v59;
  void *v60;
  const void *v61;
  size_t v62;
  unsigned int v63;
  uint64_t v64;
  BOOL v65;
  const cv::Exception *v66;
  const cv::Exception *v68;
  uint64_t v69;
  void *v70;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void **v85;
  int v87;
  unsigned int v88;
  _DWORD *Graph;
  void **v90;
  uint64_t v91;
  void *v92[2];
  void *v93[2];
  void *__p[2];
  void *v95[2];
  char *__endptr;
  char v97[128];
  int v98[5];
  unsigned int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  __endptr = 0;
  FileNodeByName = cvGetFileNodeByName(a1, a2, "flags");
  if (FileNodeByName && (*(_DWORD *)FileNodeByName & 7) == 3)
    v4 = *(char **)(FileNodeByName + 24);
  else
    v4 = 0;
  v5 = cvGetFileNodeByName(a1, a2, "vertex_dt");
  if (v5 && (*(_DWORD *)v5 & 7) == 3)
    v6 = *(char **)(v5 + 24);
  else
    v6 = 0;
  v7 = cvGetFileNodeByName(a1, a2, "edge_dt");
  if (v7 && (*(_DWORD *)v7 & 7) == 3)
    v81 = *(char **)(v7 + 24);
  else
    v81 = 0;
  v8 = cvGetFileNodeByName(a1, a2, "vertex_count");
  if (v8)
  {
    if ((*(_DWORD *)v8 & 7) == 2)
    {
      v9 = (uint64_t)rint(*(double *)(v8 + 16));
    }
    else if ((*(_DWORD *)v8 & 7) == 1)
    {
      LODWORD(v9) = *(_DWORD *)(v8 + 16);
    }
    else
    {
      LODWORD(v9) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v9) = -1;
  }
  v88 = v9;
  v10 = cvGetFileNodeByName(a1, a2, "edge_count");
  if (v10)
  {
    if ((*(_DWORD *)v10 & 7) == 2)
    {
      v11 = (uint64_t)rint(*(double *)(v10 + 16));
    }
    else if ((*(_DWORD *)v10 & 7) == 1)
    {
      LODWORD(v11) = *(_DWORD *)(v10 + 16);
    }
    else
    {
      LODWORD(v11) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v11) = -1;
  }
  v77 = v11;
  v80 = v6;
  if (!v4 || v88 == -1 || (_DWORD)v11 == -1 || !v81)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "Some of essential graph attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4619);
    cv::error((cv *)v97, v12);
  }
  if ((*v4 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v4 + 60) & 0x10000) != 0)
  {
    v14 = strtol(v4, &__endptr, 16);
    if (__endptr == v4 || (v14 & 0xFFFF0000) != 0x42980000)
    {
      std::string::basic_string[abi:ne180100]<0>(v93, "The sequence flags are invalid");
      std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4632);
      cv::error((cv *)v97, v15);
    }
    v13 = (v14 & 0x1000) == 0;
  }
  else
  {
    v13 = strstr(v4, "oriented") == 0;
  }
  if (v13)
    v17 = 1117261824;
  else
    v17 = 1117278208;
  v18 = cvGetFileNodeByName(a1, a2, "header_dt");
  if (v18 && (*(_DWORD *)v18 & 7) == 3)
    v19 = *(char **)(v18 + 24);
  else
    v19 = 0;
  v20 = cvGetFileNodeByName(a1, a2, "header_user_data");
  if ((v19 != 0) != (v20 != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "One of \"header_dt\" and \"header_user_data\" is there, while the other is not");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4647);
    cv::error((cv *)v97, v21);
  }
  if (v19)
    v22 = icvCalcElemSize(v19, 120);
  else
    v22 = 120;
  if (v80)
  {
    v79 = icvCalcElemSize(v80, 0);
    v23 = icvCalcElemSize(v80, 16);
    v24 = icvDecodeFormat(v81, v98);
    if (v24 < 1)
    {
      v76 = 0;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v26 += v98[v25];
        v25 += 2;
      }
      while (v25 < (2 * v24));
      v76 = v26;
    }
  }
  else
  {
    v79 = 0;
    v76 = 0;
    v23 = 16;
  }
  v27 = icvDecodeFormat(v81, v98);
  if (v27 < 2
    || (v98[0] == 2 ? (v28 = v98[1] == 4) : (v28 = 0),
        v28 ? (v29 = v98[2] < 1) : (v29 = 1),
        !v29 ? (v30 = v98[3] == 5) : (v30 = 0),
        !v30))
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "Graph edges should start with 2 integers and a float");
    std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v93, 4294967291, v95, __p, v92, 4673);
    cv::error((cv *)v93, v31);
  }
  if (v27 < 3)
  {
    v32 = 4;
  }
  else if ((((v99 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v99 & 7))) & 3) >= 8)
  {
    v32 = 8;
  }
  else
  {
    v32 = 4;
  }
  v33 = 0;
  v34 = 0;
  do
  {
    v34 += v98[v33];
    v33 += 2;
  }
  while (v33 < (2 * v27));
  v75 = v34;
  v35 = v81[2];
  if (v35 == 102 || v35 == 49 && v81[3] == 102)
  {
    v65 = (v35 - 48) >= 0xA;
    v36 = v81;
    if (!v65)
      v36 = v81 + 1;
    v37 = v36 + 3;
  }
  else
  {
    v38 = strtol(v81 + 2, &__endptr, 10);
    v37 = v97;
    sprintf(v97, "%df%s", v38 - 1, __endptr);
  }
  v84 = icvCalcElemSize(v37, 40);
  v78 = icvCalcElemSize(v81, 0);
  Graph = cvCreateGraph(v17, v22, v23, v84, *(_QWORD *)(a1 + 24));
  if (v20)
    cvReadRawData((_DWORD *)a1, v20, (uint64_t)(Graph + 30), v19);
  v39 = 3 * v79;
  if (3 * v79 <= 3 * v78)
    v39 = 3 * v78;
  if (v39 <= 0x10000)
    v40 = 0x10000;
  else
    v40 = v39;
  v72 = v40;
  v90 = (void **)cvAlloc(v40);
  v85 = (void **)cvAlloc(8 * (int)v88);
  v73 = cvGetFileNodeByName(a1, a2, "vertices");
  v74 = cvGetFileNodeByName(a1, a2, "edges");
  if (!v74)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "No edges data");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967291, v93, v95, __p, 4709);
    cv::error((cv *)v97, v42);
  }
  v43 = v80;
  if (v80 && !v73)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "No vertices data");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967291, v93, v95, __p, 4711);
    cv::error((cv *)v97, v44);
  }
  v82 = -v32;
  v83 = v32 - 1;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = (v45 & 1) == 0;
    if ((v45 & 1) != 0)
      v48 = v43;
    else
      v48 = v81;
    if ((v45 & 1) != 0)
      v49 = v79;
    else
      v49 = v78;
    v50 = v76;
    if (v47)
      v50 = v75;
    v87 = v50;
    if (v47)
      v51 = v77;
    else
      v51 = v88;
    if (v49 <= 1)
      v52 = 1;
    else
      v52 = v49;
    if (v48)
    {
      if ((v46 & 1) != 0)
        v53 = v73;
      else
        v53 = v74;
      cvStartReadRawData((_DWORD *)a1, v53, (uint64_t)v93);
    }
    if ((int)v51 >= 1)
    {
      v54 = 0;
      v55 = v49;
      v56 = v85;
      v57 = v90;
      v58 = v72 / v52;
      while (1)
      {
        if (v48 && !v54)
        {
          if ((int)v51 >= v58)
            v59 = v58;
          else
            v59 = v51;
          v54 = v59 * v87;
          cvReadRawDataSlice((_DWORD *)a1, v93, v59 * v87, (uint64_t)v90, v48);
          v57 = v90;
        }
        if ((v46 & 1) == 0)
          break;
        *(_QWORD *)v97 = 0;
        cvGraphAddVtx((uint64_t)Graph, 0, v97);
        *v56 = *(void **)v97;
        if (v48)
        {
          v60 = (void *)(*(_QWORD *)v97 + 16);
          v61 = v57;
          v62 = v79;
LABEL_141:
          memcpy(v60, v61, v62);
        }
LABEL_142:
        v57 = (void **)((char *)v57 + v55);
        --v54;
        ++v56;
        if (!--v51)
          goto LABEL_143;
      }
      v91 = 0;
      v63 = *((_DWORD *)v57 + 1);
      v64 = *(int *)v57;
      v65 = v64 >= v88 || v63 >= v88;
      if (v65)
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "Some of stored vertex indices are out of range");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
        std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v97, 4294967085, v95, __p, v92, 4756);
        cv::error((cv *)v97, v66);
      }
      if (!cvGraphAddEdgeByPtr((uint64_t)Graph, v85[v64], v85[v63], 0, &v91))
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "Duplicated edge has occured");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
        std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v97, 4294967291, v95, __p, v92, 4762);
        cv::error((cv *)v97, v68);
      }
      v69 = v91;
      *(_DWORD *)(v91 + 4) = *((_DWORD *)v57 + 2);
      if (v84 < 41)
        goto LABEL_142;
      v61 = (const void *)(((unint64_t)v57 + v83 + 12) & v82);
      v60 = (void *)(v69 + 40);
      v62 = v84 - 40;
      goto LABEL_141;
    }
LABEL_143:
    v45 = 0;
    v43 = v80;
  }
  while ((v46 & 1) != 0);
  cv::fastFree(v90, v41);
  cv::fastFree(v85, v70);
  return Graph;
}

void sub_219E21EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a66;

  cv::Exception::~Exception((cv::Exception *)&a66);
  if (a58 < 0)
    operator delete(__p);
  if (a64 < 0)
    operator delete(a59);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(a1);
}

void icvWriteGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _DWORD *v13;
  const char *v14;
  char *Format;
  char *v16;
  const char *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  void **v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  double Seq;
  uint64_t v32;
  int v33;
  int v34;
  uint8x8_t v35;
  _DWORD *v36;
  char *v37;
  const void *v38;
  void *v39;
  size_t v40;
  void *v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  int v46;
  void *v47;
  void **v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD v56[3];
  char *v57;
  unint64_t v58;
  _QWORD v59[2];
  int v60[5];
  unsigned int v61;
  char v62[128];
  char v63[128];
  char v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v59[0] = a4;
  v59[1] = a5;
  if (!a3 || (v5 = a3, (*(_DWORD *)a3 & 0xFFFF3000) != 0x42981000))
    icvWriteGraph();
  v8 = *(int *)(a3 + 104);
  v9 = *(unsigned int *)(*(_QWORD *)(a3 + 112) + 104);
  v10 = cvAlloc(4 * v8);
  cvStartReadSeq(v5, (uint64_t)v56, 0);
  if (*(int *)(v5 + 40) >= 1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v57;
      if ((*(_DWORD *)v57 & 0x80000000) == 0)
      {
        *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)v57;
        *v13 = v12++;
      }
      v57 = (char *)v13 + *(int *)(v5 + 44);
      if ((unint64_t)v57 >= v58)
        cvChangeSeqBlock(v56, 1);
      ++v11;
    }
    while (v11 < *(_DWORD *)(v5 + 40));
  }
  v48 = (void **)v10;
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-graph");
  if ((*(_DWORD *)v5 & 0x4000) != 0)
    v14 = "oriented";
  else
    v14 = "";
  cvWriteString(a1, (uint64_t)"flags", (uint64_t)v14, 1);
  cvWriteInt(a1, (uint64_t)"vertex_count", v8);
  Format = icvGetFormat((_DWORD *)v5, "vertex_dt", (const char *)v59, 16, v63);
  if (Format)
    cvWriteString(a1, (uint64_t)"vertex_dt", (uint64_t)Format, 0);
  cvWriteInt(a1, (uint64_t)"edge_count", v9);
  v16 = icvGetFormat(*(_DWORD **)(v5 + 112), "edge_dt", (const char *)v59, 40, v64);
  if (v16)
    v17 = v16;
  else
    v17 = "";
  sprintf(v62, "2if%s", v17);
  cvWriteString(a1, (uint64_t)"edge_dt", (uint64_t)v62, 0);
  icvWriteHeaderData(a1, (int *)v5, (const char *)v59, 120);
  v18 = *(_DWORD *)(v5 + 44);
  if (v18 >= 21846)
    v19 = 3 * v18;
  else
    v19 = 0x10000;
  v20 = 3 * *(_DWORD *)(*(_QWORD *)(v5 + 112) + 44);
  if (v20 <= v19)
    v21 = v19;
  else
    v21 = v20;
  v50 = v21;
  v22 = (void **)cvAlloc(v21);
  v23 = 0;
  v24 = 1;
  v49 = v5;
  v51 = Format;
  do
  {
    v25 = v24;
    if ((v24 & 1) != 0)
      v26 = Format;
    else
      v26 = v62;
    if (v26)
    {
      v27 = v5;
      if ((v24 & 1) == 0)
        v27 = *(_QWORD *)(v5 + 112);
      v55 = *(unsigned int *)(v27 + 44);
      v28 = icvCalcElemSize(v26, 0);
      if ((v23 & 1) != 0 && (int)icvDecodeFormat(v26, v60) >= 3)
      {
        if ((((v61 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v61 & 7))) & 3) >= 8)
          v29 = 8;
        else
          v29 = 4;
      }
      else
      {
        v29 = 4;
      }
      if ((v25 & 1) != 0)
        v30 = "vertices";
      else
        v30 = "edges";
      cvStartWriteStruct(a1, (uint64_t)v30, 13, 0);
      Seq = cvStartReadSeq(v27, (uint64_t)v56, 0);
      v32 = a1;
      if (*(int *)(v27 + 40) >= 1)
      {
        v33 = 0;
        v34 = 0;
        LODWORD(Seq) = v29;
        v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&Seq);
        v35.i16[0] = vaddlv_u8(v35);
        v54 = v35.i32[0];
        v53 = (v29 - 1);
        v52 = -v29;
        v36 = v22;
        while (1)
        {
          v37 = v57;
          if ((*(_DWORD *)v57 & 0x80000000) == 0)
            break;
LABEL_52:
          v57 += *(int *)(v27 + 44);
          if ((unint64_t)v57 >= v58)
            cvChangeSeqBlock(v56, 1);
          if (++v33 >= *(_DWORD *)(v27 + 40))
          {
            v5 = v49;
            if (v34 >= 1)
              cvWriteRawData(v32, (uint64_t)v22, v34, v26);
            goto LABEL_57;
          }
        }
        if ((v25 & 1) != 0)
        {
          v38 = v57 + 16;
          v39 = v36;
          v40 = v28;
          goto LABEL_48;
        }
        v36 = (_DWORD *)(((unint64_t)v36 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *v36 = **((_DWORD **)v57 + 3);
        v36[1] = **((_DWORD **)v37 + 4);
        v36[2] = *((_DWORD *)v37 + 1);
        if ((int)v55 >= 41)
        {
          if (v54 >= 2)
            icvWriteGraph();
          v39 = (void *)(((unint64_t)v36 + v53 + 12) & v52);
          v38 = v37 + 40;
          v40 = v55 - 40;
LABEL_48:
          memcpy(v39, v38, v40);
        }
        if (++v34 >= v50 / v28)
        {
          cvWriteRawData(v32, (uint64_t)v22, v34, v26);
          v34 = 0;
          v36 = v22;
        }
        else
        {
          v36 = (_DWORD *)((char *)v36 + v28);
        }
        goto LABEL_52;
      }
LABEL_57:
      cvEndWriteStruct(v32);
      a1 = v32;
      Format = v51;
    }
    v24 = 0;
    v23 = 1;
  }
  while ((v25 & 1) != 0);
  cvEndWriteStruct(a1);
  cvStartReadSeq(v5, (uint64_t)v56, 0);
  v42 = *(_DWORD *)(v5 + 40);
  if (v42 >= 1)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = v57;
      if ((*(_DWORD *)v57 & 0x80000000) == 0)
      {
        v46 = *((_DWORD *)v48 + v44++);
        *(_DWORD *)v57 = v46;
      }
      v57 = &v45[*(int *)(v5 + 44)];
      if ((unint64_t)v57 >= v58)
      {
        cvChangeSeqBlock(v56, 1);
        v42 = *(_DWORD *)(v5 + 40);
      }
      ++v43;
    }
    while (v43 < v42);
  }
  cv::fastFree(v22, v41);
  cv::fastFree(v48, v47);
}

_DWORD *icvCloneGraph(uint64_t a1)
{
  return cvCloneGraph(a1, 0);
}

BOOL icvIsSparseMat(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 16964;
  return result;
}

uint64_t icvReadSparseMat(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FileNodeByName;
  uint64_t v7;
  const char *v8;
  const cv::Exception *v9;
  int v10;
  const cv::Exception *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  const cv::Exception *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const cv::Exception *v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int *v25;
  _DWORD *v26;
  unsigned int v27;
  const cv::Exception *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t SparseMat;
  char *v34;
  _DWORD *v35;
  void *v36[2];
  void *v37[2];
  void *__p[2];
  void *v39[2];
  _QWORD v40[3];
  _DWORD *v41;
  unint64_t v42;
  unsigned int __src[1024];
  int v44[1024];
  uint64_t v45;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v5 = v2;
  v45 = *MEMORY[0x24BDAC8D0];
  FileNodeByName = cvGetFileNodeByName(v2, v3, "sizes");
  v35 = (_DWORD *)v5;
  v7 = cvGetFileNodeByName(v5, v4, "dt");
  if (!v7 || (*(_DWORD *)v7 & 7) != 3 || (v8 = *(const char **)(v7 + 24), !FileNodeByName) || !v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967294, v37, v39, __p, 3823);
    cv::error((cv *)__src, v9);
  }
  if ((*(_DWORD *)FileNodeByName & 7) == 5)
  {
    v10 = *(_DWORD *)(*(_QWORD *)(FileNodeByName + 16) + 40);
  }
  else if ((*(_DWORD *)FileNodeByName & 7) == 1)
  {
    v10 = 1;
  }
  else
  {
    v10 = -1;
  }
  v34 = *(char **)(v7 + 24);
  v31 = v10;
  if ((v10 - 1025) <= 0xFFFFFBFF)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "Could not determine sparse matrix dimensionality");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967084, v37, v39, __p, 3829);
    cv::error((cv *)__src, v11);
  }
  cvReadRawData(v35, FileNodeByName, (uint64_t)v44, "i");
  v12 = icvDecodeSimpleFormat(v8);
  v13 = (_DWORD *)cvGetFileNodeByName((uint64_t)v35, v4, "data");
  v14 = (uint64_t)v13;
  if (!v13 || (*v13 & 7) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967294, v37, v39, __p, 3836);
    cv::error((cv *)__src, v15);
  }
  SparseMat = cvCreateSparseMat(v31, v44, v12);
  v16 = *(_QWORD *)(v14 + 16);
  cvStartReadRawData(v35, v14, (uint64_t)v40);
  if (*(int *)(v16 + 40) >= 1)
  {
    v17 = 0;
    v18 = (v12 >> 3) & 0x1FF;
    v19 = v18 + 1;
    v32 = v31 - 1;
    v20 = v18 + 2;
    do
    {
      if ((*v41 & 7) != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v39, "Sparse matrix data is corrupted");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadSparseMat");
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v37, 4294967084, v39, __p, v36, 3851);
        cv::error((cv *)v37, v21);
      }
      v22 = v41[4];
      if (v17 < 1 || (v22 & 0x80000000) != 0)
      {
        if (v17 < 1)
        {
          __src[0] = v41[4];
          v23 = 1;
        }
        else
        {
          v23 = v32 + v22;
        }
        v24 = v31 - v23;
        if (v31 > v23)
        {
          v17 = v31 + v17 - v23;
          v25 = &__src[v23];
          do
          {
            v26 = (_DWORD *)((char *)v41 + *(int *)(v16 + 44));
            v41 = v26;
            if ((unint64_t)v26 >= v42)
            {
              cvChangeSeqBlock(v40, 1);
              v26 = v41;
            }
            if ((*v26 & 7) != 1 || (v27 = v26[4], (v27 & 0x80000000) != 0))
            {
              std::string::basic_string[abi:ne180100]<0>(v39, "Sparse matrix data is corrupted");
              std::string::basic_string[abi:ne180100]<0>(__p, "icvReadSparseMat");
              std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(v37, 4294967084, v39, __p, v36, 3867);
              cv::error((cv *)v37, v28);
            }
            *v25++ = v27;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
        __src[v32] = v22;
      }
      v41 = (_DWORD *)((char *)v41 + *(int *)(v16 + 44));
      if ((unint64_t)v41 >= v42)
        cvChangeSeqBlock(v40, 1);
      v29 = cvPtrND(SparseMat, __src, 0, 1, 0);
      cvReadRawDataSlice(v35, v40, v19, v29, v34);
      v17 += v20;
    }
    while (v17 < *(_DWORD *)(v16 + 40));
  }
  return SparseMat;
}

void sub_219E22AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  cv::Exception::~Exception((cv::Exception *)&a59);
  if (a44 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void icvWriteSparseMat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  _DWORD *Seq;
  uint64_t inited;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  int Dims;
  _QWORD __src[3];
  _DWORD **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void **MemStorage;
  char v31[16];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a3 || *(_WORD *)(a3 + 2) != 16964)
    icvWriteSparseMat();
  MemStorage = (void **)cvCreateMemStorage(0);
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sparse-matrix");
  Dims = cvGetDims(a3, 0);
  cvStartWriteStruct(a1, (uint64_t)"sizes", 13, 0);
  cvWriteRawData(a1, a3 + 52, Dims, "i");
  cvEndWriteStruct(a1);
  v6 = icvEncodeFormat(*(_DWORD *)a3 & 0xFFF, v31);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v6, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  Seq = cvCreateSeq(7u, 0x60uLL, 8uLL, (uint64_t)MemStorage);
  inited = cvInitSparseMatIterator(a3, (uint64_t)&v27);
  if (inited)
  {
    while (1)
    {
      __src[0] = inited + *(int *)(a3 + 48);
      cvSeqPush((uint64_t)Seq, __src);
      inited = *(_QWORD *)(v28 + 8);
      if (!inited)
      {
        v9 = v29;
        v10 = v29 + 1;
        v29 = v10;
        v11 = *(_DWORD *)(v27 + 40);
        if (v10 >= v11)
          break;
        v12 = (uint64_t *)(*(_QWORD *)(v27 + 32) + 8 * v9 + 8);
        while (1)
        {
          inited = *v12;
          if (*v12)
            break;
          ++v10;
          ++v12;
          if (v11 == v10)
            goto LABEL_12;
        }
        v29 = v10;
      }
      v28 = inited;
    }
  }
LABEL_12:
  cvSeqSort((uint64_t)Seq, (uint64_t (*)(void))icvSortIdxCmpFunc, (uint64_t)&Dims);
  cvStartReadSeq((uint64_t)Seq, (uint64_t)__src, 0);
  if ((int)Seq[10] >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      if (*(_DWORD *)(__src[1] + 44) != 8)
        icvWriteSparseMat();
      v15 = *v25++;
      if ((unint64_t)v25 >= v26)
        cvChangeSeqBlock(__src, 1);
      v16 = Dims;
      if (v13)
      {
        if (*v15 == *v14)
        {
          v17 = 0;
          v18 = v14 + 1;
          do
          {
            if ((Dims & ~(Dims >> 31)) == v17)
              icvWriteSparseMat();
            LODWORD(v19) = v17 + 1;
            v20 = v15[v17 + 1];
            v21 = v18[v17++];
          }
          while (v20 == v21);
        }
        else
        {
          LODWORD(v19) = 0;
        }
        if ((int)v19 < Dims - 1)
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 312))(a1, 0, (v19 - Dims + 1));
          v16 = Dims;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if ((int)v19 < v16)
      {
        v19 = v19;
        do
          (*(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 312))(a1, 0, v15[v19++]);
        while (Dims > (int)v19);
      }
      cvWriteRawData(a1, (uint64_t)v15 + *(int *)(a3 + 44) - *(int *)(a3 + 48), 1, v31);
      ++v13;
      v14 = v15;
    }
    while (v13 < Seq[10]);
  }
  cvEndWriteStruct(a1);
  cvEndWriteStruct(a1);
  cvReleaseMemStorage(&MemStorage, v22);
}

_DWORD *icvIsImage(_DWORD *result)
{
  if (result)
    return (_DWORD *)(*result == 144);
  return result;
}

uint64_t icvReadImage(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const cv::Exception *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  const cv::Exception *v16;
  uint64_t v17;
  const cv::Exception *v18;
  int v19;
  int v20;
  int v21;
  const cv::Exception *v22;
  unsigned int v24;
  uint64_t Image;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v47;
  int v48;
  void *__p[2];
  void *v50[2];
  void *v51[2];
  _BYTE v52[120];
  _QWORD v53[9];

  FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "width");
  if (FileNodeByName)
  {
    if ((*(_DWORD *)FileNodeByName & 7) == 2)
    {
      v5 = (uint64_t)rint(*(double *)(FileNodeByName + 16));
    }
    else if ((*(_DWORD *)FileNodeByName & 7) == 1)
    {
      LODWORD(v5) = *(_DWORD *)(FileNodeByName + 16);
    }
    else
    {
      LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v6 = cvGetFileNodeByName((uint64_t)a1, a2, "height");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      v7 = *(unsigned int *)(v6 + 16);
    }
    else
    {
      v7 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (v8 && (*(_DWORD *)v8 & 7) == 3)
    v9 = *(char **)(v8 + 24);
  else
    v9 = 0;
  v10 = cvGetFileNodeByName((uint64_t)a1, a2, "origin");
  if (v10 && (*(_DWORD *)v10 & 7) == 3)
  {
    v11 = *(_QWORD *)(v10 + 24);
    if (!(_DWORD)v5)
      goto LABEL_27;
  }
  else
  {
    v11 = 0;
    if (!(_DWORD)v5)
      goto LABEL_27;
  }
  if (!(_DWORD)v7 || !v9 || !v11)
  {
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(v51, "Some of essential image attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3963);
    cv::error((cv *)v52, v12);
  }
  v13 = icvDecodeSimpleFormat(v9);
  v14 = cvGetFileNodeByName((uint64_t)a1, a2, "layout");
  if (v14)
    v15 = *(const char **)(v14 + 24);
  else
    v15 = "interleaved";
  if (strcmp(v15, "interleaved"))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "Only interleaved images can be read");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3968);
    cv::error((cv *)v52, v16);
  }
  v17 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "The image data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3972);
    cv::error((cv *)v52, v18);
  }
  if ((*(_DWORD *)v17 & 7u) < 5)
    v19 = (*(_DWORD *)v17 & 7) != 0;
  else
    v19 = *(_DWORD *)(*(_QWORD *)(v17 + 16) + 40);
  v20 = v7 * v5;
  v21 = ((v13 >> 3) & 0x1FF) + 1;
  if (v19 != v21 * (_DWORD)v7 * (_DWORD)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "The matrix size does not match to the number of stored elements");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967087, v51, v50, __p, 3976);
    cv::error((cv *)v52, v22);
  }
  if ((v13 & 7) == 4 || (v13 & 5) == 1)
    v24 = 0x80000000;
  else
    v24 = 0;
  Image = cvCreateImage(v5 | (v7 << 32), (0x442211088uLL >> (4 * (v13 & 7))) & 0x78 | v24, ((v13 >> 3) & 0x1FF) + 1);
  v26 = cvGetFileNodeByName((uint64_t)a1, a2, "roi");
  if (v26)
  {
    v27 = v26;
    v28 = cvGetFileNodeByName((uint64_t)a1, v26, "x");
    v48 = v5;
    if (v28)
    {
      if ((*(_DWORD *)v28 & 7) == 2)
      {
        v29 = (uint64_t)rint(*(double *)(v28 + 16));
      }
      else if ((*(_DWORD *)v28 & 7) == 1)
      {
        LODWORD(v29) = *(_DWORD *)(v28 + 16);
      }
      else
      {
        LODWORD(v29) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v29) = 0;
    }
    v30 = v29;
    v31 = cvGetFileNodeByName((uint64_t)a1, v27, "y");
    v47 = v7;
    if (v31)
    {
      if ((*(_DWORD *)v31 & 7) == 2)
      {
        v32 = (uint64_t)rint(*(double *)(v31 + 16));
      }
      else if ((*(_DWORD *)v31 & 7) == 1)
      {
        v32 = *(unsigned int *)(v31 + 16);
      }
      else
      {
        v32 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      v32 = 0;
    }
    v33 = cvGetFileNodeByName((uint64_t)a1, v27, "width");
    if (v33)
    {
      if ((*(_DWORD *)v33 & 7) == 2)
      {
        v34 = (uint64_t)rint(*(double *)(v33 + 16));
      }
      else if ((*(_DWORD *)v33 & 7) == 1)
      {
        LODWORD(v34) = *(_DWORD *)(v33 + 16);
      }
      else
      {
        LODWORD(v34) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v34) = 0;
    }
    v5 = v30 | (v32 << 32);
    v35 = v34;
    v36 = cvGetFileNodeByName((uint64_t)a1, v27, "height");
    if (v36)
    {
      if ((*(_DWORD *)v36 & 7) == 2)
      {
        v37 = (uint64_t)rint(*(double *)(v36 + 16));
      }
      else if ((*(_DWORD *)v36 & 7) == 1)
      {
        v37 = *(unsigned int *)(v36 + 16);
      }
      else
      {
        v37 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      v37 = 0;
    }
    v7 = v35 | (v37 << 32);
    v38 = cvGetFileNodeByName((uint64_t)a1, v27, "coi");
    if (v38)
    {
      if ((*(_DWORD *)v38 & 7) == 2)
      {
        v39 = (uint64_t)rint(*(double *)(v38 + 16));
      }
      else if ((*(_DWORD *)v38 & 7) == 1)
      {
        v39 = *(unsigned int *)(v38 + 16);
      }
      else
      {
        v39 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      v39 = 0;
    }
    cvSetImageROI((_DWORD *)Image, v5, v7);
    cvSetImageCOI((_DWORD *)Image, v39);
    LODWORD(v7) = v47;
    LODWORD(v5) = v48;
  }
  v40 = (v21 << ((0xFA50u >> (2 * (v13 & 7))) & 3)) * v5;
  v41 = *(_DWORD *)(Image + 96);
  if (v40 == v41)
    v42 = v20;
  else
    v42 = v5;
  if (v40 == v41)
    v43 = 1;
  else
    v43 = v7;
  cvStartReadRawData(a1, v17, (uint64_t)v53);
  if (v43 >= 1)
  {
    v44 = 0;
    v45 = v42 * v21;
    do
      cvReadRawDataSlice(a1, v53, v45, *(_QWORD *)(Image + 88) + *(int *)(Image + 96) * (uint64_t)v44++, v9);
    while (v43 != v44);
  }
  return Image;
}

void sub_219E23620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t icvWriteImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const cv::Exception *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *__p[2];
  void *v20[2];
  void *v21[2];
  char v22[120];
  char v23;
  _BYTE v24[15];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!a3 || *(_DWORD *)a3 != 144 || !*(_QWORD *)(a3 + 88))
    icvWriteImage();
  if (*(_DWORD *)(a3 + 28) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "Images with planar data layout are not supported");
    std::string::basic_string[abi:ne180100]<0>(v20, "icvWriteImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v22, 4294967086, v21, v20, __p, 3904);
    cv::error((cv *)v22, v5);
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-image");
  cvWriteInt(a1, (uint64_t)"width", *(unsigned int *)(a3 + 40));
  cvWriteInt(a1, (uint64_t)"height", *(unsigned int *)(a3 + 44));
  if (*(_DWORD *)(a3 + 32))
    v6 = "bottom-left";
  else
    v6 = "top-left";
  cvWriteString(a1, (uint64_t)"origin", (uint64_t)v6, 0);
  if (*(_DWORD *)(a3 + 28) == 1)
    v7 = "planar";
  else
    v7 = "interleaved";
  cvWriteString(a1, (uint64_t)"layout", (uint64_t)v7, 0);
  if (*(_QWORD *)(a3 + 48))
  {
    cvStartWriteStruct(a1, (uint64_t)"roi", 14, 0);
    cvWriteInt(a1, (uint64_t)"x", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 4));
    cvWriteInt(a1, (uint64_t)"y", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 8));
    cvWriteInt(a1, (uint64_t)"width", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 12));
    cvWriteInt(a1, (uint64_t)"height", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 16));
    cvWriteInt(a1, (uint64_t)"coi", **(unsigned int **)(a3 + 48));
    cvEndWriteStruct(a1);
  }
  v8 = (0x43160520u >> (((*(_DWORD *)(a3 + 16) >> 2) & 0x3C) + ((*(int *)(a3 + 16) >> 31) & 0x14))) & 7;
  v9 = &v23;
  sprintf(&v23, "%d%c", *(_DWORD *)(a3 + 8), icvTypeSymbol[v8]);
  if (v24[1])
    v10 = 0;
  else
    v10 = v23 == 49;
  if (v10)
    v9 = v24;
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  v11 = *(_DWORD *)(a3 + 40);
  v12 = (*(_DWORD *)(a3 + 8) * v11) << ((0xFA50u >> (2 * v8)) & 3);
  v13 = *(_DWORD *)(a3 + 96);
  if (v12 == v13)
    v14 = *(_DWORD *)(a3 + 44);
  else
    v14 = 1;
  if (v12 == v13)
    v15 = 1;
  else
    v15 = *(_DWORD *)(a3 + 44);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  if (v15 >= 1)
  {
    v16 = 0;
    v17 = v14 * v11;
    do
      cvWriteRawData(a1, *(_QWORD *)(a3 + 88) + *(int *)(a3 + 96) * (uint64_t)v16++, v17, v9);
    while (v15 != v16);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

void sub_219E23A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

BOOL icvIsMat(_BOOL8 result)
{
  if (result)
    return *(_WORD *)(result + 2) == 16962
        && (*(_DWORD *)(result + 36) & 0x80000000) == 0
        && *(_DWORD *)(result + 32) >= 0;
  return result;
}

uint64_t icvReadMat(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const cv::Exception *v10;
  unsigned int v11;
  uint64_t v12;
  const cv::Exception *v13;
  int v14;
  const cv::Exception *v15;
  uint64_t Mat;
  int v17;
  int v18;
  void *__p[2];
  void *v21[2];
  void *v22[2];
  _BYTE v23[120];

  FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "rows");
  if (FileNodeByName)
  {
    if ((*(_DWORD *)FileNodeByName & 7) == 2)
    {
      v5 = (uint64_t)rint(*(double *)(FileNodeByName + 16));
    }
    else if ((*(_DWORD *)FileNodeByName & 7) == 1)
    {
      LODWORD(v5) = *(_DWORD *)(FileNodeByName + 16);
    }
    else
    {
      LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v5) = -1;
  }
  v6 = cvGetFileNodeByName((uint64_t)a1, a2, "cols");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v7) = -1;
  }
  v8 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (!v8
    || (*(_DWORD *)v8 & 7) != 3
    || (v9 = *(char **)(v8 + 24), (v5 & 0x80000000) != 0)
    || (v7 & 0x80000000) != 0
    || !v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v23, 4294967294, v22, v21, __p, 3585);
    cv::error((cv *)v23, v10);
  }
  v11 = icvDecodeSimpleFormat(v9);
  v12 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v23, 4294967294, v22, v21, __p, 3591);
    cv::error((cv *)v23, v13);
  }
  if ((*(_DWORD *)v12 & 7u) < 5)
    v14 = (*(_DWORD *)v12 & 7) != 0;
  else
    v14 = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 40);
  if (v14 < 1)
  {
    if (v5 | v7)
    {
      v17 = v5;
      v18 = v7;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    return cvCreateMatHeader(v17, v18, v11);
  }
  else
  {
    if (v14 != (_DWORD)v7 * (_DWORD)v5 + (_DWORD)v7 * (_DWORD)v5 * ((v11 >> 3) & 0x1FF))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "The matrix size does not match to the number of stored elements");
      std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v23, 4294967087, v22, v21, __p, 3596);
      cv::error((cv *)v23, v15);
    }
    Mat = cvCreateMat(v5, v7, v11);
    cvReadRawData(a1, v12, *(_QWORD *)(Mat + 24), v9);
  }
  return Mat;
}

void sub_219E23E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvWriteMat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t Size;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  char v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a3
    || *(_WORD *)(a3 + 2) != 16962
    || (*(_DWORD *)(a3 + 36) & 0x80000000) != 0
    || (*(_DWORD *)(a3 + 32) & 0x80000000) != 0)
  {
    icvWriteMat();
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-matrix");
  cvWriteInt(a1, (uint64_t)"rows", *(unsigned int *)(a3 + 32));
  cvWriteInt(a1, (uint64_t)"cols", *(unsigned int *)(a3 + 36));
  v5 = icvEncodeFormat(*(_DWORD *)a3 & 0xFFF, v12);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v5, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  Size = cvGetSize(a3);
  if ((int)Size >= 1 && SHIDWORD(Size) >= 1 && *(_QWORD *)(a3 + 24))
  {
    v7 = 0;
    if ((*(_DWORD *)a3 & 0x4000) != 0)
      v8 = HIDWORD(Size);
    else
      v8 = 1;
    v9 = v8 * Size;
    if ((*(_DWORD *)a3 & 0x4000) != 0)
      v10 = 1;
    else
      v10 = HIDWORD(Size);
    do
    {
      cvWriteRawData(a1, *(_QWORD *)(a3 + 24) + v7 * *(int *)(a3 + 4), v9, v12);
      ++v7;
    }
    while (v10 != v7);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

BOOL icvIsMatND(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 16963;
  return result;
}

uint64_t icvReadMatND(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName;
  uint64_t v5;
  char *v6;
  const cv::Exception *v7;
  signed int v8;
  const cv::Exception *v9;
  unsigned int v10;
  uint64_t v11;
  const cv::Exception *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t MatND;
  const cv::Exception *v20;
  void *__p[2];
  void *v23[2];
  void *v24[2];
  _BYTE v25[120];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "sizes");
  v5 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (!v5 || (*(_DWORD *)v5 & 7) != 3 || (v6 = *(char **)(v5 + 24), !FileNodeByName) || !v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967294, v24, v23, __p, 3670);
    cv::error((cv *)v25, v7);
  }
  if ((*(_DWORD *)FileNodeByName & 7) == 5)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(FileNodeByName + 16) + 40);
  }
  else if ((*(_DWORD *)FileNodeByName & 7) == 1)
  {
    v8 = 1;
  }
  else
  {
    v8 = -1;
  }
  if ((v8 - 33) <= 0xFFFFFFDF)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "Could not determine the matrix dimensionality");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967084, v24, v23, __p, 3676);
    cv::error((cv *)v25, v9);
  }
  cvReadRawData(a1, FileNodeByName, (uint64_t)v26, "i");
  v10 = icvDecodeSimpleFormat(v6);
  v11 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967294, v24, v23, __p, 3683);
    cv::error((cv *)v25, v12);
  }
  v13 = ((v10 >> 3) & 0x1FF) + 1;
  if (v8 >= 1)
  {
    v14 = v8;
    v15 = (int *)v26;
    do
    {
      v16 = *v15++;
      v13 *= v16;
      --v14;
    }
    while (v14);
  }
  if ((*(_DWORD *)v11 & 7u) < 5)
    v17 = (*(_DWORD *)v11 & 7) != 0;
  else
    v17 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 40);
  if (v17 >= 1 && v17 != v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "The matrix size does not match to the number of stored elements");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967087, v24, v23, __p, 3694);
    cv::error((cv *)v25, v20);
  }
  if (v17 < 1)
    return cvCreateMatNDHeader(v8, (uint64_t)v26, v10);
  MatND = cvCreateMatND(v8, (uint64_t)v26, v10);
  cvReadRawData(a1, v11, *(_QWORD *)(MatND + 24), v6);
  return MatND;
}

void sub_219E2444C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t icvWriteMatND(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Dims;
  unsigned int ElemType;
  char *v7;
  unsigned int v9[4];
  int v10[2];
  _BYTE v11[288];
  uint64_t v12;
  char v13[16];
  int __dst[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  if (!a3 || *(_WORD *)(a3 + 2) != 16963)
    icvWriteMatND();
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-nd-matrix");
  Dims = cvGetDims(a3, __dst);
  cvStartWriteStruct(a1, (uint64_t)"sizes", 13, 0);
  cvWriteRawData(a1, (uint64_t)__dst, Dims, "i");
  cvEndWriteStruct(a1);
  ElemType = cvGetElemType((int *)a3);
  v7 = icvEncodeFormat(ElemType, v13);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v7, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  if (*(int *)(a3 + 32) >= 1 && *(_QWORD *)(a3 + 24))
  {
    cvInitNArrayIterator(1u, (uint64_t)&v12, 0, (uint64_t)v11, (uint64_t)v9, 0);
    do
      cvWriteRawData(a1, *(uint64_t *)v10, v9[2], v13);
    while (cvNextNArraySlice(v9));
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

uint64_t cvRead(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  const cv::Exception *v5;
  uint64_t v6;
  const cv::Exception *v7;
  uint64_t result;
  void *__p[2];
  void *v10[2];
  void *v11[2];
  _BYTE v12[120];

  if (!a1)
  {
    v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvRead");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, v4, v11, v10, __p, 5000);
    cv::error((cv *)v12, v5);
  }
  if (*a1 != 1280131417)
  {
    v4 = 4294967291;
    goto LABEL_5;
  }
  if (!a2)
    return 0;
  if ((*(_BYTE *)a2 & 0x10) == 0 || (v6 = *(_QWORD *)(a2 + 8)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "The node does not represent a user object (unknown type?)");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvRead");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, 4294967294, v11, v10, __p, 5006);
    cv::error((cv *)v12, v7);
  }
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(v6 + 48))(a1, a2);
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_219E247FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t icvFSFlush(uint64_t a1)
{
  uint64_t v2;
  _WORD *v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v3 = *(_WORD **)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  v4 = *(int *)(a1 + 88);
  if ((unint64_t)v3 > v2 + v4)
  {
    *v3 = 10;
    icvPuts(a1, *(char **)(a1 + 128));
    v2 = *(_QWORD *)(a1 + 128);
    LODWORD(v4) = *(_DWORD *)(a1 + 88);
  }
  v5 = *(_DWORD *)(a1 + 64);
  if (v5 == (_DWORD)v4)
  {
    v5 = v4;
  }
  else
  {
    if (v5 > (int)v4)
    {
      memset((void *)(v2 + (int)v4), 32, v5 - (int)v4);
      v2 = *(_QWORD *)(a1 + 128);
    }
    *(_DWORD *)(a1 + 88) = v5;
  }
  result = v2 + v5;
  *(_QWORD *)(a1 + 120) = result;
  return result;
}

void std::deque<char>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<CGPoint *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<CGPoint *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<CGPoint *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CGPoint *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_219E24C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t icvXMLWriteTag(uint64_t a1, const char *a2, int a3, void **a4, uint64_t a5)
{
  _BYTE *v9;
  int v10;
  const char *v11;
  const cv::Exception *v12;
  const cv::Exception *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  const cv::Exception *v17;
  int v18;
  const cv::Exception *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  char *v26;
  const void *v27;
  int v28;
  char *v29;
  char v30;
  char v31;
  const cv::Exception *v32;
  char *v33;
  void **v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  const void *v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  void *__p[2];
  void *v53[2];
  void *v54[2];
  _BYTE v55[128];

  v9 = *(_BYTE **)(a1 + 120);
  v10 = *(_DWORD *)(a1 + 68);
  if (a2)
  {
    if (*a2)
      v11 = a2;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  if (a3 == 1)
  {
    if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
    {
      if (v11)
        v10 = 38;
      else
        v10 = 37;
      *(_DWORD *)(a1 + 12) = 0;
    }
    else if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (v11 != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "An attempt to add element without a key to a map, or add element with key to sequence");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2316);
      cv::error((cv *)v55, v12);
    }
    if ((v10 & 0x20) == 0)
      v9 = (_BYTE *)icvFSFlush(a1);
  }
  v50 = v10;
  if (v11)
  {
    if (*v11 == 95 && !v11[1])
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "A single _ is a reserved tag name");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2331);
      cv::error((cv *)v55, v13);
    }
  }
  else
  {
    v11 = "_";
  }
  result = strlen(v11);
  LODWORD(v15) = result;
  *v9 = 60;
  v16 = v9 + 1;
  if (a3 == 2)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "Closing tag should not include any attributes");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2338);
      cv::error((cv *)v55, v17);
    }
    v16 = v9 + 2;
    v9[1] = 47;
  }
  v18 = *(unsigned __int8 *)v11;
  if (v18 != 95 && (v18 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v54, "Key should start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2343);
    cv::error((cv *)v55, v20);
  }
  v21 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v16[(int)result] >= v21)
  {
    v22 = *(_QWORD *)(a1 + 128);
    v23 = (_DWORD)v16 - v22;
    v24 = (3 * (v21 - v22) + (((3 * (v21 - v22)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v16 - (int)v22 + (int)result <= (int)v24)
      v25 = v24;
    else
      v25 = v23 + result;
    result = cvAlloc(v25 + 256);
    v26 = (char *)result;
    v27 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = result + *(_QWORD *)(a1 + 120) - (_QWORD)v27;
    if (v23 >= 1)
      result = (uint64_t)memcpy((void *)result, v27, v23);
    *(_QWORD *)(a1 + 128) = v26;
    *(_QWORD *)(a1 + 136) = &v26[v25];
    v16 = &v26[v23];
  }
  v28 = v15;
  if ((int)v15 >= 1)
  {
    v15 = v15;
    v29 = v16;
    do
    {
      v31 = *v11++;
      v30 = v31;
      if ((v31 - 58) <= 0xF5u
        && ((v30 & 0xDF) - 91) <= 0xE5u
        && v30 != 45
        && v30 != 95)
      {
        std::string::basic_string[abi:ne180100]<0>(v54, "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'");
        std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2350);
        cv::error((cv *)v55, v32);
      }
      *v29++ = v30;
      --v15;
    }
    while (v15);
  }
  v33 = &v16[v28];
  while (1)
  {
    v51 = a5;
    if (a4)
    {
      result = (uint64_t)*a4;
      if (*a4)
      {
        v34 = a4 + 1;
        do
        {
          v35 = strlen((const char *)result);
          v36 = strlen((const char *)*v34);
          v37 = v35 + v36 + 4;
          v38 = *(_QWORD *)(a1 + 136);
          if ((unint64_t)&v33[v37] >= v38)
          {
            v39 = *(_QWORD *)(a1 + 128);
            v40 = (_DWORD)v33 - v39;
            v41 = (3 * (v38 - v39) + (((3 * (v38 - v39)) & 0x8000000000000000) != 0)) >> 1;
            v42 = v37 + (_DWORD)v33 - v39;
            if (v42 <= (int)v41)
              v43 = v41;
            else
              v43 = v42;
            v44 = (char *)cvAlloc(v43 + 256);
            v45 = v44;
            v46 = *(const void **)(a1 + 128);
            *(_QWORD *)(a1 + 120) = &v44[*(_QWORD *)(a1 + 120) - (_QWORD)v46];
            if (v40 >= 1)
              memcpy(v44, v46, v40);
            *(_QWORD *)(a1 + 128) = v45;
            *(_QWORD *)(a1 + 136) = &v45[v43];
            v33 = &v45[v40];
          }
          *v33 = 32;
          v47 = v33 + 1;
          memcpy(v47, *(v34 - 1), v35);
          v48 = &v47[v35];
          *(_WORD *)v48 = 8765;
          v48 += 2;
          memcpy(v48, *v34, v36);
          v49 = &v48[v36];
          *v49 = 34;
          v33 = v49 + 1;
          result = (uint64_t)v34[1];
          v34 += 2;
        }
        while (result);
      }
    }
    if (!v51)
      break;
    a4 = *(void ***)v51;
    a5 = *(_QWORD *)(v51 + 8);
  }
  *v33 = 62;
  *(_QWORD *)(a1 + 120) = v33 + 1;
  *(_DWORD *)(a1 + 68) = v50 & 0xFFFFFFDF;
  return result;
}

void sub_219E2527C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t icvDecodeSimpleFormat(const char *a1)
{
  const cv::Exception *v2;
  void *__p[2];
  void *v5[2];
  void *v6[2];
  _BYTE v7[120];
  int v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (icvDecodeFormat(a1, &v8) != 1 || v8 >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "Too complex format for the matrix");
    std::string::basic_string[abi:ne180100]<0>(v5, "icvDecodeSimpleFormat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v7, 4294967294, v6, v5, __p, 3115);
    cv::error((cv *)v7, v2);
  }
  return (v9 & 7 | (8 * v8)) - 8;
}

void sub_219E25418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t icvCalcElemSize(const char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int8x8_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint8x8_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = icvDecodeFormat(a1, &v13);
  result = a2;
  if (v5 >= 1)
  {
    v8 = 0;
    v9 = (2 * v5);
    result = a2;
    do
    {
      if ((_DWORD)result == 0x7FFFFFFF
        || (v6.i32[0] = (((*(&v13 + v8 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v13 + v8 + 1) & 7))) & 3),
            v6 = vcnt_s8(v6),
            v6.i16[0] = vaddlv_u8((uint8x8_t)v6),
            v6.i32[0] >= 2u))
      {
        cvWriteRawData_cold_1(result, v3, v4);
      }
      v10 = (((*(&v13 + v8 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v13 + v8 + 1) & 7))) & 3);
      result = (((_DWORD)result + v10 - 1) & -v10) + *(&v13 + v8) * v10;
      v8 += 2;
    }
    while (v8 < v9);
  }
  if (!(_DWORD)a2)
  {
    if ((_DWORD)result == 0x7FFFFFFF
      || (v6.i32[0] = (((v14 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3),
          v12 = (uint8x8_t)vcnt_s8(v6),
          v12.i16[0] = vaddlv_u8(v12),
          v12.i32[0] >= 2u))
    {
      cvWriteRawData_cold_1(result, v3, v4);
    }
    v11 = (((v14 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3);
    return ((_DWORD)result + v11 - 1) & -v11;
  }
  return result;
}

uint64_t icvWriteSeq(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *Format;
  int v10;
  char *v11;
  uint64_t i;
  _QWORD v14[2];
  char v15[128];
  char __s[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14[0] = a4;
  v14[1] = a5;
  if (!a3 || *((_WORD *)a3 + 1) != 17049)
    icvWriteSeq();
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sequence");
  if ((a6 & 0x80000000) == 0)
    cvWriteInt(a1, (uint64_t)"level", a6);
  Format = icvGetFormat(a3, "dt", (const char *)v14, 0, v15);
  __s[0] = 0;
  v10 = *a3;
  if ((*a3 & 0x4000) != 0)
    *(_QWORD *)&__s[strlen(__s)] = 0x6465736F6C6320;
  if ((v10 & 0x8000) != 0)
    strcat(__s, " hole");
  if ((v10 & 0x3000) == 0x1000)
    strcat(__s, " curve");
  if ((v10 & 0xFFF) == 0 && a3[11] != 1)
    strcat(__s, " untyped");
  if (__s[0])
    v11 = &__s[1];
  else
    v11 = __s;
  cvWriteString(a1, (uint64_t)"flags", (uint64_t)v11, 1);
  cvWriteInt(a1, (uint64_t)"count", a3[10]);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)Format, 0);
  icvWriteHeaderData(a1, a3, (const char *)v14, 96);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  for (i = *((_QWORD *)a3 + 11); i; i = *(_QWORD *)(i + 8))
  {
    cvWriteRawData(a1, *(_QWORD *)(i + 24), *(_DWORD *)(i + 20), Format);
    if (i == **((_QWORD **)a3 + 11))
      break;
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

char *icvGetFormat(_DWORD *a1, char *a2, const char *a3, uint64_t a4, char *a5)
{
  const char *v8;
  const char *v9;
  const cv::Exception *v10;
  int v11;
  const cv::Exception *v12;
  BOOL v14;
  int v15;
  void *__p[2];
  void *v17[2];
  void *v18[2];
  _BYTE v19[120];

  v8 = cvAttrValue(a3, a2);
  if (v8)
  {
    v9 = v8;
    if (icvCalcElemSize(v8, a4) != a1[11])
    {
      std::string::basic_string[abi:ne180100]<0>(v18, "The size of element calculated from \"dt\" and the elem_size do not match");
      std::string::basic_string[abi:ne180100]<0>(v17, "icvGetFormat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v19, 4294967087, v18, v17, __p, 4116);
      cv::error((cv *)v19, v10);
    }
  }
  else
  {
    v11 = a1[11];
    if ((*a1 & 0xFFF) != 0 || v11 == 1)
    {
      if ((((*a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*a1 & 7))) & 3) != v11)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "Size of sequence element (elem_size) is inconsistent with seq->flags");
        std::string::basic_string[abi:ne180100]<0>(v17, "icvGetFormat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v19, 4294967087, v18, v17, __p, 4122);
        cv::error((cv *)v19, v12);
      }
      return icvEncodeFormat(*a1 & 0xFFF, a5);
    }
    else
    {
      v14 = __OFSUB__(v11, (_DWORD)a4);
      v15 = v11 - a4;
      if ((v15 < 0) ^ v14 | (v15 == 0))
      {
        return 0;
      }
      else
      {
        if ((v15 & 3) != 0)
          sprintf(a5, "%uu");
        else
          sprintf(a5, "%ui");
        return a5;
      }
    }
  }
  return (char *)v9;
}

void sub_219E25A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

const char *icvWriteHeaderData(uint64_t a1, int *a2, const char *a3, uint64_t a4)
{
  const char *result;
  char *v8;
  const cv::Exception *v9;
  int v10;
  unsigned int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  void *__p[2];
  void *v16[2];
  void *v17[2];
  char v18[120];
  char v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = cvAttrValue(a3, "header_dt");
  if (result)
  {
    v8 = (char *)result;
    if ((int)icvCalcElemSize(result, a4) > a2[1])
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "The size of header calculated from \"header_dt\" is greater than header_size");
      std::string::basic_string[abi:ne180100]<0>(v16, "icvWriteHeaderData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v18, 4294967087, v17, v16, __p, 4052);
      cv::error((cv *)v18, v9);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = v10 - a4;
    if (v10 <= (int)a4)
      return result;
    v12 = *a2;
    if (HIWORD(*a2) == 17049)
    {
      if (v10 == 128 && (*a2 & 0xFFE) == 0xC && a2[11] == 8)
      {
        cvStartWriteStruct(a1, (uint64_t)"rect", 14, 0);
        cvWriteInt(a1, (uint64_t)"x", a2[24]);
        cvWriteInt(a1, (uint64_t)"y", a2[25]);
        cvWriteInt(a1, (uint64_t)"width", a2[26]);
        cvWriteInt(a1, (uint64_t)"height", a2[27]);
        cvEndWriteStruct(a1);
        return (const char *)cvWriteInt(a1, (uint64_t)"color", a2[28]);
      }
      if ((v12 & 0xFFFF3000) == 0x42991000 && (v12 & 0xFFF) == 0 && a2[11] == 1)
      {
        cvStartWriteStruct(a1, (uint64_t)"origin", 14, 0);
        cvWriteInt(a1, (uint64_t)"x", a2[24]);
        cvWriteInt(a1, (uint64_t)"y", a2[25]);
        return (const char *)cvEndWriteStruct(a1);
      }
    }
    if ((v11 & 3) != 0)
    {
      v14 = (v10 - a4);
      v13 = "%uu";
    }
    else
    {
      v14 = v11 >> 2;
      v13 = "%ui";
    }
    v8 = v19;
    sprintf(v19, v13, v14);
  }
  cvWriteString(a1, (uint64_t)"header_dt", (uint64_t)v8, 0);
  cvStartWriteStruct(a1, (uint64_t)"header_user_data", 13, 0);
  cvWriteRawData(a1, (uint64_t)(a2 + 24), 1, v8);
  return (const char *)cvEndWriteStruct(a1);
}

void sub_219E25DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

char *icvEncodeFormat(unsigned int a1, char *a2)
{
  _BOOL8 v3;

  sprintf(a2, "%d%c", ((a1 >> 3) & 0x1FF) + 1, icvTypeSymbol[a1 & 7]);
  if (a2[2])
    v3 = 0;
  else
    v3 = *a2 == 49;
  return &a2[v3];
}

uint64_t icvSortIdxCmpFunc(int **a1, int **a2, unsigned int *a3)
{
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v3 = *a3;
  if ((int)v3 < 1)
    return 0;
  v4 = *a1;
  v5 = *a2;
  while (1)
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v5++;
    result = (v6 - v8);
    if (v6 != v8)
      break;
    if (!--v3)
      return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 450, a4);
}

void cvWriteRawData_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("cvAlign", "internal.hpp", a3, "(align & (align-1)) == 0 && size < INT_MAX");
}

void cvWriteRawData_cold_2()
{
  __assert_rtn("cvWriteRawData", "persistence.cpp", 3199, "0");
}

void icvDecodeFormat()
{
  __assert_rtn("icvDecodeFormat", "persistence.cpp", 3035, "fmt_pairs != 0 && max_len > 0");
}

void cvReadRawDataSlice_cold_2()
{
  __assert_rtn("cvReadRawDataSlice", "persistence.cpp", 3321, "0");
}

void cvReadRawDataSlice_cold_3()
{
  __assert_rtn("cvReadRawDataSlice", "persistence.cpp", 3371, "0");
}

void icvWriteSeqTree()
{
  __assert_rtn("icvWriteSeqTree", "persistence.cpp", 4200, "CV_IS_SEQ( seq)");
}

void icvReadSeqTree()
{
  __assert_rtn("icvReadSeqTree", "persistence.cpp", 4402, "level == prev_level + 1");
}

void icvWriteGraph()
{
  __assert_rtn("icvWriteGraph", "persistence.cpp", 4467, "CV_IS_GRAPH(graph)");
}

{
  __assert_rtn("cvAlignPtr", "internal.hpp", 444, "(align & (align-1)) == 0");
}

void icvWriteSparseMat()
{
  __assert_rtn("icvWriteSparseMat", "persistence.cpp", 3750, "CV_IS_SPARSE_MAT(mat)");
}

{
  __assert_rtn("icvWriteSparseMat", "persistence.cpp", 3786, "k < dims");
}

{
  __assert_rtn("icvWriteSparseMat", "persistence.cpp", 3782, "(reader).seq->elem_size == sizeof(idx)");
}

void icvWriteImage()
{
  __assert_rtn("icvWriteImage", "persistence.cpp", 3900, "CV_IS_IMAGE(image)");
}

void icvWriteMat()
{
  __assert_rtn("icvWriteMat", "persistence.cpp", 3538, "CV_IS_MAT_HDR_Z(mat)");
}

void icvWriteMatND()
{
  __assert_rtn("icvWriteMatND", "persistence.cpp", 3632, "CV_IS_MATND_HDR(mat)");
}

void icvWriteSeq()
{
  __assert_rtn("icvWriteSeq", "persistence.cpp", 4150, "CV_IS_SEQ( seq)");
}

void *_GLOBAL__sub_I_persistence_cpp()
{
  void *result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  uint64_t (*v6)();
  void *v7;
  void *v8;
  void *v9;

  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sequence";
  v5 = icvIsSeq;
  v6 = (uint64_t (*)())icvReleaseSeq;
  v7 = icvReadSeq;
  v8 = icvWriteSeqTree;
  v9 = icvCloneSeq;
  cvRegisterType((uint64_t)&v1);
  seq_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sequence-tree";
  v5 = icvIsSeq;
  v6 = (uint64_t (*)())icvReleaseSeq;
  v7 = icvReadSeqTree;
  v8 = icvWriteSeqTree;
  v9 = icvCloneSeq;
  cvRegisterType((uint64_t)&v1);
  seq_tree_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-graph";
  v5 = icvIsGraph;
  v6 = (uint64_t (*)())icvReleaseGraph;
  v7 = icvReadGraph;
  v8 = icvWriteGraph;
  v9 = icvCloneGraph;
  cvRegisterType((uint64_t)&v1);
  seq_graph_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sparse-matrix";
  v5 = icvIsSparseMat;
  v6 = (uint64_t (*)())cvReleaseSparseMat;
  v7 = icvReadSparseMat;
  v8 = icvWriteSparseMat;
  v9 = cvCloneSparseMat;
  cvRegisterType((uint64_t)&v1);
  sparse_mat_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-image";
  v5 = icvIsImage;
  v6 = (uint64_t (*)())cvReleaseImage;
  v7 = icvReadImage;
  v8 = icvWriteImage;
  v9 = cvCloneImage;
  cvRegisterType((uint64_t)&v1);
  image_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-matrix";
  v5 = icvIsMat;
  v6 = (uint64_t (*)())cvReleaseMat;
  v7 = icvReadMat;
  v8 = icvWriteMat;
  v9 = cvCloneMat;
  cvRegisterType((uint64_t)&v1);
  mat_type = CvType::first;
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-nd-matrix";
  v5 = icvIsMatND;
  v6 = cvReleaseMatND;
  v7 = icvReadMatND;
  v8 = icvWriteMatND;
  v9 = cvCloneMatND;
  result = cvRegisterType((uint64_t)&v1);
  matnd_type = CvType::first;
  return result;
}

_QWORD *cv::dft(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3)
{
  void (***v3)(__int128 *__return_ptr, _QWORD, uint64_t);
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  cv *v12;
  cv *v13;
  char v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  int32x2_t *v18;
  Mat *v19;
  int *v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const cv::Exception *v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int *v36;
  int v37;
  int v38;
  _BOOL4 v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  signed int v44;
  signed int v45;
  BOOL v46;
  _BOOL4 v47;
  signed int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  _OWORD *v54;
  BOOL v55;
  int v56;
  _BOOL4 v57;
  unint64_t v58;
  size_t v59;
  char *v60;
  _DWORD *v61;
  cv *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  double v68;
  int v69;
  int v70;
  size_t v71;
  cv *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  BOOL v83;
  BOOL v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  int v89;
  int v90;
  int v91;
  int v92;
  double v93;
  int v94;
  int v95;
  unint64_t v97;
  Mat *v98;
  int v99;
  uint64_t (*v100)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, int);
  size_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  int32x2_t *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  _DWORD *v121;
  unsigned __int8 *v122;
  cv *v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  int *v129;
  _QWORD *v130;
  _QWORD *v131;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  cv *v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  int *v145;
  _DWORD *v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  cv *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  int *v166;
  cv *v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  int32x2_t *v178;
  cv *v179;
  cv *v180;
  _BOOL4 v181;
  int v182;
  _BOOL4 v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  int32x2_t *v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *result;
  const cv::Exception *v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  char v208;
  _BOOL4 v209;
  _BOOL4 v210;
  int v211;
  int v212;
  uint64_t v213;
  char *v214;
  cv *v215;
  Mat *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t (*v219)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, int);
  char *v220;
  _DWORD *v221;
  uint64_t *__src;
  unsigned __int8 *v223;
  int v224;
  int v225;
  _DWORD *v226;
  int v227[2];
  unsigned int v228;
  int *v229;
  _DWORD *v230;
  int v231;
  cv *v232;
  int v233;
  uint64_t v234;
  void *__p[2];
  void *v236;
  cv *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  cv *v242;
  unsigned __int8 *v243;
  int32x2_t v244;
  int32x2_t v245;
  int32x2_t v246;
  void *v247[2];
  void *v248[2];
  _BYTE v249[120];
  __int128 v250;
  _BYTE v251[48];
  int32x2_t *v252;
  cv *v253;
  unsigned __int8 *v254[2];
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  cv *v261;
  uint64_t v262;
  unsigned int v263[34];
  _QWORD *v264;
  unint64_t v265;
  _QWORD v266[518];

  v3 = (void (***)(__int128 *__return_ptr, _QWORD, uint64_t))MEMORY[0x24BDAC7A8](this, a2);
  LODWORD(v216) = v4;
  v6 = v5;
  v8 = v7;
  v266[515] = *MEMORY[0x24BDAC8D0];
  v264 = v266;
  v265 = 4104;
  (**v3)(&v255, v3, 0xFFFFFFFFLL);
  v250 = v255;
  *(_OWORD *)&v251[8] = v257;
  *(_OWORD *)&v251[24] = v258;
  *(_QWORD *)v251 = v256;
  *(_QWORD *)&v251[40] = v259;
  v252 = (int32x2_t *)&v250 + 1;
  v253 = (cv *)v254;
  v9 = (unsigned int *)v257;
  v254[1] = 0;
  v254[0] = 0;
  if ((_QWORD)v257)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = DWORD1(v255);
  }
  else
  {
    v11 = DWORD1(v255);
  }
  if (v11 > 2)
  {
    DWORD1(v250) = 0;
    cv::Mat::copySize((cv::Mat *)&v250, (const cv::Mat *)&v255);
  }
  else
  {
    v12 = v261;
    v13 = v253;
    *(_QWORD *)v253 = *(_QWORD *)v261;
    *((_QWORD *)v13 + 1) = *((_QWORD *)v12 + 1);
  }
  v14 = v250;
  v15 = (~(_DWORD)v6 & 0x21) == 0;
  if ((v250 & 0xFF8) == 0)
    v15 = 1;
  v209 = v15;
  v16 = v250 & 0xFFF;
  if (v16 > 0xE || ((1 << v250) & 0x6060) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v236, "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2");
    std::string::basic_string[abi:ne180100]<0>(v248, "dft");
    std::string::basic_string[abi:ne180100]<0>(v247, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v249, 4294967081, &v236, v248, v247, 1546);
    cv::error((cv *)v249, v201);
  }
  v17 = v250 & 7;
  if ((v6 & 1) != 0)
  {
    if ((v6 & 0x20) != 0 && (v250 & 0xFF8) == 8)
    {
      v245 = vrev64_s32(*v252);
      v18 = &v245;
      v16 = v250 & 7;
      goto LABEL_20;
    }
  }
  else if ((v6 & 0x10) != 0 && (v250 & 0xFF8) == 0)
  {
    v246 = vrev64_s32(*v252);
    v16 = v17 | 8u;
    v18 = &v246;
    goto LABEL_20;
  }
  v244 = vrev64_s32(*v252);
  v18 = &v244;
LABEL_20:
  (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 128))(v8, v18, v16, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v8)(&v236, v8, 0xFFFFFFFFLL);
  v22 = (0x88442211uLL >> (4 * (v14 & 7u))) & 0xF;
  v23 = 2 * v22;
  v203 = v22;
  if (v209)
    v24 = v22;
  else
    v24 = 2 * v22;
  v207 = v24;
  if ((int)v216 >= 1 && HIDWORD(v250) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v248, "This mode (using nonzero_rows with a single-column matrix) breaks the function's logic, so it is prohibited.\nFor fast convolution/correlation use 2-column matrix or single-row matrix instead");
    std::string::basic_string[abi:ne180100]<0>(v247, "dft");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v249, 4294967083, v248, v247, __p, 1563);
    cv::error((cv *)v249, v25);
  }
  v26 = 0;
  if ((v6 & 4) != 0 || SDWORD2(v250) < 2)
    goto LABEL_37;
  if (HIDWORD(v250) != 1)
  {
    v26 = 0;
    v27 = v209;
    if (SHIDWORD(v250) <= 1)
      v27 = 0;
    if ((v6 & 1) == 0 || !v27)
      goto LABEL_37;
    goto LABEL_36;
  }
  if ((BYTE1(v250) & 0x40) == 0 || (BYTE1(v236) & 0x40) == 0)
  {
LABEL_36:
    v26 = 1;
    goto LABEL_37;
  }
  v26 = 0;
LABEL_37:
  v228 = 0;
  v217 = (4 * v22);
  v206 = v23 + 4;
  if (v17 == 6)
    v28 = 3;
  else
    v28 = 0;
  v29 = v6 & 1;
  v30 = (v6 & 1) != 0 && v209;
  v210 = v30;
  v31 = 1;
  if ((v6 & 1) != 0)
    v31 = 2;
  if (!v209)
    v31 = 0;
  v202 = v31 + v28;
  v204 = v28;
  v205 = v6;
  v218 = v6 & 1;
  v223 = (unsigned __int8 *)(2 * v22);
  v32 = v207;
  if (!v26)
    goto LABEL_51;
LABEL_48:
  v33 = v6;
  v34 = 0;
  v35 = v237;
  v36 = (int *)&v237 + 1;
  if (!(_DWORD)v29)
    v36 = (int *)((unint64_t)&v255 | 0xC);
  v37 = *v36;
  v38 = v217 * (_DWORD)v237;
  while (1)
  {
    v233 = v37;
    if ((_DWORD)v35)
      v228 = cv::DFTFactorize((cv *)v35, v263, v20);
    v44 = v263[0];
    v45 = v263[v228 - 1];
    v46 = (v263[0] & 1) != 0 || (int)v228 <= 1;
    v47 = !v46;
    v48 = v263[v47];
    v49 = ((v48 > 5) & v48) != 0 ? v23 + v23 * v48 : 0;
    v50 = v38 + v35 * v206 + v49;
    v232 = (cv *)v35;
    if (v26)
    {
      v51 = 1;
      v52 = v26;
      if (v26 == 1 && v263[0] != v45)
        goto LABEL_80;
    }
    else
    {
      v52 = 0;
      if (*(_QWORD *)v251 == (_QWORD)v238 && v263[0] != v45 || v34)
      {
LABEL_80:
        v51 = 0;
        v50 += (_DWORD)v232 * v23;
        goto LABEL_82;
      }
      v51 = 1;
    }
LABEL_82:
    v53 = v50 + 32;
    v54 = v264;
    if (v265 >= v50 + 32)
    {
      v56 = v52;
    }
    else
    {
      if (v264 != v266)
      {
        if (v264)
          MEMORY[0x2207351A4](v264, 0x1000C8077774924);
        v264 = v266;
      }
      v265 = (int)v53;
      v54 = v266;
      v55 = v53 >= 0x1009;
      v56 = v52;
      if (v55)
      {
        v54 = (_OWORD *)operator new[]();
        v264 = v54;
      }
    }
    *(_QWORD *)v227 = v54;
    v229 = (int *)((char *)v54 + (int)v23 * (uint64_t)(int)v232);
    v57 = v210;
    if (v44 == v45)
      v57 = 0;
    if ((_DWORD)v232 || v57)
    {
      if (v56)
        v58 = 0;
      else
        v58 = v210;
      cv::DFTInit(v232, v228, (signed int *)v263, v229, (int *)v23, v54, (void *)v58, v21);
    }
    v59 = (int)v23 * (uint64_t)(int)v232;
    v60 = (char *)(((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
    if (!v56)
      break;
    v61 = *(_DWORD **)v251;
    v226 = (_DWORD *)v238;
    v62 = (cv *)&v60[v59 + v59];
    if (v51)
      v63 = 0;
    else
      v63 = (int)v23 * (uint64_t)(int)v232;
    v220 = (char *)v62 + v63;
    v221 = (_DWORD *)(((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
    if (v51)
      v64 = ((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    else
      v64 = (unint64_t)&v60[v59];
    __src = (uint64_t *)v64;
    if (v51)
      v62 = (cv *)&v60[v59];
    v214 = &v60[v59];
    v215 = v62;
    v219 = cv::dft(cv::_InputArray const&,cv::_OutputArray const&,int,int)::dft_tbl[v204];
    v213 = (int)v23 * (uint64_t)(int)v232;
    if (v209 && (_DWORD)v29 && SHIDWORD(v250) >= 2)
    {
      v65 = 0;
      v66 = (v233 & 1) == 0;
      v67 = v233 + 2;
      if (v233 >= -1)
        v67 = v233 + 1;
      v224 = v67 >> 1;
      v68 = 1.0;
      v208 = 1;
      v69 = v203;
      goto LABEL_121;
    }
    v68 = 1.0;
    if ((v33 & 2) != 0)
      v68 = 1.0 / (double)(v233 * (int)v232);
    if (v209)
    {
      v66 = (v233 & 1) == 0;
      v70 = v233 + 2;
      if (v233 >= -1)
        v70 = v233 + 1;
      v224 = v70 >> 1;
      v69 = v203;
      if (!(_DWORD)v29)
      {
        bzero(v60, (int)v23 * (uint64_t)(int)v232);
        v72 = v232;
        v71 = v203;
        cv::CopyColumn(v61, (unint64_t)v254[0], (_DWORD *)(((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0), v23, (int)v232, v203);
        v74 = (char *)v61 + v203 + v203 * ((v236 >> 3) & 0x1FF);
        if ((v233 & 1) != 0)
        {
          v208 = 0;
          v66 = 0;
          v65 = 1;
          goto LABEL_197;
        }
        v73 = v214;
        bzero(v214, v59);
        cv::CopyColumn(&v74[(v233 - 2) * v203], (unint64_t)v254[0], v214, v23, (int)v232, v203);
        v208 = 0;
        v65 = 1;
        goto LABEL_194;
      }
      v208 = 0;
      v65 = 1;
LABEL_121:
      v71 = v203;
      if ((v250 & 0xFF8) != 0)
      {
        v72 = v232;
        cv::CopyColumn(*(_DWORD **)v251, (unint64_t)v254[0], v221, v23, (int)v232, v23);
        if (!v66)
        {
          v74 = (char *)v61 + v23;
          goto LABEL_197;
        }
        v73 = v214;
        cv::CopyColumn((_DWORD *)((char *)v61 + (int)v23 * (uint64_t)v224), (unint64_t)v254[0], v214, v23, (int)v232, v23);
        v74 = (char *)v61 + v23;
      }
      else
      {
        v117 = *(_QWORD *)v251;
        v72 = v232;
        cv::CopyColumn(*(_DWORD **)v251, (unint64_t)v254[0], v221, v203, (int)v232, v203);
        cv::ExpandCCS((uint64_t)v221, (unsigned __int8 *)v232, v69);
        if (!v66)
        {
          v118 = *(_QWORD *)v227;
          v74 = (char *)(v117 + v203);
LABEL_198:
          ((void (*)(_DWORD *, uint64_t *, cv *, _QWORD, unsigned int *, int *, uint64_t, cv *, double, _QWORD, char *, _DWORD))v219)(v221, __src, v232, v228, v263, v229, v118, v232, v68, 0, v220, v29);
          v211 = v65;
          v230 = v74;
          if (((unsigned __int16)v236 & 0xFF8) != 0)
          {
            if ((_DWORD)v29)
              __assert_rtn("dft", "dxt.cpp", 1844, "!inv");
            cv::CopyColumn(__src, v23, v226, (unint64_t)v243, (int)v232, v23);
            v81 = v224;
            if (v66)
              cv::CopyColumn(v215, v23, (_DWORD *)((char *)v226 + (int)v23 * (uint64_t)v224), (unint64_t)v243, (int)v232, v23);
            v82 = (_DWORD *)((char *)v226 + v23);
            v80 = 1;
            goto LABEL_210;
          }
          if ((_DWORD)v29)
          {
            v119 = v226;
            v120 = (int)v232;
            cv::CopyColumn(__src, v23, v226, (unint64_t)v243, (int)v232, v71);
            if (v66)
            {
              v121 = (_DWORD *)((char *)v226 + (v233 - 1) * v71);
              v122 = v243;
              v123 = v215;
              v124 = v23;
LABEL_208:
              cv::CopyColumn(v123, v124, v121, (unint64_t)v122, v120, v71);
            }
          }
          else
          {
            memcpy((char *)__src + v71, __src, v71);
            v119 = v226;
            v120 = (int)v232;
            cv::CopyColumn((uint64_t *)((char *)__src + v71), v71, v226, (unint64_t)v243, (int)v232, v71);
            if (v66)
            {
              memcpy((char *)v215 + v71, v215, v71);
              v121 = (_DWORD *)((char *)v226 + (v233 - 1) * v71);
              v122 = v243;
              v123 = (cv *)((char *)v215 + v71);
              v124 = v71;
              goto LABEL_208;
            }
          }
          v82 = (_DWORD *)((char *)v119 + v71);
          v80 = 1;
          v81 = v224;
          goto LABEL_210;
        }
        v73 = v214;
        cv::CopyColumn((_DWORD *)(v117 + (v233 - 1) * v203), (unint64_t)v254[0], v214, v203, (int)v232, v203);
        cv::ExpandCCS((uint64_t)v214, (unsigned __int8 *)v232, v69);
        v74 = (char *)(v117 + v203);
      }
LABEL_194:
      ((void (*)(char *, cv *, cv *, _QWORD, unsigned int *, int *, _QWORD, cv *, double, _QWORD, char *, _DWORD))v219)(v73, v215, v72, v228, v263, v229, *(_QWORD *)v227, v72, v68, 0, v220, v29);
      v66 = 1;
LABEL_197:
      v118 = *(_QWORD *)v227;
      goto LABEL_198;
    }
    v230 = *(_DWORD **)v251;
    v208 = 0;
    v80 = 0;
    v211 = 1;
    v81 = v233;
    v82 = (_DWORD *)v238;
LABEL_210:
    if (v80 < v81)
    {
      v125 = v81;
      v234 = 4 * (int)v232;
      v126 = (2 * (_DWORD)v232);
      v127 = v230 + 4;
      v128 = v230 + 2;
      v129 = v230 + 1;
      v130 = v82 + 4;
      v131 = v82 + 2;
      v132 = v82 + 1;
      v225 = v125;
      do
      {
        if (v80 + 1 >= v125)
        {
          v139 = v232;
          cv::CopyColumn(v230, (unint64_t)v254[0], v221, (unint64_t)v223, (int)v232, (uint64_t)v223);
        }
        else
        {
          v133 = (unint64_t)v254[0] >> 2;
          if (v223 == (unsigned __int8 *)4)
          {
            if ((int)v232 >= 1)
            {
              v144 = 4 * v133;
              v145 = v129;
              v146 = (_DWORD *)(((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
              v147 = v232;
              do
              {
                v148 = *v145;
                *v146 = *(v145 - 1);
                *(_DWORD *)((char *)v146++ + v213) = v148;
                v145 = (int *)((char *)v145 + v144);
                --v147;
              }
              while (v147);
            }
          }
          else if (v223 == (unsigned __int8 *)8)
          {
            if ((int)v232 >= 1)
            {
              v140 = 0;
              v141 = 4 * v133;
              v142 = v128;
              v143 = (_QWORD *)(((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
              do
              {
                *v143 = *(v142 - 1);
                *(_QWORD *)((char *)v143 + v213) = *v142;
                v140 += 2;
                ++v143;
                v142 = (_QWORD *)((char *)v142 + v141);
              }
              while (v140 < v126);
            }
          }
          else if (v223 == (unsigned __int8 *)16 && (int)v232 >= 1)
          {
            v134 = 0;
            v135 = 4 * v133;
            v136 = v221 + 2;
            v137 = v127;
            do
            {
              *(v136 - 1) = *(v137 - 2);
              *v136 = *(v137 - 1);
              v138 = (_QWORD *)((char *)v136 + v213);
              *(v138 - 1) = *v137;
              *v138 = v137[1];
              v134 += 4;
              v137 = (_QWORD *)((char *)v137 + v135);
              v136 += 2;
            }
            while (v134 < v234);
          }
          v139 = v232;
          ((void (*)(char *, cv *, cv *, _QWORD, unsigned int *, int *, _QWORD, cv *, double, _QWORD, char *, unsigned int))v219)(v214, v215, v232, v228, v263, v229, *(_QWORD *)v227, v232, v68, 0, v220, v218);
        }
        ((void (*)(_DWORD *, uint64_t *, cv *, _QWORD, unsigned int *, int *, _QWORD, cv *, double, _QWORD, char *, unsigned int))v219)(v221, __src, v139, v228, v263, v229, *(_QWORD *)v227, v139, v68, 0, v220, v218);
        if (v80 + 1 >= v225)
        {
          cv::CopyColumn(__src, (unint64_t)v223, v82, (unint64_t)v243, (int)v232, (uint64_t)v223);
        }
        else
        {
          v149 = (unint64_t)v243 >> 2;
          if (v223 == (unsigned __int8 *)4)
          {
            if ((int)v232 >= 1)
            {
              v164 = 4 * v149;
              v165 = v132;
              v166 = (int *)__src;
              v167 = v215;
              v168 = v232;
              do
              {
                v170 = *v166++;
                v169 = v170;
                v171 = *(_DWORD *)v167;
                v167 = (cv *)((char *)v167 + 4);
                *(v165 - 1) = v169;
                *v165 = v171;
                v165 = (_DWORD *)((char *)v165 + v164);
                --v168;
              }
              while (v168);
            }
          }
          else if (v223 == (unsigned __int8 *)8)
          {
            if ((int)v232 >= 1)
            {
              v157 = 0;
              v158 = 4 * v149;
              v159 = v131;
              v160 = __src;
              v161 = v215;
              do
              {
                v162 = *v160++;
                *(v159 - 1) = v162;
                v163 = *(_QWORD *)v161;
                v161 = (cv *)((char *)v161 + 8);
                *v159 = v163;
                v157 += 2;
                v159 = (_QWORD *)((char *)v159 + v158);
              }
              while (v157 < v126);
            }
          }
          else if (v223 == (unsigned __int8 *)16 && (int)v232 >= 1)
          {
            v150 = 0;
            v151 = 4 * v149;
            v152 = __src + 1;
            v153 = (uint64_t *)((char *)v215 + 8);
            v154 = v130;
            do
            {
              *(v154 - 2) = *(v152 - 1);
              v155 = *v152;
              v152 += 2;
              *(v154 - 1) = v155;
              *v154 = *(v153 - 1);
              v150 += 4;
              v156 = *v153;
              v153 += 2;
              v154[1] = v156;
              v154 = (_QWORD *)((char *)v154 + v151);
            }
            while (v150 < v234);
          }
        }
        v230 = (_DWORD *)((char *)v230 + v217);
        v82 = (_DWORD *)((char *)v82 + v217);
        v80 += 2;
        v127 = (_QWORD *)((char *)v127 + v217);
        v128 = (_QWORD *)((char *)v128 + v217);
        v129 = (int *)((char *)v129 + v217);
        v130 = (_QWORD *)((char *)v130 + v217);
        v131 = (_QWORD *)((char *)v131 + v217);
        v132 = (_DWORD *)((char *)v132 + v217);
        v125 = v225;
      }
      while (v80 < v225);
    }
    if ((v208 & 1) == 0)
    {
      v181 = v209;
      if (v218)
        v181 = 0;
      v19 = (Mat *)v232;
      if (v181 && (int)v232 >= 2 && ((unsigned __int16)v236 & 0xFF8) == 8)
      {
        v182 = 2;
LABEL_278:
        cv::complementComplexOutput((uint64_t)&v236, v19, v182);
        goto LABEL_279;
      }
      goto LABEL_279;
    }
    v172 = (unsigned int *)*((_QWORD *)&v238 + 1);
    v29 = v218;
    if (*((_QWORD *)&v238 + 1))
    {
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 + 1, v172));
    }
    v174 = *(unsigned int **)&v251[8];
    v6 = v205;
    v23 = (uint64_t)v223;
    v32 = v207;
    v26 = v211;
    if (*(_QWORD *)&v251[8])
    {
      do
      {
        v175 = __ldaxr(v174);
        v176 = v175 - 1;
      }
      while (__stlxr(v176, v174));
      if (!v176)
        cv::Mat::deallocate((cv::Mat *)&v250, v19);
    }
    *(_QWORD *)v251 = 0;
    memset(&v251[16], 0, 24);
    if ((uint64_t)v250 <= 0)
    {
      *(_QWORD *)&v251[8] = 0;
      LODWORD(v250) = (_DWORD)v236;
    }
    else
    {
      v177 = 0;
      v178 = v252;
      do
        v178->i32[v177++] = 0;
      while (v177 < SDWORD1(v250));
      *(_QWORD *)&v251[8] = 0;
      LODWORD(v250) = (_DWORD)v236;
      if (SDWORD1(v250) > 2)
        goto LABEL_263;
    }
    v116 = HIDWORD(v236);
    if (SHIDWORD(v236) <= 2)
    {
LABEL_262:
      DWORD1(v250) = v116;
      *((_QWORD *)&v250 + 1) = v237;
      v179 = v242;
      v180 = v253;
      *(_QWORD *)v253 = *(_QWORD *)v242;
      *((_QWORD *)v180 + 1) = *((_QWORD *)v179 + 1);
      goto LABEL_264;
    }
LABEL_263:
    cv::Mat::copySize((cv::Mat *)&v250, (const cv::Mat *)&v236);
LABEL_264:
    *(_OWORD *)v251 = v238;
    *(_OWORD *)&v251[16] = v239;
    v21 = *(double *)&v240;
    *(_OWORD *)&v251[32] = v240;
    if (v26)
      goto LABEL_48;
LABEL_51:
    v38 = 0;
    v33 = v6;
    v39 = (v6 & 4) == 0;
    v40 = (unsigned int *)&v237 + 1;
    if (!(_DWORD)v29)
      v40 = (unsigned int *)((unint64_t)&v250 | 0xC);
    v41 = *v40;
    v42 = v237;
    if (!(_DWORD)v29)
      v42 = DWORD2(v250);
    v43 = v41 == 1;
    if (v39 && v43)
      v35 = v42;
    else
      v35 = v41;
    if (v39 && v43)
      v37 = 1;
    else
      v37 = DWORD2(v250);
    v34 = v209 & v35;
  }
  if ((v51 & 1) != 0)
  {
    v75 = v29;
    v76 = ((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    v77 = 0;
    v78 = 0;
    v79 = (int)v232;
  }
  else
  {
    v77 = ((unint64_t)&v229[(int)v232 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    if ((((unsigned __int16)v236 ^ (unsigned __int16)v250) & 0xFF8) != 0)
      v78 = 0;
    else
      v78 = v32;
    v79 = (int)v232;
    if (v34)
      v83 = (int)v232 < 2;
    else
      v83 = 1;
    v84 = !v83 && (_DWORD)v29 == 0;
    v75 = v29;
    v76 = (unint64_t)&v60[v59];
    if (!v84)
      v78 = 0;
  }
  v6 = v33;
  if ((v79 & 1) != 0)
    v85 = v32;
  else
    v85 = v23;
  v86 = (v33 >> 2) & 1;
  v87 = v75;
  if ((((unsigned __int16)v236 ^ (unsigned __int16)v250) & 0xFF8) != 0 && (_DWORD)v75 == 0)
    v89 = v85;
  else
    v89 = 0;
  v90 = v233;
  if (v233 < 2)
    v91 = 1;
  else
    v91 = v86;
  v92 = v210 | v91;
  v212 = (v210 | v91) ^ 1;
  v93 = 1.0;
  if ((v6 & 2) != 0 && v92)
  {
    v212 = 0;
    if ((v6 & 4) != 0)
      v94 = 1;
    else
      v94 = v233;
    v93 = 1.0 / (double)(v94 * v79);
  }
  v95 = v89 + v79 * v32;
  if ((int)v216 > v233 || (int)v216 < 1)
    v97 = v233;
  else
    v97 = v216;
  v216 = (Mat *)v97;
  if ((int)v97 < 1)
  {
    v105 = 0;
    v29 = v87;
  }
  else
  {
    v98 = 0;
    v99 = v87 | (((((unsigned __int16)v236 ^ (unsigned __int16)v250) & 0xFF8) != 0) << 9);
    v100 = cv::dft(cv::_InputArray const&,cv::_OutputArray const&,int,int)::dft_tbl[v202];
    v231 = v95;
    v101 = v95;
    v102 = v78;
    do
    {
      v103 = (char *)(v238 + (_QWORD)v243 * (_QWORD)v98);
      if (v77)
        v104 = (char *)v77;
      else
        v104 = (char *)(v238 + (_QWORD)v243 * (_QWORD)v98);
      ((void (*)(uint64_t, char *, cv *, _QWORD, unsigned int *, int *, _QWORD, cv *, double, _QWORD, unint64_t, int))v100)(*(_QWORD *)v251 + (uint64_t)v254[0] * (_QWORD)v98, v104, v232, v228, v263, v229, *(_QWORD *)v227, v232, v93, 0, v76, v99);
      if (v104 != v103)
        memcpy(v103, &v104[v102], v101);
      v98 = (Mat *)((char *)v98 + 1);
    }
    while (v216 != v98);
    v105 = (int)v216;
    v6 = v205;
    v29 = v218;
    v23 = (uint64_t)v223;
    v90 = v233;
    v95 = v231;
  }
  v26 = v212;
  if (v105 < v90)
  {
    v106 = v95;
    v107 = v105;
    v108 = v90;
    do
      bzero((void *)(v238 + (_QWORD)v243 * v107++), v106);
    while (v108 != v107);
  }
  if (!v92)
  {
    v109 = (unsigned int *)*((_QWORD *)&v238 + 1);
    if (*((_QWORD *)&v238 + 1))
    {
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 + 1, v109));
    }
    v111 = *(unsigned int **)&v251[8];
    v32 = v207;
    if (*(_QWORD *)&v251[8])
    {
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
        cv::Mat::deallocate((cv::Mat *)&v250, v19);
    }
    *(_QWORD *)v251 = 0;
    memset(&v251[16], 0, 24);
    if ((uint64_t)v250 <= 0)
    {
      *(_QWORD *)&v251[8] = 0;
      LODWORD(v250) = (_DWORD)v236;
    }
    else
    {
      v114 = 0;
      v115 = v252;
      do
        v115->i32[v114++] = 0;
      while (v114 < SDWORD1(v250));
      *(_QWORD *)&v251[8] = 0;
      LODWORD(v250) = (_DWORD)v236;
      if (SDWORD1(v250) > 2)
        goto LABEL_263;
    }
    v116 = HIDWORD(v236);
    if (SHIDWORD(v236) <= 2)
      goto LABEL_262;
    goto LABEL_263;
  }
  v183 = v209;
  if ((_DWORD)v29)
    v183 = 0;
  if (v183 && ((unsigned __int16)v236 & 0xFF8) == 8)
  {
    v19 = v216;
    v182 = 1;
    goto LABEL_278;
  }
LABEL_279:
  v184 = (unsigned int *)*((_QWORD *)&v238 + 1);
  if (*((_QWORD *)&v238 + 1))
  {
    do
    {
      v185 = __ldaxr(v184);
      v186 = v185 - 1;
    }
    while (__stlxr(v186, v184));
    if (!v186)
      cv::Mat::deallocate((cv::Mat *)&v236, v19);
  }
  *(_QWORD *)&v238 = 0;
  *(_QWORD *)&v240 = 0;
  v239 = 0uLL;
  if (SHIDWORD(v236) >= 1)
  {
    v187 = 0;
    v188 = v241;
    do
      *(_DWORD *)(v188 + 4 * v187++) = 0;
    while (v187 < SHIDWORD(v236));
  }
  *((_QWORD *)&v238 + 1) = 0;
  if (v242 != (cv *)&v243)
    cv::fastFree((void **)v242, v19);
  v189 = *(unsigned int **)&v251[8];
  if (*(_QWORD *)&v251[8])
  {
    do
    {
      v190 = __ldaxr(v189);
      v191 = v190 - 1;
    }
    while (__stlxr(v191, v189));
    if (!v191)
      cv::Mat::deallocate((cv::Mat *)&v250, v19);
  }
  *(_QWORD *)v251 = 0;
  memset(&v251[16], 0, 24);
  if (SDWORD1(v250) >= 1)
  {
    v192 = 0;
    v193 = v252;
    do
      v193->i32[v192++] = 0;
    while (v192 < SDWORD1(v250));
  }
  *(_QWORD *)&v251[8] = 0;
  if (v253 != (cv *)v254)
    cv::fastFree((void **)v253, v19);
  v194 = (unsigned int *)v257;
  if ((_QWORD)v257)
  {
    do
    {
      v195 = __ldaxr(v194);
      v196 = v195 - 1;
    }
    while (__stlxr(v196, v194));
    if (!v196)
      cv::Mat::deallocate((cv::Mat *)&v255, v19);
  }
  v256 = 0;
  v258 = 0uLL;
  *((_QWORD *)&v257 + 1) = 0;
  if (SDWORD1(v255) >= 1)
  {
    v197 = 0;
    v198 = v260;
    do
      *(_DWORD *)(v198 + 4 * v197++) = 0;
    while (v197 < SDWORD1(v255));
  }
  *(_QWORD *)&v257 = 0;
  if (v261 != (cv *)&v262)
    cv::fastFree((void **)v261, v19);
  result = v264;
  if (v264 != v266 && v264 != 0)
    return (_QWORD *)MEMORY[0x2207351A4]();
  return result;
}

void sub_219E2783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;
  void *v74;
  void *v75;

  cv::Exception::~Exception((cv::Exception *)&STACK[0x218]);
  if (a73 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a60 < 0)
    operator delete(a55);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x290], v74);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x2F0], v75);
  if (STACK[0x3E0] != a24 && STACK[0x3E0] != 0)
    MEMORY[0x2207351A4]();
  _Unwind_Resume(a1);
}

uint64_t cv::DFT_32f(uint64_t a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, __int16 a12)
{
  return cv::DFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float *cv::RealDFT_32f(float *a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, unsigned int a12)
{
  return cv::RealDFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float32x2_t *cv::CCSIDFT_32f(float32x2_t *a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, __int16 a12)
{
  return cv::CCSIDFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float64_t cv::DFT_64f(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, uint64_t a10, float64x2_t *a11, __int16 a12)
{
  return cv::DFT<double>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

void cv::RealDFT_64f(double *a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float64x2_t *a11, unsigned int a12)
{
  cv::RealDFT<double>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

void cv::CCSIDFT_64f(double *a1, double *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, uint64_t a10, float64x2_t *a11, __int16 a12)
{
  cv::CCSIDFT<double>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

uint64_t cv::DFTFactorize(cv *this, unsigned int *a2, int *a3)
{
  signed int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;

  v3 = (int)this;
  if ((int)this <= 5)
  {
    *a2 = this;
    return 1;
  }
  v5 = ((_DWORD)this - 1) ^ this;
  if (v5 == 1)
  {
    result = 0;
LABEL_8:
    v7 = 3;
    while (1)
    {
      if (v3 / v7 * v7 == v3)
      {
        a2[(int)result] = v7;
        result = (result + 1);
        v3 /= v7;
      }
      else
      {
        v7 += 2;
        if (v7 * v7 > v3)
        {
          a2[(int)result] = v3;
          result = (result + 1);
          goto LABEL_15;
        }
      }
      if (v3 <= 1)
        goto LABEL_15;
    }
  }
  v6 = (v5 + 1) >> 1;
  *a2 = v6;
  if (v6 == (_DWORD)this)
  {
    result = 1;
  }
  else
  {
    v3 = this / v6;
    result = 1;
    if (v3 >= 2)
      goto LABEL_8;
  }
LABEL_15:
  v8 = !(*(_BYTE *)a2 & 1);
  v9 = v8 + result + (v8 + (int)result < 0);
  if (v8 < (v8 + (int)result) / 2)
  {
    v10 = (*a2 & 1) == 0;
    v11 = ~v10 + result + v8;
    v12 = &a2[v10];
    v13 = (v9 >> 1) - v10;
    do
    {
      v14 = *v12;
      *v12++ = a2[v11];
      a2[v11--] = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

double cv::DFTInit(cv *this, int a2, signed int *a3, int *a4, int *a5, _OWORD *a6, void *a7, double result)
{
  int v9;
  int v11;
  uint64_t v12;
  int v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  char v40;
  char *v41;
  unsigned int v42;
  int v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int *v55;
  int *v56;
  int *v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  double v72;
  double v73;
  long double v74;
  uint64_t v75;
  float *v76;
  float *v77;
  double v78;
  double v79;
  float v80;
  float v81;
  long double v82;
  int v83;
  _DWORD v84[1];
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  _QWORD v90[18];

  v9 = (int)a5;
  v11 = (int)this;
  v90[16] = *MEMORY[0x24BDAC8D0];
  if ((int)this > 5)
  {
    if (a2 >= 34)
      cv::DFTInit();
    v15 = (int)a7;
    v83 = (int)a5;
    v17 = *a3;
    v84[a2] = 1;
    *(&v88 + a2) = 0;
    if (a2 >= 1)
    {
      v18 = a2;
      bzero(&v88, 4 * a2);
      v19 = v84[a2];
      v20 = 4 * a2 - 4;
      v21 = (_DWORD *)((char *)v84 + v20);
      v22 = (signed int *)((char *)a3 + v20);
      do
      {
        v23 = *v22--;
        v19 *= v23;
        *v21-- = v19;
        --v18;
      }
      while (v18);
    }
    v24 = a4;
    if (v15)
    {
      if ((_DWORD)v17 == a3[a2 - 1])
        v24 = a4;
      else
        v24 = (int *)a6;
    }
    if ((v17 & 1) != 0)
    {
      v30 = 0;
      *v24 = 0;
      v31 = v85;
      v32 = 1;
      v9 = v83;
      do
      {
        v30 += v31;
        if (++v88 >= *a3)
        {
          v33 = &v89;
          v34 = a3 + 1;
          v35 = &v86;
          do
          {
            v30 = *v35 + v30 - *(v35 - 2);
            v36 = *v33 + 1;
            *(v33 - 1) = 0;
            *v33 = v36;
            v37 = *v34++;
            ++v35;
            ++v33;
          }
          while (v36 >= v37);
        }
        v24[v32++] = v30;
      }
      while (v32 != v11);
      v13 = 0;
    }
    else
    {
      v25 = 0;
      v26 = v85;
      v27 = (v85 * (int)v17) >> 1;
      do
        v28 = 1 << v25++;
      while (v28 < v17);
      v13 = v25 - 1;
      if ((int)v17 > 2)
      {
        v38 = (v85 * (int)v17) >> 2;
        if (v17 > 0x100)
        {
          v45 = 0;
          v46 = 0;
          v47 = 35 - v25;
          do
          {
            v48 = (((cv::bitrevTab[v45] << 24) | (cv::bitrevTab[(v46 >> 10)] << 16) | (cv::bitrevTab[(v46 >> 18)] << 8) | cv::bitrevTab[v46 >> 26]) >> v47)
                * v26;
            v49 = (unsigned int *)&v24[v46];
            *v49 = v48;
            v49[1] = v48 + v27;
            v49[2] = v48 + v38;
            v49[3] = v48 + v27 + v38;
            v46 += 4;
            ++v45;
          }
          while (v46 < v17);
        }
        else if (v17 >= 4)
        {
          v39 = 0;
          v40 = 11 - v25;
          v41 = cv::bitrevTab;
          do
          {
            v42 = *v41++;
            v43 = (v42 >> v40) * v26;
            v44 = &v24[v39];
            *v44 = v43;
            v44[1] = v43 + v27;
            v44[2] = v43 + v38;
            v44[3] = v43 + v27 + v38;
            v39 += 4;
          }
          while (v39 <= (v17 - 4));
        }
      }
      else
      {
        *v24 = 0;
        v24[1] = v27;
      }
      ++v89;
      if (a2 >= 2 && (int)v17 < v11)
      {
        v50 = v86;
        v51 = (int)v17;
        v52 = (int)v17;
        v53 = v86;
        while (1)
        {
          if ((int)v17 >= 1)
          {
            v54 = v17;
            v55 = v24;
            do
            {
              v55[v51] = *v55 + v53;
              ++v55;
              --v54;
            }
            while (v54);
          }
          v52 += (int)v17;
          if (v52 >= v11)
            break;
          v53 += v50;
          if (++v89 >= a3[1])
          {
            v56 = (int *)v90;
            v57 = a3 + 2;
            v58 = &v87;
            do
            {
              v53 = *v58 + v53 - *(v58 - 2);
              v59 = *v56 + 1;
              *(v56 - 1) = 0;
              *v56 = v59;
              v60 = *v57++;
              ++v58;
              ++v56;
            }
            while (v59 >= v60);
          }
          v51 += (int)v17;
        }
      }
      v9 = v83;
    }
    if (v24 != a4)
    {
      *a4 = 0;
      v61 = v11 & 1;
      do
      {
        v62 = &v24[v61];
        v64 = *v62;
        v63 = v62[1];
        a4[v64] = v61;
        a4[v63] = v61 + 1;
        v61 += 2;
      }
      while (v61 < v11);
    }
    goto LABEL_51;
  }
  *a4 = 0;
  v12 = ((_DWORD)this - 1);
  a4[(int)v12] = v12;
  if ((_DWORD)this == 4)
  {
    *(_QWORD *)(a4 + 1) = 0x100000002;
    v13 = 2;
LABEL_51:
    if ((v11 & (v11 - 1)) != 0)
    {
      result = sin(-6.28318531 / (double)v11);
      v66 = sqrt(1.0 - result * result);
    }
    else
    {
      v65 = (double *)((char *)&cv::DFTTab + 16 * v13);
      v66 = *v65;
      result = -v65[1];
    }
    v67 = v11 + 2;
    if (v11 >= -1)
      v67 = v11 + 1;
    LODWORD(v68) = v67 >> 1;
    if (v9 == 16)
    {
      *a6 = xmmword_219E9D000;
      if ((v11 & 1) == 0)
        a6[(int)v68] = xmmword_219E9CFB0;
      if (v11 >= 3)
      {
        if ((int)v68 <= 2)
          v68 = 2;
        else
          v68 = v68;
        v69 = v68 - 1;
        v70 = (double *)&a6[v11 - 1] + 1;
        v71 = (double *)a6 + 3;
        v72 = v66;
        v73 = result;
        do
        {
          *(v71 - 1) = v72;
          *v71 = v73;
          *(v70 - 1) = v72;
          *v70 = -v73;
          v74 = -(v73 * result);
          v73 = v66 * v73 + v72 * result;
          v72 = v74 + v72 * v66;
          v70 -= 2;
          v71 += 2;
          --v69;
        }
        while (v69);
      }
    }
    else
    {
      if (v9 != 8)
        cv::DFTInit();
      *(_QWORD *)a6 = 1065353216;
      if ((v11 & 1) == 0)
        *((_QWORD *)a6 + (int)v68) = 3212836864;
      if (v11 >= 3)
      {
        if ((int)v68 <= 2)
          v68 = 2;
        else
          v68 = v68;
        v75 = v68 - 1;
        v76 = (float *)a6 + 2 * v11 - 1;
        v77 = (float *)a6 + 3;
        v78 = v66;
        v79 = result;
        do
        {
          v80 = v78;
          v81 = v79;
          *(v77 - 1) = v80;
          *v77 = v81;
          *(v76 - 1) = v80;
          *v76 = -v81;
          v82 = -(v79 * result);
          v79 = v66 * v79 + v78 * result;
          v78 = v82 + v78 * v66;
          v76 -= 2;
          v77 += 2;
          --v75;
        }
        while (v75);
      }
    }
    return result;
  }
  if ((int)this >= 3)
  {
    v29 = 1;
    do
    {
      a4[v29] = v29;
      ++v29;
    }
    while (v12 != v29);
    if ((_DWORD)this == 5)
    {
      if ((_DWORD)a5 == 16)
      {
        result = 1.0;
        *a6 = xmmword_219E9D000;
      }
      else
      {
        *(_QWORD *)&result = 1065353216;
        *(_QWORD *)a6 = 1065353216;
      }
    }
  }
  return result;
}

uint64_t cv::complementComplexOutput(uint64_t this, Mat *a2, int a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double v31;

  v3 = *(_DWORD *)(this + 12);
  v4 = *(_QWORD *)(this + 16);
  v5 = *(_QWORD *)(this + 80);
  if (((0x88442211uLL >> (4 * (*(_DWORD *)this & 7u))) & 0xF) == 4)
  {
    if ((int)a2 >= 1)
    {
      v6 = 0;
      v7 = v5 >> 2;
      v8 = v3 + 2;
      if (v3 >= -1)
        v8 = v3 + 1;
      v9 = v8 >> 1;
      if (v9 <= 2)
        v10 = 2;
      else
        v10 = v9;
      v11 = v10 - 1;
      do
      {
        v13 = 2 * v6 == a2 || v6 == 0 || a3 == 1;
        v14 = v4 + 4 * v7 * v6;
        v15 = v4 + 4 * v7 * (a2 - v6);
        if (v13)
          v15 = v4 + 4 * v7 * v6;
        if (v3 >= 3)
        {
          v16 = (float *)(v15 + 12);
          v17 = v11;
          LODWORD(this) = 2 * v3 - 1;
          do
          {
            *(float *)(v14 + 4 * ((int)this - 1)) = *(v16 - 1);
            v18 = *v16;
            v16 += 2;
            *(float *)(v14 + 4 * (int)this) = -v18;
            this = (this - 2);
            --v17;
          }
          while (v17);
        }
        ++v6;
      }
      while (v6 != a2);
    }
  }
  else if ((int)a2 >= 1)
  {
    v19 = 0;
    v20 = v5 >> 3;
    v21 = v3 + 2;
    if (v3 >= -1)
      v21 = v3 + 1;
    v22 = v21 >> 1;
    if (v22 <= 2)
      v23 = 2;
    else
      v23 = v22;
    v24 = v23 - 1;
    do
    {
      v26 = 2 * v19 == a2 || v19 == 0 || a3 == 1;
      v27 = v4 + 8 * v20 * v19;
      v28 = v4 + 8 * v20 * (a2 - v19);
      if (v26)
        v28 = v4 + 8 * v20 * v19;
      if (v3 >= 3)
      {
        v29 = (double *)(v28 + 24);
        v30 = v24;
        LODWORD(this) = 2 * v3 - 1;
        do
        {
          *(double *)(v27 + 8 * ((int)this - 1)) = *(v29 - 1);
          v31 = *v29;
          v29 += 2;
          *(double *)(v27 + 8 * (int)this) = -v31;
          this = (this - 2);
          --v30;
        }
        while (v30);
      }
      ++v19;
    }
    while (v19 != a2);
  }
  return this;
}

_DWORD *cv::CopyColumn(_DWORD *this, unint64_t a2, _DWORD *a3, unint64_t a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2 >> 2;
  v7 = a4 >> 2;
  if (a6 == 4)
  {
    if (a5 >= 1)
    {
      v12 = 4 * v7;
      v13 = 4 * v6;
      do
      {
        *a3 = *this;
        a3 = (_DWORD *)((char *)a3 + v12);
        this = (_DWORD *)((char *)this + v13);
        --a5;
      }
      while (a5);
    }
  }
  else if (a6 == 8)
  {
    if (a5 >= 1)
    {
      v14 = 4 * v7;
      v15 = 4 * v6;
      do
      {
        *(_QWORD *)a3 = *(_QWORD *)this;
        a3 = (_DWORD *)((char *)a3 + v14);
        this = (_DWORD *)((char *)this + v15);
        --a5;
      }
      while (a5);
    }
  }
  else if (a6 == 16 && a5 >= 1)
  {
    v8 = a3 + 2;
    v9 = 4 * v7;
    v10 = this + 2;
    v11 = 4 * v6;
    do
    {
      *(v8 - 1) = *(v10 - 1);
      *v8 = *v10;
      v8 = (_QWORD *)((char *)v8 + v9);
      v10 = (_QWORD *)((char *)v10 + v11);
      --a5;
    }
    while (a5);
  }
  return this;
}

uint64_t cv::ExpandCCS(uint64_t this, unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  float *v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  double *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;

  v3 = (int)a2;
  v4 = (int)a2 + 1;
  if (a3 == 4)
  {
    if ((int)a2 >= 3)
    {
      v5 = 2 * (_DWORD)a2 - 1;
      v6 = (float *)(this + 8);
      v7 = (v4 >> 1) - 1;
      do
      {
        *(float *)(this + 4 * (v5 - 1)) = *(v6 - 1);
        v8 = *v6;
        v6 += 2;
        *(float *)(this + 4 * v5) = -v8;
        v5 -= 2;
        --v7;
      }
      while (v7);
    }
    if ((a2 & 1) == 0)
    {
      LODWORD(a2) = (_DWORD)a2 - 1;
      *(_DWORD *)(this + 4 * v3) = *(_DWORD *)(this + 4 * (v3 - 1));
      *(_DWORD *)(this + 4 * v4) = 0;
    }
    if ((int)a2 >= 2)
    {
      v9 = a2;
      do
      {
        *(_DWORD *)(this + 4 * v9) = *(_DWORD *)(this + 4 * (v9 - 1));
        v10 = v9-- > 2;
      }
      while (v10);
    }
    *(_DWORD *)(this + 4) = 0;
  }
  else
  {
    if ((int)a2 >= 3)
    {
      v11 = 2 * (_DWORD)a2 - 1;
      v12 = (double *)(this + 16);
      v13 = (v4 >> 1) - 1;
      do
      {
        *(double *)(this + 8 * (v11 - 1)) = *(v12 - 1);
        v14 = *v12;
        v12 += 2;
        *(double *)(this + 8 * v11) = -v14;
        v11 -= 2;
        --v13;
      }
      while (v13);
    }
    if ((a2 & 1) == 0)
    {
      LODWORD(a2) = (_DWORD)a2 - 1;
      *(_QWORD *)(this + 8 * v3) = *(_QWORD *)(this + 8 * (v3 - 1));
      *(_QWORD *)(this + 8 * (int)v4) = 0;
    }
    if ((int)a2 >= 2)
    {
      v15 = a2;
      do
      {
        *(_QWORD *)(this + 8 * v15) = *(_QWORD *)(this + 8 * (v15 - 1));
        v10 = v15-- > 2;
      }
      while (v10);
    }
    *(_QWORD *)(this + 8) = 0;
  }
  return this;
}

void cv::mulSpectrums(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, char a5)
{
  char v6;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  const cv::Exception *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  const cv::Exception *v22;
  cv *v23;
  cv *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _BOOL4 v39;
  _BOOL8 v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float *v50;
  float *v51;
  _DWORD *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float *v59;
  float *v60;
  float v61;
  float v62;
  float *v63;
  float *v64;
  float v65;
  float *v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  _DWORD *v102;
  unint64_t v103;
  unint64_t v104;
  double *v105;
  double *v106;
  double *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  float *v112;
  float *v113;
  double v114;
  double v115;
  float *v116;
  float *v117;
  double v118;
  float *v119;
  float *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double *v142;
  uint64_t v143;
  unint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double *v149;
  unint64_t v150;
  unint64_t v151;
  float *v152;
  float *v153;
  _DWORD *v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  float *v161;
  float *v162;
  float v163;
  float v164;
  float *v165;
  float *v166;
  float v167;
  float *v168;
  float *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  float64x2_t v189;
  float64x2_t v190;
  uint64_t v191;
  unint64_t v192;
  float64x2_t v193;
  float64x2_t v194;
  unint64_t v195;
  unint64_t v196;
  double *v197;
  double *v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v203;
  float *v204;
  float *v205;
  double v206;
  double v207;
  float *v208;
  float *v209;
  double v210;
  float *v211;
  float *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  double v223;
  double v224;
  double v225;
  double v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double *v234;
  uint64_t v235;
  unint64_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double *v241;
  unint64_t v242;
  float *v243;
  float *v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  float *v251;
  float *v252;
  float v253;
  float v254;
  float *v255;
  float *v256;
  float v257;
  unint64_t v258;
  float *v259;
  float *v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  int v267;
  uint64_t v268;
  unint64_t v269;
  _DWORD *v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  uint64_t v277;
  unint64_t v278;
  _DWORD *v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  unint64_t v286;
  float *v287;
  double *v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  float *v294;
  double *v295;
  double v296;
  double v297;
  float *v298;
  double *v299;
  double v300;
  unint64_t v301;
  double *v302;
  double *v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  int v309;
  uint64_t v310;
  unint64_t v311;
  double *v312;
  double v313;
  double v314;
  double v315;
  double v316;
  uint64_t v317;
  unint64_t v318;
  double *v319;
  double v320;
  double v321;
  double v322;
  double v323;
  unint64_t v324;
  float *v325;
  float *v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  float *v333;
  float *v334;
  float v335;
  float v336;
  float *v337;
  float *v338;
  float v339;
  unint64_t v340;
  float *v341;
  float *v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  int v349;
  float *v350;
  uint64_t v351;
  float32x2_t *v352;
  unint64_t v353;
  float *v354;
  float64x2_t v355;
  float32x2_t v356;
  float64x2_t v357;
  uint64_t v358;
  float32x2_t *v359;
  unint64_t v360;
  float *v361;
  float64x2_t v362;
  float32x2_t v363;
  float64x2_t v364;
  unint64_t v365;
  float *v366;
  double *v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  float *v373;
  double *v374;
  double v375;
  double v376;
  float *v377;
  double *v378;
  double v379;
  unint64_t v380;
  double *v381;
  double *v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  int v388;
  uint64_t v389;
  unint64_t v390;
  double *v391;
  double v392;
  double v393;
  double v394;
  double v395;
  uint64_t v396;
  unint64_t v397;
  double *v398;
  double v399;
  double v400;
  double v401;
  double v402;
  unsigned int *v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int *v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  _DWORD *v412;
  unsigned int *v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  _DWORD *v417;
  _OWORD v418[4];
  char *v419;
  cv *v420;
  _QWORD v421[2];
  void *__p[2];
  _QWORD v423[2];
  float *v424;
  unsigned int *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  cv *v430;
  uint64_t v431;
  _QWORD v432[2];
  float *v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  _DWORD *v437;
  cv *v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  float *v443;
  unsigned int *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _DWORD *v448;
  void **v449;
  uint64_t v450;
  _QWORD v451[2];

  v6 = (char)a4;
  (**(void (***)(uint64_t *__return_ptr, cv *, uint64_t))this)(&v440, this, 0xFFFFFFFFLL);
  (**(void (***)(_QWORD *__return_ptr, const cv::_InputArray *, uint64_t))a2)(v432, a2, 0xFFFFFFFFLL);
  v9 = v440;
  v11 = (int)v441;
  v10 = (int)v442;
  if ((v440 & 0xFFF) != (v432[0] & 0xFFF) || (v448[1] == v437[1] ? (v12 = *v448 == *v437) : (v12 = 0), !v12))
  {
    std::string::basic_string[abi:ne180100]<0>(v418, "type == srcB.type() && srcA.size() == srcB.size()");
    std::string::basic_string[abi:ne180100]<0>(v451, "mulSpectrums");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v423, 4294967081, v418, v451, __p, 2020);
    cv::error((cv *)v423, v13);
  }
  if (((unsigned __int16)v440 & 0xFFFu) > 0xE || ((1 << v440) & 0x6060) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v418, "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2");
    std::string::basic_string[abi:ne180100]<0>(v451, "mulSpectrums");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v423, 4294967081, v418, v451, __p, 2021);
    cv::error((cv *)v423, v22);
  }
  (*(void (**)(const cv::_InputArray *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 136))(a3, v441, v442, v440 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, const cv::_InputArray *, uint64_t))a3)(v423, a3, 0xFFFFFFFFLL);
  if (v424 == v433)
  {
    v419 = (char *)v418 + 8;
    v420 = (cv *)v421;
    v421[0] = 0;
    v421[1] = 0;
    LODWORD(v418[0]) = 1124007936;
    memset((char *)v418 + 4, 0, 48);
    v418[3] = 0u;
    cv::_OutputArray::_OutputArray((uint64_t)v451, (cv::Mat *)v418);
    cv::Mat::copyTo((cv::Mat *)v432, (const cv::_OutputArray *)v451);
    v15 = (unsigned int *)*((_QWORD *)&v418[1] + 1);
    if (*((_QWORD *)&v418[1] + 1))
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    v17 = (unsigned int *)v434;
    if ((_QWORD)v434)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        cv::Mat::deallocate((cv::Mat *)v432, v14);
    }
    v433 = 0;
    *((_QWORD *)&v434 + 1) = 0;
    v435 = 0uLL;
    if (v432[0] <= 0)
    {
      *(_QWORD *)&v434 = 0;
      LODWORD(v432[0]) = v418[0];
    }
    else
    {
      v20 = 0;
      v21 = v437;
      do
        v21[v20++] = 0;
      while (v20 < SHIDWORD(v432[0]));
      *(_QWORD *)&v434 = 0;
      LODWORD(v432[0]) = v418[0];
      if (SHIDWORD(v432[0]) > 2)
        goto LABEL_25;
    }
    if (SDWORD1(v418[0]) <= 2)
    {
      HIDWORD(v432[0]) = DWORD1(v418[0]);
      v432[1] = *((_QWORD *)&v418[0] + 1);
      v23 = v420;
      v24 = v438;
      *(_QWORD *)v438 = *(_QWORD *)v420;
      *((_QWORD *)v24 + 1) = *((_QWORD *)v23 + 1);
      goto LABEL_26;
    }
LABEL_25:
    cv::Mat::copySize((cv::Mat *)v432, (const cv::Mat *)v418);
LABEL_26:
    v435 = *(_OWORD *)((char *)&v418[2] + 8);
    v434 = *(_OWORD *)((char *)&v418[1] + 8);
    v433 = *(float **)&v418[1];
    v436 = *((_QWORD *)&v418[3] + 1);
    v25 = (unsigned int *)*((_QWORD *)&v418[1] + 1);
    if (*((_QWORD *)&v418[1] + 1))
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        cv::Mat::deallocate((cv::Mat *)v418, v14);
    }
    *(_QWORD *)&v418[1] = 0;
    memset(&v418[2], 0, 24);
    if (SDWORD1(v418[0]) >= 1)
    {
      v28 = 0;
      v29 = v419;
      do
        *(_DWORD *)&v29[4 * v28++] = 0;
      while (v28 < SDWORD1(v418[0]));
    }
    *((_QWORD *)&v418[1] + 1) = 0;
    if (v420 != (cv *)v421)
      cv::fastFree((void **)v420, v14);
  }
  v30 = (v9 >> 3) & 0x1FF;
  v31 = 1;
  if ((v6 & 4) == 0 && (_DWORD)v11 != 1)
  {
    if ((_DWORD)v10 == 1 && (v440 & 0x4000) != 0 && (v432[0] & 0x4000) != 0)
      v31 = (BYTE1(v423[0]) >> 6) & 1;
    else
      v31 = 0;
  }
  v32 = v31 ^ 1 | ((v6 & 4) >> 2);
  v33 = v11 - 1;
  v34 = v32 == 0;
  if (v32)
    v35 = v11;
  else
    v35 = 1;
  if (!v34)
    v33 = 0;
  v36 = v33 + v10;
  v37 = (_DWORD)v30 == 0;
  if ((_DWORD)v30)
    v38 = 1;
  else
    v38 = v31;
  v39 = (v36 & 1) == 0;
  v40 = (v36 & 1) == 0 && (_DWORD)v30 == 0;
  v41 = v36 * (v30 + 1) - v40;
  v42 = v443;
  v43 = v450;
  v44 = v433;
  v45 = v439;
  v46 = (uint64_t)v424;
  v47 = v431;
  if ((v9 & 7) == 5)
  {
    if ((a5 & 1) != 0)
    {
      if (v443 != v424)
      {
        if ((v38 & 1) == 0)
        {
          *v424 = *v443 * *v433;
          v48 = v35 - 2;
          if (v35 == 2)
            goto LABEL_60;
          v49 = 1;
          v50 = v42;
          v51 = v44;
          v52 = (_DWORD *)v46;
          do
          {
            v53 = *(float *)((char *)v50 + v43);
            v50 = (float *)((char *)v50 + 2 * v43);
            v54 = *v50;
            v55 = *(float *)((char *)v51 + v45);
            v51 = (float *)((char *)v51 + 2 * v45);
            v56 = *v51;
            v57 = v54 * v56 + v53 * v55;
            v58 = v54 * v55;
            *(float *)&v55 = v57;
            *(_DWORD *)((char *)v52 + v47) = LODWORD(v55);
            *(float *)&v53 = v58 - v53 * v56;
            v52 = (_DWORD *)((char *)v52 + 2 * v47);
            *v52 = LODWORD(v53);
            v49 += 2;
          }
          while (v49 <= v48);
          if ((v35 & 1) == 0)
LABEL_60:
            *(float *)(v46 + v47 * (v35 - 1)) = *(float *)((char *)v42 + v43 * (v35 - 1))
                                              * *(float *)((char *)v44 + v45 * (v35 - 1));
          if ((v36 & 1) == 0)
          {
            v59 = &v42[v36];
            v61 = *(v59 - 1);
            v60 = v59 - 1;
            v62 = v61;
            v63 = &v44[v36];
            v65 = *(v63 - 1);
            v64 = v63 - 1;
            v66 = (float *)(v46 + 4 * v36);
            *(v66 - 1) = v62 * v65;
            v67 = v66 - 1;
            if (v35 != 2)
            {
              v68 = 2 * v47;
              v69 = v47 + v46 - 4;
              v70 = (uint64_t)v44 + v45 - 4;
              v71 = v46 + 2 * v47 - 4;
              v72 = (uint64_t)v44 + 2 * v45 - 4;
              v73 = (uint64_t)v42 + 2 * v43 - 4;
              v74 = 2 * v45;
              v75 = 2 * v43;
              v76 = (uint64_t)v42 + v43 - 4;
              v77 = 1;
              do
              {
                v78 = *(float *)(v76 + 4 * v36);
                v79 = *(float *)(v73 + 4 * v36);
                v80 = *(float *)(v70 + 4 * v36);
                v81 = *(float *)(v72 + 4 * v36);
                v82 = v79 * v81 + v78 * v80;
                v83 = v79 * v80;
                *(float *)&v80 = v82;
                *(_DWORD *)(v69 + 4 * v36) = LODWORD(v80);
                *(float *)&v78 = v83 - v78 * v81;
                *(_DWORD *)(v71 + 4 * v36) = LODWORD(v78);
                v77 += 2;
                v69 += v68;
                v70 += v74;
                v71 += v68;
                v72 += v74;
                v73 += v75;
                v76 += v75;
              }
              while (v77 <= v48);
              if ((v35 & 1) != 0)
              {
                v39 = 1;
LABEL_68:
                if ((_DWORD)v30)
                  v84 = 0;
                else
                  v84 = v31;
                do
                {
                  if (v84)
                  {
                    *(float *)v46 = *v42 * *v44;
                    if (v41 > v37)
                    {
                      v85 = 4 * v37 + 4;
                      v86 = v37;
                      do
                      {
                        v87 = *(float *)((char *)v42 + v85 - 4);
                        v88 = *(float *)((char *)v42 + v85);
                        v89 = *(float *)((char *)v44 + v85 - 4);
                        v90 = *(float *)((char *)v44 + v85);
                        v91 = v88 * v90 + v87 * v89;
                        v92 = v88 * v89 - v87 * v90;
                        *(float *)&v88 = v91;
                        v93 = (_DWORD *)(v46 + v85);
                        *(float *)&v92 = v92;
                        *(v93 - 1) = LODWORD(v88);
                        *v93 = LODWORD(v92);
                        v86 += 2;
                        v85 += 8;
                      }
                      while (v86 < v41);
                    }
                    if ((v84 & v39) != 0)
                      *(float *)(v46 + 4 * v41) = v42[v41] * v44[v41];
                  }
                  else if (v41 > v37)
                  {
                    v94 = 4 * v37 + 4;
                    v95 = v37;
                    do
                    {
                      v96 = *(float *)((char *)v42 + v94 - 4);
                      v97 = *(float *)((char *)v42 + v94);
                      v98 = *(float *)((char *)v44 + v94 - 4);
                      v99 = *(float *)((char *)v44 + v94);
                      v100 = v97 * v99 + v96 * v98;
                      v101 = v97 * v98 - v96 * v99;
                      *(float *)&v97 = v100;
                      v102 = (_DWORD *)(v46 + v94);
                      *(float *)&v101 = v101;
                      *(v102 - 1) = LODWORD(v97);
                      *v102 = LODWORD(v101);
                      v95 += 2;
                      v94 += 8;
                    }
                    while (v95 < v41);
                  }
                  v42 = (float *)((char *)v42 + v43);
                  v44 = (float *)((char *)v44 + v45);
                  v46 += v47;
                  --v35;
                }
                while (v35);
                goto LABEL_278;
              }
            }
            *(float *)((char *)v67 + v47 * (v35 - 1)) = *(float *)((char *)v60 + v43 * (v35 - 1))
                                                      * *(float *)((char *)v64 + v45 * (v35 - 1));
          }
        }
        if (!v35)
          goto LABEL_278;
        goto LABEL_68;
      }
      if ((v38 & 1) == 0)
      {
        *v443 = *v443 * *v433;
        v46 = v35 - 2;
        if (v35 == 2)
          goto LABEL_172;
        v242 = 1;
        v243 = v42;
        v244 = v44;
        do
        {
          v245 = *(float *)((char *)v243 + v47);
          v246 = *(float *)((char *)v243 + 2 * v47);
          v247 = *(float *)((char *)v244 + v45);
          v244 = (float *)((char *)v244 + 2 * v45);
          v248 = *v244;
          v249 = v246 * v248 + v245 * v247;
          v250 = v246 * v247;
          *(float *)&v247 = v249;
          *(float *)((char *)v243 + v47) = *(float *)&v247;
          *(float *)&v245 = v250 - v245 * v248;
          *(float *)((char *)v243 + 2 * v47) = *(float *)&v245;
          v242 += 2;
          v243 = (float *)((char *)v243 + 2 * v47);
        }
        while (v242 <= v46);
        if ((v35 & 1) == 0)
LABEL_172:
          *(float *)((char *)v42 + v47 * (v35 - 1)) = *(float *)((char *)v42 + v47 * (v35 - 1))
                                                    * *(float *)((char *)v44 + v45 * (v35 - 1));
        if ((v36 & 1) == 0)
        {
          v251 = &v44[v36];
          v253 = *(v251 - 1);
          v252 = v251 - 1;
          v254 = v253;
          v255 = &v42[v36];
          v257 = *(v255 - 1);
          v256 = v255 - 1;
          *v256 = v257 * v254;
          if (v35 != 2)
          {
            v258 = 1;
            v259 = v256;
            v260 = v252;
            do
            {
              v261 = *(float *)((char *)v259 + v47);
              v262 = *(float *)((char *)v259 + 2 * v47);
              v263 = *(float *)((char *)v260 + v45);
              v260 = (float *)((char *)v260 + 2 * v45);
              v264 = *v260;
              v265 = v262 * v264 + v261 * v263;
              v266 = v262 * v263;
              *(float *)&v263 = v265;
              *(float *)((char *)v259 + v47) = *(float *)&v263;
              *(float *)&v261 = v266 - v261 * v264;
              *(float *)((char *)v259 + 2 * v47) = *(float *)&v261;
              v258 += 2;
              v259 = (float *)((char *)v259 + 2 * v47);
            }
            while (v258 <= v46);
            if ((v35 & 1) != 0)
            {
              v39 = 1;
LABEL_180:
              if ((_DWORD)v30)
                v267 = 0;
              else
                v267 = v31;
              v46 = (uint64_t)v42;
              do
              {
                if (v267)
                {
                  *(float *)v46 = *v42 * *v44;
                  if (v41 > v37)
                  {
                    v268 = 4 * v37 + 4;
                    v269 = v37;
                    do
                    {
                      v270 = (_DWORD *)(v46 + v268);
                      v271 = *(float *)(v46 + v268 - 4);
                      v272 = *(float *)(v46 + v268);
                      v273 = *(float *)((char *)v44 + v268 - 4);
                      v274 = *(float *)((char *)v44 + v268);
                      v275 = v272 * v274 + v271 * v273;
                      v276 = v272 * v273 - v271 * v274;
                      *(float *)&v272 = v275;
                      *(float *)&v276 = v276;
                      *(v270 - 1) = LODWORD(v272);
                      *v270 = LODWORD(v276);
                      v269 += 2;
                      v268 += 8;
                    }
                    while (v269 < v41);
                  }
                  if ((v267 & v39) != 0)
                    *(float *)(v46 + 4 * v41) = v42[v41] * v44[v41];
                }
                else if (v41 > v37)
                {
                  v277 = 4 * v37 + 4;
                  v278 = v37;
                  do
                  {
                    v279 = (_DWORD *)(v46 + v277);
                    v280 = *(float *)(v46 + v277 - 4);
                    v281 = *(float *)(v46 + v277);
                    v282 = *(float *)((char *)v44 + v277 - 4);
                    v283 = *(float *)((char *)v44 + v277);
                    v284 = v281 * v283 + v280 * v282;
                    v285 = v281 * v282 - v280 * v283;
                    *(float *)&v281 = v284;
                    *(float *)&v285 = v285;
                    *(v279 - 1) = LODWORD(v281);
                    *v279 = LODWORD(v285);
                    v278 += 2;
                    v277 += 8;
                  }
                  while (v278 < v41);
                }
                v42 = (float *)((char *)v42 + v43);
                v44 = (float *)((char *)v44 + v45);
                v46 += v47;
                --v35;
              }
              while (v35);
              goto LABEL_278;
            }
          }
          v46 = v45 * (v35 - 1);
          *(float *)((char *)v256 + v47 * (v35 - 1)) = *(float *)((char *)v256 + v47 * (v35 - 1))
                                                     * *(float *)((char *)v252 + v46);
        }
      }
      if (!v35)
        goto LABEL_278;
      goto LABEL_180;
    }
    if (v443 != v424)
    {
      if ((v38 & 1) == 0)
      {
        *v424 = *v443 * *v433;
        v150 = v35 - 2;
        if (v35 == 2)
          goto LABEL_117;
        v151 = 1;
        v152 = v42;
        v153 = v44;
        v154 = (_DWORD *)v46;
        do
        {
          v155 = *(float *)((char *)v152 + v43);
          v152 = (float *)((char *)v152 + 2 * v43);
          v156 = *v152;
          v157 = *(float *)((char *)v153 + v45);
          v153 = (float *)((char *)v153 + 2 * v45);
          v158 = *v153;
          v159 = v155 * v157 - v156 * v158;
          v160 = v156 * v157;
          *(float *)&v157 = v159;
          *(_DWORD *)((char *)v154 + v47) = LODWORD(v157);
          *(float *)&v155 = v160 + v155 * v158;
          v154 = (_DWORD *)((char *)v154 + 2 * v47);
          *v154 = LODWORD(v155);
          v151 += 2;
        }
        while (v151 <= v150);
        if ((v35 & 1) == 0)
LABEL_117:
          *(float *)(v46 + v47 * (v35 - 1)) = *(float *)((char *)v42 + v43 * (v35 - 1))
                                            * *(float *)((char *)v44 + v45 * (v35 - 1));
        if ((v36 & 1) == 0)
        {
          v161 = &v42[v36];
          v163 = *(v161 - 1);
          v162 = v161 - 1;
          v164 = v163;
          v165 = &v44[v36];
          v167 = *(v165 - 1);
          v166 = v165 - 1;
          v168 = (float *)(v46 + 4 * v36);
          *(v168 - 1) = v164 * v167;
          v169 = v168 - 1;
          if (v35 != 2)
          {
            v170 = 2 * v47;
            v171 = v47 + v46 - 4;
            v172 = (uint64_t)v44 + v45 - 4;
            v173 = v46 + 2 * v47 - 4;
            v174 = (uint64_t)v44 + 2 * v45 - 4;
            v175 = (uint64_t)v42 + 2 * v43 - 4;
            v176 = 2 * v45;
            v177 = 2 * v43;
            v178 = (uint64_t)v42 + v43 - 4;
            v179 = 1;
            do
            {
              v180 = *(float *)(v178 + 4 * v36);
              v181 = *(float *)(v175 + 4 * v36);
              v182 = *(float *)(v172 + 4 * v36);
              v183 = *(float *)(v174 + 4 * v36);
              v184 = v180 * v182 - v181 * v183;
              v185 = v181 * v182;
              *(float *)&v182 = v184;
              *(_DWORD *)(v171 + 4 * v36) = LODWORD(v182);
              *(float *)&v180 = v185 + v180 * v183;
              *(_DWORD *)(v173 + 4 * v36) = LODWORD(v180);
              v179 += 2;
              v171 += v170;
              v172 += v176;
              v173 += v170;
              v174 += v176;
              v175 += v177;
              v178 += v177;
            }
            while (v179 <= v150);
            if ((v35 & 1) != 0)
            {
              v39 = 1;
LABEL_125:
              if ((_DWORD)v30)
                v186 = 0;
              else
                v186 = v31;
              do
              {
                if (v186)
                {
                  *(float *)v46 = *v42 * *v44;
                  if (v41 > v37)
                  {
                    v187 = v37;
                    v188 = v37;
                    do
                    {
                      v189.f64[0] = -v42[v187 + 1];
                      v190 = vcvtq_f64_f32(*(float32x2_t *)&v44[v187]);
                      v189.f64[1] = v42[v187 + 1];
                      *(float32x2_t *)(v46 + v187 * 4) = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v189, (float64x2_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL)), v190, v42[v187]));
                      v188 += 2;
                      v187 += 2;
                    }
                    while (v188 < v41);
                  }
                  if ((v186 & v39) != 0)
                    *(float *)(v46 + 4 * v41) = v42[v41] * v44[v41];
                }
                else if (v41 > v37)
                {
                  v191 = v37;
                  v192 = v37;
                  do
                  {
                    v193.f64[0] = -v42[v191 + 1];
                    v194 = vcvtq_f64_f32(*(float32x2_t *)&v44[v191]);
                    v193.f64[1] = v42[v191 + 1];
                    *(float32x2_t *)(v46 + v191 * 4) = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v193, (float64x2_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL)), v194, v42[v191]));
                    v192 += 2;
                    v191 += 2;
                  }
                  while (v192 < v41);
                }
                v42 = (float *)((char *)v42 + v43);
                v44 = (float *)((char *)v44 + v45);
                v46 += v47;
                --v35;
              }
              while (v35);
              goto LABEL_278;
            }
          }
          *(float *)((char *)v169 + v47 * (v35 - 1)) = *(float *)((char *)v162 + v43 * (v35 - 1))
                                                     * *(float *)((char *)v166 + v45 * (v35 - 1));
        }
      }
      if (!v35)
        goto LABEL_278;
      goto LABEL_125;
    }
    if ((v38 & 1) == 0)
    {
      *v443 = *v443 * *v433;
      v46 = v35 - 2;
      if (v35 == 2)
        goto LABEL_228;
      v324 = 1;
      v325 = v42;
      v326 = v44;
      do
      {
        v327 = *(float *)((char *)v325 + v47);
        v328 = *(float *)((char *)v325 + 2 * v47);
        v329 = *(float *)((char *)v326 + v45);
        v326 = (float *)((char *)v326 + 2 * v45);
        v330 = *v326;
        v331 = v327 * v329 - v328 * v330;
        v332 = v328 * v329;
        *(float *)&v329 = v331;
        *(float *)((char *)v325 + v47) = *(float *)&v329;
        *(float *)&v327 = v332 + v327 * v330;
        *(float *)((char *)v325 + 2 * v47) = *(float *)&v327;
        v324 += 2;
        v325 = (float *)((char *)v325 + 2 * v47);
      }
      while (v324 <= v46);
      if ((v35 & 1) == 0)
LABEL_228:
        *(float *)((char *)v42 + v47 * (v35 - 1)) = *(float *)((char *)v42 + v47 * (v35 - 1))
                                                  * *(float *)((char *)v44 + v45 * (v35 - 1));
      if ((v36 & 1) == 0)
      {
        v333 = &v44[v36];
        v335 = *(v333 - 1);
        v334 = v333 - 1;
        v336 = v335;
        v337 = &v42[v36];
        v339 = *(v337 - 1);
        v338 = v337 - 1;
        *v338 = v339 * v336;
        if (v35 != 2)
        {
          v340 = 1;
          v341 = v338;
          v342 = v334;
          do
          {
            v343 = *(float *)((char *)v341 + v47);
            v344 = *(float *)((char *)v341 + 2 * v47);
            v345 = *(float *)((char *)v342 + v45);
            v342 = (float *)((char *)v342 + 2 * v45);
            v346 = *v342;
            v347 = v343 * v345 - v344 * v346;
            v348 = v344 * v345;
            *(float *)&v345 = v347;
            *(float *)((char *)v341 + v47) = *(float *)&v345;
            *(float *)&v343 = v348 + v343 * v346;
            *(float *)((char *)v341 + 2 * v47) = *(float *)&v343;
            v340 += 2;
            v341 = (float *)((char *)v341 + 2 * v47);
          }
          while (v340 <= v46);
          if ((v35 & 1) != 0)
          {
            v39 = 1;
LABEL_236:
            if ((_DWORD)v30)
              v349 = 0;
            else
              v349 = v31;
            v46 = (uint64_t)&v44[v37];
            v350 = v42;
            do
            {
              if (v349)
              {
                *v350 = *v42 * *v44;
                if (v41 > v37)
                {
                  v351 = v37;
                  v352 = (float32x2_t *)v46;
                  v353 = v37;
                  do
                  {
                    v354 = &v350[v353];
                    v355.f64[0] = -v354[1];
                    v356 = *v352++;
                    v357 = vcvtq_f64_f32(v356);
                    v355.f64[1] = v354[1];
                    *(float32x2_t *)&v350[v351] = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v355, (float64x2_t)vextq_s8((int8x16_t)v357, (int8x16_t)v357, 8uLL)), v357, v350[v351]));
                    v353 += 2;
                    v351 += 2;
                  }
                  while (v353 < v41);
                }
                if ((v349 & v39) != 0)
                  v350[v41] = v42[v41] * v44[v41];
              }
              else if (v41 > v37)
              {
                v358 = v37;
                v359 = (float32x2_t *)v46;
                v360 = v37;
                do
                {
                  v361 = &v350[v360];
                  v362.f64[0] = -v361[1];
                  v363 = *v359++;
                  v364 = vcvtq_f64_f32(v363);
                  v362.f64[1] = v361[1];
                  *(float32x2_t *)&v350[v358] = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v362, (float64x2_t)vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL)), v364, v350[v358]));
                  v360 += 2;
                  v358 += 2;
                }
                while (v360 < v41);
              }
              v42 = (float *)((char *)v42 + v43);
              v44 = (float *)((char *)v44 + v45);
              v350 = (float *)((char *)v350 + v47);
              v46 += v45;
              --v35;
            }
            while (v35);
            goto LABEL_278;
          }
        }
        v46 = v45 * (v35 - 1);
        *(float *)((char *)v338 + v47 * (v35 - 1)) = *(float *)((char *)v338 + v47 * (v35 - 1))
                                                   * *(float *)((char *)v334 + v46);
      }
    }
    if (!v35)
      goto LABEL_278;
    goto LABEL_236;
  }
  if ((a5 & 1) != 0)
  {
    if (v443 != v424)
    {
      if ((v38 & 1) == 0)
      {
        *(double *)v424 = *(double *)v443 * *(double *)v433;
        v103 = v35 - 2;
        if (v35 == 2)
          goto LABEL_89;
        v104 = 1;
        v105 = (double *)v42;
        v106 = (double *)v44;
        v107 = (double *)v46;
        do
        {
          v108 = *(double *)((char *)v105 + v43);
          v105 = (double *)((char *)v105 + 2 * v43);
          v109 = *(double *)((char *)v106 + v45);
          v106 = (double *)((char *)v106 + 2 * v45);
          v110 = *v105 * *v106 + v108 * v109;
          v111 = *v105 * v109 - v108 * *v106;
          *(double *)((char *)v107 + v47) = v110;
          v107 = (double *)((char *)v107 + 2 * v47);
          *v107 = v111;
          v104 += 2;
        }
        while (v104 <= v103);
        if ((v35 & 1) == 0)
LABEL_89:
          *(double *)(v46 + v47 * (v35 - 1)) = *(double *)((char *)v42 + v43 * (v35 - 1))
                                             * *(double *)((char *)v44 + v45 * (v35 - 1));
        if ((v36 & 1) == 0)
        {
          v112 = &v42[2 * v36];
          v114 = *((double *)v112 - 1);
          v113 = v112 - 2;
          v115 = v114;
          v116 = &v44[2 * v36];
          v118 = *((double *)v116 - 1);
          v117 = v116 - 2;
          v119 = (float *)(v46 + 8 * v36);
          *((double *)v119 - 1) = v115 * v118;
          v120 = v119 - 2;
          if (v35 != 2)
          {
            v121 = 2 * v47;
            v122 = v47 + v46 - 8;
            v123 = (uint64_t)v44 + v45 - 8;
            v124 = v46 + 2 * v47 - 8;
            v125 = (uint64_t)v44 + 2 * v45 - 8;
            v126 = (uint64_t)v42 + 2 * v43 - 8;
            v127 = 2 * v45;
            v128 = 2 * v43;
            v129 = (uint64_t)v42 + v43 - 8;
            v130 = 1;
            do
            {
              v131 = *(double *)(v129 + 8 * v36);
              v132 = *(double *)(v126 + 8 * v36);
              v133 = *(double *)(v123 + 8 * v36);
              v134 = *(double *)(v125 + 8 * v36);
              *(double *)(v122 + 8 * v36) = v132 * v134 + v131 * v133;
              *(double *)(v124 + 8 * v36) = v132 * v133 - v131 * v134;
              v130 += 2;
              v122 += v121;
              v123 += v127;
              v124 += v121;
              v125 += v127;
              v126 += v128;
              v129 += v128;
            }
            while (v130 <= v103);
            if ((v35 & 1) != 0)
            {
              v39 = 1;
LABEL_97:
              if ((_DWORD)v30)
                v135 = 0;
              else
                v135 = v31;
              do
              {
                if (v135)
                {
                  *(double *)v46 = *(double *)v42 * *(double *)v44;
                  if (v41 > v37)
                  {
                    v136 = 8 * v37 + 8;
                    v137 = v37;
                    do
                    {
                      v138 = *(double *)((char *)v42 + v136 - 8);
                      v139 = *(double *)((char *)v42 + v136);
                      v140 = *(double *)((char *)v44 + v136 - 8);
                      v141 = *(double *)((char *)v44 + v136);
                      v142 = (double *)(v46 + v136);
                      *(v142 - 1) = v139 * v141 + v138 * v140;
                      *v142 = v139 * v140 - v138 * v141;
                      v137 += 2;
                      v136 += 16;
                    }
                    while (v137 < v41);
                  }
                  if ((v135 & v39) != 0)
                    *(double *)(v46 + 8 * v41) = *(double *)&v42[2 * v41] * *(double *)&v44[2 * v41];
                }
                else if (v41 > v37)
                {
                  v143 = 8 * v37 + 8;
                  v144 = v37;
                  do
                  {
                    v145 = *(double *)((char *)v42 + v143 - 8);
                    v146 = *(double *)((char *)v42 + v143);
                    v147 = *(double *)((char *)v44 + v143 - 8);
                    v148 = *(double *)((char *)v44 + v143);
                    v149 = (double *)(v46 + v143);
                    *(v149 - 1) = v146 * v148 + v145 * v147;
                    *v149 = v146 * v147 - v145 * v148;
                    v144 += 2;
                    v143 += 16;
                  }
                  while (v144 < v41);
                }
                v42 = (float *)((char *)v42 + v43);
                v44 = (float *)((char *)v44 + v45);
                v46 += v47;
                --v35;
              }
              while (v35);
              goto LABEL_278;
            }
          }
          *(double *)((char *)v120 + v47 * (v35 - 1)) = *(double *)((char *)v113 + v43 * (v35 - 1))
                                                      * *(double *)((char *)v117 + v45 * (v35 - 1));
        }
      }
      if (!v35)
        goto LABEL_278;
      goto LABEL_97;
    }
    if ((v38 & 1) == 0)
    {
      *(double *)v443 = *(double *)v443 * *(double *)v433;
      v46 = v35 - 2;
      if (v35 == 2)
        goto LABEL_200;
      v286 = 1;
      v287 = v42;
      v288 = (double *)v44;
      do
      {
        v289 = *(double *)((char *)v287 + v47);
        v290 = *(double *)((char *)v287 + 2 * v47);
        v291 = *(double *)((char *)v288 + v45);
        v288 = (double *)((char *)v288 + 2 * v45);
        v292 = v290 * *v288 + v289 * v291;
        v293 = v290 * v291 - v289 * *v288;
        *(double *)((char *)v287 + v47) = v292;
        *(double *)((char *)v287 + 2 * v47) = v293;
        v286 += 2;
        v287 = (float *)((char *)v287 + 2 * v47);
      }
      while (v286 <= v46);
      if ((v35 & 1) == 0)
LABEL_200:
        *(double *)((char *)v42 + v47 * (v35 - 1)) = *(double *)((char *)v42 + v47 * (v35 - 1))
                                                   * *(double *)((char *)v44 + v45 * (v35 - 1));
      if ((v36 & 1) == 0)
      {
        v294 = &v44[2 * v36];
        v296 = *((double *)v294 - 1);
        v295 = (double *)(v294 - 2);
        v297 = v296;
        v298 = &v42[2 * v36];
        v300 = *((double *)v298 - 1);
        v299 = (double *)(v298 - 2);
        *v299 = v300 * v297;
        if (v35 != 2)
        {
          v301 = 1;
          v302 = v299;
          v303 = v295;
          do
          {
            v304 = *(double *)((char *)v302 + v47);
            v305 = *(double *)((char *)v302 + 2 * v47);
            v306 = *(double *)((char *)v303 + v45);
            v303 = (double *)((char *)v303 + 2 * v45);
            v307 = v305 * *v303 + v304 * v306;
            v308 = v305 * v306 - v304 * *v303;
            *(double *)((char *)v302 + v47) = v307;
            *(double *)((char *)v302 + 2 * v47) = v308;
            v301 += 2;
            v302 = (double *)((char *)v302 + 2 * v47);
          }
          while (v301 <= v46);
          if ((v35 & 1) != 0)
          {
            v39 = 1;
LABEL_208:
            if ((_DWORD)v30)
              v309 = 0;
            else
              v309 = v31;
            v46 = (uint64_t)v42;
            do
            {
              if (v309)
              {
                *(double *)v46 = *(double *)v42 * *(double *)v44;
                if (v41 > v37)
                {
                  v310 = 8 * v37 + 8;
                  v311 = v37;
                  do
                  {
                    v312 = (double *)(v46 + v310);
                    v313 = *(double *)(v46 + v310 - 8);
                    v314 = *(double *)(v46 + v310);
                    v315 = *(double *)((char *)v44 + v310 - 8);
                    v316 = *(double *)((char *)v44 + v310);
                    *(v312 - 1) = v314 * v316 + v313 * v315;
                    *v312 = v314 * v315 - v313 * v316;
                    v311 += 2;
                    v310 += 16;
                  }
                  while (v311 < v41);
                }
                if ((v309 & v39) != 0)
                  *(double *)(v46 + 8 * v41) = *(double *)&v42[2 * v41] * *(double *)&v44[2 * v41];
              }
              else if (v41 > v37)
              {
                v317 = 8 * v37 + 8;
                v318 = v37;
                do
                {
                  v319 = (double *)(v46 + v317);
                  v320 = *(double *)(v46 + v317 - 8);
                  v321 = *(double *)(v46 + v317);
                  v322 = *(double *)((char *)v44 + v317 - 8);
                  v323 = *(double *)((char *)v44 + v317);
                  *(v319 - 1) = v321 * v323 + v320 * v322;
                  *v319 = v321 * v322 - v320 * v323;
                  v318 += 2;
                  v317 += 16;
                }
                while (v318 < v41);
              }
              v42 = (float *)((char *)v42 + v43);
              v44 = (float *)((char *)v44 + v45);
              v46 += v47;
              --v35;
            }
            while (v35);
            goto LABEL_278;
          }
        }
        v46 = v45 * (v35 - 1);
        *(double *)((char *)v299 + v47 * (v35 - 1)) = *(double *)((char *)v299 + v47 * (v35 - 1))
                                                    * *(double *)((char *)v295 + v46);
      }
    }
    if (!v35)
      goto LABEL_278;
    goto LABEL_208;
  }
  if (v443 != v424)
  {
    if ((v38 & 1) == 0)
    {
      *(double *)v424 = *(double *)v443 * *(double *)v433;
      v195 = v35 - 2;
      if (v35 == 2)
        goto LABEL_145;
      v196 = 1;
      v197 = (double *)v42;
      v198 = (double *)v44;
      v199 = (double *)v46;
      do
      {
        v200 = *(double *)((char *)v197 + v43);
        v197 = (double *)((char *)v197 + 2 * v43);
        v201 = *(double *)((char *)v198 + v45);
        v198 = (double *)((char *)v198 + 2 * v45);
        v202 = v200 * v201 - *v197 * *v198;
        v203 = *v197 * v201 + v200 * *v198;
        *(double *)((char *)v199 + v47) = v202;
        v199 = (double *)((char *)v199 + 2 * v47);
        *v199 = v203;
        v196 += 2;
      }
      while (v196 <= v195);
      if ((v35 & 1) == 0)
LABEL_145:
        *(double *)(v46 + v47 * (v35 - 1)) = *(double *)((char *)v42 + v43 * (v35 - 1))
                                           * *(double *)((char *)v44 + v45 * (v35 - 1));
      if ((v36 & 1) == 0)
      {
        v204 = &v42[2 * v36];
        v206 = *((double *)v204 - 1);
        v205 = v204 - 2;
        v207 = v206;
        v208 = &v44[2 * v36];
        v210 = *((double *)v208 - 1);
        v209 = v208 - 2;
        v211 = (float *)(v46 + 8 * v36);
        *((double *)v211 - 1) = v207 * v210;
        v212 = v211 - 2;
        if (v35 != 2)
        {
          v213 = 2 * v47;
          v214 = v47 + v46 - 8;
          v215 = (uint64_t)v44 + v45 - 8;
          v216 = v46 + 2 * v47 - 8;
          v217 = (uint64_t)v44 + 2 * v45 - 8;
          v218 = (uint64_t)v42 + 2 * v43 - 8;
          v219 = 2 * v45;
          v220 = 2 * v43;
          v221 = (uint64_t)v42 + v43 - 8;
          v222 = 1;
          do
          {
            v223 = *(double *)(v221 + 8 * v36);
            v224 = *(double *)(v218 + 8 * v36);
            v225 = *(double *)(v215 + 8 * v36);
            v226 = *(double *)(v217 + 8 * v36);
            *(double *)(v214 + 8 * v36) = v223 * v225 - v224 * v226;
            *(double *)(v216 + 8 * v36) = v224 * v225 + v223 * v226;
            v222 += 2;
            v214 += v213;
            v215 += v219;
            v216 += v213;
            v217 += v219;
            v218 += v220;
            v221 += v220;
          }
          while (v222 <= v195);
          if ((v35 & 1) != 0)
          {
            v39 = 1;
LABEL_153:
            if ((_DWORD)v30)
              v227 = 0;
            else
              v227 = v31;
            do
            {
              if (v227)
              {
                *(double *)v46 = *(double *)v42 * *(double *)v44;
                if (v41 > v37)
                {
                  v228 = 8 * v37 + 8;
                  v229 = v37;
                  do
                  {
                    v230 = *(double *)((char *)v42 + v228 - 8);
                    v231 = *(double *)((char *)v42 + v228);
                    v232 = *(double *)((char *)v44 + v228 - 8);
                    v233 = *(double *)((char *)v44 + v228);
                    v234 = (double *)(v46 + v228);
                    *(v234 - 1) = v230 * v232 - v231 * v233;
                    *v234 = v231 * v232 + v230 * v233;
                    v229 += 2;
                    v228 += 16;
                  }
                  while (v229 < v41);
                }
                if ((v227 & v39) != 0)
                  *(double *)(v46 + 8 * v41) = *(double *)&v42[2 * v41] * *(double *)&v44[2 * v41];
              }
              else if (v41 > v37)
              {
                v235 = 8 * v37 + 8;
                v236 = v37;
                do
                {
                  v237 = *(double *)((char *)v42 + v235 - 8);
                  v238 = *(double *)((char *)v42 + v235);
                  v239 = *(double *)((char *)v44 + v235 - 8);
                  v240 = *(double *)((char *)v44 + v235);
                  v241 = (double *)(v46 + v235);
                  *(v241 - 1) = v237 * v239 - v238 * v240;
                  *v241 = v238 * v239 + v237 * v240;
                  v236 += 2;
                  v235 += 16;
                }
                while (v236 < v41);
              }
              v42 = (float *)((char *)v42 + v43);
              v44 = (float *)((char *)v44 + v45);
              v46 += v47;
              --v35;
            }
            while (v35);
            goto LABEL_278;
          }
        }
        *(double *)((char *)v212 + v47 * (v35 - 1)) = *(double *)((char *)v205 + v43 * (v35 - 1))
                                                    * *(double *)((char *)v209 + v45 * (v35 - 1));
      }
    }
    if (!v35)
      goto LABEL_278;
    goto LABEL_153;
  }
  if ((v38 & 1) != 0)
    goto LABEL_263;
  *(double *)v443 = *(double *)v443 * *(double *)v433;
  v46 = v35 - 2;
  if (v35 == 2)
    goto LABEL_256;
  v365 = 1;
  v366 = v42;
  v367 = (double *)v44;
  do
  {
    v368 = *(double *)((char *)v366 + v47);
    v369 = *(double *)((char *)v366 + 2 * v47);
    v370 = *(double *)((char *)v367 + v45);
    v367 = (double *)((char *)v367 + 2 * v45);
    v371 = v368 * v370 - v369 * *v367;
    v372 = v369 * v370 + v368 * *v367;
    *(double *)((char *)v366 + v47) = v371;
    *(double *)((char *)v366 + 2 * v47) = v372;
    v365 += 2;
    v366 = (float *)((char *)v366 + 2 * v47);
  }
  while (v365 <= v46);
  if ((v35 & 1) == 0)
LABEL_256:
    *(double *)((char *)v42 + v47 * (v35 - 1)) = *(double *)((char *)v42 + v47 * (v35 - 1))
                                               * *(double *)((char *)v44 + v45 * (v35 - 1));
  if ((v36 & 1) != 0)
    goto LABEL_263;
  v373 = &v44[2 * v36];
  v375 = *((double *)v373 - 1);
  v374 = (double *)(v373 - 2);
  v376 = v375;
  v377 = &v42[2 * v36];
  v379 = *((double *)v377 - 1);
  v378 = (double *)(v377 - 2);
  *v378 = v379 * v376;
  if (v35 == 2)
    goto LABEL_262;
  v380 = 1;
  v381 = v378;
  v382 = v374;
  do
  {
    v383 = *(double *)((char *)v381 + v47);
    v384 = *(double *)((char *)v381 + 2 * v47);
    v385 = *(double *)((char *)v382 + v45);
    v382 = (double *)((char *)v382 + 2 * v45);
    v386 = v383 * v385 - v384 * *v382;
    v387 = v384 * v385 + v383 * *v382;
    *(double *)((char *)v381 + v47) = v386;
    *(double *)((char *)v381 + 2 * v47) = v387;
    v380 += 2;
    v381 = (double *)((char *)v381 + 2 * v47);
  }
  while (v380 <= v46);
  if ((v35 & 1) == 0)
  {
LABEL_262:
    v46 = v45 * (v35 - 1);
    *(double *)((char *)v378 + v47 * (v35 - 1)) = *(double *)((char *)v378 + v47 * (v35 - 1))
                                                * *(double *)((char *)v374 + v46);
LABEL_263:
    if (!v35)
      goto LABEL_278;
    goto LABEL_264;
  }
  v39 = 1;
LABEL_264:
  if ((_DWORD)v30)
    v388 = 0;
  else
    v388 = v31;
  v46 = (uint64_t)v42;
  do
  {
    if (v388)
    {
      *(double *)v46 = *(double *)v42 * *(double *)v44;
      if (v41 > v37)
      {
        v389 = 8 * v37 + 8;
        v390 = v37;
        do
        {
          v391 = (double *)(v46 + v389);
          v392 = *(double *)(v46 + v389 - 8);
          v393 = *(double *)(v46 + v389);
          v394 = *(double *)((char *)v44 + v389 - 8);
          v395 = *(double *)((char *)v44 + v389);
          *(v391 - 1) = v392 * v394 - v393 * v395;
          *v391 = v393 * v394 + v392 * v395;
          v390 += 2;
          v389 += 16;
        }
        while (v390 < v41);
      }
      if ((v388 & v39) != 0)
        *(double *)(v46 + 8 * v41) = *(double *)&v42[2 * v41] * *(double *)&v44[2 * v41];
    }
    else if (v41 > v37)
    {
      v396 = 8 * v37 + 8;
      v397 = v37;
      do
      {
        v398 = (double *)(v46 + v396);
        v399 = *(double *)(v46 + v396 - 8);
        v400 = *(double *)(v46 + v396);
        v401 = *(double *)((char *)v44 + v396 - 8);
        v402 = *(double *)((char *)v44 + v396);
        *(v398 - 1) = v399 * v401 - v400 * v402;
        *v398 = v400 * v401 + v399 * v402;
        v397 += 2;
        v396 += 16;
      }
      while (v397 < v41);
    }
    v42 = (float *)((char *)v42 + v43);
    v44 = (float *)((char *)v44 + v45);
    v46 += v47;
    --v35;
  }
  while (v35);
LABEL_278:
  v403 = v425;
  if (v425)
  {
    do
    {
      v404 = __ldaxr(v403);
      v405 = v404 - 1;
    }
    while (__stlxr(v405, v403));
    if (!v405)
      cv::Mat::deallocate((cv::Mat *)v423, (void *)v46);
  }
  v424 = 0;
  v426 = 0;
  v427 = 0;
  v428 = 0;
  if (SHIDWORD(v423[0]) >= 1)
  {
    v406 = 0;
    v407 = v429;
    do
      *(_DWORD *)(v407 + 4 * v406++) = 0;
    while (v406 < SHIDWORD(v423[0]));
  }
  v425 = 0;
  if (v430 != (cv *)&v431)
    cv::fastFree((void **)v430, (void *)v46);
  v408 = (unsigned int *)v434;
  if ((_QWORD)v434)
  {
    do
    {
      v409 = __ldaxr(v408);
      v410 = v409 - 1;
    }
    while (__stlxr(v410, v408));
    if (!v410)
      cv::Mat::deallocate((cv::Mat *)v432, (void *)v46);
  }
  v433 = 0;
  *((_QWORD *)&v434 + 1) = 0;
  v435 = 0uLL;
  if (SHIDWORD(v432[0]) >= 1)
  {
    v411 = 0;
    v412 = v437;
    do
      v412[v411++] = 0;
    while (v411 < SHIDWORD(v432[0]));
  }
  *(_QWORD *)&v434 = 0;
  if (v438 != (cv *)&v439)
    cv::fastFree((void **)v438, (void *)v46);
  v413 = v444;
  if (v444)
  {
    do
    {
      v414 = __ldaxr(v413);
      v415 = v414 - 1;
    }
    while (__stlxr(v415, v413));
    if (!v415)
      cv::Mat::deallocate((cv::Mat *)&v440, (void *)v46);
  }
  v443 = 0;
  v445 = 0;
  v446 = 0;
  v447 = 0;
  if (SHIDWORD(v440) >= 1)
  {
    v416 = 0;
    v417 = v448;
    do
      v417[v416++] = 0;
    while (v416 < SHIDWORD(v440));
  }
  v444 = 0;
  if (v449 != (void **)&v450)
    cv::fastFree(v449, (void *)v46);
}

void sub_219E29D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a14 < 0)
    operator delete(a9);
  cv::Mat::~Mat((cv::Mat *)&a45, v47);
  cv::Mat::~Mat((cv::Mat *)(v45 - 208), v48);
  _Unwind_Resume(a1);
}

void sub_219E29E10()
{
  JUMPOUT(0x219E29E00);
}

uint64_t cv::getOptimalDFTSize(cv *this)
{
  int v2;
  int v3;
  int v4;

  if (this > 0x7EB4959F)
    return 0xFFFFFFFFLL;
  v2 = 0;
  v3 = 1650;
  do
  {
    v4 = (v3 + v2) >> 1;
    if ((int)cv::optimalDFTSizeTab[v4] >= (int)this)
      v3 = (v3 + v2) >> 1;
    else
      v2 = v4 + 1;
  }
  while (v2 < v3);
  return cv::optimalDFTSizeTab[v3];
}

uint64_t cv::DFT<float>(uint64_t result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, __int16 a11)
{
  int v15;
  int v16;
  float32x2_t *v17;
  __int16 v18;
  int v19;
  int v20;
  cv *v21;
  const cv::Exception *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float32x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  int v35;
  float32x2_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  float32_t v41;
  uint64_t v42;
  float32_t v43;
  uint64_t v44;
  __int32 v45;
  float32_t v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  float32x2_t *v52;
  uint64_t i;
  uint64_t v54;
  float32x2_t v55;
  unint64_t v56;
  float *v57;
  float v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  float32x2_t *v67;
  uint64_t v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x2_t *v71;
  float *v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  unint64_t v88;
  int v89;
  float *v90;
  float *v91;
  float32x2_t *v92;
  float32x2_t *v93;
  float32x2_t *v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  float32x2_t *v126;
  float *v127;
  float *v128;
  float v129;
  float v130;
  float v131;
  float *v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float32x2_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  float32x2_t *v148;
  float32x2_t *v149;
  float32x2_t *v150;
  float32x2_t *v151;
  unint64_t v152;
  int v153;
  int v154;
  float *v155;
  float *v156;
  float *v157;
  float *v158;
  float *v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float *v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float *v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  float *v211;
  float *v212;
  float *v213;
  float *v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float *v225;
  uint64_t v226;
  int v227;
  float *v228;
  float *v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float *v235;
  float *v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  uint64_t v250;
  BOOL v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  float *v264;
  float32x2_t *v265;
  float32x2_t *v266;
  float *v267;
  float *v268;
  float *v269;
  float *v270;
  float v271;
  float v272;
  float *v273;
  float *v274;
  uint64_t v275;
  float *v276;
  float *v277;
  float *v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float *v291;
  float32x2_t *v292;
  float32x2_t *v293;
  uint64_t v294;
  float32x2_t *v295;
  float32x2_t v296;
  float32x2_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  float32x2_t *v301;
  float v302;
  float v303;
  float v304;
  float v305;
  int v306;
  float32x2_t v307;
  float32x2_t v308;
  float32x2_t v309;
  int v310;
  int v311;
  float *v312;
  float *v313;
  BOOL v314;
  float v315;
  uint64_t v316;
  unint64_t v317;
  float *v318;
  float v319;
  char *v320;
  float32x2_t *v321;
  uint64_t v322;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  int v329;
  int v330;
  float32x2_t *v331;
  float *v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  int v345;
  void *__p[2];
  void *v347[2];
  void *v348[2];
  char v349[128];

  v15 = a4;
  v16 = a3;
  v17 = a2;
  v18 = a11;
  if (a8 == a3)
  {
    v19 = 1;
  }
  else
  {
    if (a8 == 2 * a3)
      v19 = 2;
    else
      v19 = a8 / a3;
    v18 = a11;
  }
  if (a2 == (float32x2_t *)result)
  {
    if ((v18 & 0x100) == 0)
    {
      if (*a5 != a5[a4 - 1])
      {
        std::string::basic_string[abi:ne180100]<0>(v348, "factors[0] == factors[nf-1]");
        std::string::basic_string[abi:ne180100]<0>(v347, "DFT");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
        v21 = (cv *)cv::Exception::Exception(v349, 4294967081, v348, v347, __p, 599);
        cv::error(v21, v22);
      }
      if (a4 == 1)
      {
        if ((a3 & 3) == 0)
        {
          v23 = a3 >= 0 ? a3 : a3 + 1;
          if (a3 >= 2)
          {
            v24 = 0;
            v25 = v23 >> 1;
            v26 = (uint64_t)v23 >> 1;
            v27 = &a2[v25];
            v28 = (uint64_t)&a2[v26 + 1];
            do
            {
              v29 = *a6;
              if (v29 >= v26)
                cv::DFT<float>();
              v30 = &a2[v24];
              v31 = v30[1];
              v30[1] = v27[v29];
              v27[v29] = v31;
              if (v24 < v29)
              {
                v32 = a2[v24];
                a2[v24] = a2[v29];
                a2[v29] = v32;
                v33 = *(float32x2_t *)(v28 + 8 * v24);
                v34 = v29 + 1;
                *(float32x2_t *)(v28 + 8 * v24) = v27[v34];
                v27[v34] = v33;
              }
              v24 += 2;
              a6 += 2 * v19;
            }
            while (v24 < v26);
          }
        }
      }
      else if (a3 >= 1)
      {
        for (i = 0; i != a3; ++i)
        {
          v54 = *a6;
          if (v54 >= a3)
            cv::DFT<float>();
          if (i < v54)
          {
            v55 = a2[i];
            a2[i] = a2[v54];
            a2[v54] = v55;
          }
          a6 += v19;
        }
      }
    }
    if ((a11 & 1) != 0)
    {
      if (a3 >= 2)
      {
        v56 = 0;
        v57 = (float *)&a2[1] + 1;
        do
        {
          v58 = -*v57;
          *(v57 - 2) = -*(v57 - 2);
          *v57 = v58;
          v57 += 4;
          v56 += 2;
        }
        while (v56 <= (a3 - 2));
      }
      else
      {
        LODWORD(v56) = 0;
      }
      if ((int)v56 < a3)
        a2[a3 - 1].f32[1] = -a2[a3 - 1].f32[1];
    }
  }
  else
  {
    if ((v18 & 0x100) != 0)
      cv::DFT<float>();
    v20 = a3 - 2;
    if ((v18 & 1) != 0)
    {
      v35 = 0;
      if (a3 >= 2)
      {
        v36 = a2 + 1;
        do
        {
          v37 = *a6;
          v38 = a6[v19];
          if (v37 >= a3 || v38 >= a3)
            cv::DFT<float>();
          a6 += 2 * v19;
          v40 = result + 8 * v37;
          v41 = -*(float *)(v40 + 4);
          v36[-1].i32[0] = *(_DWORD *)v40;
          v36[-1].f32[1] = v41;
          v42 = result + 8 * (int)v38;
          v43 = -*(float *)(v42 + 4);
          v36->i32[0] = *(_DWORD *)v42;
          v36->f32[1] = v43;
          v36 += 2;
          v35 += 2;
        }
        while (v20 >= v35);
      }
      if (v35 < a3)
      {
        v44 = result + 8 * a3;
        v45 = *(_DWORD *)(v44 - 8);
        v46 = -*(float *)(v44 - 4);
        v47 = &a2[v35];
        v47->i32[0] = v45;
        v47->f32[1] = v46;
      }
    }
    else
    {
      if (a3 < 2)
      {
        LODWORD(v48) = 0;
      }
      else
      {
        v48 = 0;
        do
        {
          v49 = *a6;
          v50 = a6[v19];
          if (v49 >= a3 || v50 >= a3)
            cv::DFT<float>();
          a6 += 2 * v19;
          v52 = &a2[v48];
          *v52 = *(float32x2_t *)(result + 8 * v49);
          v52[1] = *(float32x2_t *)(result + 8 * (int)v50);
          v48 += 2;
        }
        while (v20 >= (int)v48);
      }
      if ((int)v48 < a3)
        a2[a3 - 1] = *(float32x2_t *)(result + 8 * a3 - 8);
    }
  }
  v59 = *a5;
  if ((*a5 & 1) != 0)
  {
    v62 = 1;
    v327 = a8;
  }
  else
  {
    if (v59 >= 4 && (result = cv::checkHardwareSupport((cv *)4), v59 = *a5, *a5 >= 4))
    {
      v339 = v15;
      v63 = v16;
      v342 = a7 + 4;
      v60 = 1;
      v64 = 4;
      v61 = a8;
      v343 = *a5;
      do
      {
        v65 = v60;
        v60 = v64;
        v61 /= 4;
        if (v16 >= 1)
        {
          v66 = 0;
          result = 24 * v61;
          v67 = &v17[v65];
          v68 = 8 * v60;
          v69 = &v17[3 * v65];
          v70 = v17;
          v71 = &v17[2 * v65];
          do
          {
            v72 = (float *)&v17[v66];
            v73 = &v72[4 * v65];
            v74 = v73[1];
            v75 = &v73[2 * v65];
            v76 = v75[1];
            v77 = *v73 + *v75;
            v78 = v74 + v76;
            v79 = v74 - v76;
            v80 = *v75 - *v73;
            v81 = v72[1];
            v82 = &v72[2 * v65];
            v83 = v82[1];
            v84 = *v72 + *v82;
            v85 = v81 + v83;
            v86 = *v72 - *v82;
            v87 = v81 - v83;
            *v72 = v77 + v84;
            v72[1] = v78 + v85;
            *v73 = v84 - v77;
            v73[1] = v85 - v78;
            *v82 = v79 + v86;
            v82[1] = v80 + v87;
            *v75 = v86 - v79;
            v75[1] = v87 - v80;
            if (v65 >= 2)
            {
              v88 = 0;
              v89 = 2 * v61;
              v90 = (float *)(v342 + 8 * v61);
              v91 = (float *)(v342 + 24 * v61);
              do
              {
                v92 = &v70[v88 / 8];
                v93 = &v71[v88 / 8];
                v94 = &v67[v88 / 8];
                v95 = (float *)(a7 + 8 * v89);
                v96 = v67[v88 / 8 + 1].f32[0];
                v97 = v67[v88 / 8 + 1].f32[1];
                v98 = v95[1];
                v99 = (float)(v96 * *v95) - (float)(v97 * v98);
                v100 = (float)(*v95 * v97) + (float)(v96 * v98);
                v101 = *(v90 - 1);
                v102 = v71[v88 / 8 + 1].f32[0];
                v103 = v71[v88 / 8 + 1].f32[1];
                v104 = (float)(v103 * v101) + (float)(v102 * *v90);
                v105 = (float)(v102 * v101) - (float)(v103 * *v90);
                v106 = &v69[v88 / 8];
                v107 = *(v91 - 1);
                v108 = v69[v88 / 8 + 1].f32[0];
                v109 = v69[v88 / 8 + 1].f32[1];
                v110 = (float)(v109 * v107) + (float)(v108 * *v91);
                v111 = (float)(v108 * v107) - (float)(v109 * *v91);
                v112 = v105 + v111;
                v113 = v104 + v110;
                v114 = v104 - v110;
                v115 = v111 - v105;
                v116 = v70[v88 / 8 + 1].f32[0];
                v117 = v70[v88 / 8 + 1].f32[1];
                v118 = v99 + v116;
                v119 = v100 + v117;
                v120 = v116 - v99;
                v121 = v117 - v100;
                v92[1].f32[0] = v118 + v112;
                v92[1].f32[1] = v119 + v113;
                v93[1].f32[0] = v118 - v112;
                v93[1].f32[1] = v119 - v113;
                v94[1].f32[0] = v120 + v114;
                v94[1].f32[1] = v115 + v121;
                v106[1].f32[0] = v120 - v114;
                v106[1].f32[1] = v121 - v115;
                v91 = (float *)((char *)v91 + result);
                v90 += 2 * v61;
                v89 += 2 * v61;
                v88 += 8;
              }
              while (8 * v65 - 8 != v88);
            }
            v66 += v60;
            v67 = (float32x2_t *)((char *)v67 + v68);
            v69 = (float32x2_t *)((char *)v69 + v68);
            v71 = (float32x2_t *)((char *)v71 + v68);
            v70 = (float32x2_t *)((char *)v70 + v68);
            v17 = a2;
          }
          while (v66 < v63);
        }
        v64 = 4 * v60;
        v59 = v343;
        v16 = a3;
      }
      while (4 * v60 <= v343);
      v15 = v339;
    }
    else
    {
      v60 = 1;
      v61 = a8;
    }
    while (v60 < v59)
    {
      v122 = v60;
      v60 *= 2;
      if (v61 >= 0)
        v123 = v61;
      else
        v123 = v61 + 1;
      v61 = v123 >> 1;
      if (v16 >= 1)
      {
        v124 = 0;
        result = 8 * v61;
        v125 = 2 * v122;
        v126 = v17 + 1;
        do
        {
          v127 = (float *)&v17[v124];
          v128 = &v127[2 * v122];
          v129 = v127[1];
          v130 = v128[1];
          v131 = *v127 - *v128;
          *v127 = *v127 + *v128;
          v127[1] = v129 + v130;
          *v128 = v131;
          v128[1] = v129 - v130;
          if (v122 >= 2)
          {
            v132 = (float *)v126;
            v133 = v122 - 1;
            v134 = (float *)(a7 + 4 + 8 * v61);
            do
            {
              v135 = &v132[v125];
              v136 = *(v134 - 1);
              v137 = v132[2 * v122];
              v138 = v132[v125 + 1];
              v139 = (float)(v137 * v136) - (float)(v138 * *v134);
              v140 = (float)(v137 * *v134) + (float)(v138 * v136);
              v141 = *v132;
              v142 = v132[1];
              *v132 = *v132 + v139;
              v132[1] = v142 + v140;
              v132 += 2;
              *v135 = v141 - v139;
              v135[1] = v142 - v140;
              v134 = (float *)((char *)v134 + result);
              --v133;
            }
            while (v133);
          }
          v124 += v60;
          v126 += v60;
        }
        while (v124 < v16);
      }
    }
    v327 = v61;
    v62 = v60;
  }
  v143.f32[0] = a9;
  if (!(v59 & 1) < v15)
  {
    v336 = v16;
    v144 = (v59 & 1) == 0;
    v321 = v17 + 1;
    v322 = v15;
    v320 = (char *)v17 + 4;
    do
    {
      v325 = v144;
      v145 = a5[v144];
      v326 = v145 * v62;
      v327 /= v145;
      if (v145 == 3)
      {
        if (v16 >= 1)
        {
          v209 = 0;
          v210 = 4 * v62;
          result = 8 * v62;
          v211 = (float *)v321;
          do
          {
            v212 = (float *)&v17[v209];
            v213 = &v212[2 * v62];
            v214 = &v212[4 * v62];
            v215 = v213[1];
            v216 = v214[1];
            v217 = *v213 + *v214;
            v218 = v215 + v216;
            v219 = *v212;
            v220 = v212[1];
            v221 = (float)(v215 - v216) * 0.86603;
            v222 = (float)(*v214 - *v213) * 0.86603;
            *v212 = v217 + *v212;
            v212[1] = v218 + v220;
            v223 = v219 + (float)(v217 * -0.5);
            v224 = v220 + (float)(v218 * -0.5);
            *v213 = v223 + v221;
            v213[1] = v222 + v224;
            *v214 = v223 - v221;
            v214[1] = v224 - v222;
            if (v62 >= 2)
            {
              v225 = v211;
              v226 = v62 - 1;
              v227 = 2 * v327;
              v228 = (float *)(a7 + 4 + 8 * v327);
              do
              {
                v229 = (float *)((char *)v225 + result);
                v230 = *(v228 - 1);
                v231 = v225[2 * v62];
                v232 = *(float *)((char *)v225 + result + 4);
                v233 = (float)(v231 * v230) - (float)(v232 * *v228);
                v234 = (float)(v230 * v232) + (float)(v231 * *v228);
                v235 = &v225[v210];
                v236 = (float *)(a7 + 8 * v227);
                v237 = v225[4 * v62];
                v238 = v225[v210 + 1];
                v239 = v236[1];
                v240 = (float)(v237 * *v236) - (float)(v238 * v239);
                v241 = (float)(*v236 * v238) + (float)(v237 * v239);
                v242 = v233 + v240;
                v243 = v234 + v241;
                v244 = (float)(v234 - v241) * 0.86603;
                v245 = (float)(v240 - v233) * 0.86603;
                v246 = *v225;
                v247 = v225[1];
                *v225 = *v225 + v242;
                v225[1] = v247 + v243;
                v225 += 2;
                v248 = v246 + (float)(v242 * -0.5);
                v249 = v247 + (float)(v243 * -0.5);
                *v229 = v244 + v248;
                v229[1] = v249 + v245;
                *v235 = v248 - v244;
                v235[1] = v249 - v245;
                v228 += 2 * v327;
                v227 += 2 * v327;
                --v226;
              }
              while (v226);
            }
            v209 += v326;
            v211 += 2 * v326;
          }
          while (v209 < v336);
        }
      }
      else if (v145 == 5)
      {
        if (v16 >= 1)
        {
          v146 = 0;
          v147 = 8 * v62;
          v148 = &v17[2 * v62];
          v340 = 8 * v326;
          result = (uint64_t)&v17[4 * v62];
          v149 = &v17[2 * v62 + v62];
          v150 = v17;
          v151 = &v17[v62];
          v329 = v62;
          do
          {
            v344 = v146;
            if (v62 >= 1)
            {
              v152 = 0;
              v153 = 0;
              v154 = 0;
              v155 = (float *)(a7 + 4);
              v156 = (float *)(a7 + 4);
              do
              {
                v157 = (float *)&v150[v152 / 8];
                v158 = (float *)&v148[v152 / 8];
                v159 = (float *)(result + v152);
                v160 = (float *)&v151[v152 / 8];
                v161 = *(v156 - 1);
                v162 = v151[v152 / 8].f32[0];
                v163 = v151[v152 / 8].f32[1];
                v164 = (float)(v162 * v161) - (float)(v163 * *v156);
                v165 = (float *)(a7 + 8 * v154);
                v166 = (float)(v161 * v163) + (float)(v162 * *v156);
                v168 = *(float *)(result + v152);
                v167 = *(float *)(result + v152 + 4);
                v169 = v165[1];
                v170 = (float)(v168 * *v165) - (float)(v167 * v169);
                v171 = (float)(*v165 * v167) + (float)(v168 * v169);
                v172 = v164 + v170;
                v173 = (float *)&v149[v152 / 8];
                v174 = *(v155 - 1);
                v175 = v149[v152 / 8].f32[0];
                v176 = v149[v152 / 8].f32[1];
                v177 = v166 + v171;
                v178 = (float)(v175 * v174) - (float)(v176 * *v155);
                v179 = v164 - v170;
                v180 = (float)(v174 * v176) + (float)(v175 * *v155);
                v181 = (float *)(a7 + 8 * v153);
                v182 = v148[v152 / 8].f32[0];
                v183 = v148[v152 / 8].f32[1];
                v184 = v166 - v171;
                v185 = v181[1];
                v186 = (float)(v182 * *v181) - (float)(v183 * v185);
                v187 = (float)(*v181 * v183) + (float)(v182 * v185);
                v188 = v178 + v186;
                v189 = v180 + v187;
                v190 = v178 - v186;
                v191 = v180 - v187;
                v192 = v150[v152 / 8].f32[0];
                v193 = v150[v152 / 8].f32[1];
                v194 = v192 + (float)(v172 + v188);
                v195 = v193 + (float)(v177 + v189);
                v196 = v192 + (float)((float)(v172 + v188) * -0.25);
                v197 = v172 - v188;
                v198 = v193 + (float)((float)(v177 + v189) * -0.25);
                v199 = v197 * 0.55902;
                v200 = (float)(v177 - v189) * 0.55902;
                v201 = (float)(v184 + v191) * 0.95106;
                v202 = (float)(v179 + v190) * -0.95106;
                *v157 = v194;
                v157[1] = v195;
                v203 = v201 - (float)(v184 * 0.36327);
                v204 = (float)(v179 * 0.36327) + v202;
                v205 = v201 - (float)(v191 * 1.5388);
                v206 = v202 + (float)(v190 * 1.5388);
                v207 = v196 + v199;
                v208 = v196 - v199;
                *v160 = v205 + v207;
                v160[1] = (float)(v198 + v200) + v206;
                *v159 = v207 - v205;
                v159[1] = (float)(v198 + v200) - v206;
                *v158 = v203 + v208;
                v158[1] = (float)(v198 - v200) + v204;
                *v173 = v208 - v203;
                v173[1] = (float)(v198 - v200) - v204;
                v155 += 6 * v327;
                v156 += 2 * v327;
                v154 += 4 * v327;
                v153 += 2 * v327;
                v152 += 8;
              }
              while (v147 != v152);
            }
            v146 += v326;
            v148 = (float32x2_t *)((char *)v148 + v340);
            result += v340;
            v149 = (float32x2_t *)((char *)v149 + v340);
            v151 = (float32x2_t *)((char *)v151 + v340);
            v150 = (float32x2_t *)((char *)v150 + v340);
            v17 = a2;
            v62 = v329;
          }
          while (v344 + v326 < v336);
        }
      }
      else
      {
        v250 = v145;
        v251 = __OFSUB__(v145, 1);
        v252 = v145 - 1;
        v345 = v250;
        if (v252 < 0 != v251)
          v252 = v250;
        if (v16 >= 1)
        {
          v253 = (uint64_t)v252 >> 1;
          v254 = v62;
          if ((int)v253 <= 1)
            v255 = 1;
          else
            v255 = v253;
          v328 = 8 * v326;
          v256 = v328 - 8 * v62;
          v334 = (float *)&v320[v256];
          v335 = 0;
          v341 = (8 * v250 - 8) * v327;
          v333 = (float32x2_t *)((char *)v17 + v256);
          v257 = 8 * v62;
          v258 = 8 * v327;
          v338 = v62;
          v259 = -8 * v62;
          v331 = &v17[(unint64_t)v257 / 8];
          v332 = (float *)&v320[v257];
          v260 = a8 / (int)v250;
          v330 = v62;
          while (v62 < 1)
          {
LABEL_127:
            v334 = (float *)((char *)v334 + v328);
            v335 += v326;
            v332 = (float *)((char *)v332 + v328);
            v62 = v330;
            v331 = (float32x2_t *)((char *)v331 + v328);
            v333 = (float32x2_t *)((char *)v333 + v328);
            v17 = a2;
            if (v335 >= v336)
              goto LABEL_128;
          }
          v261 = 0;
          v262 = 0;
          v263 = 0;
          v264 = v332;
          v265 = v333;
          v266 = v331;
          v267 = (float *)(a7 + 4);
          v268 = (float *)(a7 + 4);
          v269 = v334;
          while (2)
          {
            v270 = (float *)&a2[v335 + v263];
            v271 = *v270;
            v272 = v270[1];
            if (v263)
            {
              if (v345 >= 3)
              {
                v273 = v268;
                v274 = v267;
                v275 = v255;
                v276 = (float *)a10 + 1;
                v277 = v264;
                v278 = v269;
                v279 = *v270;
                v280 = v270[1];
                do
                {
                  v281 = *(v277 - 1);
                  v282 = *(v273 - 1);
                  v283 = (float)(v281 * v282) - (float)(*v277 * *v273);
                  v284 = (float)(v282 * *v277) + (float)(v281 * *v273);
                  v285 = *(v278 - 1);
                  v286 = *(v274 - 1);
                  v287 = (float)(v285 * v286) - (float)(*v278 * *v274);
                  v288 = (float)(v286 * *v278) + (float)(v285 * *v274);
                  v289 = v284 - v288;
                  v290 = v284 + v288;
                  v279 = v279 + (float)(v283 + v287);
                  v280 = v280 + v290;
                  *(v276 - 1) = v283 + v287;
                  *v276 = v289;
                  v291 = &v276[2 * v253];
                  v278 = (float *)((char *)v278 + v259);
                  v277 = (float *)((char *)v277 + v257);
                  *(v291 - 1) = v283 - v287;
                  *v291 = v290;
                  v276 += 2;
                  v274 = (float *)((char *)v274 + v262);
                  v273 = (float *)((char *)v273 + v261);
                  --v275;
                }
                while (v275);
LABEL_118:
                *v270 = v279;
                v270[1] = v280;
                LODWORD(result) = 1;
                v298 = v254;
                do
                {
                  v299 = result * v260;
                  v300 = v255;
                  v301 = a10;
                  v302 = v271;
                  v303 = v272;
                  v304 = v271;
                  v305 = v272;
                  v306 = result * v260;
                  do
                  {
                    v307 = *(float32x2_t *)(a7 + 8 * v306);
                    v308 = vmul_f32(v307, *v301);
                    v309 = vmul_f32(v307, (float32x2_t)vrev64_s32((int32x2_t)v301[v253]));
                    v302 = v302 + vaddv_f32(v308);
                    v304 = v304 + (float)(v308.f32[0] - v308.f32[1]);
                    v303 = v303 + (float)(v309.f32[0] - v309.f32[1]);
                    v305 = v305 + vaddv_f32(v309);
                    v310 = v306 + v299;
                    if (v306 + v299 >= a8)
                      v311 = a8;
                    else
                      v311 = 0;
                    v306 = v310 - v311;
                    ++v301;
                    --v300;
                  }
                  while (v300);
                  v312 = &v270[2 * v298];
                  *v312 = v304;
                  v312[1] = v305;
                  v313 = &v270[2 * (v326 - v298)];
                  *v313 = v302;
                  v313[1] = v303;
                  v298 += v254;
                  v314 = (_DWORD)result == (_DWORD)v255;
                  result = (result + 1);
                }
                while (!v314);
              }
            }
            else if (v345 >= 3)
            {
              v292 = v265;
              v293 = v266;
              v294 = v255;
              v295 = a10;
              v279 = *v270;
              v280 = v270[1];
              do
              {
                v296 = vadd_f32(*v293, *v292);
                v297 = vsub_f32(*v293, *v292);
                *v295 = (float32x2_t)__PAIR64__(v297.u32[1], v296.u32[0]);
                v297.i32[1] = v296.i32[1];
                v295[v253] = v297;
                v279 = v279 + v296.f32[0];
                v280 = v280 + v296.f32[1];
                ++v295;
                v293 = (float32x2_t *)((char *)v293 + v257);
                v292 = (float32x2_t *)((char *)v292 + v259);
                --v294;
              }
              while (v294);
              goto LABEL_118;
            }
            ++v263;
            v269 += 2;
            v264 += 2;
            v267 = (float *)((char *)v267 + v341);
            v262 -= v258;
            v268 = (float *)((char *)v268 + v258);
            v261 += v258;
            ++v266;
            ++v265;
            if (v263 == v338)
              goto LABEL_127;
            continue;
          }
        }
      }
LABEL_128:
      v144 = v325 + 1;
      v62 = v326;
      v16 = a3;
    }
    while (v325 + 1 != v322);
  }
  if (v143.f32[0] == 1.0)
  {
    if ((a11 & 1) != 0)
    {
      if (v16 >= 2)
      {
        v317 = 0;
        v318 = (float *)&v17[1] + 1;
        do
        {
          v319 = -*v318;
          *(v318 - 2) = -*(v318 - 2);
          *v318 = v319;
          v318 += 4;
          v317 += 2;
        }
        while (v317 <= (v16 - 2));
      }
      else
      {
        LODWORD(v317) = 0;
      }
      if ((int)v317 < v16)
        v17[v16 - 1].f32[1] = -v17[v16 - 1].f32[1];
    }
  }
  else if (v16 >= 1)
  {
    v315 = -v143.f32[0];
    if ((a11 & 1) == 0)
      v315 = a9;
    v316 = v16;
    v143.f32[1] = v315;
    do
    {
      *v17 = vmul_f32(*v17, v143);
      ++v17;
      --v316;
    }
    while (v316);
  }
  return result;
}

void sub_219E2AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  cv::Exception::~Exception((cv::Exception *)(v51 - 224));
  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

float *cv::RealDFT<float>(float *result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, unsigned int a11)
{
  float32x2_t *v12;
  uint64_t v13;
  float v14;
  float *v15;
  int v16;
  float v17;
  float v18;
  _BOOL4 v19;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  _DWORD *v28;
  float v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int *v45;
  float *v46;
  unint64_t i;
  float v48;
  float *v49;

  if (a8 != a3)
    cv::RealDFT<float>();
  v12 = a2;
  v13 = (a11 >> 9) & 1;
  v14 = a9;
  v15 = (float *)a2 + v13;
  v16 = a3 - 1;
  if (a3 == 1)
  {
    *v15 = *result * v14;
LABEL_6:
    if ((a11 & 0x200) == 0)
      return result;
    v19 = (a3 & 1) == 0;
    v12 = (float32x2_t *)v15;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    v17 = result[1];
    v18 = (float)(*result - v17) * v14;
    *v15 = (float)(*result + v17) * v14;
    v15[1] = v18;
    goto LABEL_6;
  }
  if ((a3 & 1) == 0)
  {
    v22 = a3 >> 1;
    v23 = *a5 >> 1;
    *a5 = v23;
    result = (float *)cv::DFT<float>((uint64_t)result, (float32x2_t *)((char *)a2 + 4 * v13), a3 >> 1, a4 - (v23 == 1), &a5[v23 == 1], a6, a7, a3, 1.0, a10, 0);
    *a5 *= 2;
    v24 = v15[1];
    v25 = (float)(*v15 - v24) * v14;
    *v15 = (float)(*v15 + v24) * v14;
    v15[1] = v25;
    v26 = v15[v22];
    v27 = v15[v16];
    v15[v16] = v25;
    if (a3 < 6)
    {
      LODWORD(v33) = 2;
    }
    else
    {
      v28 = (_DWORD *)v12 + v13;
      v29 = v14 * 0.5;
      v30 = (float *)&v28[a3 - 3];
      v31 = (float *)(a7 + 12);
      v32 = (float *)(v28 + 2);
      v33 = 2;
      do
      {
        v34 = v32[1];
        v35 = v29 * (float)(v27 + v34);
        v36 = v34 - v27;
        v27 = *v30;
        v37 = v30[1];
        v38 = v29 * (float)(v37 - *v32);
        v39 = v37 + *v32;
        v40 = *(v31 - 1);
        v41 = (float)(v35 * v40) - (float)(v38 * *v31);
        v42 = v29 * v39;
        v43 = v29 * v36;
        v44 = (float)(v40 * v38) + (float)(v35 * *v31);
        *(v32 - 1) = v42 + v41;
        *v30 = v42 - v41;
        *v32 = v43 + v44;
        v32 += 2;
        v33 += 2;
        v30[1] = v44 - v43;
        v30 -= 2;
        v31 += 2;
      }
      while (v33 < v22);
    }
    if ((int)v33 <= v22)
    {
      v49 = &v15[v22];
      *(v49 - 1) = v26 * v14;
      *v49 = -(float)(v27 * v14);
    }
    goto LABEL_6;
  }
  a2->f32[0] = *result * v14;
  a2->i32[1] = 0;
  if (a3 >= 2)
  {
    v45 = a6 + 2;
    v46 = (float *)&a2[2] + 1;
    for (i = 1; i < a3; i += 2)
    {
      v48 = result[*v45] * v14;
      *(v46 - 3) = result[*(v45 - 1)] * v14;
      *(v46 - 2) = 0.0;
      *(v46 - 1) = v48;
      *v46 = 0.0;
      v46 += 4;
      v45 += 2;
    }
  }
  result = (float *)cv::DFT<float>((uint64_t)a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
  if ((a11 & 0x200) == 0)
  {
    v12->i32[1] = v12->i32[0];
    return result;
  }
  v19 = 0;
LABEL_8:
  if (a3 == 1 || v19)
  {
    v12[-1].i32[1] = v12->i32[0];
    v12->i32[0] = 0;
    if (a3 >= 2)
      v12->i32[a3] = 0;
  }
  return result;
}

float32x2_t *cv::CCSIDFT<float>(float32x2_t *result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, __int16 a11)
{
  float32x2_t *v13;
  float *v14;
  __int32 v15;
  float v16;
  int v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float32_t v23;
  float32_t v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t *v48;
  uint64_t v49;
  int *v50;
  float32x2_t *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t *v58;
  float32x2_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  float v63;
  uint64_t v64;
  unint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  int v69;
  int v70;
  float32x2_t v71;
  unint64_t v72;
  float v73;

  if (a8 != a3)
    cv::CCSIDFT<float>();
  v13 = a2;
  v14 = (float *)result;
  v15 = 0;
  if ((a11 & 0x200) != 0)
  {
    if (result == a2)
      cv::CCSIDFT<float>();
    v14 = (float *)result + 1;
    v15 = result->i32[1];
    result->i32[1] = result->i32[0];
  }
  v16 = a9;
  if (a3 == 2)
  {
    v19 = v14[1];
    v18 = *v14 + v19;
    a2->f32[1] = (float)(*v14 - v19) * v16;
    goto LABEL_9;
  }
  v17 = a3 - 1;
  if (a3 == 1)
  {
    v18 = *v14;
LABEL_9:
    a2->f32[0] = v18 * v16;
    goto LABEL_10;
  }
  v20 = (a3 + 1) >> 1;
  v73 = a9;
  if ((a3 & 1) != 0)
  {
    a2->f32[0] = *v14;
    a2->i32[1] = 0;
    if (a3 > 2)
    {
      if (v20 <= 2)
        v49 = 2;
      else
        v49 = v20;
      v50 = &a6[a3 - 1];
      v51 = (float32x2_t *)(v14 + 1);
      v52 = a6 + 1;
      v53 = v49 - 1;
      do
      {
        v55 = *v52++;
        v54 = v55;
        v57 = *v50--;
        v56 = v57;
        v58 = &a2[v54];
        v59 = *v51++;
        v58->i32[0] = v59.i32[0];
        v58->f32[1] = -v59.f32[1];
        a2[v56] = v59;
        --v53;
      }
      while (v53);
    }
    result = (float32x2_t *)cv::DFT<float>((uint64_t)a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
    v13->f32[0] = v13->f32[0] * v73;
    if (a3 >= 2)
    {
      v60 = 0;
      v61 = (float *)&v13[2];
      do
      {
        v62 = *(v61 - 2) * v73;
        v63 = *v61;
        v61 += 4;
        v64 = (uint64_t)&v13[v60 + 2];
        *(float *)(v64 - 12) = v62;
        *(float *)(v64 - 8) = v63 * v73;
        v65 = v60 * 2 + 3;
        ++v60;
      }
      while (v65 < a3);
    }
  }
  else
  {
    v21 = v14[v17];
    v22 = v14[1];
    v23 = *v14 + v21;
    v24 = v21 - *v14;
    a2->f32[0] = v23;
    a2->f32[1] = v24;
    if (a3 < 5)
    {
      LODWORD(v30) = 2;
    }
    else
    {
      v25 = 0;
      v26 = &v14[a3 - 3];
      v27 = a7 + 8;
      v28 = a6 + 1;
      v29 = &a6[v20 - 1];
      v30 = 2;
      v31 = a3;
      do
      {
        v32 = v26[1];
        v33 = v22 + *v26;
        v34 = v22 - *v26;
        v35 = v14[v25 / 4 + 2];
        v22 = v14[v25 / 4 + 3];
        v36 = v35 - v32;
        v37 = v35 + v32;
        v38 = *(float *)(v27 + v25);
        v39 = *(float *)(v27 + v25 + 4);
        v40 = (float)(v37 * v39) + (float)(v34 * v38);
        v41 = (float)(v37 * v38) - (float)(v34 * v39);
        v42 = v33 - v41;
        v43 = (float)-v36 - v40;
        v44 = v33 + v41;
        if (v14 == (float *)a2)
        {
          v48 = &a2[v25 / 8];
          v48[1].f32[0] = v42;
          v48[1].f32[1] = v43;
          a2[-1].f32[v31] = v44;
          v47 = v31 - 1;
        }
        else
        {
          v45 = (float *)a2 + *v28;
          *v45 = v42;
          v45[1] = v43;
          v46 = *v29;
          a2->f32[v46] = v44;
          v47 = v46 + 1;
        }
        a2->f32[v47] = v36 - v40;
        v30 += 2;
        v26 -= 2;
        v31 -= 2;
        v25 += 8;
        ++v28;
        --v29;
      }
      while (v30 < v20);
    }
    if ((int)v30 <= v20)
    {
      v66 = v22 + v22;
      v67 = v14[v20] + v14[v20];
      if (v14 == (float *)a2)
      {
        a2->f32[v20] = v66;
        v69 = v20 + 1;
      }
      else
      {
        v68 = a6[v20];
        a2[v68].f32[0] = v66;
        v69 = (2 * v68) | 1;
      }
      a2->f32[v69] = v67;
    }
    v70 = *a5 >> 1;
    *a5 = v70;
    result = (float32x2_t *)cv::DFT<float>((uint64_t)a2, a2, v20, a4 - (v70 == 1), &a5[v70 == 1], a6, a7, a3, 1.0, a10, (v14 != (float *)a2) << 8);
    *a5 *= 2;
    v71.f32[0] = v73;
    if (a3 >= 1)
    {
      v72 = 0;
      do
      {
        v71.f32[1] = -v73;
        *v13 = vmul_f32(*v13, v71);
        ++v13;
        v72 += 2;
      }
      while (v72 < a3);
    }
  }
LABEL_10:
  if ((a11 & 0x200) != 0)
    *(_DWORD *)v14 = v15;
  return result;
}

float64_t cv::DFT<double>(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, float64x2_t *a10, __int16 a11)
{
  float64x2_t v11;
  int v15;
  int v16;
  float64x2_t *v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  unsigned int v24;
  cv *v26;
  const cv::Exception *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  double *v57;
  double v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  float64x2_t *v67;
  uint64_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  double *f64;
  double *v73;
  double v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  unint64_t v88;
  int v89;
  double *v90;
  double *v91;
  float64x2_t *v92;
  float64x2_t *v93;
  float64x2_t *v94;
  double *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float64x2_t *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t *v126;
  double *v127;
  double *v128;
  double v129;
  double v130;
  double v131;
  double *v132;
  uint64_t v133;
  double *v134;
  double *v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  float64x2_t *v147;
  float64x2_t *v148;
  float64x2_t *v149;
  float64x2_t *v150;
  float64x2_t *v151;
  unint64_t v152;
  int v153;
  int v154;
  double *v155;
  double *v156;
  double *v157;
  double *v158;
  double *v159;
  double *v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double *v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double *v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double *v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  double *v213;
  double *v214;
  double *v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double *v226;
  uint64_t v227;
  int v228;
  double *v229;
  double *v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double *v236;
  double *v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  uint64_t v251;
  BOOL v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  double *v265;
  float64x2_t *v266;
  float64x2_t *v267;
  double *v268;
  double *v269;
  double *v270;
  double *v271;
  double v272;
  double v273;
  double *v274;
  double *v275;
  uint64_t v276;
  double *v277;
  double *v278;
  double *v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double *v292;
  float64x2_t *v293;
  float64x2_t *v294;
  uint64_t v295;
  float64x2_t *v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  float64x2_t *v304;
  double v305;
  double v306;
  double v307;
  double v308;
  int v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  int v313;
  int v314;
  double *v315;
  double *v316;
  float64x2_t v318;
  double v319;
  uint64_t v320;
  unint64_t v321;
  double *v322;
  double v323;
  float64x2_t *v324;
  float64_t *v326;
  float64x2_t *v327;
  uint64_t v328;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  int v335;
  int v336;
  float64x2_t *v337;
  double *v338;
  float64x2_t *v339;
  double *v340;
  uint64_t v341;
  uint64_t v342;
  int v344;
  uint64_t v345;
  float64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  void *__p[2];
  void *v354[2];
  _QWORD v355[2];
  char v356[128];

  v11.f64[0] = a9;
  v15 = a4;
  v16 = a3;
  v17 = (float64x2_t *)a2;
  v18 = a11;
  if (a8 == a3)
  {
    v19 = 1;
  }
  else
  {
    if (a8 == 2 * a3)
      v19 = 2;
    else
      v19 = a8 / a3;
    v18 = a11;
  }
  if (a2 == a1)
  {
    if ((v18 & 0x100) == 0)
    {
      if (*a5 != a5[a4 - 1])
      {
        std::string::basic_string[abi:ne180100]<0>(v355, "factors[0] == factors[nf-1]");
        std::string::basic_string[abi:ne180100]<0>(v354, "DFT");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
        v26 = (cv *)cv::Exception::Exception(v356, 4294967081, v355, v354, __p, 599);
        cv::error(v26, v27);
      }
      if (a4 == 1)
      {
        if ((a3 & 3) == 0)
        {
          v28 = a3 >= 0 ? a3 : a3 + 1;
          if (a3 >= 2)
          {
            v29 = 0;
            v30 = v28 >> 1;
            v31 = (uint64_t)v28 >> 1;
            v32 = (__int128 *)(a2 + 16);
            v33 = a2 + 16 * v30;
            do
            {
              v34 = *a6;
              if (v34 >= v31)
                cv::DFT<float>();
              v35 = *v32;
              *v32 = *(_OWORD *)(v33 + 16 * v34);
              *(_OWORD *)(v33 + 16 * v34) = v35;
              if (v29 < v34)
              {
                v36 = *(v32 - 1);
                *(v32 - 1) = *(_OWORD *)(a2 + 16 * v34);
                *(_OWORD *)(a2 + 16 * v34) = v36;
                v37 = v34 + 1;
                v38 = v32[v31];
                v32[v31] = *(_OWORD *)(v33 + 16 * v37);
                *(_OWORD *)(v33 + 16 * v37) = v38;
              }
              v29 += 2;
              v32 += 2;
              a6 += 2 * v19;
            }
            while (v29 < v31);
          }
        }
      }
      else if (a3 >= 1)
      {
        v52 = 0;
        v53 = (__int128 *)a2;
        do
        {
          v54 = *a6;
          if (v54 >= a3)
            cv::DFT<float>();
          if (v52 < v54)
          {
            v55 = *v53;
            *v53 = *(_OWORD *)(a2 + 16 * v54);
            *(_OWORD *)(a2 + 16 * v54) = v55;
          }
          ++v52;
          ++v53;
          a6 += v19;
        }
        while (a3 != v52);
      }
    }
    if ((a11 & 1) != 0)
    {
      if (a3 >= 2)
      {
        v56 = 0;
        v57 = (double *)(a2 + 24);
        do
        {
          v58 = -*v57;
          *(v57 - 2) = -*(v57 - 2);
          *v57 = v58;
          v57 += 4;
          v56 += 2;
        }
        while (v56 <= (a3 - 2));
      }
      else
      {
        LODWORD(v56) = 0;
      }
      if ((int)v56 < a3)
        *(double *)(a2 + 16 * a3 - 8) = -*(double *)(a2 + 16 * a3 - 8);
    }
  }
  else
  {
    if ((v18 & 0x100) != 0)
      cv::DFT<float>();
    v20 = a3 - 2;
    if ((v18 & 1) != 0)
    {
      v39 = 0;
      if (a3 >= 2)
      {
        v40 = a2 + 16;
        do
        {
          v41 = *a6;
          v42 = a6[v19];
          if (v41 >= a3 || v42 >= a3)
            cv::DFT<float>();
          a6 += 2 * v19;
          v44 = a1 + 16 * v41;
          v45 = -*(double *)(v44 + 8);
          *(_QWORD *)(v40 - 16) = *(_QWORD *)v44;
          *(double *)(v40 - 8) = v45;
          v46 = a1 + 16 * (int)v42;
          v47 = -*(double *)(v46 + 8);
          *(_QWORD *)v40 = *(_QWORD *)v46;
          *(double *)(v40 + 8) = v47;
          v40 += 32;
          v39 += 2;
        }
        while (v20 >= v39);
      }
      if (v39 < a3)
      {
        v48 = a1 + 16 * a3;
        v49 = *(_QWORD *)(v48 - 16);
        v50 = -*(double *)(v48 - 8);
        v51 = a2 + 16 * v39;
        *(_QWORD *)v51 = v49;
        *(double *)(v51 + 8) = v50;
      }
    }
    else
    {
      v21 = 0;
      if (a3 >= 2)
      {
        v22 = (_OWORD *)(a2 + 16);
        do
        {
          v23 = *a6;
          v24 = a6[v19];
          if (v23 >= a3 || v24 >= a3)
            cv::DFT<float>();
          a6 += 2 * v19;
          *(v22 - 1) = *(_OWORD *)(a1 + 16 * v23);
          *v22 = *(_OWORD *)(a1 + 16 * (int)v24);
          v22 += 2;
          v21 += 2;
        }
        while (v20 >= v21);
      }
      if (v21 < a3)
        *(_OWORD *)(a2 + 16 * a3 - 16) = *(_OWORD *)(a1 + 16 * a3 - 16);
    }
  }
  v59 = *a5;
  if ((*a5 & 1) != 0)
  {
    v62 = 1;
    v333 = a8;
  }
  else
  {
    if (v59 < 4)
    {
      v60 = 1;
      v61 = a8;
    }
    else
    {
      v346 = v11.f64[0];
      cv::checkHardwareSupport((cv *)4);
      v59 = *a5;
      if (*a5 >= 4)
      {
        v344 = v15;
        v63 = v16;
        v349 = a7 + 8;
        v60 = 1;
        v64 = 4;
        v61 = a8;
        v11.f64[0] = v346;
        v350 = *a5;
        do
        {
          v65 = v60;
          v60 = v64;
          v61 /= 4;
          if (v16 >= 1)
          {
            v66 = 0;
            v67 = &v17[v65];
            v68 = 16 * v60;
            v69 = &v17[3 * v65];
            v70 = v17;
            v71 = &v17[2 * v65];
            do
            {
              f64 = v17[v66].f64;
              v73 = &f64[4 * v65];
              v74 = v73[1];
              v75 = &v73[2 * v65];
              v76 = v75[1];
              v77 = *v73 + *v75;
              v78 = v74 + v76;
              v79 = v74 - v76;
              v80 = *v75 - *v73;
              v81 = f64[1];
              v82 = &f64[2 * v65];
              v83 = v82[1];
              v84 = *f64 + *v82;
              v85 = v81 + v83;
              v86 = *f64 - *v82;
              v87 = v81 - v83;
              *f64 = v77 + v84;
              f64[1] = v78 + v85;
              *v73 = v84 - v77;
              v73[1] = v85 - v78;
              *v82 = v79 + v86;
              v82[1] = v80 + v87;
              *v75 = v86 - v79;
              v75[1] = v87 - v80;
              if (v65 >= 2)
              {
                v88 = 0;
                v89 = 2 * v61;
                v90 = (double *)(v349 + 16 * v61);
                v91 = (double *)(v349 + 48 * v61);
                do
                {
                  v92 = &v70[v88 / 0x10];
                  v93 = &v71[v88 / 0x10];
                  v94 = &v67[v88 / 0x10];
                  v95 = (double *)(a7 + 16 * v89);
                  v96 = v67[v88 / 0x10 + 1].f64[0];
                  v97 = v67[v88 / 0x10 + 1].f64[1];
                  v98 = v95[1];
                  v99 = v96 * *v95 - v97 * v98;
                  v100 = *v95 * v97 + v96 * v98;
                  v101 = *(v90 - 1);
                  v102 = v71[v88 / 0x10 + 1].f64[0];
                  v103 = v71[v88 / 0x10 + 1].f64[1];
                  v104 = v103 * v101 + v102 * *v90;
                  v105 = v102 * v101 - v103 * *v90;
                  v106 = &v69[v88 / 0x10];
                  v107 = *(v91 - 1);
                  v108 = v69[v88 / 0x10 + 1].f64[0];
                  v109 = v69[v88 / 0x10 + 1].f64[1];
                  v110 = v109 * v107 + v108 * *v91;
                  v111 = v108 * v107 - v109 * *v91;
                  v112 = v105 + v111;
                  v113 = v104 + v110;
                  v114 = v104 - v110;
                  v115 = v111 - v105;
                  v116 = v70[v88 / 0x10 + 1].f64[0];
                  v117 = v70[v88 / 0x10 + 1].f64[1];
                  v118 = v99 + v116;
                  v119 = v100 + v117;
                  v120 = v116 - v99;
                  v121 = v117 - v100;
                  v92[1].f64[0] = v118 + v112;
                  v92[1].f64[1] = v119 + v113;
                  v93[1].f64[0] = v118 - v112;
                  v93[1].f64[1] = v119 - v113;
                  v94[1].f64[0] = v120 + v114;
                  v94[1].f64[1] = v115 + v121;
                  v106[1].f64[0] = v120 - v114;
                  v106[1].f64[1] = v121 - v115;
                  v91 += 6 * v61;
                  v90 += 2 * v61;
                  v89 += 2 * v61;
                  v88 += 16;
                }
                while (16 * v65 - 16 != v88);
              }
              v66 += v60;
              v67 = (float64x2_t *)((char *)v67 + v68);
              v69 = (float64x2_t *)((char *)v69 + v68);
              v71 = (float64x2_t *)((char *)v71 + v68);
              v70 = (float64x2_t *)((char *)v70 + v68);
              v17 = (float64x2_t *)a2;
            }
            while (v66 < v63);
          }
          v64 = 4 * v60;
          v59 = v350;
          v16 = a3;
        }
        while (4 * v60 <= v350);
        v15 = v344;
      }
      else
      {
        v60 = 1;
        v61 = a8;
        v11.f64[0] = v346;
      }
    }
    while (v60 < v59)
    {
      v122 = v60;
      v60 *= 2;
      if (v61 >= 0)
        v123 = v61;
      else
        v123 = v61 + 1;
      v61 = v123 >> 1;
      if (v16 >= 1)
      {
        v124 = 0;
        v125 = 2 * v122;
        v126 = v17 + 1;
        do
        {
          v127 = v17[v124].f64;
          v128 = &v127[2 * v122];
          v129 = v127[1];
          v130 = v128[1];
          v131 = *v127 - *v128;
          *v127 = *v127 + *v128;
          v127[1] = v129 + v130;
          *v128 = v131;
          v128[1] = v129 - v130;
          if (v122 >= 2)
          {
            v132 = (double *)v126;
            v133 = v122 - 1;
            v134 = (double *)(a7 + 8 + 16 * v61);
            do
            {
              v135 = &v132[v125];
              v136 = *(v134 - 1);
              v137 = v132[2 * v122];
              v138 = v132[v125 + 1];
              v139 = v137 * v136 - v138 * *v134;
              v140 = v137 * *v134 + v138 * v136;
              v141 = *v132;
              v142 = v132[1];
              *v132 = *v132 + v139;
              v132[1] = v142 + v140;
              v132 += 2;
              *v135 = v141 - v139;
              v135[1] = v142 - v140;
              v134 += 2 * v61;
              --v133;
            }
            while (v133);
          }
          v124 += v60;
          v126 += v60;
        }
        while (v124 < v16);
      }
    }
    v333 = v61;
    v62 = v60;
  }
  if (!(v59 & 1) < v15)
  {
    v342 = v16;
    v143 = (v59 & 1) == 0;
    v327 = v17 + 1;
    v328 = v15;
    v326 = &v17->f64[1];
    do
    {
      v331 = v143;
      v144 = a5[v143];
      v332 = v144 * v62;
      v333 /= v144;
      if (v144 == 3)
      {
        if (v16 >= 1)
        {
          v209 = 0;
          v210 = 4 * v62;
          v211 = 2 * v62;
          v212 = (double *)v327;
          do
          {
            v213 = v17[v209].f64;
            v214 = &v213[2 * v62];
            v215 = &v213[4 * v62];
            v216 = v214[1];
            v217 = v215[1];
            v218 = *v214 + *v215;
            v219 = v216 + v217;
            v220 = *v213;
            v221 = v213[1];
            v222 = (v216 - v217) * 0.866025404;
            v223 = (*v215 - *v214) * 0.866025404;
            *v213 = v218 + *v213;
            v213[1] = v219 + v221;
            v224 = v220 + v218 * -0.5;
            v225 = v221 + v219 * -0.5;
            *v214 = v224 + v222;
            v214[1] = v223 + v225;
            *v215 = v224 - v222;
            v215[1] = v225 - v223;
            if (v62 >= 2)
            {
              v226 = v212;
              v227 = v62 - 1;
              v228 = 2 * v333;
              v229 = (double *)(a7 + 8 + 16 * v333);
              do
              {
                v230 = &v226[v211];
                v231 = *(v229 - 1);
                v232 = v226[2 * v62];
                v233 = v226[v211 + 1];
                v234 = v232 * v231 - v233 * *v229;
                v235 = v231 * v233 + v232 * *v229;
                v236 = &v226[v210];
                v237 = (double *)(a7 + 16 * v228);
                v238 = v226[4 * v62];
                v239 = v226[v210 + 1];
                v240 = v237[1];
                v241 = v238 * *v237 - v239 * v240;
                v242 = *v237 * v239 + v238 * v240;
                v243 = v234 + v241;
                v244 = v235 + v242;
                v245 = (v235 - v242) * 0.866025404;
                v246 = (v241 - v234) * 0.866025404;
                v247 = *v226;
                v248 = v226[1];
                *v226 = *v226 + v243;
                v226[1] = v248 + v244;
                v226 += 2;
                v249 = v247 + v243 * -0.5;
                v250 = v248 + v244 * -0.5;
                *v230 = v245 + v249;
                v230[1] = v250 + v246;
                *v236 = v249 - v245;
                v236[1] = v250 - v246;
                v229 += 2 * v333;
                v228 += 2 * v333;
                --v227;
              }
              while (v227);
            }
            v209 += v332;
            v212 += 2 * v332;
          }
          while (v209 < v342);
        }
      }
      else if (v144 == 5)
      {
        if (v16 >= 1)
        {
          v145 = 0;
          v146 = 16 * v62;
          v147 = &v17[2 * v62];
          v347 = 16 * v332;
          v148 = &v17[4 * v62];
          v149 = &v17[2 * v62 + v62];
          v150 = v17;
          v151 = &v17[v62];
          v335 = v62;
          do
          {
            v351 = v145;
            if (v62 >= 1)
            {
              v152 = 0;
              v153 = 0;
              v154 = 0;
              v155 = (double *)(a7 + 8);
              v156 = (double *)(a7 + 8);
              do
              {
                v157 = v150[v152 / 0x10].f64;
                v158 = v147[v152 / 0x10].f64;
                v159 = v148[v152 / 0x10].f64;
                v160 = v151[v152 / 0x10].f64;
                v161 = *(v156 - 1);
                v162 = v151[v152 / 0x10].f64[0];
                v163 = v151[v152 / 0x10].f64[1];
                v164 = v162 * v161 - v163 * *v156;
                v165 = (double *)(a7 + 16 * v154);
                v166 = v161 * v163 + v162 * *v156;
                v168 = v148[v152 / 0x10].f64[0];
                v167 = v148[v152 / 0x10].f64[1];
                v169 = v165[1];
                v170 = v168 * *v165 - v167 * v169;
                v171 = *v165 * v167 + v168 * v169;
                v172 = v164 + v170;
                v173 = v149[v152 / 0x10].f64;
                v174 = *(v155 - 1);
                v175 = v149[v152 / 0x10].f64[0];
                v176 = v149[v152 / 0x10].f64[1];
                v177 = v166 + v171;
                v178 = v175 * v174 - v176 * *v155;
                v179 = v164 - v170;
                v180 = v174 * v176 + v175 * *v155;
                v181 = (double *)(a7 + 16 * v153);
                v182 = v147[v152 / 0x10].f64[0];
                v183 = v147[v152 / 0x10].f64[1];
                v184 = v166 - v171;
                v185 = v181[1];
                v186 = v182 * *v181 - v183 * v185;
                v187 = *v181 * v183 + v182 * v185;
                v188 = v178 + v186;
                v189 = v180 + v187;
                v190 = v178 - v186;
                v191 = v180 - v187;
                v192 = v150[v152 / 0x10].f64[0];
                v193 = v150[v152 / 0x10].f64[1];
                v194 = v192 + v172 + v188;
                v195 = v193 + v177 + v189;
                v196 = v192 + (v172 + v188) * -0.25;
                v197 = v172 - v188;
                v198 = v193 + (v177 + v189) * -0.25;
                v199 = v197 * 0.559016994;
                v200 = (v177 - v189) * 0.559016994;
                v201 = (v184 + v191) * 0.951056516;
                v202 = (v179 + v190) * -0.951056516;
                *v157 = v194;
                v157[1] = v195;
                v203 = v201 - v184 * 0.363271264;
                v204 = v179 * 0.363271264 + v202;
                v205 = v201 - v191 * 1.53884177;
                v206 = v202 + v190 * 1.53884177;
                v207 = v196 + v199;
                v208 = v196 - v199;
                *v160 = v205 + v207;
                v160[1] = v198 + v200 + v206;
                *v159 = v207 - v205;
                v159[1] = v198 + v200 - v206;
                *v158 = v203 + v208;
                v158[1] = v198 - v200 + v204;
                *v173 = v208 - v203;
                v173[1] = v198 - v200 - v204;
                v155 += 6 * v333;
                v156 += 2 * v333;
                v154 += 4 * v333;
                v153 += 2 * v333;
                v152 += 16;
              }
              while (v146 != v152);
            }
            v145 += v332;
            v147 = (float64x2_t *)((char *)v147 + v347);
            v148 = (float64x2_t *)((char *)v148 + v347);
            v149 = (float64x2_t *)((char *)v149 + v347);
            v151 = (float64x2_t *)((char *)v151 + v347);
            v150 = (float64x2_t *)((char *)v150 + v347);
            v17 = (float64x2_t *)a2;
            v62 = v335;
          }
          while (v351 + v332 < v342);
        }
      }
      else
      {
        v251 = v144;
        v252 = __OFSUB__(v144, 1);
        v253 = v144 - 1;
        v352 = v251;
        if (v253 < 0 != v252)
          v253 = v251;
        if (v16 >= 1)
        {
          v254 = (uint64_t)v253 >> 1;
          v255 = v62;
          if ((int)v254 <= 1)
            v256 = 1;
          else
            v256 = v254;
          v334 = 16 * v332;
          v257 = v334 - 16 * v62;
          v340 = (float64_t *)((char *)v326 + v257);
          v341 = 0;
          v348 = (16 * v251 - 16) * v333;
          v339 = (float64x2_t *)((char *)v17 + v257);
          v258 = 2 * v62;
          v259 = 16 * v333;
          v345 = v62;
          v260 = -16 * v62;
          v337 = &v17[(unint64_t)v258 / 2];
          v338 = &v326[v258];
          v261 = a8 / (int)v251;
          v336 = v62;
          while (v62 < 1)
          {
LABEL_127:
            v340 = (double *)((char *)v340 + v334);
            v341 += v332;
            v338 = (double *)((char *)v338 + v334);
            v62 = v336;
            v337 = (float64x2_t *)((char *)v337 + v334);
            v339 = (float64x2_t *)((char *)v339 + v334);
            v17 = (float64x2_t *)a2;
            if (v341 >= v342)
              goto LABEL_128;
          }
          v262 = 0;
          v263 = 0;
          v264 = 0;
          v265 = v338;
          v266 = v339;
          v267 = v337;
          v268 = (double *)(a7 + 8);
          v269 = (double *)(a7 + 8);
          v270 = v340;
          while (2)
          {
            v271 = (double *)(a2 + 16 * v341 + 16 * v264);
            v272 = *v271;
            v273 = v271[1];
            if (v264)
            {
              if (v352 >= 3)
              {
                v274 = v269;
                v275 = v268;
                v276 = v256;
                v277 = &a10->f64[1];
                v278 = v265;
                v279 = v270;
                v280 = *v271;
                v281 = v271[1];
                do
                {
                  v282 = *(v278 - 1);
                  v283 = *(v274 - 1);
                  v284 = v282 * v283 - *v278 * *v274;
                  v285 = v283 * *v278 + v282 * *v274;
                  v286 = *(v279 - 1);
                  v287 = *(v275 - 1);
                  v288 = v286 * v287 - *v279 * *v275;
                  v289 = v287 * *v279 + v286 * *v275;
                  v290 = v285 - v289;
                  v291 = v285 + v289;
                  v280 = v280 + v284 + v288;
                  v281 = v281 + v291;
                  *(v277 - 1) = v284 + v288;
                  *v277 = v290;
                  v292 = &v277[2 * v254];
                  v279 = (double *)((char *)v279 + v260);
                  v278 = (double *)((char *)v278 + v258 * 8);
                  *(v292 - 1) = v284 - v288;
                  *v292 = v291;
                  v277 += 2;
                  v275 = (double *)((char *)v275 + v263);
                  v274 = (double *)((char *)v274 + v262);
                  --v276;
                }
                while (v276);
LABEL_118:
                *v271 = v280;
                v271[1] = v281;
                v300 = 1;
                v301 = v255;
                do
                {
                  v302 = v300 * v261;
                  v303 = v256;
                  v304 = a10;
                  v305 = v272;
                  v306 = v273;
                  v307 = v272;
                  v308 = v273;
                  v309 = v300 * v261;
                  do
                  {
                    v310 = *(float64x2_t *)(a7 + 16 * v309);
                    v311 = vmulq_f64(v310, *v304);
                    v312 = vmulq_f64(v310, (float64x2_t)vextq_s8((int8x16_t)v304[v254], (int8x16_t)v304[v254], 8uLL));
                    v305 = v305 + vaddvq_f64(v311);
                    v307 = v307 + v311.f64[0] - v311.f64[1];
                    v306 = v306 + v312.f64[0] - v312.f64[1];
                    v308 = v308 + vaddvq_f64(v312);
                    v313 = v309 + v302;
                    if (v309 + v302 >= a8)
                      v314 = a8;
                    else
                      v314 = 0;
                    v309 = v313 - v314;
                    ++v304;
                    --v303;
                  }
                  while (v303);
                  v315 = &v271[2 * v301];
                  *v315 = v307;
                  v315[1] = v308;
                  v316 = &v271[2 * (v332 - v301)];
                  *v316 = v305;
                  v316[1] = v306;
                  v301 += v255;
                }
                while (v300++ != (_DWORD)v256);
              }
            }
            else if (v352 >= 3)
            {
              v293 = v266;
              v294 = v267;
              v295 = v256;
              v296 = a10;
              v280 = *v271;
              v281 = v271[1];
              do
              {
                v297 = vaddq_f64(*v294, *v293);
                v298 = vsubq_f64(*v294, *v293);
                v299.f64[0] = v297.f64[0];
                v299.f64[1] = v298.f64[1];
                *v296 = v299;
                v298.f64[1] = v297.f64[1];
                v296[v254] = v298;
                v280 = v280 + v297.f64[0];
                v281 = v281 + v297.f64[1];
                ++v296;
                v294 = (float64x2_t *)((char *)v294 + v258 * 8);
                v293 = (float64x2_t *)((char *)v293 + v260);
                --v295;
              }
              while (v295);
              goto LABEL_118;
            }
            ++v264;
            v270 += 2;
            v265 += 2;
            v268 = (double *)((char *)v268 + v348);
            v263 -= v259;
            v269 = (double *)((char *)v269 + v259);
            v262 += v259;
            ++v267;
            ++v266;
            if (v264 == v345)
              goto LABEL_127;
            continue;
          }
        }
      }
LABEL_128:
      v143 = v331 + 1;
      v62 = v332;
      v16 = a3;
    }
    while (v331 + 1 != v328);
  }
  v318.f64[0] = 1.0;
  if (v11.f64[0] == 1.0)
  {
    if ((a11 & 1) != 0)
    {
      if (v16 >= 2)
      {
        v321 = 0;
        v322 = &v17[1].f64[1];
        do
        {
          v318.f64[0] = -*(v322 - 2);
          v323 = -*v322;
          *(v322 - 2) = v318.f64[0];
          *v322 = v323;
          v322 += 4;
          v321 += 2;
        }
        while (v321 <= (v16 - 2));
      }
      else
      {
        LODWORD(v321) = 0;
      }
      if ((int)v321 < v16)
      {
        v324 = &v17[v16];
        v318.f64[0] = -v324[-1].f64[1];
        v324[-1].f64[1] = v318.f64[0];
      }
    }
  }
  else if (v16 >= 1)
  {
    v319 = -v11.f64[0];
    if ((a11 & 1) == 0)
      v319 = v11.f64[0];
    v320 = v16;
    v11.f64[1] = v319;
    do
    {
      v318 = vmulq_f64(v11, *v17);
      *v17++ = v318;
      --v320;
    }
    while (v320);
  }
  return v318.f64[0];
}

void sub_219E2C338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  cv::Exception::~Exception((cv::Exception *)(v47 - 208));
  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v47 - 209) < 0)
    operator delete(*(void **)(v47 - 232));
  _Unwind_Resume(a1);
}

void cv::RealDFT<double>(double *a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float64x2_t *a10, unsigned int a11)
{
  _QWORD *v13;
  uint64_t v14;
  double *v15;
  int v16;
  double v17;
  double v18;
  double v19;
  _BOOL4 v20;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  double v30;
  double *v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int *v46;
  double *v47;
  unint64_t i;
  double v49;
  double *v50;

  if (a8 != a3)
    cv::RealDFT<float>();
  v13 = (_QWORD *)a2;
  v14 = (a11 >> 9) & 1;
  v15 = (double *)(a2 + 8 * v14);
  v16 = a3 - 1;
  if (a3 == 1)
  {
    *v15 = *a1 * a9;
LABEL_6:
    if ((a11 & 0x200) == 0)
      return;
    v20 = (a3 & 1) == 0;
    v13 = v15;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    v17 = a1[1];
    v18 = (*a1 + v17) * a9;
    v19 = (*a1 - v17) * a9;
    *v15 = v18;
    v15[1] = v19;
    goto LABEL_6;
  }
  if ((a3 & 1) == 0)
  {
    v23 = a3 >> 1;
    v24 = *a5 >> 1;
    *a5 = v24;
    cv::DFT<double>((uint64_t)a1, a2 + 8 * v14, a3 >> 1, a4 - (v24 == 1), &a5[v24 == 1], a6, a7, a3, 1.0, a10, 0);
    *a5 *= 2;
    v25 = v15[1];
    v26 = (*v15 - v25) * a9;
    *v15 = (*v15 + v25) * a9;
    v15[1] = v26;
    v27 = v15[v23];
    v28 = v15[v16];
    v15[v16] = v26;
    if (a3 < 6)
    {
      LODWORD(v34) = 2;
    }
    else
    {
      v29 = &v13[v14];
      v30 = a9 * 0.5;
      v31 = (double *)&v29[a3 - 3];
      v32 = (double *)(a7 + 24);
      v33 = (double *)(v29 + 2);
      v34 = 2;
      do
      {
        v35 = v33[1];
        v36 = v30 * (v28 + v35);
        v37 = v35 - v28;
        v28 = *v31;
        v38 = v31[1];
        v39 = v30 * (v38 - *v33);
        v40 = v38 + *v33;
        v41 = *(v32 - 1);
        v42 = v36 * v41 - v39 * *v32;
        v43 = v30 * v40;
        v44 = v30 * v37;
        v45 = v41 * v39 + v36 * *v32;
        *(v33 - 1) = v43 + v42;
        *v31 = v43 - v42;
        *v33 = v44 + v45;
        v33 += 2;
        v34 += 2;
        v31[1] = v45 - v44;
        v31 -= 2;
        v32 += 2;
      }
      while (v34 < v23);
    }
    if ((int)v34 <= v23)
    {
      v50 = &v15[v23];
      *(v50 - 1) = v27 * a9;
      *v50 = -(v28 * a9);
    }
    goto LABEL_6;
  }
  *(double *)a2 = *a1 * a9;
  *(_QWORD *)(a2 + 8) = 0;
  if (a3 >= 2)
  {
    v46 = a6 + 2;
    v47 = (double *)(a2 + 40);
    for (i = 1; i < a3; i += 2)
    {
      v49 = a1[*v46] * a9;
      *(v47 - 3) = a1[*(v46 - 1)] * a9;
      *(v47 - 2) = 0.0;
      *(v47 - 1) = v49;
      *v47 = 0.0;
      v47 += 4;
      v46 += 2;
    }
  }
  cv::DFT<double>(a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
  if ((a11 & 0x200) == 0)
  {
    v13[1] = *v13;
    return;
  }
  v20 = 0;
LABEL_8:
  if (a3 == 1 || v20)
  {
    *(v13 - 1) = *v13;
    *v13 = 0;
    if (a3 >= 2)
      v13[a3] = 0;
  }
}

void cv::CCSIDFT<double>(double *a1, double *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, float64x2_t *a10, __int16 a11)
{
  float64x2_t *v13;
  double *v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  int *v49;
  __int128 *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  __int128 v58;
  uint64_t v59;
  double *f64;
  double v61;
  double v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  int v68;
  int v69;
  float64x2_t v70;
  unint64_t v71;

  if (a8 != a3)
    cv::CCSIDFT<float>();
  v13 = (float64x2_t *)a2;
  v14 = a1;
  v15 = 0;
  if ((a11 & 0x200) != 0)
  {
    if (a1 == a2)
      cv::CCSIDFT<float>();
    v14 = a1 + 1;
    v15 = *((_QWORD *)a1 + 1);
    a1[1] = *a1;
  }
  if (a3 == 2)
  {
    v18 = v14[1];
    v17 = *v14 + v18;
    a2[1] = (*v14 - v18) * a9;
    goto LABEL_9;
  }
  v16 = a3 - 1;
  if (a3 == 1)
  {
    v17 = *v14;
LABEL_9:
    *a2 = v17 * a9;
    goto LABEL_10;
  }
  v19 = (a3 + 1) >> 1;
  if ((a3 & 1) != 0)
  {
    *a2 = *v14;
    a2[1] = 0.0;
    if (a3 > 2)
    {
      if (v19 <= 2)
        v48 = 2;
      else
        v48 = v19;
      v49 = &a6[a3 - 1];
      v50 = (__int128 *)(v14 + 1);
      v51 = a6 + 1;
      v52 = v48 - 1;
      do
      {
        v54 = *v51++;
        v53 = v54;
        v56 = *v49--;
        v55 = v56;
        v57 = &a2[2 * v53];
        v58 = *v50++;
        *(_QWORD *)v57 = v58;
        v57[1] = -*((double *)&v58 + 1);
        *(_OWORD *)&a2[2 * v55] = v58;
        --v52;
      }
      while (v52);
    }
    cv::DFT<double>((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
    v13->f64[0] = v13->f64[0] * a9;
    if (a3 >= 2)
    {
      v59 = 0;
      f64 = v13[2].f64;
      do
      {
        v61 = *(f64 - 2) * a9;
        v62 = *f64;
        f64 += 4;
        v63 = (uint64_t)&v13[v59 + 2];
        *(double *)(v63 - 24) = v61;
        *(double *)(v63 - 16) = v62 * a9;
        v64 = v59 * 2 + 3;
        ++v59;
      }
      while (v64 < a3);
    }
  }
  else
  {
    v20 = v14[v16];
    v21 = v14[1];
    v22 = *v14 + v20;
    v23 = v20 - *v14;
    *a2 = v22;
    a2[1] = v23;
    if (a3 < 5)
    {
      LODWORD(v29) = 2;
    }
    else
    {
      v24 = 0;
      v25 = &v14[a3 - 3];
      v26 = a7 + 16;
      v27 = a6 + 1;
      v28 = &a6[v19 - 1];
      v29 = 2;
      v30 = a3;
      do
      {
        v31 = v25[1];
        v32 = v21 + *v25;
        v33 = v21 - *v25;
        v34 = v14[v24 + 2];
        v21 = v14[v24 + 3];
        v35 = v34 - v31;
        v36 = v34 + v31;
        v37 = *(double *)(v26 + v24 * 8);
        v38 = *(double *)(v26 + v24 * 8 + 8);
        v39 = v36 * v38 + v33 * v37;
        v40 = v36 * v37 - v33 * v38;
        v41 = v32 - v40;
        v42 = -v35 - v39;
        v43 = v32 + v40;
        if (v14 == a2)
        {
          v47 = &a2[v24];
          v47[2] = v41;
          v47[3] = v42;
          a2[v30 - 2] = v43;
          v46 = v30 - 1;
        }
        else
        {
          v44 = &a2[*v27];
          *v44 = v41;
          v44[1] = v42;
          v45 = *v28;
          a2[v45] = v43;
          v46 = v45 + 1;
        }
        a2[v46] = v35 - v39;
        v29 += 2;
        v25 -= 2;
        v30 -= 2;
        v24 += 2;
        ++v27;
        --v28;
      }
      while (v29 < v19);
    }
    if ((int)v29 <= v19)
    {
      v65 = v21 + v21;
      v66 = v14[v19] + v14[v19];
      if (v14 == a2)
      {
        a2[v19] = v65;
        v68 = v19 + 1;
      }
      else
      {
        v67 = a6[v19];
        a2[2 * v67] = v65;
        v68 = (2 * v67) | 1;
      }
      a2[v68] = v66;
    }
    v69 = *a5 >> 1;
    *a5 = v69;
    cv::DFT<double>((uint64_t)a2, (uint64_t)a2, v19, a4 - (v69 == 1), &a5[v69 == 1], a6, a7, a3, 1.0, a10, (v14 != a2) << 8);
    *a5 *= 2;
    v70.f64[0] = a9;
    if (a3 >= 1)
    {
      v71 = 0;
      do
      {
        v70.f64[1] = -a9;
        *v13 = vmulq_f64(*v13, v70);
        ++v13;
        v71 += 2;
      }
      while (v71 < a3);
    }
  }
LABEL_10:
  if ((a11 & 0x200) != 0)
    *(_QWORD *)v14 = v15;
}

void cv::DFTInit()
{
  __assert_rtn("DFTInit", "dxt.cpp", 347, "elem_size == sizeof(Complex<float>)");
}

{
  __assert_rtn("DFTInit", "dxt.cpp", 211, "nf < 34");
}

void cv::DFT<float>()
{
  __assert_rtn("DFT", "dxt.cpp", 610, "(unsigned)j < (unsigned)n2");
}

{
  __assert_rtn("DFT", "dxt.cpp", 627, "(unsigned)j < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 569, "(unsigned)k0 < (unsigned)n && (unsigned)k1 < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 581, "(unsigned)k0 < (unsigned)n && (unsigned)k1 < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 563, "(flags & DFT_NO_PERMUTE) == 0");
}

void cv::RealDFT<float>()
{
  __assert_rtn("RealDFT", "dxt.cpp", 992, "tab_size == n");
}

void cv::CCSIDFT<float>()
{
  __assert_rtn("CCSIDFT", "dxt.cpp", 1106, "src != dst");
}

{
  __assert_rtn("CCSIDFT", "dxt.cpp", 1102, "tab_size == n");
}

uint64_t cv::copyMask8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t i;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_BYTE *)(a3 + i))
            *(_BYTE *)(a5 + i) = *(_BYTE *)(result + i);
        }
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask16u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t i;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_BYTE *)(a3 + i))
            *(_WORD *)(a5 + 2 * i) = *(_WORD *)(result + 2 * i);
        }
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask8uC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 6;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v11 = a5 + v10;
            v12 = *(_WORD *)(result + v10 - 6);
            *(_BYTE *)(v11 - 4) = *(_BYTE *)(result + v10 - 4);
            *(_WORD *)(v11 - 6) = v12;
          }
          if (*(_BYTE *)(a3 + v9 + 1))
          {
            v13 = a5 + v10;
            v14 = *(_WORD *)(result + v10 - 3);
            *(_BYTE *)(v13 - 1) = *(_BYTE *)(result + v10 - 1);
            *(_WORD *)(v13 - 3) = v14;
          }
          if (*(_BYTE *)(a3 + v9 + 2))
          {
            v15 = a5 + v10;
            v16 = *(_WORD *)(result + v10);
            *(_BYTE *)(v15 + 2) = *(_BYTE *)(result + v10 + 2);
            *(_WORD *)v15 = v16;
          }
          if (*(_BYTE *)(a3 + v9 + 3))
          {
            v17 = a5 + v10;
            v18 = *(_WORD *)(result + v10 + 3);
            *(_BYTE *)(v17 + 5) = *(_BYTE *)(result + v10 + 5);
            *(_WORD *)(v17 + 3) = v18;
          }
          v9 += 4;
          v10 += 12;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v19 = 3 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v20 = a5 + v19;
            v21 = *(_WORD *)(result + v19);
            *(_BYTE *)(v20 + 2) = *(_BYTE *)(result + v19 + 2);
            *(_WORD *)v20 = v21;
          }
          ++v9;
          v19 += 3;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_DWORD *)(a5 + v10 - 8) = *(_DWORD *)(result + v10 - 8);
          if (*(_BYTE *)(a3 + v9 + 1))
            *(_DWORD *)(a5 + v10 - 4) = *(_DWORD *)(result + v10 - 4);
          if (*(_BYTE *)(a3 + v9 + 2))
            *(_DWORD *)(a5 + v10) = *(_DWORD *)(result + v10);
          if (*(_BYTE *)(a3 + v9 + 3))
            *(_DWORD *)(a5 + v10 + 4) = *(_DWORD *)(result + v10 + 4);
          v9 += 4;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(result + 4 * v9);
          ++v9;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask16uC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 12;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v11 = a5 + v10;
            v12 = *(_DWORD *)(result + v10 - 12);
            *(_WORD *)(v11 - 8) = *(_WORD *)(result + v10 - 8);
            *(_DWORD *)(v11 - 12) = v12;
          }
          if (*(_BYTE *)(a3 + v9 + 1))
          {
            v13 = a5 + v10;
            v14 = *(_DWORD *)(result + v10 - 6);
            *(_WORD *)(v13 - 2) = *(_WORD *)(result + v10 - 2);
            *(_DWORD *)(v13 - 6) = v14;
          }
          if (*(_BYTE *)(a3 + v9 + 2))
          {
            v15 = a5 + v10;
            v16 = *(_DWORD *)(result + v10);
            *(_WORD *)(v15 + 4) = *(_WORD *)(result + v10 + 4);
            *(_DWORD *)v15 = v16;
          }
          if (*(_BYTE *)(a3 + v9 + 3))
          {
            v17 = a5 + v10;
            v18 = *(_DWORD *)(result + v10 + 6);
            *(_WORD *)(v17 + 10) = *(_WORD *)(result + v10 + 10);
            *(_DWORD *)(v17 + 6) = v18;
          }
          v9 += 4;
          v10 += 24;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v19 = 6 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v20 = a5 + v19;
            v21 = *(_DWORD *)(result + v19);
            *(_WORD *)(v20 + 4) = *(_WORD *)(result + v19 + 4);
            *(_DWORD *)v20 = v21;
          }
          ++v9;
          v19 += 6;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 16;
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_QWORD *)(a5 + v10 - 16) = *(_QWORD *)(result + v10 - 16);
          if (*(_BYTE *)(a3 + v9 + 1))
            *(_QWORD *)(a5 + v10 - 8) = *(_QWORD *)(result + v10 - 8);
          if (*(_BYTE *)(a3 + v9 + 2))
            *(_QWORD *)(a5 + v10) = *(_QWORD *)(result + v10);
          if (*(_BYTE *)(a3 + v9 + 3))
            *(_QWORD *)(a5 + v10 + 8) = *(_QWORD *)(result + v10 + 8);
          v9 += 4;
          v10 += 32;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_QWORD *)(a5 + 8 * v9) = *(_QWORD *)(result + 8 * v9);
          ++v9;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 24;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v11 = a5 + v10;
            v12 = *(_QWORD *)(result + v10 - 24);
            *(_DWORD *)(v11 - 16) = *(_DWORD *)(result + v10 - 16);
            *(_QWORD *)(v11 - 24) = v12;
          }
          if (*(_BYTE *)(a3 + v9 + 1))
          {
            v13 = a5 + v10;
            v14 = *(_QWORD *)(result + v10 - 12);
            *(_DWORD *)(v13 - 4) = *(_DWORD *)(result + v10 - 4);
            *(_QWORD *)(v13 - 12) = v14;
          }
          if (*(_BYTE *)(a3 + v9 + 2))
          {
            v15 = a5 + v10;
            v16 = *(_QWORD *)(result + v10);
            *(_DWORD *)(v15 + 8) = *(_DWORD *)(result + v10 + 8);
            *(_QWORD *)v15 = v16;
          }
          if (*(_BYTE *)(a3 + v9 + 3))
          {
            v17 = a5 + v10;
            v18 = *(_QWORD *)(result + v10 + 12);
            *(_DWORD *)(v17 + 20) = *(_DWORD *)(result + v10 + 20);
            *(_QWORD *)(v17 + 12) = v18;
          }
          v9 += 4;
          v10 += 48;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v19 = 12 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v20 = a5 + v19;
            v21 = *(_QWORD *)(result + v19);
            *(_DWORD *)(v20 + 8) = *(_DWORD *)(result + v19 + 8);
            *(_QWORD *)v20 = v21;
          }
          ++v9;
          v19 += 12;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 32;
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_OWORD *)(a5 + v10 - 32) = *(_OWORD *)(result + v10 - 32);
          if (*(_BYTE *)(a3 + v9 + 1))
            *(_OWORD *)(a5 + v10 - 16) = *(_OWORD *)(result + v10 - 16);
          if (*(_BYTE *)(a3 + v9 + 2))
            *(_OWORD *)(a5 + v10) = *(_OWORD *)(result + v10);
          if (*(_BYTE *)(a3 + v9 + 3))
            *(_OWORD *)(a5 + v10 + 16) = *(_OWORD *)(result + v10 + 16);
          v9 += 4;
          v10 += 64;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v11 = 16 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
            *(_OWORD *)(a5 + v11) = *(_OWORD *)(result + v11);
          ++v9;
          v11 += 16;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC6(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 48;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v11 = a5 + v10;
            v12 = *(_OWORD *)(result + v10 - 48);
            *(_QWORD *)(v11 - 32) = *(_QWORD *)(result + v10 - 32);
            *(_OWORD *)(v11 - 48) = v12;
          }
          if (*(_BYTE *)(a3 + v9 + 1))
          {
            v13 = a5 + v10;
            v14 = *(_OWORD *)(result + v10 - 24);
            *(_QWORD *)(v13 - 8) = *(_QWORD *)(result + v10 - 8);
            *(_OWORD *)(v13 - 24) = v14;
          }
          if (*(_BYTE *)(a3 + v9 + 2))
          {
            v15 = a5 + v10;
            v16 = *(_OWORD *)(result + v10);
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(result + v10 + 16);
            *(_OWORD *)v15 = v16;
          }
          if (*(_BYTE *)(a3 + v9 + 3))
          {
            v17 = a5 + v10;
            v18 = *(_OWORD *)(result + v10 + 24);
            *(_QWORD *)(v17 + 40) = *(_QWORD *)(result + v10 + 40);
            *(_OWORD *)(v17 + 24) = v18;
          }
          v9 += 4;
          v10 += 96;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v19 = 24 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v20 = a5 + v19;
            v21 = *(_OWORD *)(result + v19);
            *(_QWORD *)(v20 + 16) = *(_QWORD *)(result + v19 + 16);
            *(_OWORD *)v20 = v21;
          }
          ++v9;
          v19 += 24;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 64;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v11 = a5 + v10;
            v12 = *(_OWORD *)(result + v10 - 48);
            *(_OWORD *)(v11 - 64) = *(_OWORD *)(result + v10 - 64);
            *(_OWORD *)(v11 - 48) = v12;
          }
          if (*(_BYTE *)(a3 + v9 + 1))
          {
            v13 = a5 + v10;
            v14 = *(_OWORD *)(result + v10 - 16);
            *(_OWORD *)(v13 - 32) = *(_OWORD *)(result + v10 - 32);
            *(_OWORD *)(v13 - 16) = v14;
          }
          if (*(_BYTE *)(a3 + v9 + 2))
          {
            v15 = (_OWORD *)(a5 + v10);
            v16 = *(_OWORD *)(result + v10 + 16);
            *v15 = *(_OWORD *)(result + v10);
            v15[1] = v16;
          }
          if (*(_BYTE *)(a3 + v9 + 3))
          {
            v17 = a5 + v10;
            v18 = *(_OWORD *)(result + v10 + 48);
            *(_OWORD *)(v17 + 32) = *(_OWORD *)(result + v10 + 32);
            *(_OWORD *)(v17 + 48) = v18;
          }
          v9 += 4;
          v10 += 128;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        v19 = 32 * v9;
        do
        {
          if (*(_BYTE *)(a3 + v9))
          {
            v20 = (_OWORD *)(a5 + v19);
            v21 = *(_OWORD *)(result + v19 + 16);
            *v20 = *(_OWORD *)(result + v19);
            v20[1] = v21;
          }
          ++v9;
          v19 += 32;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t (*cv::getCopyMaskFunc(unint64_t this))(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t *a8)
{
  uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t v3;

  result = cv::copyMaskGeneric;
  if (this <= 0x20)
  {
    v3 = cv::copyMaskTab[this];
    if (v3)
      return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))v3;
  }
  return result;
}

uint64_t cv::copyMaskGeneric(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t *a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;

  v8 = *a8;
  v9 = a7[1];
  v10 = v9 - 1;
  a7[1] = v9 - 1;
  if (v9)
  {
    v11 = *a7;
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = a5;
        v14 = result;
        do
        {
          if (*(_BYTE *)(a3 + v12))
            v15 = v8 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            v16 = 0;
            do
            {
              *(_BYTE *)(v13 + v16) = *(_BYTE *)(v14 + v16);
              ++v16;
            }
            while (v8 != v16);
            v11 = *a7;
          }
          ++v12;
          v14 += v8;
          v13 += v8;
        }
        while (v12 < v11);
        v10 = a7[1];
      }
      v17 = v10;
      a3 += a4;
      result += a2;
      a5 += a6;
      a7[1] = --v10;
    }
    while (v17);
  }
  return result;
}

void cv::Mat::copyTo(cv::Mat *this, const cv::_OutputArray *a2)
{
  int v4;
  void *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const cv::Exception *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[8];
  void *v44[2];
  void *__dst;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  cv *v51;
  _QWORD v52[5];
  unsigned __int8 *v53;
  void *v54;
  cv::Mat *v55[4];

  v55[3] = *(cv::Mat **)MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(const cv::_OutputArray *, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0xFFFFFFFFLL);
  if ((*(unsigned int (**)(const cv::_OutputArray *))(*(_QWORD *)a2 + 104))(a2)
    && v4 != (*(_DWORD *)this & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)this ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "channels() == CV_MAT_CN(dtype)");
      std::string::basic_string[abi:ne180100]<0>(v55, "copyTo");
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(v44, 4294967081, __p, v55, &v53, 212);
      cv::error((cv *)v44, v16);
    }
    cv::Mat::convertTo(this, a2, v4, 1.0, 0.0);
  }
  else
  {
    if (!*((_QWORD *)this + 2))
      goto LABEL_29;
    if (*((int *)this + 1) < 3)
    {
      if (*((int *)this + 3) * (uint64_t)*((int *)this + 2))
      {
        (*(void (**)(const cv::_OutputArray *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 136))(a2, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *(_DWORD *)this & 0xFFF, 0xFFFFFFFFLL, 0, 0);
        (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v44, a2, 0xFFFFFFFFLL);
        v6 = (char *)*((_QWORD *)this + 2);
        v7 = (char *)__dst;
        if (v6 != __dst)
        {
          v8 = *((_DWORD *)this + 2);
          if (v8 >= 1)
          {
            LODWORD(v9) = *((_DWORD *)this + 3);
            if ((int)v9 >= 1)
            {
              v10 = *((_DWORD *)this + 1);
              v11 = *(_DWORD *)this & (uint64_t)v44[0];
              v12 = v9 * (unint64_t)v8;
              if (v12 >> 31)
              {
                LODWORD(v12) = *((_DWORD *)this + 3);
                v13 = *((_DWORD *)this + 2);
              }
              else
              {
                v13 = 1;
              }
              if ((v11 & 0x4000) != 0)
                v9 = v12;
              else
                v9 = v9;
              if ((v11 & 0x4000) != 0)
                v14 = v13;
              else
                v14 = *((_DWORD *)this + 2);
              if (v10 < 1)
                v15 = 0;
              else
                v15 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v10 - 1));
              v37 = v15 * v9;
              do
              {
                --v14;
                memcpy(v7, v6, v37);
                v6 += *((_QWORD *)this + 10);
                v7 += v52[0];
              }
              while (v14);
            }
          }
        }
        v38 = v46;
        if (v46)
        {
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
            cv::Mat::deallocate((cv::Mat *)v44, v5);
        }
        __dst = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        if (SHIDWORD(v44[0]) >= 1)
        {
          v41 = 0;
          v42 = v50;
          do
            *(_DWORD *)(v42 + 4 * v41++) = 0;
          while (v41 < SHIDWORD(v44[0]));
        }
        v46 = 0;
        if (v51 != (cv *)v52)
          cv::fastFree((void **)v51, v5);
        return;
      }
LABEL_29:
      (*(void (**)(const cv::_OutputArray *))(*(_QWORD *)a2 + 152))(a2);
      return;
    }
    v17 = (int *)*((_QWORD *)this + 8);
    v18 = 1;
    v19 = *((unsigned int *)this + 1);
    do
    {
      v20 = *v17++;
      v18 *= v20;
      --v19;
    }
    while (v19);
    if (!v18)
      goto LABEL_29;
    (*(void (**)(const cv::_OutputArray *))(*(_QWORD *)a2 + 144))(a2);
    (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v44, a2, 0xFFFFFFFFLL);
    if (*((void **)this + 2) != __dst)
    {
      v22 = *((unsigned int *)this + 1);
      if ((int)v22 >= 3)
      {
        v24 = (int *)*((_QWORD *)this + 8);
        v23 = 1;
        do
        {
          v25 = *v24++;
          v23 *= v25;
          --v22;
        }
        while (v22);
      }
      else
      {
        v23 = *((int *)this + 3) * (uint64_t)*((int *)this + 2);
      }
      if (v23)
      {
        v55[0] = this;
        v55[1] = (cv::Mat *)v44;
        v53 = 0;
        v54 = 0;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, v55, &v53, 2);
        v26 = *((_DWORD *)this + 1);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
        if (v28 < 0 != v27)
          v29 = 0;
        else
          v29 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v28);
        v30 = v29 * (uint64_t)__p[5];
        v31 = -1;
        while ((void *)++v31 < __p[4])
        {
          memcpy(v54, v53, v30);
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
    }
    v32 = v46;
    if (v46)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
        cv::Mat::deallocate((cv::Mat *)v44, v21);
    }
    __dst = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    if (SHIDWORD(v44[0]) >= 1)
    {
      v35 = 0;
      v36 = v50;
      do
        *(_DWORD *)(v36 + 4 * v35++) = 0;
      while (v35 < SHIDWORD(v44[0]));
    }
    v46 = 0;
    if (v51 != (cv *)v52)
      cv::fastFree((void **)v51, v21);
  }
}

void sub_219E2D908(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  cv::Mat::~Mat((cv::Mat *)&a20, a2);
  _Unwind_Resume(a1);
}

void cv::Mat::copyTo(cv::Mat *this, const cv::_OutputArray *a2, const cv::_InputArray *a3)
{
  unint64_t v5;
  BOOL v6;
  const cv::Exception *v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  void *v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  const cv::Exception *v19;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD v39[2];
  _DWORD v40[2];
  void *v41[2];
  _QWORD __p[2];
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  cv *v49;
  uint64_t v50;
  unint64_t v51;
  int64x2_t v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  cv *v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  void **v67;
  uint64_t v68;
  cv::Mat *v69[4];
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  (**(void (***)(_QWORD *__return_ptr, const cv::_InputArray *, uint64_t))a3)(v60, a3, 0xFFFFFFFFLL);
  if (!v61)
  {
    cv::Mat::copyTo(this, a2);
    goto LABEL_50;
  }
  v5 = ((unint64_t)LODWORD(v60[0]) >> 3) & 0x1FF;
  if ((v60[0] & 7) != 0 || ((_DWORD)v5 ? (v6 = (_DWORD)v5 == ((*(_DWORD *)this >> 3) & 0x1FF)) : (v6 = 1), !v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mask.depth() == CV_8U && (mcn == 1 || mcn == cn)");
    std::string::basic_string[abi:ne180100]<0>(v69, "copyTo");
    std::string::basic_string[abi:ne180100]<0>(&v70, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(&v52, 4294967081, __p, v69, &v70, 271);
    cv::error((cv *)&v52, v7);
  }
  v51 = 0;
  if ((_DWORD)v5)
  {
    v8 = (0x88442211uLL >> (4 * (*(_DWORD *)this & 7u))) & 0xF;
LABEL_10:
    v51 = v8;
    goto LABEL_11;
  }
  v26 = *((_DWORD *)this + 1);
  if (v26 <= 0)
  {
    v8 = 0;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v26 - 1));
  v51 = v8;
  if (v8 > 0x20)
  {
    v10 = cv::copyMaskGeneric;
    goto LABEL_14;
  }
LABEL_11:
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))cv::copyMaskTab[v8];
  if (v9)
    v10 = v9;
  else
    v10 = cv::copyMaskGeneric;
LABEL_14:
  (**(void (***)(int64x2_t *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(&v52, a2, 0xFFFFFFFFLL);
  v12 = v53;
  if (*((_QWORD *)&v53 + 1))
  {
    do
    {
      v13 = __ldaxr(*((unsigned int **)&v12 + 1));
      v14 = v13 - 1;
    }
    while (__stlxr(v14, *((unsigned int **)&v12 + 1)));
    if (!v14)
      cv::Mat::deallocate((cv::Mat *)&v52, v11);
  }
  *(_QWORD *)&v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (v52.i32[1] >= 1)
  {
    v15 = 0;
    v16 = v57;
    do
      *(_DWORD *)(v16 + 4 * v15++) = 0;
    while (v15 < v52.i32[1]);
  }
  *((_QWORD *)&v53 + 1) = 0;
  if (v58 != (cv *)&v59)
    cv::fastFree((void **)v58, v11);
  (*(void (**)(const cv::_OutputArray *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 144))(a2, *((unsigned int *)this + 1), *((_QWORD *)this + 8), *(_DWORD *)this & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(__p, a2, 0xFFFFFFFFLL);
  if (v43 != (_QWORD)v12)
  {
    v52 = 0u;
    v53 = 0u;
    cv::Mat::operator=((uint64_t)__p, &v52);
  }
  v17 = v5 + 1;
  if (*((int *)this + 1) > 2)
  {
    v69[0] = this;
    v69[1] = (cv::Mat *)__p;
    v69[2] = (cv::Mat *)v60;
    v69[3] = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v52, v69, &v70, -1);
    v24 = v17 * v55;
    v25 = -1;
    while (++v25 < v54)
    {
      v39[0] = v24;
      v39[1] = 1;
      v10((uint64_t)v70, 0, v72, 0, v71, 0, v39, (uint64_t *)&v51);
      cv::NAryMatIterator::operator++((uint64_t)&v52);
    }
  }
  else
  {
    v18 = (_DWORD *)*((_QWORD *)this + 8);
    if (v18[1] != v66[1] || *v18 != *v66)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "size() == mask.size()");
      std::string::basic_string[abi:ne180100]<0>(&v70, "copyTo");
      std::string::basic_string[abi:ne180100]<0>(v41, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(&v52, 4294967081, v69, &v70, v41, 286);
      cv::error((cv *)&v52, v19);
    }
    v20 = *((_DWORD *)this + 2);
    v21 = *((_DWORD *)this + 3);
    if ((*(_DWORD *)this & __p[0] & v60[0] & 0x4000) != 0 && (v22 = v21 * (uint64_t)v17 * v20, v22 == (int)v22))
      v20 = 1;
    else
      LODWORD(v22) = v21 * v17;
    v27 = *((_QWORD *)this + 2);
    v28 = *((_QWORD *)this + 10);
    v40[0] = v22;
    v40[1] = v20;
    v10(v27, v28, v61, v68, v43, v50, v40, (uint64_t *)&v51);
  }
  v29 = v44;
  if (v44)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      cv::Mat::deallocate((cv::Mat *)__p, v23);
  }
  v43 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (SHIDWORD(__p[0]) >= 1)
  {
    v32 = 0;
    v33 = v48;
    do
      *(_DWORD *)(v33 + 4 * v32++) = 0;
    while (v32 < SHIDWORD(__p[0]));
  }
  v44 = 0;
  if (v49 != (cv *)&v50)
    cv::fastFree((void **)v49, v23);
LABEL_50:
  v34 = v62;
  if (v62)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      cv::Mat::deallocate((cv::Mat *)v60, v23);
  }
  v61 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  if (SHIDWORD(v60[0]) >= 1)
  {
    v37 = 0;
    v38 = v66;
    do
      v38[v37++] = 0;
    while (v37 < SHIDWORD(v60[0]));
  }
  v62 = 0;
  if (v67 != (void **)&v68)
    cv::fastFree(v67, v23);
}

void sub_219E2DECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  cv::Exception::~Exception((cv::Exception *)&a33);
  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  cv::Mat::~Mat((cv::Mat *)&a17, v35);
  cv::Mat::~Mat((cv::Mat *)(v33 - 208), v36);
  _Unwind_Resume(a1);
}

uint64_t cv::Mat::operator=(uint64_t a1, int64x2_t *a2)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t i;
  unint64_t j;
  _BYTE v16[32];
  unint64_t v17;
  uint64_t v18;
  void *__dst;
  _BYTE __src[96];
  cv::Mat *v21[2];

  v21[1] = *(cv::Mat **)MEMORY[0x24BDAC8D0];
  v21[0] = (cv::Mat *)a1;
  __dst = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v16, v21, (unsigned __int8 **)&__dst, 1);
  v4 = *(_DWORD *)(a1 + 4);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6);
  v8 = v7 * v18;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*a2), (int32x4_t)vceqzq_s64(a2[1]))))) & 1) != 0)
  {
    if (v17)
    {
      cv::scalarToRawData((uint64_t)a2, (uint64_t)__src, *(_DWORD *)a1 & 0xFFF, 12);
      if (v8)
      {
        v9 = 0;
        v10 = 12 * ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF);
        v11 = v8;
        do
        {
          if (v10 >= v11)
            v12 = v11;
          else
            v12 = v10;
          memcpy((char *)__dst + v9, __src, v12);
          v9 += v10;
          v11 -= v10;
        }
        while (v9 < v8);
      }
      if (v17 >= 2)
      {
        for (i = 1; i < v17; ++i)
        {
          cv::NAryMatIterator::operator++((uint64_t)v16);
          memcpy(__dst, *(const void **)(a1 + 16), v8);
        }
      }
    }
  }
  else if (v17)
  {
    for (j = 0; j < v17; ++j)
    {
      bzero(__dst, v8);
      cv::NAryMatIterator::operator++((uint64_t)v16);
    }
  }
  return a1;
}

uint64_t cv::Mat::setTo(cv::Mat *this, const cv::_InputArray *a2, const cv::_InputArray *a3)
{
  void (***v3)(uint64_t *__return_ptr, _QWORD, uint64_t);
  void (***v4)(uint64_t *__return_ptr, _QWORD, uint64_t);
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, _QWORD, uint64_t);
  void (***v7)(_QWORD *__return_ptr, _QWORD, uint64_t);
  unsigned int v8;
  const cv::Exception *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  const cv::Exception *v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  _BYTE *v29;
  _BYTE *v30;
  void *v31;
  char *i;
  int j;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  _DWORD v55[2];
  void *__p[5];
  int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  cv *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  cv *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE v83[4120];
  unsigned __int8 *v84;
  uint64_t v85;
  cv::Mat *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;

  v5 = MEMORY[0x24BDAC7A8](this, a2);
  v89 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v5 + 16))
    return v5;
  v6 = v4;
  v7 = v3;
  (**v3)(&v70, v3, 0xFFFFFFFFLL);
  (**v6)(&v59, v6, 0xFFFFFFFFLL);
  v8 = *(_DWORD *)v5;
  ((void (*)(void (***)(_QWORD *__return_ptr, _QWORD, uint64_t)))(*v7)[5])(v7);
  if (SHIDWORD(v70) > 2 || v72 != 1 && v71 != 1 || (v70 & 0x4000) == 0)
    goto LABEL_6;
  v49 = (v8 >> 3) & 0x1FF;
  v50 = *v78;
  v51 = v78[1];
  v52 = v51 == v49 + 1;
  if (*v78 != 1)
    v52 = 0;
  v53 = v50 == v49 + 1 || *v78 == 1;
  if (v51 != 1)
    v53 = 0;
  if (!v53 && !v52 && (v51 != 1 || v50 != 4 || v49 > 3 || (v70 & 0xFFF) != 6))
  {
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(__p, "checkScalar(value, type(), _value.kind(), _InputArray::MAT)");
    std::string::basic_string[abi:ne180100]<0>(&v86, "setTo");
    std::string::basic_string[abi:ne180100]<0>(&v84, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(&v81, 4294967081, __p, &v86, &v84, 346);
    cv::error((cv *)&v81, v9);
  }
  if (v62)
  {
    v10 = HIDWORD(v59);
    if (SHIDWORD(v59) >= 3)
    {
      v12 = v67;
      v11 = 1;
      do
      {
        v13 = *v12++;
        v11 *= v13;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = v61 * (uint64_t)v60;
    }
    if (v11 && (v59 & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "mask.empty() || mask.type() == CV_8U");
      std::string::basic_string[abi:ne180100]<0>(&v86, "setTo");
      std::string::basic_string[abi:ne180100]<0>(&v84, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(&v81, 4294967081, __p, &v86, &v84, 347);
      cv::error((cv *)&v81, v14);
    }
  }
  v58 = 0;
  v15 = *(_DWORD *)(v5 + 4);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v17 < 0 != v16)
  {
    v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v17);
    v58 = v18;
    if (v18 > 0x20)
    {
      v19 = cv::copyMaskGeneric;
      goto LABEL_22;
    }
  }
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))cv::copyMaskTab[v18];
  if (v20)
    v19 = v20;
  else
    v19 = cv::copyMaskGeneric;
LABEL_22:
  v87 = 0;
  v88 = 0;
  v86 = (cv::Mat *)v5;
  if (!v62)
    goto LABEL_29;
  v21 = HIDWORD(v59);
  if (SHIDWORD(v59) >= 3)
  {
    v23 = v67;
    v22 = 1;
    do
    {
      v24 = *v23++;
      v22 *= v24;
      --v21;
    }
    while (v21);
  }
  else
  {
    v22 = v61 * (uint64_t)v60;
  }
  if (v22)
    v25 = &v59;
  else
LABEL_29:
    v25 = 0;
  v87 = v25;
  v88 = 0;
  v84 = 0;
  v85 = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v86, &v84, -1);
  v26 = v57;
  v27 = (v58 + 1023) / v58;
  if ((int)v27 >= v57)
    LODWORD(v27) = v57;
  v28 = (unsigned __int8 *)(int)v27;
  v81 = v83;
  v82 = 4104;
  v29 = v83;
  if (v58 * (int)v27 + 32 >= 0x1009)
  {
    v82 = v58 * (int)v27 + 32;
    v29 = (_BYTE *)operator new[]();
    v81 = v29;
  }
  v30 = (_BYTE *)((unint64_t)(v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  v54 = v5;
  cv::convertAndUnrollScalar((cv *)&v70, (const cv::Mat *)(*(_DWORD *)v5 & 0xFFF), v30, v28);
  for (i = 0; i < __p[4]; ++i)
  {
    if (v26 >= 1)
    {
      for (j = 0; j < v26; j += (int)v28)
      {
        v34 = v26 - j;
        if (v26 - j >= (int)v28)
          v34 = (int)v28;
        v35 = v34;
        v36 = v58 * v34;
        if (v85)
        {
          v55[0] = v34;
          v55[1] = 1;
          v19((uint64_t)v30, 0, v85, 0, (uint64_t)v84, 0, v55, (uint64_t *)&v58);
          v85 += v35;
        }
        else
        {
          memcpy(v84, v30, v58 * v34);
        }
        v84 += v36;
      }
    }
    cv::NAryMatIterator::operator++((uint64_t)__p);
  }
  if (v81 != v83 && v81 != 0)
    MEMORY[0x2207351A4]();
  v38 = v63;
  v5 = v54;
  if (v63)
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      cv::Mat::deallocate((cv::Mat *)&v59, v31);
  }
  v62 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  if (SHIDWORD(v59) >= 1)
  {
    v41 = 0;
    v42 = v67;
    do
      v42[v41++] = 0;
    while (v41 < SHIDWORD(v59));
  }
  v63 = 0;
  if (v68 != (cv *)&v69)
    cv::fastFree((void **)v68, v31);
  v43 = v74;
  if (v74)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      cv::Mat::deallocate((cv::Mat *)&v70, v31);
  }
  v73 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if (SHIDWORD(v70) >= 1)
  {
    v46 = 0;
    v47 = v78;
    do
      v47[v46++] = 0;
    while (v46 < SHIDWORD(v70));
  }
  v74 = 0;
  if (v79 != (cv *)&v80)
    cv::fastFree((void **)v79, v31);
  return v5;
}

void sub_219E2E758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  void *v50;
  void *v51;

  cv::Exception::~Exception((cv::Exception *)&a47);
  if (*(char *)(v47 + 23) < 0)
    operator delete(*(void **)(v48 - 144));
  if (*(char *)(v47 + 47) < 0)
    operator delete(*(void **)(v48 - 120));
  if (a16 < 0)
    operator delete(__p);
  cv::Mat::~Mat((cv::Mat *)&a23, v50);
  cv::Mat::~Mat((cv::Mat *)&a35, v51);
  _Unwind_Resume(a1);
}

void cv::repeat(cv *this, const cv::_InputArray *a2, uint64_t a3, uint64_t a4, const cv::_OutputArray *a5)
{
  int v6;
  int v7;
  const cv::Exception *v8;
  const cv::Exception *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  void *__p[2];
  void *v34[2];
  void *v35[2];
  _QWORD v36[2];
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  cv *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  void **v54;
  uint64_t v55;

  v6 = a3;
  v7 = (int)a2;
  (**(void (***)(uint64_t *__return_ptr, cv *, uint64_t, uint64_t, uint64_t, const cv::_OutputArray *))this)(&v45, this, 0xFFFFFFFFLL, a3, a4, a5);
  if (SHIDWORD(v45) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "src.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v34, "repeat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(v36, 4294967081, v35, v34, __p, 485);
    cv::error((cv *)v36, v8);
  }
  if (v7 < 1 || v6 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "ny > 0 && nx > 0");
    std::string::basic_string[abi:ne180100]<0>(v34, "repeat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(v36, 4294967081, v35, v34, __p, 486);
    cv::error((cv *)v36, v9);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 136))(a4, (v46 * v7), (v47 * v6), v45 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t))a4)(v36, a4, 0xFFFFFFFFLL);
  v11 = *v53;
  v12 = *v42;
  if (SHIDWORD(v45) < 1)
    LODWORD(v13) = 0;
  else
    v13 = v54[HIDWORD(v45) - 1];
  v14 = (int)v42[1] * (uint64_t)(int)v13;
  if ((int)v11 < 1)
  {
    v18 = 0;
  }
  else
  {
    v15 = 0;
    v16 = (int)((_DWORD)v13 * v53[1]);
    do
    {
      if ((int)v14 >= 1)
      {
        v17 = 0;
        do
        {
          memcpy((void *)(v37 + v15 * v44 + v17), (const void *)(v48 + v55 * v15), v16);
          v17 += v16;
        }
        while (v17 < v14);
      }
      ++v15;
    }
    while (v15 != v11);
    v18 = v11;
  }
  if (v18 < (int)v12)
  {
    v19 = (int)v11;
    v20 = (int)v14;
    v21 = v18;
    v22 = -v19;
    do
    {
      memcpy((void *)(v37 + v44 * v21), (const void *)(v37 + v44 * (v22 + v21)), v20);
      ++v21;
    }
    while (v12 != v21);
  }
  v23 = v38;
  if (v38)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      cv::Mat::deallocate((cv::Mat *)v36, v10);
  }
  v37 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (SHIDWORD(v36[0]) >= 1)
  {
    v26 = 0;
    v27 = v42;
    do
      v27[v26++] = 0;
    while (v26 < SHIDWORD(v36[0]));
  }
  v38 = 0;
  if (v43 != (cv *)&v44)
    cv::fastFree((void **)v43, v10);
  v28 = v49;
  if (v49)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      cv::Mat::deallocate((cv::Mat *)&v45, v10);
  }
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (SHIDWORD(v45) >= 1)
  {
    v31 = 0;
    v32 = v53;
    do
      v32[v31++] = 0;
    while (v31 < SHIDWORD(v45));
  }
  v49 = 0;
  if (v54 != (void **)&v55)
    cv::fastFree(v54, v10);
}

void sub_219E2EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  cv::Mat::~Mat((cv::Mat *)(v27 - 160), v29);
  _Unwind_Resume(a1);
}

void cvCopy(uint64_t a1, uint64_t a2, cv *a3)
{
  uint64_t v4;
  uint64_t v5;
  cv *v6;
  const cv::Exception *v7;
  void *v8;
  int v9;
  void **v10;
  uint64_t v11;
  _DWORD *inited;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD **i;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  cv *v25;
  const cv::Exception *v26;
  cv *v27;
  const cv::Exception *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  cv *v35;
  const cv::Exception *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  void *v47[2];
  void *__p[2];
  void *v49[2];
  _QWORD v50[3];
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  cv *v56;
  uint64_t v57;
  void *v58[3];
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  cv *v64;
  uint64_t v65;
  int32x2_t v66;
  _DWORD *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  _QWORD v75[6];

  v4 = a2;
  v5 = a1;
  v75[5] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2 || *(unsigned __int16 *)(a1 + 2) << 16 != 1111752704 || *(_WORD *)(a2 + 2) != 16964)
  {
    cv::cvarrToMat((cv *)a1, 0, 1, (uint64_t)v58);
    cv::cvarrToMat((cv *)v4, 0, 1, (uint64_t)v50);
    if (((LOBYTE(v50[0]) ^ LOBYTE(v58[0])) & 7) == 0)
    {
      v20 = *(v63 - 1);
      if ((_DWORD)v20 == *(v55 - 1))
      {
        if ((_DWORD)v20 == 2)
        {
          if (*v63 == *v55 && v63[1] == v55[1])
            goto LABEL_34;
        }
        else
        {
          if ((int)v20 < 1)
            goto LABEL_34;
          if (*v63 == *v55)
          {
            v21 = 1;
            do
            {
              v22 = v21;
              if (v20 == v21)
                break;
              v23 = v63[v21];
              v24 = v55[v21++];
            }
            while (v23 == v24);
            if (v22 >= v20)
            {
LABEL_34:
              if (v5)
              {
                if (*(_DWORD *)v5 != 144 || !*(_QWORD *)(v5 + 88))
                {
                  LODWORD(v5) = 0;
                  if (!v4)
                  {
LABEL_45:
                    if (v5 | v4)
                    {
                      if (!(_DWORD)v5 && ((uint64_t)v58[0] & 0xFF8) != 0 || !(_DWORD)v4 && (v50[0] & 0xFF8) != 0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)");
                        std::string::basic_string[abi:ne180100]<0>(v47, "cvCopy");
                        std::string::basic_string[abi:ne180100]<0>(v49, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
                        v35 = (cv *)cv::Exception::Exception(&v66, 4294967081, __p, v47, v49, 567);
                        cv::error(v35, v36);
                      }
                      v66 = vadd_s32(vmax_s32((int32x2_t)__PAIR64__(v4, v5), (int32x2_t)0x100000001), (int32x2_t)-1);
                      cv::mixChannels((cv *)v58, (const cv::Mat *)1, (unint64_t)v50, (cv::Mat *)1, (unint64_t)&v66, (const int *)1);
                    }
                    else
                    {
                      if (((LOWORD(v50[0]) ^ LOWORD(v58[0])) & 0xFF8) != 0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "src.channels() == dst.channels()");
                        std::string::basic_string[abi:ne180100]<0>(v47, "cvCopy");
                        std::string::basic_string[abi:ne180100]<0>(v49, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
                        v27 = (cv *)cv::Exception::Exception(&v66, 4294967081, __p, v47, v49, 574);
                        cv::error(v27, v28);
                      }
                      if (a3)
                      {
                        cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v50);
                        cv::cvarrToMat(a3, 0, 0, (uint64_t)&v66);
                        cv::_InputArray::_InputArray((uint64_t)v47, (const cv::Mat *)&v66);
                        cv::Mat::copyTo((cv::Mat *)v58, (const cv::_OutputArray *)__p, (const cv::_InputArray *)v47);
                        v30 = v69;
                        if (v69)
                        {
                          do
                          {
                            v31 = __ldaxr(v30);
                            v32 = v31 - 1;
                          }
                          while (__stlxr(v32, v30));
                          if (!v32)
                            cv::Mat::deallocate((cv::Mat *)&v66, v29);
                        }
                        v68 = 0;
                        v70 = 0;
                        v71 = 0;
                        v72 = 0;
                        if (v66.i32[1] >= 1)
                        {
                          v33 = 0;
                          v34 = v73;
                          do
                            *(_DWORD *)(v34 + 4 * v33++) = 0;
                          while (v33 < v66.i32[1]);
                        }
                        v69 = 0;
                        if (v74 != v75)
                          cv::fastFree(v74, v29);
                      }
                      else
                      {
                        cv::_OutputArray::_OutputArray((uint64_t)&v66, (cv::Mat *)v50);
                        cv::Mat::copyTo((cv::Mat *)v58, (const cv::_OutputArray *)&v66);
                      }
                    }
                    v37 = v51;
                    if (v51)
                    {
                      do
                      {
                        v38 = __ldaxr(v37);
                        v39 = v38 - 1;
                      }
                      while (__stlxr(v39, v37));
                      if (!v39)
                        cv::Mat::deallocate((cv::Mat *)v50, v29);
                    }
                    v50[2] = 0;
                    v52 = 0;
                    v53 = 0;
                    v54 = 0;
                    if (SHIDWORD(v50[0]) >= 1)
                    {
                      v40 = 0;
                      v41 = v55;
                      do
                        v41[v40++] = 0;
                      while (v40 < SHIDWORD(v50[0]));
                    }
                    v51 = 0;
                    if (v56 != (cv *)&v57)
                      cv::fastFree((void **)v56, v29);
                    v42 = v59;
                    if (v59)
                    {
                      do
                      {
                        v43 = __ldaxr(v42);
                        v44 = v43 - 1;
                      }
                      while (__stlxr(v44, v42));
                      if (!v44)
                        cv::Mat::deallocate((cv::Mat *)v58, v29);
                    }
                    v58[2] = 0;
                    v60 = 0;
                    v61 = 0;
                    v62 = 0;
                    if (SHIDWORD(v58[0]) >= 1)
                    {
                      v45 = 0;
                      v46 = v63;
                      do
                        v46[v45++] = 0;
                      while (v45 < SHIDWORD(v58[0]));
                    }
                    v59 = 0;
                    if (v64 != (cv *)&v65)
                      cv::fastFree((void **)v64, v29);
                    return;
                  }
LABEL_41:
                  if (*(_DWORD *)v4 == 144 && *(_QWORD *)(v4 + 88))
                    LODWORD(v4) = cvGetImageCOI(v4);
                  else
                    LODWORD(v4) = 0;
                  goto LABEL_45;
                }
                LODWORD(v5) = cvGetImageCOI(v5);
              }
              if (!v4)
                goto LABEL_45;
              goto LABEL_41;
            }
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "src.depth() == dst.depth() && src.size == dst.size");
    std::string::basic_string[abi:ne180100]<0>(v47, "cvCopy");
    std::string::basic_string[abi:ne180100]<0>(v49, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    v25 = (cv *)cv::Exception::Exception(&v66, 4294967081, __p, v47, v49, 556);
    cv::error(v25, v26);
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "maskarr == 0");
    std::string::basic_string[abi:ne180100]<0>(v50, "cvCopy");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    v6 = (cv *)cv::Exception::Exception(&v66, 4294967081, v58, v50, __p, 522);
    cv::error(v6, v7);
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  memcpy((void *)(a2 + 52), (const void *)(a1 + 52), 4 * *(int *)(a1 + 4));
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(v5 + 44);
  cvClearSet(*(_QWORD *)(v4 + 24));
  v9 = *(_DWORD *)(v4 + 40);
  v10 = *(void ***)(v4 + 32);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 24) + 104) >= 3 * v9)
  {
    cv::fastFree(v10, v8);
    v11 = *(int *)(v5 + 40);
    *(_DWORD *)(v4 + 40) = v11;
    *(_QWORD *)(v4 + 32) = 0;
    v10 = (void **)cvAlloc(8 * v11);
    *(_QWORD *)(v4 + 32) = v10;
    v9 = *(_DWORD *)(v4 + 40);
  }
  bzero(v10, 8 * v9);
  inited = (_DWORD *)cvInitSparseMatIterator(v5, (uint64_t)&v66);
  if (inited)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v4 + 24);
      v14 = *(_QWORD **)(v13 + 96);
      v58[0] = v14;
      if (v14)
      {
        *(_QWORD *)(v13 + 96) = v14[1];
        *(_DWORD *)v14 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v13 + 104);
      }
      else
      {
        cvSetAdd(v13, 0, v58);
        v14 = v58[0];
        v13 = *(_QWORD *)(v4 + 24);
      }
      v15 = (*(_DWORD *)(v4 + 40) - 1) & *inited;
      memcpy(v14, inited, *(int *)(v13 + 44));
      v16 = *(_QWORD *)(v4 + 32);
      v14[1] = *(_QWORD *)(v16 + 8 * v15);
      *(_QWORD *)(v16 + 8 * v15) = v14;
      inited = (_DWORD *)*((_QWORD *)v67 + 1);
      if (!inited)
      {
        v17 = v68 + 1;
        v18 = *(_DWORD *)(*(_QWORD *)&v66 + 40);
        if ((int)v68 + 1 >= v18)
          return;
        for (i = (_DWORD **)(*(_QWORD *)(*(_QWORD *)&v66 + 32) + 8 * (int)v68 + 8); ; ++i)
        {
          inited = *i;
          if (*i)
            break;
          if (v18 == ++v17)
            return;
        }
        LODWORD(v68) = v17;
      }
      v67 = inited;
    }
  }
}

void sub_219E2F3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  cv::Exception::~Exception((cv::Exception *)(v50 - 176));
  if (a22 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void sub_219E2F524()
{
  JUMPOUT(0x219E2F514);
}

void sub_219E2F52C()
{
  JUMPOUT(0x219E2F51CLL);
}

void `anonymous namespace'::throw_nogl(_anonymous_namespace_ *this)
{
  const cv::Exception *v1;
  void *__p[2];
  void *v3[2];
  void *v4[2];
  _BYTE v5[120];

  std::string::basic_string[abi:ne180100]<0>(v4, "The library is compiled without OpenGL support");
  std::string::basic_string[abi:ne180100]<0>(v3, "throw_nogl");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/opengl_interop.cpp");
  cv::Exception::Exception(v5, 4294967078, v4, v3, __p, 63);
  cv::error((cv *)v5, v1);
}

void sub_219E2F5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

double cv::threshold(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, double a4, double a5)
{
  char v5;
  int v9;
  unsigned int v10;
  __int16 v11;
  const cv::Exception *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  const cv::Exception *v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  cv *v45;
  cv *v46;
  unsigned int *v47;
  unsigned int v48;
  int v49;
  cv *v50;
  cv *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int *v77;
  BOOL v79;
  int v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  cv *v90;
  uint64_t (***v91)(cv::_InputArray *__hidden, int);
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  cv *v98;
  _QWORD v99[3];
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  cv *v108;
  _QWORD v109[2];
  void *v110[2];
  void *v111[2];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int *v116;
  cv *v117;
  uint64_t v118;
  _DWORD v119[2];
  void *__p[2];
  void *v121[2];
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  int *v129;
  cv *v130;
  uint64_t v131;
  _DWORD v132[256];
  uint64_t v133;

  v5 = (char)a3;
  v133 = *MEMORY[0x24BDAC8D0];
  (**(void (***)(int *__return_ptr, cv *, uint64_t))this)(&v122, this, 0xFFFFFFFFLL);
  if ((v5 & 8) != 0)
  {
    v11 = v122;
    if ((v122 & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v111, "src.type() == CV_8UC1");
      std::string::basic_string[abi:ne180100]<0>(v121, "threshold");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
      cv::Exception::Exception(v132, 4294967081, v111, v121, __p, 718);
      cv::error((cv *)v132, v12);
    }
    v10 = *v129;
    v9 = v129[1];
    if ((v122 & 0x4000) != 0)
      v13 = 1;
    else
      v13 = v10;
    if ((v122 & 0x4000) != 0)
      v14 = *v129;
    else
      v14 = 1;
    v15 = (v14 * v9);
    bzero(v132, 0x400uLL);
    if ((int)v13 >= 1)
    {
      v16 = 0;
      v17 = v125;
      v18 = v131;
      do
      {
        if ((int)v15 >= 4)
        {
          v19 = 0;
          do
          {
            v20 = *(unsigned __int8 *)(v17 + v19 + 1);
            ++v132[*(unsigned __int8 *)(v17 + v19)];
            ++v132[v20];
            v21 = *(unsigned __int8 *)(v17 + v19 + 3);
            ++v132[*(unsigned __int8 *)(v17 + v19 + 2)];
            ++v132[v21];
            v19 += 4;
          }
          while (v19 <= (int)v15 - 4);
          v19 = v19;
        }
        else
        {
          v19 = 0;
        }
        if ((int)v19 < (int)v15)
        {
          do
            ++v132[*(unsigned __int8 *)(v17 + v19++)];
          while (v15 != v19);
        }
        ++v16;
        v17 += v18;
      }
      while (v16 != v13);
    }
    v22 = 0;
    v23 = 0.0;
    do
    {
      v23 = v23 + (double)(int)v22 * (double)(int)v132[v22];
      ++v22;
    }
    while (v22 != 256);
    v24 = 0;
    v25 = 1.0 / (double)((int)v15 * (int)v13);
    v26 = v25 * v23;
    a4 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    do
    {
      v30 = v25 * (double)(int)v132[v24];
      v28 = v28 * v29;
      v29 = v29 + v30;
      v31 = 1.0 - v29;
      if (1.0 - v29 >= v29)
        v32 = v29;
      else
        v32 = 1.0 - v29;
      if (v32 >= 0.00000011920929)
      {
        v33 = v29 >= v31 ? v29 : 1.0 - v29;
        if (v33 <= 0.999999881)
        {
          v28 = (v28 + (double)(int)v24 * v30) / v29;
          v34 = (v28 - (v26 - v29 * v28) / v31) * (v29 * v31 * (v28 - (v26 - v29 * v28) / v31));
          if (v34 > v27)
          {
            v27 = v34;
            a4 = (double)(int)v24;
          }
        }
      }
      ++v24;
    }
    while (v24 != 256);
  }
  else
  {
    v10 = *v129;
    v9 = v129[1];
    v11 = v122;
  }
  v119[0] = v9;
  v119[1] = v10;
  (*(void (**)(const cv::_InputArray *, _DWORD *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, v119, v11 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v111, a2, 0xFFFFFFFFLL);
  v35 = v5 & 7;
  if ((v122 & 7) == 5)
    goto LABEL_53;
  if ((v122 & 7) == 3)
  {
    v39 = (int)a4 - (a4 < (double)(int)a4);
    a4 = (double)v39;
    v40 = (uint64_t)rint(a5);
    if (v35 == 2)
      LODWORD(v40) = v39;
    if ((int)v40 <= -32768)
      LODWORD(v40) = -32768;
    if ((int)v40 >= 0x7FFF)
      LODWORD(v40) = 0x7FFF;
    if ((v39 + 0x8000) < 0xFFFF)
    {
      a5 = (double)(__int16)v40;
      goto LABEL_53;
    }
    if (v35 < 2
      || (v35 == 3 ? (v79 = v39 <= 32766) : (v79 = 1),
          v79 ? (v80 = 0) : (v80 = 1),
          v35 != 4 ? (v81 = v35 == 2) : (v81 = 1),
          v81 ? (v82 = v39 < -32768) : (v82 = 0),
          !v82 ? (v83 = v80 == 0) : (v83 = 0),
          !v83))
    {
      if (v35 == 1)
      {
        if (v39 <= 32766)
          v84 = 0;
        else
          v84 = v40;
      }
      else if (v35)
      {
        v84 = 0;
      }
      else if (v39 <= 32766)
      {
        v84 = v40;
      }
      else
      {
        v84 = 0;
      }
      goto LABEL_160;
    }
LABEL_152:
    cv::_OutputArray::_OutputArray((uint64_t)v132, (cv::Mat *)v111);
    cv::Mat::copyTo((cv::Mat *)&v122, (const cv::_OutputArray *)v132);
    goto LABEL_89;
  }
  if ((v122 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
    std::string::basic_string[abi:ne180100]<0>(v110, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
    cv::Exception::Exception(v132, 4294967086, v121, __p, v110, 782);
    cv::error((cv *)v132, v41);
  }
  v36 = (int)a4 - (a4 < (double)(int)a4);
  a4 = (double)v36;
  v37 = (uint64_t)rint(a5);
  if (v35 == 2)
    LODWORD(v37) = v36;
  v38 = v37 & ~((int)v37 >> 31);
  if (v38 >= 255)
    v38 = 255;
  if (v36 >= 0xFF)
  {
    if (v35 < 2
      || (v35 == 3 ? (v85 = v36 <= 254) : (v85 = 1),
          v85 ? (v86 = 0) : (v86 = 1),
          v35 != 4 ? (v87 = v35 == 2) : (v87 = 1),
          v87 ? (v88 = v36 < 0) : (v88 = 0),
          !v88 ? (v89 = v86 == 0) : (v89 = 0),
          !v89))
    {
      if (v35 == 1)
      {
        if (v36 <= 254)
          v84 = 0;
        else
          v84 = v38;
      }
      else if (v35)
      {
        v84 = 0;
      }
      else if (v36 <= 254)
      {
        v84 = v38;
      }
      else
      {
        v84 = 0;
      }
LABEL_160:
      *(double *)v121 = (double)v84;
      cv::_InputArray::_InputArray((cv::_InputArray *)v132, (const double *)v121);
      v91 = cv::noArray(v90);
      cv::Mat::setTo((cv::Mat *)v111, (const cv::_InputArray *)v132, (const cv::_InputArray *)v91);
      goto LABEL_89;
    }
    goto LABEL_152;
  }
  a5 = (double)v38;
LABEL_53:
  LODWORD(v121[0]) = 0;
  HIDWORD(v121[0]) = v111[1];
  v100 = v122;
  v101 = v123;
  v102 = v124;
  v104 = v126;
  v105 = v127;
  v103 = v125;
  v106 = v128;
  v107 = (char *)&v101 + 4;
  v108 = (cv *)v109;
  v109[0] = 0;
  v42 = (unsigned int *)v126;
  v109[1] = 0;
  if ((_QWORD)v126)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    v44 = v123;
  }
  else
  {
    v44 = v123;
  }
  if (v44 > 2)
  {
    LODWORD(v101) = 0;
    cv::Mat::copySize((cv::Mat *)&v100, (const cv::Mat *)&v122);
  }
  else
  {
    v45 = v130;
    v46 = v108;
    *(_QWORD *)v108 = *(_QWORD *)v130;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v45 + 1);
  }
  v93 = v112;
  v92 = *(_OWORD *)v111;
  v47 = (unsigned int *)v113;
  v94 = v113;
  v95 = v114;
  v96 = v115;
  v97 = (char *)&v92 + 8;
  v99[0] = 0;
  v99[1] = 0;
  v98 = (cv *)v99;
  if ((_QWORD)v113)
  {
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    v49 = HIDWORD(v111[0]);
  }
  else
  {
    v49 = HIDWORD(v111[0]);
  }
  if (v49 > 2)
  {
    DWORD1(v92) = 0;
    cv::Mat::copySize((cv::Mat *)&v92, (const cv::Mat *)v111);
  }
  else
  {
    v50 = v117;
    v51 = v98;
    *(_QWORD *)v98 = *(_QWORD *)v117;
    *((_QWORD *)v51 + 1) = *((_QWORD *)v50 + 1);
  }
  cv::ThresholdRunner::ThresholdRunner((uint64_t)v132, &v100, (uint64_t)&v92, v35, a4, a5);
  v52 = HIDWORD(v111[0]);
  if (SHIDWORD(v111[0]) >= 3)
  {
    v54 = v116;
    v53 = 1;
    do
    {
      v55 = *v54++;
      v53 *= v55;
      --v52;
    }
    while (v52);
  }
  else
  {
    v53 = SHIDWORD(v111[1]) * (uint64_t)SLODWORD(v111[1]);
  }
  cv::parallel_for_((uint64_t *)v121, (uint64_t)v132, (double)(unint64_t)v53 * 0.0000152587891);
  cv::ThresholdRunner::~ThresholdRunner((cv::ThresholdRunner *)v132, v56);
  v58 = (unsigned int *)v94;
  if ((_QWORD)v94)
  {
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
      cv::Mat::deallocate((cv::Mat *)&v92, v57);
  }
  v93 = 0;
  v95 = 0uLL;
  *((_QWORD *)&v94 + 1) = 0;
  if (SDWORD1(v92) >= 1)
  {
    v61 = 0;
    v62 = v97;
    do
      *(_DWORD *)&v62[4 * v61++] = 0;
    while (v61 < SDWORD1(v92));
  }
  *(_QWORD *)&v94 = 0;
  if (v98 != (cv *)v99)
    cv::fastFree((void **)v98, v57);
  v63 = (unsigned int *)v104;
  if ((_QWORD)v104)
  {
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
      cv::Mat::deallocate((cv::Mat *)&v100, v57);
  }
  v103 = 0;
  v105 = 0uLL;
  *((_QWORD *)&v104 + 1) = 0;
  if ((int)v101 >= 1)
  {
    v66 = 0;
    v67 = v107;
    do
      *(_DWORD *)&v67[4 * v66++] = 0;
    while (v66 < (int)v101);
  }
  *(_QWORD *)&v104 = 0;
  if (v108 != (cv *)v109)
    cv::fastFree((void **)v108, v57);
LABEL_89:
  v68 = (unsigned int *)v113;
  if ((_QWORD)v113)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      cv::Mat::deallocate((cv::Mat *)v111, v57);
  }
  v112 = 0;
  *((_QWORD *)&v113 + 1) = 0;
  v114 = 0uLL;
  if (SHIDWORD(v111[0]) >= 1)
  {
    v71 = 0;
    v72 = v116;
    do
      v72[v71++] = 0;
    while (v71 < SHIDWORD(v111[0]));
  }
  *(_QWORD *)&v113 = 0;
  if (v117 != (cv *)&v118)
    cv::fastFree((void **)v117, v57);
  v73 = (unsigned int *)v126;
  if ((_QWORD)v126)
  {
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      cv::Mat::deallocate((cv::Mat *)&v122, v57);
  }
  v125 = 0;
  *((_QWORD *)&v126 + 1) = 0;
  v127 = 0uLL;
  if ((int)v123 >= 1)
  {
    v76 = 0;
    v77 = v129;
    do
      v77[v76++] = 0;
    while (v76 < (int)v123);
  }
  *(_QWORD *)&v126 = 0;
  if (v130 != (cv *)&v131)
    cv::fastFree((void **)v130, v57);
  return a4;
}

void sub_219E2FF9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v57;

  cv::Mat::~Mat((cv::Mat *)&a37, a2);
  cv::Mat::~Mat((cv::Mat *)&a56, v57);
  _Unwind_Resume(a1);
}

void sub_219E300D8()
{
  JUMPOUT(0x219E300D0);
}

uint64_t cv::ThresholdRunner::ThresholdRunner(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, double a5, double a6)
{
  cv::Mat *v11;
  int *v12;
  cv::Mat *v13;
  int *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;

  *(_QWORD *)a1 = &off_24DBEF678;
  *(_DWORD *)(a1 + 8) = 1124007936;
  v11 = (cv::Mat *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  v12 = (int *)(a1 + 12);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 104) = 1124007936;
  v13 = (cv::Mat *)(a1 + 104);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 108) = 0u;
  v14 = (int *)(a1 + 108);
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if ((_DWORD *)(a1 + 8) != a2)
  {
    v16 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v16)
    {
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *(unsigned int **)(a1 + 32);
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          cv::Mat::deallocate((cv::Mat *)(a1 + 8), a2);
      }
    }
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if (*(int *)(a1 + 12) <= 0)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 8) = *a2;
    }
    else
    {
      v21 = 0;
      v22 = *(_QWORD *)(a1 + 72);
      do
      {
        *(_DWORD *)(v22 + 4 * v21++) = 0;
        v23 = *v12;
      }
      while (v21 < v23);
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 8) = *a2;
      if ((int)v23 > 2)
        goto LABEL_16;
    }
    v24 = a2[1];
    if (v24 <= 2)
    {
      *(_DWORD *)(a1 + 12) = v24;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 1);
      v25 = (_QWORD *)*((_QWORD *)a2 + 9);
      v26 = *(_QWORD **)(a1 + 80);
      *v26 = *v25;
      v26[1] = v25[1];
LABEL_17:
      *(_OWORD *)(a1 + 40) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v11, (const cv::Mat *)a2);
    goto LABEL_17;
  }
LABEL_18:
  if (v13 != (cv::Mat *)a3)
  {
    v27 = *(unsigned int **)(a3 + 24);
    if (v27)
    {
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    v29 = *(unsigned int **)(a1 + 128);
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
        cv::Mat::deallocate(v13, a2);
    }
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    if (*(int *)(a1 + 108) <= 0)
    {
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
    }
    else
    {
      v32 = 0;
      v33 = *(_QWORD *)(a1 + 168);
      do
      {
        *(_DWORD *)(v33 + 4 * v32++) = 0;
        v34 = *v14;
      }
      while (v32 < v34);
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
      if ((int)v34 > 2)
        goto LABEL_33;
    }
    v35 = *(_DWORD *)(a3 + 4);
    if (v35 <= 2)
    {
      *(_DWORD *)(a1 + 108) = v35;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 8);
      v36 = *(_QWORD **)(a3 + 72);
      v37 = *(_QWORD **)(a1 + 176);
      *v37 = *v36;
      v37[1] = v36[1];
LABEL_34:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a3 + 56);
      goto LABEL_35;
    }
LABEL_33:
    cv::Mat::copySize(v13, (const cv::Mat *)a3);
    goto LABEL_34;
  }
LABEL_35:
  *(double *)(a1 + 200) = a5;
  *(double *)(a1 + 208) = a6;
  *(_DWORD *)(a1 + 216) = a4;
  return a1;
}

void sub_219E303AC(_Unwind_Exception *a1, void *a2)
{
  cv::BaseRowFilter *v2;
  cv::Mat *v3;
  cv::Mat *v4;
  void *v6;

  cv::Mat::~Mat(v4, a2);
  cv::Mat::~Mat(v3, v6);
  cv::BaseRowFilter::~BaseRowFilter(v2);
  _Unwind_Resume(a1);
}

void cv::ThresholdRunner::~ThresholdRunner(cv::ThresholdRunner *this, void *a2)
{
  cv::ThresholdRunner::~ThresholdRunner(this, a2);
  JUMPOUT(0x2207351BCLL);
}

{
  unsigned int *v3;
  cv::Mat *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  *(_QWORD *)this = &off_24DBEF678;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = (cv::ThresholdRunner *)((char *)this + 104);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      cv::Mat::deallocate(v4, a2);
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  if (*((int *)this + 27) >= 1)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 21);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *((int *)this + 27));
  }
  *((_QWORD *)this + 16) = 0;
  v9 = (void **)*((_QWORD *)this + 22);
  if (v9 != (void **)((char *)this + 184))
    cv::fastFree(v9, a2);
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      cv::Mat::deallocate((cv::ThresholdRunner *)((char *)this + 8), a2);
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  if (*((int *)this + 3) >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 9);
    do
      *(_DWORD *)(v14 + 4 * v13++) = 0;
    while (v13 < *((int *)this + 3));
  }
  *((_QWORD *)this + 4) = 0;
  v15 = (void **)*((_QWORD *)this + 10);
  if (v15 != (void **)((char *)this + 88))
    cv::fastFree(v15, a2);
  cv::BaseRowFilter::~BaseRowFilter(this);
}

void cv::ThresholdRunner::operator()(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  char *v14;
  size_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const cv::Exception *v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  char v62;
  uint64_t v63;
  _BYTE *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  const cv::Exception *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const cv::Exception *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int *v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  cv *v126;
  unint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  cv *v136;
  unint64_t v137;
  void *__p[2];
  void *v139[2];
  void *v140[2];
  void *v141[2];
  int __b;
  int v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  __b = *a2;
  v3 = __b;
  v143 = v4;
  v139[0] = (void *)0x7FFFFFFF80000000;
  cv::Mat::Mat(&v128, a1 + 8, &__b, v139);
  __b = v3;
  v143 = v4;
  v139[0] = (void *)0x7FFFFFFF80000000;
  cv::Mat::Mat(&v118, a1 + 104, &__b, v139);
  switch(v128 & 7)
  {
    case 5u:
      v17 = *v135;
      v18 = v135[1] + v135[1] * ((v128 >> 3) & 0x1FF);
      if ((v128 & 0x4000) != 0)
      {
        if ((v118 & 0x4000) != 0)
          v19 = *v135;
        else
          v19 = 1;
        if ((v118 & 0x4000) != 0)
          v17 = 1;
        v18 *= v19;
      }
      v20 = v130;
      v21 = v120;
      v22 = *(double *)(a1 + 200);
      v23 = *(double *)(a1 + 208);
      v24 = v137 >> 2;
      v25 = v127 >> 2;
      switch(*(_DWORD *)(a1 + 216))
      {
        case 0:
          if (v17 >= 1)
          {
            v26 = 0;
            v27 = 4 * v25;
            v28 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                v29 = 0;
                do
                {
                  if (*(float *)(v20 + v29) <= v22)
                    v30 = 0.0;
                  else
                    v30 = v23;
                  *(float *)(v21 + v29) = v30;
                  v29 += 4;
                }
                while (4 * v18 != v29);
              }
              ++v26;
              v21 += v27;
              v20 += v28;
            }
            while (v26 != v17);
          }
          break;
        case 1:
          if (v17 >= 1)
          {
            v68 = 0;
            v69 = 4 * v25;
            v70 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                v71 = 0;
                do
                {
                  if (*(float *)(v20 + v71) > v22)
                    v72 = 0.0;
                  else
                    v72 = v23;
                  *(float *)(v21 + v71) = v72;
                  v71 += 4;
                }
                while (4 * v18 != v71);
              }
              ++v68;
              v21 += v69;
              v20 += v70;
            }
            while (v68 != v17);
          }
          break;
        case 2:
          if (v17 >= 1)
          {
            v73 = 0;
            v74 = 4 * v25;
            v75 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                v76 = 0;
                do
                {
                  v77 = *(float *)(v20 + v76);
                  if (v77 > v22)
                    v77 = v22;
                  *(float *)(v21 + v76) = v77;
                  v76 += 4;
                }
                while (4 * v18 != v76);
              }
              ++v73;
              v21 += v74;
              v20 += v75;
            }
            while (v73 != v17);
          }
          break;
        case 3:
          if (v17 >= 1)
          {
            v78 = 0;
            v79 = 4 * v25;
            v80 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                v81 = 0;
                do
                {
                  v82 = *(float *)(v20 + v81);
                  if (v82 <= v22)
                    v82 = 0.0;
                  *(float *)(v21 + v81) = v82;
                  v81 += 4;
                }
                while (4 * v18 != v81);
              }
              ++v78;
              v21 += v79;
              v20 += v80;
            }
            while (v78 != v17);
          }
          break;
        case 4:
          if (v17 >= 1)
          {
            v83 = 0;
            v84 = 4 * v25;
            v85 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                v86 = 0;
                do
                {
                  v87 = *(float *)(v20 + v86);
                  if (v87 > v22)
                    v87 = 0.0;
                  *(float *)(v21 + v86) = v87;
                  v86 += 4;
                }
                while (4 * v18 != v86);
              }
              ++v83;
              v21 += v84;
              v20 += v85;
            }
            while (v83 != v17);
          }
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v139, "");
          std::string::basic_string[abi:ne180100]<0>(v141, "thresh_32f");
          std::string::basic_string[abi:ne180100]<0>(v140, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(&__b, 4294967291, v139, v141, v140, 598);
          cv::error((cv *)&__b, v67);
      }
      break;
    case 3u:
      v31 = *v135;
      v32 = v135[1] + v135[1] * ((v128 >> 3) & 0x1FF);
      if ((v128 & 0x4000) != 0)
      {
        if ((v118 & 0x4000) != 0)
          v33 = *v135;
        else
          v33 = 1;
        if ((v118 & 0x4000) != 0)
          v31 = 1;
        v32 *= v33;
      }
      v34 = v130;
      v35 = (int)*(double *)(a1 + 200);
      v36 = (int)*(double *)(a1 + 208);
      v37 = v120;
      v38 = v137 >> 1;
      v39 = v127 >> 1;
      switch(*(_DWORD *)(a1 + 216))
      {
        case 0:
          if (v31 >= 1)
          {
            v40 = 0;
            v41 = 2 * v39;
            v42 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                v43 = 0;
                do
                {
                  if (*(__int16 *)(v34 + v43) <= v35)
                    v5 = 0;
                  else
                    v5 = (char *)v36;
                  *(_WORD *)(v37 + v43) = (_WORD)v5;
                  v43 += 2;
                }
                while (2 * v32 != v43);
              }
              ++v40;
              v37 += v41;
              v34 += v42;
            }
            while (v40 != v31);
          }
          break;
        case 1:
          if (v31 >= 1)
          {
            v89 = 0;
            v90 = 2 * v39;
            v91 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                v92 = 0;
                do
                {
                  if (*(__int16 *)(v34 + v92) <= v35)
                    v5 = (char *)v36;
                  else
                    v5 = 0;
                  *(_WORD *)(v37 + v92) = (_WORD)v5;
                  v92 += 2;
                }
                while (2 * v32 != v92);
              }
              ++v89;
              v37 += v90;
              v34 += v91;
            }
            while (v89 != v31);
          }
          break;
        case 2:
          if (v31 >= 1)
          {
            v93 = 0;
            v94 = 2 * v39;
            v95 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                v96 = 0;
                do
                {
                  v97 = *(__int16 *)(v34 + v96);
                  if (v97 >= v35)
                    LOWORD(v97) = v35;
                  *(_WORD *)(v37 + v96) = v97;
                  v96 += 2;
                }
                while (2 * v32 != v96);
              }
              ++v93;
              v37 += v94;
              v34 += v95;
            }
            while (v93 != v31);
          }
          break;
        case 3:
          if (v31 >= 1)
          {
            v98 = 0;
            v99 = 2 * v39;
            v100 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                v101 = 0;
                do
                {
                  v102 = *(__int16 *)(v34 + v101);
                  if (v102 <= v35)
                    LOWORD(v102) = 0;
                  *(_WORD *)(v37 + v101) = v102;
                  v101 += 2;
                }
                while (2 * v32 != v101);
              }
              ++v98;
              v37 += v99;
              v34 += v100;
            }
            while (v98 != v31);
          }
          break;
        case 4:
          if (v31 >= 1)
          {
            v103 = 0;
            v104 = 2 * v39;
            v105 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                v106 = 0;
                do
                {
                  v107 = *(__int16 *)(v34 + v106);
                  if (v107 > v35)
                    LOWORD(v107) = 0;
                  *(_WORD *)(v37 + v106) = v107;
                  v106 += 2;
                }
                while (2 * v32 != v106);
              }
              ++v103;
              v37 += v104;
              v34 += v105;
            }
            while (v103 != v31);
          }
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v139, "");
          std::string::basic_string[abi:ne180100]<0>(v141, "thresh_16s");
          std::string::basic_string[abi:ne180100]<0>(v140, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(&__b, 4294967291, v139, v141, v140, 426);
          cv::error((cv *)&__b, v88);
      }
      break;
    case 0u:
      v6 = *(_DWORD *)(a1 + 216);
      v7 = *v135;
      v8 = v135[1] + v135[1] * ((v128 >> 3) & 0x1FF);
      if ((v128 & 0x4000) != 0)
      {
        if ((v118 & 0x4000) != 0)
          v9 = *v135;
        else
          v9 = 1;
        if ((v118 & 0x4000) != 0)
          v7 = 1;
        v8 *= v9;
      }
      v10 = *(double *)(a1 + 200);
      v11 = *(double *)(a1 + 208);
      v12 = (int)v10;
      v13 = (int)v11;
      switch(v6)
      {
        case 0:
          bzero(&__b, v12 + 1);
          if ((_DWORD)v12 == 255)
            break;
          v14 = (char *)&__b + v12 + 1;
          v15 = ~(_BYTE)v12;
          v16 = v13;
          goto LABEL_59;
        case 1:
          memset(&__b, (int)v11, v12 + 1);
          if ((_DWORD)v12 == 255)
            break;
          v45 = (char *)&__b + v12 + 1;
          v46 = ~(_BYTE)v12;
          goto LABEL_69;
        case 2:
          v47 = 0;
          v48 = (v12 + 1);
          do
          {
            *((_BYTE *)&__b + v47) = v47;
            ++v47;
          }
          while (v12 + 1 != v47);
          if ((v47 - 1) > 0xFE)
            break;
          v14 = (char *)&__b + v48;
          if (v48 <= 0xFF)
            LODWORD(v48) = 255;
          v15 = (v48 + ~(_DWORD)v12) + 1;
          v16 = (int)v10;
LABEL_59:
          memset(v14, v16, v15);
          break;
        case 3:
          v49 = v12 + 1;
          bzero(&__b, v12 + 1);
          if ((_DWORD)v12 != 255)
          {
            do
            {
              *((_BYTE *)&__b + v49) = v49;
              ++v49;
            }
            while (v49 != 256);
          }
          break;
        case 4:
          v50 = 0;
          v51 = (v12 + 1);
          do
          {
            *((_BYTE *)&__b + v50) = v50;
            ++v50;
          }
          while (v51 != v50);
          if ((v50 - 1) > 0xFE)
            break;
          v45 = (char *)&__b + v51;
          if (v51 <= 0xFF)
            LODWORD(v51) = 255;
          v46 = (v51 + ~(_DWORD)v12) + 1;
LABEL_69:
          bzero(v45, v46);
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v141, "Unknown threshold type");
          std::string::basic_string[abi:ne180100]<0>(v140, "thresh_8u");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(v139, 4294967291, v141, v140, __p, 100);
          cv::error((cv *)v139, v44);
      }
      if (v8 >= 1 && v7 >= 1)
      {
        for (i = 0; i != v7; ++i)
        {
          v53 = v130;
          v54 = v137;
          v55 = v120;
          v56 = v127;
          if (v8 >= 4)
          {
            v58 = 0;
            v59 = v130 + v137 * i;
            v5 = (char *)(v120 + v127 * i);
            do
            {
              v60 = *((_BYTE *)&__b + *(unsigned __int8 *)(v59 + v58 + 1));
              v61 = &v5[v58];
              *v61 = *((_BYTE *)&__b + *(unsigned __int8 *)(v59 + v58));
              v61[1] = v60;
              v62 = *((_BYTE *)&__b + *(unsigned __int8 *)(v59 + v58 + 3));
              v61[2] = *((_BYTE *)&__b + *(unsigned __int8 *)(v59 + v58 + 2));
              v61[3] = v62;
              v58 += 4;
            }
            while (v58 <= v8 - 4);
            v57 = v58;
          }
          else
          {
            v57 = 0;
          }
          if ((int)v57 < v8)
          {
            v63 = v8 - v57;
            v64 = (_BYTE *)(v55 + v57 + v56 * i);
            v65 = (unsigned __int8 *)(v53 + v57 + v54 * i);
            do
            {
              v66 = *v65++;
              *v64++ = *((_BYTE *)&__b + v66);
              --v63;
            }
            while (v63);
          }
        }
      }
      break;
  }
  v108 = v121;
  if (v121)
  {
    do
    {
      v109 = __ldaxr(v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v108));
    if (!v110)
      cv::Mat::deallocate((cv::Mat *)&v118, v5);
  }
  v120 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  if (v119 >= 1)
  {
    v111 = 0;
    v112 = v125;
    do
      *(_DWORD *)(v112 + 4 * v111++) = 0;
    while (v111 < v119);
  }
  v121 = 0;
  if (v126 != (cv *)&v127)
    cv::fastFree((void **)v126, v5);
  v113 = v131;
  if (v131)
  {
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
      cv::Mat::deallocate((cv::Mat *)&v128, v5);
  }
  v130 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  if (v129 >= 1)
  {
    v116 = 0;
    v117 = v135;
    do
      v117[v116++] = 0;
    while (v116 < v129);
  }
  v131 = 0;
  if (v136 != (cv *)&v137)
    cv::fastFree((void **)v136, v5);
}

void sub_219E30E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a67;
  void *v68;
  void *v69;

  cv::Exception::~Exception((cv::Exception *)&a67);
  if (a60 < 0)
    operator delete(__p);
  if (a66 < 0)
    operator delete(a61);
  if (a42 < 0)
    operator delete(a37);
  cv::Mat::~Mat((cv::Mat *)&a10, v68);
  cv::Mat::~Mat((cv::Mat *)&a22, v69);
  _Unwind_Resume(a1);
}

uint64_t cv::detail::LKTrackerInvoker::operator()(uint64_t a1, uint64_t a2)
{
  int16x4_t v2;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int16x8_t *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int v24;
  float v25;
  float32x2_t v26;
  uint64_t v27;
  float32x2_t v28;
  float v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int32 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  int32x4_t v49;
  float v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  const __int16 *v54;
  int16x8_t *v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  uint64_t v59;
  int16x4_t *v60;
  const __int16 *v61;
  const __int16 *v62;
  const __int16 *v63;
  const __int16 *v64;
  int32x4_t v65;
  uint64_t v66;
  unsigned int v67;
  _WORD *v68;
  unint64_t v69;
  _WORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v86;
  int v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float32x2_t v92;
  uint64_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float v96;
  float32x2_t v97;
  int v98;
  int v99;
  BOOL v100;
  uint64_t v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float32x2_t v109;
  int32x4_t v110;
  int16x8_t *v111;
  int32x4_t v112;
  uint64_t v113;
  const __int16 *v114;
  int v115;
  uint64_t v116;
  int16x8_t *v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int32x4_t v122;
  int16x8_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  uint64_t v128;
  unsigned int v129;
  int32x2_t v130;
  float32x2_t v131;
  uint64_t v132;
  float *v133;
  float *v134;
  float32x2_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  float v140;
  float v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  float v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int16x8_t *v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int16x8_t *v158;
  unsigned int v159;
  int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  _DWORD *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t result;
  unint64_t v173;
  int v174;
  int v175;
  int *v176;
  int *v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int16x8_t *v183;
  unsigned int *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  __int8 *v188;
  int v189;
  int v190;
  _DWORD v191[2];
  __int8 *v192;
  unsigned int *v193;
  __int8 *v194;
  __int8 *v195;
  __int8 *v196;
  uint64_t v197;
  _DWORD *v198;
  cv *v199;
  _QWORD v200[2];
  int v201;
  int v202;
  _DWORD v203[2];
  int16x8_t *v204;
  unsigned int *v205;
  int16x8_t *v206;
  __int8 *v207;
  __int8 *v208;
  uint64_t v209;
  _DWORD *v210;
  cv *v211;
  _QWORD v212[2];
  int16x8_t *v213;
  uint64_t v214;
  _BYTE v215[4136];
  int32x4_t v216;
  int16x4x2_t v217;
  int16x4x2_t v218;
  int16x4x2_t v219;
  int16x8x2_t v220;

  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = *(_DWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 68);
  v7 = *(int **)(v4 + 16);
  v186 = *(_QWORD *)(v4 + 24);
  v184 = *(unsigned int **)(v4 + 8);
  v8 = *v184;
  v9 = (v8 >> 3) & 0x1FF;
  v10 = v9 + 1;
  v11 = 3 * v5 * v6 * (v9 + 1);
  v12 = (int16x8_t *)v215;
  v213 = (int16x8_t *)v215;
  v214 = 2056;
  v176 = v3;
  if (v11 < 0x809)
  {
    v14 = v6;
    v13 = v5;
  }
  else
  {
    v214 = (int)v11;
    v12 = (int16x8_t *)operator new[]();
    v3 = v176;
    v213 = v12;
    v13 = *(_DWORD *)(v4 + 64);
    v14 = *(_DWORD *)(v4 + 68);
  }
  v15 = 8 * v10 - 5;
  v203[0] = v14;
  v203[1] = v13;
  v204 = v12;
  v205 = 0;
  v210 = v203;
  v211 = (cv *)v212;
  v201 = v15 | 0x42FF4000;
  v202 = 2;
  v212[0] = (int)((v15 >> 2) + 2) * (uint64_t)v13;
  v212[1] = (v15 >> 2) + 2;
  v208 = &v12->i8[v212[0] * v14];
  v209 = 0;
  v206 = v12;
  v207 = v208;
  v16 = 16 * v10 - 5;
  v191[0] = v14;
  v191[1] = v13;
  v192 = &v12->i8[2 * v13 * (int)v10 * v14];
  v193 = 0;
  v198 = v191;
  v199 = (cv *)v200;
  v189 = v16 & 0xFFF | 0x42FF4000;
  v190 = 2;
  v200[0] = (int)(((v16 >> 2) & 0x3FE) + 2) * (uint64_t)v13;
  v200[1] = ((v16 >> 2) & 0x3FE) + 2;
  v196 = &v192[v200[0] * v14];
  v197 = 0;
  v194 = v192;
  v195 = v196;
  v17 = *v3;
  if ((int)v17 >= v3[1])
    goto LABEL_98;
  v18 = 2 * v10;
  v19 = (float)(v5 - 1) * 0.5;
  v20 = (float)(v6 - 1) * 0.5;
  v185 = v9 + 1;
  v21 = 4 * ((v8 >> 3) & 0x1FF) + 6;
  v22.i64[0] = 0x800000008;
  v22.i64[1] = 0x800000008;
  v23.i64[0] = 0xD0000000DLL;
  v23.i64[1] = 0xD0000000DLL;
  v177 = v7;
  do
  {
    v24 = *(_DWORD *)(v4 + 88);
    v25 = 1.0 / (double)(1 << v24);
    v26 = vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(v4 + 32) + 8 * v17), v25);
    if (v24 == *(_DWORD *)(v4 + 92))
    {
      v27 = *(_QWORD *)(v4 + 40);
      v28 = v26;
      if ((*(_BYTE *)(v4 + 96) & 4) == 0)
        goto LABEL_11;
    }
    else
    {
      v27 = *(_QWORD *)(v4 + 40);
      v25 = 2.0;
    }
    v28 = vmul_n_f32(*(float32x2_t *)(v27 + 8 * v17), v25);
LABEL_11:
    *(float32x2_t *)(v27 + 8 * v17) = v28;
    v29 = v26.f32[0] - v19;
    v26.f32[0] = v26.f32[1] - v20;
    v30 = (int)v29 - ((double)(int)v29 > v29);
    v31 = *(_DWORD *)(v4 + 64);
    if (v30 < -v31
      || v30 >= *(_DWORD *)(v186 + 12)
      || (v32 = (int)(float)(v26.f32[1] - v20) - ((double)(int)v26.f32[0] > v26.f32[0]),
          LODWORD(v33) = *(_DWORD *)(v4 + 68),
          v32 < -(int)v33)
      || v32 >= *(_DWORD *)(v186 + 8))
    {
      if (!v24)
      {
        v73 = *(_QWORD *)(v4 + 48);
        if (v73)
          *(_BYTE *)(v73 + v17) = 0;
        v74 = *(_QWORD *)(v4 + 56);
        if (v74)
          *(_DWORD *)(v74 + 4 * v17) = 0;
      }
    }
    else
    {
      v34 = *((_QWORD *)v7 + 10);
      v35 = *v7;
      v178 = v17;
      if ((int)v33 < 1)
      {
        v48 = 0;
        v50 = 0.0;
        v52 = 0uLL;
        v51 = 0uLL;
        v49 = 0uLL;
      }
      else
      {
        v175 = *v7;
        v179 = *((_QWORD *)v7 + 10);
        v36 = 0;
        v37 = v29 - (float)v30;
        v38 = v26.f32[0] - (float)v32;
        v39 = (uint64_t)rint((float)((float)((float)(1.0 - v37) * (float)(1.0 - v38)) * 16384.0));
        v40 = (uint64_t)rint((float)((float)(v37 * (float)(1.0 - v38)) * 16384.0));
        v41 = (uint64_t)rint((float)((float)(v38 * (float)(1.0 - v37)) * 16384.0));
        v42 = 0x4000 - v41 - (v40 + v39);
        v2.i32[0] = v42;
        v43 = *(_QWORD *)(v186 + 80) / ((0x88442211uLL >> (4 * (*(_DWORD *)v186 & 7u))) & 0xF);
        v187 = (int)v10 * (uint64_t)v30;
        v182 = v30 * v18;
        v44 = (int)v43;
        v45 = v18 + (int)v43;
        v46 = (int)v43 + 1;
        v47 = (int)(*((_QWORD *)v184 + 10) / ((0x88442211uLL >> (4 * (*v184 & 7))) & 0xF));
        v181 = v32;
        v48 = 0;
        v49 = 0uLL;
        v50 = 0.0;
        v51 = 0uLL;
        v52 = 0uLL;
        do
        {
          v53 = *((_QWORD *)v184 + 2) + (v36 + v181) * v47 + v187;
          v54 = (const __int16 *)(*(_QWORD *)(v186 + 16) + 2 * (v36 + v181) * v44 + 2 * v182);
          v55 = v204;
          v56 = v212[0];
          v57 = (__int16 *)&v192[v200[0] * v36];
          v58 = v31 * v10;
          if (v31 * (int)v10 >= 4)
          {
            v59 = 0;
            v60 = (int16x4_t *)&v204->i8[v212[0] * v36];
            v61 = (const __int16 *)(*(_QWORD *)(v186 + 16) + 2 * (v36 + v181) * v44 + 2 * v182);
            do
            {
              v216 = (int32x4_t)vld2_s16(v61);
              v61 += 8;
              v62 = &v54[2 * v10];
              v217 = vld2_s16(v62);
              *v60++ = vmovn_s32(vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v53 + (v10 + v59))), (int16x4_t)v40, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v53 + v59)), (int16x4_t)v39, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v53 + v59 + v47)), (int16x4_t)v41, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v53 + v59 + v47 + v10)), v2, 0), v22));
              v63 = &v54[v44];
              v218 = vld2_s16(v63);
              v64 = &v54[v45];
              v219 = vld2_s16(v64);
              v65 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v217.val[0], (int16x4_t)v40, 0), *(int16x4_t *)v216.i8, (int16x4_t)v39, 0), v218.val[0], (int16x4_t)v41, 0), v219.val[0], v2, 0), v23);
              v216 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v217.val[1], (int16x4_t)v40, 0), (int16x4_t)v216.u64[1], (int16x4_t)v39, 0), v218.val[1], (int16x4_t)v41, 0), v219.val[1], v2, 0), v23);
              v49 = vmlaq_s32(v49, v65, v65);
              v51 = vmlaq_s32(v51, v216, v65);
              v216.u64[1] = (unint64_t)vmovn_s32(v65);
              v217.val[0] = vmovn_s32(v216);
              vst2_s16(v57, *(int16x4x2_t *)((char *)&v216 + 8));
              v57 += 8;
              v52 = vmlaq_s32(v52, v216, v216);
              v59 += 4;
              v31 = *(_DWORD *)(v4 + 64);
              v58 = v31 * v10;
              v54 = v61;
            }
            while (v59 <= v31 * (int)v10 - 4);
          }
          else
          {
            LODWORD(v59) = 0;
          }
          if ((int)v59 < v58)
          {
            v66 = v59;
            v67 = v185 + v59;
            v68 = (__int16 *)((char *)&v55->i16[v59] + v56 * v36);
            v69 = v58 - (unint64_t)v59;
            v70 = v57 + 1;
            do
            {
              v71 = (*(const __int16 *)((char *)v54 + v21 - 2) * (int)v40
                   + *v54 * (int)v39
                   + v54[v44] * (int)v41
                   + v42 * v54[v45]
                   + 0x2000) >> 14;
              v72 = *(const __int16 *)((char *)v54 + v21) * (_DWORD)v40
                  + v54[1] * (_DWORD)v39
                  + v54[v46] * (_DWORD)v41
                  + v42 * v54[v45 + 1]
                  + 0x2000;
              *v68++ = (*(unsigned __int8 *)(v53 + v67) * (_DWORD)v40
                      + *(unsigned __int8 *)(v53 + v66) * (_DWORD)v39
                      + *(unsigned __int8 *)(v53 + v66 + v47) * (_DWORD)v41
                      + v42 * *(unsigned __int8 *)(v53 + v66 + v47 + v10)
                      + 256) >> 9;
              *(v70 - 1) = v71;
              *v70 = v72 >> 14;
              v70 += 2;
              v50 = v50 + (float)((v72 >> 14) * v71);
              ++v66;
              v48 = vadd_f32(v48, vcvt_f32_s32(vmul_s32((int32x2_t)__PAIR64__(v72 >> 14, v71), (int32x2_t)__PAIR64__(v72 >> 14, v71))));
              v54 += 2;
              ++v67;
              --v69;
            }
            while (v69);
          }
          ++v36;
          v33 = *(int *)(v4 + 68);
        }
        while (v36 < v33);
        v3 = v176;
        v7 = v177;
        v17 = v178;
        v34 = v179;
        LOBYTE(v35) = v175;
      }
      v75 = (int32x2_t)vaddq_s32(vaddq_s32(v51, vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), vaddq_s32(vdupq_laneq_s32(v51, 2), vdupq_laneq_s32(v51, 3))).u64[0];
      *(float *)v75.i32 = (float)(v50 + (float)v75.i32[0]) * 0.00000095367;
      v76 = vadd_s32(vzip1_s32(*(int32x2_t *)v49.i8, *(int32x2_t *)v52.i8), vzip2_s32(*(int32x2_t *)v49.i8, *(int32x2_t *)v52.i8));
      v77 = (int32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
      v78 = (int32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      v79 = vadd_f32(v48, vcvt_f32_s32(vadd_s32(vadd_s32(v76, vzip1_s32(v78, v77)), vzip2_s32(v78, v77))));
      v80 = (float32x2_t)vdup_n_s32(0x35800000u);
      v81 = vmul_f32(v79, v80);
      v82 = (float)(vaddv_f32(v81)
                  - sqrtf((float)(*(float *)v75.i32 * (float)(*(float *)v75.i32 * 4.0))+ (float)((float)(v81.f32[0] - v81.f32[1]) * (float)(v81.f32[0] - v81.f32[1]))))/ (float)(2 * v33 * v31);
      v83 = *(_QWORD *)(v4 + 56);
      if (v83 && (*(_BYTE *)(v4 + 96) & 8) != 0)
        *(float *)(v83 + 4 * v17) = v82;
      v84 = vmlas_n_f32(-(float)(*(float *)v75.i32 * *(float *)v75.i32), v81.f32[1], v81.f32[0]);
      if (v82 < *(float *)(v4 + 100) || v84 < 0.00000011921)
      {
        if (!*(_DWORD *)(v4 + 88))
        {
          v86 = *(_QWORD *)(v4 + 48);
          if (v86)
            *(_BYTE *)(v86 + v17) = 0;
        }
      }
      else
      {
        v173 = v34 / ((0x88442211uLL >> (4 * (v35 & 7u))) & 0xF);
        v174 = *(_DWORD *)(v4 + 76);
        if (v174 >= 1)
        {
          v87 = 0;
          v88 = v28.f32[1] - v20;
          v89 = v28.f32[0] - v19;
          v183 = v204;
          v90 = v212[0];
          v188 = v192;
          v91 = v200[0];
          v92 = vneg_f32(v81);
          v93 = v31 * (int)v10;
          v94 = (float32x2_t)vdup_lane_s32(v75, 0);
          v95 = 0;
          v96 = 1.0 / v84;
          while (1)
          {
            v97 = v95;
            v98 = (int)v89 - ((double)(int)v89 > v89);
            if (v98 < -v31)
              break;
            v99 = (int)v88 - ((double)(int)v88 > v88);
            v100 = v98 >= v7[3] || v99 < -(int)v33;
            if (v100 || v99 >= v7[2])
              break;
            v180 = v87;
            if ((int)v33 < 1)
            {
              v109 = 0;
              v112 = 0uLL;
              v110 = 0uLL;
            }
            else
            {
              v101 = 0;
              v102 = v89 - (float)v98;
              v103 = v88 - (float)v99;
              v104 = (uint64_t)rint((float)((float)((float)(1.0 - v102) * (float)(1.0 - v103)) * 16384.0));
              v105 = (uint64_t)rint((float)((float)(v102 * (float)(1.0 - v103)) * 16384.0));
              v106 = (uint64_t)rint((float)((float)((float)(1.0 - v102) * v103) * 16384.0));
              v2.i32[0] = 0x4000 - v104 - (v106 + v105);
              v107 = *((_QWORD *)v7 + 2) + (int)v10 * (uint64_t)v98;
              v108 = v99;
              v109 = 0;
              v110 = 0uLL;
              v111 = v183;
              v112 = 0uLL;
              do
              {
                v113 = v107 + (v101 + v108) * (int)v173;
                v114 = (const __int16 *)&v188[v91 * v101];
                if ((int)v93 >= 8)
                {
                  v116 = 0;
                  v117 = v111;
                  do
                  {
                    v118 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v113 + v116));
                    v119 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v113 + (v10 + v116)));
                    v120 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v113 + v116 + (int)v173));
                    v121 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v113 + v116 + (int)v173 + v10));
                    v122 = vmull_lane_s16(*(int16x4_t *)v119.i8, (int16x4_t)v105, 0);
                    v123 = *v117++;
                    v124 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v119, (int16x4_t)v105, 0), v118, (int16x4_t)v104, 0), v120, (int16x4_t)v106, 0), v121, v2, 0);
                    v125 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v122, *(int16x4_t *)v118.i8, (int16x4_t)v104, 0), *(int16x4_t *)v120.i8, (int16x4_t)v106, 0), *(int16x4_t *)v121.i8, v2, 0), v22);
                    v220 = vld2q_s16(v114);
                    v114 += 16;
                    v126 = vsubw_s16(v125, *(int16x4_t *)v123.i8);
                    v127 = vsubw_high_s16(vqrshlq_s32(v124, v22), v123);
                    v112 = vmlaq_s32(vmlaq_s32(v112, v127, vmovl_high_s16(v220.val[0])), v126, vmovl_s16(*(int16x4_t *)v220.val[0].i8));
                    v110 = vmlaq_s32(vmlaq_s32(v110, v127, vmovl_high_s16(v220.val[1])), v126, vmovl_s16(*(int16x4_t *)v220.val[1].i8));
                    v116 += 8;
                  }
                  while (v116 <= v31 * (int)v10 - 8);
                  v115 = ((v31 * v10 - 8) & 0xFFFFFFF8) + 8;
                }
                else
                {
                  v115 = 0;
                }
                if (v115 < (int)v93)
                {
                  v128 = v115;
                  v129 = v185 + v115;
                  do
                  {
                    v130.i32[0] = *v114;
                    v130.i32[1] = v114[1];
                    v109 = vadd_f32(v109, vcvt_f32_s32(vmul_s32(vdup_n_s32(((int)(*(unsigned __int8 *)(v113 + v129) * (_DWORD)v105+ *(unsigned __int8 *)(v113 + v128) * (_DWORD)v104+ *(unsigned __int8 *)(v113 + v128 + (int)v173) * (_DWORD)v106+ (0x4000 - v104 - (v106 + v105))* *(unsigned __int8 *)(v113 + v128 + (int)v173 + v10)+ 256) >> 9)- *(__int16 *)((char *)&v183->i16[v128] + v90 * v101)), v130)));
                    ++v128;
                    v114 += 2;
                    ++v129;
                  }
                  while (v93 != v128);
                }
                ++v101;
                v111 = (int16x8_t *)((char *)v111 + v90);
              }
              while (v101 != v33);
            }
            v131 = vmul_f32(vadd_f32(v109, vcvt_f32_s32((int32x2_t)__PAIR64__(vaddvq_s32(v110), vaddvq_s32(v112)))), v80);
            v95 = vmul_n_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v131), v92), v131, v94), v96);
            v89 = v89 + v95.f32[1];
            v88 = v88 + v95.f32[0];
            v132 = *(_QWORD *)(v4 + 40);
            v7 = v177;
            v17 = v178;
            v133 = (float *)(v132 + 8 * v178);
            *v133 = v19 + v89;
            v133[1] = v20 + v88;
            v134 = v133 + 1;
            if (v95.f32[0] * v95.f32[0] + v95.f32[1] * v95.f32[1] <= *(double *)(v4 + 80))
              goto LABEL_76;
            if (v180)
            {
              v135 = vadd_f32(v97, v95);
              if (fabsf(v135.f32[1]) < 0.01 && fabsf(v135.f32[0]) < 0.01)
              {
                *(float *)(v132 + 8 * v178) = (float)(v19 + v89) - (float)(v95.f32[1] * 0.5);
                *v134 = (float)(v20 + v88) - (float)(v95.f32[0] * 0.5);
                goto LABEL_76;
              }
            }
            v87 = v180 + 1;
            if (v180 + 1 == v174)
              goto LABEL_76;
          }
          if (!*(_DWORD *)(v4 + 88))
          {
            v136 = *(_QWORD *)(v4 + 48);
            if (v136)
              *(_BYTE *)(v136 + v17) = 0;
          }
        }
LABEL_76:
        v137 = *(_QWORD *)(v4 + 48);
        v3 = v176;
        if (*(_BYTE *)(v137 + v17))
        {
          v138 = *(_QWORD *)(v4 + 56);
          if (v138)
          {
            if (!*(_DWORD *)(v4 + 88) && (*(_BYTE *)(v4 + 96) & 8) == 0)
            {
              v139 = (float *)(*(_QWORD *)(v4 + 40) + 8 * v17);
              v140 = *v139 - v19;
              v141 = v139[1] - v20;
              v142 = (int)v140 - ((double)(int)v140 > v140);
              v143 = *(_DWORD *)(v4 + 64);
              if (v142 < -v143
                || v142 >= v7[3]
                || (v144 = (int)v141 - ((double)(int)v141 > v141), v145 = *(unsigned int *)(v4 + 68), v144 < -(int)v145)
                || v144 >= v7[2])
              {
                *(_BYTE *)(v137 + v17) = 0;
              }
              else
              {
                if ((int)v145 < 1)
                {
                  v154 = 0.0;
                }
                else
                {
                  v146 = 0;
                  v147 = v140 - (float)v142;
                  v148 = v141 - (float)v144;
                  v149 = (uint64_t)rint((float)((float)((float)(1.0 - v147) * (float)(1.0 - v148)) * 16384.0));
                  v150 = (uint64_t)rint((float)((float)(v147 * (float)(1.0 - v148)) * 16384.0));
                  v151 = (uint64_t)rint((float)((float)((float)(1.0 - v147) * v148) * 16384.0));
                  v152 = *((_QWORD *)v7 + 2) + (int)v10 * (uint64_t)v142;
                  v153 = v204;
                  v154 = 0.0;
                  do
                  {
                    if (v143 * (int)v10 >= 1)
                    {
                      v155 = 0;
                      v157 = 2 * (v143 * v10);
                      v158 = v153;
                      v159 = v10;
                      do
                      {
                        v160 = v158->i16[0];
                        v158 = (int16x8_t *)((char *)v158 + 2);
                        v156 = v152 + (v146 + v144) * (int)v173;
                        v154 = v154
                             + fabsf((float)(((int)(*(unsigned __int8 *)(v156 + v159) * (_DWORD)v150
                                                  + *(unsigned __int8 *)(v156 + v155) * (_DWORD)v149
                                                  + *(unsigned __int8 *)(v156 + v155 + (int)v173) * (_DWORD)v151
                                                  + (0x4000 - v149 - (v151 + v150))
                                                  * *(unsigned __int8 *)(v156 + v155 + (int)v173 + v10)
                                                  + 256) >> 9)
                                           - v160));
                        ++v155;
                        ++v159;
                        v157 -= 2;
                      }
                      while (v157);
                    }
                    ++v146;
                    v153 = (int16x8_t *)((char *)v153 + v212[0]);
                  }
                  while (v146 != v145);
                }
                v7 = v177;
                v17 = v178;
                *(float *)(v138 + 4 * v178) = v154 / (float)(32 * v10 * v143 * v145);
                v3 = v176;
              }
            }
          }
        }
      }
    }
    ++v17;
  }
  while (v17 < v3[1]);
  v161 = v193;
  if (v193)
  {
    do
    {
      v162 = __ldaxr(v161);
      v163 = v162 - 1;
    }
    while (__stlxr(v163, v161));
    if (!v163)
      cv::Mat::deallocate((cv::Mat *)&v189, v3);
  }
LABEL_98:
  v192 = 0;
  v195 = 0;
  v196 = 0;
  v194 = 0;
  if (v190 >= 1)
  {
    v164 = 0;
    v165 = v198;
    do
      v165[v164++] = 0;
    while (v164 < v190);
  }
  v193 = 0;
  if (v199 != (cv *)v200)
    cv::fastFree((void **)v199, v3);
  v166 = v205;
  if (v205)
  {
    do
    {
      v167 = __ldaxr(v166);
      v168 = v167 - 1;
    }
    while (__stlxr(v168, v166));
    if (!v168)
      cv::Mat::deallocate((cv::Mat *)&v201, v3);
  }
  v204 = 0;
  v207 = 0;
  v208 = 0;
  v206 = 0;
  if (v202 >= 1)
  {
    v169 = 0;
    v170 = v210;
    do
      v170[v169++] = 0;
    while (v169 < v202);
  }
  v205 = 0;
  if (v211 != (cv *)v212)
    cv::fastFree((void **)v211, v3);
  result = (uint64_t)v213;
  if (v213 != (int16x8_t *)v215 && v213 != 0)
    return MEMORY[0x2207351A4]();
  return result;
}

uint64_t cv::buildOpticalFlowPyramid(void (***a1)(uint64_t *__return_ptr, _QWORD, uint64_t), uint64_t a2, int *a3, unsigned int a4, int a5, int a6, int a7, int a8)
{
  cv *v12;
  const cv::Exception *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int32x4_t v26;
  int32x4_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void **v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  void **v45;
  cv *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  BOOL v59;
  BOOL v60;
  void *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  void **v68;
  cv *v69;
  cv *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  __int128 v84;
  __int128 v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  cv::Mat *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  int *v105;
  cv *v106;
  void **v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  void **v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  int32x2_t *v122;
  cv::Mat *v124;
  int v125;
  _OWORD v129[2];
  void *__p[2];
  void *v131[2];
  _BYTE v132[48];
  void **v133;
  cv *v134;
  _QWORD v135[3];
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int32x2_t *v144;
  cv *v145;
  uint64_t v146;
  void *v147[2];
  _BYTE v148[24];
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  cv *v152;
  _BYTE v153[16];
  int v154[4];
  _BYTE v155[48];
  int *v156;
  void **v157;
  _QWORD v158[8];

  v158[5] = *MEMORY[0x24BDAC8D0];
  (**a1)(&v137, a1, 0xFFFFFFFFLL);
  if ((v137 & 7) != 0 || *a3 < 3 || a3[1] <= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v131, "img.depth() == CV_8U && winSize.width > 2 && winSize.height > 2");
    std::string::basic_string[abi:ne180100]<0>(v147, "buildOpticalFlowPyramid");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    v12 = (cv *)cv::Exception::Exception(v154, 4294967081, v131, v147, __p, 740);
    cv::error(v12, v13);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 136))(a2, 1, (a4 + 1) << a5, 0, 0xFFFFFFFFLL, 1, 0);
  v14 = v137;
  if (!a8
    || (a6 & 0x10) != 0
    || (v137 & 0x8000) == 0
    || (*(_QWORD *)v154 = 0, v131[0] = 0, cv::Mat::locateROI((uint64_t)&v137, v154, v131), SLODWORD(v131[0]) < *a3)
    || (v15 = a3[1], SHIDWORD(v131[0]) < v15)
    || *a3 + LODWORD(v131[0]) + HIDWORD(v138) > v154[0]
    || v15 + HIDWORD(v131[0]) + (int)v138 > v154[1])
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, 0);
    v17 = v16;
    if (*(_QWORD *)(v16 + 16))
    {
      v18 = *(unsigned int *)(v16 + 4);
      if ((int)v18 >= 3)
      {
        v20 = *(int **)(v16 + 64);
        v19 = 1;
        do
        {
          v21 = *v20++;
          v19 *= v21;
          --v18;
        }
        while (v18);
      }
      else
      {
        v19 = *(int *)(v16 + 12) * (uint64_t)*(int *)(v16 + 8);
      }
      if (v19)
        cv::Mat::adjustROI((cv::Mat *)v16, a3[1], a3[1], *a3, *a3);
    }
    v22 = v137 & 0xFFF;
    v23 = *a3;
    if ((*(_DWORD *)v17 & 0xFFF) == v22)
    {
      v24 = *(_DWORD *)(v17 + 12);
      v25 = HIDWORD(v138) + 2 * v23;
      if (v24 == v25 && *(_DWORD *)(v17 + 8) == (_DWORD)v138 + 2 * a3[1])
      {
LABEL_29:
        if (a6 == 5)
        {
          v26.i64[0] = *(_QWORD *)a3;
          v26.i64[1] = v138;
          v27 = vrev64q_s32(v26);
          v27.i64[0] = *(_QWORD *)a3;
          *(int32x4_t *)v147 = v27;
          cv::Mat::Mat(v154, v17, v147);
          cv::_OutputArray::_OutputArray((uint64_t)v131, (const cv::Mat *)v154);
          cv::Mat::copyTo((cv::Mat *)&v137, (const cv::_OutputArray *)v131);
          v29 = *(unsigned int **)&v155[8];
          if (*(_QWORD *)&v155[8])
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
              cv::Mat::deallocate((cv::Mat *)v154, v28);
          }
          *(_QWORD *)v155 = 0;
          memset(&v155[16], 0, 24);
          if (v154[1] >= 1)
          {
            v32 = 0;
            v33 = v156;
            do
              v33[v32++] = 0;
            while (v32 < v154[1]);
          }
          *(_QWORD *)&v155[8] = 0;
          if (v157 != v158)
            cv::fastFree(v157, v28);
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)v154, (const cv::Mat *)&v137);
          cv::_OutputArray::_OutputArray((uint64_t)v131, (cv::Mat *)v17);
          *(_OWORD *)v147 = 0u;
          *(_OWORD *)v148 = 0u;
          cv::copyMakeBorder((uint64_t)v154, (uint64_t)v131);
        }
        cv::Mat::adjustROI((cv::Mat *)v17, -a3[1], -a3[1], -*a3, -*a3);
        goto LABEL_41;
      }
    }
    else
    {
      v24 = *(_DWORD *)(v17 + 12);
      v25 = HIDWORD(v138) + 2 * v23;
    }
    if ((*(_DWORD *)v17 & 0xFFF) != v22
      || *(int *)(v17 + 4) > 2
      || *(_DWORD *)(v17 + 8) != (_DWORD)v138 + 2 * a3[1]
      || v24 != v25
      || !*(_QWORD *)(v17 + 16))
    {
      v154[0] = v138 + 2 * a3[1];
      v154[1] = v25;
      cv::Mat::create((cv::Mat *)v17, (cv::Mat *)2, v154, v22);
    }
    goto LABEL_29;
  }
  v124 = (cv::Mat *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, 0);
  cv::Mat::operator=(v124, (cv::Mat *)&v137);
LABEL_41:
  v136 = (unint64_t)vrev64_s32(*v144);
  v34 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, 0);
  v35 = (void *)v34;
  *(_OWORD *)v154 = *(_OWORD *)v34;
  v36 = *(_QWORD *)(v34 + 16);
  v37 = *(_OWORD *)(v34 + 24);
  *(_OWORD *)&v155[8] = v37;
  *(_OWORD *)&v155[24] = *(_OWORD *)(v34 + 40);
  v38 = *(_QWORD *)(v34 + 56);
  *(_QWORD *)v155 = v36;
  *(_QWORD *)&v155[40] = v38;
  v156 = &v154[2];
  v157 = (void **)v158;
  v158[0] = 0;
  v158[1] = 0;
  if ((_QWORD)v37)
  {
    do
      v39 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v39 + 1, (unsigned int *)v37));
  }
  if (*(int *)(v34 + 4) > 2)
  {
    v154[1] = 0;
    cv::Mat::copySize((cv::Mat *)v154, (const cv::Mat *)v34);
  }
  else
  {
    v40 = *(_QWORD *)(v34 + 72);
    v41 = v157;
    *v157 = *(void **)v40;
    v41[1] = *(void **)(v40 + 8);
  }
  *(_QWORD *)v132 = *(_QWORD *)v155;
  *(_OWORD *)v131 = *(_OWORD *)v154;
  *(_OWORD *)&v132[8] = *(_OWORD *)&v155[8];
  v42 = *(unsigned int **)&v155[8];
  *(_OWORD *)&v132[24] = *(_OWORD *)&v155[24];
  *(_QWORD *)&v132[40] = *(_QWORD *)&v155[40];
  v133 = &v131[1];
  v135[0] = 0;
  v135[1] = 0;
  v134 = (cv *)v135;
  if (*(_QWORD *)&v155[8])
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    v44 = v154[1];
  }
  else
  {
    v44 = v154[1];
  }
  if (v44 > 2)
  {
    HIDWORD(v131[0]) = 0;
    cv::Mat::copySize((cv::Mat *)v131, (const cv::Mat *)v154);
  }
  else
  {
    v45 = v157;
    v46 = v134;
    *(_QWORD *)v134 = *v157;
    *((_QWORD *)v46 + 1) = v45[1];
  }
  if ((a4 & 0x80000000) != 0)
  {
    v47 = 0;
    goto LABEL_168;
  }
  v47 = 0;
  v125 = (16 * ((v14 >> 3) & 0x1FF)) & 0xFF0 | 0xB;
  while (1)
  {
    if (!v47)
      goto LABEL_105;
    v48 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, v47 << a5);
    v49 = v48;
    if (*(_QWORD *)(v48 + 16))
    {
      v50 = *(unsigned int *)(v48 + 4);
      if ((int)v50 >= 3)
      {
        v52 = *(int **)(v48 + 64);
        v51 = 1;
        do
        {
          v53 = *v52++;
          v51 *= v53;
          --v50;
        }
        while (v50);
      }
      else
      {
        v51 = *(int *)(v48 + 12) * (uint64_t)*(int *)(v48 + 8);
      }
      if (v51)
        cv::Mat::adjustROI((cv::Mat *)v48, a3[1], a3[1], *a3, *a3);
    }
    v54 = v137 & 0xFFF;
    if ((*(_DWORD *)v49 & 0xFFF) == v54)
    {
      v55 = *(_DWORD *)(v49 + 12);
      v57 = v136 + 2 * *(_QWORD *)a3;
      *(_QWORD *)&v56 = *(_QWORD *)a3;
      *((_QWORD *)&v56 + 1) = v136;
      if (*(_QWORD *)(v49 + 8) == __PAIR64__(v57, HIDWORD(v136) + 2 * HIDWORD(*(_QWORD *)a3)))
      {
        *((_QWORD *)&v58 + 1) = v136;
        *(_QWORD *)&v58 = *(_QWORD *)a3;
        v56 = v58;
        goto LABEL_78;
      }
    }
    else
    {
      *(_QWORD *)&v56 = *(_QWORD *)a3;
      v55 = *(_DWORD *)(v49 + 12);
      *((_QWORD *)&v56 + 1) = v136;
      v57 = v136 + 2 * *(_QWORD *)a3;
    }
    if ((*(_DWORD *)v49 & 0xFFF) != v54
      || *(int *)(v49 + 4) > 2
      || (*(_DWORD *)(v49 + 8) == HIDWORD(v56) + 2 * DWORD1(v56) ? (v59 = v55 == v57) : (v59 = 0),
          v59 ? (v60 = *(_QWORD *)(v49 + 16) == 0) : (v60 = 1),
          v60))
    {
      LODWORD(v147[0]) = HIDWORD(v56) + 2 * DWORD1(v56);
      HIDWORD(v147[0]) = v57;
      cv::Mat::create((cv::Mat *)v49, (cv::Mat *)2, (const int *)v147, v54);
      *(_QWORD *)&v56 = *(_QWORD *)a3;
      *((_QWORD *)&v56 + 1) = v136;
    }
LABEL_78:
    *(_OWORD *)__p = v56;
    cv::Mat::Mat(v147, v49, __p);
    v62 = *(unsigned int **)&v148[8];
    if (*(_QWORD *)&v148[8])
    {
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
    }
    v64 = *(unsigned int **)&v132[8];
    if (*(_QWORD *)&v132[8])
    {
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
        cv::Mat::deallocate((cv::Mat *)v131, v61);
    }
    *(_QWORD *)v132 = 0;
    memset(&v132[16], 0, 24);
    if ((uint64_t)v131[0] <= 0)
    {
      *(_QWORD *)&v132[8] = 0;
      LODWORD(v131[0]) = v147[0];
    }
    else
    {
      v67 = 0;
      v68 = v133;
      do
        *((_DWORD *)v68 + v67++) = 0;
      while (v67 < SHIDWORD(v131[0]));
      *(_QWORD *)&v132[8] = 0;
      LODWORD(v131[0]) = v147[0];
      if (SHIDWORD(v131[0]) > 2)
        goto LABEL_92;
    }
    if (SHIDWORD(v147[0]) <= 2)
    {
      HIDWORD(v131[0]) = HIDWORD(v147[0]);
      v131[1] = v147[1];
      v69 = v152;
      v70 = v134;
      *(_QWORD *)v134 = *(_QWORD *)v152;
      *((_QWORD *)v70 + 1) = *((_QWORD *)v69 + 1);
      goto LABEL_93;
    }
LABEL_92:
    cv::Mat::copySize((cv::Mat *)v131, (const cv::Mat *)v147);
LABEL_93:
    *(_QWORD *)v132 = *(_QWORD *)v148;
    *(_OWORD *)&v132[24] = v149;
    *(_OWORD *)&v132[8] = *(_OWORD *)&v148[8];
    *(_QWORD *)&v132[40] = v150;
    v71 = *(unsigned int **)&v148[8];
    if (*(_QWORD *)&v148[8])
    {
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
        cv::Mat::deallocate((cv::Mat *)v147, v61);
    }
    *(_QWORD *)v148 = 0;
    v149 = 0uLL;
    *(_QWORD *)&v148[16] = 0;
    if (SHIDWORD(v147[0]) >= 1)
    {
      v74 = 0;
      v75 = v151;
      do
        *(_DWORD *)(v75 + 4 * v74++) = 0;
      while (v74 < SHIDWORD(v147[0]));
    }
    *(_QWORD *)&v148[8] = 0;
    if (v152 != (cv *)v153)
      cv::fastFree((void **)v152, v61);
    cv::_InputArray::_InputArray((uint64_t)v147, (const cv::Mat *)v154);
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v131);
    cv::pyrDown((void (***)(void **__return_ptr, _QWORD, uint64_t))v147, (uint64_t)__p, (int *)&v136, 4);
    if (a6 != 5)
    {
      cv::_InputArray::_InputArray((uint64_t)v147, (const cv::Mat *)v131);
      cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v49);
      memset(v129, 0, sizeof(v129));
      cv::copyMakeBorder((uint64_t)v147, (uint64_t)__p);
    }
    cv::Mat::adjustROI((cv::Mat *)v49, -a3[1], -a3[1], -*a3, -*a3);
LABEL_105:
    if (!a5)
      goto LABEL_141;
    v76 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, (2 * v47) | 1);
    v77 = v76;
    if (*(_QWORD *)(v76 + 16))
    {
      v78 = *(unsigned int *)(v76 + 4);
      if ((int)v78 >= 3)
      {
        v80 = *(int **)(v76 + 64);
        v79 = 1;
        do
        {
          v81 = *v80++;
          v79 *= v81;
          --v78;
        }
        while (v78);
      }
      else
      {
        v79 = *(int *)(v76 + 12) * (uint64_t)*(int *)(v76 + 8);
      }
      if (v79)
        cv::Mat::adjustROI((cv::Mat *)v76, a3[1], a3[1], *a3, *a3);
    }
    if ((*(_DWORD *)v77 & 0xFFF) != ((16 * ((v14 >> 3) & 0x1FF)) | 0xB))
    {
      *(_QWORD *)&v84 = *(_QWORD *)a3;
      v82 = *(_DWORD *)(v77 + 12);
      *((_QWORD *)&v84 + 1) = v136;
      v83 = v136 + 2 * *(_QWORD *)a3;
LABEL_117:
      if (*(int *)(v77 + 4) > 2
        || (*(_DWORD *)(v77 + 8) == HIDWORD(v84) + 2 * DWORD1(v84) ? (v86 = v82 == v83) : (v86 = 0),
            v86 ? (v87 = (*(_DWORD *)v77 & 0xFFF) == v125) : (v87 = 0),
            v87 ? (v88 = *(_QWORD *)(v77 + 16) == 0) : (v88 = 1),
            v88))
      {
        LODWORD(v147[0]) = HIDWORD(v84) + 2 * DWORD1(v84);
        HIDWORD(v147[0]) = v83;
        cv::Mat::create((cv::Mat *)v77, (cv::Mat *)2, (const int *)v147, v125);
        *(_QWORD *)&v84 = *(_QWORD *)a3;
        *((_QWORD *)&v84 + 1) = v136;
      }
      goto LABEL_130;
    }
    v82 = *(_DWORD *)(v77 + 12);
    v83 = v136 + 2 * *(_QWORD *)a3;
    *(_QWORD *)&v84 = *(_QWORD *)a3;
    *((_QWORD *)&v84 + 1) = v136;
    if (*(_QWORD *)(v77 + 8) != __PAIR64__(v83, HIDWORD(v136) + 2 * HIDWORD(*(_QWORD *)a3)))
      goto LABEL_117;
    *((_QWORD *)&v85 + 1) = v136;
    *(_QWORD *)&v85 = *(_QWORD *)a3;
    v84 = v85;
LABEL_130:
    *(_OWORD *)__p = v84;
    cv::Mat::Mat(v147, v77, __p);
    if (a7 != 5)
    {
      cv::_InputArray::_InputArray((uint64_t)__p, (const cv::Mat *)v147);
      cv::_OutputArray::_OutputArray((uint64_t)v129, (cv::Mat *)v77);
      cv::copyMakeBorder((uint64_t)__p, (uint64_t)v129);
    }
    cv::Mat::adjustROI((cv::Mat *)v77, -a3[1], -a3[1], -*a3, -*a3);
    v90 = *(unsigned int **)&v148[8];
    if (*(_QWORD *)&v148[8])
    {
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
        cv::Mat::deallocate((cv::Mat *)v147, v35);
    }
    *(_QWORD *)v148 = 0;
    v149 = 0uLL;
    *(_QWORD *)&v148[16] = 0;
    if (SHIDWORD(v147[0]) >= 1)
    {
      v93 = 0;
      v94 = v151;
      do
        *(_DWORD *)(v94 + 4 * v93++) = 0;
      while (v93 < SHIDWORD(v147[0]));
    }
    *(_QWORD *)&v148[8] = 0;
    if (v152 != (cv *)v153)
      cv::fastFree((void **)v152, v35);
LABEL_141:
    if ((int)v136 >= -1)
      v95 = v136 + 1;
    else
      v95 = v136 + 2;
    v96 = v95 >> 1;
    v97 = HIDWORD(v136) + 2;
    if (SHIDWORD(v136) >= -1)
      v97 = HIDWORD(v136) + 1;
    v98 = v97 >> 1;
    v136 = __PAIR64__(v98, v96);
    if (v96 <= *a3 || v98 <= a3[1])
      break;
    v99 = *(unsigned int **)&v132[8];
    if (*(_QWORD *)&v132[8])
    {
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 + 1, v99));
    }
    v101 = *(unsigned int **)&v155[8];
    if (*(_QWORD *)&v155[8])
    {
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      if (!v103)
        cv::Mat::deallocate((cv::Mat *)v154, v35);
    }
    *(_QWORD *)v155 = 0;
    memset(&v155[16], 0, 24);
    if (v154[1] <= 0)
    {
      *(_QWORD *)&v155[8] = 0;
      v154[0] = (int)v131[0];
    }
    else
    {
      v104 = 0;
      v105 = v156;
      do
        v105[v104++] = 0;
      while (v104 < v154[1]);
      *(_QWORD *)&v155[8] = 0;
      v154[0] = (int)v131[0];
      if (v154[1] > 2)
      {
LABEL_162:
        cv::Mat::copySize((cv::Mat *)v154, (const cv::Mat *)v131);
        goto LABEL_163;
      }
    }
    if (SHIDWORD(v131[0]) > 2)
      goto LABEL_162;
    v154[1] = HIDWORD(v131[0]);
    *(void **)&v154[2] = v131[1];
    v106 = v134;
    v107 = v157;
    *v157 = *(void **)v134;
    v107[1] = (void *)*((_QWORD *)v106 + 1);
LABEL_163:
    *(_OWORD *)v155 = *(_OWORD *)v132;
    *(_OWORD *)&v155[16] = *(_OWORD *)&v132[16];
    *(_OWORD *)&v155[32] = *(_OWORD *)&v132[32];
    v59 = v47++ == a4;
    if (v59)
    {
      v47 = a4 + 1;
      goto LABEL_168;
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 136))(a2, 1, (v47 + 1) << a5, 0, 0xFFFFFFFFLL, 1, 0);
LABEL_168:
  v108 = *(unsigned int **)&v132[8];
  if (*(_QWORD *)&v132[8])
  {
    do
    {
      v109 = __ldaxr(v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v108));
    if (!v110)
      cv::Mat::deallocate((cv::Mat *)v131, v35);
  }
  *(_QWORD *)v132 = 0;
  memset(&v132[16], 0, 24);
  if (SHIDWORD(v131[0]) >= 1)
  {
    v111 = 0;
    v112 = v133;
    do
      *((_DWORD *)v112 + v111++) = 0;
    while (v111 < SHIDWORD(v131[0]));
  }
  *(_QWORD *)&v132[8] = 0;
  if (v134 != (cv *)v135)
    cv::fastFree((void **)v134, v35);
  v113 = *(unsigned int **)&v155[8];
  if (*(_QWORD *)&v155[8])
  {
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
      cv::Mat::deallocate((cv::Mat *)v154, v35);
  }
  *(_QWORD *)v155 = 0;
  memset(&v155[16], 0, 24);
  if (v154[1] >= 1)
  {
    v116 = 0;
    v117 = v156;
    do
      v117[v116++] = 0;
    while (v116 < v154[1]);
  }
  *(_QWORD *)&v155[8] = 0;
  if (v157 != v158)
    cv::fastFree(v157, v35);
  v118 = v140;
  if (v140)
  {
    do
    {
      v119 = __ldaxr(v118);
      v120 = v119 - 1;
    }
    while (__stlxr(v120, v118));
    if (!v120)
      cv::Mat::deallocate((cv::Mat *)&v137, v35);
  }
  v139 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  if (SHIDWORD(v137) >= 1)
  {
    v121 = 0;
    v122 = v144;
    do
      v122->i32[v121++] = 0;
    while (v121 < SHIDWORD(v137));
  }
  v140 = 0;
  if (v145 != (cv *)&v146)
    cv::fastFree((void **)v145, v35);
  if ((int)v47 >= (int)a4)
    return a4;
  else
    return v47;
}

void sub_219E32CF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  cv::Mat::~Mat((cv::Mat *)&a41, a2);
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::operator=(cv::Mat *this, cv::Mat *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;

  if (this != a2)
  {
    v4 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (unsigned int *)*((_QWORD *)this + 3);
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        cv::Mat::deallocate(this, a2);
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = 0;
    if (*((int *)this + 1) <= 0)
    {
      *((_QWORD *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else
    {
      v9 = 0;
      v10 = *((_QWORD *)this + 8);
      do
      {
        *(_DWORD *)(v10 + 4 * v9++) = 0;
        v11 = *((int *)this + 1);
      }
      while (v9 < v11);
      *((_QWORD *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
      if ((int)v11 > 2)
        goto LABEL_16;
    }
    v12 = *((_DWORD *)a2 + 1);
    if (v12 <= 2)
    {
      *((_DWORD *)this + 1) = v12;
      *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
      v13 = (_QWORD *)*((_QWORD *)a2 + 9);
      v14 = (_QWORD *)*((_QWORD *)this + 9);
      *v14 = *v13;
      v14[1] = v13[1];
LABEL_17:
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      return this;
    }
LABEL_16:
    cv::Mat::copySize(this, a2);
    goto LABEL_17;
  }
  return this;
}

_QWORD *`anonymous namespace'::calcSharrDeriv(_anonymous_namespace_ *this, const cv::Mat *a2, cv::Mat *a3)
{
  unsigned int *v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  const cv::Exception *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  _QWORD *result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint16x8_t *v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 *v67;
  unint64_t v68;
  int16x4x2_t v69;
  int8x16_t v70;
  __int16 *v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  cv::Mat *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *__p[2];
  void *v93[2];
  void *v94[2];
  int v95[2];
  uint64_t v96;
  _QWORD v97[518];
  int16x4x2_t v98;

  v3 = (unsigned int *)MEMORY[0x24BDAC7A8](this, a2);
  v87 = (cv::Mat *)v4;
  v97[516] = *MEMORY[0x24BDAC8D0];
  v8 = v3[2];
  v9 = v3[3];
  v86 = v3;
  v10 = *v3;
  if ((v10 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "depth == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v93, "calcSharrDeriv");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(v95, 4294967081, v94, v93, __p, 53);
    cv::error((cv *)v95, v11);
  }
  v12 = (v10 >> 3) & 0x1FF;
  v13 = v12 + 1;
  v14 = (16 * ((_WORD)v12 + 1) + 4091) & 0xFFF;
  v16 = *(int *)(v4 + 4) <= 2 && *(_DWORD *)(v4 + 8) == (_DWORD)v8 && *(_DWORD *)(v4 + 12) == v9;
  if (!v16 || ((*(_DWORD *)v4 & 0xFFF) == v14 ? (v17 = *(_QWORD *)(v4 + 16) == 0) : (v17 = 1), v17))
  {
    v95[0] = v3[2];
    v95[1] = v9;
    cv::Mat::create((cv::Mat *)v4, (cv::Mat *)2, v95, v14);
  }
  v18 = (v13 * (v9 + 2) + 15) & 0xFFFFFFF0;
  v19 = 2 * v18 + 64;
  *(_QWORD *)v95 = v97;
  v96 = 2056;
  result = v97;
  if (v19 >= 0x809)
  {
    v96 = v19;
    result = (_QWORD *)operator new[]();
    *(_QWORD *)v95 = result;
  }
  if ((int)v8 >= 1)
  {
    v21 = 0;
    v22 = (v13 * v9);
    v23 = ((unint64_t)result + 2 * v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v24 = v23 + 2 * v18;
    v25 = (int)v22 - 8;
    v26 = 2 * v18;
    v27 = v8 - 2;
    v84 = (v8 - 1);
    v83 = v8 != 1;
    if ((_DWORD)v8 == 1)
      v27 = 0;
    v82 = v27;
    v28 = v9 - 2;
    v29 = v23 + 2 * (int)v22;
    if (v9 <= 1)
      v28 = 0;
    v30 = v13 * v28;
    if (v9 <= 1)
      v31 = 0;
    else
      v31 = v12 + 1;
    v32 = v23 + v26 + 2 * (int)v22;
    v33 = v23 + v26 + 2 * v30;
    v34 = v23 + v26 + 2 * v31;
    v35 = 2 * ((v10 >> 3) & 0x1FF);
    v36 = v23 + 2 * v30;
    v37 = v35 ^ 0xFFFFFFFFFFFFFFFELL;
    v38 = v23 + (v35 ^ 0xFFFFFFFFFFFFFFFELL);
    v39 = v26 - v35 - 2;
    v5.n128_u64[0] = 0x3000300030003;
    v5.n128_u64[1] = 0x3000300030003;
    v6.n128_u64[0] = 0xA000A000A000ALL;
    v6.n128_u64[1] = 0xA000A000A000ALL;
    v7.n128_u64[0] = 0xA0A0A0A0A0A0A0ALL;
    v40 = v35 + 2;
    v80 = v12 + 1;
    v41 = v23 + 2 * v31;
    v81 = v18;
    v42 = v35 + 2 + 2 * v18;
    v91 = v22;
    v85 = v8;
    do
    {
      v43 = v21;
      v44 = v21 - 1;
      if (!v21)
        v44 = v83;
      v45 = *((_QWORD *)v86 + 2);
      v46 = **((_QWORD **)v86 + 9);
      v47 = v46 * v44;
      v48 = v21 + 1;
      v90 = v21 + 1;
      if (v21 >= v84)
        v48 = v82;
      v49 = v46 * v48;
      v88 = **((_QWORD **)v87 + 9);
      v89 = *((_QWORD *)v87 + 2);
      if ((int)v22 >= 8)
      {
        v51 = 0;
        v52 = (uint16x8_t *)v23;
        do
        {
          v53 = *(uint8x8_t *)(v45 + v47 + v51);
          v54 = *(uint8x8_t *)(v45 + v49 + v51);
          *v52 = vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vaddl_u8(v54, v53), (int16x8_t)v5), *(uint8x8_t *)(v45 + v46 * v43 + v51), (uint8x8_t)0xA0A0A0A0A0A0A0ALL);
          *(uint16x8_t *)((char *)v52 + v26) = vsubl_u8(v54, v53);
          v51 += 8;
          ++v52;
        }
        while (v51 <= v25);
        v50 = v51;
        LODWORD(v22) = v91;
      }
      else
      {
        v50 = 0;
      }
      if ((int)v50 < (int)v22)
      {
        v55 = 0;
        v56 = v24 + 2 * v50;
        v57 = v23 + 2 * v50;
        v58 = v45 + v50 + v46 * v43;
        v59 = v45 + v49 + v50;
        v60 = v45 + v47 + v50;
        v61 = v91 - v50;
        do
        {
          v62 = *(unsigned __int8 *)(v60 + v55);
          v63 = *(unsigned __int8 *)(v59 + v55);
          *(_WORD *)(v57 + 2 * v55) = 3 * (v63 + v62) + 10 * *(unsigned __int8 *)(v58 + v55);
          *(_WORD *)(v56 + 2 * v55++) = v63 - v62;
        }
        while (v61 != v55);
      }
      v64 = 0;
      v65 = v89 + v88 * v43;
      do
      {
        *(_WORD *)(v38 + v64) = *(_WORD *)(v41 + v64);
        *(_WORD *)(v29 + v64) = *(_WORD *)(v36 + v64);
        *(_WORD *)(v23 + v39 + v64) = *(_WORD *)(v34 + v64);
        *(_WORD *)(v32 + v64) = *(_WORD *)(v33 + v64);
        v64 += 2;
      }
      while (v40 != v64);
      LODWORD(v22) = v91;
      if ((int)v91 >= 8)
      {
        v66 = 0;
        v67 = (__int16 *)(v65 + 16);
        v68 = v23;
        do
        {
          v69 = (int16x4x2_t)vsubq_s16(*(int16x8_t *)(v68 + v40), *(int16x8_t *)(v68 + v37));
          v70 = (int8x16_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)(v68 + v26), (int16x8_t)v6), vaddq_s16(*(int16x8_t *)(v68 + v39), *(int16x8_t *)(v68 + v42)), (int16x8_t)v5);
          v98.val[1] = (int16x4_t)vextq_s8(v70, v70, 8uLL).u64[0];
          v98.val[0] = (int16x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
          v71 = v67 - 8;
          vst2_s16(v71, v69);
          vst2_s16(v67, v98);
          v66 += 8;
          v68 += 16;
          v67 += 16;
        }
        while (v66 <= v25);
      }
      else
      {
        LODWORD(v66) = 0;
      }
      if ((int)v66 < (int)v91)
      {
        v72 = 0;
        v73 = 2 * v66;
        v74 = v80 + v66;
        v75 = v38 + 2 * v66;
        v76 = v38 + 2 * (v81 + v66);
        v77 = v24 + 2 * v66;
        v78 = v91 - v66;
        do
        {
          v79 = 3 * (*(_WORD *)(v76 + v72) + *(_WORD *)(v24 + 2 * v74)) + 10 * *(_WORD *)(v77 + v72);
          *(_WORD *)(v65 + 2 * (v73 + v72)) = *(_WORD *)(v23 + 2 * v74) - *(_WORD *)(v75 + v72);
          *(_WORD *)(v65 + 2 * (v73 + v72 + 1)) = v79;
          ++v74;
          v72 += 2;
          --v78;
        }
        while (v78);
      }
      v21 = v90;
    }
    while (v90 != v85);
    result = *(_QWORD **)v95;
  }
  if (result != v97)
  {
    if (result)
      return (_QWORD *)MEMORY[0x2207351A4](result, 0x1000C80BDFB0063, v5, v6, v7);
  }
  return result;
}

void sub_219E33474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  cv::Exception::~Exception((cv::Exception *)&a42);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void cv::calcOpticalFlowPyrLK(void (***a1)(uint64_t *__return_ptr, _QWORD, uint64_t), void (***a2)(uint64_t *__return_ptr, _QWORD, uint64_t), void (***a3)(_QWORD *__return_ptr, _QWORD, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, signed int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int a18, double a19, int a20)
{
  const cv::Exception *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const cv::Exception *v24;
  const cv::Exception *v25;
  int32x2_t *v26;
  const cv::Exception *v27;
  void *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  cv *v37;
  cv *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int32x2_t **v43;
  const cv::Exception *v44;
  int v45;
  const cv::Exception *v46;
  int v47;
  int32x2_t *v48;
  int v49;
  int v50;
  const cv::Exception *v51;
  void *v52;
  void (***v53)(uint64_t *__return_ptr, _QWORD, uint64_t);
  int v54;
  const cv::Exception *v55;
  int v56;
  _DWORD *v57;
  unsigned int v58;
  int v59;
  const cv::Exception *v60;
  double v61;
  unsigned int v62;
  unsigned int v63;
  double v64;
  __int16 v65;
  double v66;
  float v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  void *v71;
  cv::Mat *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  _BYTE *v79;
  unsigned int v80;
  int32x2_t *v81;
  const cv::Mat *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _BYTE *v89;
  cv *v90;
  void **v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int32x2_t **v102;
  int32x2_t *v103;
  int32x2_t v104;
  void **v105;
  int32x2_t *v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  const cv::Exception *v111;
  const cv::Exception *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  _BYTE *v117;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  _BYTE *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int32x2_t *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  cv *v148;
  unsigned int v149;
  void *v151[2];
  __int128 v152;
  void *v153[2];
  uint64_t v154[2];
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  cv *v160;
  uint64_t v161;
  _OWORD v162[4];
  char *v163;
  cv *v164;
  _QWORD v165[2];
  int32x2_t v166;
  int32x2_t v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int32x2_t *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE __p[64];
  _BYTE *v175;
  cv *v176;
  _QWORD v177[2];
  _QWORD v178[2];
  void *v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  cv *v185;
  uint64_t v186;
  void *v187[2];
  uint64_t v188;
  unsigned int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  cv *v194;
  uint64_t v195;
  int32x2_t v196;
  int32x2_t **v197;
  int32x2_t *v198;
  _DWORD *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  int32x2_t **v203;
  cv *v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  float v208;
  _QWORD v209[2];
  uint64_t v210;
  unsigned int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int32x2_t *v215;
  cv *v216;
  uint64_t v217;
  _BYTE v218[64];
  _BYTE *v219;
  void **v220;
  _QWORD v221[5];

  v221[2] = *MEMORY[0x24BDAC8D0];
  (**a3)(v209, a3, 0xFFFFFFFFLL);
  if (a8 < 0 || a7->i32[0] < 3 || a7->i32[1] <= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v187, "maxLevel >= 0 && winSize.width > 2 && winSize.height > 2");
    std::string::basic_string[abi:ne180100]<0>(v178, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v187, v178, __p, 842);
    cv::error((cv *)&v197, v20);
  }
  v21 = cv::Mat::checkVector((cv::Mat *)v209, 2, 5, 1);
  v22 = v21;
  if ((v21 & 0x80000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v187, "(npoints = prevPtsMat.checkVector(2, CV_32F, true)) >= 0");
    std::string::basic_string[abi:ne180100]<0>(v178, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v187, v178, __p, 845);
    cv::error((cv *)&v197, v24);
  }
  if (!(_DWORD)v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 152))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 152))(a5);
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 152))(a6);
    goto LABEL_208;
  }
  if ((a20 & 4) == 0)
  {
    v196 = vrev64_s32(*v215);
    (*(void (**)(uint64_t, int32x2_t *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 128))(a4, &v196, v209[0] & 0xFFF, 0xFFFFFFFFLL, 1, 0);
  }
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))a4)(v187, a4, 0xFFFFFFFFLL);
  if (cv::Mat::checkVector((cv::Mat *)v187, 2, 5, 1) != (_DWORD)v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v178, "nextPtsMat.checkVector(2, CV_32F, true) == npoints");
    std::string::basic_string[abi:ne180100]<0>(__p, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v162, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v178, __p, v162, 859);
    cv::error((cv *)&v197, v25);
  }
  v146 = v188;
  v147 = v210;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a5 + 136))(a5, v22, 1, 0, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t))a5)(v178, a5, 0xFFFFFFFFLL);
  v175 = &__p[8];
  v176 = (cv *)v177;
  v177[1] = 0;
  v177[0] = 0;
  *(_DWORD *)__p = 1124007936;
  memset(&__p[4], 0, 60);
  v26 = a7;
  if ((v178[0] & 0x4000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v162, "statusMat.isContinuous()");
    std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 866);
    cv::error((cv *)&v197, v27);
  }
  v28 = v179;
  if ((int)v22 >= 1)
    memset(v179, 1, v22);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a6 + 112))(a6))
  {
    v145 = 0;
    goto LABEL_46;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a6 + 136))(a6, v22, 1, 5, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(int32x2_t ***__return_ptr, uint64_t, uint64_t))a6)(&v197, a6, 0xFFFFFFFFLL);
  v30 = (unsigned int *)v200;
  if ((_QWORD)v200)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = *(unsigned int **)&__p[24];
  if (*(_QWORD *)&__p[24])
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      cv::Mat::deallocate((cv::Mat *)__p, v29);
  }
  *(_QWORD *)&__p[16] = 0;
  memset(&__p[32], 0, 24);
  if (*(uint64_t *)__p <= 0)
  {
    *(_QWORD *)&__p[24] = 0;
    *(_DWORD *)__p = (_DWORD)v197;
  }
  else
  {
    v35 = 0;
    v36 = v175;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < *(int *)&__p[4]);
    *(_QWORD *)&__p[24] = 0;
    *(_DWORD *)__p = (_DWORD)v197;
    if (*(int *)&__p[4] > 2)
      goto LABEL_33;
  }
  if (SHIDWORD(v197) <= 2)
  {
    *(_DWORD *)&__p[4] = HIDWORD(v197);
    *(_QWORD *)&__p[8] = v198;
    v37 = v204;
    v38 = v176;
    *(_QWORD *)v176 = *(_QWORD *)v204;
    *((_QWORD *)v38 + 1) = *((_QWORD *)v37 + 1);
    goto LABEL_34;
  }
LABEL_33:
  cv::Mat::copySize((cv::Mat *)__p, (const cv::Mat *)&v197);
LABEL_34:
  *(_OWORD *)&__p[40] = v201;
  v39 = (unsigned int *)v200;
  *(_OWORD *)&__p[24] = v200;
  *(_QWORD *)&__p[16] = v199;
  *(_QWORD *)&__p[56] = v202;
  if ((_QWORD)v200)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
      cv::Mat::deallocate((cv::Mat *)&v197, v29);
  }
  v199 = 0;
  v201 = 0uLL;
  *((_QWORD *)&v200 + 1) = 0;
  if (SHIDWORD(v197) >= 1)
  {
    v42 = 0;
    v43 = v203;
    do
      *((_DWORD *)v43 + v42++) = 0;
    while (v42 < SHIDWORD(v197));
  }
  *(_QWORD *)&v200 = 0;
  if (v204 != (cv *)&v205)
    cv::fastFree((void **)v204, v29);
  if ((__p[1] & 0x40) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v162, "errMat.isContinuous()");
    std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 877);
    cv::error((cv *)&v197, v44);
  }
  v145 = *(_QWORD *)&__p[16];
LABEL_46:
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  if (((unsigned int (*)(void (***)(uint64_t *__return_ptr, _QWORD, uint64_t)))(*a1)[5])(a1) != 327680)
  {
    v149 = 1;
    v47 = -1;
    goto LABEL_64;
  }
  ((void (*)(void (***)(uint64_t *__return_ptr, _QWORD, uint64_t), int32x2_t **))(*a1)[1])(a1, &v171);
  v45 = -1431655765 * ((unint64_t)(v172 - (_QWORD)v171) >> 5);
  if (v45 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v162, "levels1 >= 0");
    std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 892);
    cv::error((cv *)&v197, v46);
  }
  v47 = v45 - 1;
  if ((v47 & 0x80000001) == 1)
  {
    v48 = v171;
    v149 = 1;
    if ((v171[12].i32[0] & 7) != 3
      || (((unsigned __int32)v171->i32[0] >> 2) & 0x3FE | 1) != (((unsigned __int32)v171[12].i32[0] >> 3) & 0x1FF))
    {
LABEL_57:
      v153[0] = 0;
      v151[0] = 0;
      cv::Mat::locateROI((uint64_t)&v48[12 * v149], v153, v151);
      if (SLODWORD(v151[0]) < a7->i32[0]
        || (v50 = a7->i32[1], SHIDWORD(v151[0]) < v50)
        || a7->i32[0] + LODWORD(v151[0]) + v171[12 * v149 + 1].i32[1] > SLODWORD(v153[0])
        || v50 + HIDWORD(v151[0]) + v171[12 * v149 + 1].i32[0] > SHIDWORD(v153[0]))
      {
        std::string::basic_string[abi:ne180100]<0>(v162, "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height");
        std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 908);
        cv::error((cv *)&v197, v51);
      }
      goto LABEL_62;
    }
    v47 = v47 >> 1;
    v49 = 2;
  }
  else
  {
    v49 = 1;
  }
  v149 = v49;
  if (v47 >= 1)
  {
    v48 = v171;
    goto LABEL_57;
  }
LABEL_62:
  if (v47 < a8)
    a8 = v47;
LABEL_64:
  if (((unsigned int (*)(void (***)(uint64_t *__return_ptr, _QWORD, uint64_t)))(*a2)[5])(a2) != 327680)
  {
    v53 = a2;
    v58 = 1;
    v56 = -1;
    if (v47 < 0)
      goto LABEL_85;
    goto LABEL_72;
  }
  ((void (*)(void (***)(uint64_t *__return_ptr, _QWORD, uint64_t), _DWORD **))(*a2)[1])(a2, &v168);
  v53 = a2;
  v54 = -1431655765 * ((unint64_t)(v169 - (_QWORD)v168) >> 5);
  if (v54 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v162, "levels2 >= 0");
    std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 920);
    cv::error((cv *)&v197, v55);
  }
  v56 = v54 - 1;
  if ((v56 & 0x80000001) == 1)
  {
    v57 = v168;
    v58 = 1;
    if ((v168[24] & 7) != 3 || ((*v168 >> 2) & 0x3FE | 1) != ((v168[24] >> 3) & 0x1FF))
      goto LABEL_77;
    v56 = v56 >> 1;
    v58 = 2;
  }
  else
  {
    v58 = 1;
  }
  if (v56 < 1)
    goto LABEL_82;
  v57 = v168;
LABEL_77:
  v153[0] = 0;
  v151[0] = 0;
  cv::Mat::locateROI((uint64_t)&v57[24 * v58], v153, v151);
  if (SLODWORD(v151[0]) < a7->i32[0]
    || (v59 = a7->i32[1], SHIDWORD(v151[0]) < v59)
    || a7->i32[0] + LODWORD(v151[0]) + v168[24 * v58 + 3] > SLODWORD(v153[0])
    || v59 + HIDWORD(v151[0]) + v168[24 * v58 + 2] > SHIDWORD(v153[0]))
  {
    std::string::basic_string[abi:ne180100]<0>(v162, "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height");
    std::string::basic_string[abi:ne180100]<0>(v218, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v197, 4294967081, v162, v218, v154, 936);
    cv::error((cv *)&v197, v60);
  }
LABEL_82:
  if (v56 < a8)
    a8 = v56;
  if (v47 < 0)
  {
LABEL_85:
    cv::_OutputArray::_OutputArray((uint64_t)&v197, (uint64_t)&v171);
    v167 = *a7;
    a8 = cv::buildOpticalFlowPyramid(a1, (uint64_t)&v197, (int *)&v167, a8, 0, 4, 0, 1);
    if ((v56 & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_86;
  }
LABEL_72:
  if ((v56 & 0x80000000) == 0)
    goto LABEL_87;
LABEL_86:
  cv::_OutputArray::_OutputArray((uint64_t)&v197, (uint64_t)&v168);
  v166 = *a7;
  a8 = cv::buildOpticalFlowPyramid(v53, (uint64_t)&v197, (int *)&v166, a8, 0, 4, 0, 1);
LABEL_87:
  v61 = a19;
  v62 = a18 & ~(a18 >> 31);
  if (v62 >= 0x64)
    v62 = 100;
  if ((a17 & 1) != 0)
    v63 = v62;
  else
    v63 = 30;
  if (a19 < 0.0)
    v61 = 0.0;
  if (v61 > 10.0)
    v61 = 10.0;
  v163 = (char *)v162 + 8;
  v164 = (cv *)v165;
  if ((a17 & 2) != 0)
    v64 = v61;
  else
    v64 = 0.01;
  v165[0] = 0;
  v165[1] = 0;
  LODWORD(v162[0]) = 1124007936;
  memset((char *)v162 + 4, 0, 48);
  v162[3] = 0u;
  if (v149 == 1)
  {
    v65 = (16 * ((unsigned __int32)v171->i32[0] >> 3)) | 0xB;
    *(int32x2_t *)v218 = vadd_s32(vrev64_s32(vadd_s32(*a7, *a7)), v171[1]);
    cv::Mat::create((cv::Mat *)v162, (cv::Mat *)2, (const int *)v218, v65);
  }
  if ((a8 & 0x80000000) == 0)
  {
    v66 = v64 * v64;
    v148 = (cv *)(a17 | ((unint64_t)v63 << 32));
    v67 = a9;
    v68 = a8;
    v144 = v28;
    while (1)
    {
      v219 = &v218[8];
      v220 = (void **)v221;
      v221[0] = 0;
      v221[1] = 0;
      *(_DWORD *)v218 = 1124007936;
      memset(&v218[4], 0, 60);
      if (v149 == 1)
      {
        *(int32x2_t *)&v69 = *v26;
        DWORD2(v69) = HIDWORD(**(_QWORD **)&v171[12 * v68 + 8]);
        HIDWORD(v69) = **(_QWORD **)&v171[12 * v68 + 8];
        v70 = DWORD2(v69) + 2 * *(_QWORD *)v26;
        LODWORD(v198) = HIDWORD(v69) + 2 * HIDWORD(*(unint64_t *)v26);
        HIDWORD(v198) = v70;
        v199 = *(_DWORD **)&v162[1];
        *(_QWORD *)&v200 = 0;
        v203 = &v198;
        v204 = (cv *)&v205;
        HIDWORD(v197) = 2;
        LODWORD(v197) = v162[0] & 0xFFF | 0x42FF4000;
        v205 = ((((LODWORD(v162[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v162[0] & 7))) & 3)) * (uint64_t)v70;
        v206 = (((LODWORD(v162[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v162[0] & 7))) & 3);
        v202 = 0;
        *((_QWORD *)&v201 + 1) = *(_QWORD *)&v162[1] + v205 * (int)v198;
        *((_QWORD *)&v200 + 1) = *(_QWORD *)&v162[1];
        *(_QWORD *)&v201 = *((_QWORD *)&v201 + 1);
        *(_OWORD *)v153 = v69;
        cv::Mat::Mat(v154, &v197, v153);
        v73 = (unsigned int *)v156;
        if ((_QWORD)v156)
        {
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 + 1, v73));
        }
        v75 = *(unsigned int **)&v218[24];
        if (*(_QWORD *)&v218[24])
        {
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
            cv::Mat::deallocate((cv::Mat *)v218, v71);
        }
        *(_QWORD *)&v218[16] = 0;
        memset(&v218[32], 0, 24);
        if (*(int *)&v218[4] <= 0)
        {
          *(_QWORD *)&v218[24] = 0;
          *(_DWORD *)v218 = v154[0];
        }
        else
        {
          v78 = 0;
          v79 = v219;
          do
            *(_DWORD *)&v79[4 * v78++] = 0;
          while (v78 < *(int *)&v218[4]);
          *(_QWORD *)&v218[24] = 0;
          *(_DWORD *)v218 = v154[0];
          if (*(int *)&v218[4] > 2)
          {
LABEL_130:
            cv::Mat::copySize((cv::Mat *)v218, (const cv::Mat *)v154);
            goto LABEL_131;
          }
        }
        if (SHIDWORD(v154[0]) > 2)
          goto LABEL_130;
        *(_DWORD *)&v218[4] = HIDWORD(v154[0]);
        *(_QWORD *)&v218[8] = v154[1];
        v90 = v160;
        v91 = v220;
        *v220 = *(void **)v160;
        v91[1] = (void *)*((_QWORD *)v90 + 1);
LABEL_131:
        *(_OWORD *)&v218[40] = v157;
        v92 = (unsigned int *)v156;
        *(_OWORD *)&v218[24] = v156;
        *(_QWORD *)&v218[16] = v155;
        *(_QWORD *)&v218[56] = v158;
        if ((_QWORD)v156)
        {
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (!v94)
            cv::Mat::deallocate((cv::Mat *)v154, v71);
        }
        v155 = 0;
        v157 = 0uLL;
        *((_QWORD *)&v156 + 1) = 0;
        if (SHIDWORD(v154[0]) >= 1)
        {
          v95 = 0;
          v96 = v159;
          do
            *(_DWORD *)(v96 + 4 * v95++) = 0;
          while (v95 < SHIDWORD(v154[0]));
        }
        *(_QWORD *)&v156 = 0;
        if (v160 != (cv *)&v161)
          cv::fastFree((void **)v160, v71);
        cv::_InputArray::_InputArray((uint64_t)v154, (const cv::Mat *)v218);
        cv::_OutputArray::_OutputArray((uint64_t)v153, (cv::Mat *)&v197);
        *(_OWORD *)v151 = 0u;
        v152 = 0u;
        cv::copyMakeBorder((uint64_t)v154, (uint64_t)v153);
        v98 = (unsigned int *)v200;
        if ((_QWORD)v200)
        {
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
            cv::Mat::deallocate((cv::Mat *)&v197, v97);
        }
        v199 = 0;
        v201 = 0uLL;
        *((_QWORD *)&v200 + 1) = 0;
        if (SHIDWORD(v197) >= 1)
        {
          v101 = 0;
          v102 = v203;
          do
            *((_DWORD *)v102 + v101++) = 0;
          while (v101 < SHIDWORD(v197));
        }
        *(_QWORD *)&v200 = 0;
        if (v204 != (cv *)&v205)
          cv::fastFree((void **)v204, v97);
        goto LABEL_154;
      }
      v80 = (2 * v68) | 1;
      v81 = v171;
      v82 = (const cv::Mat *)&v171[12 * v80];
      if (v218 != (_BYTE *)v82)
        break;
LABEL_154:
      v107 = v68 * v149;
      v108 = (_DWORD *)v171[12 * v107 + 8];
      v109 = v68 * v58;
      if (v108[1] != *(_DWORD *)(*(_QWORD *)&v168[24 * v109 + 16] + 4)
        || *v108 != **(_DWORD **)&v168[24 * v68 * v58 + 16])
      {
        std::string::basic_string[abi:ne180100]<0>(v154, "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()");
        std::string::basic_string[abi:ne180100]<0>(v153, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v151, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v197, 4294967081, v154, v153, v151, 979);
        cv::error((cv *)&v197, v111);
      }
      if (((v168[24 * v109] ^ v171[12 * v107].i32[0]) & 0xFFF) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v154, "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()");
        std::string::basic_string[abi:ne180100]<0>(v153, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v151, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v197, 4294967081, v154, v153, v151, 980);
        cv::error((cv *)&v197, v112);
      }
      LODWORD(v154[0]) = 0;
      HIDWORD(v154[0]) = v22;
      v197 = (int32x2_t **)&off_24DBEF6B8;
      v198 = &v171[12 * v107];
      *(_QWORD *)&v200 = v218;
      v199 = &v168[24 * v109];
      *((_QWORD *)&v200 + 1) = v147;
      *(_QWORD *)&v201 = v146;
      *((_QWORD *)&v201 + 1) = v144;
      v202 = v145;
      v26 = a7;
      v203 = (int32x2_t **)*a7;
      v204 = v148;
      v205 = *(_QWORD *)&v66;
      v206 = __PAIR64__(a8, v68);
      v207 = a20;
      v208 = v67;
      cv::parallel_for_(v154, (uint64_t)&v197, -1.0);
      cv::BaseRowFilter::~BaseRowFilter((cv::BaseRowFilter *)&v197);
      v113 = *(unsigned int **)&v218[24];
      if (*(_QWORD *)&v218[24])
      {
        do
        {
          v114 = __ldaxr(v113);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v113));
        if (!v115)
          cv::Mat::deallocate((cv::Mat *)v218, v52);
      }
      *(_QWORD *)&v218[16] = 0;
      memset(&v218[32], 0, 24);
      if (*(int *)&v218[4] >= 1)
      {
        v116 = 0;
        v117 = v219;
        do
          *(_DWORD *)&v117[4 * v116++] = 0;
        while (v116 < *(int *)&v218[4]);
      }
      *(_QWORD *)&v218[24] = 0;
      if (v220 != v221)
        cv::fastFree(v220, v52);
      if (v68-- <= 0)
        goto LABEL_172;
    }
    v83 = (unsigned int *)v171[12 * v80 + 3];
    if (v83)
    {
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 + 1, v83));
      v85 = *(unsigned int **)&v218[24];
      if (*(_QWORD *)&v218[24])
      {
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
          cv::Mat::deallocate((cv::Mat *)v218, v52);
      }
    }
    *(_QWORD *)&v218[16] = 0;
    memset(&v218[32], 0, 24);
    if (*(int *)&v218[4] <= 0)
    {
      *(_QWORD *)&v218[24] = 0;
      *(_DWORD *)v218 = *(_DWORD *)v82;
    }
    else
    {
      v88 = 0;
      v89 = v219;
      do
        *(_DWORD *)&v89[4 * v88++] = 0;
      while (v88 < *(int *)&v218[4]);
      *(_QWORD *)&v218[24] = 0;
      *(_DWORD *)v218 = *(_DWORD *)v82;
      if (*(int *)&v218[4] > 2)
        goto LABEL_152;
    }
    if (v81[12 * v80].i32[1] <= 2)
    {
      *(_DWORD *)&v218[4] = v81[12 * v80].i32[1];
      v103 = &v81[12 * v80];
      *(int32x2_t *)&v218[8] = v103[1];
      v104 = v103[9];
      v105 = v220;
      *v220 = **(void ***)&v104;
      v105[1] = *(void **)(*(_QWORD *)&v104 + 8);
LABEL_153:
      v106 = &v81[12 * v80];
      *(_OWORD *)&v218[32] = *(_OWORD *)v106[4].i8;
      *(int32x2_t *)&v218[48] = v106[6];
      *(_OWORD *)&v218[16] = *(_OWORD *)v106[2].i8;
      *(int32x2_t *)&v218[56] = v106[7];
      goto LABEL_154;
    }
LABEL_152:
    cv::Mat::copySize((cv::Mat *)v218, v82);
    goto LABEL_153;
  }
LABEL_172:
  v119 = (unsigned int *)*((_QWORD *)&v162[1] + 1);
  if (*((_QWORD *)&v162[1] + 1))
  {
    do
    {
      v120 = __ldaxr(v119);
      v121 = v120 - 1;
    }
    while (__stlxr(v121, v119));
    if (!v121)
      cv::Mat::deallocate((cv::Mat *)v162, v52);
  }
  *(_QWORD *)&v162[1] = 0;
  memset(&v162[2], 0, 24);
  if (SDWORD1(v162[0]) >= 1)
  {
    v122 = 0;
    v123 = v163;
    do
      *(_DWORD *)&v123[4 * v122++] = 0;
    while (v122 < SDWORD1(v162[0]));
  }
  *((_QWORD *)&v162[1] + 1) = 0;
  if (v164 != (cv *)v165)
    cv::fastFree((void **)v164, v52);
  v197 = (int32x2_t **)&v168;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  v197 = &v171;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  v124 = *(unsigned int **)&__p[24];
  if (*(_QWORD *)&__p[24])
  {
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
      cv::Mat::deallocate((cv::Mat *)__p, v23);
  }
  *(_QWORD *)&__p[16] = 0;
  memset(&__p[32], 0, 24);
  if (*(int *)&__p[4] >= 1)
  {
    v127 = 0;
    v128 = v175;
    do
      *(_DWORD *)&v128[4 * v127++] = 0;
    while (v127 < *(int *)&__p[4]);
  }
  *(_QWORD *)&__p[24] = 0;
  if (v176 != (cv *)v177)
    cv::fastFree((void **)v176, v23);
  v129 = v180;
  if (v180)
  {
    do
    {
      v130 = __ldaxr(v129);
      v131 = v130 - 1;
    }
    while (__stlxr(v131, v129));
    if (!v131)
      cv::Mat::deallocate((cv::Mat *)v178, v23);
  }
  v179 = 0;
  v181 = 0;
  v183 = 0;
  v182 = 0;
  if (SHIDWORD(v178[0]) >= 1)
  {
    v132 = 0;
    v133 = v184;
    do
      *(_DWORD *)(v133 + 4 * v132++) = 0;
    while (v132 < SHIDWORD(v178[0]));
  }
  v180 = 0;
  if (v185 != (cv *)&v186)
    cv::fastFree((void **)v185, v23);
  v134 = v189;
  if (v189)
  {
    do
    {
      v135 = __ldaxr(v134);
      v136 = v135 - 1;
    }
    while (__stlxr(v136, v134));
    if (!v136)
      cv::Mat::deallocate((cv::Mat *)v187, v23);
  }
  v188 = 0;
  v190 = 0;
  v192 = 0;
  v191 = 0;
  if (SHIDWORD(v187[0]) >= 1)
  {
    v137 = 0;
    v138 = v193;
    do
      *(_DWORD *)(v138 + 4 * v137++) = 0;
    while (v137 < SHIDWORD(v187[0]));
  }
  v189 = 0;
  if (v194 != (cv *)&v195)
    cv::fastFree((void **)v194, v23);
LABEL_208:
  v139 = v211;
  if (v211)
  {
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
      cv::Mat::deallocate((cv::Mat *)v209, v23);
  }
  v210 = 0;
  v212 = 0;
  v214 = 0;
  v213 = 0;
  if (SHIDWORD(v209[0]) >= 1)
  {
    v142 = 0;
    v143 = v215;
    do
      v143->i32[v142++] = 0;
    while (v142 < SHIDWORD(v209[0]));
  }
  v211 = 0;
  if (v216 != (cv *)&v217)
    cv::fastFree((void **)v216, v23);
}

void sub_219E34BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a71;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;
  void *v76;
  void *v77;

  cv::Exception::~Exception((cv::Exception *)&STACK[0x300]);
  if (a41 < 0)
    operator delete(__p);
  if (*(char *)(v72 - 193) < 0)
    operator delete(*(void **)(v72 - 216));
  if (a56 < 0)
    operator delete(a51);
  STACK[0x300] = (unint64_t)&a68;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  STACK[0x300] = (unint64_t)&a71;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  cv::Mat::~Mat((cv::Mat *)&a72, v74);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x238], v75);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x298], v76);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x378], v77);
  _Unwind_Resume(a1);
}

void cv::detail::LKTrackerInvoker::~LKTrackerInvoker(cv::detail::LKTrackerInvoker *this)
{
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::convertAndUnrollScalar(cv *this, const cv::Mat *a2, _BYTE *a3, unsigned __int8 *a4)
{
  char v6;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  signed int v12;
  uint64_t (*ConvertFunc)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _DWORD *, _QWORD);
  uint64_t v14;
  int v15;
  uint64_t result;
  char v17;
  unint64_t v18;
  const cv::Exception *v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  void *__p[2];
  void *v25[2];
  void *v26[2];
  _BYTE v27[120];
  _DWORD v28[2];

  v6 = (char)a2;
  v8 = *((unsigned int *)this + 1);
  if ((int)v8 >= 3)
  {
    v10 = (int *)*((_QWORD *)this + 8);
    v9 = 1;
    do
    {
      v11 = *v10++;
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = *((_DWORD *)this + 3) * *((_DWORD *)this + 2);
  }
  v12 = (a2 >> 3) & 0x1FF;
  ConvertFunc = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _DWORD *, _QWORD))cv::getConvertFunc((cv *)(*(_DWORD *)this & 7), (char)a2);
  v14 = *((_QWORD *)this + 2);
  if (v12 < v9)
    v15 = v12 + 1;
  else
    v15 = v9;
  v28[0] = v15;
  v28[1] = 1;
  result = ConvertFunc(v14, 0, 0, 0, a3, 0, v28, 0);
  v17 = v6 & 7;
  v18 = (unint64_t)(v12 + 1) << ((0xFA50u >> (2 * (v6 & 7))) & 3);
  if (v12 >= v9)
  {
    if (v9 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "scn == 1");
      std::string::basic_string[abi:ne180100]<0>(v25, "convertAndUnrollScalar");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v27, 4294967081, v26, v25, __p, 976);
      cv::error((cv *)v27, v19);
    }
    v20 = (0x88442211uLL >> (4 * v17)) & 0xF;
    if (v20 < v18)
    {
      v21 = a3;
      v22 = v18;
      do
      {
        v21[v20] = *v21;
        --v22;
        ++v21;
      }
      while (v20 != v22);
    }
  }
  if (v18 * (unint64_t)a4 > v18)
  {
    v23 = (_QWORD)(a4 - 1) * v18;
    do
    {
      a3[v18] = *a3;
      ++a3;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_219E3513C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void cv::bitwise_and(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
  cv::binary_op((uint64_t)this, (uint64_t)a2);
}

uint64_t cv::and8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAnd<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::binary_op(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  void (**v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD);
  void (**v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(uint64_t *__return_ptr, _QWORD, uint64_t);
  int v14;
  int v15;
  Mat *v16;
  int v17;
  int v18;
  void *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD);
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  const cv::Exception *v47;
  char v48;
  cv *v49;
  unsigned int v50;
  _BOOL4 v51;
  void *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  cv *v60;
  cv *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  const cv::Exception *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  const cv::Exception *v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  BOOL v82;
  BOOL v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  int v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD);
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  cv *v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  _DWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  _DWORD *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  _DWORD *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  _DWORD *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t (*CopyMaskFunc)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  int v151;
  _DWORD v152[2];
  _DWORD v153[2];
  _DWORD v154[2];
  _DWORD v155[2];
  void *__p[2];
  __int128 v157;
  unint64_t v158;
  unint64_t v159;
  void *v160[3];
  unsigned int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  cv *v166;
  uint64_t v167;
  _BYTE v168[64];
  _DWORD *v169;
  cv *v170;
  _QWORD v171[2];
  cv *v172;
  _DWORD v173[2];
  _DWORD v174[2];
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  unsigned int *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  cv *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  cv *v195;
  uint64_t v196;
  unsigned __int8 *v197[2];
  __int128 v198;
  cv::Mat *v199;
  void **v200;
  void **v201;
  _BYTE *v202;
  uint64_t v203;
  int v204[2];
  unint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  _DWORD *v210;
  cv *v211;
  _QWORD v212[510];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))v2;
  v212[507] = *MEMORY[0x24BDAC8D0];
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  (**v13)(&v186, v13, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v12)(&v175, v12, 0xFFFFFFFFLL);
  v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  if (SHIDWORD(v186) > 2)
    goto LABEL_28;
  if (SHIDWORD(v175) > 2)
    goto LABEL_28;
  if (v14 != v15)
    goto LABEL_28;
  if (v194[1] != v183[1])
    goto LABEL_28;
  v17 = *v194;
  if (*v194 != *v183)
    goto LABEL_28;
  v16 = (Mat *)(v186 & 0xFFF);
  v18 = v151;
  if ((_DWORD)v16 != (v175 & 0xFFF))
    v18 = 0;
  if (v18 != 1)
  {
LABEL_28:
    v31 = v14 == 0x20000;
    if (v15 == 0x20000)
      ++v31;
    if (v31 == 1)
      goto LABEL_43;
    v32 = *(v194 - 1);
    if ((_DWORD)v32 != *(v183 - 1))
      goto LABEL_43;
    if ((_DWORD)v32 == 2)
    {
      if (*v194 != *v183 || v194[1] != v183[1])
        goto LABEL_43;
    }
    else if ((int)v32 >= 1)
    {
      if (*v194 != *v183)
        goto LABEL_43;
      v33 = 0;
      while (v32 - 1 != v33)
      {
        v34 = v194[v33 + 1];
        v35 = v183[++v33];
        if (v34 != v35)
        {
          if (v33 < v32)
            goto LABEL_43;
          break;
        }
      }
    }
    if ((((unsigned __int16)v175 ^ (unsigned __int16)v186) & 0xFFF) == 0)
    {
      v48 = 0;
      goto LABEL_82;
    }
LABEL_43:
    v36 = v175 & 0xFFF;
    if (SHIDWORD(v186) < 3)
    {
      v37 = v186;
      if (v188 == 1 || v187 == 1)
      {
        v39 = v14 != 0x20000 && v15 == 0x20000;
        v40 = v39;
        if ((v186 & 0x4000) != 0 && !v40)
        {
          v41 = (v36 >> 3) + 1;
          v42 = *v194;
          v43 = v194[1];
          v44 = v43 == v41;
          if (*v194 != 1)
            v44 = 0;
          v45 = v42 == v41 || *v194 == 1;
          if (v43 != 1)
            v45 = 0;
          if (v45 || v44 || v43 == 1 && v42 == 4 && v36 <= 0x1F && (v186 & 0xFFF) == 6)
          {
            cv::swap((int *)&v186, (Mat *)&v175, v16);
            v48 = 1;
            goto LABEL_82;
          }
        }
      }
    }
    else
    {
      v37 = v186;
    }
    if (SHIDWORD(v175) > 2)
      goto LABEL_81;
    v46 = v176 == 1 || v177 == 1;
    if (!v46 || (v175 & 0x4000) == 0 || v14 == 0x20000 && v15 != 0x20000)
      goto LABEL_81;
    v79 = (v37 >> 3) & 0x1FF;
    v80 = *v183;
    v81 = v183[1];
    v82 = v81 == v79 + 1;
    if (*v183 != 1)
      v82 = 0;
    v83 = v80 == v79 + 1 || *v183 == 1;
    if (v81 != 1)
      v83 = 0;
    v48 = 1;
    if (!v83 && !v82 && (v81 != 1 || v80 != 4 || v36 != 6 || v79 >= 4))
    {
LABEL_81:
      std::string::basic_string[abi:ne180100]<0>(v168, "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'");
      std::string::basic_string[abi:ne180100]<0>(v160, "binary_op");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v204, 4294967087, v168, v160, __p, 1029);
      cv::error((cv *)v204, v47);
    }
LABEL_82:
    v172 = 0;
    if (SHIDWORD(v186) < 1)
      v49 = 0;
    else
      v49 = (cv *)*((_QWORD *)v195 + (HIDWORD(v186) - 1));
    v171[1] = 0;
    v172 = v49;
    v50 = v186;
    v169 = &v168[8];
    v170 = (cv *)v171;
    v171[0] = 0;
    *(_DWORD *)v168 = 1124007936;
    memset(&v168[4], 0, 60);
    if ((v151 & 1) != 0)
    {
      CopyMaskFunc = 0;
      v51 = 0;
LABEL_161:
      *(_QWORD *)v204 = &v206;
      v205 = 4104;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10);
      (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v10)(v160, v10, 0xFFFFFFFFLL);
      if (((v151 | !v51) & 1) == 0)
      {
        *(_OWORD *)__p = 0u;
        v157 = 0u;
        cv::Mat::operator=((uint64_t)v160, (int64x2_t *)__p);
      }
      v89 = v186 & 7;
      if (v4)
      {
        v89 = 0;
        v90 = (int)v172;
      }
      else
      {
        v90 = ((v50 >> 3) & 0x1FF) + 1;
      }
      v91 = v6[v89];
      v92 = ((unint64_t)v49 + 1023) / (unint64_t)v49;
      if ((v48 & 1) != 0)
      {
        v199 = (cv::Mat *)&v186;
        v200 = v160;
        v201 = (void **)v168;
        v202 = 0;
        v197[1] = 0;
        v197[0] = 0;
        *(_QWORD *)&v198 = 0;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v199, v197, -1);
        v93 = v159;
        if (v92 >= v159)
          v92 = v159;
        v94 = (v92 << (v151 ^ 1u)) * (_QWORD)v172 + 32;
        v95 = *(uint64_t **)v204;
        if (v205 < v94)
        {
          if (*(uint64_t **)v204 != &v206)
          {
            if (*(_QWORD *)v204)
              MEMORY[0x2207351A4](*(_QWORD *)v204, 0x1000C8077774924);
            *(_QWORD *)v204 = &v206;
          }
          v205 = v94;
          v95 = &v206;
          if (v94 >= 0x1009)
          {
            v95 = (uint64_t *)operator new[]();
            *(_QWORD *)v204 = v95;
          }
        }
        v96 = v172;
        cv::convertAndUnrollScalar((cv *)&v175, (const cv::Mat *)(v186 & 0xFFF), v95, (unsigned __int8 *)v92);
        v98 = 0;
        v99 = ((unint64_t)v95 + (_QWORD)v96 * v92 + 15) & 0xFFFFFFFFFFFFFFF0;
        while (v98 < v158)
        {
          v148 = v98;
          if (v93)
          {
            v100 = 0;
            v101 = v197[0];
            v102 = v197[1];
            do
            {
              if (v93 - v100 >= v92)
                v103 = v92;
              else
                v103 = v93 - v100;
              v153[0] = v90 * v103;
              v153[1] = 1;
              if (v151)
                v104 = (unint64_t)v102;
              else
                v104 = v99;
              v91((uint64_t)v101, 0, (uint64_t)v95, 0, v104, 0, v153, 0);
              if (v151)
              {
                v105 = v103 << 32;
              }
              else
              {
                v152[0] = v103;
                v152[1] = 1;
                CopyMaskFunc(v99, 0, v198, 0, (uint64_t)v197[1], 0, v152, (uint64_t *)&v172);
                v105 = v103 << 32;
                *(_QWORD *)&v198 = v198 + (int)v103;
              }
              v106 = v105 * (_QWORD)v172;
              v101 = &v197[0][v106 >> 32];
              v102 = &v197[1][v106 >> 32];
              v197[0] = v101;
              v197[1] = v102;
              v100 += v92;
            }
            while (v100 < v93);
          }
          v98 = v148 + 1;
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
      else
      {
        v199 = (cv::Mat *)&v186;
        v200 = (void **)&v175;
        v201 = v160;
        v202 = v168;
        v203 = 0;
        *(_OWORD *)v197 = 0u;
        v198 = 0u;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v199, v197, -1);
        v107 = v159;
        v108 = v159;
        if ((v159 * v90) >> 31)
          v108 = 0x7FFFFFFF / v90;
        if ((v151 & 1) != 0)
        {
          v109 = 0;
        }
        else
        {
          if (v92 < v108)
            v108 = ((unint64_t)v49 + 1023) / (unint64_t)v49;
          v110 = (_QWORD)v172 * v108;
          v109 = *(uint64_t **)v204;
          if (v205 < (unint64_t)v172 * v108)
          {
            if (*(uint64_t **)v204 != &v206)
            {
              if (*(_QWORD *)v204)
                MEMORY[0x2207351A4](*(_QWORD *)v204, 0x1000C8077774924);
              *(_QWORD *)v204 = &v206;
            }
            v205 = v110;
            if (v110 < 0x1009)
            {
              v109 = &v206;
            }
            else
            {
              v109 = (uint64_t *)operator new[]();
              *(_QWORD *)v204 = v109;
            }
          }
        }
        v116 = 0;
        while (v116 < v158)
        {
          v149 = v116;
          if (v107)
          {
            v117 = 0;
            v118 = v197[0];
            v119 = v197[1];
            v120 = v107;
            v121 = (uint64_t *)v198;
            do
            {
              v122 = v120 - v108;
              if (v120 >= v108)
                v123 = v108;
              else
                v123 = v120;
              v155[0] = v90 * v123;
              v155[1] = 1;
              if (v151)
                v124 = v121;
              else
                v124 = v109;
              v91((uint64_t)v118, 0, (uint64_t)v119, 0, (uint64_t)v124, 0, v155, 0);
              if (v151)
              {
                v125 = v123 << 32;
              }
              else
              {
                v154[0] = v123;
                v154[1] = 1;
                CopyMaskFunc((uint64_t)v109, 0, *((_QWORD *)&v198 + 1), 0, v198, 0, v154, (uint64_t *)&v172);
                v125 = v123 << 32;
                *((_QWORD *)&v198 + 1) += (int)v123;
              }
              v126 = v125 * (_QWORD)v172;
              v118 = &v197[0][v126 >> 32];
              v119 = &v197[1][v126 >> 32];
              v197[0] = v118;
              v197[1] = v119;
              v121 = (uint64_t *)(v198 + (v126 >> 32));
              *(_QWORD *)&v198 = v121;
              v117 += v108;
              v120 = v122;
            }
            while (v117 < v107);
          }
          v116 = v149 + 1;
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
      v127 = v161;
      if (v161)
      {
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
          cv::Mat::deallocate((cv::Mat *)v160, v97);
      }
      v160[2] = 0;
      v162 = 0;
      v163 = 0;
      v164 = 0;
      if (SHIDWORD(v160[0]) >= 1)
      {
        v130 = 0;
        v131 = v165;
        do
          *(_DWORD *)(v131 + 4 * v130++) = 0;
        while (v130 < SHIDWORD(v160[0]));
      }
      v161 = 0;
      if (v166 != (cv *)&v167)
        cv::fastFree((void **)v166, v97);
      if (*(uint64_t **)v204 != &v206 && *(_QWORD *)v204 != 0)
        MEMORY[0x2207351A4]();
      v133 = *(unsigned int **)&v168[24];
      if (*(_QWORD *)&v168[24])
      {
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        if (!v135)
          cv::Mat::deallocate((cv::Mat *)v168, v97);
      }
      *(_QWORD *)&v168[16] = 0;
      memset(&v168[32], 0, 24);
      if (*(int *)&v168[4] >= 1)
      {
        v136 = 0;
        v137 = v169;
        do
          v137[v136++] = 0;
        while (v136 < *(int *)&v168[4]);
      }
      *(_QWORD *)&v168[24] = 0;
      if (v170 != (cv *)v171)
        cv::fastFree((void **)v170, v97);
      goto LABEL_252;
    }
    (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v8)(v204, v8, 0xFFFFFFFFLL);
    v53 = (unsigned int *)v207;
    if ((_QWORD)v207)
    {
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
    }
    v55 = *(unsigned int **)&v168[24];
    if (*(_QWORD *)&v168[24])
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        cv::Mat::deallocate((cv::Mat *)v168, v52);
    }
    *(_QWORD *)&v168[16] = 0;
    memset(&v168[32], 0, 24);
    if (*(uint64_t *)v168 <= 0)
    {
      *(_QWORD *)&v168[24] = 0;
      *(_DWORD *)v168 = v204[0];
    }
    else
    {
      v58 = 0;
      v59 = v169;
      do
        v59[v58++] = 0;
      while (v58 < *(int *)&v168[4]);
      *(_QWORD *)&v168[24] = 0;
      *(_DWORD *)v168 = v204[0];
      if (*(int *)&v168[4] > 2)
        goto LABEL_101;
    }
    if (v204[1] <= 2)
    {
      *(_DWORD *)&v168[4] = v204[1];
      *(_QWORD *)&v168[8] = v205;
      v60 = v211;
      v61 = v170;
      *(_QWORD *)v170 = *(_QWORD *)v211;
      *((_QWORD *)v61 + 1) = *((_QWORD *)v60 + 1);
LABEL_102:
      *(_OWORD *)&v168[40] = v208;
      v62 = (unsigned int *)v207;
      *(_OWORD *)&v168[24] = v207;
      *(_QWORD *)&v168[16] = v206;
      *(_QWORD *)&v168[56] = v209;
      if ((_QWORD)v207)
      {
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
          cv::Mat::deallocate((cv::Mat *)v204, v52);
      }
      v206 = 0;
      v208 = 0uLL;
      *((_QWORD *)&v207 + 1) = 0;
      if (v204[1] >= 1)
      {
        v65 = 0;
        v66 = v210;
        do
          v66[v65++] = 0;
        while (v65 < v204[1]);
      }
      *(_QWORD *)&v207 = 0;
      if (v211 != (cv *)v212)
        cv::fastFree((void **)v211, v52);
      if ((*(_WORD *)v168 & 0xFFE) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v160, "(mask.type() == CV_8UC1 || mask.type() == CV_8SC1)");
        std::string::basic_string[abi:ne180100]<0>(__p, "binary_op");
        std::string::basic_string[abi:ne180100]<0>(&v199, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
        cv::Exception::Exception(v204, 4294967081, v160, __p, &v199, 1043);
        cv::error((cv *)v204, v67);
      }
      v68 = *(v169 - 1);
      if ((_DWORD)v68 == *(v194 - 1))
      {
        if ((_DWORD)v68 == 2)
        {
          if (*v169 == *v194 && v169[1] == v194[1])
            goto LABEL_125;
        }
        else
        {
          if ((int)v68 < 1)
            goto LABEL_125;
          if (*v169 == *v194)
          {
            v69 = 1;
            do
            {
              v70 = v69;
              if (v68 == v69)
                break;
              v71 = v169[v69];
              v72 = v194[v69++];
            }
            while (v71 == v72);
            if (v70 >= v68)
            {
LABEL_125:
              CopyMaskFunc = cv::getCopyMaskFunc((unint64_t)v172);
              (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v10)(v204, v10, 0xFFFFFFFFLL);
              v75 = *(v210 - 1);
              if ((_DWORD)v75 == *(v194 - 1))
              {
                if ((_DWORD)v75 == 2)
                {
                  if (*v210 == *v194 && v210[1] == v194[1])
                    goto LABEL_151;
                }
                else
                {
                  if ((int)v75 < 1)
                  {
LABEL_151:
                    v51 = (((unsigned __int16)v186 ^ LOWORD(v204[0])) & 0xFFF) != 0;
LABEL_152:
                    v84 = (unsigned int *)v207;
                    if ((_QWORD)v207)
                    {
                      do
                      {
                        v85 = __ldaxr(v84);
                        v86 = v85 - 1;
                      }
                      while (__stlxr(v86, v84));
                      if (!v86)
                        cv::Mat::deallocate((cv::Mat *)v204, v74);
                    }
                    v206 = 0;
                    *((_QWORD *)&v207 + 1) = 0;
                    v208 = 0uLL;
                    if (v204[1] >= 1)
                    {
                      v87 = 0;
                      v88 = v210;
                      do
                        v88[v87++] = 0;
                      while (v87 < v204[1]);
                    }
                    *(_QWORD *)&v207 = 0;
                    if (v211 != (cv *)v212)
                      cv::fastFree((void **)v211, v74);
                    goto LABEL_161;
                  }
                  if (*v210 == *v194)
                  {
                    v76 = 0;
                    while (v75 - 1 != v76)
                    {
                      v77 = v210[v76 + 1];
                      v78 = v194[++v76];
                      if (v77 != v78)
                      {
                        if (v76 >= v75)
                          goto LABEL_151;
                        goto LABEL_136;
                      }
                    }
                    goto LABEL_151;
                  }
                }
              }
LABEL_136:
              v51 = 1;
              goto LABEL_152;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v160, "mask.size == src1.size");
      std::string::basic_string[abi:ne180100]<0>(__p, "binary_op");
      std::string::basic_string[abi:ne180100]<0>(&v199, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v204, 4294967081, v160, __p, &v199, 1044);
      cv::error((cv *)v204, v73);
    }
LABEL_101:
    cv::Mat::copySize((cv::Mat *)v168, (const cv::Mat *)v204);
    goto LABEL_102;
  }
  v174[0] = v194[1];
  v174[1] = v17;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v10 + 128))(v10, v174);
  (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v10)(v204, v10, 0xFFFFFFFFLL);
  if (v4)
  {
    v20 = *v6;
    if (SHIDWORD(v186) < 1)
      LODWORD(v21) = 0;
    else
      v21 = *((_QWORD *)v195 + (HIDWORD(v186) - 1));
    v22 = v186;
  }
  else
  {
    v22 = v186;
    v20 = v6[v186 & 7];
    LODWORD(v21) = ((v186 >> 3) & 0x1FF) + 1;
  }
  v23 = v188;
  v24 = v187;
  if ((v22 & v175 & v204[0] & 0x4000) != 0 && v187 * v188 == v187 * (uint64_t)v188)
  {
    v23 = v187 * v188;
    v24 = 1;
  }
  v25 = v23 * (uint64_t)(int)v21;
  if (v25 != (int)v25)
  {
    v26 = (unsigned int *)v207;
    if ((_QWORD)v207)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        cv::Mat::deallocate((cv::Mat *)v204, v19);
    }
    v206 = 0;
    *((_QWORD *)&v207 + 1) = 0;
    v208 = 0uLL;
    if (v204[1] >= 1)
    {
      v29 = 0;
      v30 = v210;
      do
        v30[v29++] = 0;
      while (v29 < v204[1]);
    }
    *(_QWORD *)&v207 = 0;
    if (v211 != (cv *)v212)
      cv::fastFree((void **)v211, v19);
    goto LABEL_28;
  }
  v173[0] = v25;
  v173[1] = v24;
  v20(v189, v196, v178, v185, v206, v212[0], v173, 0);
  v111 = (unsigned int *)v207;
  if ((_QWORD)v207)
  {
    do
    {
      v112 = __ldaxr(v111);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, v111));
    if (!v113)
      cv::Mat::deallocate((cv::Mat *)v204, v97);
  }
  v206 = 0;
  *((_QWORD *)&v207 + 1) = 0;
  v208 = 0uLL;
  if (v204[1] >= 1)
  {
    v114 = 0;
    v115 = v210;
    do
      v115[v114++] = 0;
    while (v114 < v204[1]);
  }
  *(_QWORD *)&v207 = 0;
  if (v211 != (cv *)v212)
    cv::fastFree((void **)v211, v97);
LABEL_252:
  v138 = v179;
  if (v179)
  {
    do
    {
      v139 = __ldaxr(v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, v138));
    if (!v140)
      cv::Mat::deallocate((cv::Mat *)&v175, v97);
  }
  v178 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  if (SHIDWORD(v175) >= 1)
  {
    v141 = 0;
    v142 = v183;
    do
      v142[v141++] = 0;
    while (v141 < SHIDWORD(v175));
  }
  v179 = 0;
  if (v184 != (cv *)&v185)
    cv::fastFree((void **)v184, v97);
  v143 = v190;
  if (v190)
  {
    do
    {
      v144 = __ldaxr(v143);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, v143));
    if (!v145)
      cv::Mat::deallocate((cv::Mat *)&v186, v97);
  }
  v189 = 0;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  if (SHIDWORD(v186) >= 1)
  {
    v146 = 0;
    v147 = v194;
    do
      v147[v146++] = 0;
    while (v146 < SHIDWORD(v186));
  }
  v190 = 0;
  if (v195 != (cv *)&v196)
    cv::fastFree((void **)v195, v97);
}

void sub_219E36360(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void cv::bitwise_or(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
  cv::binary_op((uint64_t)this, (uint64_t)a2);
}

uint64_t cv::or8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpOr<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::bitwise_xor(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
  cv::binary_op((uint64_t)this, (uint64_t)a2);
}

uint64_t cv::xor8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpXor<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::bitwise_not(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, const cv::_InputArray *a4)
{
  cv::binary_op((uint64_t)this, (uint64_t)this);
}

uint64_t cv::not8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpNot<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::max(cv *this, const cv::Mat *a2, const cv::Mat *a3, cv::Mat *a4)
{
  cv *v6;
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE v9[32];

  cv::_OutputArray::_OutputArray((uint64_t)v9, a3);
  cv::_InputArray::_InputArray((uint64_t)v8, this);
  v6 = (cv *)cv::_InputArray::_InputArray((uint64_t)v7, a2);
  cv::noArray(v6);
  cv::binary_op((uint64_t)v8, (uint64_t)v7);
}

void cv::min(cv *this, const cv::Mat *a2, const cv::Mat *a3, cv::Mat *a4)
{
  cv *v6;
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE v9[32];

  cv::_OutputArray::_OutputArray((uint64_t)v9, a3);
  cv::_InputArray::_InputArray((uint64_t)v8, this);
  v6 = (cv *)cv::_InputArray::_InputArray((uint64_t)v7, a2);
  cv::noArray(v6);
  cv::binary_op((uint64_t)v8, (uint64_t)v7);
}

void cv::max(cv *this, const cv::Mat *a2, double a3, cv::Mat *a4)
{
  cv *v5;
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  double v9;

  v9 = a3;
  cv::_OutputArray::_OutputArray((uint64_t)v8, a2);
  cv::_InputArray::_InputArray((uint64_t)v7, this);
  cv::_InputArray::_InputArray((cv::_InputArray *)v6, &v9);
  cv::noArray(v5);
  cv::binary_op((uint64_t)v7, (uint64_t)v6);
}

void cv::min(cv *this, const cv::Mat *a2, double a3, cv::Mat *a4)
{
  cv *v5;
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  double v9;

  v9 = a3;
  cv::_OutputArray::_OutputArray((uint64_t)v8, a2);
  cv::_InputArray::_InputArray((uint64_t)v7, this);
  cv::_InputArray::_InputArray((cv::_InputArray *)v6, &v9);
  cv::noArray(v5);
  cv::binary_op((uint64_t)v7, (uint64_t)v6);
}

void cv::add(uint64_t this, uint64_t a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
  cv::arithm_op(this, a2);
}

void cv::arithm_op(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  cv::Mat *v10;
  cv::Mat *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  Mat *v19;
  unsigned int v20;
  _BOOL4 v21;
  __int16 v22;
  BOOL v23;
  unsigned int v24;
  _BOOL4 v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  BOOL v31;
  BOOL v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int32 v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v45;
  const cv::Exception *v46;
  const cv::Exception *v47;
  int v48;
  uint64_t v49;
  double *v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  __int32 v63;
  __int32 v64;
  BOOL v65;
  BOOL v66;
  int v68;
  __int32 v69;
  __int32 v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  char v74;
  _BOOL4 v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, double *, uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t);
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _DWORD *v86;
  const cv::Exception *v88;
  unsigned int v89;
  unsigned int v90;
  cv *v91;
  unsigned int v92;
  BOOL v93;
  unsigned int v94;
  uint64_t ConvertFunc;
  unsigned int v98;
  int v99;
  int v100;
  cv *v101;
  _BOOL4 v102;
  void *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  _DWORD *v110;
  cv *v111;
  cv *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  _DWORD *v117;
  const cv::Exception *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  __int32 v123;
  const cv::Exception *v124;
  void *v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  __int32 v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  char v141;
  char *v142;
  unint64_t v143;
  unsigned __int8 *v144;
  unint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  _BYTE *v148;
  cv::Mat *v149;
  unint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  uint64_t *v155;
  int *v156;
  void (*v157)(_BYTE *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD);
  uint64_t v158;
  int *v159;
  unint64_t v160;
  int v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unint64_t v164;
  uint64_t *v165;
  void (*v166)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t *, _QWORD, _DWORD *, _QWORD);
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  int v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  int *v183;
  void (*v184)(_QWORD *, _QWORD, _QWORD *, _QWORD, uint64_t, _QWORD);
  uint64_t v185;
  int *v186;
  unint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  _DWORD *v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  _DWORD *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  int32x2_t *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t (*CopyMaskFunc)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  unint64_t v213;
  cv::Mat *v214;
  unsigned int v215;
  cv::Mat *v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  void (*v220)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  int v221;
  int v222;
  unsigned __int8 *v223;
  void (*v224)(_QWORD *, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, _QWORD);
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(_BYTE *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD);
  int v229;
  uint64_t v230;
  void (*v231)(uint64_t *, _QWORD, _QWORD, _QWORD, uint64_t *, _QWORD, _DWORD *, _QWORD);
  int v232;
  _DWORD v233[2];
  int v234;
  int v235;
  _DWORD v236[2];
  int v237;
  _DWORD v238[2];
  int v239;
  _DWORD v240[2];
  int v241;
  int v242;
  _DWORD v243[2];
  int v244;
  _DWORD v245[2];
  _DWORD v246[2];
  void *__p[2];
  __int128 v248;
  unint64_t v249;
  unsigned __int8 *v250;
  void *v251[3];
  unsigned int *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  cv *v257;
  uint64_t v258;
  _BYTE v259[64];
  _DWORD *v260;
  cv *v261;
  _QWORD v262[2];
  cv *v263;
  _DWORD v264[2];
  int32x2_t v265;
  uint64_t v266;
  int v267;
  int v268;
  double *v269;
  unsigned int *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  cv *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  unsigned int *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int32x2_t *v285;
  cv *v286;
  uint64_t v287;
  __int128 v288;
  __int128 v289;
  cv::Mat *v290;
  void **v291;
  void **v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  _DWORD *v301;
  cv *v302;
  _QWORD v303[510];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v230 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = v2;
  v303[507] = *MEMORY[0x24BDAC8D0];
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v16)(&v277, v16, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v15)(&v266, v15, 0xFFFFFFFFLL);
  v221 = (*(uint64_t (**)(cv::Mat *))(*(_QWORD *)v11 + 88))(v11);
  v214 = v11;
  v20 = v266 & 0xFFF;
  if (SHIDWORD(v277) < 3)
  {
    v21 = 0;
    v22 = v277;
    v23 = v278 == 1 || v279 == 1;
    if (v23 && (v277 & 0x4000) != 0)
    {
      if (v17 == 0x20000 || v18 != 0x20000)
      {
        v62 = (v20 >> 3) + 1;
        v63 = v285->i32[0];
        v64 = v285->i32[1];
        v65 = v64 == v62;
        if (v285->i32[0] != 1)
          v65 = 0;
        v66 = v63 == v62 || v285->i32[0] == 1;
        if (v64 != 1)
          v66 = 0;
        v21 = 1;
        if (!v66 && !v65)
        {
          v21 = 0;
          if (v64 == 1 && v63 == 4)
            v21 = v20 < 0x20 && (v277 & 0xFFF) == 6;
        }
      }
      else
      {
        v21 = 0;
      }
    }
  }
  else
  {
    v21 = 0;
    v22 = v277;
  }
  v24 = v22 & 0xFFF;
  if (SHIDWORD(v266) > 2)
    goto LABEL_13;
  v25 = 0;
  v26 = v267 == 1 || v268 == 1;
  if (v26 && (v266 & 0x4000) != 0)
  {
    if (v17 == 0x20000 && v18 != 0x20000)
    {
LABEL_13:
      v25 = 0;
      goto LABEL_14;
    }
    v27 = (v24 >> 3) + 1;
    v28 = *v274;
    v29 = v274[1];
    v30 = v29 == v27;
    if (*v274 != 1)
      v30 = 0;
    v31 = v28 == v27 || *v274 == 1;
    if (v29 != 1)
      v31 = 0;
    v25 = 1;
    if (!v31 && !v30)
    {
      v25 = 0;
      if (v29 == 1 && v28 == 4)
        v25 = v20 == 6 && v24 < 0x20;
    }
  }
LABEL_14:
  if (v17 == v18)
  {
    if (SHIDWORD(v277) > 2 || SHIDWORD(v266) > 2)
      goto LABEL_62;
  }
  else if (SHIDWORD(v266) > 2 || SHIDWORD(v277) > 2 || (v22 & 0xFF8) != 0)
  {
    goto LABEL_62;
  }
  v34 = v285->i32[1] == v274[1] && v285->i32[0] == *v274 && v24 == v20;
  v35 = v221;
  if (!v34)
    v35 = 0;
  if (v35 == 1)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13) & 1) == 0
      && (v9 < 0 || ((v277 ^ v9) & 7) == 0)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13)
      && (v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, 0xFFFFFFFFLL),
          v36 == (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v16, 0xFFFFFFFFLL)))
    {
      if (v21 && v25 || !v21 && !v25)
      {
        v265 = vrev64_s32(*v285);
        (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 128))(v13, &v265, v277 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
        (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v13)(&v295, v13, 0xFFFFFFFFLL);
        v77 = v278;
        v78 = (((unint64_t)v277 >> 3) & 0x1FF) + 1;
        if ((v277 & v266 & v295 & 0x4000) != 0
          && (v79 = v279 * (uint64_t)(int)v78 * v278, v79 == (int)v79))
        {
          v77 = 1;
        }
        else
        {
          LODWORD(v79) = v279 * v78;
        }
        v80 = *(void (**)(uint64_t, uint64_t, double *, uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t))(v7 + 8 * (v277 & 7));
        v264[0] = v79;
        v264[1] = v77;
        v80(v280, v287, v269, v276, v297, v303[0], v264, v230);
        v82 = (unsigned int *)v298;
        if ((_QWORD)v298)
        {
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
            cv::Mat::deallocate((cv::Mat *)&v295, v81);
        }
        v297 = 0;
        *((_QWORD *)&v298 + 1) = 0;
        v299 = 0uLL;
        if (SHIDWORD(v295) >= 1)
        {
          v85 = 0;
          v86 = v301;
          do
            v86[v85++] = 0;
          while (v85 < SHIDWORD(v295));
        }
        *(_QWORD *)&v298 = 0;
        if (v302 != (cv *)v303)
          cv::fastFree((void **)v302, v81);
        goto LABEL_465;
      }
    }
  }
LABEL_62:
  v227 = v7;
  v37 = v285[-1].u32[1];
  if ((_DWORD)v37 != *(v274 - 1))
    goto LABEL_74;
  if ((_DWORD)v37 == 2)
  {
    if (v285->i32[0] != *v274 || v285->i32[1] != v274[1])
      goto LABEL_74;
  }
  else if ((int)v37 >= 1)
  {
    if (v285->i32[0] != *v274)
      goto LABEL_74;
    v38 = 0;
    do
    {
      if (v37 - 1 == v38)
        goto LABEL_73;
      v39 = v285->i32[v38 + 1];
      v40 = v274[++v38];
    }
    while (v39 == v40);
    if (v38 < v37)
      goto LABEL_74;
  }
LABEL_73:
  v41 = v277;
  if ((((unsigned __int16)v277 ^ (unsigned __int16)v266) & 0xFF8) == 0)
  {
    if (v17 != 0x20000
      || (v285->i32[0] != 4 ? (v73 = v285->i32[0] == 1) : (v73 = 1),
          !v73 ? (v74 = 0) : (v74 = 1),
          v285->i32[1] != 1 || (v74 & 1) == 0))
    {
      v49 = v266 & 7;
      if (v18 != 0x20000)
      {
        v48 = 0;
        v222 = 0;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_221;
        goto LABEL_215;
      }
      v48 = 0;
      v76 = *v274 == 4 || *v274 == 1;
      if (v274[1] != 1)
      {
        v222 = 0;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_221;
        goto LABEL_215;
      }
      v222 = 0;
      if (!v76)
      {
LABEL_214:
        if ((v9 & 0x80000000) == 0)
          goto LABEL_221;
        goto LABEL_215;
      }
    }
  }
LABEL_74:
  v42 = v266 & 0xFFF;
  if (SHIDWORD(v277) < 3)
  {
    v43 = v277;
    v45 = v278 != 1 && v279 != 1 || (v277 & 0x4000) == 0;
    if (!v45 && (v17 == 0x20000 || v18 != 0x20000))
    {
      v68 = (v42 >> 3) + 1;
      v69 = v285->i32[0];
      v70 = v285->i32[1];
      v71 = v70 == v68;
      if (v285->i32[0] != 1)
        v71 = 0;
      v72 = v69 == v68 || v285->i32[0] == 1;
      if (v70 != 1)
        v72 = 0;
      if (v72 || v71 || v70 == 1 && v69 == 4 && v42 <= 0x1F && (v277 & 0xFFF) == 6)
      {
        cv::swap((int *)&v277, (Mat *)&v266, v19);
        v222 = 1;
        goto LABEL_88;
      }
    }
  }
  else
  {
    v43 = v277;
  }
  if (SHIDWORD(v266) > 2
    || (v267 != 1 ? (v55 = v268 == 1) : (v55 = 1), !v55 || (v266 & 0x4000) == 0 || v17 == 0x20000 && v18 != 0x20000))
  {
LABEL_86:
    std::string::basic_string[abi:ne180100]<0>(v259, "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'");
    std::string::basic_string[abi:ne180100]<0>(v251, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v295, 4294967087, v259, v251, __p, 1295);
    cv::error((cv *)&v295, v46);
  }
  v222 = 0;
  v56 = (v43 >> 3) & 0x1FF;
  v57 = *v274;
  v58 = v274[1];
  v59 = v58 == v56 + 1;
  if (*v274 != 1)
    v59 = 0;
  v60 = v57 == v56 + 1 || *v274 == 1;
  if (v58 != 1)
    v60 = 0;
  if (!v60 && !v59)
  {
    if (v58 != 1 || v57 != 4 || v42 != 6 || v56 >= 4)
      goto LABEL_86;
    v222 = 0;
  }
LABEL_88:
  if ((v266 & 0xFFF) != 6 || v267 != 1 && v267 != 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v259, "src2.type() == CV_64F && (src2.rows == 4 || src2.rows == 1)");
    std::string::basic_string[abi:ne180100]<0>(v251, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v295, 4294967081, v259, v251, __p, 1297);
    cv::error((cv *)&v295, v47);
  }
  v41 = v277;
  if ((v5 & 1) != 0)
  {
    v48 = 1;
    v49 = 6;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_221;
  }
  else
  {
    v50 = v269;
    v51 = (((unint64_t)v277 >> 3) & 0x1FF) + 1;
    v52 = 0x7FFFFFFF;
    v53 = 0x80000000;
    while (1)
    {
      v54 = (uint64_t)rint(*v50);
      if (*v50 != (double)(int)v54)
        break;
      if (v53 <= (int)v54)
        v53 = v54;
      if (v52 >= (int)v54)
        v52 = v54;
      ++v50;
      if (!--v51)
      {
        if ((v52 & 0x80000000) == 0 && v53 < 256)
        {
          v49 = 0;
LABEL_213:
          v48 = 1;
          goto LABEL_214;
        }
        if (v52 >= -128 && v53 < 128)
        {
          v49 = 1;
          goto LABEL_213;
        }
        if (v52 < 0 || v53 >= 0x10000)
        {
          if (v53 >= 0x8000 || v52 <= -32769)
            v49 = 4;
          else
            v49 = 3;
          goto LABEL_213;
        }
        v48 = 1;
        v49 = 2;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_221;
        goto LABEL_215;
      }
    }
    if ((v277 & 7) == 5)
      v61 = 5;
    else
      v61 = 6;
    if ((v277 & 7u) >= 4)
      v49 = v61;
    else
      v49 = 5;
    v48 = 1;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_221;
  }
LABEL_215:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13))
  {
    LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, 0xFFFFFFFFLL);
  }
  else
  {
    if ((v48 & 1) == 0 && (((unsigned __int16)v266 ^ (unsigned __int16)v277) & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v259, "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified");
      std::string::basic_string[abi:ne180100]<0>(v251, "arithm_op");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(&v295, 4294967291, v259, v251, __p, 1321);
      cv::error((cv *)&v295, v88);
    }
    LOBYTE(v9) = v277;
  }
LABEL_221:
  v89 = v41 & 7;
  v90 = v9 & 7;
  if (v89 != (_DWORD)v49 || (v91 = (cv *)v49, v90 != v89))
  {
    if ((v5 & 1) != 0)
    {
      if (v49 <= v89)
        v92 = v41 & 7;
      else
        v92 = v49;
      if (v92 <= v90)
        v92 = v9 & 7;
      v93 = v92 > 5;
      v94 = 5;
    }
    else
    {
      if (v89 > 1 || v49 >= 2)
      {
        if (v89 <= v49)
          v92 = v49;
        else
          v92 = v41 & 7;
        if (v49 < 5 && v89 < 5)
          v92 = 4;
      }
      else
      {
        v92 = 3;
      }
      if (v92 <= v90)
        v92 = v9 & 7;
      if (v49 >= 5 && v89 >= 5)
        v94 = v92;
      else
        v94 = 4;
      v93 = v90 > 4;
    }
    if (v93)
      v91 = (cv *)v92;
    else
      v91 = (cv *)v94;
  }
  if (v89 == (_DWORD)v91)
    ConvertFunc = 0;
  else
    ConvertFunc = cv::getConvertFunc((cv *)(v41 & 7), (char)v91);
  v231 = (void (*)(uint64_t *, _QWORD, _QWORD, _QWORD, uint64_t *, _QWORD, _DWORD *, _QWORD))ConvertFunc;
  v224 = (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, _QWORD))ConvertFunc;
  if (v89 != (_DWORD)v49)
  {
    if ((_DWORD)v49 == (_DWORD)v91)
      v224 = 0;
    else
      v224 = (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, _QWORD))cv::getConvertFunc((cv *)v49, (char)v91);
  }
  if (v90 == (_DWORD)v91)
    v220 = 0;
  else
    v220 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))cv::getConvertFunc(v91, v9 & 7);
  v229 = ((v41 >> 3) & 0x1FF) + 1;
  v98 = 8 * v229 - 8;
  if (SHIDWORD(v277) < 1)
    v226 = 0;
  else
    v226 = *((_QWORD *)v286 + (HIDWORD(v277) - 1));
  v99 = v90 | v98;
  if (SHIDWORD(v266) < 1)
    v218 = 0;
  else
    v218 = *((_QWORD *)v275 + (HIDWORD(v266) - 1));
  v100 = (v98 >> 3) + 1;
  v263 = (cv *)(v100 << ((0xFA50u >> (2 * (v99 & 7))) & 3));
  v260 = &v259[8];
  v261 = (cv *)v262;
  v262[1] = 0;
  v262[0] = 0;
  *(_DWORD *)v259 = 1124007936;
  memset(&v259[4], 0, 60);
  if ((v221 & 1) != 0)
  {
    v101 = 0;
    v102 = 0;
    CopyMaskFunc = 0;
    goto LABEL_332;
  }
  (**(void (***)(uint64_t **__return_ptr, cv::Mat *, uint64_t))v214)(&v295, v214, 0xFFFFFFFFLL);
  v104 = (unsigned int *)v298;
  if ((_QWORD)v298)
  {
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 + 1, v104));
  }
  v106 = *(unsigned int **)&v259[24];
  if (*(_QWORD *)&v259[24])
  {
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
      cv::Mat::deallocate((cv::Mat *)v259, v103);
  }
  *(_QWORD *)&v259[16] = 0;
  memset(&v259[32], 0, 24);
  if (*(uint64_t *)v259 <= 0)
  {
    *(_QWORD *)&v259[24] = 0;
    *(_DWORD *)v259 = (_DWORD)v295;
  }
  else
  {
    v109 = 0;
    v110 = v260;
    do
      v110[v109++] = 0;
    while (v109 < *(int *)&v259[4]);
    *(_QWORD *)&v259[24] = 0;
    *(_DWORD *)v259 = (_DWORD)v295;
    if (*(int *)&v259[4] > 2)
      goto LABEL_285;
  }
  if (SHIDWORD(v295) > 2)
  {
LABEL_285:
    cv::Mat::copySize((cv::Mat *)v259, (const cv::Mat *)&v295);
    goto LABEL_286;
  }
  *(_DWORD *)&v259[4] = HIDWORD(v295);
  *(_QWORD *)&v259[8] = v296;
  v111 = v302;
  v112 = v261;
  *(_QWORD *)v261 = *(_QWORD *)v302;
  *((_QWORD *)v112 + 1) = *((_QWORD *)v111 + 1);
LABEL_286:
  v113 = (unsigned int *)v298;
  *(_OWORD *)&v259[24] = v298;
  *(_OWORD *)&v259[40] = v299;
  *(_QWORD *)&v259[16] = v297;
  *(_QWORD *)&v259[56] = v300;
  if ((_QWORD)v298)
  {
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
      cv::Mat::deallocate((cv::Mat *)&v295, v103);
  }
  v297 = 0;
  v299 = 0uLL;
  *((_QWORD *)&v298 + 1) = 0;
  if (SHIDWORD(v295) >= 1)
  {
    v116 = 0;
    v117 = v301;
    do
      v117[v116++] = 0;
    while (v116 < SHIDWORD(v295));
  }
  *(_QWORD *)&v298 = 0;
  if (v302 != (cv *)v303)
    cv::fastFree((void **)v302, v103);
  if ((*(_WORD *)v259 & 0xFFE) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v251, "(mask.type() == CV_8UC1 || mask.type() == CV_8SC1)");
    std::string::basic_string[abi:ne180100]<0>(__p, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(&v290, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v295, 4294967081, v251, __p, &v290, 1363);
    cv::error((cv *)&v295, v118);
  }
  v119 = *(v260 - 1);
  if ((_DWORD)v119 != v285[-1].i32[1])
    goto LABEL_308;
  if ((_DWORD)v119 == 2)
  {
    if (*v260 == v285->i32[0] && v260[1] == v285->i32[1])
      goto LABEL_309;
LABEL_308:
    std::string::basic_string[abi:ne180100]<0>(v251, "mask.size == src1.size");
    std::string::basic_string[abi:ne180100]<0>(__p, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(&v290, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v295, 4294967081, v251, __p, &v290, 1364);
    cv::error((cv *)&v295, v124);
  }
  if ((int)v119 >= 1)
  {
    if (*v260 != v285->i32[0])
      goto LABEL_308;
    v120 = 1;
    do
    {
      v121 = v120;
      if (v119 == v120)
        break;
      v122 = v260[v120];
      v123 = v285->i32[v120++];
    }
    while (v122 == v123);
    if (v121 < v119)
      goto LABEL_308;
  }
LABEL_309:
  CopyMaskFunc = cv::getCopyMaskFunc((unint64_t)v263);
  (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v13)(&v295, v13, 0xFFFFFFFFLL);
  v126 = *(v301 - 1);
  if ((_DWORD)v126 != v285[-1].i32[1])
    goto LABEL_320;
  if ((_DWORD)v126 == 2)
  {
    if (*v301 == v285->i32[0] && v301[1] == v285->i32[1])
      goto LABEL_321;
LABEL_320:
    v102 = 1;
    goto LABEL_322;
  }
  if ((int)v126 >= 1)
  {
    if (*v301 == v285->i32[0])
    {
      v127 = 0;
      while (v126 - 1 != v127)
      {
        v128 = v301[v127 + 1];
        v129 = v285->i32[++v127];
        if (v128 != v129)
        {
          if (v127 >= v126)
            goto LABEL_321;
          goto LABEL_320;
        }
      }
      goto LABEL_321;
    }
    goto LABEL_320;
  }
LABEL_321:
  v102 = ((unsigned __int16)v295 & 0xFFF) != v99;
LABEL_322:
  v130 = (unsigned int *)v298;
  if ((_QWORD)v298)
  {
    do
    {
      v131 = __ldaxr(v130);
      v132 = v131 - 1;
    }
    while (__stlxr(v132, v130));
    if (!v132)
      cv::Mat::deallocate((cv::Mat *)&v295, v125);
  }
  v297 = 0;
  *((_QWORD *)&v298 + 1) = 0;
  v299 = 0uLL;
  if (SHIDWORD(v295) >= 1)
  {
    v133 = 0;
    v134 = v301;
    do
      v134[v133++] = 0;
    while (v133 < SHIDWORD(v295));
  }
  *(_QWORD *)&v298 = 0;
  if (v302 != (cv *)v303)
    cv::fastFree((void **)v302, v125);
  v101 = v263;
LABEL_332:
  v215 = v98 & 0xFFFFFFF8 | v91 & 7;
  v135 = (v100 << ((0xFA50u >> (2 * (v91 & 7))) & 3));
  v295 = &v297;
  v296 = 4104;
  if (v231)
    v136 = (v100 << ((0xFA50u >> (2 * (v91 & 7))) & 3));
  else
    v136 = 0;
  if (v224)
    v137 = 1;
  else
    v137 = v48;
  if (v137)
    v138 = (v100 << ((0xFA50u >> (2 * (v91 & 7))) & 3));
  else
    v138 = 0;
  if (v220)
    v139 = (v100 << ((0xFA50u >> (2 * (v91 & 7))) & 3));
  else
    v139 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 144))(v13);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v13)(v251, v13, 0xFFFFFFFFLL);
  if (((v221 | !v102) & 1) == 0)
  {
    v248 = 0u;
    *(_OWORD *)__p = 0u;
    cv::Mat::operator=((uint64_t)v251, (int64x2_t *)__p);
  }
  v140 = v91 & 7;
  v141 = v221 ^ 1;
  v142 = (char *)v101 + v136 + v139 + v138;
  v228 = *(void (**)(_BYTE *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD))(v227 + 8 * v140);
  v143 = (unsigned __int16)(v135 + 1023) / (unsigned __int16)v135;
  if ((v48 & 1) != 0)
  {
    v290 = (cv::Mat *)&v277;
    v291 = v251;
    v292 = (void **)v259;
    v293 = 0;
    v288 = 0uLL;
    *(_QWORD *)&v289 = 0;
    cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v290, (unsigned __int8 **)&v288, -1);
    v144 = v250;
    if ((unint64_t)v250 < v143)
      v143 = (unint64_t)v250;
    v145 = v143 * (_QWORD)v142 + 64;
    v146 = v295;
    if (v296 < v145)
    {
      if (v295 != &v297)
      {
        if (v295)
          MEMORY[0x2207351A4](v295, 0x1000C8077774924);
        v295 = &v297;
      }
      v296 = v145;
      v146 = &v297;
      if (v145 >= 0x1009)
      {
        v146 = (uint64_t *)operator new[]();
        v295 = v146;
      }
    }
    v147 = v143 * v135;
    if (v231)
      v148 = (_BYTE *)(((unint64_t)v146 + v143 * v135 + 15) & 0xFFFFFFFFFFFFFFF0);
    else
      v148 = v146;
    cv::convertAndUnrollScalar((cv *)&v266, (const cv::Mat *)v215, v148, (unsigned __int8 *)v143);
    v149 = 0;
    v225 = (unint64_t)&v148[v147 + 15] & 0xFFFFFFFFFFFFFFF0;
    v219 = (v225 + v147 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (v220)
      v141 = 1;
    while (1)
    {
      if ((unint64_t)v149 >= v249)
        goto LABEL_442;
      v216 = v149;
      if (v144)
        break;
LABEL_385:
      v149 = (cv::Mat *)((char *)v216 + 1);
      cv::NAryMatIterator::operator++((uint64_t)__p);
    }
    v150 = 0;
    v152 = *((_QWORD *)&v288 + 1);
    v151 = (uint64_t *)v288;
    while (1)
    {
      if ((unint64_t)&v144[-v150] >= v143)
        v153 = v143;
      else
        v153 = (unint64_t)&v144[-v150];
      if (v231)
      {
        v238[0] = v229 * v153;
        v238[1] = 1;
        v231(v151, 0, 0, 0, v146, 0, v238, 0);
        v151 = v146;
      }
      if (v222)
        v154 = v148;
      else
        v154 = v151;
      if (v222)
        v155 = v151;
      else
        v155 = (uint64_t *)v148;
      if ((v141 & 1) != 0)
      {
        v236[0] = v229 * v153;
        v236[1] = 1;
        ((void (*)(_BYTE *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD, _DWORD *, uint64_t))v228)(v154, 0, v155, 0, v225, 0, v236, v230);
        if (!v221)
        {
          if (v220)
          {
            v233[0] = v229 * v153;
            v233[1] = 1;
            ((void (*)(unint64_t, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, _QWORD))v220)(v225, 0, 0, 0, v219, 0, v233, 0);
            v158 = v289;
            v232 = v153;
            v159 = &v232;
            v160 = v219;
          }
          else
          {
            v158 = v289;
            v234 = v153;
            v159 = &v234;
            v160 = v225;
          }
          v159[1] = 1;
          ((void (*)(unint64_t, _QWORD, uint64_t, _QWORD, unint64_t, _QWORD))CopyMaskFunc)(v160, 0, v158, 0, v152, 0);
          *(_QWORD *)&v289 = v289 + v153;
          goto LABEL_384;
        }
        v155 = 0;
        v235 = v229 * v153;
        v156 = &v235;
        v154 = (_BYTE *)v225;
        v157 = (void (*)(_BYTE *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD))v220;
      }
      else
      {
        v237 = v229 * v153;
        v156 = &v237;
        v157 = v228;
      }
      v156[1] = 1;
      v157(v154, 0, v155, 0, v152, 0);
LABEL_384:
      v151 = (uint64_t *)(v288 + v153 * v226);
      v152 = *((_QWORD *)&v288 + 1) + (_QWORD)v263 * v153;
      *(_QWORD *)&v288 = v151;
      *((_QWORD *)&v288 + 1) = v152;
      v150 += v143;
      if (v150 >= (unint64_t)v144)
        goto LABEL_385;
    }
  }
  v290 = (cv::Mat *)&v277;
  v291 = (void **)&v266;
  v292 = v251;
  v293 = v259;
  v294 = 0;
  v288 = 0u;
  v289 = 0u;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v290, (unsigned __int8 **)&v288, -1);
  if (v231)
    v161 = 1;
  else
    v161 = v221 ^ 1;
  if (v224)
    v161 = 1;
  if (v220)
    v161 = 1;
  if ((unint64_t)v250 >= v143)
    v162 = (unsigned __int8 *)((unsigned __int16)(v135 + 1023) / (unsigned __int16)v135);
  else
    v162 = v250;
  v223 = v250;
  if (v161)
    v163 = v162;
  else
    v163 = v250;
  v164 = (_QWORD)v163 * (_QWORD)v142 + 64;
  v165 = v295;
  if (v296 >= v164)
  {
    v166 = v231;
  }
  else
  {
    v166 = v231;
    if (v295 != &v297)
    {
      if (v295)
        MEMORY[0x2207351A4](v295, 0x1000C8077774924);
      v295 = &v297;
    }
    v296 = v164;
    v165 = &v297;
    if (v164 >= 0x1009)
    {
      v165 = (uint64_t *)operator new[]();
      v295 = v165;
    }
  }
  v167 = 0;
  v168 = (_QWORD)v163 * v135;
  v169 = ((unint64_t)v165 + (_QWORD)v163 * v135 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (!v166)
    v169 = (unint64_t)v165;
  v170 = (v169 + v168 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v224)
  {
    v171 = v169;
  }
  else
  {
    v170 = v169;
    v171 = 0;
  }
  v213 = v170;
  v210 = (v170 + v168 + 15) & 0xFFFFFFFFFFFFFFF0;
  v211 = v171;
  if (v220)
    v172 = 1;
  else
    v172 = v221 ^ 1;
  v217 = v172;
  while (v167 < v249)
  {
    v209 = v167;
    if (v223)
    {
      v173 = 0;
      v175 = (_QWORD *)*((_QWORD *)&v288 + 1);
      v174 = (_QWORD *)v288;
      v176 = v223;
      v177 = v289;
      do
      {
        v178 = (unsigned __int8 *)(v176 - v163);
        if (v176 >= v163)
          v179 = (int)v163;
        else
          v179 = (int)v176;
        if (v166)
        {
          v246[0] = v229 * v179;
          v246[1] = 1;
          v166(v174, 0, 0, 0, v165, 0, v246, 0);
          v180 = (_QWORD *)*((_QWORD *)&v288 + 1);
          v174 = (_QWORD *)v288;
          v181 = v165;
        }
        else
        {
          v180 = v175;
          v181 = v174;
        }
        if (v174 == v180)
          v182 = v181;
        else
          v182 = v175;
        if (v174 != v180 && v224)
        {
          v245[0] = v229 * v179;
          v245[1] = 1;
          v224(v175, 0, 0, 0, v211, 0, v245, 0);
          v182 = (uint64_t *)v211;
        }
        if ((v217 & 1) != 0)
        {
          v243[0] = v229 * v179;
          v243[1] = 1;
          ((void (*)(uint64_t *, _QWORD, uint64_t *, _QWORD, unint64_t, _QWORD, _DWORD *, uint64_t))v228)(v181, 0, v182, 0, v213, 0, v243, v230);
          if (!v221)
          {
            if (v220)
            {
              v240[0] = v229 * v179;
              v240[1] = 1;
              ((void (*)(unint64_t, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, _QWORD))v220)(v213, 0, 0, 0, v210, 0, v240, 0);
              v185 = *((_QWORD *)&v289 + 1);
              v239 = v179;
              v186 = &v239;
              v187 = v210;
            }
            else
            {
              v185 = *((_QWORD *)&v289 + 1);
              v241 = v179;
              v186 = &v241;
              v187 = v213;
            }
            v186[1] = 1;
            ((void (*)(unint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))CopyMaskFunc)(v187, 0, v185, 0, v177, 0);
            *((_QWORD *)&v289 + 1) += v179;
            goto LABEL_440;
          }
          v182 = 0;
          v242 = v229 * v179;
          v183 = &v242;
          v181 = (_QWORD *)v213;
          v184 = (void (*)(_QWORD *, _QWORD, _QWORD *, _QWORD, uint64_t, _QWORD))v220;
        }
        else
        {
          v244 = v229 * v179;
          v183 = &v244;
          v184 = (void (*)(_QWORD *, _QWORD, _QWORD *, _QWORD, uint64_t, _QWORD))v228;
        }
        v183[1] = 1;
        v184(v181, 0, v182, 0, v177, 0);
LABEL_440:
        v174 = (_QWORD *)(v288 + v179 * v226);
        v175 = (_QWORD *)(*((_QWORD *)&v288 + 1) + v179 * v218);
        *(_QWORD *)&v288 = v174;
        *((_QWORD *)&v288 + 1) = v175;
        v177 = v289 + (_QWORD)v263 * v179;
        *(_QWORD *)&v289 = v177;
        v173 += (unint64_t)v163;
        v176 = v178;
        v166 = v231;
      }
      while (v173 < (unint64_t)v223);
    }
    v167 = v209 + 1;
    cv::NAryMatIterator::operator++((uint64_t)__p);
  }
LABEL_442:
  v188 = v252;
  if (v252)
  {
    do
    {
      v189 = __ldaxr(v188);
      v190 = v189 - 1;
    }
    while (__stlxr(v190, v188));
    if (!v190)
      cv::Mat::deallocate((cv::Mat *)v251, v81);
  }
  v251[2] = 0;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  if (SHIDWORD(v251[0]) >= 1)
  {
    v191 = 0;
    v192 = v256;
    do
      *(_DWORD *)(v192 + 4 * v191++) = 0;
    while (v191 < SHIDWORD(v251[0]));
  }
  v252 = 0;
  if (v257 != (cv *)&v258)
    cv::fastFree((void **)v257, v81);
  if (v295 != &v297 && v295 != 0)
    MEMORY[0x2207351A4]();
  v194 = *(unsigned int **)&v259[24];
  if (*(_QWORD *)&v259[24])
  {
    do
    {
      v195 = __ldaxr(v194);
      v196 = v195 - 1;
    }
    while (__stlxr(v196, v194));
    if (!v196)
      cv::Mat::deallocate((cv::Mat *)v259, v81);
  }
  *(_QWORD *)&v259[16] = 0;
  memset(&v259[32], 0, 24);
  if (*(int *)&v259[4] >= 1)
  {
    v197 = 0;
    v198 = v260;
    do
      v198[v197++] = 0;
    while (v197 < *(int *)&v259[4]);
  }
  *(_QWORD *)&v259[24] = 0;
  if (v261 != (cv *)v262)
    cv::fastFree((void **)v261, v81);
LABEL_465:
  v199 = v270;
  if (v270)
  {
    do
    {
      v200 = __ldaxr(v199);
      v201 = v200 - 1;
    }
    while (__stlxr(v201, v199));
    if (!v201)
      cv::Mat::deallocate((cv::Mat *)&v266, v81);
  }
  v269 = 0;
  v271 = 0;
  v273 = 0;
  v272 = 0;
  if (SHIDWORD(v266) >= 1)
  {
    v202 = 0;
    v203 = v274;
    do
      v203[v202++] = 0;
    while (v202 < SHIDWORD(v266));
  }
  v270 = 0;
  if (v275 != (cv *)&v276)
    cv::fastFree((void **)v275, v81);
  v204 = v281;
  if (v281)
  {
    do
    {
      v205 = __ldaxr(v204);
      v206 = v205 - 1;
    }
    while (__stlxr(v206, v204));
    if (!v206)
      cv::Mat::deallocate((cv::Mat *)&v277, v81);
  }
  v280 = 0;
  v282 = 0;
  v284 = 0;
  v283 = 0;
  if (SHIDWORD(v277) >= 1)
  {
    v207 = 0;
    v208 = v285;
    do
      v208->i32[v207++] = 0;
    while (v207 < SHIDWORD(v277));
  }
  v281 = 0;
  if (v286 != (cv *)&v287)
    cv::fastFree((void **)v286, v81);
}

void sub_219E381CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a72;
  void *v73;
  void *v74;

  cv::Exception::~Exception((cv::Exception *)&STACK[0x340]);
  if (a48 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(a55);
  if (a72 < 0)
    operator delete(a70);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x230], v73);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x290], v74);
  _Unwind_Resume(a1);
}

void cv::subtract(uint64_t this, uint64_t a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
  cv::arithm_op(this, a2);
}

void cv::absdiff(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)a2);
}

void cv::multiply(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, double a5)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)a2);
}

void cv::divide(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, double a5)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)a2);
}

void cv::divide(cv *this, double a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)this);
}

void cv::addWeighted(cv *this, const cv::_InputArray *a2, double a3, const cv::_InputArray *a4, double a5, double a6, const cv::_OutputArray *a7)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)a2);
}

void cv::compare(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (***v9)(uint64_t *__return_ptr, _QWORD, uint64_t);
  unsigned int v10;
  const cv::Exception *v11;
  int v12;
  int v13;
  Mat *v14;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  BOOL v33;
  int v34;
  const cv::Exception *v35;
  char v36;
  char v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v50;
  BOOL v51;
  char v52;
  void **v53;
  void **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  _DWORD *v67;
  void **v68;
  void **v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  const cv::Mat *v81;
  unint64_t v82;
  uint64_t (*v83)();
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  void *v87;
  unint64_t i;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  void (*ConvertFunc)(uint64_t, _QWORD, _QWORD, _QWORD, double *, _QWORD, uint64_t *, _QWORD);
  BOOL v97;
  double v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t (*v117)();
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t *v128;
  int v129;
  _DWORD v130[2];
  int v131;
  uint64_t v132;
  double v133;
  _DWORD v134[2];
  void *__p[3];
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  cv *v141;
  uint64_t v142;
  _DWORD v143[2];
  _DWORD v144[2];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _DWORD *v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _DWORD *v160;
  void **v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  double v165;
  double v166;
  int *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  void **v172;
  int64x2_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  unsigned __int8 *v182[507];
  unsigned __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unsigned __int8 *v188;
  uint64_t v189;
  cv::Mat *v190[6];

  v4 = MEMORY[0x24BDAC7A8](this, a2);
  v6 = v5;
  v8 = v7;
  v9 = (void (***)(uint64_t *__return_ptr, _QWORD, uint64_t))v4;
  v190[3] = *(cv::Mat **)MEMORY[0x24BDAC8D0];
  v163 = v10;
  if (v10 >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v154, "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT");
    std::string::basic_string[abi:ne180100]<0>(&v145, "compare");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v174, 4294967081, &v154, &v145, __p, 2464);
    cv::error((cv *)&v174, v11);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  (**v9)(&v154, v9, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v145, v8, 0xFFFFFFFFLL);
  v16 = v12 == v13 && SHIDWORD(v154) <= 2 && SHIDWORD(v145) <= 2;
  if (!v16
    || ((v17 = *v160, v160[1] == v151[1]) ? (v18 = v17 == *v151) : (v18 = 0),
        !v18 || (((unsigned __int16)v145 ^ (unsigned __int16)v154) & 0xFFF) != 0))
  {
    v19 = v12 == 0x20000;
    if (v13 == 0x20000)
      ++v19;
    if (v19 != 1)
    {
      v20 = *(v160 - 1);
      if ((_DWORD)v20 == *(v151 - 1))
      {
        if ((_DWORD)v20 == 2)
        {
          if (*v160 != *v151 || v160[1] != v151[1])
            goto LABEL_32;
        }
        else if ((int)v20 >= 1)
        {
          if (*v160 != *v151)
            goto LABEL_32;
          v21 = 0;
          while (v20 - 1 != v21)
          {
            v22 = v160[v21 + 1];
            v23 = v151[++v21];
            if (v22 != v23)
            {
              if (v21 < v20)
                goto LABEL_32;
              break;
            }
          }
        }
        if ((((unsigned __int16)v145 ^ (unsigned __int16)v154) & 0xFFF) == 0)
        {
          v52 = 0;
          goto LABEL_64;
        }
      }
    }
LABEL_32:
    v24 = v145 & 0xFFF;
    if (SHIDWORD(v154) < 3)
    {
      v25 = v154;
      if (HIDWORD(v155) == 1 || (_DWORD)v155 == 1)
      {
        v27 = v12 != 0x20000 && v13 == 0x20000;
        v28 = v27;
        if ((v154 & 0x4000) != 0 && !v28)
        {
          v29 = (v24 >> 3) + 1;
          v30 = *v160;
          v31 = v160[1];
          v32 = v31 == v29;
          if (*v160 != 1)
            v32 = 0;
          v33 = v30 == v29 || *v160 == 1;
          if (v31 != 1)
            v33 = 0;
          if (v33 || v32 || v31 == 1 && v30 == 4 && v24 <= 0x1F && (v154 & 0xFFF) == 6)
          {
            cv::swap((int *)&v154, (Mat *)&v145, v14);
            v34 = v163;
            if ((v163 - 2) >= 3)
            {
              if (v163 == 1)
                v34 = 3;
            }
            else
            {
              v34 = dword_219EA08E0[v163 - 2];
            }
            v163 = v34;
            v52 = 1;
LABEL_64:
            v36 = v154;
            v37 = v145;
            (*(void (**)(uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 144))(v6, HIDWORD(v154), v160, v154 & 0xFF8, 0xFFFFFFFFLL, 0, 0);
            cv::Mat::reshape((cv::Mat *)&v154, 1, 0, (unsigned int *)&v174);
            v39 = (unsigned int *)v177;
            if ((_QWORD)v177)
            {
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 + 1, v39));
            }
            v41 = (unsigned int *)v157;
            if ((_QWORD)v157)
            {
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
                cv::Mat::deallocate((cv::Mat *)&v154, v38);
            }
            v156 = 0;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            if (v154 <= 0)
            {
              *(_QWORD *)&v157 = 0;
              LODWORD(v154) = (_DWORD)v174;
            }
            else
            {
              v44 = 0;
              v45 = v160;
              do
                v45[v44++] = 0;
              while (v44 < SHIDWORD(v154));
              *(_QWORD *)&v157 = 0;
              LODWORD(v154) = (_DWORD)v174;
              if (SHIDWORD(v154) > 2)
                goto LABEL_100;
            }
            if (SHIDWORD(v174) <= 2)
            {
              HIDWORD(v154) = HIDWORD(v174);
              v155 = v175;
              v53 = v181;
              v54 = v161;
              *v161 = *v181;
              v54[1] = v53[1];
LABEL_101:
              v156 = v176;
              v55 = (unsigned int *)v177;
              v158 = v178;
              v157 = v177;
              v159 = v179;
              if ((_QWORD)v177)
              {
                do
                {
                  v56 = __ldaxr(v55);
                  v57 = v56 - 1;
                }
                while (__stlxr(v57, v55));
                if (!v57)
                  cv::Mat::deallocate((cv::Mat *)&v174, v38);
              }
              v176 = 0;
              v178 = 0uLL;
              *((_QWORD *)&v177 + 1) = 0;
              if (SHIDWORD(v174) >= 1)
              {
                v58 = 0;
                v59 = v180;
                do
                  *(_DWORD *)(v59 + 4 * v58++) = 0;
                while (v58 < SHIDWORD(v174));
              }
              *(_QWORD *)&v177 = 0;
              if (v181 != (void **)v182)
                cv::fastFree(v181, v38);
              cv::Mat::reshape((cv::Mat *)&v145, 1, 0, (unsigned int *)&v174);
              v61 = (unsigned int *)v177;
              if ((_QWORD)v177)
              {
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 + 1, v61));
              }
              v63 = (unsigned int *)v148;
              if ((_QWORD)v148)
              {
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                  cv::Mat::deallocate((cv::Mat *)&v145, v60);
              }
              v147 = 0;
              v149 = 0uLL;
              *((_QWORD *)&v148 + 1) = 0;
              if (v145 <= 0)
              {
                *(_QWORD *)&v148 = 0;
                LODWORD(v145) = (_DWORD)v174;
              }
              else
              {
                v66 = 0;
                v67 = v151;
                do
                  v67[v66++] = 0;
                while (v66 < SHIDWORD(v145));
                *(_QWORD *)&v148 = 0;
                LODWORD(v145) = (_DWORD)v174;
                if (SHIDWORD(v145) > 2)
                  goto LABEL_124;
              }
              if (SHIDWORD(v174) <= 2)
              {
                HIDWORD(v145) = HIDWORD(v174);
                v146 = v175;
                v68 = v181;
                v69 = v152;
                *v152 = *v181;
                v69[1] = v68[1];
LABEL_125:
                v147 = v176;
                v70 = (unsigned int *)v177;
                v149 = v178;
                v148 = v177;
                v150 = v179;
                if ((_QWORD)v177)
                {
                  do
                  {
                    v71 = __ldaxr(v70);
                    v72 = v71 - 1;
                  }
                  while (__stlxr(v72, v70));
                  if (!v72)
                    cv::Mat::deallocate((cv::Mat *)&v174, v60);
                }
                v176 = 0;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                if (SHIDWORD(v174) >= 1)
                {
                  v73 = 0;
                  v74 = v180;
                  do
                    *(_DWORD *)(v74 + 4 * v73++) = 0;
                  while (v73 < SHIDWORD(v174));
                }
                *(_QWORD *)&v177 = 0;
                if (v181 != (void **)v182)
                  cv::fastFree(v181, v60);
                (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v6)(&v174, v6, 0xFFFFFFFFLL);
                cv::Mat::reshape((cv::Mat *)&v174, 1, 0, (unsigned int *)__p);
                v76 = (unsigned int *)v177;
                if ((_QWORD)v177)
                {
                  do
                  {
                    v77 = __ldaxr(v76);
                    v78 = v77 - 1;
                  }
                  while (__stlxr(v78, v76));
                  if (!v78)
                    cv::Mat::deallocate((cv::Mat *)&v174, v75);
                }
                v176 = 0;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                if (SHIDWORD(v174) >= 1)
                {
                  v79 = 0;
                  v80 = v180;
                  do
                    *(_DWORD *)(v80 + 4 * v79++) = 0;
                  while (v79 < SHIDWORD(v174));
                }
                *(_QWORD *)&v177 = 0;
                if (v181 != (void **)v182)
                  cv::fastFree(v181, v75);
                v81 = (const cv::Mat *)(v36 & 7);
                if (SHIDWORD(v154) < 1)
                  v82 = 0;
                else
                  v82 = (unint64_t)v161[HIDWORD(v154) - 1];
                v83 = cv::getCmpFunc(int)::cmpTab[(_QWORD)v81];
                if ((v52 & 1) == 0)
                {
                  *(_QWORD *)&v164 = &v154;
                  *((_QWORD *)&v164 + 1) = &v145;
                  v165 = COERCE_DOUBLE(__p);
                  v166 = 0.0;
                  v183 = 0;
                  v184 = 0;
                  v185 = 0;
                  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v174, (const cv::Mat **)&v164, &v183, -1);
                  v93 = v178;
                  v94 = -1;
                  while ((unint64_t)++v94 < *((_QWORD *)&v177 + 1))
                  {
                    v134[0] = v93;
                    v134[1] = 1;
                    ((void (*)(unsigned __int8 *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, int *))v83)(v183, 0, v184, 0, v185, 0, v134, &v163);
                    cv::NAryMatIterator::operator++((uint64_t)&v174);
                  }
LABEL_186:
                  v99 = v136;
                  if (v136)
                  {
                    do
                    {
                      v100 = __ldaxr(v99);
                      v101 = v100 - 1;
                    }
                    while (__stlxr(v101, v99));
                    if (!v101)
                      cv::Mat::deallocate((cv::Mat *)__p, v87);
                  }
                  __p[2] = 0;
                  v137 = 0;
                  v138 = 0;
                  v139 = 0;
                  if (SHIDWORD(__p[0]) >= 1)
                  {
                    v102 = 0;
                    v103 = v140;
                    do
                      *(_DWORD *)(v103 + 4 * v102++) = 0;
                    while (v102 < SHIDWORD(__p[0]));
                  }
                  v136 = 0;
                  if (v141 != (cv *)&v142)
                    cv::fastFree((void **)v141, v87);
                  goto LABEL_195;
                }
                v190[0] = (cv::Mat *)&v154;
                v190[1] = (cv::Mat *)__p;
                v190[2] = 0;
                v188 = 0;
                v189 = 0;
                cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v183, v190, &v188, -1);
                v84 = v187;
                if ((v82 + 1023) / v82 >= v187)
                  v85 = v187;
                else
                  v85 = (v82 + 1023) / v82;
                v86 = &v176;
                v174 = &v176;
                v175 = 4104;
                if (v85 * v82 >= 0x1009)
                {
                  v175 = v85 * v82;
                  v86 = (uint64_t *)operator new[]();
                  v174 = v86;
                }
                if (v81 >= 5)
                {
                  cv::convertAndUnrollScalar((cv *)&v145, v81, v86, (unsigned __int8 *)v85);
LABEL_154:
                  for (i = 0; i < v186; ++i)
                  {
                    if (v84)
                    {
                      v89 = 0;
                      v90 = v188;
                      v91 = v189;
                      do
                      {
                        if (v84 - v89 >= v85)
                          v92 = v85;
                        else
                          v92 = v84 - v89;
                        v130[0] = v92;
                        v130[1] = 1;
                        ((void (*)(unsigned __int8 *, _QWORD, uint64_t *, _QWORD, uint64_t, _QWORD, _DWORD *, int *))v83)(v90, 0, v86, 0, v91, 0, v130, &v163);
                        v90 = &v188[v92 * v82];
                        v91 = v189 + v92;
                        v188 = v90;
                        v189 = v91;
                        v89 += v85;
                      }
                      while (v89 < v84);
                    }
                    cv::NAryMatIterator::operator++((uint64_t)&v183);
                  }
                  if (v174 != &v176 && v174 != 0)
                    MEMORY[0x2207351A4]();
                  goto LABEL_186;
                }
                v133 = 0.0;
                ConvertFunc = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, double *, _QWORD, uint64_t *, _QWORD))cv::getConvertFunc((cv *)(v37 & 7), 6);
                v132 = 0x100000001;
                ConvertFunc(v147, 0, 0, 0, &v133, 0, &v132, 0);
                if (v133 >= cv::getMinVal(int)::tab[(_QWORD)v81])
                {
                  if (v133 <= cv::getMaxVal(int)::tab[(_QWORD)v81])
                  {
                    v131 = (uint64_t)rint(v133);
                    if (v133 != (double)v131)
                    {
                      if ((v163 & 0xFFFFFFFE) == 2)
                      {
                        v123 = (int)v133;
                        if (v133 > (double)(int)v133)
                          ++v123;
                      }
                      else
                      {
                        if (v163 != 4 && v163 != 1)
                        {
                          if (v163 == 5)
                            v129 = 255;
                          else
                            v129 = 0;
                          *(double *)&v164 = (double)v129;
                          *((double *)&v164 + 1) = (double)v129;
                          v165 = (double)v129;
                          v166 = (double)v129;
                          cv::Mat::operator=((uint64_t)__p, (int64x2_t *)&v164);
LABEL_183:
                          if (v174 != &v176 && v174)
                            MEMORY[0x2207351A4](v174, 0x1000C8077774924);
                          goto LABEL_186;
                        }
                        v123 = (int)v133 - (v133 < (double)(int)v133);
                      }
                      v131 = v123;
                    }
                    v165 = COERCE_DOUBLE(&v131);
                    v166 = 0.0;
                    v167 = &v131;
                    v170 = 0;
                    v171 = (uint64_t *)&v164 + 1;
                    v172 = (void **)&v173;
                    v164 = xmmword_219EA0830;
                    v173 = vdupq_n_s64(4uLL);
                    v168 = &v132;
                    v169 = &v132;
                    cv::convertAndUnrollScalar((cv *)&v164, v81, v86, (unsigned __int8 *)v85);
                    v124 = *(unsigned int **)&v166;
                    if (v166 != 0.0)
                    {
                      do
                      {
                        v125 = __ldaxr(v124);
                        v126 = v125 - 1;
                      }
                      while (__stlxr(v126, v124));
                      if (!v126)
                        cv::Mat::deallocate((cv::Mat *)&v164, v87);
                    }
                    v165 = 0.0;
                    v168 = 0;
                    v169 = 0;
                    v167 = 0;
                    if (SDWORD1(v164) >= 1)
                    {
                      v127 = 0;
                      v128 = v171;
                      do
                        *((_DWORD *)v128 + v127++) = 0;
                      while (v127 < SDWORD1(v164));
                    }
                    v166 = 0.0;
                    if (v172 != (void **)&v173)
                      cv::fastFree(v172, v87);
                    goto LABEL_154;
                  }
                  v98 = 255.0;
                  if ((v163 - 3) >= 3)
                    v98 = 0.0;
                }
                else
                {
                  v97 = (v163 - 1) < 2 || v163 == 5;
                  v98 = 255.0;
                  if (!v97)
                    v98 = 0.0;
                }
                *(double *)&v164 = v98;
                *((double *)&v164 + 1) = v98;
                v165 = v98;
                v166 = v98;
                cv::Mat::operator=((uint64_t)__p, (int64x2_t *)&v164);
                goto LABEL_183;
              }
LABEL_124:
              cv::Mat::copySize((cv::Mat *)&v145, (const cv::Mat *)&v174);
              goto LABEL_125;
            }
LABEL_100:
            cv::Mat::copySize((cv::Mat *)&v154, (const cv::Mat *)&v174);
            goto LABEL_101;
          }
        }
      }
    }
    else
    {
      v25 = v154;
    }
    if (SHIDWORD(v145) > 2)
      goto LABEL_63;
    v46 = (_DWORD)v146 == 1 || HIDWORD(v146) == 1;
    if (!v46 || (v145 & 0x4000) == 0 || v12 == 0x20000 && v13 != 0x20000)
      goto LABEL_63;
    v47 = (v25 >> 3) & 0x1FF;
    v48 = *v151;
    v49 = v151[1];
    v50 = v49 == v47 + 1;
    if (*v151 != 1)
      v50 = 0;
    v51 = v48 == v47 + 1 || *v151 == 1;
    if (v49 != 1)
      v51 = 0;
    v52 = 1;
    if (!v51 && !v50 && (v49 != 1 || v48 != 4 || v24 != 6 || v47 >= 4))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(__p, "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'");
      std::string::basic_string[abi:ne180100]<0>(&v164, "compare");
      std::string::basic_string[abi:ne180100]<0>(&v183, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(&v174, 4294967087, __p, &v164, &v183, 2494);
      cv::error((cv *)&v174, v35);
    }
    goto LABEL_64;
  }
  v144[0] = v160[1];
  v144[1] = v17;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 128))(v6, v144, v154 & 0xFF8, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v6)(&v174, v6, 0xFFFFFFFFLL);
  v114 = v155;
  v115 = (((unint64_t)v154 >> 3) & 0x1FF) + 1;
  if ((v154 & v145 & v174 & 0x4000) != 0
    && (v116 = SHIDWORD(v155) * (uint64_t)(int)v115 * (int)v155, v116 == (int)v116))
  {
    v114 = 1;
  }
  else
  {
    LODWORD(v116) = HIDWORD(v155) * v115;
  }
  v117 = cv::getCmpFunc(int)::cmpTab[v154 & 7];
  v143[0] = v116;
  v143[1] = v114;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _DWORD *, int *))v117)(v156, v162, v147, v153, v176, v182[0], v143, &v163);
  v118 = (unsigned int *)v177;
  if ((_QWORD)v177)
  {
    do
    {
      v119 = __ldaxr(v118);
      v120 = v119 - 1;
    }
    while (__stlxr(v120, v118));
    if (!v120)
      cv::Mat::deallocate((cv::Mat *)&v174, v87);
  }
  v176 = 0;
  v178 = 0uLL;
  *((_QWORD *)&v177 + 1) = 0;
  if (SHIDWORD(v174) >= 1)
  {
    v121 = 0;
    v122 = v180;
    do
      *(_DWORD *)(v122 + 4 * v121++) = 0;
    while (v121 < SHIDWORD(v174));
  }
  *(_QWORD *)&v177 = 0;
  if (v181 != (void **)v182)
    cv::fastFree(v181, v87);
LABEL_195:
  v104 = (unsigned int *)v148;
  if ((_QWORD)v148)
  {
    do
    {
      v105 = __ldaxr(v104);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, v104));
    if (!v106)
      cv::Mat::deallocate((cv::Mat *)&v145, v87);
  }
  v147 = 0;
  v149 = 0uLL;
  *((_QWORD *)&v148 + 1) = 0;
  if (SHIDWORD(v145) >= 1)
  {
    v107 = 0;
    v108 = v151;
    do
      v108[v107++] = 0;
    while (v107 < SHIDWORD(v145));
  }
  *(_QWORD *)&v148 = 0;
  if (v152 != (void **)&v153)
    cv::fastFree(v152, v87);
  v109 = (unsigned int *)v157;
  if ((_QWORD)v157)
  {
    do
    {
      v110 = __ldaxr(v109);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v109));
    if (!v111)
      cv::Mat::deallocate((cv::Mat *)&v154, v87);
  }
  v156 = 0;
  v158 = 0uLL;
  *((_QWORD *)&v157 + 1) = 0;
  if (SHIDWORD(v154) >= 1)
  {
    v112 = 0;
    v113 = v160;
    do
      v113[v112++] = 0;
    while (v112 < SHIDWORD(v154));
  }
  *(_QWORD *)&v157 = 0;
  if (v161 != (void **)&v162)
    cv::fastFree(v161, v87);
}

void sub_219E3954C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  void *v70;
  void *v71;

  if (a68 != a10 && a68 != 0)
    MEMORY[0x2207351A4]();
  cv::Mat::~Mat((cv::Mat *)&__p, a2);
  cv::Mat::~Mat((cv::Mat *)&a30, v70);
  cv::Mat::~Mat((cv::Mat *)&a42, v71);
  _Unwind_Resume(a1);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAnd<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = *(_BYTE *)(a3 + v10) & *(_BYTE *)(result + v10);
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = *(_BYTE *)(a3 + v10 - 1) & *(_BYTE *)(result + v10 - 1);
          *v12 = v11;
          v13 = *(_BYTE *)(a3 + v10 + 2) & *(_BYTE *)(result + v10 + 2);
          v12[1] = *(_BYTE *)(a3 + v10 + 1) & *(_BYTE *)(result + v10 + 1);
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = *(_BYTE *)(a3 + v9) & *(_BYTE *)(result + v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpOr<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = *(_BYTE *)(a3 + v10) | *(_BYTE *)(result + v10);
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = *(_BYTE *)(a3 + v10 - 1) | *(_BYTE *)(result + v10 - 1);
          *v12 = v11;
          v13 = *(_BYTE *)(a3 + v10 + 2) | *(_BYTE *)(result + v10 + 2);
          v12[1] = *(_BYTE *)(a3 + v10 + 1) | *(_BYTE *)(result + v10 + 1);
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = *(_BYTE *)(a3 + v9) | *(_BYTE *)(result + v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpXor<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = *(_BYTE *)(a3 + v10) ^ *(_BYTE *)(result + v10);
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = *(_BYTE *)(a3 + v10 - 1) ^ *(_BYTE *)(result + v10 - 1);
          *v12 = v11;
          v13 = *(_BYTE *)(a3 + v10 + 2) ^ *(_BYTE *)(result + v10 + 2);
          v12[1] = *(_BYTE *)(a3 + v10 + 1) ^ *(_BYTE *)(result + v10 + 1);
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = *(_BYTE *)(a3 + v9) ^ *(_BYTE *)(result + v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpNot<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  char v12;
  int v13;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        do
        {
          v10 = ~*(_BYTE *)(result + v9 + 1);
          v11 = (_BYTE *)(a5 + v9);
          *v11 = ~*(_BYTE *)(result + v9);
          v11[1] = v10;
          v12 = ~*(_BYTE *)(result + v9 + 3);
          v11[2] = ~*(_BYTE *)(result + v9 + 2);
          v11[3] = v12;
          v9 += 4;
          v8 = *a7;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = ~*(_BYTE *)(result + v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a5 += a6;
      v13 = a7[1];
      a7[1] = v13 - 1;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::max8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpMax<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpMax<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpMax<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<short,cv::OpMax<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32s<cv::OpMax<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32f<cv::OpMax<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp64f<cv::OpMax<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpMax<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10) - *(unsigned __int8 *)(result + v10) + 256]
              + *(_BYTE *)(result + v10);
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 - 1)
                                      - *(unsigned __int8 *)(result + v10 - 1)
                                      + 256]
                     + *(_BYTE *)(result + v10 - 1);
          *v12 = v11;
          v13 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 2) - *(unsigned __int8 *)(result + v10 + 2) + 256]
              + *(_BYTE *)(result + v10 + 2);
          v12[1] = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 1) - *(unsigned __int8 *)(result + v10 + 1) + 256]
                 + *(_BYTE *)(result + v10 + 1);
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v9) - *(unsigned __int8 *)(result + v9) + 256]
                              + *(_BYTE *)(result + v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpMax<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = (char *)(result + v10);
          v12 = *(char *)(result + v10 - 1);
          v13 = (char *)(a3 + v10);
          if (v12 <= *(char *)(a3 + v10 - 1))
            LOBYTE(v12) = *(_BYTE *)(a3 + v10 - 1);
          v14 = *v11;
          if (v14 <= *v13)
            LOBYTE(v14) = *v13;
          v15 = (_BYTE *)(a5 + v10);
          *(v15 - 1) = v12;
          *v15 = v14;
          v16 = v11[1];
          if (v16 <= v13[1])
            LOBYTE(v16) = v13[1];
          v17 = v11[2];
          v18 = v13[2];
          if (v17 <= v18)
            LOBYTE(v17) = v18;
          v15[1] = v16;
          v15[2] = v17;
          v8 = *a7;
          v19 = v10 + 3;
          v10 += 4;
        }
        while (v19 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v20 = *(char *)(result + v9);
          if (v20 <= *(char *)(a3 + v9))
            LOBYTE(v20) = *(_BYTE *)(a3 + v9);
          *(_BYTE *)(a5 + v9++) = v20;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v21 = a7[1];
      a7[1] = v21 - 1;
    }
    while (v21);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpMax<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  _WORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (unsigned __int16 *)(result + v13);
          v15 = *(unsigned __int16 *)(result + v13 - 4);
          v16 = (unsigned __int16 *)(a3 + v13);
          if (v15 <= *(unsigned __int16 *)(a3 + v13 - 4))
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          v17 = *(v14 - 1);
          if (v17 <= *(v16 - 1))
            LOWORD(v17) = *(v16 - 1);
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          v19 = *v14;
          if (v19 <= *v16)
            LOWORD(v19) = *v16;
          v20 = v14[1];
          v21 = v16[1];
          if (v20 <= v21)
            LOWORD(v20) = v21;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v22 = *(unsigned __int16 *)(result + 2 * v12);
          if (v22 <= *(unsigned __int16 *)(a3 + 2 * v12))
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpMax<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  __int16 *v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (__int16 *)(result + v13);
          v15 = *(__int16 *)(result + v13 - 4);
          v16 = (__int16 *)(a3 + v13);
          if (v15 <= *(__int16 *)(a3 + v13 - 4))
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          v17 = *(v14 - 1);
          if (v17 <= *(v16 - 1))
            LOWORD(v17) = *(v16 - 1);
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          v19 = *v14;
          if (v19 <= *v16)
            LOWORD(v19) = *v16;
          v20 = v14[1];
          v21 = v16[1];
          if (v20 <= v21)
            LOWORD(v20) = v21;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v22 = *(__int16 *)(result + 2 * v12);
          if (v22 <= *(__int16 *)(a3 + 2 * v12))
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpMax<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;
  int v13;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vmax_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *v11 = vmax_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v12 = *(_DWORD *)(result + 4 * v9);
          if (v12 <= *(_DWORD *)(a3 + 4 * v9))
            v12 = *(_DWORD *)(a3 + 4 * v9);
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpMax<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  float v13;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 8;
        do
        {
          v12 = (int8x8_t *)(a5 + v11);
          v12[-1] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + v11 - 8), *(float32x2_t *)(result + v11 - 8)), *(int8x8_t *)(a3 + v11 - 8), *(int8x8_t *)(result + v11 - 8));
          *v12 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + v11), *(float32x2_t *)(result + v11)), *(int8x8_t *)(a3 + v11), *(int8x8_t *)(result + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          v13 = *(float *)(result + 4 * v10);
          if (v13 < *(float *)(a3 + 4 * v10))
            v13 = *(float *)(a3 + 4 * v10);
          *(float *)(a5 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpMax<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  double v13;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 16;
        do
        {
          v12 = (int8x16_t *)(a5 + v11);
          v12[-1] = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a3 + v11 - 16), *(float64x2_t *)(result + v11 - 16)), *(int8x16_t *)(a3 + v11 - 16), *(int8x16_t *)(result + v11 - 16));
          *v12 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a3 + v11), *(float64x2_t *)(result + v11)), *(int8x16_t *)(a3 + v11), *(int8x16_t *)(result + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          v13 = *(double *)(result + 8 * v10);
          if (v13 < *(double *)(a3 + 8 * v10))
            v13 = *(double *)(a3 + 8 * v10);
          *(double *)(a5 + 8 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::min8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpMin<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpMin<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpMin<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<short,cv::OpMin<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32s<cv::OpMin<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32f<cv::OpMin<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp64f<cv::OpMin<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpMin<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = *(_BYTE *)(result + v10)
              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10) | 0x100) - *(unsigned __int8 *)(a3 + v10)];
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = *(_BYTE *)(result + v10 - 1)
                     - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 - 1) | 0x100)
                                      - *(unsigned __int8 *)(a3 + v10 - 1)];
          *v12 = v11;
          v13 = *(_BYTE *)(result + v10 + 2)
              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 2) | 0x100) - *(unsigned __int8 *)(a3 + v10 + 2)];
          v12[1] = *(_BYTE *)(result + v10 + 1)
                 - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 1) | 0x100)
                                  - *(unsigned __int8 *)(a3 + v10 + 1)];
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = *(_BYTE *)(result + v9)
                              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v9) | 0x100)
                                               - *(unsigned __int8 *)(a3 + v9)];
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpMin<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = (char *)(result + v10);
          v12 = *(char *)(result + v10 - 1);
          v13 = (char *)(a3 + v10);
          if (*(char *)(a3 + v10 - 1) < v12)
            LOBYTE(v12) = *(_BYTE *)(a3 + v10 - 1);
          v14 = *v11;
          if (*v13 < v14)
            LOBYTE(v14) = *v13;
          v15 = (_BYTE *)(a5 + v10);
          *(v15 - 1) = v12;
          *v15 = v14;
          v16 = v11[1];
          if (v13[1] < v16)
            LOBYTE(v16) = v13[1];
          v17 = v11[2];
          v18 = v13[2];
          if (v18 < v17)
            LOBYTE(v17) = v18;
          v15[1] = v16;
          v15[2] = v17;
          v8 = *a7;
          v19 = v10 + 3;
          v10 += 4;
        }
        while (v19 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v20 = *(char *)(result + v9);
          if (*(char *)(a3 + v9) < v20)
            LOBYTE(v20) = *(_BYTE *)(a3 + v9);
          *(_BYTE *)(a5 + v9++) = v20;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v21 = a7[1];
      a7[1] = v21 - 1;
    }
    while (v21);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpMin<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  _WORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (unsigned __int16 *)(result + v13);
          v15 = *(unsigned __int16 *)(result + v13 - 4);
          v16 = (unsigned __int16 *)(a3 + v13);
          if (*(unsigned __int16 *)(a3 + v13 - 4) < v15)
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          v17 = *(v14 - 1);
          if (*(v16 - 1) < v17)
            LOWORD(v17) = *(v16 - 1);
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          v19 = *v14;
          if (*v16 < v19)
            LOWORD(v19) = *v16;
          v20 = v14[1];
          v21 = v16[1];
          if (v21 < v20)
            LOWORD(v20) = v21;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v22 = *(unsigned __int16 *)(result + 2 * v12);
          if (*(unsigned __int16 *)(a3 + 2 * v12) < v22)
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpMin<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  __int16 *v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (__int16 *)(result + v13);
          v15 = *(__int16 *)(result + v13 - 4);
          v16 = (__int16 *)(a3 + v13);
          if (*(__int16 *)(a3 + v13 - 4) < v15)
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          v17 = *(v14 - 1);
          if (*(v16 - 1) < v17)
            LOWORD(v17) = *(v16 - 1);
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          v19 = *v14;
          if (*v16 < v19)
            LOWORD(v19) = *v16;
          v20 = v14[1];
          v21 = v16[1];
          if (v21 < v20)
            LOWORD(v20) = v21;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v22 = *(__int16 *)(result + 2 * v12);
          if (*(__int16 *)(a3 + 2 * v12) < v22)
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpMin<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;
  int v13;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vmin_s32(*(int32x2_t *)(a3 + v10 - 8), *(int32x2_t *)(result + v10 - 8));
          *v11 = vmin_s32(*(int32x2_t *)(a3 + v10), *(int32x2_t *)(result + v10));
          v9 += 4;
          v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v12 = *(_DWORD *)(result + 4 * v9);
          if (*(_DWORD *)(a3 + 4 * v9) < v12)
            v12 = *(_DWORD *)(a3 + 4 * v9);
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpMin<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  float v13;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 8;
        do
        {
          v12 = (int8x8_t *)(a5 + v11);
          v12[-1] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8)), *(int8x8_t *)(a3 + v11 - 8), *(int8x8_t *)(result + v11 - 8));
          *v12 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11)), *(int8x8_t *)(a3 + v11), *(int8x8_t *)(result + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          v13 = *(float *)(result + 4 * v10);
          if (*(float *)(a3 + 4 * v10) < v13)
            v13 = *(float *)(a3 + 4 * v10);
          *(float *)(a5 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpMin<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  double v13;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 16;
        do
        {
          v12 = (int8x16_t *)(a5 + v11);
          v12[-1] = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16)), *(int8x16_t *)(a3 + v11 - 16), *(int8x16_t *)(result + v11 - 16));
          *v12 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11)), *(int8x16_t *)(a3 + v11), *(int8x16_t *)(result + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          v13 = *(double *)(result + 8 * v10);
          if (*(double *)(a3 + 8 * v10) < v13)
            v13 = *(double *)(a3 + 8 * v10);
          *(double *)(a5 + 8 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::add8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAdd<unsigned char,unsigned char,unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpAdd<signed char,signed char,signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpAdd<unsigned short,unsigned short,unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<short,cv::OpAdd<short,short,short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32s<cv::OpAdd<int,int,int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32f<cv::OpAdd<float,float,float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp64f<cv::OpAdd<double,double,double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAdd<unsigned char,unsigned char,unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10)
                               + 256
                               + (unint64_t)*(unsigned __int8 *)(result + v10)];
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 - 1)
                                      + 256
                                      + (unint64_t)*(unsigned __int8 *)(result + v10 - 1)];
          *v12 = v11;
          v13 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 2)
                               + 256
                               + (unint64_t)*(unsigned __int8 *)(result + v10 + 2)];
          v12[1] = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 1)
                                  + 256
                                  + (unint64_t)*(unsigned __int8 *)(result + v10 + 1)];
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v9)
                                               + 256
                                               + (unint64_t)*(unsigned __int8 *)(result + v9)];
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpAdd<signed char,signed char,signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = (char *)(result + v10);
          v12 = (char *)(a3 + v10);
          v13 = *(char *)(result + v10 - 1) + *(char *)(a3 + v10 - 1);
          if (v13 >= 127)
            v13 = 127;
          if (v13 <= -128)
            LOBYTE(v13) = 0x80;
          v14 = *v11 + *v12;
          if (v14 >= 127)
            v14 = 127;
          if (v14 <= -128)
            LOBYTE(v14) = 0x80;
          v15 = (_BYTE *)(a5 + v10);
          *(v15 - 1) = v13;
          *v15 = v14;
          v16 = v11[1] + v12[1];
          if (v16 >= 127)
            v16 = 127;
          v17 = v11[2];
          v18 = v12[2];
          if (v16 <= -128)
            LOBYTE(v16) = 0x80;
          v19 = v17 + v18;
          if (v19 >= 127)
            v19 = 127;
          if (v19 <= -128)
            LOBYTE(v19) = 0x80;
          v15[1] = v16;
          v15[2] = v19;
          v8 = *a7;
          v20 = v10 + 3;
          v10 += 4;
        }
        while (v20 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v21 = *(char *)(result + v9) + *(char *)(a3 + v9);
          if (v21 >= 127)
            v21 = 127;
          if (v21 <= -128)
            LOBYTE(v21) = 0x80;
          *(_BYTE *)(a5 + v9++) = v21;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v22 = a7[1];
      a7[1] = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpAdd<unsigned short,unsigned short,unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (unsigned __int16 *)(result + v13);
          v15 = (unsigned __int16 *)(a3 + v13);
          v16 = *(unsigned __int16 *)(a3 + v13 - 4) + *(unsigned __int16 *)(result + v13 - 4);
          if (v16 >= 0xFFFF)
            LOWORD(v16) = -1;
          v17 = *(v15 - 1) + *(v14 - 1);
          if (v17 >= 0xFFFF)
            LOWORD(v17) = -1;
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          v19 = *v15 + *v14;
          if (v19 >= 0xFFFF)
            LOWORD(v19) = -1;
          v20 = v15[1] + v14[1];
          if (v20 >= 0xFFFF)
            LOWORD(v20) = -1;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v21 = *(unsigned __int16 *)(a3 + 2 * v12) + *(unsigned __int16 *)(result + 2 * v12);
          if (v21 >= 0xFFFF)
            LOWORD(v21) = -1;
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpAdd<short,short,short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  __int16 *v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (__int16 *)(result + v13);
          v15 = (__int16 *)(a3 + v13);
          v16 = *(__int16 *)(result + v13 - 4) + *(__int16 *)(a3 + v13 - 4);
          if (v16 >= 0x7FFF)
            v16 = 0x7FFF;
          if (v16 <= -32768)
            LOWORD(v16) = 0x8000;
          v17 = *(v14 - 1) + *(v15 - 1);
          if (v17 >= 0x7FFF)
            v17 = 0x7FFF;
          if (v17 <= -32768)
            LOWORD(v17) = 0x8000;
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          v19 = *v14 + *v15;
          if (v19 >= 0x7FFF)
            v19 = 0x7FFF;
          if (v19 <= -32768)
            LOWORD(v19) = 0x8000;
          v20 = v14[1] + v15[1];
          if (v20 >= 0x7FFF)
            v20 = 0x7FFF;
          if (v20 <= -32768)
            LOWORD(v20) = 0x8000;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v21 = *(__int16 *)(result + 2 * v12) + *(__int16 *)(a3 + 2 * v12);
          if (v21 >= 0x7FFF)
            v21 = 0x7FFF;
          if (v21 <= -32768)
            LOWORD(v21) = 0x8000;
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpAdd<int,int,int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vadd_s32(*(int32x2_t *)(a3 + v10 - 8), *(int32x2_t *)(result + v10 - 8));
          *v11 = vadd_s32(*(int32x2_t *)(a3 + v10), *(int32x2_t *)(result + v10));
          v9 += 4;
          v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(a3 + 4 * v9) + *(_DWORD *)(result + 4 * v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      v12 = a7[1];
      a7[1] = v12 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpAdd<float,float,float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 8;
        do
        {
          v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vadd_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *v12 = vadd_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = *(float *)(result + 4 * v10) + *(float *)(a3 + 4 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpAdd<double,double,double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 16;
        do
        {
          v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vaddq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *v12 = vaddq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = *(double *)(result + 8 * v10) + *(double *)(a3 + 8 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::sub8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpSub<unsigned char,unsigned char,unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpSub<signed char,signed char,signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpSub<unsigned short,unsigned short,unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<short,cv::OpSub<short,short,short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32s<cv::OpSub<int,int,int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32f<cv::OpSub<float,float,float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp64f<cv::OpSub<double,double,double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpSub<unsigned char,unsigned char,unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10) | 0x100) - *(unsigned __int8 *)(a3 + v10)];
          v12 = (_BYTE *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 - 1) | 0x100)
                                      - *(unsigned __int8 *)(a3 + v10 - 1)];
          *v12 = v11;
          v13 = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 2) | 0x100) - *(unsigned __int8 *)(a3 + v10 + 2)];
          v12[1] = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 1) | 0x100)
                                  - *(unsigned __int8 *)(a3 + v10 + 1)];
          v12[2] = v13;
          v8 = *a7;
          v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_BYTE *)(a5 + v9) = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v9) | 0x100)
                                               - *(unsigned __int8 *)(a3 + v9)];
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpSub<signed char,signed char,signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 1;
        do
        {
          v11 = (char *)(result + v10);
          v12 = (char *)(a3 + v10);
          v13 = *(char *)(result + v10 - 1) - *(char *)(a3 + v10 - 1);
          if (v13 >= 127)
            v13 = 127;
          if (v13 <= -128)
            LOBYTE(v13) = 0x80;
          v14 = *v11 - *v12;
          if (v14 >= 127)
            v14 = 127;
          if (v14 <= -128)
            LOBYTE(v14) = 0x80;
          v15 = (_BYTE *)(a5 + v10);
          *(v15 - 1) = v13;
          *v15 = v14;
          v16 = v11[1] - v12[1];
          if (v16 >= 127)
            v16 = 127;
          v17 = v11[2];
          v18 = v12[2];
          if (v16 <= -128)
            LOBYTE(v16) = 0x80;
          v19 = v17 - v18;
          if (v19 >= 127)
            v19 = 127;
          if (v19 <= -128)
            LOBYTE(v19) = 0x80;
          v15[1] = v16;
          v15[2] = v19;
          v8 = *a7;
          v20 = v10 + 3;
          v10 += 4;
        }
        while (v20 <= v8 - 4);
        v9 = (v10 - 1);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v21 = *(char *)(result + v9) - *(char *)(a3 + v9);
          if (v21 >= 127)
            v21 = 127;
          if (v21 <= -128)
            LOBYTE(v21) = 0x80;
          *(_BYTE *)(a5 + v9++) = v21;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v22 = a7[1];
      a7[1] = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpSub<unsigned short,unsigned short,unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _WORD *v15;
  int v16;
  int v17;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v11 = 0;
        v12 = 4;
        do
        {
          v13 = *(unsigned __int16 *)(result + v12 - 4) - *(unsigned __int16 *)(a3 + v12 - 4);
          v14 = *(unsigned __int16 *)(result + v12 - 2) - *(unsigned __int16 *)(a3 + v12 - 2);
          v15 = (_WORD *)(a5 + v12);
          *(v15 - 2) = v13 & ~(unsigned __int16)(v13 >> 31);
          *(v15 - 1) = v14 & ~(unsigned __int16)(v14 >> 31);
          v16 = *(unsigned __int16 *)(result + v12 + 2) - *(unsigned __int16 *)(a3 + v12 + 2);
          *v15 = (*(_WORD *)(result + v12) - *(_WORD *)(a3 + v12)) & ~(unsigned __int16)((*(unsigned __int16 *)(result + v12)
                                                                                        - *(unsigned __int16 *)(a3 + v12)) >> 31);
          v15[1] = v16 & ~(unsigned __int16)(v16 >> 31);
          v11 += 4;
          v12 += 8;
        }
        while (v11 <= (int)v8 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          v17 = *(unsigned __int16 *)(result + 2 * v11) - *(unsigned __int16 *)(a3 + 2 * v11);
          *(_WORD *)(a5 + 2 * v11++) = v17 & ~(unsigned __int16)(v17 >> 31);
        }
        while (v8 != v11);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
      a3 += v9;
      a5 += v10;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpSub<short,short,short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  __int16 *v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (__int16 *)(result + v13);
          v15 = (__int16 *)(a3 + v13);
          v16 = *(__int16 *)(result + v13 - 4) - *(__int16 *)(a3 + v13 - 4);
          if (v16 >= 0x7FFF)
            v16 = 0x7FFF;
          if (v16 <= -32768)
            LOWORD(v16) = 0x8000;
          v17 = *(v14 - 1) - *(v15 - 1);
          if (v17 >= 0x7FFF)
            v17 = 0x7FFF;
          if (v17 <= -32768)
            LOWORD(v17) = 0x8000;
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          v19 = *v14 - *v15;
          if (v19 >= 0x7FFF)
            v19 = 0x7FFF;
          if (v19 <= -32768)
            LOWORD(v19) = 0x8000;
          v20 = v14[1] - v15[1];
          if (v20 >= 0x7FFF)
            v20 = 0x7FFF;
          if (v20 <= -32768)
            LOWORD(v20) = 0x8000;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v21 = *(__int16 *)(result + 2 * v12) - *(__int16 *)(a3 + 2 * v12);
          if (v21 >= 0x7FFF)
            v21 = 0x7FFF;
          if (v21 <= -32768)
            LOWORD(v21) = 0x8000;
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpSub<int,int,int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vsub_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *v11 = vsub_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(result + 4 * v9) - *(_DWORD *)(a3 + 4 * v9);
          ++v9;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      v12 = a7[1];
      a7[1] = v12 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpSub<float,float,float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 8;
        do
        {
          v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vsub_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *v12 = vsub_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = *(float *)(result + 4 * v10) - *(float *)(a3 + 4 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpSub<double,double,double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 16;
        do
        {
          v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vsubq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *v12 = vsubq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = *(double *)(result + 8 * v10) - *(double *)(a3 + 8 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::absdiff8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAbsDiff<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpAbsDiff<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpAbsDiff<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp16<short,cv::OpAbsDiff<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32s<cv::OpAbsDiff<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp32f<cv::OpAbsDiff<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;

  v8 = *a7;
  return cv::vBinOp64f<cv::OpAbsDiff<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAbsDiff<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32x2_t v11;
  uint32x2_t v12;
  _BYTE *v13;
  uint32x2_t v14;
  uint32x2_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 2;
        do
        {
          v11.i32[0] = *(unsigned __int8 *)(result + v10 - 2);
          v11.i32[1] = *(unsigned __int8 *)(result + v10 - 1);
          v12.i32[0] = *(unsigned __int8 *)(a3 + v10 - 2);
          v12.i32[1] = *(unsigned __int8 *)(a3 + v10 - 1);
          v13 = (_BYTE *)(a5 + v10);
          v14 = vabd_u32(v11, v12);
          *(v13 - 1) = v14.i8[4];
          *(v13 - 2) = v14.i8[0];
          v14.i32[0] = *(unsigned __int8 *)(result + v10);
          v14.i32[1] = *(unsigned __int8 *)(result + v10 + 1);
          v12.i32[0] = *(unsigned __int8 *)(a3 + v10);
          v12.i32[1] = *(unsigned __int8 *)(a3 + v10 + 1);
          v15 = vabd_u32(v14, v12);
          v13[1] = v15.i8[4];
          *v13 = v15.i8[0];
          v8 = *a7;
          v16 = v10 + 2;
          v10 += 4;
        }
        while (v16 <= v8 - 4);
        v9 = (v10 - 2);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v17 = *(unsigned __int8 *)(result + v9) - *(unsigned __int8 *)(a3 + v9);
          if (v17 < 0)
            LOBYTE(v17) = *(_BYTE *)(a3 + v9) - *(_BYTE *)(result + v9);
          *(_BYTE *)(a5 + v9++) = v17;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v18 = a7[1];
      a7[1] = v18 - 1;
    }
    while (v18);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpAbsDiff<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  _BYTE *v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 2;
        do
        {
          v11.i32[0] = *(char *)(result + v10 - 2);
          v11.i32[1] = *(char *)(result + v10 - 1);
          v12.i32[0] = *(char *)(a3 + v10 - 2);
          v12.i32[1] = *(char *)(a3 + v10 - 1);
          v13 = (_BYTE *)(a5 + v10);
          v14 = vmin_s32(vabd_s32(v11, v12), (int32x2_t)0x7F0000007FLL);
          *(v13 - 1) = v14.i8[4];
          *(v13 - 2) = v14.i8[0];
          v14.i32[0] = *(char *)(result + v10);
          v14.i32[1] = *(char *)(result + v10 + 1);
          v12.i32[0] = *(char *)(a3 + v10);
          v12.i32[1] = *(char *)(a3 + v10 + 1);
          v15 = vmin_s32(vabd_s32(v14, v12), (int32x2_t)0x7F0000007FLL);
          v13[1] = v15.i8[4];
          *v13 = v15.i8[0];
          v8 = *a7;
          v16 = v10 + 2;
          v10 += 4;
        }
        while (v16 <= v8 - 4);
        v9 = (v10 - 2);
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v17 = *(char *)(result + v9) - *(char *)(a3 + v9);
          if (v17 < 0)
            v17 = *(char *)(a3 + v9) - *(char *)(result + v9);
          if (v17 >= 127)
            LOBYTE(v17) = 127;
          *(_BYTE *)(a5 + v9++) = v17;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v18 = a7[1];
      a7[1] = v18 - 1;
    }
    while (v18);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpAbsDiff<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v12 = 0;
        v13 = 4;
        do
        {
          v14 = (unsigned __int16 *)(result + v13);
          v15 = (unsigned __int16 *)(a3 + v13);
          v16 = *(unsigned __int16 *)(result + v13 - 4) - *(unsigned __int16 *)(a3 + v13 - 4);
          if (v16 < 0)
            LOWORD(v16) = *(_WORD *)(a3 + v13 - 4) - *(_WORD *)(result + v13 - 4);
          v17 = *(v14 - 1) - *(v15 - 1);
          if (v17 < 0)
            LOWORD(v17) = *(v15 - 1) - *(v14 - 1);
          v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          v19 = *v14 - *v15;
          if (v19 < 0)
            LOWORD(v19) = *v15 - *v14;
          v20 = v14[1] - v15[1];
          if (v20 < 0)
            v20 = -v20;
          *v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          v21 = *(unsigned __int16 *)(result + 2 * v12) - *(unsigned __int16 *)(a3 + 2 * v12);
          if (v21 < 0)
            LOWORD(v21) = *(_WORD *)(a3 + 2 * v12) - *(_WORD *)(result + 2 * v12);
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpAbsDiff<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  _WORD *v15;
  int32x2_t v16;
  int v17;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 4;
        do
        {
          v12.i32[0] = *(__int16 *)(result + v11 - 4);
          v13.i32[0] = *(__int16 *)(a3 + v11 - 4);
          v12.i32[1] = *(__int16 *)(result + v11 - 2);
          v13.i32[1] = *(__int16 *)(a3 + v11 - 2);
          v14 = vmin_s32(vabd_s32(v12, v13), (int32x2_t)0x7F0000007FLL);
          v15 = (_WORD *)(a5 + v11);
          *(v15 - 1) = v14.i16[2];
          *(v15 - 2) = v14.i16[0];
          v14.i32[0] = *(__int16 *)(result + v11);
          v13.i32[0] = *(__int16 *)(a3 + v11);
          v14.i32[1] = *(__int16 *)(result + v11 + 2);
          v13.i32[1] = *(__int16 *)(a3 + v11 + 2);
          v16 = vmin_s32(vabd_s32(v14, v13), (int32x2_t)0x7F0000007FLL);
          v15[1] = v16.i16[2];
          *v15 = v16.i16[0];
          v10 += 4;
          v11 += 8;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          v17 = *(__int16 *)(result + 2 * v10) - *(__int16 *)(a3 + 2 * v10);
          if (v17 < 0)
            v17 = *(__int16 *)(a3 + 2 * v10) - *(__int16 *)(result + 2 * v10);
          if (v17 >= 0x7FFF)
            LOWORD(v17) = 0x7FFF;
          *(_WORD *)(a5 + 2 * v10++) = v17;
        }
        while (v8 != v10);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
      a5 += v9;
      a3 += a4 & 0xFFFFFFFFFFFFFFFELL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpAbsDiff<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;
  int v13;

  v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vabd_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *v11 = vabd_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        v9 = v9;
      }
      else
      {
        v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          v12 = *(_DWORD *)(result + 4 * v9) - *(_DWORD *)(a3 + 4 * v9);
          if (v12 < 0)
            v12 = *(_DWORD *)(a3 + 4 * v9) - *(_DWORD *)(result + 4 * v9);
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          v8 = *a7;
        }
        while (v9 < v8);
      }
      v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpAbsDiff<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 8;
        do
        {
          v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vabd_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *v12 = vabd_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = vabds_f32(*(float *)(result + 4 * v10), *(float *)(a3 + 4 * v10));
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpAbsDiff<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        v10 = 0;
        v11 = 16;
        do
        {
          v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vabdq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *v12 = vabdq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        v10 = v10;
      }
      else
      {
        v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = vabdd_f64(*(double *)(result + 8 * v10), *(double *)(a3 + 8 * v10));
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::mul8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8, double a9, double a10, double a11, double a12, float a13, float a14)
{
  int v14;
  uint64_t v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  double v31;
  unsigned int v32;
  double v33;
  int32x2_t v34;
  _BYTE *v35;
  double v36;
  int v37;

  v14 = a7[1];
  v15 = *a7;
  v16 = *a8;
  v17 = v14 - 1;
  if (v16 == 1.0)
  {
    if (v14)
    {
      do
      {
        v18 = v17;
        if ((int)v15 >= 4)
        {
          v19 = 0;
          do
          {
            v20 = (unsigned __int8 *)(result + v19);
            v21 = (unsigned __int8 *)(a3 + v19);
            v22 = *(unsigned __int8 *)(a3 + v19) * *(unsigned __int8 *)(result + v19);
            if (v22 >= 255)
              LOBYTE(v22) = -1;
            v23 = v21[1] * v20[1];
            if (v23 >= 255)
              LOBYTE(v23) = -1;
            v24 = (_BYTE *)(a5 + v19);
            *v24 = v22;
            v24[1] = v23;
            v25 = v21[2] * v20[2];
            if (v25 >= 255)
              LOBYTE(v25) = -1;
            v26 = v21[3] * v20[3];
            if (v26 >= 255)
              LOBYTE(v26) = -1;
            v24[2] = v25;
            v24[3] = v26;
            v19 += 4;
          }
          while (v19 <= v15 - 4);
          v19 = v19;
        }
        else
        {
          v19 = 0;
        }
        if ((int)v19 < (int)v15)
        {
          do
          {
            v27 = *(unsigned __int8 *)(a3 + v19) * *(unsigned __int8 *)(result + v19);
            if (v27 >= 255)
              LOBYTE(v27) = -1;
            *(_BYTE *)(a5 + v19++) = v27;
          }
          while (v19 < v15);
        }
        result += a2;
        a3 += a4;
        a5 += a6;
        v17 = v18 - 1;
      }
      while (v18);
    }
  }
  else if (v14)
  {
    do
    {
      v28 = v17;
      if ((int)v15 >= 4)
      {
        v29 = 0;
        do
        {
          LOBYTE(a12) = *(_BYTE *)(result + v29);
          LOBYTE(a13) = *(_BYTE *)(a3 + v29);
          *(float *)&v30 = (float)LODWORD(a13);
          v31 = (float)((float)(v16 * (float)LODWORD(a12)) * *(float *)&v30);
          LOBYTE(v30) = *(_BYTE *)(result + v29 + 1);
          LOBYTE(a14) = *(_BYTE *)(a3 + v29 + 1);
          *(float *)&v32 = (float)LODWORD(a14);
          v33 = (float)((float)(v16 * (float)v30) * *(float *)&v32);
          v34 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v33), (uint64_t)rint(v31)), 0), (int32x2_t)0xFF000000FFLL);
          v35 = (_BYTE *)(a5 + v29);
          v35[1] = v34.i8[4];
          *v35 = v34.i8[0];
          v34.i8[0] = *(_BYTE *)(result + v29 + 2);
          LOBYTE(v33) = *(_BYTE *)(a3 + v29 + 2);
          *(float *)&v33 = (float)LODWORD(v33);
          v36 = (float)((float)(v16 * (float)v34.u32[0]) * *(float *)&v33);
          LOBYTE(v33) = *(_BYTE *)(result + v29 + 3);
          a13 = v16 * (float)LODWORD(v33);
          LOBYTE(v32) = *(_BYTE *)(a3 + v29 + 3);
          a14 = (float)v32;
          a12 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(a13 * a14)), (uint64_t)rint(v36)), 0), (int32x2_t)0xFF000000FFLL));
          v35[3] = BYTE4(a12);
          v35[2] = LOBYTE(a12);
          v29 += 4;
        }
        while (v29 <= v15 - 4);
        v29 = v29;
      }
      else
      {
        v29 = 0;
      }
      if ((int)v29 < (int)v15)
      {
        do
        {
          LOBYTE(a12) = *(_BYTE *)(result + v29);
          LOBYTE(a13) = *(_BYTE *)(a3 + v29);
          a13 = (float)LODWORD(a13);
          a12 = rint((float)((float)(v16 * (float)LODWORD(a12)) * a13));
          v37 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v37 >= 255)
            LOBYTE(v37) = -1;
          *(_BYTE *)(a5 + v29++) = v37;
        }
        while (v29 < v15);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v17 = v28 - 1;
    }
    while (v28);
  }
  return result;
}

uint64_t cv::mul8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int32x2_t v24;
  _BYTE *v25;
  int32x2_t v26;
  uint64_t v27;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = v8 - 1;
  if (v10 == 1.0)
  {
    if (v8)
    {
      do
      {
        v12 = v11;
        if ((int)v9 >= 4)
        {
          v14 = 2;
          do
          {
            v15.i32[0] = *(char *)(result + v14 - 2);
            v15.i32[1] = *(char *)(result + v14 - 1);
            v16.i32[0] = *(char *)(a3 + v14 - 2);
            v16.i32[1] = *(char *)(a3 + v14 - 1);
            v17 = (_BYTE *)(a5 + v14);
            v18 = vmin_s32(vmax_s32(vmul_s32(v16, v15), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
            *(v17 - 1) = v18.i8[4];
            *(v17 - 2) = v18.i8[0];
            v18.i32[0] = *(char *)(result + v14);
            v18.i32[1] = *(char *)(result + v14 + 1);
            v16.i32[0] = *(char *)(a3 + v14);
            v16.i32[1] = *(char *)(a3 + v14 + 1);
            v19 = vmin_s32(vmax_s32(vmul_s32(v16, v18), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
            v17[1] = v19.i8[4];
            *v17 = v19.i8[0];
            v20 = v14 + 2;
            v14 += 4;
          }
          while (v20 <= v9 - 4);
          v13 = (v14 - 2);
        }
        else
        {
          v13 = 0;
        }
        if ((int)v13 < (int)v9)
        {
          do
          {
            v21 = *(char *)(a3 + v13) * *(char *)(result + v13);
            if (v21 <= -128)
              v21 = -128;
            if (v21 >= 127)
              LOBYTE(v21) = 127;
            *(_BYTE *)(a5 + v13++) = v21;
          }
          while (v13 < v9);
        }
        result += a2;
        a3 += a4;
        a5 += a6;
        v11 = v12 - 1;
      }
      while (v12);
    }
  }
  else if (v8)
  {
    do
    {
      v22 = v11;
      if ((int)v9 >= 4)
      {
        v23 = 0;
        do
        {
          v24 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 1))* (float)*(char *)(a3 + v23 + 1))), (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23))* (float)*(char *)(a3 + v23)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v25 = (_BYTE *)(a5 + v23);
          v25[1] = v24.i8[4];
          *v25 = v24.i8[0];
          v26 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 3))* (float)*(char *)(a3 + v23 + 3))), (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 2))* (float)*(char *)(a3 + v23 + 2)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v25[3] = v26.i8[4];
          v25[2] = v26.i8[0];
          v23 += 4;
        }
        while (v23 <= v9 - 4);
        v23 = v23;
      }
      else
      {
        v23 = 0;
      }
      if ((int)v23 < (int)v9)
      {
        do
        {
          v27 = (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23)) * (float)*(char *)(a3 + v23)));
          if ((int)v27 <= -128)
            LODWORD(v27) = -128;
          if ((int)v27 >= 127)
            LOBYTE(v27) = 127;
          *(_BYTE *)(a5 + v23++) = v27;
        }
        while (v23 < v9);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v11 = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::mul16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10, float a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  _WORD *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  int v45;
  float v46;
  double v47;
  int v48;
  _WORD *v49;
  unsigned int v50;
  double v51;
  int v52;
  float v53;
  __int16 v54;
  int v55;
  int v56;

  v11 = a7[1];
  v12 = (int)*a7;
  v13 = *a7;
  v14 = *a8;
  v15 = a2 >> 1;
  v16 = a4 >> 1;
  v17 = a6 >> 1;
  v18 = v11 - 1;
  LODWORD(v19) = 1.0;
  if (v14 == 1.0)
  {
    if (v11)
    {
      v20 = 2 * v17;
      v21 = 2 * v16;
      v22 = 2 * v15;
      do
      {
        v23 = v18;
        if ((int)v12 >= 4)
        {
          v25 = 0;
          v24 = 0;
          do
          {
            v26 = (unsigned __int16 *)(result + v25);
            v27 = (unsigned __int16 *)(a3 + v25);
            v28 = *(unsigned __int16 *)(a3 + v25) * *(unsigned __int16 *)(result + v25);
            if (v28 >= 0xFFFF)
              LOWORD(v28) = -1;
            v29 = v27[1] * v26[1];
            if (v29 >= 0xFFFF)
              LOWORD(v29) = -1;
            v30 = (_WORD *)(a5 + v25);
            *v30 = v28;
            v30[1] = v29;
            v31 = v27[2] * v26[2];
            if (v31 >= 0xFFFF)
              LOWORD(v31) = -1;
            v32 = v27[3] * v26[3];
            if (v32 >= 0xFFFF)
              LOWORD(v32) = -1;
            v30[2] = v31;
            v30[3] = v32;
            v24 += 4;
            v25 += 8;
          }
          while (v24 <= v12 - 4);
          v24 = v24;
        }
        else
        {
          v24 = 0;
        }
        if ((int)v24 < (int)v13)
        {
          do
          {
            v33 = *(unsigned __int16 *)(a3 + 2 * v24) * *(unsigned __int16 *)(result + 2 * v24);
            if (v33 >= 0xFFFF)
              LOWORD(v33) = -1;
            *(_WORD *)(a5 + 2 * v24++) = v33;
          }
          while (v13 != v24);
        }
        v18 = v23 - 1;
        a5 += v20;
        a3 += v21;
        result += v22;
      }
      while (v23);
    }
  }
  else if (v11)
  {
    v34 = 2 * v17;
    v35 = 2 * v16;
    v36 = 2 * v15;
    do
    {
      v37 = v18;
      if ((int)v12 >= 4)
      {
        v39 = 0;
        v38 = 0;
        do
        {
          v40 = result + v39;
          LOWORD(v19) = *(_WORD *)(result + v39);
          v41 = a3 + v39;
          LOWORD(a11) = *(_WORD *)(a3 + v39);
          *(float *)&v42 = (float)LODWORD(a11);
          v43 = rint((float)((float)(v14 * (float)LODWORD(v19)) * *(float *)&v42));
          v44 = (uint64_t)v43;
          LOWORD(v43) = *(_WORD *)(result + v39 + 2);
          v45 = v44 & ~((int)v44 >> 31);
          LOWORD(v42) = *(_WORD *)(a3 + v39 + 2);
          v46 = (float)v42;
          v47 = rint((float)((float)(v14 * (float)LODWORD(v43)) * v46));
          v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if (v45 >= 0xFFFF)
            LOWORD(v45) = -1;
          if (v48 >= 0xFFFF)
            LOWORD(v48) = -1;
          v49 = (_WORD *)(a5 + v39);
          *v49 = v45;
          v49[1] = v48;
          LOWORD(v47) = *(_WORD *)(v40 + 4);
          LOWORD(v46) = *(_WORD *)(v41 + 4);
          *(float *)&v50 = (float)LODWORD(v46);
          v51 = rint((float)((float)(v14 * (float)LODWORD(v47)) * *(float *)&v50));
          v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
          LOWORD(v51) = *(_WORD *)(v40 + 6);
          LOWORD(v50) = *(_WORD *)(v41 + 6);
          a11 = (float)v50;
          v53 = (float)(v14 * (float)LODWORD(v51)) * a11;
          if (v52 >= 0xFFFF)
            v54 = -1;
          else
            v54 = v52;
          v19 = rint(v53);
          v55 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v55 >= 0xFFFF)
            LOWORD(v55) = -1;
          v49[2] = v54;
          v49[3] = v55;
          v38 += 4;
          v39 += 8;
        }
        while (v38 <= v12 - 4);
        v38 = v38;
      }
      else
      {
        v38 = 0;
      }
      if ((int)v38 < (int)v13)
      {
        do
        {
          LOWORD(v19) = *(_WORD *)(result + 2 * v38);
          LOWORD(a11) = *(_WORD *)(a3 + 2 * v38);
          a11 = (float)LODWORD(a11);
          v19 = rint((float)((float)(v14 * (float)LODWORD(v19)) * a11));
          v56 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v56 >= 0xFFFF)
            LOWORD(v56) = -1;
          *(_WORD *)(a5 + 2 * v38++) = v56;
        }
        while (v13 != v38);
      }
      v18 = v37 - 1;
      a5 += v34;
      a3 += v35;
      result += v36;
    }
    while (v37);
  }
  return result;
}

uint64_t cv::mul16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  __int16 *v23;
  int v24;
  int v25;
  _WORD *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v8 = a7[1];
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = a2 >> 1;
  v13 = a4 >> 1;
  v14 = a6 >> 1;
  v15 = v8 - 1;
  if (v11 == 1.0)
  {
    if (v8)
    {
      v16 = 2 * v14;
      v17 = 2 * v13;
      v18 = 2 * v12;
      do
      {
        v19 = v15;
        if ((int)v9 >= 4)
        {
          v21 = 0;
          v20 = 0;
          do
          {
            v22 = (__int16 *)(result + v21);
            v23 = (__int16 *)(a3 + v21);
            v24 = *(__int16 *)(a3 + v21) * *(__int16 *)(result + v21);
            if (v24 <= -32768)
              v24 = -32768;
            if (v24 >= 0x7FFF)
              LOWORD(v24) = 0x7FFF;
            v25 = v23[1] * v22[1];
            if (v25 <= -32768)
              v25 = -32768;
            if (v25 >= 0x7FFF)
              LOWORD(v25) = 0x7FFF;
            v26 = (_WORD *)(a5 + v21);
            *v26 = v24;
            v26[1] = v25;
            v27 = v23[2] * v22[2];
            if (v27 <= -32768)
              v27 = -32768;
            if (v27 >= 0x7FFF)
              LOWORD(v27) = 0x7FFF;
            v28 = v23[3] * v22[3];
            if (v28 <= -32768)
              v28 = -32768;
            if (v28 >= 0x7FFF)
              LOWORD(v28) = 0x7FFF;
            v26[2] = v27;
            v26[3] = v28;
            v20 += 4;
            v21 += 8;
          }
          while (v20 <= v9 - 4);
          v20 = v20;
        }
        else
        {
          v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            v29 = *(__int16 *)(a3 + 2 * v20) * *(__int16 *)(result + 2 * v20);
            if (v29 <= -32768)
              v29 = -32768;
            if (v29 >= 0x7FFF)
              LOWORD(v29) = 0x7FFF;
            *(_WORD *)(a5 + 2 * v20++) = v29;
          }
          while (v10 != v20);
        }
        v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    v30 = 2 * v14;
    v31 = 2 * v13;
    v32 = 2 * v12;
    do
    {
      v33 = v15;
      if ((int)v9 >= 4)
      {
        v35 = 0;
        v34 = 0;
        do
        {
          v36 = (__int16 *)(result + v35);
          v37 = (__int16 *)(a3 + v35);
          v38 = (uint64_t)rint((float)((float)(v11 * (float)*(__int16 *)(result + v35)) * (float)*(__int16 *)(a3 + v35)));
          if ((int)v38 <= -32768)
            LODWORD(v38) = -32768;
          if ((int)v38 >= 0x7FFF)
            LOWORD(v38) = 0x7FFF;
          v39 = (uint64_t)rint((float)((float)(v11 * (float)v36[1]) * (float)v37[1]));
          if ((int)v39 <= -32768)
            LODWORD(v39) = -32768;
          if ((int)v39 >= 0x7FFF)
            LOWORD(v39) = 0x7FFF;
          v40 = (_WORD *)(a5 + v35);
          *v40 = v38;
          v40[1] = v39;
          v41 = (uint64_t)rint((float)((float)(v11 * (float)v36[2]) * (float)v37[2]));
          if ((int)v41 <= -32768)
            LODWORD(v41) = -32768;
          v42 = (float)((float)(v11 * (float)v36[3]) * (float)v37[3]);
          if ((int)v41 >= 0x7FFF)
            v43 = 0x7FFF;
          else
            v43 = v41;
          v44 = (uint64_t)rint(v42);
          if ((int)v44 <= -32768)
            LODWORD(v44) = -32768;
          if ((int)v44 >= 0x7FFF)
            LOWORD(v44) = 0x7FFF;
          v40[2] = v43;
          v40[3] = v44;
          v34 += 4;
          v35 += 8;
        }
        while (v34 <= v9 - 4);
        v34 = v34;
      }
      else
      {
        v34 = 0;
      }
      if ((int)v34 < (int)v10)
      {
        do
        {
          v45 = (uint64_t)rint((float)((float)(v11 * (float)*(__int16 *)(result + 2 * v34))
                                    * (float)*(__int16 *)(a3 + 2 * v34)));
          if ((int)v45 <= -32768)
            LODWORD(v45) = -32768;
          if ((int)v45 >= 0x7FFF)
            LOWORD(v45) = 0x7FFF;
          *(_WORD *)(a5 + 2 * v34++) = v45;
        }
        while (v10 != v34);
      }
      v15 = v33 - 1;
      a5 += v30;
      a3 += v31;
      result += v32;
    }
    while (v33);
  }
  return result;
}

uint64_t cv::mul32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = a2 >> 2;
  v12 = a4 >> 2;
  v13 = a6 >> 2;
  v14 = v8 - 1;
  if (*a8 == 1.0)
  {
    if (v8)
    {
      v15 = 4 * v13;
      v16 = 4 * v12;
      v17 = 4 * v11;
      do
      {
        v18 = v14;
        if ((int)v9 >= 4)
        {
          v20 = 0;
          v19 = 0;
          do
          {
            v21 = (int32x2_t *)(a5 + v20);
            *v21 = vmul_s32(*(int32x2_t *)(a3 + v20), *(int32x2_t *)(result + v20));
            v21[1] = vmul_s32(*(int32x2_t *)(a3 + v20 + 8), *(int32x2_t *)(result + v20 + 8));
            v19 += 4;
            v20 += 16;
          }
          while (v19 <= v9 - 4);
          v19 = v19;
        }
        else
        {
          v19 = 0;
        }
        if ((int)v19 < (int)v9)
        {
          do
          {
            *(_DWORD *)(a5 + 4 * v19) = *(_DWORD *)(a3 + 4 * v19) * *(_DWORD *)(result + 4 * v19);
            ++v19;
          }
          while (v19 < v9);
        }
        v14 = v18 - 1;
        a5 += v15;
        a3 += v16;
        result += v17;
      }
      while (v18);
    }
  }
  else if (v8)
  {
    v22 = 4 * v13;
    v23 = 4 * v12;
    v24 = 4 * v11;
    do
    {
      v25 = v14;
      if ((int)v9 >= 4)
      {
        v27 = 0;
        v26 = 0;
        do
        {
          v28 = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 4) * (double)*(int *)(a3 + v27 + 4));
          v29 = (_DWORD *)(a5 + v27);
          *v29 = (uint64_t)rint(v10 * (double)*(int *)(result + v27) * (double)*(int *)(a3 + v27));
          v29[1] = v28;
          v30 = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 12) * (double)*(int *)(a3 + v27 + 12));
          v29[2] = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 8) * (double)*(int *)(a3 + v27 + 8));
          v29[3] = v30;
          v26 += 4;
          v27 += 16;
        }
        while (v26 <= v9 - 4);
        v26 = v26;
      }
      else
      {
        v26 = 0;
      }
      if ((int)v26 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v26) = (uint64_t)rint(v10* (double)*(int *)(result + 4 * v26)* (double)*(int *)(a3 + 4 * v26));
          ++v26;
        }
        while (v26 < v9);
      }
      v14 = v25 - 1;
      a5 += v22;
      a3 += v23;
      result += v24;
    }
    while (v25);
  }
  return result;
}

uint64_t cv::mul32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t *v29;

  v8 = a7[1];
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = a2 >> 2;
  v13 = a4 >> 2;
  v14 = a6 >> 2;
  v15 = v8 - 1;
  if (v11 == 1.0)
  {
    if (v8)
    {
      v16 = 4 * v14;
      v17 = 4 * v13;
      v18 = 4 * v12;
      do
      {
        v19 = v15;
        if ((int)v9 >= 4)
        {
          v21 = 0;
          v20 = 0;
          do
          {
            v22 = (float32x2_t *)(a5 + v21);
            *v22 = vmul_f32(*(float32x2_t *)(result + v21), *(float32x2_t *)(a3 + v21));
            v22[1] = vmul_f32(*(float32x2_t *)(result + v21 + 8), *(float32x2_t *)(a3 + v21 + 8));
            v20 += 4;
            v21 += 16;
          }
          while (v20 <= v9 - 4);
          v20 = v20;
        }
        else
        {
          v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            *(float *)(a5 + 4 * v20) = *(float *)(result + 4 * v20) * *(float *)(a3 + 4 * v20);
            ++v20;
          }
          while (v10 != v20);
        }
        v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    v23 = 4 * v14;
    v24 = 4 * v13;
    v25 = 4 * v12;
    do
    {
      v26 = v15;
      if ((int)v9 >= 4)
      {
        v28 = 0;
        v27 = 0;
        do
        {
          v29 = (float32x2_t *)(a5 + v28);
          *v29 = vmul_f32(vmul_n_f32(*(float32x2_t *)(result + v28), v11), *(float32x2_t *)(a3 + v28));
          v29[1] = vmul_f32(vmul_n_f32(*(float32x2_t *)(result + v28 + 8), v11), *(float32x2_t *)(a3 + v28 + 8));
          v27 += 4;
          v28 += 16;
        }
        while (v27 <= v9 - 4);
        v27 = v27;
      }
      else
      {
        v27 = 0;
      }
      if ((int)v27 < (int)v10)
      {
        do
        {
          *(float *)(a5 + 4 * v27) = (float)(*(float *)(result + 4 * v27) * v11) * *(float *)(a3 + 4 * v27);
          ++v27;
        }
        while (v10 != v27);
      }
      v15 = v26 - 1;
      a5 += v23;
      a3 += v24;
      result += v25;
    }
    while (v26);
  }
  return result;
}

uint64_t cv::mul64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v29;

  v8 = a7[1];
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = a2 >> 3;
  v13 = a4 >> 3;
  v14 = a6 >> 3;
  v15 = v8 - 1;
  if (*a8 == 1.0)
  {
    if (v8)
    {
      v16 = 8 * v14;
      v17 = 8 * v13;
      v18 = 8 * v12;
      do
      {
        v19 = v15;
        if ((int)v9 >= 4)
        {
          v21 = 0;
          v20 = 0;
          do
          {
            v22 = (float64x2_t *)(a5 + v21);
            *v22 = vmulq_f64(*(float64x2_t *)(result + v21), *(float64x2_t *)(a3 + v21));
            v22[1] = vmulq_f64(*(float64x2_t *)(result + v21 + 16), *(float64x2_t *)(a3 + v21 + 16));
            v20 += 4;
            v21 += 32;
          }
          while (v20 <= v9 - 4);
          v20 = v20;
        }
        else
        {
          v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            *(double *)(a5 + 8 * v20) = *(double *)(result + 8 * v20) * *(double *)(a3 + 8 * v20);
            ++v20;
          }
          while (v10 != v20);
        }
        v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    v23 = 8 * v14;
    v24 = 8 * v13;
    v25 = 8 * v12;
    do
    {
      v26 = v15;
      if ((int)v9 >= 4)
      {
        v28 = 0;
        v27 = 0;
        do
        {
          v29 = (float64x2_t *)(a5 + v28);
          *v29 = vmulq_f64(vmulq_n_f64(*(float64x2_t *)(result + v28), v11), *(float64x2_t *)(a3 + v28));
          v29[1] = vmulq_f64(vmulq_n_f64(*(float64x2_t *)(result + v28 + 16), v11), *(float64x2_t *)(a3 + v28 + 16));
          v27 += 4;
          v28 += 32;
        }
        while (v27 <= v9 - 4);
        v27 = v27;
      }
      else
      {
        v27 = 0;
      }
      if ((int)v27 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v27) = v11 * *(double *)(result + 8 * v27) * *(double *)(a3 + 8 * v27);
          ++v27;
        }
        while (v10 != v27);
      }
      v15 = v26 - 1;
      a5 += v23;
      a3 += v24;
      result += v25;
    }
    while (v26);
  }
  return result;
}

uint64_t cv::div8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8, double a9, double a10)
{
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  _BYTE *v33;
  unint64_t v34;
  double v35;
  double v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42[2];

  v10 = a5;
  v11 = *a7;
  if (!result)
  {
    v41 = a7[1];
    v42[0] = *a7;
    v42[1] = v41;
    return cv::recip_<unsigned char>(a3, a4, a5, a6, v42, *a8);
  }
  v12 = a7[1];
  if (!v12)
    return result;
  v13 = *a8;
  do
  {
    if (v11 < 4)
    {
      v14 = 0;
      goto LABEL_38;
    }
    v15 = 0;
    v16 = 3;
    do
    {
      v17 = v16;
      v18 = a3 + v16;
      v19 = *(unsigned __int8 *)(a3 + v16 - 3);
      v20 = *(unsigned __int8 *)(v18 - 2);
      if (v19)
      {
        if (*(_BYTE *)(v18 - 2))
        {
          v21 = *(unsigned __int8 *)(a3 + v17 - 1);
          if (*(_BYTE *)(a3 + v17 - 1))
          {
            v22 = *(unsigned __int8 *)(a3 + v17);
            if (*(_BYTE *)(a3 + v17))
            {
              v23 = v15 | 2;
              v24 = (double)v19;
              v25 = v15 | 3;
              v26 = (double)v19 * (double)v20;
              v27 = (double)v21;
              v28 = (double)v22;
              v29 = (double)v21 * (double)v22;
              *(double *)&v30 = v13 / (v26 * v29);
              v31 = v29 * *(double *)&v30;
              v32 = v26 * *(double *)&v30;
              v33 = (_BYTE *)(result + v17);
              LOBYTE(v30) = *(_BYTE *)(result + v17 - 3);
              *(double *)&v34 = rint(v31 * (double)v30 * (double)v20);
              v19 = (uint64_t)*(double *)&v34 & ~((int)(uint64_t)*(double *)&v34 >> 31);
              LOBYTE(v34) = *(_BYTE *)(result + v17 - 2);
              v35 = rint(v31 * (double)v34 * v24);
              if (v19 >= 255)
                LOBYTE(v19) = -1;
              v20 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
              if ((int)v20 >= 255)
                LOBYTE(v20) = -1;
              LOBYTE(v35) = *(v33 - 1);
              v36 = rint(v32 * (double)*(unint64_t *)&v35 * v28);
              v37 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
              if (v37 >= 255)
                LOBYTE(v37) = -1;
              LOBYTE(v36) = *v33;
              a10 = rint(v32 * (double)*(unint64_t *)&v36 * v27);
              v38 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
              if (v38 >= 255)
                LOBYTE(v38) = -1;
              goto LABEL_36;
            }
          }
        }
        LOBYTE(a10) = *(_BYTE *)(result + v17 - 3);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v19);
        v19 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v19 >= 255)
          LOBYTE(v19) = -1;
      }
      if (*(_BYTE *)(v18 - 2))
      {
        LOBYTE(a10) = *(_BYTE *)(result + v17 - 2);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v20);
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255)
          LOBYTE(v20) = -1;
        else
          LOBYTE(v20) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
      }
      if (*(_BYTE *)(a3 + v17 - 1))
      {
        LOBYTE(a10) = *(_BYTE *)(result + v17 - 1);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int8 *)(a3 + v17 - 1));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255)
          LOBYTE(v37) = -1;
        else
          LOBYTE(v37) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
      }
      else
      {
        LOBYTE(v37) = 0;
      }
      v23 = v17 - 1;
      if (*(_BYTE *)(a3 + v17))
      {
        LOBYTE(a10) = *(_BYTE *)(result + v17);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int8 *)(a3 + v17));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255)
          LOBYTE(v38) = -1;
        else
          LOBYTE(v38) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
      }
      else
      {
        LOBYTE(v38) = 0;
      }
      v25 = v17;
LABEL_36:
      v39 = v10 + v17;
      *(_BYTE *)(v39 - 3) = v19;
      *(_BYTE *)(v39 - 2) = v20;
      *(_BYTE *)(v10 + v23) = v37;
      *(_BYTE *)(v10 + v25) = v38;
      v15 += 4;
      v16 = v17 + 4;
    }
    while (v17 + 1 <= v11 - 4);
    v14 = (v17 + 1);
LABEL_38:
    if ((int)v14 < v11)
    {
      do
      {
        v40 = *(unsigned __int8 *)(a3 + v14);
        if (*(_BYTE *)(a3 + v14))
        {
          LOBYTE(a10) = *(_BYTE *)(result + v14);
          a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v40);
          v40 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
          if (v40 >= 255)
            LOBYTE(v40) = -1;
        }
        *(_BYTE *)(v10 + v14++) = v40;
      }
      while (v14 < v11);
    }
    result += a2;
    a3 += a4;
    v10 += a6;
    --v12;
  }
  while (v12);
  return result;
}

uint64_t cv::div8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      v11 = 0;
      goto LABEL_53;
    }
    v12 = 0;
    v13 = 3;
    do
    {
      v14 = v13;
      v15 = a3 + v13;
      LODWORD(v13) = *(unsigned __int8 *)(a3 + v13 - 3);
      LOBYTE(v16) = *(_BYTE *)(v15 - 2);
      if ((_DWORD)v13)
      {
        if (*(_BYTE *)(v15 - 2) && *(_BYTE *)(a3 + v14 - 1) && *(_BYTE *)(a3 + v14))
        {
          v17 = v12 | 2;
          v18 = v12 | 3;
          v19 = (double)(char)v13;
          v20 = (double)(char)v16;
          v21 = (double)*(char *)(a3 + v14 - 1);
          v22 = (double)*(char *)(a3 + v14);
          v23 = v10 / (v19 * v20 * (v21 * v22));
          v24 = v21 * v22 * v23;
          v25 = v19 * v20 * v23;
          v26 = (char *)(result + v14);
          v13 = (uint64_t)rint(v24 * (double)*(char *)(result + v14 - 3) * v20);
          if ((int)v13 <= -128)
            LODWORD(v13) = -128;
          if ((int)v13 >= 127)
            LOBYTE(v13) = 127;
          v16 = (uint64_t)rint(v24 * (double)*(v26 - 2) * v19);
          if ((int)v16 <= -128)
            LODWORD(v16) = -128;
          if ((int)v16 >= 127)
            LOBYTE(v16) = 127;
          v27 = (uint64_t)rint(v25 * (double)*(v26 - 1) * v22);
          if ((int)v27 <= -128)
            LODWORD(v27) = -128;
          if ((int)v27 >= 127)
            LOBYTE(v27) = 127;
          v28 = (uint64_t)rint(v25 * (double)*v26 * v21);
          if ((int)v28 <= -128)
            LODWORD(v28) = -128;
          if ((int)v28 >= 127)
            LOBYTE(v28) = 127;
          goto LABEL_51;
        }
        v13 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 3) / (double)(char)v13);
        if ((int)v13 <= -128)
          LODWORD(v13) = -128;
        if ((int)v13 >= 127)
          LOBYTE(v13) = 127;
      }
      if (*(_BYTE *)(v15 - 2))
      {
        v29 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 2) / (double)(char)v16);
        if ((int)v29 <= -128)
          LODWORD(v29) = -128;
        if ((int)v29 >= 127)
          LOBYTE(v16) = 127;
        else
          LOBYTE(v16) = v29;
      }
      if (*(_BYTE *)(a3 + v14 - 1))
      {
        v30 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 1) / (double)*(char *)(a3 + v14 - 1));
        if ((int)v30 <= -128)
          LODWORD(v30) = -128;
        if ((int)v30 >= 127)
          LOBYTE(v27) = 127;
        else
          LOBYTE(v27) = v30;
      }
      else
      {
        LOBYTE(v27) = 0;
      }
      v17 = v14 - 1;
      if (*(_BYTE *)(a3 + v14))
      {
        v31 = (uint64_t)rint(v10 * (double)*(char *)(result + v14) / (double)*(char *)(a3 + v14));
        if ((int)v31 <= -128)
          LODWORD(v31) = -128;
        if ((int)v31 >= 127)
          LOBYTE(v28) = 127;
        else
          LOBYTE(v28) = v31;
      }
      else
      {
        LOBYTE(v28) = 0;
      }
      v18 = v14;
LABEL_51:
      v32 = a5 + v14;
      *(_BYTE *)(v32 - 3) = v13;
      *(_BYTE *)(v32 - 2) = v16;
      *(_BYTE *)(a5 + v17) = v27;
      *(_BYTE *)(a5 + v18) = v28;
      v12 += 4;
      v13 = v14 + 4;
    }
    while (v14 + 1 <= v9 - 4);
    v11 = (v14 + 1);
LABEL_53:
    if ((int)v11 < (int)v9)
    {
      do
      {
        LOBYTE(v33) = *(_BYTE *)(a3 + v11);
        if ((_BYTE)v33)
        {
          v33 = (uint64_t)rint(v10 * (double)*(char *)(result + v11) / (double)(char)v33);
          if ((int)v33 <= -128)
            LODWORD(v33) = -128;
          if ((int)v33 >= 127)
            LOBYTE(v33) = 127;
        }
        *(_BYTE *)(a5 + v11++) = v33;
      }
      while (v11 < v9);
    }
    result += a2;
    a3 += a4;
    a5 += a6;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  int v38;
  double v39;
  int v40;
  _WORD *v41;
  int v42;

  v10 = a7[1];
  if (!v10)
    return result;
  v11 = (int)*a7;
  v12 = *a7;
  v13 = *a8;
  v14 = 2 * (a6 >> 1);
  v15 = 2 * (a4 >> 1);
  v16 = 2 * (a2 >> 1);
  do
  {
    if ((int)v11 < 4)
    {
      v17 = 0;
      goto LABEL_34;
    }
    v18 = 0;
    v17 = 0;
    do
    {
      v19 = *(unsigned __int16 *)(a3 + v18);
      v20 = *(unsigned __int16 *)(a3 + v18 + 2);
      if (*(_WORD *)(a3 + v18))
      {
        if (*(_WORD *)(a3 + v18 + 2))
        {
          v21 = a3 + v18;
          v22 = *(unsigned __int16 *)(a3 + v18 + 4);
          if (*(_WORD *)(a3 + v18 + 4))
          {
            v23 = *(unsigned __int16 *)(v21 + 6);
            if (*(_WORD *)(v21 + 6))
            {
              v24 = v17 | 2;
              v25 = (double)v19;
              v26 = v17 | 3;
              v27 = (double)v19 * (double)v20;
              v28 = (double)v22;
              v29 = (double)v23;
              v30 = (double)v22 * (double)v23;
              *(double *)&v31 = v13 / (v27 * v30);
              v32 = v30 * *(double *)&v31;
              v33 = v27 * *(double *)&v31;
              v34 = result + v18;
              LOWORD(v31) = *(_WORD *)(result + v18);
              *(double *)&v35 = rint(v32 * (double)v31 * (double)v20);
              v19 = (uint64_t)*(double *)&v35 & ~((int)(uint64_t)*(double *)&v35 >> 31);
              LOWORD(v35) = *(_WORD *)(result + v18 + 2);
              v36 = rint(v32 * (double)v35 * v25);
              if (v19 >= 0xFFFF)
                LOWORD(v19) = -1;
              v20 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
              if ((int)v20 >= 0xFFFF)
                LOWORD(v20) = -1;
              LOWORD(v36) = *(_WORD *)(v34 + 4);
              v37 = rint(v33 * (double)*(unint64_t *)&v36 * v29);
              v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
              if (v38 >= 0xFFFF)
                LOWORD(v38) = -1;
              LOWORD(v37) = *(_WORD *)(v34 + 6);
              v39 = v33 * (double)*(unint64_t *)&v37 * v28;
              goto LABEL_30;
            }
          }
        }
        LOWORD(a10) = *(_WORD *)(result + v18);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v19);
        v19 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v19 >= 0xFFFF)
          LOWORD(v19) = -1;
      }
      if (*(_WORD *)(a3 + v18 + 2))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 2);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v20);
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 0xFFFF)
          LOWORD(v20) = -1;
        else
          LOWORD(v20) = (uint64_t)a10 & ~(unsigned __int16)((int)(uint64_t)a10 >> 31);
      }
      if (*(_WORD *)(a3 + v18 + 4))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 4);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int16 *)(a3 + v18 + 4));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 0xFFFF)
          LOWORD(v38) = -1;
        else
          LOWORD(v38) = (uint64_t)a10 & ~(unsigned __int16)((int)(uint64_t)a10 >> 31);
      }
      else
      {
        LOWORD(v38) = 0;
      }
      v24 = v17 + 2;
      v26 = v17 + 3;
      v40 = *(unsigned __int16 *)(a3 + v18 + 6);
      if (*(_WORD *)(a3 + v18 + 6))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 6);
        v39 = v13 * (double)*(unint64_t *)&a10 / (double)v40;
LABEL_30:
        a10 = rint(v39);
        v40 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v40 >= 0xFFFF)
          LOWORD(v40) = -1;
      }
      v41 = (_WORD *)(a5 + v18);
      *v41 = v19;
      v41[1] = v20;
      *(_WORD *)(a5 + 2 * v24) = v38;
      *(_WORD *)(a5 + 2 * v26) = v40;
      v17 += 4;
      v18 += 8;
    }
    while (v17 <= v11 - 4);
    v17 = v17;
LABEL_34:
    if ((int)v17 < (int)v12)
    {
      do
      {
        v42 = *(unsigned __int16 *)(a3 + 2 * v17);
        if (*(_WORD *)(a3 + 2 * v17))
        {
          LOWORD(a10) = *(_WORD *)(result + 2 * v17);
          a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v42);
          v42 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
          if (v42 >= 0xFFFF)
            LOWORD(v42) = -1;
        }
        *(_WORD *)(a5 + 2 * v17++) = v42;
      }
      while (v12 != v17);
    }
    a5 += v14;
    a3 += v15;
    result += v16;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t cv::div16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int16 *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = 2 * (a6 >> 1);
  v12 = *a8;
  v13 = 2 * (a4 >> 1);
  v14 = 2 * (a2 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      v15 = 0;
      goto LABEL_48;
    }
    v16 = 0;
    v15 = 0;
    do
    {
      LOWORD(v17) = *(_WORD *)(a3 + v16);
      LOWORD(v18) = *(_WORD *)(a3 + v16 + 2);
      if ((_WORD)v17)
      {
        if (*(_WORD *)(a3 + v16 + 2))
        {
          if (*(_WORD *)(a3 + v16 + 4))
          {
            v19 = *(_WORD *)(a3 + v16 + 6);
            if (v19)
            {
              v20 = v15 | 2;
              v21 = v15 | 3;
              v22 = (double)(__int16)v17;
              v23 = (double)(__int16)v18;
              v24 = (double)*(__int16 *)(a3 + v16 + 4);
              v25 = (double)v19;
              v26 = v12 / (v22 * v23 * (v24 * v25));
              v27 = v24 * v25 * v26;
              v28 = v22 * v23 * v26;
              v29 = (__int16 *)(result + v16);
              v17 = (uint64_t)rint(v27 * (double)*(__int16 *)(result + v16) * v23);
              if ((int)v17 <= -32768)
                LODWORD(v17) = -32768;
              if ((int)v17 >= 0x7FFF)
                LOWORD(v17) = 0x7FFF;
              v18 = (uint64_t)rint(v27 * (double)v29[1] * v22);
              if ((int)v18 <= -32768)
                LODWORD(v18) = -32768;
              if ((int)v18 >= 0x7FFF)
                LOWORD(v18) = 0x7FFF;
              v30 = (uint64_t)rint(v28 * (double)v29[2] * v25);
              if ((int)v30 <= -32768)
                LODWORD(v30) = -32768;
              if ((int)v30 >= 0x7FFF)
                LOWORD(v30) = 0x7FFF;
              v31 = v28 * (double)v29[3] * v24;
              goto LABEL_42;
            }
          }
        }
        v17 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16) / (double)(__int16)v17);
        if ((int)v17 <= -32768)
          LODWORD(v17) = -32768;
        if ((int)v17 >= 0x7FFF)
          LOWORD(v17) = 0x7FFF;
      }
      if (*(_WORD *)(a3 + v16 + 2))
      {
        v32 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16 + 2) / (double)(__int16)v18);
        if ((int)v32 <= -32768)
          LODWORD(v32) = -32768;
        if ((int)v32 >= 0x7FFF)
          LOWORD(v18) = 0x7FFF;
        else
          LOWORD(v18) = v32;
      }
      if (*(_WORD *)(a3 + v16 + 4))
      {
        v33 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16 + 4) / (double)*(__int16 *)(a3 + v16 + 4));
        if ((int)v33 <= -32768)
          LODWORD(v33) = -32768;
        if ((int)v33 >= 0x7FFF)
          LOWORD(v30) = 0x7FFF;
        else
          LOWORD(v30) = v33;
      }
      else
      {
        LOWORD(v30) = 0;
      }
      v20 = v15 + 2;
      v21 = v15 + 3;
      LOWORD(v34) = *(_WORD *)(a3 + v16 + 6);
      if ((_WORD)v34)
      {
        v31 = v12 * (double)*(__int16 *)(result + v16 + 6) / (double)(__int16)v34;
LABEL_42:
        v34 = (uint64_t)rint(v31);
        if ((int)v34 <= -32768)
          LODWORD(v34) = -32768;
        if ((int)v34 >= 0x7FFF)
          LOWORD(v34) = 0x7FFF;
      }
      v35 = (_WORD *)(a5 + v16);
      *v35 = v17;
      v35[1] = v18;
      *(_WORD *)(a5 + 2 * v20) = v30;
      *(_WORD *)(a5 + 2 * v21) = v34;
      v15 += 4;
      v16 += 8;
    }
    while (v15 <= v9 - 4);
    v15 = v15;
LABEL_48:
    if ((int)v15 < (int)v10)
    {
      do
      {
        LOWORD(v36) = *(_WORD *)(a3 + 2 * v15);
        if ((_WORD)v36)
        {
          v36 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + 2 * v15) / (double)(__int16)v36);
          if ((int)v36 <= -32768)
            LODWORD(v36) = -32768;
          if ((int)v36 >= 0x7FFF)
            LOWORD(v36) = 0x7FFF;
        }
        *(_WORD *)(a5 + 2 * v15++) = v36;
      }
      while (v10 != v15);
    }
    a5 += v11;
    a3 += v13;
    result += v14;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *a8;
  v11 = 4 * (a6 >> 2);
  v12 = 4 * (a4 >> 2);
  v13 = 4 * (a2 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      v14 = 0;
      goto LABEL_21;
    }
    v15 = 0;
    v14 = 0;
    do
    {
      LODWORD(v16) = *(_DWORD *)(a3 + v15);
      LODWORD(v17) = *(_DWORD *)(a3 + v15 + 4);
      if ((_DWORD)v16)
      {
        if ((_DWORD)v17)
        {
          v18 = *(_DWORD *)(a3 + v15 + 8);
          if (v18)
          {
            v19 = *(_DWORD *)(a3 + v15 + 12);
            if (v19)
            {
              v20 = (double)v18;
              v21 = (double)v19;
              v22 = (double)(int)v16 * (double)(int)v17;
              v23 = (double)v18 * (double)v19;
              v24 = v10 / (v22 * v23);
              v25 = v23 * v24;
              v26 = v14 | 2;
              v27 = (uint64_t)rint(v25 * (double)*(int *)(result + v15) * (double)(int)v17);
              v28 = v14 | 3;
              v17 = (uint64_t)rint(v25 * (double)*(int *)(result + v15 + 4) * (double)(int)v16);
              v29 = (uint64_t)rint(v22 * v24 * (double)*(int *)(result + v15 + 8) * v21);
              v30 = (uint64_t)rint(v22 * v24 * (double)*(int *)(result + v15 + 12) * v20);
              LODWORD(v16) = v27;
              goto LABEL_19;
            }
          }
        }
        v16 = (uint64_t)rint(v10 * (double)*(int *)(result + v15) / (double)(int)v16);
      }
      if ((_DWORD)v17)
        v17 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 4) / (double)(int)v17);
      v31 = *(_DWORD *)(a3 + v15 + 8);
      if (v31)
        v29 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 8) / (double)v31);
      else
        LODWORD(v29) = 0;
      v26 = v14 + 2;
      v28 = v14 + 3;
      LODWORD(v30) = *(_DWORD *)(a3 + v15 + 12);
      if ((_DWORD)v30)
        v30 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 12) / (double)(int)v30);
LABEL_19:
      v32 = (_DWORD *)(a5 + v15);
      *v32 = v16;
      v32[1] = v17;
      *(_DWORD *)(a5 + 4 * v26) = v29;
      *(_DWORD *)(a5 + 4 * v28) = v30;
      v14 += 4;
      v15 += 16;
    }
    while (v14 <= v9 - 4);
    v14 = v14;
LABEL_21:
    if ((int)v14 < (int)v9)
    {
      do
      {
        LODWORD(v33) = *(_DWORD *)(a3 + 4 * v14);
        if ((_DWORD)v33)
          v33 = (uint64_t)rint(v10 * (double)*(int *)(result + 4 * v14) / (double)(int)v33);
        *(_DWORD *)(a5 + 4 * v14++) = v33;
      }
      while (v14 < v9);
    }
    a5 += v11;
    a3 += v12;
    result += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  double v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = 4 * (a2 >> 2);
  v13 = 4 * (a4 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      v14 = 0;
      goto LABEL_21;
    }
    v14 = 0;
    v15 = 8;
    do
    {
      v17 = *(float *)(a3 + v15 - 8);
      v16 = *(float *)(a3 + v15 - 4);
      v18 = 0.0;
      v19 = 0.0;
      if (v17 != 0.0)
      {
        if (v16 != 0.0)
        {
          v20 = *(float *)(a3 + v15);
          if (v20 != 0.0)
          {
            v21 = *(float *)(a3 + v15 + 4);
            if (v21 != 0.0)
            {
              v22 = v17;
              v23 = v16;
              v24 = v17 * v23;
              v25 = v20;
              v26 = v21;
              v27 = v20 * v26;
              v28 = v11 / (v24 * v27);
              v29 = v27 * v28;
              v30 = v24 * v28;
              v31 = v14 + 2;
              v32 = v14 + 3;
              v19 = v27 * v28 * *(float *)(result + v15 - 8) * v23;
              v18 = v29 * *(float *)(result + v15 - 4) * v22;
              v33 = v30 * *(float *)(result + v15) * v26;
              v34 = v30 * *(float *)(result + v15 + 4) * v25;
LABEL_18:
              v36 = v34;
              goto LABEL_19;
            }
          }
        }
        v19 = v11 * *(float *)(result + v15 - 8) / v17;
      }
      if (v16 != 0.0)
        v18 = v11 * *(float *)(result + v15 - 4) / v16;
      v35 = *(float *)(a3 + v15);
      v36 = 0.0;
      v33 = 0.0;
      if (v35 != 0.0)
        v33 = v11 * *(float *)(result + v15) / v35;
      v31 = v14 | 2;
      v32 = v14 | 3;
      v37 = *(float *)(a3 + v15 + 4);
      if (v37 != 0.0)
      {
        v34 = v11 * *(float *)(result + v15 + 4) / v37;
        goto LABEL_18;
      }
LABEL_19:
      v38 = a5 + v15;
      *(float *)(v38 - 8) = v19;
      *(float *)(v38 - 4) = v18;
      *(float *)(a5 + 4 * v31) = v33;
      *(float *)(a5 + 4 * v32) = v36;
      v14 += 4;
      v15 += 16;
    }
    while (v14 <= v9 - 4);
    v14 = v14;
LABEL_21:
    if ((int)v14 < (int)v10)
    {
      do
      {
        v39 = *(float *)(a3 + 4 * v14);
        if (v39 == 0.0)
          v40 = 0.0;
        else
          v40 = v11 * *(float *)(result + 4 * v14) / v39;
        *(float *)(a5 + 4 * v14++) = v40;
      }
      while (v10 != v14);
    }
    a5 += 4 * (a6 >> 2);
    result += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = 8 * (a2 >> 3);
  v13 = 8 * (a4 >> 3);
  do
  {
    if ((int)v9 < 4)
    {
      v14 = 0;
      goto LABEL_20;
    }
    v14 = 0;
    v15 = 16;
    do
    {
      v17 = *(double *)(a3 + v15 - 16);
      v16 = *(double *)(a3 + v15 - 8);
      v18 = 0.0;
      v19 = 0.0;
      if (v17 != 0.0)
      {
        if (v16 != 0.0)
        {
          v20 = *(double *)(a3 + v15);
          if (v20 != 0.0)
          {
            v21 = *(double *)(a3 + v15 + 8);
            if (v21 != 0.0)
            {
              v22 = v11 / (v17 * v16 * (v20 * v21));
              v23 = v20 * v21 * v22;
              v24 = v17 * v16 * v22;
              v19 = v16 * (v23 * *(double *)(result + v15 - 16));
              v25 = v14 + 2;
              v26 = v14 + 3;
              v18 = v17 * (v23 * *(double *)(result + v15 - 8));
              v27 = v21 * (v24 * *(double *)(result + v15));
              v28 = v20 * (v24 * *(double *)(result + v15 + 8));
              goto LABEL_18;
            }
          }
        }
        v19 = v11 * *(double *)(result + v15 - 16) / v17;
      }
      if (v16 != 0.0)
        v18 = v11 * *(double *)(result + v15 - 8) / v16;
      v29 = *(double *)(a3 + v15);
      v28 = 0.0;
      v27 = 0.0;
      if (v29 != 0.0)
        v27 = v11 * *(double *)(result + v15) / v29;
      v25 = v14 | 2;
      v26 = v14 | 3;
      v30 = *(double *)(a3 + v15 + 8);
      if (v30 != 0.0)
        v28 = v11 * *(double *)(result + v15 + 8) / v30;
LABEL_18:
      v31 = a5 + v15;
      *(double *)(v31 - 16) = v19;
      *(double *)(v31 - 8) = v18;
      *(double *)(a5 + 8 * v25) = v27;
      *(double *)(a5 + 8 * v26) = v28;
      v14 += 4;
      v15 += 32;
    }
    while (v14 <= v9 - 4);
    v14 = v14;
LABEL_20:
    if ((int)v14 < (int)v10)
    {
      do
      {
        v32 = *(double *)(a3 + 8 * v14);
        if (v32 == 0.0)
          v33 = 0.0;
        else
          v33 = v11 * *(double *)(result + 8 * v14) / v32;
        *(double *)(a5 + 8 * v14++) = v33;
      }
      while (v10 != v14);
    }
    a5 += 8 * (a6 >> 3);
    result += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::recip_<unsigned char>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, double a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  _BYTE *v34;
  int v35;
  double v36;
  int v37;

  v6 = a5[1];
  a5[1] = v6 - 1;
  if (!v6)
    return result;
  LODWORD(v7) = *a5;
  do
  {
    if ((int)v7 < 4)
    {
      v8 = 0;
      goto LABEL_33;
    }
    v8 = 0;
    do
    {
      v9 = *(unsigned __int8 *)(result + v8);
      if (*(_BYTE *)(result + v8))
      {
        v10 = result + v8;
        v11 = *(unsigned __int8 *)(result + v8 + 1);
        if (*(_BYTE *)(result + v8 + 1))
        {
          v12 = *(unsigned __int8 *)(v10 + 2);
          if (*(_BYTE *)(v10 + 2))
          {
            v13 = *(unsigned __int8 *)(result + v8 + 3);
            if (*(_BYTE *)(result + v8 + 3))
            {
              v14 = v8 | 2;
              v15 = v8 | 3;
              v16 = (double)v9;
              v17 = (double)v12;
              v18 = (double)v9 * (double)v11;
              v19 = (double)v12 * (double)v13;
              v20 = a6 / (v18 * v19);
              v21 = v19 * v20;
              v22 = v18 * v20;
              v23 = rint(v21 * (double)v11);
              v9 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
              v24 = (uint64_t)rint(v21 * v16);
              if (v9 >= 255)
                LOBYTE(v9) = -1;
              v25 = v24 & ~((int)v24 >> 31);
              if (v25 >= 255)
                LOBYTE(v25) = -1;
              v26 = rint(v22 * (double)v13);
              v27 = (uint64_t)v26 & ~((int)(uint64_t)v26 >> 31);
              if (v27 >= 255)
                LOBYTE(v27) = -1;
              v28 = v22 * v17;
              goto LABEL_29;
            }
          }
        }
        v29 = rint(a6 / (double)v9);
        v9 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v9 >= 255)
          LOBYTE(v9) = -1;
      }
      v25 = *(unsigned __int8 *)(result + v8 + 1);
      if (*(_BYTE *)(result + v8 + 1))
      {
        v30 = rint(a6 / (double)v25);
        v25 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
        if (v25 >= 255)
          LOBYTE(v25) = -1;
      }
      if (*(_BYTE *)(result + v8 + 2))
      {
        v31 = rint(a6 / (double)*(unsigned __int8 *)(result + v8 + 2));
        if ((int)((uint64_t)v31 & ~((int)(uint64_t)v31 >> 31)) >= 255)
          LOBYTE(v27) = -1;
        else
          LOBYTE(v27) = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
      }
      else
      {
        LOBYTE(v27) = 0;
      }
      v14 = v8 + 2;
      v15 = v8 + 3;
      v32 = *(unsigned __int8 *)(result + v8 + 3);
      if (*(_BYTE *)(result + v8 + 3))
      {
        v28 = a6 / (double)v32;
LABEL_29:
        v33 = rint(v28);
        v32 = (uint64_t)v33 & ~((int)(uint64_t)v33 >> 31);
        if (v32 >= 255)
          LOBYTE(v32) = -1;
      }
      v34 = (_BYTE *)(a3 + v8);
      *v34 = v9;
      v34[1] = v25;
      *(_BYTE *)(a3 + v14) = v27;
      *(_BYTE *)(a3 + v15) = v32;
      v8 += 4;
      v7 = *a5;
    }
    while (v8 <= v7 - 4);
    v8 = v8;
LABEL_33:
    if ((int)v8 < (int)v7)
    {
      do
      {
        v35 = *(unsigned __int8 *)(result + v8);
        if (*(_BYTE *)(result + v8))
        {
          v36 = rint(a6 / (double)v35);
          v35 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
          if (v35 >= 255)
            LOBYTE(v35) = -1;
        }
        *(_BYTE *)(a3 + v8++) = v35;
        v7 = *a5;
      }
      while (v8 < v7);
    }
    result += a2;
    a3 += a4;
    v37 = a5[1];
    a5[1] = v37 - 1;
  }
  while (v37);
  return result;
}

uint64_t cv::recip8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, double *a8)
{
  uint64_t v9;

  v9 = *a7;
  return cv::recip_<unsigned char>(a3, a4, a5, a6, (int *)&v9, *a8);
}

void cv::recip8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;

  v8 = a7[1];
  if (!v8)
    return;
  v9 = *a7;
  v10 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      v11 = 0;
      goto LABEL_48;
    }
    v11 = 0;
    do
    {
      LOBYTE(v12) = *(_BYTE *)(a3 + v11);
      LOBYTE(v13) = *(_BYTE *)(a3 + v11 + 1);
      if ((_BYTE)v12)
      {
        if (*(_BYTE *)(a3 + v11 + 1))
        {
          if (*(_BYTE *)(a3 + v11 + 2))
          {
            v14 = *(_BYTE *)(a3 + v11 + 3);
            if (v14)
            {
              v15 = v11 | 2;
              v16 = (double)(char)v12;
              v17 = v11 | 3;
              v18 = (double)(char)v13;
              v19 = (double)*(char *)(a3 + v11 + 2);
              v20 = (double)v14;
              v21 = v10 / (v16 * v18 * (v19 * v20));
              v22 = v19 * v20 * v21;
              v23 = v16 * v18 * v21;
              v12 = (uint64_t)rint(v22 * v18);
              if ((int)v12 <= -128)
                LODWORD(v12) = -128;
              if ((int)v12 >= 127)
                LOBYTE(v12) = 127;
              v13 = (uint64_t)rint(v22 * v16);
              if ((int)v13 <= -128)
                LODWORD(v13) = -128;
              if ((int)v13 >= 127)
                LOBYTE(v13) = 127;
              v24 = (uint64_t)rint(v23 * v20);
              if ((int)v24 <= -128)
                LODWORD(v24) = -128;
              if ((int)v24 >= 127)
                LOBYTE(v24) = 127;
              v25 = v23 * v19;
              goto LABEL_42;
            }
          }
        }
        v12 = (uint64_t)rint(v10 / (double)(char)v12);
        if ((int)v12 <= -128)
          LODWORD(v12) = -128;
        if ((int)v12 >= 127)
          LOBYTE(v12) = 127;
      }
      if (*(_BYTE *)(a3 + v11 + 1))
      {
        v26 = (uint64_t)rint(v10 / (double)(char)v13);
        if ((int)v26 <= -128)
          LODWORD(v26) = -128;
        if ((int)v26 >= 127)
          LOBYTE(v13) = 127;
        else
          LOBYTE(v13) = v26;
      }
      if (*(_BYTE *)(a3 + v11 + 2))
      {
        v27 = (uint64_t)rint(v10 / (double)*(char *)(a3 + v11 + 2));
        if ((int)v27 <= -128)
          LODWORD(v27) = -128;
        if ((int)v27 >= 127)
          LOBYTE(v24) = 127;
        else
          LOBYTE(v24) = v27;
      }
      else
      {
        LOBYTE(v24) = 0;
      }
      v15 = v11 + 2;
      v17 = v11 + 3;
      LOBYTE(v28) = *(_BYTE *)(a3 + v11 + 3);
      if ((_BYTE)v28)
      {
        v25 = v10 / (double)(char)v28;
LABEL_42:
        v28 = (uint64_t)rint(v25);
        if ((int)v28 <= -128)
          LODWORD(v28) = -128;
        if ((int)v28 >= 127)
          LOBYTE(v28) = 127;
      }
      v29 = (_BYTE *)(a5 + v11);
      *v29 = v12;
      v29[1] = v13;
      *(_BYTE *)(a5 + v15) = v24;
      *(_BYTE *)(a5 + v17) = v28;
      v11 += 4;
    }
    while (v11 <= v9 - 4);
    v11 = v11;
LABEL_48:
    if ((int)v11 < (int)v9)
    {
      do
      {
        LOBYTE(v30) = *(_BYTE *)(a3 + v11);
        if ((_BYTE)v30)
        {
          v30 = (uint64_t)rint(v10 / (double)(char)v30);
          if ((int)v30 <= -128)
            LODWORD(v30) = -128;
          if ((int)v30 >= 127)
            LOBYTE(v30) = 127;
        }
        *(_BYTE *)(a5 + v11++) = v30;
      }
      while (v11 < v9);
    }
    a3 += a4;
    a5 += a6;
    --v8;
  }
  while (v8);
}

void cv::recip16u(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  _WORD *v40;
  int v41;
  double v42;

  v8 = a7[1];
  if (!v8)
    return;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = 2 * (a6 >> 1);
  v13 = 2 * (a4 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      v14 = 0;
      goto LABEL_34;
    }
    v15 = 0;
    v14 = 0;
    do
    {
      v16 = *(unsigned __int16 *)(a3 + v15);
      v17 = *(unsigned __int16 *)(a3 + v15 + 2);
      if (*(_WORD *)(a3 + v15))
      {
        if (*(_WORD *)(a3 + v15 + 2))
        {
          v18 = a3 + v15;
          v19 = *(unsigned __int16 *)(a3 + v15 + 4);
          if (*(_WORD *)(a3 + v15 + 4))
          {
            v20 = *(unsigned __int16 *)(v18 + 6);
            if (*(_WORD *)(v18 + 6))
            {
              v21 = v14 | 2;
              v22 = v14 | 3;
              v23 = (double)v16;
              v24 = (double)v19;
              v25 = (double)v16 * (double)v17;
              v26 = (double)v19 * (double)v20;
              v27 = v11 / (v25 * v26);
              v28 = v26 * v27;
              v29 = v25 * v27;
              v30 = rint(v28 * (double)v17);
              v16 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
              v31 = (uint64_t)rint(v28 * v23);
              if (v16 >= 0xFFFF)
                LOWORD(v16) = -1;
              v17 = v31 & ~((int)v31 >> 31);
              if ((int)v17 >= 0xFFFF)
                LOWORD(v17) = -1;
              v32 = rint(v29 * (double)v20);
              v33 = (uint64_t)v32 & ~((int)(uint64_t)v32 >> 31);
              if (v33 >= 0xFFFF)
                LOWORD(v33) = -1;
              v34 = v29 * v24;
              goto LABEL_30;
            }
          }
        }
        v35 = rint(v11 / (double)v16);
        v16 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
        if (v16 >= 0xFFFF)
          LOWORD(v16) = -1;
      }
      if (*(_WORD *)(a3 + v15 + 2))
      {
        v36 = rint(v11 / (double)v17);
        if ((int)((uint64_t)v36 & ~((int)(uint64_t)v36 >> 31)) >= 0xFFFF)
          LOWORD(v17) = -1;
        else
          LOWORD(v17) = (uint64_t)v36 & ~(unsigned __int16)((int)(uint64_t)v36 >> 31);
      }
      if (*(_WORD *)(a3 + v15 + 4))
      {
        v37 = rint(v11 / (double)*(unsigned __int16 *)(a3 + v15 + 4));
        if ((int)((uint64_t)v37 & ~((int)(uint64_t)v37 >> 31)) >= 0xFFFF)
          LOWORD(v33) = -1;
        else
          LOWORD(v33) = (uint64_t)v37 & ~(unsigned __int16)((int)(uint64_t)v37 >> 31);
      }
      else
      {
        LOWORD(v33) = 0;
      }
      v21 = v14 + 2;
      v22 = v14 + 3;
      v38 = *(unsigned __int16 *)(a3 + v15 + 6);
      if (*(_WORD *)(a3 + v15 + 6))
      {
        v34 = v11 / (double)v38;
LABEL_30:
        v39 = rint(v34);
        v38 = (uint64_t)v39 & ~((int)(uint64_t)v39 >> 31);
        if (v38 >= 0xFFFF)
          LOWORD(v38) = -1;
      }
      v40 = (_WORD *)(a5 + v15);
      *v40 = v16;
      v40[1] = v17;
      *(_WORD *)(a5 + 2 * v21) = v33;
      *(_WORD *)(a5 + 2 * v22) = v38;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= v9 - 4);
    v14 = v14;
LABEL_34:
    if ((int)v14 < (int)v10)
    {
      do
      {
        v41 = *(unsigned __int16 *)(a3 + 2 * v14);
        if (*(_WORD *)(a3 + 2 * v14))
        {
          v42 = rint(v11 / (double)v41);
          v41 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
          if (v41 >= 0xFFFF)
            LOWORD(v41) = -1;
        }
        *(_WORD *)(a5 + 2 * v14++) = v41;
      }
      while (v10 != v14);
    }
    a5 += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
}

void cv::recip16s(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;

  v8 = a7[1];
  if (!v8)
    return;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  v12 = 2 * (a6 >> 1);
  v13 = 2 * (a4 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      v14 = 0;
      goto LABEL_48;
    }
    v15 = 0;
    v14 = 0;
    do
    {
      LOWORD(v16) = *(_WORD *)(a3 + v15);
      LOWORD(v17) = *(_WORD *)(a3 + v15 + 2);
      if ((_WORD)v16)
      {
        if (*(_WORD *)(a3 + v15 + 2))
        {
          if (*(_WORD *)(a3 + v15 + 4))
          {
            v18 = *(_WORD *)(a3 + v15 + 6);
            if (v18)
            {
              v19 = v14 | 2;
              v20 = (double)(__int16)v16;
              v21 = v14 | 3;
              v22 = (double)(__int16)v17;
              v23 = (double)*(__int16 *)(a3 + v15 + 4);
              v24 = (double)v18;
              v25 = v11 / (v20 * v22 * (v23 * v24));
              v26 = v23 * v24 * v25;
              v27 = v20 * v22 * v25;
              v16 = (uint64_t)rint(v26 * v22);
              if ((int)v16 <= -32768)
                LODWORD(v16) = -32768;
              if ((int)v16 >= 0x7FFF)
                LOWORD(v16) = 0x7FFF;
              v17 = (uint64_t)rint(v26 * v20);
              if ((int)v17 <= -32768)
                LODWORD(v17) = -32768;
              if ((int)v17 >= 0x7FFF)
                LOWORD(v17) = 0x7FFF;
              v28 = (uint64_t)rint(v27 * v24);
              if ((int)v28 <= -32768)
                LODWORD(v28) = -32768;
              if ((int)v28 >= 0x7FFF)
                LOWORD(v28) = 0x7FFF;
              v29 = v27 * v23;
              goto LABEL_42;
            }
          }
        }
        v16 = (uint64_t)rint(v11 / (double)(__int16)v16);
        if ((int)v16 <= -32768)
          LODWORD(v16) = -32768;
        if ((int)v16 >= 0x7FFF)
          LOWORD(v16) = 0x7FFF;
      }
      if (*(_WORD *)(a3 + v15 + 2))
      {
        v30 = (uint64_t)rint(v11 / (double)(__int16)v17);
        if ((int)v30 <= -32768)
          LODWORD(v30) = -32768;
        if ((int)v30 >= 0x7FFF)
          LOWORD(v17) = 0x7FFF;
        else
          LOWORD(v17) = v30;
      }
      if (*(_WORD *)(a3 + v15 + 4))
      {
        v31 = (uint64_t)rint(v11 / (double)*(__int16 *)(a3 + v15 + 4));
        if ((int)v31 <= -32768)
          LODWORD(v31) = -32768;
        if ((int)v31 >= 0x7FFF)
          LOWORD(v28) = 0x7FFF;
        else
          LOWORD(v28) = v31;
      }
      else
      {
        LOWORD(v28) = 0;
      }
      v19 = v14 + 2;
      v21 = v14 + 3;
      LOWORD(v32) = *(_WORD *)(a3 + v15 + 6);
      if ((_WORD)v32)
      {
        v29 = v11 / (double)(__int16)v32;
LABEL_42:
        v32 = (uint64_t)rint(v29);
        if ((int)v32 <= -32768)
          LODWORD(v32) = -32768;
        if ((int)v32 >= 0x7FFF)
          LOWORD(v32) = 0x7FFF;
      }
      v33 = (_WORD *)(a5 + v15);
      *v33 = v16;
      v33[1] = v17;
      *(_WORD *)(a5 + 2 * v19) = v28;
      *(_WORD *)(a5 + 2 * v21) = v32;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= v9 - 4);
    v14 = v14;
LABEL_48:
    if ((int)v14 < (int)v10)
    {
      do
      {
        LOWORD(v34) = *(_WORD *)(a3 + 2 * v14);
        if ((_WORD)v34)
        {
          v34 = (uint64_t)rint(v11 / (double)(__int16)v34);
          if ((int)v34 <= -32768)
            LODWORD(v34) = -32768;
          if ((int)v34 >= 0x7FFF)
            LOWORD(v34) = 0x7FFF;
        }
        *(_WORD *)(a5 + 2 * v14++) = v34;
      }
      while (v10 != v14);
    }
    a5 += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
}

void cv::recip32s(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;

  v8 = a7[1];
  if (!v8)
    return;
  v9 = *a7;
  v10 = *a8;
  v11 = 4 * (a6 >> 2);
  v12 = 4 * (a4 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      v13 = 0;
      goto LABEL_21;
    }
    v14 = 0;
    v13 = 0;
    do
    {
      LODWORD(v15) = *(_DWORD *)(a3 + v14);
      LODWORD(v16) = *(_DWORD *)(a3 + v14 + 4);
      if ((_DWORD)v15)
      {
        if ((_DWORD)v16)
        {
          v17 = *(_DWORD *)(a3 + v14 + 8);
          if (v17)
          {
            v18 = *(_DWORD *)(a3 + v14 + 12);
            if (v18)
            {
              v19 = v13 | 2;
              v20 = (double)(int)v15;
              v21 = (double)v17;
              v22 = (double)(int)v15 * (double)(int)v16;
              v23 = (double)v17 * (double)v18;
              v24 = v10 / (v22 * v23);
              v25 = v23 * v24;
              v26 = v22 * v24;
              v15 = (uint64_t)rint(v25 * (double)(int)v16);
              v16 = (uint64_t)rint(v25 * v20);
              v27 = (uint64_t)rint(v26 * (double)v18);
              v28 = v13 | 3;
              v29 = (uint64_t)rint(v26 * v21);
              goto LABEL_19;
            }
          }
        }
        v15 = (uint64_t)rint(v10 / (double)(int)v15);
      }
      if ((_DWORD)v16)
        v16 = (uint64_t)rint(v10 / (double)(int)v16);
      v30 = *(_DWORD *)(a3 + v14 + 8);
      if (v30)
        v27 = (uint64_t)rint(v10 / (double)v30);
      else
        LODWORD(v27) = 0;
      v19 = v13 + 2;
      v28 = v13 + 3;
      LODWORD(v29) = *(_DWORD *)(a3 + v14 + 12);
      if ((_DWORD)v29)
        v29 = (uint64_t)rint(v10 / (double)(int)v29);
LABEL_19:
      v31 = (_DWORD *)(a5 + v14);
      *v31 = v15;
      v31[1] = v16;
      *(_DWORD *)(a5 + 4 * v19) = v27;
      *(_DWORD *)(a5 + 4 * v28) = v29;
      v13 += 4;
      v14 += 16;
    }
    while (v13 <= v9 - 4);
    v13 = v13;
LABEL_21:
    if ((int)v13 < (int)v9)
    {
      do
      {
        LODWORD(v32) = *(_DWORD *)(a3 + 4 * v13);
        if ((_DWORD)v32)
          v32 = (uint64_t)rint(v10 / (double)(int)v32);
        *(_DWORD *)(a5 + 4 * v13++) = v32;
      }
      while (v13 < v9);
    }
    a5 += v11;
    a3 += v12;
    --v8;
  }
  while (v8);
}

float *cv::recip32f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float *result;
  float v37;
  float v38;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      v12 = 0;
      goto LABEL_21;
    }
    v13 = 0;
    v12 = 0;
    do
    {
      v15 = *(float *)(a3 + v13);
      v14 = *(float *)(a3 + v13 + 4);
      v16 = 0.0;
      v17 = 0.0;
      if (v15 != 0.0)
      {
        if (v14 != 0.0)
        {
          v18 = *(float *)(a3 + v13 + 8);
          if (v18 != 0.0)
          {
            v19 = *(float *)(a3 + v13 + 12);
            if (v19 != 0.0)
            {
              v20 = v12 + 2;
              v21 = v12 + 3;
              v22 = v15;
              v23 = v14;
              v24 = v15 * v23;
              v25 = v18;
              v26 = v19;
              v27 = v18 * v26;
              v28 = v11 / (v24 * v27);
              v29 = v27 * v28;
              v30 = v24 * v28;
              v17 = v29 * v23;
              v16 = v29 * v22;
              v31 = v30 * v26;
              v32 = v30 * v25;
LABEL_18:
              v34 = v32;
              goto LABEL_19;
            }
          }
        }
        v17 = v11 / v15;
      }
      if (v14 != 0.0)
        v16 = v11 / v14;
      v33 = *(float *)(a3 + v13 + 8);
      v34 = 0.0;
      v31 = 0.0;
      if (v33 != 0.0)
        v31 = v11 / v33;
      v20 = v12 | 2;
      v21 = v12 | 3;
      v35 = *(float *)(a3 + v13 + 12);
      if (v35 != 0.0)
      {
        v32 = v11 / v35;
        goto LABEL_18;
      }
LABEL_19:
      result = (float *)(a5 + v13);
      *result = v17;
      result[1] = v16;
      *(float *)(a5 + 4 * v20) = v31;
      *(float *)(a5 + 4 * v21) = v34;
      v12 += 4;
      v13 += 16;
    }
    while (v12 <= v9 - 4);
    v12 = v12;
LABEL_21:
    if ((int)v12 < (int)v10)
    {
      do
      {
        v37 = *(float *)(a3 + 4 * v12);
        if (v37 == 0.0)
          v38 = 0.0;
        else
          v38 = v11 / v37;
        *(float *)(a5 + 4 * v12++) = v38;
      }
      while (v10 != v12);
    }
    a5 += 4 * (a6 >> 2);
    a3 += 4 * (a4 >> 2);
    --v8;
  }
  while (v8);
  return result;
}

double *cv::recip64f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *result;
  double v31;
  double v32;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = (int)*a7;
  v10 = *a7;
  v11 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      v12 = 0;
      goto LABEL_24;
    }
    v13 = 0;
    v12 = 0;
    do
    {
      v14 = a3 + v13;
      v16 = *(double *)(a3 + v13);
      v15 = *(double *)(a3 + v13 + 8);
      if (v16 == 0.0)
      {
        v24 = 0.0;
      }
      else
      {
        if (v15 != 0.0)
        {
          v17 = *(double *)(a3 + v13 + 16);
          if (v17 != 0.0)
          {
            v18 = *(double *)(a3 + v13 + 24);
            if (v18 != 0.0)
            {
              v19 = v12 + 2;
              v20 = v12 + 3;
              v21 = v11 / (v16 * v15 * (v17 * v18));
              v22 = v17 * v18 * v21;
              v23 = v16 * v15 * v21;
              v24 = v15 * v22;
              v25 = v16 * v22;
              v26 = v18 * v23;
              v27 = v17 * v23;
              goto LABEL_22;
            }
          }
        }
        v24 = v11 / v16;
      }
      if (v15 == 0.0)
        v25 = 0.0;
      else
        v25 = v11 / v15;
      v19 = v12 | 2;
      v28 = *(double *)(v14 + 16);
      v29 = *(double *)(v14 + 24);
      if (v28 == 0.0)
        v26 = 0.0;
      else
        v26 = v11 / v28;
      v20 = v12 | 3;
      if (v29 == 0.0)
        v27 = 0.0;
      else
        v27 = v11 / v29;
LABEL_22:
      result = (double *)(a5 + v13);
      *result = v24;
      result[1] = v25;
      *(double *)(a5 + 8 * v19) = v26;
      *(double *)(a5 + 8 * v20) = v27;
      v12 += 4;
      v13 += 32;
    }
    while (v12 <= v9 - 4);
    v12 = v12;
LABEL_24:
    if ((int)v12 < (int)v10)
    {
      do
      {
        v31 = *(double *)(a3 + 8 * v12);
        if (v31 == 0.0)
          v32 = 0.0;
        else
          v32 = v11 / v31;
        *(double *)(a5 + 8 * v12++) = v32;
      }
      while (v10 != v12);
    }
    a5 += 8 * (a6 >> 3);
    a3 += 8 * (a4 >> 3);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::addWeighted8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  double v8;
  double v9;
  double v10;
  int v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  _BYTE *v18;
  int32x2_t v19;
  int32x2_t v20;
  double v21;
  int v22;
  int v23;

  v8 = *a8;
  v9 = a8[1];
  v10 = a8[2];
  v11 = a7[1];
  a7[1] = v11 - 1;
  if (v11)
  {
    v12 = v8;
    v13 = v9;
    v14 = v10;
    LODWORD(v15) = *a7;
    do
    {
      if ((int)v15 >= 4)
      {
        v16 = 0;
        do
        {
          v17.i32[0] = (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16) + 128] * v13)
                                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16) + 128]
                                                           * v12))
                                           + v14));
          v17.i32[1] = (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 1) + 128]
                                                           * v13)
                                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 1) + 128]
                                                           * v12))
                                           + v14));
          v18 = (_BYTE *)(a5 + v16);
          v19 = vmin_s32(vmax_s32(v17, 0), (int32x2_t)0xFF000000FFLL);
          v18[1] = v19.i8[4];
          *v18 = v19.i8[0];
          v20 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 3)+ 128]* v13)+ (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 3)+ 128]* v12))+ v14)), (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 2)+ 128]* v13)+ (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 2)+ 128]* v12))+ v14))), 0), (int32x2_t)0xFF000000FFLL);
          v18[3] = v20.i8[4];
          v18[2] = v20.i8[0];
          v16 += 4;
          v15 = *a7;
        }
        while (v16 <= v15 - 4);
        v16 = v16;
      }
      else
      {
        v16 = 0;
      }
      if ((int)v16 < (int)v15)
      {
        do
        {
          v21 = rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16) + 128] * v13)
                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16) + 128] * v12))
                           + v14));
          v22 = (uint64_t)v21 & ~((int)(uint64_t)v21 >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          *(_BYTE *)(a5 + v16++) = v22;
          v15 = *a7;
        }
        while (v16 < v15);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      v23 = a7[1];
      a7[1] = v23 - 1;
    }
    while (v23);
  }
  return result;
}

uint64_t cv::addWeighted8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  int32x2_t v14;
  _BYTE *v15;
  int32x2_t v16;
  uint64_t v17;

  v8 = a7[1];
  if (v8)
  {
    v9 = *a7;
    v10 = *a8;
    v11 = a8[1];
    v12 = a8[2];
    do
    {
      if ((int)v9 >= 4)
      {
        v13 = 0;
        do
        {
          v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 1))+ (float)((float)*(char *)(result + v13 + 1) * v10))+ v12)), (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13))+ (float)((float)*(char *)(result + v13) * v10))+ v12))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v15 = (_BYTE *)(a5 + v13);
          v15[1] = v14.i8[4];
          *v15 = v14.i8[0];
          v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 3))+ (float)((float)*(char *)(result + v13 + 3) * v10))+ v12)), (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 2))+ (float)((float)*(char *)(result + v13 + 2) * v10))+ v12))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v15[3] = v16.i8[4];
          v15[2] = v16.i8[0];
          v13 += 4;
        }
        while (v13 <= v9 - 4);
        v13 = v13;
      }
      else
      {
        v13 = 0;
      }
      if ((int)v13 < (int)v9)
      {
        do
        {
          v17 = (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13))
                                            + (float)((float)*(char *)(result + v13) * v10))
                                    + v12));
          if ((int)v17 <= -128)
            LODWORD(v17) = -128;
          if ((int)v17 >= 127)
            LOBYTE(v17) = 127;
          *(_BYTE *)(a5 + v13++) = v17;
        }
        while (v13 < v9);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10, double a11, double a12, float a13)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  int v28;
  float v29;
  double v30;
  double v31;
  int v32;
  _WORD *v33;
  unsigned int v34;
  double v35;
  int v36;
  float v37;
  __int16 v38;
  int v39;
  int v40;

  v13 = a7[1];
  if (v13)
  {
    v14 = (int)*a7;
    v15 = *a7;
    v16 = *a8;
    v17 = a8[1];
    v18 = 2 * (a6 >> 1);
    v19 = a8[2];
    v20 = 2 * (a4 >> 1);
    v21 = 2 * (a2 >> 1);
    do
    {
      if ((int)v14 >= 4)
      {
        v23 = 0;
        v22 = 0;
        do
        {
          v24 = result + v23;
          LOWORD(a12) = *(_WORD *)(result + v23);
          v25 = a3 + v23;
          LOWORD(a13) = *(_WORD *)(a3 + v23);
          *(float *)&v26 = v17 * (float)LODWORD(a13);
          v27 = rint((float)((float)(*(float *)&v26 + (float)((float)LODWORD(a12) * v16)) + v19));
          v28 = (uint64_t)v27 & ~((int)(uint64_t)v27 >> 31);
          LOWORD(v27) = *(_WORD *)(result + v23 + 2);
          LOWORD(v26) = *(_WORD *)(a3 + v23 + 2);
          v29 = v17 * (float)v26;
          v30 = (float)((float)(v29 + (float)((float)LODWORD(v27) * v16)) + v19);
          if (v28 >= 0xFFFF)
            LOWORD(v28) = -1;
          v31 = rint(v30);
          v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
          if (v32 >= 0xFFFF)
            LOWORD(v32) = -1;
          v33 = (_WORD *)(a5 + v23);
          *v33 = v28;
          v33[1] = v32;
          LOWORD(v31) = *(_WORD *)(v24 + 4);
          LOWORD(v29) = *(_WORD *)(v25 + 4);
          *(float *)&v34 = v17 * (float)LODWORD(v29);
          v35 = rint((float)((float)(*(float *)&v34 + (float)((float)LODWORD(v31) * v16)) + v19));
          v36 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          LOWORD(v35) = *(_WORD *)(v24 + 6);
          LOWORD(v34) = *(_WORD *)(v25 + 6);
          a13 = v17 * (float)v34;
          v37 = (float)(a13 + (float)((float)LODWORD(v35) * v16)) + v19;
          if (v36 >= 0xFFFF)
            v38 = -1;
          else
            v38 = v36;
          a12 = rint(v37);
          v39 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v39 >= 0xFFFF)
            LOWORD(v39) = -1;
          v33[2] = v38;
          v33[3] = v39;
          v22 += 4;
          v23 += 8;
        }
        while (v22 <= v14 - 4);
        v22 = v22;
      }
      else
      {
        v22 = 0;
      }
      if ((int)v22 < (int)v15)
      {
        do
        {
          LOWORD(a12) = *(_WORD *)(result + 2 * v22);
          LOWORD(a13) = *(_WORD *)(a3 + 2 * v22);
          a13 = v17 * (float)LODWORD(a13);
          a12 = rint((float)((float)(a13 + (float)((float)LODWORD(a12) * v16)) + v19));
          v40 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v40 >= 0xFFFF)
            LOWORD(v40) = -1;
          *(_WORD *)(a5 + 2 * v22++) = v40;
        }
        while (v15 != v22);
      }
      a5 += v18;
      a3 += v20;
      result += v21;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::addWeighted16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  float v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;

  v8 = a7[1];
  if (v8)
  {
    v9 = (int)*a7;
    v10 = *a7;
    v11 = *a8;
    v12 = a8[1];
    v13 = 2 * (a6 >> 1);
    v14 = a8[2];
    v15 = 2 * (a4 >> 1);
    v16 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        v18 = 0;
        v17 = 0;
        do
        {
          v19 = result + v18;
          v20 = (__int16 *)(a3 + v18);
          v21 = (uint64_t)rint((float)((float)((float)(v12 * (float)*(__int16 *)(a3 + v18))
                                            + (float)((float)*(__int16 *)(result + v18) * v11))
                                    + v14));
          if ((int)v21 <= -32768)
            LODWORD(v21) = -32768;
          v22 = rint((float)((float)((float)(v12 * (float)v20[1]) + (float)((float)*(__int16 *)(result + v18 + 2) * v11))
                           + v14));
          if ((int)v21 >= 0x7FFF)
            LOWORD(v21) = 0x7FFF;
          v23 = (uint64_t)v22;
          if ((int)(uint64_t)v22 <= -32768)
            LODWORD(v23) = -32768;
          if ((int)v23 >= 0x7FFF)
            LOWORD(v23) = 0x7FFF;
          v24 = (_WORD *)(a5 + v18);
          *v24 = v21;
          v24[1] = v23;
          v25 = (uint64_t)rint((float)((float)((float)(v12 * (float)v20[2]) + (float)((float)*(__int16 *)(v19 + 4) * v11))
                                    + v14));
          v26 = (float)*(__int16 *)(v19 + 6);
          if ((int)v25 <= -32768)
            v27 = -32768;
          else
            v27 = v25;
          v28 = (float)((float)((float)(v12 * (float)v20[3]) + (float)(v26 * v11)) + v14);
          if (v27 >= 0x7FFF)
            LOWORD(v27) = 0x7FFF;
          v29 = (uint64_t)rint(v28);
          if ((int)v29 <= -32768)
            LODWORD(v29) = -32768;
          if ((int)v29 >= 0x7FFF)
            LOWORD(v29) = 0x7FFF;
          v24[2] = v27;
          v24[3] = v29;
          v17 += 4;
          v18 += 8;
        }
        while (v17 <= v9 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          v30 = (uint64_t)rint((float)((float)((float)(v12 * (float)*(__int16 *)(a3 + 2 * v17))
                                            + (float)((float)*(__int16 *)(result + 2 * v17) * v11))
                                    + v14));
          if ((int)v30 <= -32768)
            LODWORD(v30) = -32768;
          if ((int)v30 >= 0x7FFF)
            LOWORD(v30) = 0x7FFF;
          *(_WORD *)(a5 + 2 * v17++) = v30;
        }
        while (v10 != v17);
      }
      a5 += v13;
      a3 += v15;
      result += v16;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  _DWORD *v17;
  uint64_t v18;

  v8 = a7[1];
  if (v8)
  {
    v9 = *a7;
    v10 = *a8;
    v11 = a8[1];
    v12 = a8[2];
    v13 = 4 * (a6 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        v15 = 0;
        v14 = 0;
        do
        {
          v16 = rint(v12 + v11 * (double)*(int *)(a3 + v15 + 4) + (double)*(int *)(result + v15 + 4) * v10);
          v17 = (_DWORD *)(a5 + v15);
          *v17 = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15) + (double)*(int *)(result + v15) * v10);
          v17[1] = (uint64_t)v16;
          v18 = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15 + 12) + (double)*(int *)(result + v15 + 12) * v10);
          v17[2] = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15 + 8) + (double)*(int *)(result + v15 + 8) * v10);
          v17[3] = v18;
          v14 += 4;
          v15 += 16;
        }
        while (v14 <= v9 - 4);
        v14 = v14;
      }
      else
      {
        v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v14) = (uint64_t)rint(v12+ v11 * (double)*(int *)(a3 + 4 * v14)+ (double)*(int *)(result + 4 * v14) * v10);
          ++v14;
        }
        while (v14 < v9);
      }
      a5 += v13;
      a3 += 4 * (a4 >> 2);
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x2_t *v19;
  float v20;

  v8 = a7[1];
  if (v8)
  {
    v9 = (int)*a7;
    v10 = *a7;
    v11 = *(double *)a8;
    v12 = *(double *)(a8 + 8);
    v13 = *(uint64_t *)(a8 + 16);
    v14 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)a8, 0);
    v15 = (float64x2_t)vdupq_lane_s64(v13, 0);
    v16 = 4 * (a4 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        v18 = 0;
        v17 = 0;
        do
        {
          v19 = (float32x2_t *)(a5 + v18);
          *v19 = vcvt_f32_f64(vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a3 + v18)), v12), v14, vcvtq_f64_f32(*(float32x2_t *)(result + v18)))));
          v19[1] = vcvt_f32_f64(vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a3 + v18 + 8)), v12), v14, vcvtq_f64_f32(*(float32x2_t *)(result + v18 + 8)))));
          v17 += 4;
          v18 += 16;
        }
        while (v17 <= v9 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          v20 = *(double *)&v13 + v12 * *(float *)(a3 + 4 * v17) + *(float *)(result + 4 * v17) * v11;
          *(float *)(a5 + 4 * v17++) = v20;
        }
        while (v10 != v17);
      }
      a5 += 4 * (a6 >> 2);
      a3 += v16;
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;

  v8 = a7[1];
  if (v8)
  {
    v9 = (int)*a7;
    v10 = *a7;
    v11 = *(double *)a8;
    v12 = *(double *)(a8 + 8);
    v13 = *(uint64_t *)(a8 + 16);
    v14 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)a8, 0);
    v15 = (float64x2_t)vdupq_lane_s64(v13, 0);
    v16 = 8 * (a4 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        v18 = 0;
        v17 = 0;
        do
        {
          v19 = (float64x2_t *)(a5 + v18);
          *v19 = vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v18), v12), v14, *(float64x2_t *)(result + v18)));
          v19[1] = vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v18 + 16), v12), v14, *(float64x2_t *)(result + v18 + 16)));
          v17 += 4;
          v18 += 32;
        }
        while (v17 <= v9 - 4);
        v17 = v17;
      }
      else
      {
        v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v17) = *(double *)&v13
                                    + v12 * *(double *)(a3 + 8 * v17)
                                    + *(double *)(result + 8 * v17) * v11;
          ++v17;
        }
        while (v10 != v17);
      }
      a5 += 8 * (a6 >> 3);
      a3 += v16;
      result += 8 * (a2 >> 3);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cmp8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v8 = *a8;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v8 == 2)
      v8 = 4;
    else
      v8 = 1;
    v9 = a2;
    v10 = result;
LABEL_12:
    v12 = a7[1];
    v13 = v12 - 1;
    a7[1] = v12 - 1;
    if (v12)
    {
      LODWORD(v14) = *a7;
      do
      {
        if ((int)v14 >= 1)
        {
          v15 = 0;
          do
          {
            *(_BYTE *)(a5 + v15) = ((v8 == 1) ^ (*(unsigned __int8 *)(a3 + v15) <= *(unsigned __int8 *)(v10 + v15))) << 31 >> 31;
            ++v15;
            v14 = *a7;
          }
          while (v15 < v14);
          v13 = a7[1];
        }
        v16 = v13;
        a3 += a4;
        v10 += v9;
        a5 += a6;
        a7[1] = --v13;
      }
      while (v16);
    }
    return result;
  }
  if (v8 == 4 || v8 == 1)
  {
    v9 = a4;
    v10 = a3;
    a4 = a2;
    a3 = result;
    goto LABEL_12;
  }
  if (v8 == 5 || v8 == 0)
  {
    v18 = a7[1];
    v19 = v18 - 1;
    a7[1] = v18 - 1;
    if (v18)
    {
      LODWORD(v20) = *a7;
      do
      {
        if ((int)v20 >= 1)
        {
          v21 = 0;
          do
          {
            *(_BYTE *)(a5 + v21) = ((v8 == 0) ^ (*(unsigned __int8 *)(result + v21) != *(unsigned __int8 *)(a3 + v21))) << 31 >> 31;
            ++v21;
            v20 = *a7;
          }
          while (v21 < v20);
          v19 = a7[1];
        }
        v22 = v19;
        result += a2;
        a3 += a4;
        a5 += a6;
        a7[1] = --v19;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t cv::cmp8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _BYTE *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  _BYTE *v29;
  char v30;
  char v31;
  char v32;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2)
      v10 = 4;
    else
      v10 = 1;
    v11 = a2;
    v12 = result;
    a2 = a4;
    result = a3;
LABEL_35:
    if (v10 == 1)
      v23 = 0;
    else
      v23 = -1;
    for (; v8; --v8)
    {
      if ((int)v9 >= 4)
      {
        v24 = 0;
        do
        {
          v25 = result + v24;
          v26 = v12 + v24;
          if (*(char *)(result + v24 + 1) <= *(char *)(v12 + v24 + 1))
            v27 = v23;
          else
            v27 = ~v23;
          if (*(char *)(result + v24) <= *(char *)(v12 + v24))
            v28 = v23;
          else
            v28 = ~v23;
          v29 = (_BYTE *)(a5 + v24);
          *v29 = v28;
          v29[1] = v27;
          if (*(char *)(v25 + 3) <= *(char *)(v26 + 3))
            v30 = v23;
          else
            v30 = ~v23;
          if (*(char *)(v25 + 2) <= *(char *)(v26 + 2))
            v31 = v23;
          else
            v31 = ~v23;
          v29[2] = v31;
          v29[3] = v30;
          v24 += 4;
        }
        while (v24 <= v9 - 4);
        v24 = v24;
      }
      else
      {
        v24 = 0;
      }
      if ((int)v24 < (int)v9)
      {
        do
        {
          if (*(char *)(result + v24) <= *(char *)(v12 + v24))
            v32 = v23;
          else
            v32 = ~v23;
          *(_BYTE *)(a5 + v24++) = v32;
        }
        while (v24 < v9);
      }
      result += a2;
      v12 += v11;
      a5 += a6;
    }
  }
  else
  {
    v11 = a4;
    v12 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10)
          v13 = -1;
        else
          v13 = 0;
        for (; v8; --v8)
        {
          if ((int)v9 >= 4)
          {
            v14 = 0;
            do
            {
              v15 = result + v14;
              v16 = a3 + v14;
              if (*(unsigned __int8 *)(result + v14 + 1) == *(unsigned __int8 *)(a3 + v14 + 1))
                v17 = ~v13;
              else
                v17 = v13;
              if (*(unsigned __int8 *)(result + v14) == *(unsigned __int8 *)(a3 + v14))
                v18 = ~v13;
              else
                v18 = v13;
              v19 = (_BYTE *)(a5 + v14);
              *v19 = v18;
              v19[1] = v17;
              if (*(unsigned __int8 *)(v15 + 3) == *(unsigned __int8 *)(v16 + 3))
                v20 = ~v13;
              else
                v20 = v13;
              if (*(unsigned __int8 *)(v15 + 2) == *(unsigned __int8 *)(v16 + 2))
                v21 = ~v13;
              else
                v21 = v13;
              v19[2] = v21;
              v19[3] = v20;
              v14 += 4;
            }
            while (v14 <= v9 - 4);
            v14 = v14;
          }
          else
          {
            v14 = 0;
          }
          if ((int)v14 < (int)v9)
          {
            do
            {
              if (*(unsigned __int8 *)(result + v14) == *(unsigned __int8 *)(a3 + v14))
                v22 = ~v13;
              else
                v22 = v13;
              *(_BYTE *)(a5 + v14++) = v22;
            }
            while (v14 < v9);
          }
          result += a2;
          a3 += a4;
          a5 += a6;
        }
        break;
      case 1:
      case 4:
        goto LABEL_35;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _BYTE *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  _BYTE *v36;
  char v37;
  char v38;
  char v39;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = a2 >> 1;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2)
      v10 = 4;
    else
      v10 = 1;
    v12 = a2 >> 1;
    v13 = result;
    v11 = a4 >> 1;
    result = a3;
LABEL_36:
    if (v10 == 1)
      v27 = 0;
    else
      v27 = -1;
    if (v8)
    {
      v28 = 2 * v12;
      v29 = 2 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          v31 = 0;
          v30 = 0;
          do
          {
            v32 = result + v31;
            v33 = v13 + v31;
            if (*(unsigned __int16 *)(result + v31 + 2) <= *(unsigned __int16 *)(v13 + v31 + 2))
              v34 = v27;
            else
              v34 = ~v27;
            if (*(unsigned __int16 *)(result + v31) <= *(unsigned __int16 *)(v13 + v31))
              v35 = v27;
            else
              v35 = ~v27;
            v36 = (_BYTE *)(a5 + v30);
            *v36 = v35;
            v36[1] = v34;
            if (*(unsigned __int16 *)(v32 + 6) <= *(unsigned __int16 *)(v33 + 6))
              v37 = v27;
            else
              v37 = ~v27;
            if (*(unsigned __int16 *)(v32 + 4) <= *(unsigned __int16 *)(v33 + 4))
              v38 = v27;
            else
              v38 = ~v27;
            v36[2] = v38;
            v36[3] = v37;
            v30 += 4;
            v31 += 8;
          }
          while (v30 <= v9 - 4);
          v30 = v30;
        }
        else
        {
          v30 = 0;
        }
        if ((int)v30 < (int)v9)
        {
          do
          {
            if (*(unsigned __int16 *)(result + 2 * v30) <= *(unsigned __int16 *)(v13 + 2 * v30))
              v39 = v27;
            else
              v39 = ~v27;
            *(_BYTE *)(a5 + v30++) = v39;
          }
          while (v30 < v9);
        }
        a5 += a6;
        v13 += v28;
        result += v29;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v12 = a4 >> 1;
    v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10)
          v14 = -1;
        else
          v14 = 0;
        if (v8)
        {
          v15 = 2 * (a4 >> 1);
          v16 = 2 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              v18 = 0;
              v17 = 0;
              do
              {
                v19 = result + v18;
                v20 = a3 + v18;
                if (*(unsigned __int16 *)(result + v18 + 2) == *(unsigned __int16 *)(a3 + v18 + 2))
                  v21 = ~v14;
                else
                  v21 = v14;
                if (*(unsigned __int16 *)(result + v18) == *(unsigned __int16 *)(a3 + v18))
                  v22 = ~v14;
                else
                  v22 = v14;
                v23 = (_BYTE *)(a5 + v17);
                *v23 = v22;
                v23[1] = v21;
                if (*(unsigned __int16 *)(v19 + 6) == *(unsigned __int16 *)(v20 + 6))
                  v24 = ~v14;
                else
                  v24 = v14;
                if (*(unsigned __int16 *)(v19 + 4) == *(unsigned __int16 *)(v20 + 4))
                  v25 = ~v14;
                else
                  v25 = v14;
                v23[2] = v25;
                v23[3] = v24;
                v17 += 4;
                v18 += 8;
              }
              while (v17 <= v9 - 4);
              v17 = v17;
            }
            else
            {
              v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(unsigned __int16 *)(result + 2 * v17) == *(unsigned __int16 *)(a3 + 2 * v17))
                  v26 = ~v14;
                else
                  v26 = v14;
                *(_BYTE *)(a5 + v17++) = v26;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += v15;
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_36;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v8 = *a8;
  v9 = a4 >> 1;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v8 == 2)
      v8 = 4;
    else
      v8 = 1;
    v10 = a2 >> 1;
    v11 = result;
LABEL_12:
    v13 = a7[1];
    v14 = v13 - 1;
    a7[1] = v13 - 1;
    if (v13)
    {
      LODWORD(v15) = *a7;
      v16 = 2 * v10;
      v17 = 2 * v9;
      do
      {
        if ((int)v15 >= 1)
        {
          v18 = 0;
          do
          {
            *(_BYTE *)(a5 + v18) = ((v8 == 1) ^ (*(__int16 *)(a3 + 2 * v18) <= *(__int16 *)(v11 + 2 * v18))) << 31 >> 31;
            ++v18;
            v15 = *a7;
          }
          while (v18 < v15);
          v14 = a7[1];
        }
        v19 = v14;
        a5 += a6;
        a7[1] = --v14;
        v11 += v16;
        a3 += v17;
      }
      while (v19);
    }
    return result;
  }
  if (v8 == 4 || v8 == 1)
  {
    v10 = a4 >> 1;
    v11 = a3;
    v9 = a2 >> 1;
    a3 = result;
    goto LABEL_12;
  }
  if (v8 == 5 || v8 == 0)
  {
    v21 = a7[1];
    v22 = v21 - 1;
    a7[1] = v21 - 1;
    if (v21)
    {
      LODWORD(v23) = *a7;
      v24 = 2 * v9;
      do
      {
        if ((int)v23 >= 1)
        {
          v25 = 0;
          do
          {
            *(_BYTE *)(a5 + v25) = ((v8 == 0) ^ (*(unsigned __int16 *)(result + 2 * v25) != *(unsigned __int16 *)(a3 + 2 * v25))) << 31 >> 31;
            ++v25;
            v23 = *a7;
          }
          while (v25 < v23);
          v22 = a7[1];
        }
        v26 = v22;
        a5 += a6;
        a7[1] = --v22;
        a3 += v24;
        result += 2 * (a2 >> 1);
      }
      while (v26);
    }
  }
  return result;
}

uint64_t cv::cmp32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int8x8_t v20;
  int8x8_t v21;
  char v22;
  unsigned int v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int8x8_t v30;
  int8x8_t v31;
  char v32;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = a2 >> 2;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2)
      v10 = 4;
    else
      v10 = 1;
    v12 = a2 >> 2;
    v13 = result;
    v11 = a4 >> 2;
    result = a3;
LABEL_24:
    if (v10 == 1)
      v23 = 0;
    else
      v23 = 255;
    if (v8)
    {
      v24 = (int8x8_t)vdup_n_s32(v23);
      v25 = 4 * v12;
      v26 = 4 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          v27 = 0;
          v28 = 8;
          do
          {
            v29 = (_BYTE *)(a5 + v27);
            v30 = veor_s8(v24, (int8x8_t)vcgt_s32(*(int32x2_t *)(result + v28 - 8), *(int32x2_t *)(v13 + v28 - 8)));
            v29[1] = v30.i8[4];
            *v29 = v30.i8[0];
            v31 = veor_s8(v24, (int8x8_t)vcgt_s32(*(int32x2_t *)(result + v28), *(int32x2_t *)(v13 + v28)));
            v29[3] = v31.i8[4];
            v29[2] = v31.i8[0];
            v27 += 4;
            v28 += 16;
          }
          while (v27 <= v9 - 4);
          v27 = v27;
        }
        else
        {
          v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(_DWORD *)(result + 4 * v27) <= *(_DWORD *)(v13 + 4 * v27))
              v32 = v23;
            else
              v32 = ~(_BYTE)v23;
            *(_BYTE *)(a5 + v27++) = v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v12 = a4 >> 2;
    v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10)
          v14 = 255;
        else
          v14 = 0;
        if (v8)
        {
          v15 = (int8x8_t)vdup_n_s32(v14);
          v16 = 4 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              v17 = 0;
              v18 = 8;
              do
              {
                v19 = (_BYTE *)(a5 + v17);
                v20 = veor_s8(v15, (int8x8_t)vceq_s32(*(int32x2_t *)(result + v18 - 8), *(int32x2_t *)(a3 + v18 - 8)));
                v19[1] = v20.i8[4];
                *v19 = v20.i8[0];
                v21 = veor_s8(v15, (int8x8_t)vceq_s32(*(int32x2_t *)(result + v18), *(int32x2_t *)(a3 + v18)));
                v19[3] = v21.i8[4];
                v19[2] = v21.i8[0];
                v17 += 4;
                v18 += 16;
              }
              while (v17 <= v9 - 4);
              v17 = v17;
            }
            else
            {
              v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(_DWORD *)(result + 4 * v17) == *(_DWORD *)(a3 + 4 * v17))
                  v22 = ~(_BYTE)v14;
                else
                  v22 = v14;
                *(_BYTE *)(a5 + v17++) = v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 4 * (a4 >> 2);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int8x8_t v20;
  int8x8_t v21;
  char v22;
  unsigned int v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int8x8_t v30;
  int8x8_t v31;
  char v32;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = a2 >> 2;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2)
      v10 = 4;
    else
      v10 = 1;
    v12 = a2 >> 2;
    v13 = result;
    v11 = a4 >> 2;
    result = a3;
LABEL_24:
    if (v10 == 1)
      v23 = 0;
    else
      v23 = 255;
    if (v8)
    {
      v24 = (int8x8_t)vdup_n_s32(v23);
      v25 = 4 * v12;
      v26 = 4 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          v27 = 0;
          v28 = 8;
          do
          {
            v29 = (_BYTE *)(a5 + v27);
            v30 = veor_s8(v24, (int8x8_t)vcgt_f32(*(float32x2_t *)(result + v28 - 8), *(float32x2_t *)(v13 + v28 - 8)));
            v29[1] = v30.i8[4];
            *v29 = v30.i8[0];
            v31 = veor_s8(v24, (int8x8_t)vcgt_f32(*(float32x2_t *)(result + v28), *(float32x2_t *)(v13 + v28)));
            v29[3] = v31.i8[4];
            v29[2] = v31.i8[0];
            v27 += 4;
            v28 += 16;
          }
          while (v27 <= v9 - 4);
          v27 = v27;
        }
        else
        {
          v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(float *)(result + 4 * v27) <= *(float *)(v13 + 4 * v27))
              v32 = 0;
            else
              v32 = -1;
            *(_BYTE *)(a5 + v27++) = v23 ^ v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v12 = a4 >> 2;
    v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10)
          v14 = 255;
        else
          v14 = 0;
        if (v8)
        {
          v15 = (int8x8_t)vdup_n_s32(v14);
          v16 = 4 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              v17 = 0;
              v18 = 8;
              do
              {
                v19 = (_BYTE *)(a5 + v17);
                v20 = veor_s8(v15, (int8x8_t)vceq_f32(*(float32x2_t *)(result + v18 - 8), *(float32x2_t *)(a3 + v18 - 8)));
                v19[1] = v20.i8[4];
                *v19 = v20.i8[0];
                v21 = veor_s8(v15, (int8x8_t)vceq_f32(*(float32x2_t *)(result + v18), *(float32x2_t *)(a3 + v18)));
                v19[3] = v21.i8[4];
                v19[2] = v21.i8[0];
                v17 += 4;
                v18 += 16;
              }
              while (v17 <= v9 - 4);
              v17 = v17;
            }
            else
            {
              v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(float *)(result + 4 * v17) == *(float *)(a3 + 4 * v17))
                  v22 = -1;
                else
                  v22 = 0;
                *(_BYTE *)(a5 + v17++) = v14 ^ v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 4 * (a4 >> 2);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  _BYTE *v20;
  int8x8_t v21;
  char v22;
  unsigned int v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  _BYTE *v30;
  int8x8_t v31;
  char v32;

  v8 = a7[1];
  v9 = *a7;
  v10 = *a8;
  v11 = a2 >> 3;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2)
      v10 = 4;
    else
      v10 = 1;
    v12 = a2 >> 3;
    v13 = result;
    v11 = a4 >> 3;
    result = a3;
LABEL_24:
    if (v10 == 1)
      v23 = 0;
    else
      v23 = 255;
    if (v8)
    {
      v24 = (int8x8_t)vdup_n_s32(v23);
      v25 = 8 * v12;
      v26 = 8 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          v27 = 0;
          v28 = 16;
          do
          {
            v29 = veor_s8(v24, (int8x8_t)vmovn_s64(vcgtq_f64(*(float64x2_t *)(result + v28 - 16), *(float64x2_t *)(v13 + v28 - 16))));
            v30 = (_BYTE *)(a5 + v27);
            v30[1] = v29.i8[4];
            *v30 = v29.i8[0];
            v31 = veor_s8(v24, (int8x8_t)vmovn_s64(vcgtq_f64(*(float64x2_t *)(result + v28), *(float64x2_t *)(v13 + v28))));
            v30[3] = v31.i8[4];
            v30[2] = v31.i8[0];
            v27 += 4;
            v28 += 32;
          }
          while (v27 <= v9 - 4);
          v27 = v27;
        }
        else
        {
          v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(double *)(result + 8 * v27) <= *(double *)(v13 + 8 * v27))
              v32 = 0;
            else
              v32 = -1;
            *(_BYTE *)(a5 + v27++) = v23 ^ v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v12 = a4 >> 3;
    v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10)
          v14 = 255;
        else
          v14 = 0;
        if (v8)
        {
          v15 = (int8x8_t)vdup_n_s32(v14);
          v16 = 8 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              v17 = 0;
              v18 = 16;
              do
              {
                v19 = veor_s8(v15, (int8x8_t)vmovn_s64(vceqq_f64(*(float64x2_t *)(result + v18 - 16), *(float64x2_t *)(a3 + v18 - 16))));
                v20 = (_BYTE *)(a5 + v17);
                v20[1] = v19.i8[4];
                *v20 = v19.i8[0];
                v21 = veor_s8(v15, (int8x8_t)vmovn_s64(vceqq_f64(*(float64x2_t *)(result + v18), *(float64x2_t *)(a3 + v18))));
                v20[3] = v21.i8[4];
                v20[2] = v21.i8[0];
                v17 += 4;
                v18 += 32;
              }
              while (v17 <= v9 - 4);
              v17 = v17;
            }
            else
            {
              v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(double *)(result + 8 * v17) == *(double *)(a3 + 8 * v17))
                  v22 = -1;
                else
                  v22 = 0;
                *(_BYTE *)(a5 + v17++) = v14 ^ v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 8 * (a4 >> 3);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

void cv::crossCorr(cv::Mat *a1, cv::Mat *a2, cv::Mat *this, int *a4, unsigned __int16 a5, _DWORD *a6, char a7, double a8)
{
  __int128 v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  cv *v21;
  unsigned int v22;
  cv *v23;
  const cv::Exception *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  cv *v29;
  const cv::Exception *v30;
  cv *v31;
  const cv::Exception *v32;
  cv *v33;
  const cv::Exception *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int OptimalDFTSize;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  cv *v47;
  const cv::Exception *v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  int v57;
  cv *v58;
  cv *v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  cv *v65;
  cv *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  void **v73;
  cv *v74;
  cv *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  __int8 *v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  __int8 *v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  void **v102;
  BOOL v103;
  cv::Mat *v104;
  int v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  unsigned int v110;
  int v111;
  char v112;
  unsigned int v113;
  int v114;
  _QWORD *v115;
  cv *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  _BOOL4 v133;
  unsigned int *v134;
  unsigned int v135;
  int v136;
  cv *v137;
  cv *v138;
  void *v139;
  unsigned int *v140;
  unsigned int v141;
  int v142;
  cv *v143;
  cv *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  char *v151;
  cv *v152;
  cv *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t *v158;
  int v159;
  void *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  char *v167;
  cv *v168;
  cv *v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t *v174;
  void *v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  char *v182;
  void *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  cv *v191;
  cv *v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t *v197;
  cv *v198;
  cv *v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t *v204;
  cv *v205;
  uint64_t (***v206)(cv::_InputArray *__hidden, int);
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t *v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  char *v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  __int8 *v226;
  unsigned int *v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  void **v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  char *v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  int *v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  int *v256;
  unsigned int v257;
  unint64_t v258;
  int v259;
  int v260;
  int v262;
  int v263;
  int v264;
  int v265;
  unsigned int v266;
  cv::Mat *v267;
  unsigned int v268;
  uint64_t v269;
  __int32 v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  int v275;
  cv::Mat *v276;
  char v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  _BOOL4 v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  unsigned int v288;
  int v289;
  _BYTE v291[32];
  _OWORD v292[2];
  __int128 v293;
  void *v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  char *v298;
  cv *v299;
  _QWORD v300[2];
  int64x2_t v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  cv *v307;
  uint64_t v308;
  int v309[2];
  int32x2_t v310;
  int64x2_t v311;
  void *v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  cv *v317;
  _BYTE v318[16];
  void *__p[2];
  void *v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  cv *v325;
  _BYTE v326[16];
  int v327[4];
  void *v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  int *v332;
  cv *v333;
  _QWORD v334[3];
  void *v335;
  char *v336;
  uint64_t v337;
  int v338;
  int v339;
  unint64_t v340;
  void *v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  unint64_t *v345;
  cv *v346;
  uint64_t v347;
  uint64_t v348;
  int64x2_t v349;
  _BYTE v350[24];
  __int128 v351;
  uint64_t v352;
  uint64_t *v353;
  cv *v354;
  uint64_t v355;
  uint64_t v356;
  int64x2_t v357;
  void *v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  __int8 *v362;
  cv *v363;
  uint64_t v364;
  uint64_t v365;
  void *v366[2];
  void *v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  void **v371;
  cv *v372;
  uint64_t v373;
  uint64_t v374;
  _OWORD v375[4];
  char *v376;
  cv *v377;
  _QWORD v378[2];
  int v379[16];
  int *v380;
  void **v381;
  _QWORD v382[8];

  v382[5] = *MEMORY[0x24BDAC8D0];
  v336 = 0;
  v335 = 0;
  v337 = 0;
  v14 = *(_OWORD *)a2;
  *(_OWORD *)v327 = *(_OWORD *)a2;
  v15 = (void *)*((_QWORD *)a2 + 2);
  v16 = *(_OWORD *)((char *)a2 + 24);
  v329 = v16;
  v330 = *(_OWORD *)((char *)a2 + 40);
  v17 = *((_QWORD *)a2 + 7);
  v328 = v15;
  v331 = v17;
  v332 = &v327[2];
  v333 = (cv *)v334;
  v334[1] = 0;
  v334[0] = 0;
  if ((_QWORD)v16)
  {
    do
      v18 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v18 + 1, (unsigned int *)v16));
    v19 = *((_DWORD *)a2 + 1);
  }
  else
  {
    v19 = DWORD1(v14);
  }
  if (v19 > 2)
  {
    v327[1] = 0;
    cv::Mat::copySize((cv::Mat *)v327, a2);
  }
  else
  {
    v20 = (_QWORD *)*((_QWORD *)a2 + 9);
    v21 = v333;
    *(_QWORD *)v333 = *v20;
    *((_QWORD *)v21 + 1) = v20[1];
  }
  v22 = v327[0];
  if (*((int *)a1 + 1) > 2 || v327[1] > 2 || *((int *)this + 1) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v375, "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v366, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    v23 = (cv *)cv::Exception::Exception(v379, 4294967081, v375, v366, __p, 60);
    cv::error(v23, v24);
  }
  v288 = *(_DWORD *)a1;
  v25 = *(_DWORD *)a1 & 7;
  v26 = v25;
  if (v25 != (v327[0] & 7))
  {
    if (v25 <= 5)
      v27 = 5;
    else
      v27 = *(_DWORD *)a1 & 7;
    v28 = v327[0] & 7;
    if (v28 != v27)
    {
      cv::_OutputArray::_OutputArray((uint64_t)v379, (cv::Mat *)v327);
      cv::Mat::convertTo(a2, (const cv::_OutputArray *)v379, v27, 1.0, 0.0);
      v28 = v327[0] & 7;
    }
    v26 = v28;
    if (v25 != v28 && v28 != 5)
    {
      std::string::basic_string[abi:ne180100]<0>(v375, "depth == tdepth || tdepth == CV_32F");
      std::string::basic_string[abi:ne180100]<0>(v366, "crossCorr");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
      v29 = (cv *)cv::Exception::Exception(v379, 4294967081, v375, v366, __p, 68);
      cv::error(v29, v30);
    }
  }
  if (a4[1] >= v327[2] + *((_DWORD *)a1 + 2) || *a4 >= v327[3] + *((_DWORD *)a1 + 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v375, "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1");
    std::string::basic_string[abi:ne180100]<0>(v366, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    v31 = (cv *)cv::Exception::Exception(v379, 4294967081, v375, v366, __p, 70);
    cv::error(v31, v32);
  }
  if ((a5 & 0xFF8) != 0 && a8 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v375, "ccn == 1 || delta == 0");
    std::string::basic_string[abi:ne180100]<0>(v366, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    v33 = (cv *)cv::Exception::Exception(v379, 4294967081, v375, v366, __p, 72);
    cv::error(v33, v34);
  }
  v35 = *a4;
  v36 = a4[1];
  v37 = a5 & 0xFFF;
  v277 = a7;
  v276 = a1;
  if (*((int *)this + 1) > 2
    || *((_DWORD *)this + 2) != v36
    || *((_DWORD *)this + 3) != v35
    || (*(_DWORD *)this & 0xFFF) != v37
    || !*((_QWORD *)this + 2))
  {
    v379[0] = a4[1];
    v379[1] = v35;
    cv::Mat::create(this, (cv::Mat *)2, v379, v37);
    v36 = *((_DWORD *)this + 2);
    v35 = *((_DWORD *)this + 3);
  }
  v38 = a5 & 7;
  v285 = v26;
  if (v26 <= v38)
    v39 = a5 & 7;
  else
    v39 = v26;
  if (v39 <= 5)
    v39 = 5;
  if (v25 > 1)
    v39 = 6;
  v287 = v39;
  v40 = v327[2];
  v41 = (uint64_t)rint((double)v327[3] * 4.5);
  if (257 - v327[3] > (int)v41)
    LODWORD(v41) = 257 - v327[3];
  if (v35 >= (int)v41)
    v35 = v41;
  OptimalDFTSize = cv::getOptimalDFTSize((cv *)(v327[3] + v35 - 1));
  v43 = 257 - v40;
  v44 = (uint64_t)rint((double)v40 * 4.5);
  if (257 - v40 <= (int)v44)
    v43 = v44;
  if (v36 < v43)
    v43 = v36;
  if (OptimalDFTSize <= 2)
    v45 = 2;
  else
    v45 = OptimalDFTSize;
  v46 = cv::getOptimalDFTSize((cv *)(v43 + v327[2] - 1));
  if (v46 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v375, "the input arrays are too big");
    std::string::basic_string[abi:ne180100]<0>(v366, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    v47 = (cv *)cv::Exception::Exception(v379, 4294967085, v375, v366, __p, 89);
    cv::error(v47, v48);
  }
  v284 = (v22 >> 3) & 0x1FF;
  if (v45 - v327[3] < *((_DWORD *)this + 3))
    v49 = v45 - v327[3] + 1;
  else
    v49 = *((_DWORD *)this + 3);
  v264 = v49;
  if (v46 - v327[2] < *((_DWORD *)this + 2))
    v50 = v46 - v327[2] + 1;
  else
    v50 = *((_DWORD *)this + 2);
  v263 = v50;
  v380 = &v379[2];
  v381 = (void **)v382;
  v382[0] = 0;
  v382[1] = 0;
  v379[0] = 1124007936;
  memset(&v379[1], 0, 60);
  LODWORD(v375[0]) = v46 * (v284 + 1);
  DWORD1(v375[0]) = v45;
  cv::Mat::create((cv::Mat *)v379, (cv::Mat *)2, (const int *)v375, v287);
  v376 = (char *)v375 + 8;
  v377 = (cv *)v378;
  v378[1] = 0;
  v378[0] = 0;
  LODWORD(v375[0]) = 1124007936;
  memset((char *)v375 + 4, 0, 48);
  v375[3] = 0u;
  v366[0] = (void *)__PAIR64__(v45, v46);
  cv::Mat::create((cv::Mat *)v375, (cv::Mat *)2, (const int *)v366, v287);
  v51 = 0;
  v289 = (v288 >> 3) & 0x1FF;
  v52 = 2 * v285;
  if (v284 && v285 != v287)
    v51 = (v327[2] * v327[3]) << ((0xFA50u >> v52) & 3);
  if (v289 && v25 != v287 && v51 <= ((v263 + v327[2] - 1) * (v264 + v327[3] - 1)) << ((0xFA50u >> (2 * v25)) & 3))
    v51 = ((v263 + v327[2] - 1) * (v264 + v327[3] - 1)) << ((0xFA50u >> (2 * v25)) & 3);
  v53 = 2 * v38;
  if ((((unsigned __int16)v288 | a5) & 0xFF8) != 0 && v38 != v287 && v51 <= (v263 * v264) << ((0xFA50u >> v53) & 3))
    v51 = (v263 * v264) << ((0xFA50u >> v53) & 3);
  v267 = this;
  v278 = v25;
  v262 = a5 & 7;
  v282 = v46;
  v283 = v45;
  v274 = 2 * v38;
  if (v51 <= (unint64_t)(v336 - (_BYTE *)v335))
  {
    if (v51 < (unint64_t)(v336 - (_BYTE *)v335))
      v336 = (char *)v335 + v51;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v335, v51 - (v336 - (_BYTE *)v335));
  }
  v54 = 0;
  v279 = (0xFA50u >> v52) & 3;
  do
  {
    *(_OWORD *)v366 = *(_OWORD *)v327;
    v55 = (unsigned int *)v329;
    v368 = v329;
    v369 = v330;
    v367 = v328;
    v370 = v331;
    v371 = &v366[1];
    v372 = (cv *)&v373;
    v373 = 0;
    v374 = 0;
    if ((_QWORD)v329)
    {
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 + 1, v55));
      v57 = v327[1];
    }
    else
    {
      v57 = v327[1];
    }
    if (v57 > 2)
    {
      HIDWORD(v366[0]) = 0;
      cv::Mat::copySize((cv::Mat *)v366, (const cv::Mat *)v327);
    }
    else
    {
      v58 = v333;
      v59 = v372;
      *(_QWORD *)v372 = *(_QWORD *)v333;
      *((_QWORD *)v59 + 1) = *((_QWORD *)v58 + 1);
    }
    v311.i32[0] = 0;
    v311.i32[1] = v54 * v46;
    v311.i64[1] = __PAIR64__(v46, v283);
    cv::Mat::Mat(__p, v379, &v311);
    v357.i32[0] = 0;
    v357.i32[1] = v54 * v46;
    v357.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)&v327[2]);
    cv::Mat::Mat(&v311, v379, &v357);
    if (!v284)
      goto LABEL_117;
    if (v285 == v287)
    {
      v357 = v311;
      v359 = v313;
      v360 = v314;
      v358 = v312;
      v361 = v315;
      v362 = &v357.i8[8];
      v363 = (cv *)&v364;
      v61 = (unsigned int *)v313;
      v364 = 0;
      v365 = 0;
      if ((_QWORD)v313)
      {
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
        v63 = v311.i32[1];
      }
      else
      {
        v63 = v311.i32[1];
      }
      if (v63 > 2)
      {
        v357.i32[1] = 0;
        cv::Mat::copySize((cv::Mat *)&v357, (const cv::Mat *)&v311);
      }
      else
      {
        v65 = v317;
        v66 = v363;
        *(_QWORD *)v363 = *(_QWORD *)v317;
        *((_QWORD *)v66 + 1) = *((_QWORD *)v65 + 1);
      }
    }
    else
    {
      v64 = v332[1];
      v357.i32[2] = *v332;
      v357.i32[3] = v64;
      v358 = v335;
      *(_QWORD *)&v359 = 0;
      v362 = &v357.i8[8];
      v363 = (cv *)&v364;
      v357.i32[1] = 2;
      v357.i32[0] = v285 | 0x42FF4000;
      v364 = v64 << v279;
      v365 = (1 << ((0xFA50u >> v52) & 3));
      v361 = 0;
      *((_QWORD *)&v360 + 1) = (char *)v335 + (v64 << v279) * v357.i32[2];
      *((_QWORD *)&v359 + 1) = v335;
      *(_QWORD *)&v360 = *((_QWORD *)&v360 + 1);
    }
    v67 = (unsigned int *)v359;
    if ((_QWORD)v359)
    {
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
    }
    v69 = (unsigned int *)v368;
    if ((_QWORD)v368)
    {
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
        cv::Mat::deallocate((cv::Mat *)v366, v60);
    }
    v367 = 0;
    v369 = 0uLL;
    *((_QWORD *)&v368 + 1) = 0;
    if ((uint64_t)v366[0] <= 0)
    {
      *(_QWORD *)&v368 = 0;
      LODWORD(v366[0]) = v357.i32[0];
    }
    else
    {
      v72 = 0;
      v73 = v371;
      do
        *((_DWORD *)v73 + v72++) = 0;
      while (v72 < SHIDWORD(v366[0]));
      *(_QWORD *)&v368 = 0;
      LODWORD(v366[0]) = v357.i32[0];
      if (SHIDWORD(v366[0]) > 2)
        goto LABEL_106;
    }
    if (v357.i32[1] <= 2)
    {
      HIDWORD(v366[0]) = v357.i32[1];
      v366[1] = (void *)v357.i64[1];
      v74 = v363;
      v75 = v372;
      *(_QWORD *)v372 = *(_QWORD *)v363;
      *((_QWORD *)v75 + 1) = *((_QWORD *)v74 + 1);
      goto LABEL_107;
    }
LABEL_106:
    cv::Mat::copySize((cv::Mat *)v366, (const cv::Mat *)&v357);
LABEL_107:
    v369 = v360;
    v76 = (unsigned int *)v359;
    v368 = v359;
    v367 = v358;
    v370 = v361;
    if ((_QWORD)v359)
    {
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
        cv::Mat::deallocate((cv::Mat *)&v357, v60);
    }
    v358 = 0;
    v360 = 0uLL;
    *((_QWORD *)&v359 + 1) = 0;
    if (v357.i32[1] >= 1)
    {
      v79 = 0;
      v80 = v362;
      do
        *(_DWORD *)&v80[4 * v79++] = 0;
      while (v79 < v357.i32[1]);
    }
    *(_QWORD *)&v359 = 0;
    if (v363 != (cv *)&v364)
      cv::fastFree((void **)v363, v60);
    v357.i64[0] = v54;
    cv::mixChannels((cv *)v327, (const cv::Mat *)1, (unint64_t)v366, (cv::Mat *)1, (unint64_t)&v357, (const int *)1);
LABEL_117:
    if (v312 != v367)
    {
      cv::_OutputArray::_OutputArray((uint64_t)&v357, (cv::Mat *)&v311);
      cv::Mat::convertTo((cv::Mat *)v366, (const cv::_OutputArray *)&v357, v311.i8[0] & 7, 1.0, 0.0);
    }
    if (SHIDWORD(__p[1]) > v327[3])
    {
      v301.i32[0] = 0;
      v301.i32[1] = v327[2];
      *(_QWORD *)&v293 = __PAIR64__(HIDWORD(__p[1]), v327[3]);
      cv::Mat::Mat(&v357, __p, &v301, &v293);
      v301 = 0u;
      v302 = 0u;
      cv::Mat::operator=((uint64_t)&v357, &v301);
      v82 = (unsigned int *)v359;
      if ((_QWORD)v359)
      {
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
          cv::Mat::deallocate((cv::Mat *)&v357, v81);
      }
      v358 = 0;
      v360 = 0uLL;
      *((_QWORD *)&v359 + 1) = 0;
      if (v357.i32[1] >= 1)
      {
        v85 = 0;
        v86 = v362;
        do
          *(_DWORD *)&v86[4 * v85++] = 0;
        while (v85 < v357.i32[1]);
      }
      *(_QWORD *)&v359 = 0;
      if (v363 != (cv *)&v364)
        cv::fastFree((void **)v363, v81);
    }
    cv::_InputArray::_InputArray((uint64_t)&v357, (const cv::Mat *)__p);
    cv::_OutputArray::_OutputArray((uint64_t)&v301, (cv::Mat *)__p);
    cv::dft((cv *)&v357, (const cv::_InputArray *)&v301, 0);
    v88 = (unsigned int *)v313;
    if ((_QWORD)v313)
    {
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
        cv::Mat::deallocate((cv::Mat *)&v311, v87);
    }
    v312 = 0;
    v314 = 0uLL;
    *((_QWORD *)&v313 + 1) = 0;
    if (v311.i32[1] >= 1)
    {
      v91 = 0;
      v92 = v316;
      do
        *(_DWORD *)(v92 + 4 * v91++) = 0;
      while (v91 < v311.i32[1]);
    }
    *(_QWORD *)&v313 = 0;
    if (v317 != (cv *)v318)
      cv::fastFree((void **)v317, v87);
    v93 = (unsigned int *)v321;
    if ((_QWORD)v321)
    {
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
        cv::Mat::deallocate((cv::Mat *)__p, v87);
    }
    v320 = 0;
    v322 = 0uLL;
    *((_QWORD *)&v321 + 1) = 0;
    if (SHIDWORD(__p[0]) >= 1)
    {
      v96 = 0;
      v97 = v324;
      do
        *(_DWORD *)(v97 + 4 * v96++) = 0;
      while (v96 < SHIDWORD(__p[0]));
    }
    *(_QWORD *)&v321 = 0;
    if (v325 != (cv *)v326)
      cv::fastFree((void **)v325, v87);
    v98 = (unsigned int *)v368;
    if ((_QWORD)v368)
    {
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
        cv::Mat::deallocate((cv::Mat *)v366, v87);
    }
    v367 = 0;
    v369 = 0uLL;
    *((_QWORD *)&v368 + 1) = 0;
    if (SHIDWORD(v366[0]) >= 1)
    {
      v101 = 0;
      v102 = v371;
      do
        *((_DWORD *)v102 + v101++) = 0;
      while (v101 < SHIDWORD(v366[0]));
    }
    *(_QWORD *)&v368 = 0;
    if (v372 != (cv *)&v373)
      cv::fastFree((void **)v372, v87);
    v103 = v54++ == v284;
  }
  while (!v103);
  v104 = this;
  v106 = *((_DWORD *)this + 2);
  v105 = *((_DWORD *)this + 3);
  v107 = *((_QWORD *)v276 + 7);
  v310 = vrev64_s32(**((int32x2_t **)v276 + 8));
  *(_QWORD *)v309 = 0;
  v108 = *(_OWORD *)v276;
  *(_OWORD *)v366 = *(_OWORD *)v276;
  v109 = *(_OWORD *)((char *)v276 + 24);
  v368 = v109;
  v369 = *(_OWORD *)((char *)v276 + 40);
  v367 = (void *)*((_QWORD *)v276 + 2);
  v370 = v107;
  v371 = &v366[1];
  v372 = (cv *)&v373;
  v374 = 0;
  v373 = 0;
  if ((_QWORD)v109)
  {
    v110 = v25;
    v111 = a5 & 7;
    v112 = v277;
    do
      v113 = __ldaxr((unsigned int *)v109);
    while (__stlxr(v113 + 1, (unsigned int *)v109));
    v114 = *((_DWORD *)v276 + 1);
  }
  else
  {
    v114 = DWORD1(v108);
    v110 = v25;
    v111 = a5 & 7;
    v112 = v277;
  }
  if (v114 > 2)
  {
    HIDWORD(v366[0]) = 0;
    cv::Mat::copySize((cv::Mat *)v366, v276);
  }
  else
  {
    v115 = (_QWORD *)*((_QWORD *)v276 + 9);
    v116 = v372;
    *(_QWORD *)v372 = *v115;
    *((_QWORD *)v116 + 1) = v115[1];
  }
  if ((v112 & 0x10) == 0)
  {
    cv::Mat::locateROI((uint64_t)v276, &v310, v309);
    cv::Mat::adjustROI((cv::Mat *)v366, v309[1], v310.i32[1] - (v309[1] + *((_DWORD *)v276 + 2)), v309[0], v310.i32[0] - (v309[0] + *((_DWORD *)v276 + 3)));
  }
  v259 = (v263 + v106 - 1) / v263 * ((v264 + v105 - 1) / v264);
  v260 = (v264 + v105 - 1) / v264;
  if (v259 >= 1)
  {
    v117 = 0;
    v258 = (0xFA50uLL >> (2 * v110)) & 3;
    v268 = v110 | 0x42FF4000;
    v257 = (0xFA50u >> v274) & 3;
    v272 = (1 << ((0xFA50u >> v274) & 3));
    v271 = v111 | 0x42FF4000;
    do
    {
      v265 = v117;
      v118 = v117 % v260 * v264;
      v119 = v117 / v260 * v263;
      v120 = *((_DWORD *)v104 + 2);
      if (*((_DWORD *)v104 + 3) - v118 >= v264)
        v121 = v264;
      else
        v121 = *((_DWORD *)v104 + 3) - v118;
      if (v120 - v119 >= v263)
        v122 = v263;
      else
        v122 = v120 - v119;
      v286 = v121;
      v123 = v327[3] + v121 - 1;
      v266 = v122;
      v124 = v327[2] + v122 - 1;
      v280 = v117 % v260 * v264;
      v125 = v118 - *a6 + v309[0];
      v275 = v117 / v260 * v263;
      v126 = v119 - a6[1] + v309[1];
      v127 = v126 & ~(v126 >> 31);
      if (v125 + v123 >= SHIDWORD(v366[1]))
        v128 = HIDWORD(v366[1]);
      else
        v128 = v125 + v123;
      if (v126 + v124 >= SLODWORD(v366[1]))
        v129 = (int)v366[1];
      else
        v129 = v126 + v124;
      v311.i32[0] = v126 & ~(v126 >> 31);
      v311.i32[1] = v129;
      v130 = v125 & ~(v125 >> 31);
      v357.i64[0] = __PAIR64__(v128, v130);
      cv::Mat::Mat(__p, v366, &v311, &v357);
      v357.i64[0] = 0;
      v357.i64[1] = __PAIR64__(v124, v123);
      cv::Mat::Mat(&v311, v375, &v357);
      v301.i32[0] = v130 - v125;
      v301.i32[1] = v127 - v126;
      v270 = v129 - v127;
      v301.i32[2] = v128 - v130;
      v301.i32[3] = v129 - v127;
      cv::Mat::Mat(&v357, v375, &v301);
      *(_QWORD *)&v293 = __PAIR64__(v275, v280);
      *((_QWORD *)&v293 + 1) = __PAIR64__(v266, v286);
      cv::Mat::Mat(&v301, v267, &v293);
      v131 = 0;
      v269 = ((uint64_t)(v128 - v130) << v258) * v270;
      v133 = v128 - v130 < v123 || v270 < v124;
      v281 = v133;
      v273 = ((uint64_t)v286 << v257) * (int)v266;
      do
      {
        v294 = v320;
        v293 = *(_OWORD *)__p;
        v295 = v321;
        v296 = v322;
        v297 = v323;
        v298 = (char *)&v293 + 8;
        v299 = (cv *)v300;
        v134 = (unsigned int *)v321;
        v300[0] = 0;
        v300[1] = 0;
        if ((_QWORD)v321)
        {
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 + 1, v134));
          v136 = HIDWORD(__p[0]);
        }
        else
        {
          v136 = HIDWORD(__p[0]);
        }
        if (v136 > 2)
        {
          DWORD1(v293) = 0;
          cv::Mat::copySize((cv::Mat *)&v293, (const cv::Mat *)__p);
        }
        else
        {
          v137 = v325;
          v138 = v299;
          *(_QWORD *)v299 = *(_QWORD *)v325;
          *((_QWORD *)v138 + 1) = *((_QWORD *)v137 + 1);
        }
        *(_OWORD *)v350 = 0u;
        v349 = 0u;
        cv::Mat::operator=((uint64_t)v375, &v349);
        if (!v289)
          goto LABEL_231;
        if (v278 == v287)
        {
          v349 = v357;
          *(_OWORD *)&v350[8] = v359;
          v351 = v360;
          *(_QWORD *)v350 = v358;
          v352 = v361;
          v353 = &v349.i64[1];
          v354 = (cv *)&v355;
          v140 = (unsigned int *)v359;
          v355 = 0;
          v356 = 0;
          if ((_QWORD)v359)
          {
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 + 1, v140));
            v142 = v357.i32[1];
          }
          else
          {
            v142 = v357.i32[1];
          }
          if (v142 > 2)
          {
            v349.i32[1] = 0;
            cv::Mat::copySize((cv::Mat *)&v349, (const cv::Mat *)&v357);
          }
          else
          {
            v143 = v363;
            v144 = v354;
            *(_QWORD *)v354 = *(_QWORD *)v363;
            *((_QWORD *)v144 + 1) = *((_QWORD *)v143 + 1);
          }
        }
        else
        {
          v349.i32[2] = v270;
          v349.i32[3] = v128 - v130;
          *(_OWORD *)v350 = (unint64_t)v335;
          v353 = &v349.i64[1];
          v354 = (cv *)&v355;
          v349.i64[0] = v268 | 0x200000000;
          v355 = (uint64_t)(v128 - v130) << v258;
          v356 = 1 << v258;
          v352 = 0;
          *((_QWORD *)&v351 + 1) = (char *)v335 + v269;
          *(_QWORD *)&v350[16] = v335;
          *(_QWORD *)&v351 = (char *)v335 + v269;
        }
        v145 = *(unsigned int **)&v350[8];
        if (*(_QWORD *)&v350[8])
        {
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 + 1, v145));
        }
        v147 = (unsigned int *)v295;
        if ((_QWORD)v295)
        {
          do
          {
            v148 = __ldaxr(v147);
            v149 = v148 - 1;
          }
          while (__stlxr(v149, v147));
          if (!v149)
            cv::Mat::deallocate((cv::Mat *)&v293, v139);
        }
        v294 = 0;
        v296 = 0uLL;
        *((_QWORD *)&v295 + 1) = 0;
        if ((uint64_t)v293 <= 0)
        {
          *(_QWORD *)&v295 = 0;
          LODWORD(v293) = v349.i32[0];
        }
        else
        {
          v150 = 0;
          v151 = v298;
          do
            *(_DWORD *)&v151[4 * v150++] = 0;
          while (v150 < SDWORD1(v293));
          *(_QWORD *)&v295 = 0;
          LODWORD(v293) = v349.i32[0];
          if (SDWORD1(v293) > 2)
            goto LABEL_220;
        }
        if (v349.i32[1] <= 2)
        {
          DWORD1(v293) = v349.i32[1];
          *((_QWORD *)&v293 + 1) = v349.i64[1];
          v152 = v354;
          v153 = v299;
          *(_QWORD *)v299 = *(_QWORD *)v354;
          *((_QWORD *)v153 + 1) = *((_QWORD *)v152 + 1);
          goto LABEL_221;
        }
LABEL_220:
        cv::Mat::copySize((cv::Mat *)&v293, (const cv::Mat *)&v349);
LABEL_221:
        v294 = *(void **)v350;
        v296 = v351;
        v295 = *(_OWORD *)&v350[8];
        v297 = v352;
        v154 = *(unsigned int **)&v350[8];
        if (*(_QWORD *)&v350[8])
        {
          do
          {
            v155 = __ldaxr(v154);
            v156 = v155 - 1;
          }
          while (__stlxr(v156, v154));
          if (!v156)
            cv::Mat::deallocate((cv::Mat *)&v349, v139);
        }
        *(_QWORD *)v350 = 0;
        v351 = 0uLL;
        *(_QWORD *)&v350[16] = 0;
        if (v349.i32[1] >= 1)
        {
          v157 = 0;
          v158 = v353;
          do
            *((_DWORD *)v158 + v157++) = 0;
          while (v157 < v349.i32[1]);
        }
        *(_QWORD *)&v350[8] = 0;
        if (v354 != (cv *)&v355)
          cv::fastFree((void **)v354, v139);
        v349.i64[0] = v131;
        cv::mixChannels((cv *)__p, (const cv::Mat *)1, (unint64_t)&v293, (cv::Mat *)1, (unint64_t)&v349, (const int *)1);
LABEL_231:
        if (v358 != v294)
        {
          cv::_OutputArray::_OutputArray((uint64_t)&v349, (cv::Mat *)&v357);
          cv::Mat::convertTo((cv::Mat *)&v293, (const cv::_OutputArray *)&v349, v357.i8[0] & 7, 1.0, 0.0);
        }
        if (v281)
        {
          cv::_InputArray::_InputArray((uint64_t)&v349, (const cv::Mat *)&v357);
          cv::_OutputArray::_OutputArray((uint64_t)&v338, (cv::Mat *)&v311);
          memset(v292, 0, sizeof(v292));
          cv::copyMakeBorder((uint64_t)&v349, (uint64_t)&v338);
        }
        cv::_InputArray::_InputArray((uint64_t)&v349, (const cv::Mat *)v375);
        cv::_OutputArray::_OutputArray((uint64_t)&v338, (cv::Mat *)v375);
        cv::dft((cv *)&v349, (const cv::_InputArray *)&v338, 0);
        v159 = v131 * v282;
        if (!v284)
          v159 = 0;
        v338 = 0;
        v339 = v159;
        v340 = __PAIR64__(v282, v283);
        cv::Mat::Mat(&v349, v379, &v338);
        cv::_InputArray::_InputArray((uint64_t)&v338, (const cv::Mat *)v375);
        cv::_InputArray::_InputArray((uint64_t)v292, (const cv::Mat *)&v349);
        cv::_OutputArray::_OutputArray((uint64_t)v291, (cv::Mat *)v375);
        cv::mulSpectrums((cv *)&v338, (const cv::_InputArray *)v292, (const cv::_InputArray *)v291, 0, 1);
        cv::_InputArray::_InputArray((uint64_t)&v338, (const cv::Mat *)v375);
        cv::_OutputArray::_OutputArray((uint64_t)v292, (cv::Mat *)v375);
        cv::dft((cv *)&v338, (const cv::_InputArray *)v292, (const cv::_OutputArray *)3);
        *(_QWORD *)&v292[0] = 0;
        *((_QWORD *)&v292[0] + 1) = __PAIR64__(v266, v286);
        cv::Mat::Mat(&v338, v375, v292);
        v161 = (unsigned int *)v342;
        if ((_QWORD)v342)
        {
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 + 1, v161));
        }
        v163 = (unsigned int *)v295;
        if ((_QWORD)v295)
        {
          do
          {
            v164 = __ldaxr(v163);
            v165 = v164 - 1;
          }
          while (__stlxr(v165, v163));
          if (!v165)
            cv::Mat::deallocate((cv::Mat *)&v293, v160);
        }
        v294 = 0;
        v296 = 0uLL;
        *((_QWORD *)&v295 + 1) = 0;
        if ((uint64_t)v293 <= 0)
        {
          *(_QWORD *)&v295 = 0;
          LODWORD(v293) = v338;
        }
        else
        {
          v166 = 0;
          v167 = v298;
          do
            *(_DWORD *)&v167[4 * v166++] = 0;
          while (v166 < SDWORD1(v293));
          *(_QWORD *)&v295 = 0;
          LODWORD(v293) = v338;
          if (SDWORD1(v293) > 2)
          {
LABEL_251:
            cv::Mat::copySize((cv::Mat *)&v293, (const cv::Mat *)&v338);
            goto LABEL_252;
          }
        }
        if (v339 > 2)
          goto LABEL_251;
        DWORD1(v293) = v339;
        *((_QWORD *)&v293 + 1) = v340;
        v168 = v346;
        v169 = v299;
        *(_QWORD *)v299 = *(_QWORD *)v346;
        *((_QWORD *)v169 + 1) = *((_QWORD *)v168 + 1);
LABEL_252:
        v294 = v341;
        v296 = v343;
        v295 = v342;
        v297 = v344;
        v170 = (unsigned int *)v342;
        if ((_QWORD)v342)
        {
          do
          {
            v171 = __ldaxr(v170);
            v172 = v171 - 1;
          }
          while (__stlxr(v172, v170));
          if (!v172)
            cv::Mat::deallocate((cv::Mat *)&v338, v160);
        }
        v341 = 0;
        v343 = 0uLL;
        *((_QWORD *)&v342 + 1) = 0;
        if (v339 >= 1)
        {
          v173 = 0;
          v174 = v345;
          do
            *((_DWORD *)v174 + v173++) = 0;
          while (v173 < v339);
        }
        *(_QWORD *)&v342 = 0;
        if (v346 != (cv *)&v347)
          cv::fastFree((void **)v346, v160);
        if ((a5 & 0xFF8) != 0)
        {
          if (v262 != v287)
          {
            v340 = __PAIR64__(v286, v266);
            v341 = v335;
            *(_QWORD *)&v342 = 0;
            v345 = &v340;
            v346 = (cv *)&v347;
            v339 = 2;
            v338 = v271;
            v347 = (uint64_t)v286 << v257;
            v348 = v272;
            v344 = 0;
            *((_QWORD *)&v343 + 1) = (char *)v335 + v273;
            *((_QWORD *)&v342 + 1) = v335;
            *(_QWORD *)&v343 = (char *)v335 + v273;
            cv::_OutputArray::_OutputArray((uint64_t)v292, (cv::Mat *)&v338);
            cv::Mat::convertTo((cv::Mat *)&v293, (const cv::_OutputArray *)v292, v262, 1.0, a8);
            v176 = (unsigned int *)v342;
            if ((_QWORD)v342)
            {
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 + 1, v176));
            }
            v178 = (unsigned int *)v295;
            if ((_QWORD)v295)
            {
              do
              {
                v179 = __ldaxr(v178);
                v180 = v179 - 1;
              }
              while (__stlxr(v180, v178));
              if (!v180)
                cv::Mat::deallocate((cv::Mat *)&v293, v175);
            }
            v294 = 0;
            v296 = 0uLL;
            *((_QWORD *)&v295 + 1) = 0;
            if ((uint64_t)v293 <= 0)
            {
              *(_QWORD *)&v295 = 0;
              LODWORD(v293) = v338;
            }
            else
            {
              v181 = 0;
              v182 = v298;
              do
                *(_DWORD *)&v182[4 * v181++] = 0;
              while (v181 < SDWORD1(v293));
              *(_QWORD *)&v295 = 0;
              LODWORD(v293) = v338;
              if (SDWORD1(v293) > 2)
              {
LABEL_291:
                cv::Mat::copySize((cv::Mat *)&v293, (const cv::Mat *)&v338);
                goto LABEL_292;
              }
            }
            if (v339 > 2)
              goto LABEL_291;
            DWORD1(v293) = v339;
            *((_QWORD *)&v293 + 1) = v340;
            v191 = v346;
            v192 = v299;
            *(_QWORD *)v299 = *(_QWORD *)v346;
            *((_QWORD *)v192 + 1) = *((_QWORD *)v191 + 1);
LABEL_292:
            v294 = v341;
            v296 = v343;
            v295 = v342;
            v297 = v344;
            v193 = (unsigned int *)v342;
            if ((_QWORD)v342)
            {
              do
              {
                v194 = __ldaxr(v193);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, v193));
              if (!v195)
                cv::Mat::deallocate((cv::Mat *)&v338, v175);
            }
            v341 = 0;
            v343 = 0uLL;
            *((_QWORD *)&v342 + 1) = 0;
            if (v339 >= 1)
            {
              v196 = 0;
              v197 = v345;
              do
                *((_DWORD *)v197 + v196++) = 0;
              while (v196 < v339);
            }
            *(_QWORD *)&v342 = 0;
            if (v346 != (cv *)&v347)
              cv::fastFree((void **)v346, v175);
          }
          v338 = 0;
          v339 = v131;
          cv::mixChannels((cv *)&v293, (const cv::Mat *)1, (unint64_t)&v301, (cv::Mat *)1, (unint64_t)&v338, (const int *)1);
          goto LABEL_316;
        }
        if (v131)
        {
          if (v262 != v287)
          {
            v340 = __PAIR64__(v286, v266);
            v341 = v335;
            *(_QWORD *)&v342 = 0;
            v345 = &v340;
            v346 = (cv *)&v347;
            v339 = 2;
            v338 = v271;
            v347 = (uint64_t)v286 << v257;
            v348 = v272;
            v344 = 0;
            *((_QWORD *)&v343 + 1) = (char *)v335 + v273;
            *((_QWORD *)&v342 + 1) = v335;
            *(_QWORD *)&v343 = (char *)v335 + v273;
            cv::_OutputArray::_OutputArray((uint64_t)v292, (cv::Mat *)&v338);
            cv::Mat::convertTo((cv::Mat *)&v293, (const cv::_OutputArray *)v292, v262, 1.0, 0.0);
            v184 = (unsigned int *)v342;
            if ((_QWORD)v342)
            {
              do
                v185 = __ldaxr(v184);
              while (__stlxr(v185 + 1, v184));
            }
            v186 = (unsigned int *)v295;
            if ((_QWORD)v295)
            {
              do
              {
                v187 = __ldaxr(v186);
                v188 = v187 - 1;
              }
              while (__stlxr(v188, v186));
              if (!v188)
                cv::Mat::deallocate((cv::Mat *)&v293, v183);
            }
            v294 = 0;
            v296 = 0uLL;
            *((_QWORD *)&v295 + 1) = 0;
            if ((uint64_t)v293 <= 0)
            {
              *(_QWORD *)&v295 = 0;
              LODWORD(v293) = v338;
            }
            else
            {
              v189 = 0;
              v190 = v298;
              do
                *(_DWORD *)&v190[4 * v189++] = 0;
              while (v189 < SDWORD1(v293));
              *(_QWORD *)&v295 = 0;
              LODWORD(v293) = v338;
              if (SDWORD1(v293) > 2)
              {
LABEL_305:
                cv::Mat::copySize((cv::Mat *)&v293, (const cv::Mat *)&v338);
                goto LABEL_306;
              }
            }
            if (v339 > 2)
              goto LABEL_305;
            DWORD1(v293) = v339;
            *((_QWORD *)&v293 + 1) = v340;
            v198 = v346;
            v199 = v299;
            *(_QWORD *)v299 = *(_QWORD *)v346;
            *((_QWORD *)v199 + 1) = *((_QWORD *)v198 + 1);
LABEL_306:
            v294 = v341;
            v296 = v343;
            v295 = v342;
            v297 = v344;
            v200 = (unsigned int *)v342;
            if ((_QWORD)v342)
            {
              do
              {
                v201 = __ldaxr(v200);
                v202 = v201 - 1;
              }
              while (__stlxr(v202, v200));
              if (!v202)
                cv::Mat::deallocate((cv::Mat *)&v338, v183);
            }
            v341 = 0;
            v343 = 0uLL;
            *((_QWORD *)&v342 + 1) = 0;
            if (v339 >= 1)
            {
              v203 = 0;
              v204 = v345;
              do
                *((_DWORD *)v204 + v203++) = 0;
              while (v203 < v339);
            }
            *(_QWORD *)&v342 = 0;
            if (v346 != (cv *)&v347)
              cv::fastFree((void **)v346, v183);
          }
          cv::_InputArray::_InputArray((uint64_t)&v338, (const cv::Mat *)&v293);
          cv::_InputArray::_InputArray((uint64_t)v292, (const cv::Mat *)&v301);
          v205 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v291, (cv::Mat *)&v301);
          v206 = cv::noArray(v205);
          cv::add((uint64_t)&v338, (uint64_t)v292, (const cv::_InputArray *)v291, (const cv::_OutputArray *)v206, (const cv::_InputArray *)0xFFFFFFFFLL);
          goto LABEL_316;
        }
        cv::_OutputArray::_OutputArray((uint64_t)&v338, (cv::Mat *)&v301);
        cv::Mat::convertTo((cv::Mat *)&v293, (const cv::_OutputArray *)&v338, v262, 1.0, a8);
LABEL_316:
        v207 = *(unsigned int **)&v350[8];
        if (*(_QWORD *)&v350[8])
        {
          do
          {
            v208 = __ldaxr(v207);
            v209 = v208 - 1;
          }
          while (__stlxr(v209, v207));
          if (!v209)
            cv::Mat::deallocate((cv::Mat *)&v349, v87);
        }
        *(_QWORD *)v350 = 0;
        v351 = 0uLL;
        *(_QWORD *)&v350[16] = 0;
        if (v349.i32[1] >= 1)
        {
          v210 = 0;
          v211 = v353;
          do
            *((_DWORD *)v211 + v210++) = 0;
          while (v210 < v349.i32[1]);
        }
        *(_QWORD *)&v350[8] = 0;
        if (v354 != (cv *)&v355)
          cv::fastFree((void **)v354, v87);
        v212 = (unsigned int *)v295;
        if ((_QWORD)v295)
        {
          do
          {
            v213 = __ldaxr(v212);
            v214 = v213 - 1;
          }
          while (__stlxr(v214, v212));
          if (!v214)
            cv::Mat::deallocate((cv::Mat *)&v293, v87);
        }
        v294 = 0;
        v296 = 0uLL;
        *((_QWORD *)&v295 + 1) = 0;
        if (SDWORD1(v293) >= 1)
        {
          v215 = 0;
          v216 = v298;
          do
            *(_DWORD *)&v216[4 * v215++] = 0;
          while (v215 < SDWORD1(v293));
        }
        *(_QWORD *)&v295 = 0;
        if (v299 != (cv *)v300)
          cv::fastFree((void **)v299, v87);
        v103 = v131++ == v289;
      }
      while (!v103);
      v217 = (unsigned int *)*((_QWORD *)&v302 + 1);
      v104 = v267;
      if (*((_QWORD *)&v302 + 1))
      {
        do
        {
          v218 = __ldaxr(v217);
          v219 = v218 - 1;
        }
        while (__stlxr(v219, v217));
        if (!v219)
          cv::Mat::deallocate((cv::Mat *)&v301, v87);
      }
      *(_QWORD *)&v302 = 0;
      v304 = 0;
      v305 = 0;
      v303 = 0;
      if (v301.i32[1] >= 1)
      {
        v220 = 0;
        v221 = v306;
        do
          *(_DWORD *)(v221 + 4 * v220++) = 0;
        while (v220 < v301.i32[1]);
      }
      *((_QWORD *)&v302 + 1) = 0;
      if (v307 != (cv *)&v308)
        cv::fastFree((void **)v307, v87);
      v222 = (unsigned int *)v359;
      if ((_QWORD)v359)
      {
        do
        {
          v223 = __ldaxr(v222);
          v224 = v223 - 1;
        }
        while (__stlxr(v224, v222));
        if (!v224)
          cv::Mat::deallocate((cv::Mat *)&v357, v87);
      }
      v358 = 0;
      v360 = 0uLL;
      *((_QWORD *)&v359 + 1) = 0;
      if (v357.i32[1] >= 1)
      {
        v225 = 0;
        v226 = v362;
        do
          *(_DWORD *)&v226[4 * v225++] = 0;
        while (v225 < v357.i32[1]);
      }
      *(_QWORD *)&v359 = 0;
      if (v363 != (cv *)&v364)
        cv::fastFree((void **)v363, v87);
      v227 = (unsigned int *)v313;
      if ((_QWORD)v313)
      {
        do
        {
          v228 = __ldaxr(v227);
          v229 = v228 - 1;
        }
        while (__stlxr(v229, v227));
        if (!v229)
          cv::Mat::deallocate((cv::Mat *)&v311, v87);
      }
      v312 = 0;
      v314 = 0uLL;
      *((_QWORD *)&v313 + 1) = 0;
      if (v311.i32[1] >= 1)
      {
        v230 = 0;
        v231 = v316;
        do
          *(_DWORD *)(v231 + 4 * v230++) = 0;
        while (v230 < v311.i32[1]);
      }
      *(_QWORD *)&v313 = 0;
      if (v317 != (cv *)v318)
        cv::fastFree((void **)v317, v87);
      v232 = (unsigned int *)v321;
      if ((_QWORD)v321)
      {
        do
        {
          v233 = __ldaxr(v232);
          v234 = v233 - 1;
        }
        while (__stlxr(v234, v232));
        if (!v234)
          cv::Mat::deallocate((cv::Mat *)__p, v87);
      }
      v320 = 0;
      v322 = 0uLL;
      *((_QWORD *)&v321 + 1) = 0;
      if (SHIDWORD(__p[0]) >= 1)
      {
        v235 = 0;
        v236 = v324;
        do
          *(_DWORD *)(v236 + 4 * v235++) = 0;
        while (v235 < SHIDWORD(__p[0]));
      }
      *(_QWORD *)&v321 = 0;
      if (v325 != (cv *)v326)
        cv::fastFree((void **)v325, v87);
      v117 = v265 + 1;
    }
    while (v265 + 1 != v259);
  }
  v237 = (unsigned int *)v368;
  if ((_QWORD)v368)
  {
    do
    {
      v238 = __ldaxr(v237);
      v239 = v238 - 1;
    }
    while (__stlxr(v239, v237));
    if (!v239)
      cv::Mat::deallocate((cv::Mat *)v366, v87);
  }
  v367 = 0;
  v369 = 0uLL;
  *((_QWORD *)&v368 + 1) = 0;
  if (SHIDWORD(v366[0]) >= 1)
  {
    v240 = 0;
    v241 = v371;
    do
      *((_DWORD *)v241 + v240++) = 0;
    while (v240 < SHIDWORD(v366[0]));
  }
  *(_QWORD *)&v368 = 0;
  if (v372 != (cv *)&v373)
    cv::fastFree((void **)v372, v87);
  v242 = (unsigned int *)*((_QWORD *)&v375[1] + 1);
  if (*((_QWORD *)&v375[1] + 1))
  {
    do
    {
      v243 = __ldaxr(v242);
      v244 = v243 - 1;
    }
    while (__stlxr(v244, v242));
    if (!v244)
      cv::Mat::deallocate((cv::Mat *)v375, v87);
  }
  *(_QWORD *)&v375[1] = 0;
  memset(&v375[2], 0, 24);
  if (SDWORD1(v375[0]) >= 1)
  {
    v245 = 0;
    v246 = v376;
    do
      *(_DWORD *)&v246[4 * v245++] = 0;
    while (v245 < SDWORD1(v375[0]));
  }
  *((_QWORD *)&v375[1] + 1) = 0;
  if (v377 != (cv *)v378)
    cv::fastFree((void **)v377, v87);
  v247 = *(unsigned int **)&v379[6];
  if (*(_QWORD *)&v379[6])
  {
    do
    {
      v248 = __ldaxr(v247);
      v249 = v248 - 1;
    }
    while (__stlxr(v249, v247));
    if (!v249)
      cv::Mat::deallocate((cv::Mat *)v379, v87);
  }
  *(_QWORD *)&v379[4] = 0;
  memset(&v379[8], 0, 24);
  if (v379[1] >= 1)
  {
    v250 = 0;
    v251 = v380;
    do
      v251[v250++] = 0;
    while (v250 < v379[1]);
  }
  *(_QWORD *)&v379[6] = 0;
  if (v381 != v382)
    cv::fastFree(v381, v87);
  v252 = (unsigned int *)v329;
  if ((_QWORD)v329)
  {
    do
    {
      v253 = __ldaxr(v252);
      v254 = v253 - 1;
    }
    while (__stlxr(v254, v252));
    if (!v254)
      cv::Mat::deallocate((cv::Mat *)v327, v87);
  }
  v328 = 0;
  v330 = 0uLL;
  *((_QWORD *)&v329 + 1) = 0;
  if (v327[1] >= 1)
  {
    v255 = 0;
    v256 = v332;
    do
      v256[v255++] = 0;
    while (v255 < v327[1]);
  }
  *(_QWORD *)&v329 = 0;
  if (v333 != (cv *)v334)
    cv::fastFree((void **)v333, v87);
  if (v335)
  {
    v336 = (char *)v335;
    operator delete(v335);
  }
}

void sub_219E427E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v10;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;

  cv::Exception::~Exception((cv::Exception *)(v10 - 240));
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  v13 = (unsigned int *)STACK[0x378];
  if (STACK[0x378])
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      cv::Mat::deallocate((cv::Mat *)&STACK[0x360], v12);
  }
  STACK[0x370] = 0;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (SLODWORD(STACK[0x364]) >= 1)
  {
    v16 = 0;
    v17 = STACK[0x3A0];
    do
      *(_DWORD *)(v17 + 4 * v16++) = 0;
    while (v16 < SLODWORD(STACK[0x364]));
  }
  STACK[0x378] = 0;
  if (STACK[0x3A8] != a10)
    cv::fastFree((void **)STACK[0x3A8], v12);
  v18 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

cv::BaseRowFilter *cv::getRowSumFilter@<X0>(cv *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, cv::BaseRowFilter **a5@<X8>)
{
  int v5;
  const cv::Exception *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  cv::BaseRowFilter *v13;
  uint64_t (**v14)();
  cv::BaseRowFilter *result;
  const cv::Exception *v16;
  void *__p[2];
  void *v18[2];
  void *v19[2];
  _BYTE v20[120];

  v5 = a4;
  if ((((unsigned __int16)a2 ^ (unsigned __int16)this) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)");
    std::string::basic_string[abi:ne180100]<0>(v18, "getRowSumFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
    cv::Exception::Exception(v20, 4294967081, v19, v18, __p, 619);
    cv::error((cv *)v20, v8);
  }
  v9 = a2 & 7;
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = a3 + 1;
  v11 = v10 >> 1;
  if (a4 < 0)
    v5 = v11;
  v12 = this & 7;
  if ((this & 7) != 0 || v9 != 4)
  {
    if ((this & 7) != 0 || v9 != 6)
    {
      if (v12 == 2 && v9 == 4)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF890;
      }
      else if (v12 == 2 && v9 == 6)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF8D0;
      }
      else if (v12 == 3 && v9 == 4)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF910;
      }
      else if (v12 == 4 && v9 == 4)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF950;
      }
      else if (v12 == 3 && v9 == 6)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF990;
      }
      else if (v12 == 5 && v9 == 6)
      {
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEF9D0;
      }
      else
      {
        if (v12 != 6 || v9 != 6)
        {
          cv::format(v19, this, a2);
          std::string::basic_string[abi:ne180100]<0>(v18, "getRowSumFilter");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
          cv::Exception::Exception(v20, 4294967083, v19, v18, __p, 645);
          cv::error((cv *)v20, v16);
        }
        v13 = (cv::BaseRowFilter *)operator new();
        cv::BaseRowFilter::BaseRowFilter(v13);
        v14 = &off_24DBEFA10;
      }
    }
    else
    {
      v13 = (cv::BaseRowFilter *)operator new();
      cv::BaseRowFilter::BaseRowFilter(v13);
      v14 = &off_24DBEF850;
    }
  }
  else
  {
    v13 = (cv::BaseRowFilter *)operator new();
    cv::BaseRowFilter::BaseRowFilter(v13);
    v14 = &off_24DBEF810;
  }
  *(_QWORD *)v13 = v14;
  *((_DWORD *)v13 + 2) = a3;
  *((_DWORD *)v13 + 3) = v5;
  *a5 = v13;
  result = (cv::BaseRowFilter *)cv::fastMalloc((cv *)4);
  *(_DWORD *)result = 1;
  a5[1] = result;
  return result;
}

void sub_219E43230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

_DWORD *cv::getColumnSumFilter@<X0>(cv *this@<X0>, double a2@<D0>, uint64_t a3@<X1>, int a4@<W2>, int a5@<W3>, uint64_t *a6@<X8>)
{
  int v7;
  const cv::Exception *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t (**v16)(cv::BaseRowFilter *);
  _DWORD *result;
  const cv::Exception *v18;
  void *__p[2];
  void *v20[2];
  void *v21[2];
  _BYTE v22[120];

  v7 = a5;
  if ((((unsigned __int16)a3 ^ (unsigned __int16)this) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)");
    std::string::basic_string[abi:ne180100]<0>(v20, "getColumnSumFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 655);
    cv::error((cv *)v22, v10);
  }
  v11 = this & 7;
  v12 = a3 & 7;
  if (a4 >= 0)
    v13 = a4;
  else
    v13 = a4 + 1;
  v14 = v13 >> 1;
  if (a5 < 0)
    v7 = v14;
  if (v11 != 4 || (a3 & 7) != 0)
  {
    if (v11 != 6 || (a3 & 7) != 0)
    {
      if (v11 == 4 && v12 == 2)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEF780;
      }
      else if (v11 == 6 && v12 == 2)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFA98;
      }
      else if (v11 == 4 && v12 == 3)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEF7C8;
      }
      else if (v11 == 6 && v12 == 3)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFAE0;
      }
      else if (v11 == 4 && v12 == 4)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFB28;
      }
      else if (v11 == 4 && v12 == 5)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFB70;
      }
      else if (v11 == 6 && v12 == 5)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFBB8;
      }
      else if (v11 == 4 && v12 == 6)
      {
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFC00;
      }
      else
      {
        if (v11 != 6 || v12 != 6)
        {
          cv::format(v21, this, a3);
          std::string::basic_string[abi:ne180100]<0>(v20, "getColumnSumFilter");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
          cv::Exception::Exception(v22, 4294967083, v21, v20, __p, 685);
          cv::error((cv *)v22, v18);
        }
        v15 = operator new();
        cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
        v16 = &off_24DBEFC48;
      }
    }
    else
    {
      v15 = operator new();
      cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
      v16 = &off_24DBEFA50;
    }
  }
  else
  {
    v15 = operator new();
    cv::BaseColumnFilter::BaseColumnFilter((cv::BaseColumnFilter *)v15);
    v16 = &off_24DBEF738;
  }
  *(_QWORD *)v15 = v16;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 8) = a4;
  *(_DWORD *)(v15 + 12) = v7;
  *(double *)(v15 + 16) = a2;
  *(_DWORD *)(v15 + 24) = 0;
  *a6 = v15;
  result = (_DWORD *)cv::fastMalloc((cv *)4);
  *result = 1;
  a6[1] = (uint64_t)result;
  return result;
}

void sub_219E43730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void cv::createBoxFilter(cv *this@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  unsigned int v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  _DWORD *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _OWORD v32[2];
  uint64_t v33;
  cv *v34;
  uint64_t v35;
  cv *v36;
  cv::BaseRowFilter *v37;
  cv *v38;

  v12 = this;
  if ((this & 7u) > 4
    || a5
    && ((this & 7) != 2 ? (v14 = 0x10000) : (v14 = 0x8000),
        (this & 7) != 0 ? (v15 = v14) : (v15 = 0x800000),
        a3[1] * *a3 > v15))
  {
    v16 = 6;
  }
  else
  {
    v16 = 4;
  }
  v17 = v16 | (unsigned __int16)this & 0xFF8u;
  cv::getRowSumFilter(this, v17, *a3, *a4, &v37);
  v18 = a3[1];
  v19 = 1.0;
  if (a5)
    v19 = 1.0 / (double)(*a3 * v18);
  cv::getColumnSumFilter((cv *)v17, v19, a2, v18, a4[1], &v35);
  v20 = operator new();
  v33 = 0;
  v34 = 0;
  memset(v32, 0, sizeof(v32));
  cv::FilterEngine::FilterEngine(v20, &v33, &v37, &v35, v12, a2, v17, a6, -1, (uint64_t)v32);
  *a7 = v20;
  v21 = (_DWORD *)cv::fastMalloc((cv *)4);
  *v21 = 1;
  a7[1] = (uint64_t)v21;
  v23 = (unsigned int *)v34;
  if (v34)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      cv::fastFree((void **)v34, v22);
    }
  }
  v26 = (unsigned int *)v36;
  if (v36)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      cv::fastFree((void **)v36, v22);
    }
  }
  v29 = (unsigned int *)v38;
  if (v38)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      if (v37)
        (*(void (**)(cv::BaseRowFilter *))(*(_QWORD *)v37 + 8))(v37);
      cv::fastFree((void **)v38, v22);
    }
  }
}

void sub_219E43A10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  cv::Ptr<cv::BaseFilter>::~Ptr((uint64_t *)va, a2);
  cv::Ptr<cv::BaseColumnFilter>::~Ptr((uint64_t *)va1, v9);
  cv::Ptr<cv::BaseRowFilter>::~Ptr((uint64_t *)va2, v10);
  _Unwind_Resume(a1);
}

void cv::boxFilter(void (***a1)(uint64_t *__return_ptr, _QWORD, uint64_t), uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, int a6, int a7)
{
  char v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int32x2_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  cv *v34;
  _QWORD v35[3];
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  cv *v41;
  uint64_t v42;
  int32x2_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int32x2_t *v52;
  void **v53;
  uint64_t v54;

  (**a1)(&v44, a1, 0xFFFFFFFFLL);
  v13 = v44;
  if (a3 >= 0)
    v13 = a3;
  v43 = vrev64_s32(*v52);
  (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, &v43, v44 & 0xFF8 | v13 & 7, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t))a2)(v35, a2, 0xFFFFFFFFLL);
  if ((a7 & 0x10) != 0 && a6)
  {
    if (v45 == 1)
      a4[1] = 1;
    if (v46 == 1)
      *a4 = 1;
  }
  v14 = *(_QWORD *)a4;
  v31 = *a5;
  v32 = v14;
  cv::createBoxFilter((cv *)(v44 & 0xFFF), v35[0] & 0xFFF, (int *)&v32, (int *)&v31, a6, a7, &v33);
  v30 = xmmword_219E9E130;
  v29 = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, __int128 *, uint64_t *, _QWORD))(*(_QWORD *)v33 + 40))(v33, &v44, v35, &v30, &v29, 0);
  v16 = (unsigned int *)v34;
  if (v34)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      cv::fastFree((void **)v34, v15);
    }
  }
  v19 = v36;
  if (v36)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      cv::Mat::deallocate((cv::Mat *)v35, v15);
  }
  v35[2] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (SHIDWORD(v35[0]) >= 1)
  {
    v22 = 0;
    v23 = v40;
    do
      *(_DWORD *)(v23 + 4 * v22++) = 0;
    while (v22 < SHIDWORD(v35[0]));
  }
  v36 = 0;
  if (v41 != (cv *)&v42)
    cv::fastFree((void **)v41, v15);
  v24 = v48;
  if (v48)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      cv::Mat::deallocate((cv::Mat *)&v44, v15);
  }
  v47 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (SHIDWORD(v44) >= 1)
  {
    v27 = 0;
    v28 = v52;
    do
      v28->i32[v27++] = 0;
    while (v27 < SHIDWORD(v44));
  }
  v48 = 0;
  if (v53 != (void **)&v54)
    cv::fastFree(v53, v15);
}

void sub_219E43CE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  cv::Ptr<cv::FilterEngine>::~Ptr((uint64_t *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v11);
  cv::Mat::~Mat((cv::Mat *)(v9 - 160), v12);
  _Unwind_Resume(a1);
}

void cv::ColumnSum<int,unsigned char>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEF738;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEF738;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<int,unsigned char>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  int **v10;
  std::vector<int> *v12;
  void *v13;
  void *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int i;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  double v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  void *__p[2];
  void *v35[2];
  void *v36[2];
  _BYTE v37[120];

  v10 = a2;
  v14 = *(void **)(a1 + 32);
  v12 = (std::vector<int> *)(a1 + 32);
  v13 = v14;
  v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v35, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v37, 4294967081, v36, v35, __p, 254);
        cv::error((cv *)v37, v18);
      }
      v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  v19 = *(_DWORD *)(a1 + 24);
  for (i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      v21 = *v10;
      v22 = a6;
      v23 = v13;
      do
      {
        v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      v19 = *(_DWORD *)(a1 + 24);
      i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    v25 = *v10;
    v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        v31 = 0;
        do
        {
          v32 = v25[v31] + *((_DWORD *)v13 + v31);
          v33 = v32 & ~(v32 >> 31);
          if (v33 >= 255)
            LOBYTE(v33) = -1;
          *(_BYTE *)(a3 + v31) = v33;
          *((_DWORD *)v13 + v31) = v32 - v26[v31];
          ++v31;
        }
        while (a6 != v31);
      }
    }
    else if (a6 >= 1)
    {
      v27 = 0;
      do
      {
        v28 = v25[v27] + *((_DWORD *)v13 + v27);
        v29 = rint(v15 * (double)v28);
        v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v30 >= 255)
          LOBYTE(v30) = -1;
        *(_BYTE *)(a3 + v27) = v30;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_219E4402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,unsigned char>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,unsigned short>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEF780;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEF780;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<int,unsigned short>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  int **v10;
  std::vector<int> *v12;
  void *v13;
  void *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int i;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  double v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  void *__p[2];
  void *v35[2];
  void *v36[2];
  _BYTE v37[120];

  v10 = a2;
  v14 = *(void **)(a1 + 32);
  v12 = (std::vector<int> *)(a1 + 32);
  v13 = v14;
  v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v35, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v37, 4294967081, v36, v35, __p, 531);
        cv::error((cv *)v37, v18);
      }
      v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  v19 = *(_DWORD *)(a1 + 24);
  for (i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      v21 = *v10;
      v22 = a6;
      v23 = v13;
      do
      {
        v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      v19 = *(_DWORD *)(a1 + 24);
      i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    v25 = *v10;
    v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        v31 = 0;
        do
        {
          v32 = v25[v31] + *((_DWORD *)v13 + v31);
          v33 = v32 & ~(v32 >> 31);
          if (v33 >= 0xFFFF)
            LOWORD(v33) = -1;
          *(_WORD *)(a3 + 2 * v31) = v33;
          *((_DWORD *)v13 + v31) = v32 - v26[v31];
          ++v31;
        }
        while (a6 != v31);
      }
    }
    else if (a6 >= 1)
    {
      v27 = 0;
      do
      {
        v28 = v25[v27] + *((_DWORD *)v13 + v27);
        v29 = rint(v15 * (double)v28);
        v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v30 >= 0xFFFF)
          LOWORD(v30) = -1;
        *(_WORD *)(a3 + 2 * v27) = v30;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_219E4439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,unsigned short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,short>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEF7C8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEF7C8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<int,short>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  int **v10;
  std::vector<int> *v12;
  void *v13;
  void *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int i;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void *__p[2];
  void *v34[2];
  void *v35[2];
  _BYTE v36[120];

  v10 = a2;
  v14 = *(void **)(a1 + 32);
  v12 = (std::vector<int> *)(a1 + 32);
  v13 = v14;
  v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v35, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v34, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v36, 4294967081, v35, v34, __p, 394);
        cv::error((cv *)v36, v18);
      }
      v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  v19 = *(_DWORD *)(a1 + 24);
  for (i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      v21 = *v10;
      v22 = a6;
      v23 = v13;
      do
      {
        v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      v19 = *(_DWORD *)(a1 + 24);
      i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    v25 = *v10;
    v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        v30 = 0;
        do
        {
          v31 = v25[v30] + *((_DWORD *)v13 + v30);
          if (v31 <= -32768)
            v32 = -32768;
          else
            v32 = v25[v30] + *((_DWORD *)v13 + v30);
          if (v32 >= 0x7FFF)
            LOWORD(v32) = 0x7FFF;
          *(_WORD *)(a3 + 2 * v30) = v32;
          *((_DWORD *)v13 + v30) = v31 - v26[v30];
          ++v30;
        }
        while (a6 != v30);
      }
    }
    else if (a6 >= 1)
    {
      v27 = 0;
      do
      {
        v28 = v25[v27] + *((_DWORD *)v13 + v27);
        v29 = (uint64_t)rint(v15 * (double)v28);
        if ((int)v29 <= -32768)
          LODWORD(v29) = -32768;
        if ((int)v29 >= 0x7FFF)
          LOWORD(v29) = 0x7FFF;
        *(_WORD *)(a3 + 2 * v27) = v29;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_219E44718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::RowSum<unsigned char,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<unsigned char,int>::operator()(uint64_t result, uint64_t a2, int *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v10 += *(unsigned __int8 *)(a2 + v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          v10 = v10 - *(unsigned __int8 *)(a2 + i) + *(unsigned __int8 *)(a2 + v6 + i);
          v8[i] = v10;
        }
      }
      ++v5;
      ++a2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<unsigned char,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<unsigned char,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5, double a6, double a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t i;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = *(int *)(result + 8) * (uint64_t)a5;
    v9 = (a4 - 1) * a5;
    v10 = &a3[a5];
    do
    {
      if ((int)v8 < 1)
      {
        v12 = 0.0;
      }
      else
      {
        v11 = 0;
        v12 = 0.0;
        do
        {
          LOBYTE(a7) = *(_BYTE *)(a2 + v11);
          a7 = (double)*(unint64_t *)&a7;
          v12 = v12 + a7;
          v11 += a5;
        }
        while (v11 < v8);
      }
      *a3 = v12;
      if ((int)v9 >= 1)
      {
        for (i = 0; i < v9; i += a5)
        {
          a7 = (double)(*(unsigned __int8 *)(a2 + v8 + i) - *(unsigned __int8 *)(a2 + i));
          v12 = v12 + a7;
          v10[i] = v12;
        }
      }
      ++v7;
      ++a2;
      ++a3;
      ++v10;
    }
    while (v7 != a5);
  }
  return result;
}

void cv::RowSum<unsigned short,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<unsigned short,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v10 += *(unsigned __int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          result = *(unsigned __int16 *)(a2 + 2 * i);
          v10 = v10 - result + *(unsigned __int16 *)(a2 + 2 * v6 + 2 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<unsigned short,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<unsigned short,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5, double a6, double a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t i;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = *(int *)(result + 8) * (uint64_t)a5;
    v9 = (a4 - 1) * a5;
    v10 = &a3[a5];
    do
    {
      if ((int)v8 < 1)
      {
        v12 = 0.0;
      }
      else
      {
        v11 = 0;
        v12 = 0.0;
        do
        {
          LOWORD(a7) = *(_WORD *)(a2 + 2 * v11);
          a7 = (double)*(unint64_t *)&a7;
          v12 = v12 + a7;
          v11 += a5;
        }
        while (v11 < v8);
      }
      *a3 = v12;
      if ((int)v9 >= 1)
      {
        for (i = 0; i < v9; i += a5)
        {
          a7 = (double)(*(unsigned __int16 *)(a2 + 2 * v8 + 2 * i) - *(unsigned __int16 *)(a2 + 2 * i));
          v12 = v12 + a7;
          v10[i] = v12;
        }
      }
      ++v7;
      a2 += 2;
      ++a3;
      ++v10;
    }
    while (v7 != a5);
  }
  return result;
}

void cv::RowSum<short,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<short,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v10 += *(__int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          result = *(__int16 *)(a2 + 2 * i);
          v10 = v10 - result + *(__int16 *)(a2 + 2 * v6 + 2 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<int,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<int,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v10 += *(_DWORD *)(a2 + 4 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          result = *(unsigned int *)(a2 + 4 * i);
          v10 += *(_DWORD *)(a2 + 4 * v6 + 4 * i) - result;
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 4;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<short,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<short,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0.0;
      }
      else
      {
        v9 = 0;
        v10 = 0.0;
        do
        {
          v10 = v10 + (double)*(__int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          v10 = v10 + (double)(*(__int16 *)(a2 + 2 * v6 + 2 * i) - *(__int16 *)(a2 + 2 * i));
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<float,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<float,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0.0;
      }
      else
      {
        v9 = 0;
        v10 = 0.0;
        do
        {
          v10 = v10 + *(float *)(a2 + 4 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          v10 = v10 + (float)(*(float *)(a2 + 4 * v6 + 4 * i) - *(float *)(a2 + 4 * i));
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 4;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<double,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x2207351BCLL);
}

uint64_t cv::RowSum<double,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(result + 8) * (uint64_t)a5;
    v7 = (a4 - 1) * a5;
    v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0.0;
      }
      else
      {
        v9 = 0;
        v10 = 0.0;
        do
        {
          v10 = v10 + *(double *)(a2 + 8 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (i = 0; i < v7; i += a5)
        {
          v10 = v10 + *(double *)(a2 + 8 * v6 + 8 * i) - *(double *)(a2 + 8 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 8;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::ColumnSum<double,unsigned char>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEFA50;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEFA50;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<double,unsigned char>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  float64x2_t **v10;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  float64x2_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  int32x2_t v43;
  _BYTE *v44;
  float64x2_t v45;
  double v46;
  double v47;
  int v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  int32x2_t v54;
  _BYTE *v55;
  float64x2_t v56;
  double v57;
  double v58;
  int v59;
  void *__p[2];
  void *v61[2];
  void *v62[2];
  _BYTE v63[120];

  v10 = a2;
  v14 = *(float64x2_t **)(a1 + 32);
  v12 = a1 + 32;
  v13 = v14;
  v15 = *(double *)(v12 - 16);
  if (((*(_QWORD *)(v12 + 8) - (_QWORD)v14) >> 3) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v61, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v63, 4294967081, v62, v61, __p, 145);
        cv::error((cv *)v63, v18);
      }
      v10 = &a2[v17];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1)
    bzero(v13, 8 * a6);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    v22 = 0;
    do
    {
      v23 = *v10;
      if (a6 >= 2)
      {
        v25 = 0;
        v26 = v13;
        v27 = *v10;
        do
        {
          v28 = *v27++;
          *v26 = vaddq_f64(*v26, v28);
          ++v26;
          v25 += 2;
        }
        while (v25 <= a6 - 2);
        v24 = v25;
      }
      else
      {
        v24 = 0;
      }
      if ((int)v24 < a6)
      {
        v29 = &v13->f64[v24];
        v30 = a6 - v24;
        v31 = &v23->f64[v24];
        do
        {
          v32 = *v31++;
          *v29 = v32 + *v29;
          ++v29;
          --v30;
        }
        while (v30);
      }
      ++v22;
      ++v10;
    }
    while (v22 != v21);
    *(_DWORD *)(a1 + 24) = v21;
  }
LABEL_21:
  if (a5)
  {
    v33 = a6 - 2;
    do
    {
      v34 = *v10;
      v35 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          v37 = 0;
          v49 = v13;
          v50 = *v10;
          v51 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            v52 = *v50++;
            v53 = vaddq_f64(*v49, v52);
            v54 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v53.f64[1]), (uint64_t)rint(v53.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            v55 = (_BYTE *)(a3 + v37);
            v55[1] = v54.i8[4];
            *v55 = v54.i8[0];
            v56 = *v51++;
            *v49++ = vsubq_f64(v53, v56);
            v37 += 2;
          }
          while (v37 <= v33);
          v37 = v37;
        }
        else
        {
          v37 = 0;
        }
        if ((int)v37 < a6)
        {
          do
          {
            v57 = v13->f64[v37] + v34->f64[v37];
            v58 = rint(v57);
            v59 = (uint64_t)v58 & ~((int)(uint64_t)v58 >> 31);
            if (v59 >= 255)
              LOBYTE(v59) = -1;
            *(_BYTE *)(a3 + v37) = v59;
            v13->f64[v37] = v57 - v35->f64[v37];
            ++v37;
          }
          while (a6 != v37);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          v36 = 0;
          v38 = v13;
          v39 = *v10;
          v40 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            v41 = *v39++;
            v42 = vaddq_f64(*v38, v41);
            v43 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(vmuld_lane_f64(v15, v42, 1)), (uint64_t)rint(v15 * v42.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            v44 = (_BYTE *)(a3 + v36);
            v44[1] = v43.i8[4];
            *v44 = v43.i8[0];
            v45 = *v40++;
            *v38++ = vsubq_f64(v42, v45);
            v36 += 2;
          }
          while (v36 <= v33);
          v36 = v36;
        }
        else
        {
          v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            v46 = v13->f64[v36] + v34->f64[v36];
            v47 = rint(v15 * v46);
            v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
            if (v48 >= 255)
              LOBYTE(v48) = -1;
            *(_BYTE *)(a3 + v36) = v48;
            v13->f64[v36] = v46 - v35->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_219E45364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,unsigned char>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,unsigned short>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEFA98;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEFA98;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<double,unsigned short>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  float64x2_t **v10;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int v20;
  float64x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  _WORD *v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  int v44;
  double v45;
  int v46;
  float64x2_t v47;
  double v48;
  double v49;
  int v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  _WORD *v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  int v58;
  double v59;
  int v60;
  float64x2_t v61;
  double v62;
  double v63;
  int v64;
  void *__p[2];
  void *v66[2];
  void *v67[2];
  _BYTE v68[120];

  v10 = a2;
  v14 = *(float64x2_t **)(a1 + 32);
  v12 = a1 + 32;
  v13 = v14;
  v15 = *(double *)(v12 - 16);
  if (((*(_QWORD *)(v12 + 8) - (_QWORD)v14) >> 3) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v66, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v68, 4294967081, v67, v66, __p, 145);
        cv::error((cv *)v68, v18);
      }
      v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1)
    bzero(v13, 8 * a6);
  v17 = *(_DWORD *)(a1 + 8);
  v19 = v17 - 1;
  if (v17 > 1)
  {
    v20 = 0;
    do
    {
      v21 = *v10;
      if (a6 >= 2)
      {
        v23 = 0;
        v24 = v13;
        v25 = *v10;
        do
        {
          v26 = *v25++;
          *v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        v22 = v23;
      }
      else
      {
        v22 = 0;
      }
      if ((int)v22 < a6)
      {
        v27 = &v13->f64[v22];
        v28 = a6 - v22;
        v29 = &v21->f64[v22];
        do
        {
          v30 = *v29++;
          *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    v31 = 1 - v17;
    v32 = a6 - 2;
    do
    {
      v33 = *v10;
      v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          v36 = 0;
          v51 = v13;
          v52 = *v10;
          v53 = v10[v31];
          do
          {
            v54 = (_WORD *)(a3 + 2 * v36);
            v55 = *v52++;
            v56 = vaddq_f64(*v51, v55);
            v57 = rint(v56.f64[0]);
            v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
            if (v58 >= 0xFFFF)
              LOWORD(v58) = -1;
            *v54 = v58;
            v59 = rint(v56.f64[1]);
            v60 = (uint64_t)v59 & ~((int)(uint64_t)v59 >> 31);
            if (v60 >= 0xFFFF)
              LOWORD(v60) = -1;
            v54[1] = v60;
            v61 = *v53++;
            *v51++ = vsubq_f64(v56, v61);
            v36 += 2;
          }
          while (v36 <= v32);
          v36 = v36;
        }
        else
        {
          v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            v62 = v13->f64[v36] + v33->f64[v36];
            v63 = rint(v62);
            v64 = (uint64_t)v63 & ~((int)(uint64_t)v63 >> 31);
            if (v64 >= 0xFFFF)
              LOWORD(v64) = -1;
            *(_WORD *)(a3 + 2 * v36) = v64;
            v13->f64[v36] = v62 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          v35 = 0;
          v37 = v13;
          v38 = *v10;
          v39 = v10[v31];
          do
          {
            v40 = (_WORD *)(a3 + 2 * v35);
            v41 = *v38++;
            v42 = vaddq_f64(*v37, v41);
            v43 = rint(v15 * v42.f64[0]);
            v44 = (uint64_t)v43 & ~((int)(uint64_t)v43 >> 31);
            if (v44 >= 0xFFFF)
              LOWORD(v44) = -1;
            *v40 = v44;
            v45 = rint(vmuld_lane_f64(v15, v42, 1));
            v46 = (uint64_t)v45 & ~((int)(uint64_t)v45 >> 31);
            if (v46 >= 0xFFFF)
              LOWORD(v46) = -1;
            v40[1] = v46;
            v47 = *v39++;
            *v37++ = vsubq_f64(v42, v47);
            v35 += 2;
          }
          while (v35 <= v32);
          v35 = v35;
        }
        else
        {
          v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            v48 = v13->f64[v35] + v33->f64[v35];
            v49 = rint(v15 * v48);
            v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
            if (v50 >= 0xFFFF)
              LOWORD(v50) = -1;
            *(_WORD *)(a3 + 2 * v35) = v50;
            v13->f64[v35] = v48 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_219E4581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,unsigned short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,short>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEFAE0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEFAE0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<double,short>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  float64x2_t **v10;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int v20;
  float64x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  _WORD *v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  float64x2_t v45;
  double v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  _WORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  float64x2_t v56;
  double v57;
  uint64_t v58;
  void *__p[2];
  void *v60[2];
  void *v61[2];
  _BYTE v62[120];

  v10 = a2;
  v14 = *(float64x2_t **)(a1 + 32);
  v12 = a1 + 32;
  v13 = v14;
  v15 = *(double *)(v12 - 16);
  if (((*(_QWORD *)(v12 + 8) - (_QWORD)v14) >> 3) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v61, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v60, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v62, 4294967081, v61, v60, __p, 145);
        cv::error((cv *)v62, v18);
      }
      v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1)
    bzero(v13, 8 * a6);
  v17 = *(_DWORD *)(a1 + 8);
  v19 = v17 - 1;
  if (v17 > 1)
  {
    v20 = 0;
    do
    {
      v21 = *v10;
      if (a6 >= 2)
      {
        v23 = 0;
        v24 = v13;
        v25 = *v10;
        do
        {
          v26 = *v25++;
          *v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        v22 = v23;
      }
      else
      {
        v22 = 0;
      }
      if ((int)v22 < a6)
      {
        v27 = &v13->f64[v22];
        v28 = a6 - v22;
        v29 = &v21->f64[v22];
        do
        {
          v30 = *v29++;
          *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    v31 = 1 - v17;
    v32 = a6 - 2;
    do
    {
      v33 = *v10;
      v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          v36 = 0;
          v48 = v13;
          v49 = *v10;
          v50 = v10[v31];
          do
          {
            v51 = (_WORD *)(a3 + 2 * v36);
            v52 = *v49++;
            v53 = vaddq_f64(*v48, v52);
            v54 = (uint64_t)rint(v53.f64[0]);
            if ((int)v54 <= -32768)
              LODWORD(v54) = -32768;
            if ((int)v54 >= 0x7FFF)
              LOWORD(v54) = 0x7FFF;
            *v51 = v54;
            v55 = (uint64_t)rint(v53.f64[1]);
            if ((int)v55 <= -32768)
              LODWORD(v55) = -32768;
            if ((int)v55 >= 0x7FFF)
              LOWORD(v55) = 0x7FFF;
            v51[1] = v55;
            v56 = *v50++;
            *v48++ = vsubq_f64(v53, v56);
            v36 += 2;
          }
          while (v36 <= v32);
          v36 = v36;
        }
        else
        {
          v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            v57 = v13->f64[v36] + v33->f64[v36];
            v58 = (uint64_t)rint(v57);
            if ((int)v58 <= -32768)
              LODWORD(v58) = -32768;
            if ((int)v58 >= 0x7FFF)
              LOWORD(v58) = 0x7FFF;
            *(_WORD *)(a3 + 2 * v36) = v58;
            v13->f64[v36] = v57 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          v35 = 0;
          v37 = v13;
          v38 = *v10;
          v39 = v10[v31];
          do
          {
            v40 = (_WORD *)(a3 + 2 * v35);
            v41 = *v38++;
            v42 = vaddq_f64(*v37, v41);
            v43 = (uint64_t)rint(v15 * v42.f64[0]);
            if ((int)v43 <= -32768)
              LODWORD(v43) = -32768;
            if ((int)v43 >= 0x7FFF)
              LOWORD(v43) = 0x7FFF;
            *v40 = v43;
            v44 = (uint64_t)rint(vmuld_lane_f64(v15, v42, 1));
            if ((int)v44 <= -32768)
              LODWORD(v44) = -32768;
            if ((int)v44 >= 0x7FFF)
              LOWORD(v44) = 0x7FFF;
            v40[1] = v44;
            v45 = *v39++;
            *v37++ = vsubq_f64(v42, v45);
            v35 += 2;
          }
          while (v35 <= v32);
          v35 = v35;
        }
        else
        {
          v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            v46 = v13->f64[v35] + v33->f64[v35];
            v47 = (uint64_t)rint(v15 * v46);
            if ((int)v47 <= -32768)
              LODWORD(v47) = -32768;
            if ((int)v47 >= 0x7FFF)
              LOWORD(v47) = 0x7FFF;
            *(_WORD *)(a3 + 2 * v35) = v47;
            v13->f64[v35] = v46 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_219E45CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,int>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEFB28;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEFB28;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<int,int>::operator()(uint64_t a1, int32x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  int32x2_t **v10;
  std::vector<int> *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int32x2_t *v24;
  int32x2_t v25;
  _DWORD *v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int32x2_t *v32;
  int32x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  int32x2_t *v36;
  int32x2_t *v37;
  int32x2_t *v38;
  _DWORD *v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int v43;
  uint64_t v44;
  int32x2_t v45;
  int v46;
  void *__p[2];
  void *v48[2];
  void *v49[2];
  _BYTE v50[120];

  v10 = a2;
  v14 = *(int32x2_t **)(a1 + 32);
  v12 = (std::vector<int> *)(a1 + 32);
  v13 = v14;
  v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v49, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v48, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v50, 4294967081, v49, v48, __p, 145);
        cv::error((cv *)v50, v18);
      }
      v10 = &a2[v17];
      goto LABEL_20;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(int32x2_t **)(a1 + 32);
  }
  if (a6 < 1)
  {
    v19 = 0;
  }
  else
  {
    bzero(v13, 4 * a6);
    v19 = *(_DWORD *)(a1 + 24);
  }
  if (v19 < *(_DWORD *)(a1 + 8) - 1)
  {
    do
    {
      v20 = *v10;
      if (a6 >= 2)
      {
        v22 = 0;
        v23 = v13;
        v24 = *v10;
        do
        {
          v25 = *v24++;
          *v23 = vadd_s32(v25, *v23);
          ++v23;
          v22 += 2;
        }
        while (v22 <= a6 - 2);
        v21 = v22;
      }
      else
      {
        v21 = 0;
      }
      if ((int)v21 < a6)
      {
        v26 = (_DWORD *)v13 + v21;
        v27 = a6 - v21;
        v28 = (int *)v20 + v21;
        do
        {
          v29 = *v28++;
          *v26++ += v29;
          --v27;
        }
        while (v27);
      }
      v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v10;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_20:
  if (a5)
  {
    v31 = a6 - 2;
    do
    {
      v32 = *v10;
      v33 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          v44 = 0;
          v35 = 0;
          do
          {
            v45 = vadd_s32(v32[v44], v13[v44]);
            *(int32x2_t *)(a3 + v44 * 8) = v45;
            v13[v44] = vsub_s32(v45, v33[v44]);
            v35 += 2;
            ++v44;
          }
          while (v35 <= v31);
          v35 = v35;
        }
        else
        {
          v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            v46 = v32->i32[v35] + v13->i32[v35];
            *(_DWORD *)(a3 + 4 * v35) = v46;
            v13->i32[v35] = v46 - v33->i32[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          v34 = 0;
          v36 = v13;
          v37 = *v10;
          v38 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            v39 = (_DWORD *)(a3 + 4 * v34);
            v40 = *v37++;
            v41 = vadd_s32(v40, *v36);
            *v39 = (uint64_t)rint(v15 * (double)v41.i32[0]);
            v39[1] = (uint64_t)rint(v15 * (double)v41.i32[1]);
            v42 = *v38++;
            *v36++ = vsub_s32(v41, v42);
            v34 += 2;
          }
          while (v34 <= v31);
          v34 = v34;
        }
        else
        {
          v34 = 0;
        }
        if ((int)v34 < a6)
        {
          do
          {
            v43 = v32->i32[v34] + v13->i32[v34];
            *(_DWORD *)(a3 + 4 * v34) = (uint64_t)rint(v15 * (double)v43);
            v13->i32[v34] = v43 - v33->i32[v34];
            ++v34;
          }
          while (a6 != v34);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_219E4615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,int>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,float>::~ColumnSum(cv::BaseRowFilter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DBEFB70;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24DBEFB70;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x2207351BCLL);
}

void cv::ColumnSum<int,float>::operator()(uint64_t a1, int32x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  int32x2_t **v10;
  std::vector<int> *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  double v15;
  int v16;
  int v17;
  const cv::Exception *v18;
  int v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int32x2_t *v24;
  int32x2_t v25;
  _DWORD *v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int32x2_t *v32;
  int32x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int32x2_t v37;
  int64x2_t v38;
  int v39;
  float v40;
  uint64_t v41;
  int32x2_t v42;
  int v43;
  std::vector<int>::pointer end;
  void *__p[2];
  void *v46[2];
  void *v47[2];
  _BYTE v48[120];

  v10 = a2;
  v14 = *(int32x2_t **)(a1 + 32);
  v12 = (std::vector<int> *)(a1 + 32);
  v13 = v14;
  v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v46, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v48, 4294967081, v47, v46, __p, 145);
        cv::error((cv *)v48, v18);
      }
      v10 = &a2[v17];
      goto LABEL_21;
    }
    end = v12[-1].__end_;
  }
  else
  {
    end = v12[-1].__end_;
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    v13 = *(int32x2_t **)(a1 + 32);
  }
  if (a6 < 1)
  {
    v19 = 0;
  }
  else
  {
    bzero(v13, 4 * a6);
    v19 = *(_DWORD *)(a1 + 24);
  }
  v15 = *(double *)&end;
  if (v19 < *(_DWORD *)(a1 + 8) - 1)
  {
    do
    {
      v20 = *v10;
      if (a6 >= 2)
      {
        v22 = 0;
        v23 = v13;
        v24 = *v10;
        do
        {
          v25 = *v24++;
          *v23 = vadd_s32(v25, *v23);
          ++v23;
          v22 += 2;
        }
        while (v22 <= a6 - 2);
        v21 = v22;
      }
      else
      {
        v21 = 0;
      }
      if ((int)v21 < a6)
      {
        v26 = (_DWORD *)v13 + v21;
        v27 = a6 - v21;
        v28 = (int *)v20 + v21;
        do
        {
          v29 = *v28++;
          *v26++ += v29;
          --v27;
        }
        while (v27);
      }
      v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v10;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_21:
  if (a5)
  {
    v31 = a6 - 2;
    do
    {
      v32 = *v10;
      v33 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          v41 = 0;
          v35 = 0;
          do
          {
            v42 = vadd_s32(v32[v41], v13[v41]);
            *(float32x2_t *)(a3 + v41 * 8) = vcvt_f32_s32(v42);
            v13[v41] = vsub_s32(v42, v33[v41]);
            v35 += 2;
            ++v41;
          }
          while (v35 <= v31);
          v35 = v35;
        }
        else
        {
          v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            v43 = v32->i32[v35] + v13->i32[v35];
            *(float *)(a3 + 4 * v35) = (float)v43;
            v13->i32[v35] = v43 - v33->i32[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          v36 = 0;
          v34 = 0;
          do
          {
            v37 = vadd_s32(v32[v36], v13[v36]);
            v38.i64[0] = v37.i32[0];
            v38.i64[1] = v37.i32[1];
            *(float32x2_t *)(a3 + v36 * 8) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v38), v15));
            v13[v36] = vsub_s32(v37, v33[v36]);
            v34 += 2;
            ++v36;
          }
          while (v34 <= v31);
          v34 = v34;
        }
        else
        {
          v34 = 0;
        }
        if ((int)v34 < a6)
        {
          do
          {
            v39 = v32->i32[v34] + v13->i32[v34];
            v40 = v15 * (double)v39;
            *(float *)(a3 + 4 * v34) = v40;
            v13->i32[v34] = v39 - v33->i32[v34];
            ++v34;
          }
          while (a6 != v34);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

