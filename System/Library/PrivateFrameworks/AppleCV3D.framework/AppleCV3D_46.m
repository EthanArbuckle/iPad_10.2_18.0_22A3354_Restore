void sub_20FCC5F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,_QWORD *a37,uint64_t a38,void *__p,void *a40,int a41,__int16 a42,char a43,char a44,char a45,int a46,__int16 a47,char a48,char a49)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a20);
  sub_20E86872C((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void sub_20FCC60E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86E8C4(&a31);
  sub_20E86E8C4(&a36);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20FCC6114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20FCC6130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37)
{
  void *v37;
  int v38;

  if (v38 < 0)
  {
    operator delete(v37);
    sub_20E86E658((uint64_t)&a31);
    sub_20E863714((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20FCC61E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC61F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC61F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,_QWORD *a37)
{
  sub_20E86872C((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void sub_20FCC6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,_QWORD *a37)
{
  sub_20E86872C((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void sub_20FCC622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCC6240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20FCC6280(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FCC6290()
{
  JUMPOUT(0x20FCC62C8);
}

void sub_20FCC62D0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C110);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C110))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C108);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C110);
  }
  *a1 = qword_254A6C108;
}

void sub_20FCC636C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C110);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C110);
  _Unwind_Resume(a1);
}

void sub_20FCC63C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  size_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  size_t v24;
  size_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  void **v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a1;
  if (!*((_BYTE *)a3 + 16))
    goto LABEL_68;
  v7 = *(_QWORD *)(a1 + 40);
  v35 = a1 + 40;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3);
    v10 = *a3;
    do
    {
      v11 = v9 >> 1;
      v12 = v7 + 40 * (v9 >> 1);
      if (*(_QWORD *)v12 < v10 || *(_QWORD *)v12 == v10 && *(_DWORD *)(v12 + 8) < *((_DWORD *)a3 + 2))
      {
        v7 = v12 + 40;
        v11 = v9 + ~v11;
      }
      v9 = v11;
    }
    while (v11);
  }
  if (v7 == v8 || *(_QWORD *)v7 != *a3 || *(_DWORD *)(v7 + 8) != *((_DWORD *)a3 + 2))
    v7 = *(_QWORD *)(a1 + 48);
  if (v8 == v7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 546, (uint64_t)"original_state_iter != anchored_states_.end()", 45, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_71:
    abort();
  }
  v14 = *(unsigned __int8 **)(v7 + 16);
  v13 = *(unsigned __int8 **)(v7 + 24);
  if (v13 == v14)
    goto LABEL_51;
  v33 = v6;
  v34 = a4;
  v15 = (v13 - v14) >> 5;
  v16 = *(char *)(a2 + 23);
  v17 = a2;
  if (v16 >= 0)
    v18 = (unsigned __int8 *)a2;
  else
    v18 = *(unsigned __int8 **)a2;
  if (v16 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 23);
  else
    v19 = *(_QWORD *)(a2 + 8);
  do
  {
    v20 = v15 >> 1;
    v21 = &v14[32 * (v15 >> 1)];
    v22 = (char)v21[23];
    if (v22 >= 0)
      v23 = &v14[32 * (v15 >> 1)];
    else
      v23 = *(unsigned __int8 **)v21;
    if (v22 >= 0)
      v24 = v21[23];
    else
      v24 = *((_QWORD *)v21 + 1);
    if (v19 >= v24)
      v25 = v24;
    else
      v25 = v19;
    v26 = memcmp(v23, v18, v25);
    if (v26)
    {
      if (v26 < 0)
        goto LABEL_23;
    }
    else if (v24 < v19)
    {
LABEL_23:
      v14 = v21 + 32;
      v20 = v15 + ~v20;
    }
    v15 = v20;
  }
  while (v20);
  a2 = v17;
  v6 = v33;
  a4 = v34;
  if (v14 == v13)
    goto LABEL_51;
  v27 = v14[23];
  v28 = (v27 & 0x80u) == 0 ? v14[23] : *((_QWORD *)v14 + 1);
  if (v28 != v19)
    goto LABEL_51;
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v14, v18, *((_QWORD *)v14 + 1)))
      goto LABEL_51;
  }
  else if (v14[23])
  {
    v29 = v14;
    while (*v29 == *v18)
    {
      ++v29;
      ++v18;
      if (!--v27)
        goto LABEL_52;
    }
LABEL_51:
    v14 = v13;
  }
LABEL_52:
  if (v13 != v14)
  {
    v30 = v14 + 32;
    if (v14 + 32 == v13)
      goto LABEL_63;
    goto LABEL_59;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 548, (uint64_t)"obj_id_iter != original_state_iter->second.end()", 48, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_71;
  }
  v13 = *(unsigned __int8 **)(v7 + 24);
  v30 = v14 + 32;
  if (v14 + 32 == v13)
    goto LABEL_63;
  do
  {
LABEL_59:
    v31 = (void **)(v30 - 32);
    if ((char)*(v30 - 9) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = *(_OWORD *)v30;
    *((_QWORD *)v30 - 2) = *((_QWORD *)v30 + 2);
    v30[23] = 0;
    *v30 = 0;
    *(v30 - 8) = v30[24];
    v30 += 32;
  }
  while (v30 != v13);
  v13 = *(unsigned __int8 **)(v7 + 24);
  v14 = v30 - 32;
LABEL_63:
  while (v13 != v14)
  {
    if ((char)*(v13 - 9) < 0)
      operator delete(*((void **)v13 - 4));
    v13 -= 32;
  }
  *(_QWORD *)(v7 + 24) = v14;
  if (*(unsigned __int8 **)(v7 + 16) == v14)
    sub_20FCCBA00(v35, v7);
LABEL_68:
  if (*(_BYTE *)(a4 + 16))
  {
    v32 = (unint64_t *)sub_20FCCA0B4((char **)(v6 + 40), (unint64_t *)a4);
    *(_BYTE *)sub_20FCCA660(v32, (unsigned __int8 **)a2) = 1;
  }
}

void sub_20FCC6708(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, float64x2_t *a5, __int128 *a6)
{
  int v12;
  unint64_t v13;
  unint64_t v14;
  const char *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  unsigned __int8 v20;
  uint64_t *v21;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v34;
  float64x2_t *v36;
  float64x2_t *v43;
  double v44;
  float64x2_t v45;
  int64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  int64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  int64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 v74;
  const char *v75;
  size_t v76;
  const char *v77;
  _BYTE *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *p_p;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  size_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  size_t v90;
  size_t v91;
  _QWORD *p_dst;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  float64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  float64x2_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  const char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  const char *v147;
  const char *v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  char v152;
  _QWORD v153[3];
  int v154;
  const char *v155;
  int v156;
  const char *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  char *v163;
  std::__shared_weak_count *v164;
  _QWORD *__dst;
  __int128 v166;
  _BYTE object[24];
  float64x2_t v168;
  float64x2_t __p;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  char v184;
  __int128 v185;
  uint64_t v186;
  _QWORD v187[5];

  v187[2] = *MEMORY[0x24BDAC8D0];
  if (sub_20FCCAD50(a1, a2))
  {
    sub_20FCC62D0(&v160);
    if (**(int **)(v160 + 56) > 2)
      return;
    v12 = *(unsigned __int8 *)(v160 + 72);
    v13 = sub_20E8C31DC(v160, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && v13 == 0)
      return;
    v153[0] = &v160;
    v153[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v153[2] = std::chrono::system_clock::now().__d_.__rep_;
    v154 = 2;
    v155 = "unknown file";
    v156 = 91;
    v158 = 0;
    v159 = 0;
    v157 = "unknown function";
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const char *)a2;
    else
      v16 = *(const char **)a2;
    v17 = *(_QWORD *)v153[0];
    v18 = (const char *)(*(_QWORD *)v153[0] + 16);
    v146 = *(_QWORD *)v153[0];
    v147 = v18;
    if (*(char *)(*(_QWORD *)v153[0] + 39) < 0)
    {
      v18 = *(const char **)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      v148 = v16;
      v74 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v74 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)v153[0] + 39);
      v148 = v16;
      v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v20 & 1) != 0)
        goto LABEL_23;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(v168.f64[0]) && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_23:
    if (byte_254A4A50F >= 0)
      v75 = (const char *)&xmmword_254A4A4F8;
    else
      v75 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v76 = byte_254A4A50F;
    else
      v76 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    v77 = v18;
    *(_QWORD *)object = os_log_create(v75, v18);
    v78 = &object[8];
    if (v76 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v76 >= 0x17)
    {
      v79 = v14;
      v80 = v12;
      v81 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17)
        v81 = v76 | 7;
      v82 = v81 + 1;
      v78 = operator new(v81 + 1);
      *(_QWORD *)&object[16] = v76;
      *(_QWORD *)&v168.f64[0] = v82 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v78;
      v12 = v80;
      v14 = v79;
    }
    else
    {
      HIBYTE(v168.f64[0]) = v76;
      if (!v76)
      {
LABEL_37:
        v78[v76] = 0;
        LOBYTE(v168.f64[1]) = 1;
        p_p = &__p;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v84 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v84 = v19 | 7;
          v85 = v84 + 1;
          p_p = operator new(v84 + 1);
          *(_QWORD *)&__p.f64[1] = v19;
          *(_QWORD *)&v170.f64[0] = v85 | 0x8000000000000000;
          *(_QWORD *)&__p.f64[0] = p_p;
        }
        else
        {
          HIBYTE(v170.f64[0]) = v19;
          if (!v19)
          {
LABEL_45:
            p_p[v19] = 0;
            LOBYTE(v170.f64[1]) = 1;
            v86 = *(NSObject **)object;
            if (SHIBYTE(v170.f64[0]) < 0)
              operator delete(*(void **)&__p.f64[0]);
            if (LOBYTE(v168.f64[1]) && SHIBYTE(v168.f64[0]) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v14 || !*(_QWORD *)(v14 + 24))
            {
              os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v148;
              v94 = (void *)_os_log_send_and_compose_impl();
              if (v94)
                free(v94);
              goto LABEL_124;
            }
            v87 = _os_log_pack_size();
            v88 = (std::__shared_weak_count_vtbl *)operator new(v87, (std::align_val_t)8uLL);
            v89 = (std::__shared_weak_count *)operator new();
            v89->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v89->__shared_owners_ = 0;
            v89->__shared_weak_owners_ = 0;
            v89[1].__vftable = v88;
            *(_QWORD *)&v161 = v88;
            *((_QWORD *)&v161 + 1) = v88;
            v163 = 0;
            v164 = 0;
            v162 = v89;
            v90 = strlen(v148);
            if (v90 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v91 = v90;
            if (v90 >= 0x17)
            {
              v95 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v90 | 7) != 0x17)
                v95 = v90 | 7;
              v96 = v95 + 1;
              p_dst = operator new(v95 + 1);
              *(_QWORD *)&v166 = v91;
              *((_QWORD *)&v166 + 1) = v96 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v166) = v90;
              p_dst = &__dst;
              if (!v90)
              {
                v93 = v14;
                goto LABEL_64;
              }
            }
            v93 = v14;
            memcpy(p_dst, v148, v91);
LABEL_64:
            *((_BYTE *)p_dst + v91) = 0;
            v97 = __dst;
            v187[0] = v166;
            *(_QWORD *)((char *)v187 + 7) = *(_QWORD *)((char *)&v166 + 7);
            v98 = HIBYTE(v166);
            v99 = operator new(0x38uLL);
            v99[1] = 0;
            v99[2] = 0;
            v99[3] = off_24C9ABC20;
            *v99 = &off_24C9ABBD0;
            v100 = v187[0];
            v99[4] = v97;
            v99[5] = v100;
            *(_QWORD *)((char *)v99 + 47) = *(_QWORD *)((char *)v187 + 7);
            *((_BYTE *)v99 + 55) = v98;
            v187[0] = 0;
            *(_QWORD *)((char *)v187 + 7) = 0;
            v101 = v164;
            v163 = (char *)(v99 + 3);
            v164 = (std::__shared_weak_count *)v99;
            if (v101)
            {
              p_shared_owners = (unint64_t *)&v101->__shared_owners_;
              do
                v103 = __ldaxr(p_shared_owners);
              while (__stlxr(v103 - 1, p_shared_owners));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            *(_OWORD *)object = v161;
            v104 = *(double *)&v163;
            *(_QWORD *)&object[16] = v162;
            if (v162)
            {
              v105 = (unint64_t *)&v162->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = v164;
            v168.f64[0] = v104;
            *(_QWORD *)&v168.f64[1] = v164;
            if (v164)
            {
              v108 = (unint64_t *)&v164->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
              __p.f64[0] = v104;
              do
                v110 = __ldaxr(v108);
              while (__stlxr(v110 - 1, v108));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            else
            {
              __p.f64[0] = v104;
            }
            v111 = v162;
            if (v162)
            {
              v112 = (unint64_t *)&v162->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = *(_QWORD *)object;
            if (*(char *)(*(_QWORD *)&__p.f64[0] + 31) >= 0)
              v115 = *(_QWORD *)&__p.f64[0] + 8;
            else
              v115 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 8);
            v116 = _os_log_pack_fill();
            *(_DWORD *)v116 = 136315138;
            *(_QWORD *)(v116 + 4) = v115;
            v117 = operator new();
            v118 = *(unsigned __int8 *)(v146 + 39);
            v119 = *(const char **)(v146 + 16);
            v120 = *(_QWORD *)(v146 + 24);
            v121 = v168;
            *(_OWORD *)(v117 + 8) = *(_OWORD *)&object[8];
            if ((v118 & 0x80u) != 0)
              v118 = v120;
            else
              v119 = v147;
            *(_QWORD *)v117 = v114;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(float64x2_t *)(v117 + 24) = v121;
            v168 = 0uLL;
            *(_QWORD *)(v117 + 40) = v119;
            *(_QWORD *)(v117 + 48) = v118;
            *(_BYTE *)(v117 + 56) = 2;
            __dst = 0;
            *(_QWORD *)&v161 = v117;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v93 + 24) + 40))(*(_QWORD *)(v93 + 24), &v161);
            v122 = v161;
            *(_QWORD *)&v161 = 0;
            if (v122)
            {
              v123 = *(std::__shared_weak_count **)(v122 + 32);
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
              }
              v126 = *(std::__shared_weak_count **)(v122 + 16);
              if (v126)
              {
                v127 = (unint64_t *)&v126->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
              MEMORY[0x212BC6398](v122, 0x10F0C40B62ED6C6);
              v129 = __dst;
              __dst = 0;
              if (v129)
              {
                v130 = (std::__shared_weak_count *)v129[4];
                if (v130)
                {
                  v131 = (unint64_t *)&v130->__shared_owners_;
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = (std::__shared_weak_count *)v129[2];
                if (v133)
                {
                  v134 = (unint64_t *)&v133->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                MEMORY[0x212BC6398](v129, 0x10F0C40B62ED6C6);
              }
            }
            v136 = *(std::__shared_weak_count **)&v168.f64[1];
            if (*(_QWORD *)&v168.f64[1])
            {
              v137 = (unint64_t *)(*(_QWORD *)&v168.f64[1] + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            v139 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v140 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
LABEL_124:
            if (v12)
            {
              if (*(char *)(a2 + 23) >= 0)
                v142 = (const char *)a2;
              else
                v142 = *(const char **)a2;
              sub_20E8C003C((uint64_t)v153, "object_id (%s) already exists", v142);
              sub_20E863570((uint64_t)v153);
            }
            sub_20E863570((uint64_t)v153);
            v143 = v159;
            if (v159)
            {
              v144 = (unint64_t *)&v159->__shared_owners_;
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            return;
          }
        }
        memmove(p_p, v77, v19);
        goto LABEL_45;
      }
    }
    memmove(v78, v75, v76);
    goto LABEL_37;
  }
  v21 = sub_20E9DF85C((_QWORD *)(a3 + 1784), a4);
  if (!v21)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 96, (uint64_t)"base_pose_ref", 13, (uint64_t)"Failed to find pose-ref", 23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v24 = v21[5];
  v25 = *(float64x2_t *)v24;
  _D2 = *(_QWORD *)(v24 + 40);
  v27 = *(float64x2_t *)(v24 + 24);
  _Q4.f64[0] = *(float64_t *)(v24 + 64);
  v28 = *(float64x2_t *)(v24 + 48);
  v29 = v21[9];
  v30 = *(double *)(v29 + 16);
  _Q7 = *(float64x2_t *)v29;
  v32 = *(double *)(v29 + 40);
  _Q17 = *(float64x2_t *)(v29 + 24);
  v34 = *(double *)(v29 + 64);
  _Q21 = *(float64x2_t *)(v29 + 48);
  v36 = (float64x2_t *)v21[11];
  v23.f64[0] = v36[1].f64[0];
  _Q20 = *v36;
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, v36->f64[0]), v27, *v36, 1), v28, v23.f64[0]);
  __asm { FMLA            D23, D2, V20.D[1] }
  v23.f64[0] = _D23 + _Q4.f64[0] * v23.f64[0];
  v43 = (float64x2_t *)v21[7];
  _Q20.f64[0] = v43[1].f64[0];
  *(_QWORD *)&v44 = *(_OWORD *)&vaddq_f64(v23, _Q20);
  v45 = vaddq_f64(_Q22, *v43);
  v46 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q7.f64[0]), v27, _Q7, 1), v28, v30);
  __asm { FMLA            D20, D2, V7.D[1] }
  _Q20.f64[0] = _Q20.f64[0] + _Q4.f64[0] * v30;
  v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q17.f64[0]), v27, _Q17, 1), v28, v32);
  __asm { FMLA            D6, D2, V17.D[1] }
  _Q22.f64[0] = _D6 + _Q4.f64[0] * v32;
  _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q21.f64[0]), v27, _Q21, 1), v28, v34);
  __asm { FMLA            D0, D2, V21.D[1] }
  _Q17.f64[0] = _D0 + _Q4.f64[0] * v34;
  v51 = (float64x2_t)vzip2q_s64(v46, (int64x2_t)v47);
  v52 = (float64x2_t)vzip1q_s64(v46, (int64x2_t)v47);
  v28.f64[0] = _Q20.f64[0];
  v28.f64[1] = _Q22.f64[0];
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v45.f64[0]), v51, v45, 1), v28, v44);
  _D6 = v45.f64[1];
  __asm { FMLA            D4, D6, V16.D[1] }
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], _Q17.f64[0], v44);
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vnegq_f64(_Q4);
  _Q4.f64[1] = 1.0;
  v56 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v51.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v51, 1), 8uLL);
  v57 = (float64x2_t)vzip1q_s64(v46, v56);
  *(_QWORD *)&v47.f64[1] = v56.i64[1];
  *(_QWORD *)&_Q16.f64[1] = vdupq_laneq_s64((int64x2_t)_Q16, 1).u64[0];
  v58 = vextq_s8((int8x16_t)v47, (int8x16_t)_Q22, 8uLL);
  v59 = vzip1q_s64((int64x2_t)_Q20, (int64x2_t)v47);
  v60 = vmlsq_lane_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q2.f64[0]), v47, _Q2, 1), _Q16, _Q4.f64[0], 0);
  *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64(v59, 1).u64[0];
  *(_QWORD *)&v61.f64[1] = v58.i64[0];
  __asm { FMLA            D20, D22, V2.D[1] }
  v62 = v58.i64[1];
  __asm { FMLS            D20, D17, V4.D[0] }
  _Q20.f64[1] = 1.0;
  v63 = a5[1];
  v65 = a5[2];
  v64 = a5[3];
  v66 = a5[4];
  v67 = a5[5];
  v69 = a5[6];
  v68 = a5[7];
  v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v59.u64[0], a5->f64[0]), (float64x2_t)v58.u64[1], *a5, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v63.f64[0]), _Q20, v63, 1);
  v176 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, a5->f64[0]), v61, *a5, 1), _Q16, v63.f64[0]), v60, v63, 1);
  v177 = v70;
  v178 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, v65.f64[0]), v61, v65, 1), _Q16, v64.f64[0]), v60, v64, 1);
  v179 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v59.u64[0], v65.f64[0]), (float64x2_t)(unint64_t)v62, v65, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v64.f64[0]), _Q20, v64, 1);
  v180 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, v66.f64[0]), v61, v66, 1), _Q16, v67.f64[0]), v60, v67, 1);
  v181 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v59.u64[0], v66.f64[0]), (float64x2_t)(unint64_t)v62, v66, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v67.f64[0]), _Q20, v67, 1);
  v183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v59.u64[0], v69.f64[0]), (float64x2_t)(unint64_t)v62, v69, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v68.f64[0]), _Q20, v68, 1);
  v182 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, v69.f64[0]), v61, v69, 1), _Q16, v68.f64[0]), v60, v68, 1);
  v185 = *a6;
  v186 = *((_QWORD *)a6 + 2);
  __p = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v176.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v176, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v70.f64[0]), _Q4, v70, 1);
  v168 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v176.f64[0]), v51, v176, 1), v28, v70.f64[0]), _Q2, v70, 1);
  v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v178.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v178, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v179.f64[0]), _Q4, v179, 1);
  v170 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v178.f64[0]), v51, v178, 1), v28, v179.f64[0]), _Q2, v179, 1);
  v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v180.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v180, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v181.f64[0]), _Q4, v181, 1);
  v172 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v180.f64[0]), v51, v180, 1), v28, v181.f64[0]), _Q2, v181, 1);
  v175 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v182.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v182, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v183.f64[0]), _Q4, v183, 1);
  v174 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v182.f64[0]), v51, v182, 1), v28, v183.f64[0]), _Q2, v183, 1);
  *(_OWORD *)object = *(_OWORD *)a4;
  LODWORD(v43) = *((_DWORD *)a4 + 4);
  *(_DWORD *)&object[20] = -1;
  *(_DWORD *)&object[16] = (_DWORD)v43;
  v184 = 1;
  sub_20FCCAF7C((uint64_t)a1, a2, a2, (uint64_t)object);
  v71 = a1[12];
  if (v71 >= a1[13])
  {
    v73 = sub_20E8ADE68(a1 + 11, (__int128 *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a1[12], *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v72 = *(_OWORD *)a2;
      *(_QWORD *)(v71 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v71 = v72;
    }
    v73 = v71 + 24;
    a1[12] = v71 + 24;
  }
  a1[12] = v73;
  LOBYTE(v151) = 0;
  v152 = 0;
  v149 = *(_OWORD *)a4;
  v150 = 1;
  sub_20FCC63C4((uint64_t)a1, a2, &v151, (uint64_t)&v149);
}

void sub_20FCC73CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20FCC740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86E8C4(&a31);
  sub_20E86E8C4(&a36);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20FCC7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  int v32;

  if (v32 < 0)
    operator delete(v31);
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20FCC74B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FCC7534(_QWORD *a1, void *a2, _QWORD *a3, uint64_t *a4, int a5, int a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  float64x2_t v23;
  float64x2_t **v25;
  float64x2_t v26;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t *v31;
  double v32;
  double v34;
  double v36;
  float64x2_t *v38;
  float64x2_t v40;
  float64x2_t *v44;
  double v45;
  float64x2_t v46;
  int64x2_t v47;
  float64x2_t v49;
  double v52;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  __int128 v61;
  char v62;
  void *__p[2];
  __int128 v64;
  float64x2_t v65;
  __int128 v66;
  float64x2_t v67;
  __int128 v68;
  float64x2_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::string v74;
  void *v75;

  v75 = a2;
  if (!a3[8]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 116, (uint64_t)"!state_set->empty()", 19, (uint64_t)"State set cannot be empty", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20FCCBC60((unint64_t *)&v75, &v74);
  if (!sub_20EB07858(a1, (uint64_t)&v74))
  {
    v12 = (_QWORD *)a3[6];
    v13 = a3 + 7;
    if (v12 != a3 + 7)
    {
      v14 = a4[1];
      if (*a4 == v14)
      {
        while ((void *)v12[4] != a2)
        {
          v19 = (_QWORD *)v12[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v12[2];
              _ZF = *v20 == (_QWORD)v12;
              v12 = v20;
            }
            while (!_ZF);
          }
          v12 = v20;
          if (v20 == v13)
            goto LABEL_4;
        }
      }
      else
      {
        while (1)
        {
          if ((void *)v12[4] == a2)
          {
            v15 = *a4;
            while (*(void **)v15 != a2 || *(_DWORD *)(v15 + 8) != *((_DWORD *)v12 + 10))
            {
              v15 += 16;
              if (v15 == v14)
              {
                v15 = a4[1];
                break;
              }
            }
            if (v15 == v14)
              break;
          }
          v16 = (_QWORD *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v12[2];
              _ZF = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!_ZF);
          }
          v12 = v17;
          if (v17 == v13)
            goto LABEL_4;
        }
      }
      sub_20F23A0A0(a3, (__int128 *)v12 + 2, (char **)__p);
      v21 = *((_QWORD *)__p[0] + 2);
      v72 = *(_OWORD *)__p[0];
      v73 = v21;
      __p[1] = __p[0];
      operator delete(__p[0]);
      v22 = sub_20E9DF85C(a3 + 223, (uint64_t *)&v72);
      if (a6)
      {
        v25 = (float64x2_t **)(v22 + 5);
        if (!v22)
          v25 = 0;
        v26 = **v25;
        _D3 = (*v25)[2].f64[1];
        v28 = *(float64x2_t *)((char *)*v25 + 24);
        v29 = (*v25)[4].f64[0];
        v30 = (*v25)[3];
        v31 = v25[4];
        v32 = v31[1].f64[0];
        _Q16 = *v31;
        v34 = v31[2].f64[1];
        _Q18 = *(float64x2_t *)((char *)v31 + 24);
        v36 = v31[4].f64[0];
        _Q20 = v31[3];
        v38 = v25[6];
        v23.f64[0] = v38[1].f64[0];
        _Q21 = *v38;
        v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v38->f64[0]), v28, *v38, 1), v30, v23.f64[0]);
        __asm { FMLA            D23, D3, V21.D[1] }
        v23.f64[0] = _Q23.f64[0] + v29 * v23.f64[0];
        v44 = v25[2];
        _Q23.f64[0] = v44[1].f64[0];
        *(_QWORD *)&v45 = *(_OWORD *)&vaddq_f64(v23, _Q23);
        v46 = vaddq_f64(v40, *v44);
        v47 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q16.f64[0]), v28, _Q16, 1), v30, v32);
        __asm { FMLA            D23, D3, V16.D[1] }
        v49.f64[0] = _D23 + v29 * v32;
        _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q18.f64[0]), v28, _Q18, 1), v30, v34);
        __asm { FMLA            D23, D3, V18.D[1] }
        v52 = _D23 + v29 * v34;
        _Q2 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q20.f64[0]), v28, _Q20, 1), v30, v36);
        __asm { FMLA            D1, D3, V20.D[1] }
        v55 = _D1 + v29 * v36;
        v56 = (float64x2_t)vzip1q_s64(v47, (int64x2_t)_Q16);
        v57 = (float64x2_t)vzip2q_s64(v47, (int64x2_t)_Q16);
        v58 = vextq_s8((int8x16_t)v57, (int8x16_t)vdupq_laneq_s64(_Q2, 1), 8uLL);
        v59 = vmlaq_laneq_f64(vmulq_n_f64(v56, v46.f64[0]), v57, v46, 1);
        v49.f64[1] = v52;
        _D17 = v46.f64[1];
        __asm { FMLA            D16, D17, V2.D[1] }
        _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v55, v45);
        *(_QWORD *)&v57.f64[1] = v58.i64[0];
        *(float64x2_t *)__p = v56;
        v64 = _Q2.u64[0];
        v67 = v49;
        v68 = *(unint64_t *)&v55;
        v65 = v57;
        v66 = v58.u64[1];
        v69 = vnegq_f64(vmlaq_n_f64(v59, v49, v45));
        v70 = *(_OWORD *)&vnegq_f64(_Q16);
        v71 = 0x3FF0000000000000;
        *(_QWORD *)&v61 = v75;
        DWORD2(v61) = a5;
        v62 = 1;
        sub_20FCC6708(a1, (uint64_t)&v74, (uint64_t)a3, (uint64_t *)&v72, (float64x2_t *)__p, &v61);
      }
      else
      {
        __p[0] = v75;
        LODWORD(__p[1]) = a5;
        LOBYTE(v64) = 1;
        sub_20FCC6708(a1, (uint64_t)&v74, (uint64_t)a3, (uint64_t *)&v72, xmmword_2103BC960, (__int128 *)__p);
      }
    }
  }
LABEL_4:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
}

void sub_20FCC78C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  _Unwind_Resume(exception_object);
}

void sub_20FCC78EC(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  uint64_t *v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  void **v15;
  void *v16;
  void *__p;
  void **v18;
  uint64_t v19;

  if (a2)
  {
    v6 = (__int128 *)a1[8];
    v7 = (__int128 *)a1[9];
    if (v6 != v7)
    {
      if (a2[8])
      {
        __p = 0;
        v18 = 0;
        v19 = 0;
        sub_20E8ADB20((char *)&__p, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
        v8 = (void **)__p;
        v9 = v18;
        if (__p != v18)
        {
          do
          {
            v10 = sub_20FCCAD50(a1, (uint64_t)v8);
            if (!v10
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 169, (uint64_t)"obj_iter != object_anchors_.end()", 33, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            sub_20FCC7A74((uint64_t)a1, (_BYTE *)v10 + 16, a2, a3, (uint64_t)(v10 + 5), v11, v12, v13, v14);
            v8 += 3;
          }
          while (v8 != v9);
          v8 = (void **)__p;
        }
        if (v8)
        {
          v15 = v18;
          v16 = v8;
          if (v18 != v8)
          {
            do
            {
              if (*((char *)v15 - 1) < 0)
                operator delete(*(v15 - 3));
              v15 -= 3;
            }
            while (v15 != v8);
            v16 = __p;
          }
          v18 = v8;
          operator delete(v16);
        }
      }
    }
  }
}

void sub_20FCC7A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCC7A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCC7A74(uint64_t a1, _BYTE *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, double a6, double a7, double a8, float64x2_t a9)
{
  float64x2_t *v14;
  unint64_t v15;
  float64x2_t v16;
  int v17;
  uint64_t *v19;
  float64x2_t v20;
  uint64_t result;
  uint64_t v22;
  float64x2_t v23;
  double v26;
  float64x2_t v27;
  uint64_t v28;
  double v29;
  double v31;
  double v33;
  float64x2_t *v35;
  float64x2_t v37;
  float64x2_t *v42;
  double v43;
  float64x2_t v44;
  int64x2_t v45;
  float64x2_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  int v56;
  unint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  const char *v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void **v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  _BYTE *v86;
  unint64_t v87;
  const char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64_t v139;
  float64x2_t v140;
  float64x2_t v141;
  __int128 v142;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v144;
  const char *v145;
  int v146;
  const char *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  _BYTE v151[25];
  _BYTE v152[40];
  void *v153[2];
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;

  v14 = (float64x2_t *)(a5 + 152);
  v15 = *(_QWORD *)(a5 + 288);
  sub_20FCCC4A4(a3, (float64x2_t *)(a5 + 152), (_DWORD *)(a5 + 296), a4, v15, 1, (uint64_t)v151, a9);
  LODWORD(v142) = 0;
  v17 = v151[24];
  if (v151[24])
    _ZF = 1;
  else
    _ZF = *(_DWORD *)(a5 + 296) == 0;
  if (!_ZF)
  {
    sub_20FCCC4A4(a3, v14, &v142, a4, v15, 1, (uint64_t)v152, v16);
    *(_OWORD *)&v151[9] = *(_OWORD *)&v152[9];
    *(_OWORD *)v151 = *(_OWORD *)v152;
    v17 = v152[24];
  }
  if (!v17)
    return 0;
  v19 = sub_20E9DF85C(a3 + 223, (uint64_t *)v151);
  if (!v19)
  {
    sub_20FCC62D0(&v150);
    if (**(int **)(v150 + 56) > 4)
      return 0;
    v56 = *(unsigned __int8 *)(v150 + 72);
    v57 = sub_20E8C31DC(v150, "OSLogSurrogateAppender", 1, 0);
    if (!v56 && v57 == 0)
      return 0;
    v59 = v57;
    *(_QWORD *)&v142 = &v150;
    *((std::chrono::steady_clock::time_point *)&v142 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v144 = 4;
    v145 = "unknown file";
    v146 = 502;
    v148 = 0;
    v149 = 0;
    v147 = "unknown function";
    v60 = *(_QWORD *)v142;
    v61 = *(_QWORD *)v142 + 16;
    if (*(char *)(*(_QWORD *)v142 + 39) < 0)
    {
      v63 = *(const char **)(v60 + 16);
      v62 = *(_QWORD *)(v60 + 24);
    }
    else
    {
      v62 = *(unsigned __int8 *)(*(_QWORD *)v142 + 39);
      v63 = (const char *)(*(_QWORD *)v142 + 16);
    }
    v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v152);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v152);
      if (v152[24] && (v152[23] & 0x80000000) != 0)
        operator delete(*(void **)v152);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v84 = byte_254A4A4F8;
    else
      v84 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v85 = byte_254A4A4F8[23];
    else
      v85 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v152 = os_log_create(v84, v63);
    v86 = &v152[8];
    if (v85 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v85 >= 0x17)
    {
      v87 = v59;
      v88 = v63;
      v89 = v60;
      v90 = v56;
      v91 = v61;
      v92 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v85 | 7) != 0x17)
        v92 = v85 | 7;
      v93 = v92 + 1;
      v86 = operator new(v92 + 1);
      *(_QWORD *)&v152[16] = v85;
      *(_QWORD *)&v152[24] = v93 | 0x8000000000000000;
      *(_QWORD *)&v152[8] = v86;
      v61 = v91;
      v56 = v90;
      v60 = v89;
      v63 = v88;
      v59 = v87;
    }
    else
    {
      v152[31] = v85;
      if (!v85)
      {
LABEL_72:
        v86[v85] = 0;
        v152[32] = 1;
        v94 = v153;
        if (v62 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v62 >= 0x17)
        {
          v95 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17)
            v95 = v62 | 7;
          v96 = v95 + 1;
          v94 = (void **)operator new(v95 + 1);
          v153[1] = (void *)v62;
          v154 = v96 | 0x8000000000000000;
          v153[0] = v94;
        }
        else
        {
          HIBYTE(v154) = v62;
          if (!v62)
            goto LABEL_80;
        }
        memmove(v94, v63, v62);
LABEL_80:
        *((_BYTE *)v94 + v62) = 0;
        v155 = 1;
        v97 = *(NSObject **)v152;
        if (SHIBYTE(v154) < 0)
          operator delete(v153[0]);
        if (v152[32] && (v152[31] & 0x80000000) != 0)
          operator delete(*(void **)&v152[8]);
        if (*(_QWORD *)v152)
          os_release(*(void **)v152);
        if (v59 && *(_QWORD *)(v59 + 24))
        {
          v98 = _os_log_pack_size();
          v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
          v100 = (std::__shared_weak_count *)operator new();
          v101 = v100;
          v100->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v100->__shared_owners_;
          v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v100->__shared_weak_owners_ = 0;
          v100[1].__vftable = v99;
          *(_QWORD *)v152 = v99;
          *(_QWORD *)&v152[8] = v99;
          *(_QWORD *)&v152[16] = v100;
          do
            v103 = __ldxr(p_shared_owners);
          while (__stxr(v103 + 1, p_shared_owners));
          *(_OWORD *)&v152[24] = 0uLL;
          v153[0] = 0;
          do
            v104 = __ldaxr(p_shared_owners);
          while (__stlxr(v104 - 1, p_shared_owners));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v101);
          }
          v105 = *(_QWORD *)v152;
          *(_WORD *)_os_log_pack_fill() = 0;
          v106 = operator new();
          v107 = *(unsigned __int8 *)(v60 + 39);
          if ((v107 & 0x80u) == 0)
            v108 = v61;
          else
            v108 = *(_QWORD *)(v60 + 16);
          if ((v107 & 0x80u) != 0)
            v107 = *(_QWORD *)(v60 + 24);
          *(_QWORD *)v106 = v105;
          *(_OWORD *)(v106 + 8) = *(_OWORD *)&v152[8];
          *(_QWORD *)&v152[8] = 0;
          *(_QWORD *)&v152[16] = 0;
          *(_OWORD *)(v106 + 24) = *(_OWORD *)&v152[24];
          *(_OWORD *)&v152[24] = 0uLL;
          *(_QWORD *)(v106 + 40) = v108;
          *(_QWORD *)(v106 + 48) = v107;
          *(_BYTE *)(v106 + 56) = 16;
          v156 = 0;
          v157 = v106;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v59 + 24) + 40))(*(_QWORD *)(v59 + 24), &v157);
          v109 = v157;
          v157 = 0;
          if (v109)
          {
            v110 = *(std::__shared_weak_count **)(v109 + 32);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = *(std::__shared_weak_count **)(v109 + 16);
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
            v116 = v156;
            v156 = 0;
            if (v116)
            {
              v117 = *(std::__shared_weak_count **)(v116 + 32);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              v120 = *(std::__shared_weak_count **)(v116 + 16);
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
            }
          }
          v123 = *(std::__shared_weak_count **)&v152[32];
          if (*(_QWORD *)&v152[32])
          {
            v124 = (unint64_t *)(*(_QWORD *)&v152[32] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v126 = *(std::__shared_weak_count **)&v152[16];
          if (*(_QWORD *)&v152[16])
          {
            v127 = (unint64_t *)(*(_QWORD *)&v152[16] + 8);
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
        }
        else
        {
          os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
          *(_WORD *)v152 = 0;
          v129 = (void *)_os_log_send_and_compose_impl();
          if (v129)
            free(v129);
        }
        if (v56)
        {
          sub_20E8C003C((uint64_t)&v142, "Failed to find the projection ref of the keyframe");
          sub_20E863570((uint64_t)&v142);
        }
        sub_20E863570((uint64_t)&v142);
        v130 = v149;
        if (v149)
        {
          v131 = (unint64_t *)&v149->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        return 0;
      }
    }
    memmove(v86, v84, v85);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a5 + 280)
    && v151[24]
    && *(_DWORD *)(a5 + 16) == *(_DWORD *)&v151[16]
    && *(_QWORD *)a5 == *(_QWORD *)v151
    && *(_DWORD *)(a5 + 8) == *(_DWORD *)&v151[8])
  {
    return 1;
  }
  v22 = v19[5];
  v23 = *(float64x2_t *)v22;
  _D2 = *(_QWORD *)(v22 + 40);
  _Q3 = *(float64x2_t *)(v22 + 24);
  v26 = *(double *)(v22 + 64);
  v27 = *(float64x2_t *)(v22 + 48);
  v28 = v19[9];
  v29 = *(double *)(v28 + 16);
  _Q7 = *(float64x2_t *)v28;
  v31 = *(double *)(v28 + 40);
  _Q17 = *(float64x2_t *)(v28 + 24);
  v33 = *(double *)(v28 + 64);
  _Q19 = *(float64x2_t *)(v28 + 48);
  v35 = (float64x2_t *)v19[11];
  v20.f64[0] = v35[1].f64[0];
  _Q21 = *v35;
  v37 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v35->f64[0]), _Q3, *v35, 1), v27, v20.f64[0]);
  __asm { FMLA            D23, D2, V21.D[1] }
  v20.f64[0] = _D23 + v26 * v20.f64[0];
  v42 = (float64x2_t *)v19[7];
  _Q21.f64[0] = v42[1].f64[0];
  *(_QWORD *)&v43 = *(_OWORD *)&vaddq_f64(v20, _Q21);
  v44 = vaddq_f64(v37, *v42);
  v45 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q7.f64[0]), _Q3, _Q7, 1), v27, v29);
  __asm { FMLA            D23, D2, V7.D[1] }
  v47.f64[0] = _D23 + v26 * v29;
  v48 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q17.f64[0]), _Q3, _Q17, 1), v27, v31);
  __asm { FMLA            D7, D2, V17.D[1] }
  _Q1 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q19.f64[0]), _Q3, _Q19, 1), v27, v33);
  __asm { FMLA            D0, D2, V19.D[1] }
  v27.f64[0] = _D0 + v26 * v33;
  v51 = (float64x2_t)vzip1q_s64(v45, v48);
  v133 = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  v52 = (float64x2_t)vzip2q_s64(v45, v48);
  v53 = vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s64(_Q1, 1), 8uLL);
  v139 = v51.f64[0];
  v47.f64[1] = _Q7.f64[0] + v26 * v31;
  _D4 = v44.f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v27.f64[0], v43);
  v135 = (float64x2_t)_Q1.u64[0];
  v136 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, v44.f64[0]), v52, v44, 1), v47, v43));
  *(_QWORD *)&v52.f64[1] = v53.i64[0];
  v137 = (float64x2_t)v53.u64[1];
  v138 = v52;
  v140 = (float64x2_t)*(unint64_t *)&v27.f64[0];
  v141 = v47;
  __asm { FMOV            V0.2D, #1.0 }
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vnegq_f64(_Q3);
  v134 = _Q0;
  if (*(_BYTE *)(a5 + 280))
  {
    *(_OWORD *)v152 = *(_OWORD *)a5;
    v152[16] = 1;
    v142 = *(_OWORD *)v151;
    LOBYTE(rep) = 1;
    sub_20FCC63C4(a1, (uint64_t)a2, (uint64_t *)v152, (uint64_t)&v142);
    goto LABEL_55;
  }
  v152[0] = 0;
  v152[16] = 0;
  v142 = *(_OWORD *)v151;
  LOBYTE(rep) = 1;
  sub_20FCC63C4(a1, (uint64_t)a2, (uint64_t *)v152, (uint64_t)&v142);
  v65 = *(char **)(a1 + 64);
  v64 = *(char **)(a1 + 72);
  if (v65 != v64)
  {
    v66 = a2[23];
    if (v66 >= 0)
      v67 = a2[23];
    else
      v67 = *((_QWORD *)a2 + 1);
    if (v66 < 0)
      a2 = *(_BYTE **)a2;
    for (i = *(_QWORD *)(a1 + 64); (char *)i != v64; i += 24)
    {
      v69 = *(unsigned __int8 *)(i + 23);
      if ((v69 & 0x80u) == 0)
        v70 = *(unsigned __int8 *)(i + 23);
      else
        v70 = *(_QWORD *)(i + 8);
      if (v70 == v67)
      {
        if ((v69 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)i, a2, *(_QWORD *)(i + 8)))
            goto LABEL_41;
        }
        else
        {
          if (!*(_BYTE *)(i + 23))
          {
LABEL_41:
            if ((char *)i != v64)
            {
              if ((char *)(i + 24) != v64)
              {
                v72 = &v65[8 * ((i - (uint64_t)v65) >> 3) + 23];
                do
                {
                  v73 = (void **)(v72 - 23);
                  if (*v72 < 0)
                    operator delete(*v73);
                  *(_OWORD *)v73 = *(_OWORD *)(v72 + 1);
                  *(_QWORD *)(v72 - 7) = *(_QWORD *)(v72 + 17);
                  v72[24] = 0;
                  v72 += 24;
                  *(v72 - 23) = 0;
                  i += 24;
                }
                while (v72 + 1 != v64);
                v64 = *(char **)(a1 + 72);
              }
              while (v64 != (char *)i)
              {
                if (*(v64 - 1) < 0)
                  operator delete(*((void **)v64 - 3));
                v64 -= 24;
              }
              *(_QWORD *)(a1 + 72) = i;
            }
            break;
          }
          v71 = 0;
          while (*(unsigned __int8 *)(i + v71) == a2[v71])
          {
            if (v69 == ++v71)
              goto LABEL_41;
          }
        }
      }
    }
  }
LABEL_55:
  v74 = *(float64x2_t *)(a5 + 168);
  v75 = *(float64x2_t *)(a5 + 152);
  v76 = *(float64x2_t *)(a5 + 200);
  v77 = *(float64x2_t *)(a5 + 184);
  v78 = *(float64x2_t *)(a5 + 232);
  v79 = *(float64x2_t *)(a5 + 216);
  v80 = *(float64x2_t *)(a5 + 248);
  v81 = *(float64x2_t *)(a5 + 264);
  v82.f64[0] = v139;
  *(_QWORD *)&v82.f64[1] = v133;
  *(float64x2_t *)(a5 + 24) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v75.f64[0]), v138, v75, 1), v141, v74.f64[0]), v136, v74, 1);
  *(float64x2_t *)(a5 + 40) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v135, v75.f64[0]), v137, v75, 1), v140, v74.f64[0]), v134, v74, 1);
  *(float64x2_t *)(a5 + 56) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v77.f64[0]), v138, v77, 1), v141, v76.f64[0]), v136, v76, 1);
  *(float64x2_t *)(a5 + 72) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v135, v77.f64[0]), v137, v77, 1), v140, v76.f64[0]), v134, v76, 1);
  *(float64x2_t *)(a5 + 88) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v79.f64[0]), v138, v79, 1), v141, v78.f64[0]), v136, v78, 1);
  *(float64x2_t *)(a5 + 104) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v135, v79.f64[0]), v137, v79, 1), v140, v78.f64[0]), v134, v78, 1);
  *(float64x2_t *)(a5 + 120) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v80.f64[0]), v138, v80, 1), v141, v81.f64[0]), v136, v81, 1);
  *(float64x2_t *)(a5 + 136) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v135, v80.f64[0]), v137, v80, 1), v140, v81.f64[0]), v134, v81, 1);
  *(_OWORD *)a5 = *(_OWORD *)v151;
  *(_DWORD *)(a5 + 16) = *(_DWORD *)&v151[16];
  result = 1;
  *(_BYTE *)(a5 + 280) = 1;
  return result;
}

void sub_20FCC85E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152))
  {
    if (*(char *)(v29 - 153) < 0)
      operator delete(*(void **)(v29 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC8628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20E86E8C4((uint64_t *)(v29 - 96));
  sub_20E86E8C4((uint64_t *)(v29 - 104));
  sub_20E86E658(v29 - 176);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC8654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20E86E658(v29 - 176);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC8670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  MEMORY[0x212BC6398](v29, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC86B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC86CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 144) && *(char *)(v29 - 145) < 0)
    operator delete(*(void **)(v29 - 168));
  v31 = *(void **)(v29 - 176);
  if (v31)
    os_release(v31);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20FCC8710(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE v29[24];
  __int128 v30;
  char v31;

  v4 = sub_20FCCAD50(a1, a2);
  if (v4)
  {
    v5 = v4;
    if (*((_BYTE *)v4 + 320))
    {
      v30 = *(_OWORD *)(v4 + 5);
      v31 = 1;
      v29[0] = 0;
      v29[16] = 0;
      sub_20FCC63C4((uint64_t)a1, a2, (uint64_t *)&v30, (uint64_t)v29);
    }
    else
    {
      v7 = (char *)a1[8];
      v6 = (char *)a1[9];
      if (v7 != v6)
      {
        v8 = *(_BYTE *)(a2 + 23);
        if (v8 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        if (v8 >= 0)
          v10 = (unsigned __int8 *)a2;
        else
          v10 = *(unsigned __int8 **)a2;
        v11 = a1[8];
        while (1)
        {
          v12 = *(unsigned __int8 *)(v11 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = *(unsigned __int8 *)(v11 + 23);
          else
            v13 = *(_QWORD *)(v11 + 8);
          if (v13 == v9)
          {
            if ((v12 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v11, v10, *(_QWORD *)(v11 + 8)))
                goto LABEL_26;
            }
            else
            {
              if (!*(_BYTE *)(v11 + 23))
                goto LABEL_26;
              v14 = 0;
              while (*(unsigned __int8 *)(v11 + v14) == v10[v14])
              {
                if (v12 == ++v14)
                  goto LABEL_26;
              }
            }
          }
          v11 += 24;
          if ((char *)v11 == v6)
            goto LABEL_38;
        }
      }
      v11 = a1[8];
LABEL_26:
      if ((char *)v11 != v6)
      {
        if ((char *)(v11 + 24) != v6)
        {
          v15 = &v7[8 * ((v11 - (uint64_t)v7) >> 3) + 23];
          do
          {
            v16 = (void **)(v15 - 23);
            if (*v15 < 0)
              operator delete(*v16);
            *(_OWORD *)v16 = *(_OWORD *)(v15 + 1);
            *(_QWORD *)(v15 - 7) = *(_QWORD *)(v15 + 17);
            v15[24] = 0;
            v15 += 24;
            *(v15 - 23) = 0;
            v11 += 24;
          }
          while (v15 + 1 != v6);
          v6 = (char *)a1[9];
        }
        while (v6 != (char *)v11)
        {
          if (*(v6 - 1) < 0)
            operator delete(*((void **)v6 - 3));
          v6 -= 24;
        }
        a1[9] = v11;
      }
    }
LABEL_38:
    v17 = a1[18];
    if (v17 >= a1[19])
    {
      v19 = sub_20E8ADE68(a1 + 17, (__int128 *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)a1[18], *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v18 = *(_OWORD *)a2;
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v17 = v18;
      }
      v19 = v17 + 24;
      a1[18] = v17 + 24;
    }
    a1[18] = v19;
    v20 = (int8x8_t)a1[1];
    v21 = v5[1];
    v22 = (uint8x8_t)vcnt_s8(v20);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(_QWORD *)&v20)
        v21 %= *(_QWORD *)&v20;
    }
    else
    {
      v21 &= *(_QWORD *)&v20 - 1;
    }
    v23 = *(uint64_t **)(*a1 + 8 * v21);
    do
    {
      v24 = v23;
      v23 = (uint64_t *)*v23;
    }
    while (v23 != v5);
    if (v24 == a1 + 2)
      goto LABEL_61;
    v25 = v24[1];
    if (v22.u32[0] > 1uLL)
    {
      if (v25 >= *(_QWORD *)&v20)
        v25 %= *(_QWORD *)&v20;
    }
    else
    {
      v25 &= *(_QWORD *)&v20 - 1;
    }
    if (v25 != v21)
    {
LABEL_61:
      if (!*v5)
        goto LABEL_62;
      v26 = *(_QWORD *)(*v5 + 8);
      if (v22.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&v20)
          v26 %= *(_QWORD *)&v20;
      }
      else
      {
        v26 &= *(_QWORD *)&v20 - 1;
      }
      if (v26 != v21)
LABEL_62:
        *(_QWORD *)(*a1 + 8 * v21) = 0;
    }
    v27 = *v5;
    if (*v5)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v22.u32[0] > 1uLL)
      {
        if (v28 >= *(_QWORD *)&v20)
          v28 %= *(_QWORD *)&v20;
      }
      else
      {
        v28 &= *(_QWORD *)&v20 - 1;
      }
      if (v28 != v21)
      {
        *(_QWORD *)(*a1 + 8 * v28) = v24;
        v27 = *v5;
      }
    }
    *v24 = v27;
    *v5 = 0;
    --a1[3];
    if (*((char *)v5 + 39) < 0)
      operator delete((void *)v5[2]);
    operator delete(v5);
  }
}

void sub_20FCC8A84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20FCC8A8C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  result = (uint64_t)sub_20EB07858(a1, a2);
  if (result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 207, (uint64_t)"object_anchors_.count(object_id) == 0", 37, (uint64_t)"The anchor exist in the object anchor set!", 42, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  v6 = a1[17];
  v5 = a1[18];
  if (v6 != v5)
  {
    v7 = *(_BYTE *)(a2 + 23);
    if (v7 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    if (v7 >= 0)
      v9 = (unsigned __int8 *)a2;
    else
      v9 = *(unsigned __int8 **)a2;
    while (1)
    {
      v10 = *(unsigned __int8 *)(v6 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v6 + 23);
      else
        v11 = *(_QWORD *)(v6 + 8);
      if (v11 == v8)
      {
        if ((v10 & 0x80) != 0)
        {
          result = memcmp(*(const void **)v6, v9, *(_QWORD *)(v6 + 8));
          if (!(_DWORD)result)
            break;
        }
        else
        {
          if (!*(_BYTE *)(v6 + 23))
            break;
          v12 = 0;
          while (*(unsigned __int8 *)(v6 + v12) == v9[v12])
          {
            if (v10 == ++v12)
              goto LABEL_21;
          }
        }
      }
      v6 += 24;
      if (v6 == v5)
        goto LABEL_22;
    }
  }
LABEL_21:
  if (v6 == v5)
  {
LABEL_22:
    if (v5 >= a1[19])
    {
      result = sub_20E8ADE68(a1 + 17, (__int128 *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)v5, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v13 = *(_OWORD *)a2;
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v5 = v13;
      }
      result = v5 + 24;
      a1[18] = v5 + 24;
    }
    a1[18] = result;
  }
  return result;
}

void sub_20FCC8C0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC8C14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v10;
  int8x16_t v13;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  uint64_t v20;
  double v21;
  double v24;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v29;
  int8x16_t v30;
  int64x2_t v31;
  float64x2_t *v32;
  double v33;
  float64x2_t v35;
  float64x2_t *v36;
  float64_t v37;
  float64x2_t v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64_t v49;

  v3 = a1[2];
  if (*(_QWORD *)(a2 + 64))
  {
    if (v3)
    {
      v4 = (_QWORD *)(a2 + 1784);
      __asm { FMOV            V0.2D, #1.0 }
      v49 = *((double *)&_Q0 + 1);
      do
      {
        v10 = sub_20E9DF85C(v4, (uint64_t *)(v3 + 40));
        if (v10)
        {
          v15 = v10[5];
          v16 = *(float64x2_t *)v15;
          _Q5.f64[0] = *(float64_t *)(v15 + 40);
          v17 = *(float64x2_t *)(v15 + 24);
          v18 = *(double *)(v15 + 64);
          v19 = *(float64x2_t *)(v15 + 48);
          v20 = v10[9];
          v21 = *(double *)(v20 + 16);
          _Q2 = *(_OWORD *)v20;
          v13.i64[0] = *(_QWORD *)(v20 + 40);
          _Q18 = *(float64x2_t *)(v20 + 24);
          v24 = *(double *)(v20 + 64);
          _Q20 = *(float64x2_t *)(v20 + 48);
          v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, *(double *)v20), v17, *(float64x2_t *)v20, 1), v19, v21);
          __asm { FMLA            D21, D5, V2.D[1] }
          *(double *)_Q21.i64 = *(double *)_Q21.i64 + v18 * v21;
          v27 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q18.f64[0]), v17, _Q18, 1), v19, *(double *)v13.i64);
          __asm { FMLA            D1, D5, V18.D[1] }
          *(double *)v13.i64 = _D1 + v18 * *(double *)v13.i64;
          v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q20.f64[0]), v17, _Q20, 1), v19, v24);
          __asm { FMLA            D2, D5, V20.D[1] }
          *(double *)&_Q2 = *(double *)&_Q2 + v18 * v24;
          v30 = vextq_s8(v27, v13, 8uLL);
          v31 = vzip1q_s64(_Q21, (int64x2_t)v27);
          v32 = (float64x2_t *)v10[11];
          v33 = v32[1].f64[0];
          _Q20 = *v32;
          v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v32->f64[0]), v17, *v32, 1), v19, v33);
          __asm { FMLA            D3, D5, V20.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + v18 * v33;
          v36 = (float64x2_t *)v10[7];
          _Q5.f64[0] = v36[1].f64[0];
          *(_QWORD *)&v37 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
          *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v31, 1).u64[0];
          *(_QWORD *)&v19.f64[1] = v30.i64[0];
          v38 = vaddq_f64(v35, *v36);
          v39 = v30.i64[1];
          *(_QWORD *)&v17.f64[0] = v31.i64[0];
          v40.f64[1] = v49;
          v40.f64[0] = v37;
          v42 = *(float64x2_t *)(v3 + 64);
          v41 = *(float64x2_t *)(v3 + 80);
          v44 = *(float64x2_t *)(v3 + 96);
          v43 = *(float64x2_t *)(v3 + 112);
          v46 = *(float64x2_t *)(v3 + 128);
          v45 = *(float64x2_t *)(v3 + 144);
          v48 = *(float64x2_t *)(v3 + 160);
          v47 = *(float64x2_t *)(v3 + 176);
          *(float64x2_t *)(v3 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v42.f64[0]), v19, v42, 1), v29, v41.f64[0]), v38, v41, 1);
          *(float64x2_t *)(v3 + 208) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v17.f64[0], v42.f64[0]), (float64x2_t)(unint64_t)v39, v42, 1), (float64x2_t)(unint64_t)_Q2, v41.f64[0]), v40, v41, 1);
          *(float64x2_t *)(v3 + 224) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v44.f64[0]), v19, v44, 1), v29, v43.f64[0]), v38, v43, 1);
          *(float64x2_t *)(v3 + 240) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v17.f64[0], v44.f64[0]), (float64x2_t)(unint64_t)v39, v44, 1), (float64x2_t)(unint64_t)_Q2, v43.f64[0]), v40, v43, 1);
          *(float64x2_t *)(v3 + 256) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v46.f64[0]), v19, v46, 1), v29, v45.f64[0]), v38, v45, 1);
          *(float64x2_t *)(v3 + 272) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v17.f64[0], v46.f64[0]), (float64x2_t)(unint64_t)v39, v46, 1), (float64x2_t)(unint64_t)_Q2, v45.f64[0]), v40, v45, 1);
          *(float64x2_t *)(v3 + 288) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v48.f64[0]), v19, v48, 1), v29, v47.f64[0]), v38, v47, 1);
          *(float64x2_t *)(v3 + 304) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v17.f64[0], v48.f64[0]), (float64x2_t)(unint64_t)v39, v48, 1), (float64x2_t)(unint64_t)_Q2, v47.f64[0]), v40, v47, 1);
        }
        v3 = *(_QWORD *)v3;
      }
      while (v3);
    }
    sub_20FCC8FF4(a1);
  }
  else
  {
    for (; v3; v3 = *(_QWORD *)v3)
      sub_20FCC8E38(a1, v3 + 16, (__int128 *)(v3 + 40));
  }
}

void sub_20FCC8E38(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  char v18;

  if (*((_BYTE *)a3 + 280))
  {
    v17 = *a3;
    v18 = 1;
    v16[0] = 0;
    v16[16] = 0;
    sub_20FCC63C4((uint64_t)a1, a2, (uint64_t *)&v17, (uint64_t)v16);
  }
  *(__int128 *)((char *)a3 + 24) = xmmword_2103BC8E0;
  *(__int128 *)((char *)a3 + 40) = *(_OWORD *)algn_2103BC8F0;
  *(__int128 *)((char *)a3 + 56) = xmmword_2103BC900;
  *(__int128 *)((char *)a3 + 72) = unk_2103BC910;
  *(__int128 *)((char *)a3 + 136) = unk_2103BC950;
  *(__int128 *)((char *)a3 + 120) = xmmword_2103BC940;
  *(__int128 *)((char *)a3 + 104) = unk_2103BC930;
  *((_BYTE *)a3 + 280) = 0;
  *(_QWORD *)a3 = -1;
  *((_QWORD *)a3 + 1) = -1;
  *((_DWORD *)a3 + 4) = -1;
  *(__int128 *)((char *)a3 + 88) = xmmword_2103BC920;
  v7 = a1[8];
  v6 = a1[9];
  if (v7 != v6)
  {
    v8 = *(_BYTE *)(a2 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = *(unsigned __int8 **)a2;
    while (1)
    {
      v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(_QWORD *)(v7 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v7 + 23))
            break;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v10[v13])
          {
            if (v11 == ++v13)
              goto LABEL_21;
          }
        }
      }
      v7 += 24;
      if (v7 == v6)
        goto LABEL_22;
    }
  }
LABEL_21:
  if (v7 == v6)
  {
LABEL_22:
    if (v6 >= a1[10])
    {
      v15 = sub_20E8ADE68(a1 + 8, (__int128 *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)a2;
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v6 = v14;
      }
      v15 = v6 + 24;
      a1[9] = v6 + 24;
    }
    a1[9] = v15;
  }
}

void sub_20FCC8FEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC8FF4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;

  v3 = a1[14];
  v4 = a1[15];
  v2 = a1 + 14;
  while (v4 != v3)
  {
    if (*(char *)(v4 - 1) < 0)
      operator delete(*(void **)(v4 - 24));
    v4 -= 24;
  }
  a1[15] = v3;
  sub_20E9099B8((uint64_t)v2, a1[3]);
  v5 = (uint64_t *)a1[2];
  if (v5)
  {
    v6 = a1[15];
    do
    {
      while (1)
      {
        v7 = (__int128 *)(v5 + 2);
        if (v6 < a1[16])
          break;
        v6 = sub_20E8ADE68(v2, v7);
        a1[15] = v6;
        v5 = (uint64_t *)*v5;
        if (!v5)
          return;
      }
      if (*((char *)v5 + 39) < 0)
      {
        sub_20E860C04((_BYTE *)v6, (void *)v5[2], v5[3]);
      }
      else
      {
        v8 = *v7;
        *(_QWORD *)(v6 + 16) = v5[4];
        *(_OWORD *)v6 = v8;
      }
      v6 += 24;
      a1[15] = v6;
      a1[15] = v6;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
}

void sub_20FCC90C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC90D0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int8x16_t v25;
  float64x2_t **v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t *v32;
  double v33;
  double v36;
  float64x2_t v38;
  int8x16_t v39;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t *v43;
  double v44;
  float64x2_t v46;
  float64x2_t *v47;
  float64_t v48;
  float64x2_t v49;
  int8x16_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t i;
  float64_t v64;

  if (*(_QWORD *)(a2 + 64))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_20E9099B8((uint64_t)a4, a1[3]);
    v8 = a1[2];
    if (v8)
    {
      v11 = *(uint64_t **)(a3 + 8);
      v10 = (_QWORD *)(a3 + 8);
      v9 = v11;
      if (v11)
      {
        __asm { FMOV            V0.2D, #1.0 }
        v64 = *((double *)&_Q0 + 1);
LABEL_5:
        v17 = *(_QWORD *)(v8 + 40);
        v18 = *(_DWORD *)(v8 + 48);
        v19 = v10;
        do
        {
          v20 = v9[4];
          if (v20 < v17)
          {
            ++v9;
          }
          else if (v20 == v17)
          {
            if (*((_DWORD *)v9 + 10) < v18)
              ++v9;
            else
              v19 = v9;
          }
          else
          {
            v19 = v9;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
        if (v19 != v10)
        {
          v21 = v19[4];
          if (v17 >= v21 && (v17 != v21 || v18 >= *((_DWORD *)v19 + 10)))
          {
            v22 = sub_20E9DF85C((_QWORD *)(a2 + 1784), (uint64_t *)(v8 + 40));
            if (v22)
              v27 = (float64x2_t **)(v22 + 5);
            else
              v27 = 0;
            if (!v22
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 261, (uint64_t)"state_projection_ref_ptr", 24, (uint64_t)"Failed to find a ProjectionRef", 30, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v28 = **v27;
            _Q5.f64[0] = (*v27)[2].f64[1];
            v29 = *(float64x2_t *)((char *)*v27 + 24);
            v30 = (*v27)[4].f64[0];
            v31 = (*v27)[3];
            v32 = v27[4];
            v33 = v32[1].f64[0];
            _Q2 = *v32;
            v25.i64[0] = *(_QWORD *)&v32[2].f64[1];
            _Q18 = *(float64x2_t *)((char *)v32 + 24);
            v36 = v32[4].f64[0];
            _Q20 = v32[3];
            v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v32->f64[0]), v29, *v32, 1), v31, v33);
            __asm { FMLA            D21, D5, V2.D[1] }
            *(double *)_Q21.i64 = *(double *)_Q21.i64 + v30 * v33;
            v39 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, _Q18.f64[0]), v29, _Q18, 1), v31, *(double *)v25.i64);
            __asm { FMLA            D1, D5, V18.D[1] }
            *(double *)v25.i64 = _D1 + v30 * *(double *)v25.i64;
            v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, _Q20.f64[0]), v29, _Q20, 1), v31, v36);
            __asm { FMLA            D2, D5, V20.D[1] }
            _Q2.f64[0] = _Q2.f64[0] + v30 * v36;
            v42 = vzip1q_s64(_Q21, (int64x2_t)v39);
            v43 = v27[6];
            v44 = v43[1].f64[0];
            _Q20 = *v43;
            v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v43->f64[0]), v29, *v43, 1), v31, v44);
            __asm { FMLA            D3, D5, V20.D[1] }
            _Q3.f64[0] = _Q3.f64[0] + v30 * v44;
            v47 = v27[2];
            _Q5.f64[0] = v47[1].f64[0];
            *(_QWORD *)&v48 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
            v49 = vaddq_f64(v46, *v47);
            *(_QWORD *)&v29.f64[0] = vdupq_laneq_s64(v42, 1).u64[0];
            v50 = vextq_s8(v39, v25, 8uLL);
            *(_QWORD *)&v29.f64[1] = v50.i64[0];
            *(_QWORD *)&v31.f64[0] = v42.i64[0];
            v51.f64[1] = v64;
            v51.f64[0] = v48;
            v53 = *(float64x2_t *)(v8 + 64);
            v52 = *(float64x2_t *)(v8 + 80);
            v55 = *(float64x2_t *)(v8 + 96);
            v54 = *(float64x2_t *)(v8 + 112);
            v57 = *(float64x2_t *)(v8 + 128);
            v56 = *(float64x2_t *)(v8 + 144);
            v59 = *(float64x2_t *)(v8 + 160);
            v58 = *(float64x2_t *)(v8 + 176);
            *(float64x2_t *)(v8 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v53.f64[0]), v29, v53, 1), v41, v52.f64[0]), v49, v52, 1);
            *(float64x2_t *)(v8 + 208) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v31.f64[0], v53.f64[0]), (float64x2_t)v50.u64[1], v53, 1), (float64x2_t)*(unint64_t *)&_Q2.f64[0], v52.f64[0]), v51, v52, 1);
            *(float64x2_t *)(v8 + 224) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v55.f64[0]), v29, v55, 1), v41, v54.f64[0]), v49, v54, 1);
            *(float64x2_t *)(v8 + 240) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v31.f64[0], v55.f64[0]), (float64x2_t)v50.u64[1], v55, 1), (float64x2_t)*(unint64_t *)&_Q2.f64[0], v54.f64[0]), v51, v54, 1);
            *(float64x2_t *)(v8 + 256) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v57.f64[0]), v29, v57, 1), v41, v56.f64[0]), v49, v56, 1);
            *(float64x2_t *)(v8 + 272) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v31.f64[0], v57.f64[0]), (float64x2_t)v50.u64[1], v57, 1), (float64x2_t)*(unint64_t *)&_Q2.f64[0], v56.f64[0]), v51, v56, 1);
            *(float64x2_t *)(v8 + 288) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v59.f64[0]), v29, v59, 1), v41, v58.f64[0]), v49, v58, 1);
            *(float64x2_t *)(v8 + 304) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v31.f64[0], v59.f64[0]), (float64x2_t)v50.u64[1], v59, 1), (float64x2_t)*(unint64_t *)&_Q2.f64[0], v58.f64[0]), v51, v58, 1);
            v60 = a4[1];
            if (v60 >= a4[2])
            {
              v62 = sub_20E8ADE68(a4, (__int128 *)(v8 + 16));
            }
            else
            {
              if (*(char *)(v8 + 39) < 0)
              {
                sub_20E860C04((_BYTE *)a4[1], *(void **)(v8 + 16), *(_QWORD *)(v8 + 24));
              }
              else
              {
                v61 = *(_OWORD *)(v8 + 16);
                *(_QWORD *)(v60 + 16) = *(_QWORD *)(v8 + 32);
                *(_OWORD *)v60 = v61;
              }
              v62 = v60 + 24;
              a4[1] = v60 + 24;
            }
            a4[1] = v62;
          }
        }
        while (1)
        {
          v8 = *(_QWORD *)v8;
          if (!v8)
            break;
          v9 = (uint64_t *)*v10;
          if (*v10)
            goto LABEL_5;
        }
      }
      else
      {
        do
          v8 = *(_QWORD *)v8;
        while (v8);
      }
    }
  }
  else
  {
    for (i = a1[2]; i; i = *(_QWORD *)i)
      sub_20FCC8E38(a1, i + 16, (__int128 *)(i + 40));
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_20FCC9460(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  sub_20E89FB98((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20FCC9478(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E89FB98(v1);
  _Unwind_Resume(a1);
}

void sub_20FCC948C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E89FB98(v1);
  _Unwind_Resume(a1);
}

void sub_20FCC94A0(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E89FB98(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FCC94B4(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  char v40;
  _BYTE v41[15];
  char v42;
  char v43;
  _BYTE v44[15];
  char v45;
  _QWORD v46[2];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v6 = sub_20FCCAD50(a1, a2);
  if (!v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 310, (uint64_t)"object_anchor_iter != object_anchors_.end()", 43, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = *((_BYTE *)v6 + 320);
  if (v7)
  {
    v7 = *((_BYTE *)v6 + 40);
    v47[0] = *(uint64_t *)((char *)v6 + 41);
    *(_QWORD *)((char *)v47 + 7) = v6[6];
    v8 = 1;
    v9 = a3[280];
    if (v9)
    {
LABEL_5:
      v9 = *a3;
      v46[0] = *(_QWORD *)(a3 + 1);
      *(_QWORD *)((char *)v46 + 7) = *((_QWORD *)a3 + 1);
      v10 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = 0;
    v9 = a3[280];
    if (v9)
      goto LABEL_5;
  }
  v10 = 0;
LABEL_8:
  v43 = v7;
  *(_QWORD *)v44 = v47[0];
  *(_QWORD *)&v44[7] = *(_QWORD *)((char *)v47 + 7);
  v45 = v8;
  v40 = v9;
  *(_QWORD *)v41 = v46[0];
  *(_QWORD *)&v41[7] = *(_QWORD *)((char *)v46 + 7);
  v42 = v10;
  sub_20FCC63C4((uint64_t)a1, a2, (uint64_t *)&v43, (uint64_t)&v40);
  v11 = a3 + 280;
  v13 = a1[8];
  v12 = a1[9];
  if (v13 == v12)
  {
    v17 = a1[8];
  }
  else
  {
    v14 = *(_BYTE *)(a2 + 23);
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    if (v14 >= 0)
      v16 = (unsigned __int8 *)a2;
    else
      v16 = *(unsigned __int8 **)a2;
    v17 = a1[8];
    do
    {
      v18 = *(unsigned __int8 *)(v17 + 23);
      if ((v18 & 0x80u) == 0)
        v19 = *(unsigned __int8 *)(v17 + 23);
      else
        v19 = *(_QWORD *)(v17 + 8);
      if (v19 == v15)
      {
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v17, v16, *(_QWORD *)(v17 + 8)))
            goto LABEL_27;
        }
        else
        {
          if (!*(_BYTE *)(v17 + 23))
            goto LABEL_27;
          v20 = 0;
          while (*(unsigned __int8 *)(v17 + v20) == v16[v20])
          {
            if (v18 == ++v20)
              goto LABEL_27;
          }
        }
      }
      v17 += 24;
    }
    while (v17 != v12);
    v17 = v12;
LABEL_27:
    v11 = a3 + 280;
  }
  v21 = (uint64_t)(v17 - v13) / 24;
  v22 = v13 + 24 * v21;
  if (*v11)
  {
    if (v22 != v12)
    {
      if (v22 + 24 != v12)
      {
        v23 = (char *)(v13 + 24 * v21 + 23);
        do
        {
          v24 = (void **)(v23 - 23);
          if (*v23 < 0)
            operator delete(*v24);
          *(_OWORD *)v24 = *(_OWORD *)(v23 + 1);
          *(_QWORD *)(v23 - 7) = *(_QWORD *)(v23 + 17);
          v23[24] = 0;
          v23 += 24;
          *(v23 - 23) = 0;
          v22 += 24;
        }
        while (v23 + 1 != (char *)v12);
        v12 = a1[9];
      }
      if (v12 != v22)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0)
            operator delete(*(void **)(v12 - 24));
          v12 -= 24;
        }
        while (v12 != v22);
        v12 = v22;
      }
      goto LABEL_51;
    }
  }
  else if (v22 == v12)
  {
    if (v12 >= a1[10])
    {
      v12 = sub_20E8ADE68(a1 + 8, (__int128 *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v25 = *(_OWORD *)a2;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v12 = v25;
      }
      v12 += 24;
      a1[9] = v12;
    }
LABEL_51:
    a1[9] = v12;
  }
  v26 = *(_OWORD *)a3;
  *((_DWORD *)v6 + 14) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(v6 + 5) = v26;
  v27 = *(_OWORD *)(a3 + 104);
  v28 = *(_OWORD *)(a3 + 136);
  v29 = *(_OWORD *)(a3 + 88);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a3 + 120);
  *((_OWORD *)v6 + 11) = v28;
  *((_OWORD *)v6 + 8) = v29;
  *((_OWORD *)v6 + 9) = v27;
  v30 = *(_OWORD *)(a3 + 24);
  v31 = *(_OWORD *)(a3 + 40);
  v32 = *(_OWORD *)(a3 + 72);
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a3 + 56);
  *((_OWORD *)v6 + 7) = v32;
  *((_OWORD *)v6 + 4) = v30;
  *((_OWORD *)v6 + 5) = v31;
  v33 = *(_OWORD *)(a3 + 232);
  v34 = *(_OWORD *)(a3 + 264);
  v35 = *(_OWORD *)(a3 + 216);
  *((_OWORD *)v6 + 18) = *(_OWORD *)(a3 + 248);
  *((_OWORD *)v6 + 19) = v34;
  *((_OWORD *)v6 + 16) = v35;
  *((_OWORD *)v6 + 17) = v33;
  v36 = *(_OWORD *)(a3 + 152);
  v37 = *(_OWORD *)(a3 + 168);
  v38 = *(_OWORD *)(a3 + 200);
  *((_OWORD *)v6 + 14) = *(_OWORD *)(a3 + 184);
  *((_OWORD *)v6 + 15) = v38;
  *((_OWORD *)v6 + 12) = v36;
  *((_OWORD *)v6 + 13) = v37;
  result = *(__n128 *)v11;
  *(_OWORD *)((char *)v6 + 329) = *(_OWORD *)(v11 + 9);
  *((__n128 *)v6 + 20) = result;
  return result;
}

void sub_20FCC9870(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

void sub_20FCC987C(_QWORD *a1, unint64_t a2, unsigned int a3, _QWORD *a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  void *v15;
  uint64_t *v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  uint64_t v24;
  double v25;
  double v27;
  double v29;
  float64x2_t *v31;
  float64x2_t v33;
  float64x2_t *v39;
  double v40;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v44;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  void **v53;
  unsigned __int8 **v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  double v60;
  int8x16_t v63;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  uint64_t v70;
  double v71;
  double v74;
  float64x2_t v76;
  int8x16_t v77;
  float64x2_t v79;
  int8x16_t v80;
  int64x2_t v81;
  float64x2_t *v82;
  double v83;
  float64x2_t v85;
  float64x2_t *v86;
  float64_t v87;
  float64x2_t v88;
  uint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  int v98;
  unint64_t *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  char v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  unsigned __int8 **v119;
  uint64_t *v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  char **v129;
  int v130;
  __int128 v133;
  float64_t v134;
  void *__p[2];
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  unsigned __int8 v147;
  unsigned __int8 **v148;
  __int128 v149;

  v8 = a1;
  v9 = a1[5];
  v129 = (char **)(a1 + 5);
  v10 = a1[6];
  if (v10 != v9)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3);
    do
    {
      v12 = v11 >> 1;
      v13 = v9 + 40 * (v11 >> 1);
      if (*(_QWORD *)v13 < a2 || *(_QWORD *)v13 == a2 && *(_DWORD *)(v13 + 8) < a3)
      {
        v9 = v13 + 40;
        v12 = v11 + ~v12;
      }
      v11 = v12;
    }
    while (v12);
  }
  if (v9 == v10 || *(_QWORD *)v9 != a2 || *(_DWORD *)(v9 + 8) != a3)
    v9 = a1[6];
  if (v10 == v9)
    return;
  v14 = *(unsigned __int8 ***)(v9 + 16);
  v148 = v14;
  v133 = *(_OWORD *)(v9 + 24);
  v149 = v133;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  sub_20FCCBA00((uint64_t)v129, v9);
  LOBYTE(v137) = 0;
  v147 = 0;
  if (!*(_BYTE *)(a6 + 16))
    goto LABEL_20;
  sub_20F23A0A0(a4, (__int128 *)a6, (char **)__p);
  v15 = __p[0];
  if (__p[0] != __p[1])
  {
    v16 = sub_20E9DF85C(a4 + 223, (uint64_t *)__p[0]);
    v15 = __p[0];
    if (v16)
    {
      v18 = v16[5];
      v19 = *(float64x2_t *)v18;
      _D4 = *(_QWORD *)(v18 + 40);
      v21 = *(float64x2_t *)(v18 + 24);
      v22 = *(double *)(v18 + 64);
      v23 = *(float64x2_t *)(v18 + 48);
      v24 = v16[9];
      v25 = *(double *)(v24 + 16);
      _Q16 = *(float64x2_t *)v24;
      v27 = *(double *)(v24 + 40);
      _Q18 = *(float64x2_t *)(v24 + 24);
      v29 = *(double *)(v24 + 64);
      _Q20 = *(float64x2_t *)(v24 + 48);
      v31 = (float64x2_t *)v16[11];
      v17.f64[0] = v31[1].f64[0];
      _Q21 = *v31;
      v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v31->f64[0]), v21, *v31, 1), v23, v17.f64[0]);
      __asm { FMLA            D23, D4, V21.D[1] }
      v17.f64[0] = _D23 + v22 * v17.f64[0];
      v39 = (float64x2_t *)v16[7];
      _Q21.f64[0] = v39[1].f64[0];
      *(_QWORD *)&v40 = *(_OWORD *)&vaddq_f64(v17, _Q21);
      v41 = vaddq_f64(v33, *v39);
      v42 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q16.f64[0]), v21, _Q16, 1), v23, v25);
      __asm { FMLA            D23, D4, V16.D[1] }
      v44.f64[0] = _D23 + v22 * v25;
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q18.f64[0]), v21, _Q18, 1), v23, v27);
      __asm { FMLA            D23, D4, V18.D[1] }
      _Q3 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q20.f64[0]), v21, _Q20, 1), v23, v29);
      __asm { FMLA            D2, D4, V20.D[1] }
      v49 = _D2 + v22 * v29;
      v50 = (float64x2_t)vzip1q_s64(v42, (int64x2_t)_Q16);
      v51 = (float64x2_t)vzip2q_s64(v42, (int64x2_t)_Q16);
      v44.f64[1] = _D23 + v22 * v27;
      _D17 = v41.f64[1];
      __asm { FMLA            D16, D17, V3.D[1] }
      _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v49, v40);
      *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
      _Q16.f64[1] = 1.0;
      v137 = *(_OWORD *)__p[0];
      v138 = *((_QWORD *)__p[0] + 2);
      v147 = 1;
      v141 = v51;
      v140 = (float64x2_t)_Q3.u64[0];
      v139 = v50;
      v142 = (float64x2_t)vdupq_laneq_s64(_Q3, 1).u64[0];
      v144 = (float64x2_t)*(unint64_t *)&v49;
      v143 = v44;
      v145 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v41.f64[0]), v51, v41, 1), v44, v40));
      v146 = _Q16;
LABEL_19:
      __p[1] = v15;
      operator delete(v15);
      goto LABEL_20;
    }
  }
  if (v15)
    goto LABEL_19;
LABEL_20:
  v53 = (void **)v133;
  if (v14 == (unsigned __int8 **)v133)
  {
    if (v14)
      goto LABEL_66;
    return;
  }
  v130 = v147;
  v120 = v8 + 8;
  v127 = v140;
  v128 = v139;
  v125 = v142;
  v126 = v141;
  v123 = v145;
  v124 = v144;
  v54 = v14;
  v55 = a4 + 223;
  __asm { FMOV            V0.2D, #1.0 }
  v134 = *((double *)&_Q0 + 1);
  v119 = v14;
  v121 = v143;
  v122 = v146;
  do
  {
    v58 = sub_20FCCAD50(v8, (uint64_t)v54);
    if (!v58
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 379, (uint64_t)"obj_iter != object_anchors_.end()", 33, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_OWORD *)__p = *(_OWORD *)(v58 + 5);
    v136 = v58[7];
    v59 = sub_20E9DF85C(v55, (uint64_t *)__p);
    if (v59)
    {
      v65 = v59[5];
      v66 = *(float64x2_t *)v65;
      _Q5.f64[0] = *(float64_t *)(v65 + 40);
      v67 = *(float64x2_t *)(v65 + 24);
      v68 = *(double *)(v65 + 64);
      v69 = *(float64x2_t *)(v65 + 48);
      v70 = v59[9];
      v71 = *(double *)(v70 + 16);
      _Q2 = *(_OWORD *)v70;
      v63.i64[0] = *(_QWORD *)(v70 + 40);
      _Q18 = *(float64x2_t *)(v70 + 24);
      v74 = *(double *)(v70 + 64);
      _Q20 = *(float64x2_t *)(v70 + 48);
      v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v70), v67, *(float64x2_t *)v70, 1), v69, v71);
      __asm { FMLA            D21, D5, V2.D[1] }
      *(double *)_Q21.i64 = *(double *)_Q21.i64 + v68 * v71;
      v77 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q18.f64[0]), v67, _Q18, 1), v69, *(double *)v63.i64);
      __asm { FMLA            D1, D5, V18.D[1] }
      *(double *)v63.i64 = _D1 + v68 * *(double *)v63.i64;
      v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q20.f64[0]), v67, _Q20, 1), v69, v74);
      __asm { FMLA            D2, D5, V20.D[1] }
      v60 = *(double *)&_Q2 + v68 * v74;
      v80 = vextq_s8(v77, v63, 8uLL);
      v81 = vzip1q_s64(_Q21, (int64x2_t)v77);
      v82 = (float64x2_t *)v59[11];
      v83 = v82[1].f64[0];
      _Q20 = *v82;
      v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, v82->f64[0]), v67, *v82, 1), v69, v83);
      __asm { FMLA            D3, D5, V20.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + v68 * v83;
      v86 = (float64x2_t *)v59[7];
      _Q5.f64[0] = v86[1].f64[0];
      *(_QWORD *)&v87 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
      *(_QWORD *)&v69.f64[0] = vdupq_laneq_s64(v81, 1).u64[0];
      *(_QWORD *)&v69.f64[1] = v80.i64[0];
      v88 = vaddq_f64(v85, *v86);
      v89 = v80.i64[1];
      *(_QWORD *)&v67.f64[0] = v81.i64[0];
      _Q3.f64[1] = v134;
      _Q3.f64[0] = v87;
      v91 = *((float64x2_t *)v58 + 4);
      v90 = *((float64x2_t *)v58 + 5);
      v93 = *((float64x2_t *)v58 + 6);
      v92 = *((float64x2_t *)v58 + 7);
      v95 = *((float64x2_t *)v58 + 8);
      v94 = *((float64x2_t *)v58 + 9);
      v97 = *((float64x2_t *)v58 + 10);
      v96 = *((float64x2_t *)v58 + 11);
      *((float64x2_t *)v58 + 12) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v91.f64[0]), v69, v91, 1), v79, v90.f64[0]), v88, v90, 1);
      *((float64x2_t *)v58 + 13) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v67.f64[0], v91.f64[0]), (float64x2_t)(unint64_t)v89, v91, 1), (float64x2_t)*(unint64_t *)&v60, v90.f64[0]), _Q3, v90, 1);
      *((float64x2_t *)v58 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v93.f64[0]), v69, v93, 1), v79, v92.f64[0]), v88, v92, 1);
      *((float64x2_t *)v58 + 15) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v67.f64[0], v93.f64[0]), (float64x2_t)(unint64_t)v89, v93, 1), (float64x2_t)*(unint64_t *)&v60, v92.f64[0]), _Q3, v92, 1);
      *((float64x2_t *)v58 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v95.f64[0]), v69, v95, 1), v79, v94.f64[0]), v88, v94, 1);
      *((float64x2_t *)v58 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v67.f64[0], v95.f64[0]), (float64x2_t)(unint64_t)v89, v95, 1), (float64x2_t)*(unint64_t *)&v60, v94.f64[0]), _Q3, v94, 1);
      *((float64x2_t *)v58 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v97.f64[0]), v69, v97, 1), v79, v96.f64[0]), v88, v96, 1);
      *((float64x2_t *)v58 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v67.f64[0], v97.f64[0]), (float64x2_t)(unint64_t)v89, v97, 1), (float64x2_t)*(unint64_t *)&v60, v96.f64[0]), _Q3, v96, 1);
    }
    *((_BYTE *)v58 + 320) = 0;
    *((_DWORD *)v58 + 14) = -1;
    v58[5] = -1;
    v58[6] = -1;
    *((_OWORD *)v58 + 8) = xmmword_2103BC920;
    *((_OWORD *)v58 + 9) = unk_2103BC930;
    *((_OWORD *)v58 + 10) = xmmword_2103BC940;
    *((_OWORD *)v58 + 11) = unk_2103BC950;
    *((_OWORD *)v58 + 4) = xmmword_2103BC8E0;
    *((_OWORD *)v58 + 5) = *(_OWORD *)algn_2103BC8F0;
    v98 = *((unsigned __int8 *)v58 + 336) >> 4;
    *((_OWORD *)v58 + 6) = xmmword_2103BC900;
    *((_OWORD *)v58 + 7) = *(_OWORD *)dbl_2103BC910;
    if (v98)
    {
      if (v98 == 1 && v130)
      {
        v99 = (unint64_t *)sub_20FCCA0B4(v129, (unint64_t *)&v137);
        *(_BYTE *)sub_20FCCA660(v99, v54) = 1;
        v101 = *((float64x2_t *)v58 + 12);
        v100 = *((float64x2_t *)v58 + 13);
        v103 = *((float64x2_t *)v58 + 14);
        v102 = *((float64x2_t *)v58 + 15);
        v105 = *((float64x2_t *)v58 + 16);
        v104 = *((float64x2_t *)v58 + 17);
        v107 = *((float64x2_t *)v58 + 18);
        v106 = *((float64x2_t *)v58 + 19);
        *((float64x2_t *)v58 + 4) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v101.f64[0]), v126, v101, 1), v121, v100.f64[0]), v123, v100, 1);
        *((float64x2_t *)v58 + 5) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v101.f64[0]), v125, v101, 1), v124, v100.f64[0]), v122, v100, 1);
        *((float64x2_t *)v58 + 6) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v103.f64[0]), v126, v103, 1), v121, v102.f64[0]), v123, v102, 1);
        *((float64x2_t *)v58 + 7) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v103.f64[0]), v125, v103, 1), v124, v102.f64[0]), v122, v102, 1);
        *((float64x2_t *)v58 + 8) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v105.f64[0]), v126, v105, 1), v121, v104.f64[0]), v123, v104, 1);
        *((float64x2_t *)v58 + 9) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v105.f64[0]), v125, v105, 1), v124, v104.f64[0]), v122, v104, 1);
        *((float64x2_t *)v58 + 10) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v107.f64[0]), v126, v107, 1), v121, v106.f64[0]), v123, v106, 1);
        *((float64x2_t *)v58 + 11) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v107.f64[0]), v125, v107, 1), v124, v106.f64[0]), v122, v106, 1);
        *(_OWORD *)(v58 + 5) = v137;
        *((_DWORD *)v58 + 14) = v138;
        *((_BYTE *)v58 + 320) = 1;
        goto LABEL_24;
      }
    }
    else
    {
      sub_20FCC7A74((uint64_t)v8, (_BYTE *)v58 + 16, a4, a5, (uint64_t)(v58 + 5), 0.0, dbl_2103BC910[0], v60, _Q3);
      if (*((_BYTE *)v58 + 320))
        goto LABEL_24;
    }
    v109 = v8[8];
    v108 = v8[9];
    if (v109 != v108)
    {
      v110 = v8;
      v111 = v55;
      v112 = *((_BYTE *)v58 + 39);
      if (v112 >= 0)
        v113 = *((unsigned __int8 *)v58 + 39);
      else
        v113 = v58[3];
      if (v112 >= 0)
        v114 = (unsigned __int8 *)(v58 + 2);
      else
        v114 = (unsigned __int8 *)v58[2];
      do
      {
        v115 = *(unsigned __int8 *)(v109 + 23);
        if ((v115 & 0x80u) == 0)
          v116 = *(unsigned __int8 *)(v109 + 23);
        else
          v116 = *(_QWORD *)(v109 + 8);
        if (v116 == v113)
        {
          if ((v115 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v109, v114, *(_QWORD *)(v109 + 8)))
              goto LABEL_52;
          }
          else
          {
            if (!*(_BYTE *)(v109 + 23))
              goto LABEL_52;
            v117 = 0;
            while (*(unsigned __int8 *)(v109 + v117) == v114[v117])
            {
              if (v115 == ++v117)
                goto LABEL_52;
            }
          }
        }
        v109 += 24;
      }
      while (v109 != v108);
      v109 = v108;
LABEL_52:
      v55 = v111;
      v8 = v110;
    }
    if (v109 == v108)
    {
      if (v108 >= v8[10])
      {
        v57 = sub_20E8ADE68(v120, (__int128 *)v58 + 1);
      }
      else
      {
        if (*((char *)v58 + 39) < 0)
        {
          sub_20E860C04((_BYTE *)v108, (void *)v58[2], v58[3]);
        }
        else
        {
          v118 = *((_OWORD *)v58 + 1);
          *(_QWORD *)(v108 + 16) = v58[4];
          *(_OWORD *)v108 = v118;
        }
        v57 = v108 + 24;
        v8[9] = v108 + 24;
      }
      v8[9] = v57;
    }
LABEL_24:
    v54 += 4;
  }
  while (v54 != (unsigned __int8 **)v133);
  v14 = v119;
  if (!v119)
    return;
  do
  {
    if (*((char *)v53 - 9) < 0)
      operator delete(*(v53 - 4));
    v53 -= 4;
  }
  while (v53 != (void **)v119);
LABEL_66:
  operator delete(v14);
}

void sub_20FCCA04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;

  if (__p)
  {
    operator delete(__p);
    sub_20EB9B93C((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  sub_20EB9B93C((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

char *sub_20FCCA0B4(char **a1, unint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _DWORD *v29;
  void **v30;
  void **v31;
  char *v32;
  void ***v33;
  void **v34;
  void **v35;
  void **v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v54;
  char *v55;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  if (v3 == *a1)
  {
    v8 = *a1;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    v7 = *a2;
    v8 = *a1;
    do
    {
      v9 = v6 >> 1;
      v10 = &v8[40 * (v6 >> 1)];
      if (*(_QWORD *)v10 < v7 || *(_QWORD *)v10 == v7 && *((_DWORD *)v10 + 2) < *((_DWORD *)a2 + 2))
      {
        v8 = v10 + 40;
        v9 = v6 + ~v9;
      }
      v6 = v9;
    }
    while (v9);
  }
  if (v8 == v3 || *(_QWORD *)v8 != *a2 || *((_DWORD *)v8 + 2) != *((_DWORD *)a2 + 2))
  {
    v54 = *(_OWORD *)a2;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
    v12 = (unint64_t)a1[2];
    if ((unint64_t)v3 < v12)
    {
      if (v8 == v3)
      {
        *(_OWORD *)v3 = *(_OWORD *)a2;
        v37 = &v4[8 * ((v8 - v4) >> 3)];
        *((_QWORD *)v37 + 2) = 0;
        *((_QWORD *)v37 + 3) = 0;
        *((_QWORD *)v37 + 4) = 0;
        a1[1] = v3 + 40;
        v8 = v3;
      }
      else
      {
        v13 = v3 - 40;
        v14 = a1[1];
        if ((unint64_t)v3 >= 0x28)
        {
          v15 = v3 - 40;
          v14 = a1[1];
          do
          {
            *(_OWORD *)v14 = *(_OWORD *)v15;
            *((_QWORD *)v14 + 3) = 0;
            *((_QWORD *)v14 + 4) = 0;
            *((_QWORD *)v14 + 2) = 0;
            *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
            *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
            *((_QWORD *)v15 + 2) = 0;
            *((_QWORD *)v15 + 3) = 0;
            *((_QWORD *)v15 + 4) = 0;
            v14 += 40;
            v15 += 40;
          }
          while (v15 < v3);
        }
        a1[1] = v14;
        if (v3 != v8 + 40)
        {
          v16 = v3 - 40;
          v17 = v3;
          do
          {
            v19 = *((_QWORD *)v16 - 5);
            v16 -= 40;
            v20 = *((_DWORD *)v16 + 2);
            *((_QWORD *)v17 - 5) = v19;
            v17 = (_OWORD *)((char *)v17 - 40);
            *((_DWORD *)v17 + 2) = v20;
            v21 = (void **)(v17 + 1);
            v22 = *((_QWORD *)v17 + 2);
            if (v22)
            {
              v23 = *((_QWORD *)v3 - 2);
              v18 = (void *)*((_QWORD *)v17 + 2);
              if (v23 != v22)
              {
                do
                {
                  if (*(char *)(v23 - 9) < 0)
                    operator delete(*(void **)(v23 - 32));
                  v23 -= 32;
                }
                while (v23 != v22);
                v18 = *v21;
              }
              *((_QWORD *)v3 - 2) = v22;
              operator delete(v18);
              *v21 = 0;
              *((_QWORD *)v17 + 3) = 0;
              *((_QWORD *)v17 + 4) = 0;
            }
            *(_OWORD *)(v3 - 24) = *(_OWORD *)(v13 - 24);
            *((_QWORD *)v3 - 1) = *((_QWORD *)v13 - 1);
            *((_QWORD *)v13 - 3) = 0;
            *((_QWORD *)v13 - 2) = 0;
            *((_QWORD *)v13 - 1) = 0;
            v3 = (char *)v17;
            v13 = v16;
          }
          while (v16 != v8);
        }
        *((_DWORD *)v8 + 2) = DWORD2(v54);
        *(_QWORD *)v8 = v54;
        v28 = &v4[8 * ((v8 - v4) >> 3)];
        v31 = (void **)*((_QWORD *)v28 + 2);
        v29 = v28 + 16;
        v30 = v31;
        if (v31)
        {
          v32 = &v4[8 * ((v8 - v4) >> 3)];
          v35 = (void **)*((_QWORD *)v32 + 3);
          v33 = (void ***)(v32 + 24);
          v34 = v35;
          v36 = v30;
          if (v35 != v30)
          {
            do
            {
              if (*((char *)v34 - 9) < 0)
                operator delete(*(v34 - 4));
              v34 -= 4;
            }
            while (v34 != v30);
            v36 = *(void ***)v29;
          }
          *v33 = v30;
          operator delete(v36);
          *(_QWORD *)v29 = 0;
          *((_QWORD *)v29 + 1) = 0;
          *((_QWORD *)v29 + 2) = 0;
        }
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      return v8 + 16;
    }
    v24 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3) + 1;
    if (v24 > 0x666666666666666)
      sub_20F45A4CC();
    v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v4) >> 3);
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x333333333333333)
      v26 = 0x666666666666666;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 > 0x666666666666666)
        sub_20E877A38();
      v27 = (char *)operator new(40 * v26);
    }
    else
    {
      v27 = 0;
    }
    v38 = &v27[8 * ((v8 - v4) >> 3)];
    v55 = &v27[40 * v26];
    if (v11 == v26)
    {
      if (v8 - v4 < 1)
      {
        if (v4 == v8)
          v40 = 1;
        else
          v40 = 0x999999999999999ALL * ((v8 - v4) >> 3);
        if (v40 > 0x666666666666666)
          sub_20E877A38();
        v41 = (char *)operator new(40 * v40);
        v38 = &v41[40 * (v40 >> 2)];
        v55 = &v41[40 * v40];
        if (v27)
          operator delete(v27);
      }
      else
      {
        v39 = v11 + 2;
        if (v11 >= -1)
          v39 = v11 + 1;
        v38 -= 40 * (v39 >> 1);
      }
    }
    *(_OWORD *)v38 = v54;
    *((_QWORD *)v38 + 3) = 0;
    *((_QWORD *)v38 + 4) = 0;
    *((_QWORD *)v38 + 2) = 0;
    *((_QWORD *)v38 + 4) = 0;
    v42 = v38 + 40;
    v43 = *a1;
    if (*a1 == v8)
    {
      v47 = v38;
      v48 = a1[1];
      if (v48 == v8)
        goto LABEL_68;
    }
    else
    {
      v44 = 0;
      do
      {
        v45 = &v38[v44];
        v46 = &v8[v44];
        *(_OWORD *)(v45 - 40) = *(_OWORD *)&v8[v44 - 40];
        *(_OWORD *)(v45 - 24) = *(_OWORD *)&v8[v44 - 24];
        *((_QWORD *)v45 - 1) = *(_QWORD *)&v8[v44 - 8];
        *((_QWORD *)v46 - 3) = 0;
        *((_QWORD *)v46 - 2) = 0;
        *((_QWORD *)v46 - 1) = 0;
        v44 -= 40;
      }
      while (&v8[v44] != v43);
      v42 = v38 + 40;
      v47 = &v38[v44];
      v48 = a1[1];
      if (v48 == v8)
        goto LABEL_68;
    }
    do
    {
      *(_OWORD *)v42 = *(_OWORD *)v8;
      *((_QWORD *)v42 + 3) = 0;
      *((_QWORD *)v42 + 4) = 0;
      *((_QWORD *)v42 + 2) = 0;
      *((_OWORD *)v42 + 1) = *((_OWORD *)v8 + 1);
      *((_QWORD *)v42 + 4) = *((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 4) = 0;
      v42 += 40;
      v8 += 40;
    }
    while (v8 != v48);
    v8 = a1[1];
LABEL_68:
    v49 = *a1;
    *a1 = v47;
    a1[1] = v42;
    a1[2] = v55;
    if (v8 == v49)
    {
      if (!v8)
      {
LABEL_81:
        v8 = v38;
        return v8 + 16;
      }
    }
    else
    {
      do
      {
        v51 = *((_QWORD *)v8 - 3);
        if (v51)
        {
          v52 = *((_QWORD *)v8 - 2);
          v50 = (void *)*((_QWORD *)v8 - 3);
          if (v52 != v51)
          {
            do
            {
              if (*(char *)(v52 - 9) < 0)
                operator delete(*(void **)(v52 - 32));
              v52 -= 32;
            }
            while (v52 != v51);
            v50 = (void *)*((_QWORD *)v8 - 3);
          }
          *((_QWORD *)v8 - 2) = v51;
          operator delete(v50);
        }
        v8 -= 40;
      }
      while (v8 != v49);
      v8 = v49;
      if (!v49)
        goto LABEL_81;
    }
    operator delete(v8);
    goto LABEL_81;
  }
  return v8 + 16;
}

void sub_20FCCA620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20FCCBB34((uint64_t)va2);
  sub_20FCCACE0((uint64_t)va1);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCCA644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20FCCACE0((uint64_t)va1);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20FCCA660(unint64_t *a1, unsigned __int8 **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  void *__p[2];
  unsigned __int8 *v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1;
  if (v4 != *a1)
  {
    v6 = (uint64_t)(v4 - *a1) >> 5;
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = (unsigned __int8 *)a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    v5 = *a1;
    do
    {
      v10 = v6 >> 1;
      v11 = v5 + 32 * (v6 >> 1);
      v12 = *(char *)(v11 + 23);
      if (v12 >= 0)
        v13 = (const void *)(v5 + 32 * (v6 >> 1));
      else
        v13 = *(const void **)v11;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v11 + 23);
      else
        v14 = *(_QWORD *)(v11 + 8);
      if (v9 >= v14)
        v15 = v14;
      else
        v15 = v9;
      v16 = memcmp(v13, v8, v15);
      if (v16)
      {
        if ((v16 & 0x80000000) == 0)
          goto LABEL_10;
      }
      else if (v14 >= v9)
      {
        goto LABEL_10;
      }
      v5 = v11 + 32;
      v10 = v6 + ~v10;
LABEL_10:
      v6 = v10;
    }
    while (v10);
  }
  if (v5 == v4)
  {
    LOBYTE(v20) = *((_BYTE *)a2 + 23);
    v21 = (uint64_t *)a1;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v5 + 23);
    if ((v17 & 0x80u) == 0)
      v18 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
    else
      v18 = *(unsigned __int8 **)(v5 + 8);
    v19 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    v20 = (char)v19;
    if ((char)v19 < 0)
      v19 = a2[1];
    v21 = (uint64_t *)a1;
    if (v18 == v19)
    {
      if (v20 >= 0)
        v22 = (unsigned __int8 *)a2;
      else
        v22 = *a2;
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v5, v22, *(_QWORD *)(v5 + 8)))
          return v5 + 24;
      }
      else
      {
        if (!*(_BYTE *)(v5 + 23))
          return v5 + 24;
        v23 = 0;
        while (*(unsigned __int8 *)(v5 + v23) == v22[v23])
        {
          if (v17 == ++v23)
            return v5 + 24;
        }
      }
    }
  }
  if ((v20 & 0x80) != 0)
  {
    sub_20E860C04(__p, *a2, (unint64_t)a2[1]);
    v3 = *v21;
    v4 = v21[1];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v58 = a2[2];
  }
  v59 = 0;
  v24 = v5 - v3;
  v25 = (uint64_t)(v5 - v3) >> 5;
  v26 = v21[2];
  if (v4 < v26)
  {
    if (v5 == v4)
    {
      v42 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 16) = v58;
      *(_OWORD *)v4 = v42;
      __p[1] = 0;
      v58 = 0;
      __p[0] = 0;
      *(_BYTE *)(v3 + 32 * v25 + 24) = v59;
      v21[1] = v4 + 32;
      v5 = v4;
    }
    else
    {
      v27 = v5 + 32;
      v28 = v4 - 32;
      v29 = v4;
      if (v4 >= 0x20)
      {
        v30 = v4 - 32;
        v29 = v4;
        do
        {
          v31 = *(_OWORD *)v30;
          *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
          *(_OWORD *)v29 = v31;
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v30 + 16) = 0;
          *(_QWORD *)v30 = 0;
          *(_BYTE *)(v29 + 24) = *(_BYTE *)(v30 + 24);
          v29 += 32;
          v30 += 32;
        }
        while (v30 < v4);
      }
      v21[1] = v29;
      if (v4 != v27)
      {
        v32 = 32 * ((uint64_t)(v4 - v27) >> 5);
        do
        {
          if (*(char *)(v28 + 23) < 0)
            operator delete(*(void **)v28);
          v33 = (__int128 *)(v5 + v32 - 32);
          v34 = *v33;
          *(_QWORD *)(v28 + 16) = *(_QWORD *)(v5 + v32 - 16);
          *(_OWORD *)v28 = v34;
          *(_BYTE *)(v5 + v32 - 9) = 0;
          *(_BYTE *)v33 = 0;
          *(_BYTE *)(v28 + 24) = *(_BYTE *)(v5 + v32 - 8);
          v28 -= 32;
          v32 -= 32;
        }
        while (v32);
      }
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      v41 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 16) = v58;
      *(_OWORD *)v5 = v41;
      HIBYTE(v58) = 0;
      LOBYTE(__p[0]) = 0;
      *(_BYTE *)(v3 + 32 * v25 + 24) = v59;
    }
    goto LABEL_93;
  }
  v35 = ((uint64_t)(v4 - v3) >> 5) + 1;
  if (v35 >> 59)
    sub_20E867F44();
  v36 = v26 - v3;
  if (v36 >> 4 > v35)
    v35 = v36 >> 4;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
    v37 = 0x7FFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  v64 = v21 + 2;
  if (!v37)
  {
    v38 = 0;
    v39 = 32 * v25;
    v60 = 0;
    v61 = 32 * v25;
    v40 = 0;
    v62 = 32 * v25;
    v63 = 0;
    if (!v25)
      goto LABEL_70;
LABEL_82:
    v43 = 0;
    goto LABEL_83;
  }
  if (v37 >> 59)
    sub_20E877A38();
  v38 = (char *)operator new(32 * v37);
  v39 = (uint64_t)&v38[32 * v25];
  v60 = v38;
  v61 = v39;
  v40 = &v38[32 * v37];
  v62 = v39;
  v63 = v40;
  if (v25 != v37)
    goto LABEL_82;
LABEL_70:
  if (v24 < 1)
  {
    if (v3 == v5)
      v45 = 1;
    else
      v45 = v24 >> 4;
    if (v45 >> 59)
      sub_20E877A38();
    v46 = (char *)operator new(32 * v45);
    v39 = (uint64_t)&v46[32 * (v45 >> 2)];
    v40 = &v46[32 * v45];
    if (v38)
    {
      operator delete(v38);
      v43 = v59;
      v3 = *v21;
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  v43 = 0;
  v44 = v25 + 2;
  if (v25 >= -1)
    v44 = v25 + 1;
  v39 -= 32 * (v44 >> 1);
LABEL_83:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  *(_QWORD *)(v39 + 16) = v58;
  __p[1] = 0;
  v58 = 0;
  __p[0] = 0;
  *(_BYTE *)(v39 + 24) = v43;
  v47 = v39 + 32;
  v48 = v39;
  if (v3 != v5)
  {
    v49 = v39;
    v50 = v5;
    do
    {
      v48 = v49 - 32;
      v51 = *(_OWORD *)(v50 - 32);
      *(_QWORD *)(v49 - 16) = *(_QWORD *)(v50 - 16);
      *(_OWORD *)(v49 - 32) = v51;
      *(_QWORD *)(v50 - 24) = 0;
      *(_QWORD *)(v50 - 16) = 0;
      *(_QWORD *)(v50 - 32) = 0;
      *(_BYTE *)(v49 - 8) = *(_BYTE *)(v50 - 8);
      v49 -= 32;
      v50 -= 32;
    }
    while (v50 != v3);
  }
  v52 = v21[1];
  if (v52 != v5)
  {
    do
    {
      v53 = *(_OWORD *)v5;
      *(_QWORD *)(v47 + 16) = *(_QWORD *)(v5 + 16);
      *(_OWORD *)v47 = v53;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      *(_BYTE *)(v47 + 24) = *(_BYTE *)(v5 + 24);
      v47 += 32;
      v5 += 32;
    }
    while (v5 != v52);
    v5 = v21[1];
  }
  v54 = *v21;
  *v21 = v48;
  v21[1] = v47;
  v21[2] = (uint64_t)v40;
  if (v5 != v54)
  {
    do
    {
      if (*(char *)(v5 - 9) < 0)
        operator delete(*(void **)(v5 - 32));
      v5 -= 32;
    }
    while (v5 != v54);
    v5 = v54;
    if (!v54)
      goto LABEL_92;
    goto LABEL_91;
  }
  if (v5)
LABEL_91:
    operator delete((void *)v5);
LABEL_92:
  v5 = v39;
LABEL_93:
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  return v5 + 24;
}

void sub_20FCCAB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20FCCBBFC((uint64_t)&a19);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FCCAB74(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;
  unint64_t v5;
  __int128 v6;
  char *v7;
  __int128 v8;
  __int128 __p;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20F3E74E0(a2, *(_QWORD *)(a1 + 24) - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  for (i = *(unsigned __int8 **)(a1 + 16); i; i = *(unsigned __int8 **)i)
  {
    sub_210232668(i + 16, (uint64_t)&v12);
    if (v13)
    {
      v8 = v12;
      LOBYTE(__p) = 0;
      v11 = 0;
      v5 = *(_QWORD *)(a2 + 8);
      if (v5 >= *(_QWORD *)(a2 + 16))
      {
        v7 = sub_20EE1D140((char **)a2, (uint64_t)&v8);
      }
      else
      {
        *(_OWORD *)v5 = v12;
        *(_BYTE *)(v5 + 16) = 0;
        *(_BYTE *)(v5 + 40) = 0;
        if (v11)
        {
          v6 = __p;
          *(_QWORD *)(v5 + 32) = v10;
          *(_OWORD *)(v5 + 16) = v6;
          v10 = 0;
          __p = 0uLL;
          *(_BYTE *)(v5 + 40) = 1;
        }
        v7 = (char *)(v5 + 48);
      }
      *(_QWORD *)(a2 + 8) = v7;
      if (v11)
      {
        if (SHIBYTE(v10) < 0)
          operator delete((void *)__p);
      }
    }
  }
}

void sub_20FCCACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCCACE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20FCCAD50(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_20FCCAF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  char *v30;
  _BYTE *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  float v42;
  _QWORD *v43;
  _QWORD *v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t prime;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  size_t v53;
  size_t v54;
  size_t v55;
  _QWORD *k;
  size_t v57;
  uint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  _QWORD v68[2];
  char v69;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_20E8D177C((uint64_t)v68, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (_QWORD *)(a1 + 16);
  v30 = (char *)operator new(0x160uLL);
  v68[0] = v30;
  v68[1] = a1 + 16;
  v69 = 0;
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = v12;
  v31 = v30 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(v31, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v31 = *(_OWORD *)a3;
    *((_QWORD *)v30 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v30 + 40) = *(_OWORD *)a4;
  *((_QWORD *)v30 + 7) = *(_QWORD *)(a4 + 16);
  v32 = *(_OWORD *)(a4 + 104);
  *((_OWORD *)v30 + 8) = *(_OWORD *)(a4 + 88);
  *((_OWORD *)v30 + 9) = v32;
  v33 = *(_OWORD *)(a4 + 136);
  *((_OWORD *)v30 + 10) = *(_OWORD *)(a4 + 120);
  *((_OWORD *)v30 + 11) = v33;
  v34 = *(_OWORD *)(a4 + 40);
  *((_OWORD *)v30 + 4) = *(_OWORD *)(a4 + 24);
  *((_OWORD *)v30 + 5) = v34;
  v35 = *(_OWORD *)(a4 + 72);
  *((_OWORD *)v30 + 6) = *(_OWORD *)(a4 + 56);
  *((_OWORD *)v30 + 7) = v35;
  v36 = *(_OWORD *)(a4 + 232);
  *((_OWORD *)v30 + 16) = *(_OWORD *)(a4 + 216);
  *((_OWORD *)v30 + 17) = v36;
  v37 = *(_OWORD *)(a4 + 264);
  *((_OWORD *)v30 + 18) = *(_OWORD *)(a4 + 248);
  *((_OWORD *)v30 + 19) = v37;
  v38 = *(_OWORD *)(a4 + 168);
  *((_OWORD *)v30 + 12) = *(_OWORD *)(a4 + 152);
  *((_OWORD *)v30 + 13) = v38;
  v39 = *(_OWORD *)(a4 + 200);
  *((_OWORD *)v30 + 14) = *(_OWORD *)(a4 + 184);
  *((_OWORD *)v30 + 15) = v39;
  v40 = *(_OWORD *)(a4 + 280);
  *(_OWORD *)(v30 + 329) = *(_OWORD *)(a4 + 289);
  *((_OWORD *)v30 + 20) = v40;
  v69 = 1;
  v41 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v42 = *(float *)(a1 + 32);
  if (!v13 || (float)(v42 * (float)v13) < v41)
  {
    v45 = v13 < 3 || (v13 & (v13 - 1)) != 0;
    v46 = v45 | (2 * v13);
    v47 = vcvtps_u32_f32(v41 / v42);
    if (v46 <= v47)
      prime = v47;
    else
      prime = v46;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if (prime > v13)
    {
LABEL_69:
      if (prime >> 61)
        sub_20E877A38();
      v49 = operator new(8 * prime);
      v50 = *(void **)a1;
      *(_QWORD *)a1 = v49;
      if (v50)
        operator delete(v50);
      v51 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v51++) = 0;
      while (prime != v51);
      v52 = (_QWORD *)*v29;
      if (!*v29)
        goto LABEL_101;
      v53 = v52[1];
      v54 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v55 = v53 & v54;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = v29;
        for (k = (_QWORD *)*v52; *v52; k = (_QWORD *)*v52)
        {
          v57 = k[1] & v54;
          if (v57 == v55)
          {
            v52 = k;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v57))
          {
            *v52 = *k;
            v58 = 8 * v57;
            *k = **(_QWORD **)(*(_QWORD *)a1 + v58);
            **(_QWORD **)(*(_QWORD *)a1 + v58) = k;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v57) = v52;
            v52 = k;
            v55 = v57;
          }
        }
        goto LABEL_101;
      }
      if (v53 >= prime)
        v53 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v29;
      v62 = (_QWORD *)*v52;
      if (!*v52)
      {
LABEL_101:
        v13 = prime;
        v65 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_102;
        goto LABEL_117;
      }
      while (1)
      {
        v64 = v62[1];
        if (v64 >= prime)
          v64 %= prime;
        if (v64 == v53)
          goto LABEL_95;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v64))
        {
          *v52 = *v62;
          v63 = 8 * v64;
          *v62 = **(_QWORD **)(*(_QWORD *)a1 + v63);
          **(_QWORD **)(*(_QWORD *)a1 + v63) = v62;
          v62 = v52;
LABEL_95:
          v52 = v62;
          v62 = (_QWORD *)*v62;
          if (!v62)
            goto LABEL_101;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v64) = v52;
          v52 = v62;
          v62 = (_QWORD *)*v62;
          v53 = v64;
          if (!v62)
            goto LABEL_101;
        }
      }
    }
    if (prime < v13)
    {
      v59 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
      {
        v59 = std::__next_prime(v59);
      }
      else
      {
        v61 = 1 << -(char)__clz(v59 - 1);
        if (v59 >= 2)
          v59 = v61;
      }
      if (prime <= v59)
        prime = v59;
      if (prime < v13)
      {
        if (!prime)
        {
          v66 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v66)
            operator delete(v66);
          v13 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v65 = -1;
          goto LABEL_117;
        }
        goto LABEL_69;
      }
      v13 = *(_QWORD *)(a1 + 8);
    }
    v65 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
LABEL_102:
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v44 = (_QWORD *)v68[0];
        if (v43)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v44 = (_QWORD *)v68[0];
        if (v43)
          goto LABEL_57;
      }
LABEL_118:
      *v44 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v68[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v29;
      if (*(_QWORD *)v68[0])
      {
        v67 = *(_QWORD *)(*(_QWORD *)v68[0] + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v67 >= v13)
            v67 %= v13;
        }
        else
        {
          v67 &= v13 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v67) = v68[0];
      }
      goto LABEL_124;
    }
LABEL_117:
    v4 = v65 & v12;
    v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v65 & v12));
    v44 = (_QWORD *)v68[0];
    if (v43)
      goto LABEL_57;
    goto LABEL_118;
  }
  v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v44 = (_QWORD *)v68[0];
  if (!v43)
    goto LABEL_118;
LABEL_57:
  *v44 = *v43;
  *v43 = v68[0];
LABEL_124:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FCCB5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FCCB5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FCCB614(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FCCB9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCCB9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCCB9DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FCCBA00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = a2 + 40;
  v5 = *(_QWORD *)(a1 + 8);
  if (a2 + 40 != v5)
  {
    do
    {
      *(_QWORD *)v2 = *(_QWORD *)v4;
      *(_DWORD *)(v2 + 8) = *(_DWORD *)(v4 + 8);
      v7 = *(_QWORD *)(v2 + 16);
      if (v7)
      {
        v8 = (_QWORD *)(v2 + 24);
        v9 = *(_QWORD *)(v2 + 24);
        v6 = *(void **)(v2 + 16);
        if (v9 != v7)
        {
          do
          {
            if (*(char *)(v9 - 9) < 0)
              operator delete(*(void **)(v9 - 32));
            v9 -= 32;
          }
          while (v9 != v7);
          v6 = *(void **)(v2 + 16);
        }
        *v8 = v7;
        operator delete(v6);
        *v8 = 0;
        *(_QWORD *)(v2 + 32) = 0;
      }
      *(_OWORD *)(v2 + 16) = *(_OWORD *)(v4 + 16);
      *(_QWORD *)(v2 + 32) = *(_QWORD *)(v4 + 32);
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      v4 += 40;
      v2 += 40;
    }
    while (v4 != v5);
    v4 = *(_QWORD *)(a1 + 8);
  }
  while (v4 != v2)
  {
    v11 = *(_QWORD *)(v4 - 24);
    if (v11)
    {
      v12 = *(_QWORD *)(v4 - 16);
      v10 = *(void **)(v4 - 24);
      if (v12 != v11)
      {
        do
        {
          if (*(char *)(v12 - 9) < 0)
            operator delete(*(void **)(v12 - 32));
          v12 -= 32;
        }
        while (v12 != v11);
        v10 = *(void **)(v4 - 24);
      }
      *(_QWORD *)(v4 - 16) = v11;
      operator delete(v10);
    }
    v4 -= 40;
  }
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_20FCCBB34(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 40;
        *(_QWORD *)(a1 + 16) = i - 40;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 40;
        if (v4 == v2)
          goto LABEL_12;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_12;
    }
    do
    {
      if (*(char *)(v6 - 9) < 0)
        operator delete(*(void **)(v6 - 32));
      v6 -= 32;
    }
    while (v6 != v5);
    v8 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v8);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FCCBBFC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FCCBC60(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v5;
  std::string __p;
  std::string v7;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v7, "origin_");
  std::to_string(&__p, *a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = std::string::append(&v7, (const std::string::value_type *)p_p, size);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
}

void sub_20FCCBD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20FCCBD74(unint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v5;
  std::string __p;
  std::string v7;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v7, "sem_");
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = std::string::append(&v7, (const std::string::value_type *)p_p, size);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
}

void sub_20FCCBE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FCCBE78(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  _DWORD __s2[5];
  char v9;

  v1 = 0;
  v9 = 4;
  strcpy((char *)__s2, "sem_");
  v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v3 >= 4)
  {
    if ((v2 & 0x80) != 0)
    {
      if (a1[1] >= 4uLL)
        v4 = 4;
      else
        v4 = a1[1];
      a1 = (_QWORD *)*a1;
    }
    else if (v2 >= 4)
    {
      v4 = 4;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 23);
    }
    v5 = memcmp(a1, __s2, v4);
    return v4 == 4 && v5 == 0;
  }
  return v1;
}

unint64_t sub_20FCCBF10(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  std::string __dst;

  v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 > 6)
    {
      v3 = v2 - 7;
      if ((unint64_t)(v2 - 7) < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_4;
LABEL_15:
      sub_20E860B7C();
    }
LABEL_17:
    sub_20E89FD0C();
  }
  v9 = a1[1];
  if (v9 < 7)
    goto LABEL_17;
  v1 = (uint64_t *)*a1;
  v3 = v9 - 7;
  if (v9 - 7 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_15;
LABEL_4:
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_10:
    memmove(p_dst, (char *)v1 + 7, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  result = std::stoull(&__dst, 0, 10);
  v8 = result;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v8;
  }
  return result;
}

void sub_20FCCC02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20FCCC048(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  std::string __dst;

  v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 > 3)
    {
      v3 = v2 - 4;
      if ((unint64_t)(v2 - 4) < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_4;
LABEL_15:
      sub_20E860B7C();
    }
LABEL_17:
    sub_20E89FD0C();
  }
  v9 = a1[1];
  if (v9 < 4)
    goto LABEL_17;
  v1 = (uint64_t *)*a1;
  v3 = v9 - 4;
  if (v9 - 4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_15;
LABEL_4:
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_10:
    memmove(p_dst, (char *)v1 + 4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  result = std::stoull(&__dst, 0, 10);
  v8 = result;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v8;
  }
  return result;
}

void sub_20FCCC164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FCCC180(_QWORD *a1@<X0>, unint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  float64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  float64x2_t v16;
  int8x16_t v18;
  int64x2_t v19;
  float64x2_t v22;
  uint64_t v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  __int128 v78[8];
  std::string v79;

  v8 = sub_20EB07858(a1, (uint64_t)a3);
  if (!v8)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 368) = 0;
    return;
  }
  v9 = v8;
  sub_20FCCBC60(a2, &v79);
  v10 = sub_20EB07858(a1, (uint64_t)&v79);
  if (!v10)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 368) = 0;
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v79.__r_.__value_.__l.__data_);
    return;
  }
  *(_QWORD *)&v11.f64[0] = v10[26];
  v12 = *((int64x2_t *)v10 + 12);
  v13 = *((int64x2_t *)v10 + 14);
  _D7 = v10[34];
  _Q4 = *((int64x2_t *)v10 + 16);
  v16 = (float64x2_t)vzip1q_s64(v12, v13);
  *(_QWORD *)&v11.f64[1] = v10[30];
  _Q1 = (float64x2_t)vzip2q_s64(v12, v13);
  v18 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  v19 = vzip1q_s64(_Q4, (int64x2_t)_Q1);
  _D5 = *((double *)v10 + 38);
  _Q6 = *((float64x2_t *)v10 + 18);
  v22 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v16, vnegq_f64(_Q6).f64[0]), _Q1, _Q6, 1), v11, _D5, 0);
  _Q4.i64[0] = v10[33];
  __asm
  {
    FMLS            D1, D4, V6.D[1]
    FMLS            D1, D7, V5.D[0]
  }
  *(_QWORD *)&_Q6.f64[0] = vdupq_laneq_s64(v19, 1).u64[0];
  *(_QWORD *)&_Q6.f64[1] = v18.i64[0];
  _Q4.i64[0] = _D7;
  v27 = v18.i64[1];
  v28 = v19.i64[0];
  _Q1.f64[1] = 1.0;
  v30 = *((float64x2_t *)v9 + 12);
  v29 = *((float64x2_t *)v9 + 13);
  v32 = *((float64x2_t *)v9 + 14);
  v31 = *((float64x2_t *)v9 + 15);
  v34 = *((float64x2_t *)v9 + 16);
  v33 = *((float64x2_t *)v9 + 17);
  v36 = *((float64x2_t *)v9 + 18);
  v35 = *((float64x2_t *)v9 + 19);
  v78[0] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v30.f64[0]), _Q6, v30, 1), v11, v29.f64[0]), v22, v29, 1);
  v78[1] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v28, v30.f64[0]), (float64x2_t)(unint64_t)v27, v30, 1), (float64x2_t)_Q4.u64[0], v29.f64[0]), _Q1, v29, 1);
  v78[2] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v32.f64[0]), _Q6, v32, 1), v11, v31.f64[0]), v22, v31, 1);
  v78[3] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v28, v32.f64[0]), (float64x2_t)(unint64_t)v27, v32, 1), (float64x2_t)_Q4.u64[0], v31.f64[0]), _Q1, v31, 1);
  v78[4] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v34.f64[0]), _Q6, v34, 1), v11, v33.f64[0]), v22, v33, 1);
  v78[5] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v28, v34.f64[0]), (float64x2_t)(unint64_t)v27, v34, 1), (float64x2_t)_Q4.u64[0], v33.f64[0]), _Q1, v33, 1);
  v78[6] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v36.f64[0]), _Q6, v36, 1), v11, v35.f64[0]), v22, v35, 1);
  v78[7] = (__int128)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v28, v36.f64[0]), (float64x2_t)(unint64_t)v27, v36, 1), (float64x2_t)_Q4.u64[0], v35.f64[0]), _Q1, v35, 1);
  sub_20EE67070((uint64_t)&v52, a3, a2, (__int128 *)(v9 + 5), v78);
  *(_OWORD *)a4 = v52;
  *(_QWORD *)(a4 + 16) = v53;
  *(_OWORD *)(a4 + 24) = v54;
  v54 = 0uLL;
  v37 = v55;
  v38 = v56;
  v55 = 0;
  *(_QWORD *)(a4 + 40) = v37;
  *(_QWORD *)(a4 + 48) = v38;
  v39 = v57;
  v40 = v58;
  v41 = v59;
  *(_OWORD *)(a4 + 104) = v60;
  *(_OWORD *)(a4 + 88) = v41;
  *(_OWORD *)(a4 + 72) = v40;
  *(_OWORD *)(a4 + 56) = v39;
  v42 = v61;
  v43 = v62;
  v44 = v63;
  *(_OWORD *)(a4 + 168) = v64;
  *(_OWORD *)(a4 + 152) = v44;
  *(_OWORD *)(a4 + 136) = v43;
  *(_OWORD *)(a4 + 120) = v42;
  v45 = v65;
  v46 = v66;
  v47 = v67;
  *(_OWORD *)(a4 + 232) = v68;
  *(_OWORD *)(a4 + 216) = v47;
  *(_OWORD *)(a4 + 200) = v46;
  *(_OWORD *)(a4 + 184) = v45;
  v48 = v70;
  v49 = v72;
  v50 = v69;
  *(_OWORD *)(a4 + 280) = v71;
  *(_OWORD *)(a4 + 296) = v49;
  *(_OWORD *)(a4 + 264) = v48;
  *(_OWORD *)(a4 + 248) = v50;
  v51 = v73;
  *(_QWORD *)(a4 + 328) = v74;
  *(_OWORD *)(a4 + 312) = v51;
  *(_BYTE *)(a4 + 336) = 0;
  *(_BYTE *)(a4 + 360) = 0;
  if (v77)
  {
    *(_OWORD *)(a4 + 336) = v75;
    *(_QWORD *)(a4 + 352) = v76;
    *(_BYTE *)(a4 + 360) = 1;
  }
  *(_BYTE *)(a4 + 368) = 1;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
}

void sub_20FCCC484(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

void sub_20FCCC4A4(_QWORD *a1@<X0>, float64x2_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, float64x2_t _Q3@<Q3>)
{
  float64x2_t v8;
  float64x2_t v13;
  int v14;
  uint64_t *v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  double v27;
  float64x2_t v28;
  float64x2_t *v29;
  double v30;
  float64x2_t v32;
  float64x2_t *v37;
  _OWORD *v39;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  char v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t *v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float64x2_t v81;
  double v83;
  float64x2_t v84;
  float64x2_t *v85;
  double v86;
  float64x2_t v88;
  float64x2_t *v89;
  _OWORD *v91;
  char v92;
  char v93;
  float64x2_t v94;
  float64_t v95;
  float64x2_t v96;
  char *v97;
  char *v98;
  _OWORD v99[2];
  _BYTE v100[23];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v8.f64[0] = a2[7].f64[0];
  v13 = a2[6];
  *(_BYTE *)a7 = 0;
  *(_BYTE *)(a7 + 24) = 0;
  v14 = *a3 & 0xF;
  if (v14 == 1)
  {
    if (a6)
    {
      if ((*a3 & 0xF000) == 0x1000)
        goto LABEL_27;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorUtil.cpp", 178, (uint64_t)"opt_submap_session_id", 21, (uint64_t)"Submap session ID must exist!", 29, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_124;
      }
      if ((*a3 & 0xF000) == 0x1000)
        goto LABEL_27;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorUtil.cpp", 181, (uint64_t)"strategy.session_criteria() == AnchorStrategy::SessionCriteria::kGivenSession", 77, (uint64_t)"Only support given session!", 27, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_124;
    }
LABEL_27:
    v41 = (_QWORD *)a1[6];
    if (v41 != a1 + 7)
    {
      v42 = 0;
      v43 = *a4;
      v44 = a4[1];
      v45 = (_QWORD *)a1[6];
      do
      {
        v46 = (_QWORD *)v45[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (_QWORD *)v45[2];
            _ZF = *v47 == (_QWORD)v45;
            v45 = v47;
          }
          while (!_ZF);
        }
        ++v42;
        v45 = v47;
      }
      while (v47 != a1 + 7);
      v48 = (_QWORD *)a1[6];
      do
      {
        v49 = v42 >> 1;
        v50 = v48;
        if (v42 != 1)
        {
          v52 = v42 >> 1;
          v53 = v48;
          do
          {
            v55 = (_QWORD *)v53[1];
            if (v55)
            {
              do
              {
                v50 = v55;
                v55 = (_QWORD *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                v50 = (_QWORD *)v53[2];
                _ZF = *v50 == (_QWORD)v53;
                v53 = v50;
              }
              while (!_ZF);
            }
            v53 = v50;
            v54 = v52-- <= 1;
          }
          while (!v54);
        }
        if (v50[4] <= a5)
        {
          v51 = (_QWORD *)v50[1];
          if (v51)
          {
            do
            {
              v48 = v51;
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v50[2];
              _ZF = *v48 == (_QWORD)v50;
              v50 = v48;
            }
            while (!_ZF);
          }
          v49 = v42 + ~v49;
        }
        v42 = v49;
      }
      while (v49);
      if (v41 != v48)
      {
        v56 = 1;
        do
        {
          v57 = v56;
          v58 = (_QWORD *)v41[1];
          if (v58)
          {
            do
            {
              v59 = v58;
              v58 = (_QWORD *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v59 = (_QWORD *)v41[2];
              _ZF = *v59 == (_QWORD)v41;
              v41 = v59;
            }
            while (!_ZF);
          }
          v56 = v57 + 1;
          v41 = v59;
        }
        while (v59 != v48);
        v60 = 0;
        v100[0] = 0;
        while (v60 != v57)
        {
          v62 = -(uint64_t)(int)++v60;
          if (v60 << 32 >= 0x100000000)
          {
            v66 = v48;
            do
            {
              v67 = (_QWORD *)*v66;
              if (*v66)
              {
                do
                {
                  v63 = v67;
                  v67 = (_QWORD *)v67[1];
                }
                while (v67);
              }
              else
              {
                do
                {
                  v63 = (_QWORD *)v66[2];
                  _ZF = *v63 == (_QWORD)v66;
                  v66 = v63;
                }
                while (_ZF);
              }
              v66 = v63;
            }
            while (!__CFADD__(v62++, 1));
          }
          else
          {
            v63 = v48;
            if (v60 << 32)
            {
              v64 = v48;
              do
              {
                v65 = (_QWORD *)v64[1];
                if (v65)
                {
                  do
                  {
                    v63 = v65;
                    v65 = (_QWORD *)*v65;
                  }
                  while (v65);
                }
                else
                {
                  do
                  {
                    v63 = (_QWORD *)v64[2];
                    _ZF = *v63 == (_QWORD)v64;
                    v64 = v63;
                  }
                  while (!_ZF);
                }
                v64 = v63;
                v54 = v62-- <= 1;
              }
              while (!v54);
            }
          }
          if (v63[4] != a5)
            break;
          if (v43 == v44)
          {
            v61 = v43;
          }
          else
          {
            v61 = v43;
            while (*(_QWORD *)v61 != a5 || *(_DWORD *)(v61 + 8) != *((_DWORD *)v63 + 10))
            {
              v61 += 16;
              if (v61 == v44)
              {
                v61 = v44;
                break;
              }
            }
          }
          if (v61 == v44)
          {
            *(_OWORD *)v100 = *((_OWORD *)v63 + 2);
            v100[16] = 1;
            sub_20F23A0A0(a1, (__int128 *)v100, &v97);
            if (v97 == v98)
            {
              v93 = 0;
              v92 = 0;
              v68 = 0;
              v69 = 0;
              if (!v97)
                goto LABEL_94;
            }
            else
            {
              v92 = *v97;
              v99[0] = *(_OWORD *)(v97 + 1);
              *(_QWORD *)((char *)v99 + 15) = *((_QWORD *)v97 + 2);
              v93 = 1;
            }
            v98 = v97;
            operator delete(v97);
            v68 = v93;
            v69 = v92;
            goto LABEL_94;
          }
        }
      }
    }
    v68 = 0;
    v69 = 0;
LABEL_94:
    *(_BYTE *)a7 = v69;
    *(_OWORD *)(a7 + 1) = v99[0];
    v70 = *(_QWORD *)((char *)v99 + 15);
    goto LABEL_120;
  }
  if (v14)
    return;
  _Q1 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  if ((unsigned __int16)*a3 >> 12 == 1)
  {
    if (a6
      || (v95 = v13.f64[0],
          v96 = v8,
          v94 = _Q1,
          v71 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorUtil.cpp", 168, (uint64_t)"opt_submap_session_id", 21, (uint64_t)"Submap session ID must exist!", 29, (void (*)(void **))sub_21023DDB0), _Q1 = v94, v13.f64[0] = v95, v8 = v96, !v71))
    {
      v72 = (uint64_t *)a1[225];
      if (v72)
      {
        v73 = 0;
        v68 = 0;
        v74 = 0;
        v75 = *a4;
        v76 = a4[1];
        v77 = 1.79769313e308;
        v13.f64[1] = _Q1.f64[0];
        while (1)
        {
          v78 = v72[2];
          if (v78 != a5)
            goto LABEL_100;
          if (v75 != v76)
          {
            v79 = v75;
            while (*(_QWORD *)v79 != a5 || *(_DWORD *)(v79 + 8) != *((_DWORD *)v72 + 6))
            {
              v79 += 16;
              if (v79 == v76)
                goto LABEL_108;
            }
            if (v79 != v76)
              goto LABEL_100;
          }
LABEL_108:
          v80 = v72[5];
          v81 = *(float64x2_t *)v80;
          _Q3.f64[0] = *(float64_t *)(v80 + 40);
          _Q4 = *(float64x2_t *)(v80 + 24);
          v83 = *(double *)(v80 + 64);
          v84 = *(float64x2_t *)(v80 + 48);
          v85 = (float64x2_t *)v72[11];
          v86 = v85[1].f64[0];
          _Q16 = *v85;
          v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v85->f64[0]), _Q4, *v85, 1), v84, v86);
          __asm { FMLA            D1, D3, V16.D[1] }
          _Q1.f64[0] = _Q1.f64[0] + v83 * v86;
          v89 = (float64x2_t *)v72[7];
          _Q3.f64[0] = v89[1].f64[0];
          _Q1 = vsubq_f64(v8, vaddq_f64(_Q1, _Q3));
          _Q2 = vsubq_f64(v13, vaddq_f64(v88, *v89));
          _Q3 = vmulq_f64(_Q2, _Q2);
          _Q4.f64[0] = _Q2.f64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          _Q1.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], _Q1.f64[0], _Q1.f64[0]));
          if (_Q1.f64[0] >= v77)
          {
LABEL_100:
            LOBYTE(v78) = v73;
            v72 = (uint64_t *)*v72;
            if (!v72)
              goto LABEL_119;
          }
          else
          {
            v91 = (_OWORD *)((char *)v72 + 17);
            if (v74)
            {
              *(_OWORD *)v100 = *v91;
              *(_DWORD *)&v100[15] = *((_DWORD *)v72 + 8);
              v74 = 1;
              v72 = (uint64_t *)*v72;
              v73 = v78;
              v77 = _Q1.f64[0];
              if (!v72)
                goto LABEL_119;
            }
            else
            {
              *(_OWORD *)v100 = *v91;
              *(_QWORD *)&v100[15] = v72[4];
              v68 = 1;
              v74 = 1;
              v72 = (uint64_t *)*v72;
              v73 = v78;
              v77 = _Q1.f64[0];
              if (!v72)
                goto LABEL_119;
            }
          }
        }
      }
      LOBYTE(v78) = 0;
      v68 = 0;
LABEL_119:
      *(_BYTE *)a7 = v78;
      *(_OWORD *)(a7 + 1) = *(_OWORD *)v100;
      v70 = *(_QWORD *)&v100[15];
LABEL_120:
      *(_QWORD *)(a7 + 16) = v70;
      *(_BYTE *)(a7 + 24) = v68;
      return;
    }
LABEL_124:
    abort();
  }
  if (!((unsigned __int16)*a3 >> 12))
  {
    v16 = (uint64_t *)a1[225];
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = *a4;
      v21 = a4[1];
      v22 = 1.79769313e308;
      v13.f64[1] = _Q1.f64[0];
      while (1)
      {
        if (v20 != v21)
        {
          v23 = v20;
          while (*(_QWORD *)v23 != v16[2] || *(_DWORD *)(v23 + 8) != *((_DWORD *)v16 + 6))
          {
            v23 += 16;
            if (v23 == v21)
              goto LABEL_15;
          }
          if (v23 != v21)
            goto LABEL_8;
        }
LABEL_15:
        v24 = v16[5];
        v25 = *(float64x2_t *)v24;
        _Q3.f64[0] = *(float64_t *)(v24 + 40);
        _Q4 = *(float64x2_t *)(v24 + 24);
        v27 = *(double *)(v24 + 64);
        v28 = *(float64x2_t *)(v24 + 48);
        v29 = (float64x2_t *)v16[11];
        v30 = v29[1].f64[0];
        _Q16 = *v29;
        v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, v29->f64[0]), _Q4, *v29, 1), v28, v30);
        __asm { FMLA            D1, D3, V16.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v27 * v30;
        v37 = (float64x2_t *)v16[7];
        _Q3.f64[0] = v37[1].f64[0];
        _Q1 = vsubq_f64(v8, vaddq_f64(_Q1, _Q3));
        _Q2 = vsubq_f64(v13, vaddq_f64(v32, *v37));
        _Q3 = vmulq_f64(_Q2, _Q2);
        _Q4.f64[0] = _Q2.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q1.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], _Q1.f64[0], _Q1.f64[0]));
        if (_Q1.f64[0] >= v22)
        {
LABEL_8:
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_117;
        }
        else
        {
          v17 = *((_BYTE *)v16 + 16);
          v39 = (_OWORD *)((char *)v16 + 17);
          if (v19)
          {
            *(_OWORD *)v100 = *v39;
            *(_DWORD *)&v100[15] = *((_DWORD *)v16 + 8);
            v19 = 1;
            v16 = (uint64_t *)*v16;
            v22 = _Q1.f64[0];
            if (!v16)
              goto LABEL_117;
          }
          else
          {
            *(_OWORD *)v100 = *v39;
            *(_QWORD *)&v100[15] = v16[4];
            v18 = 1;
            v19 = 1;
            v16 = (uint64_t *)*v16;
            v22 = _Q1.f64[0];
            if (!v16)
              goto LABEL_117;
          }
        }
      }
    }
    v17 = 0;
    v18 = 0;
LABEL_117:
    *(_BYTE *)a7 = v17;
    *(_OWORD *)(a7 + 1) = *(_OWORD *)v100;
    *(_QWORD *)(a7 + 16) = *(_QWORD *)&v100[15];
    *(_BYTE *)(a7 + 24) = v18;
  }
}

uint64_t sub_20FCCCC58(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  int v10;
  size_t v12;
  int v13;
  size_t v14;
  int v15;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  _DWORD __s2[5];
  char v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_210232668((unsigned __int8 *)a2, (uint64_t)&v23);
  if (v24)
  {
    v4 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)a1 = v23;
    if (v4)
      *(_DWORD *)(a1 + 16) = 0;
    v5 = 1;
    goto LABEL_47;
  }
  v22 = 4;
  strcpy((char *)__s2, "sem_");
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v8 <= 3)
    goto LABEL_44;
  if ((v6 & 0x80) == 0)
  {
    if (v6 >= 4)
      v9 = 4;
    else
      v9 = *(unsigned __int8 *)(a2 + 23);
    v10 = memcmp((const void *)a2, __s2, v9);
    if (v9 != 4 || v10 != 0)
      goto LABEL_17;
LABEL_33:
    v17 = sub_20FCCC048((uint64_t *)a2);
    if (*(_DWORD *)(a1 + 16) != 1)
      *(_DWORD *)(a1 + 16) = 1;
    *(_QWORD *)a1 = v17;
    v5 = 3;
    goto LABEL_47;
  }
  if (v7 >= 4)
    v14 = 4;
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = memcmp(*(const void **)a2, __s2, v14);
  if (v14 == 4 && v15 == 0)
    goto LABEL_33;
LABEL_17:
  v22 = 7;
  strcpy((char *)__s2, "origin_");
  if (v8 < 7)
    goto LABEL_44;
  if ((v6 & 0x80) != 0)
  {
    if (v7 >= 7)
      v18 = 7;
    else
      v18 = v7;
    v13 = memcmp(*(const void **)a2, __s2, v18);
    if (v18 != 7)
      goto LABEL_44;
  }
  else
  {
    if (v6 >= 7)
      v12 = 7;
    else
      v12 = v6;
    v13 = memcmp((const void *)a2, __s2, v12);
    if (v12 != 7)
      goto LABEL_44;
  }
  if (v13)
  {
LABEL_44:
    if (*(_DWORD *)(a1 + 16) != 1)
      *(_DWORD *)(a1 + 16) = 1;
    v5 = 0;
    *(_QWORD *)a1 = -1;
    goto LABEL_47;
  }
  v19 = sub_20FCCBF10((uint64_t *)a2);
  if (*(_DWORD *)(a1 + 16) != 1)
    *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = v19;
  v5 = 2;
LABEL_47:
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

std::string *sub_20FCCCE84@<X0>(std::string *result@<X0>, uint64_t a2@<X8>)
{
  std::string *v2;
  int v4;
  const std::string::value_type *v5;
  size_t v6;
  const char *v7;
  const char *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;

  v2 = result;
  v4 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = "IMUCameraDiscrepancyWithStationaryVision";
  v6 = 40;
  switch((char)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "ForceReinit");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "OnFailureReinit");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 18;
      *(_WORD *)(a2 + 16) = 29806;
      v7 = "MovingPlatformHint";
      goto LABEL_6;
    case 3:
      goto LABEL_21;
    case 4:
      *(_BYTE *)(a2 + 23) = 18;
      *(_WORD *)(a2 + 16) = 25964;
      v7 = "ResetMappingModule";
LABEL_6:
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_BYTE *)(a2 + 18) = 0;
      break;
    case 5:
      *(_BYTE *)(a2 + 23) = 19;
      strcpy((char *)a2, "PoseOutOfBoundaries");
      break;
    case 6:
      v8 = "WindowInvalid";
      goto LABEL_14;
    case 7:
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "LowTextureHeuristics");
      break;
    case 8:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "LowHealth");
      break;
    case 9:
      v5 = "SimulatedMovingPlatformHint";
      v6 = 27;
      goto LABEL_21;
    case 10:
      v5 = "IMUCameraDiscrepancyWithStationaryIMU";
      v6 = 37;
      goto LABEL_21;
    case 11:
      v8 = "ShortDataDrop";
LABEL_14:
      *(_BYTE *)(a2 + 23) = 13;
      *(_QWORD *)a2 = *(_QWORD *)v8;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v8 + 5);
      *(_BYTE *)(a2 + 13) = 0;
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "LongDataDrop");
      break;
    case 13:
      v5 = "VisualSLAMFrameToFramePnPFailure";
      v6 = 32;
      goto LABEL_21;
    case 14:
      v5 = "VisualSLAMMovingObjectDrift";
      v6 = 27;
      goto LABEL_21;
    case 15:
      v5 = "LargeCameraExtrinsicOffsetWrtDefault";
      v6 = 36;
      goto LABEL_21;
    case 16:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "SmudgeDetected");
      break;
    case 17:
      v5 = "IMUCameraDiscrepancyWithStationaryIMUOccludedCamera";
      v6 = 51;
LABEL_21:
      result = sub_20E8B43E8((std::string *)a2, v5, v6);
      break;
    default:
      break;
  }
  if (((unsigned __int16)v2 & 0x100) != 0)
    result = std::string::append((std::string *)a2, "+LowFeatureCoverage", 0x13uLL);
  if ((v2 & 0x10000) != 0)
    result = std::string::append((std::string *)a2, "+FastMotion", 0xBuLL);
  if ((v2 & 0x1000000) != 0)
    result = std::string::append((std::string *)a2, "+FastRotation", 0xDuLL);
  if (v4 == 2)
  {
    if (((unint64_t)v2 & 0x10000000000) != 0)
      v9 = "+MPC-based";
    else
      v9 = "+SLAM-based";
    if (((unint64_t)v2 & 0x10000000000) != 0)
      v10 = 10;
    else
      v10 = 11;
    return std::string::append((std::string *)a2, v9, v10);
  }
  return result;
}

void sub_20FCCD164(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FCCD180(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t k;

  *(_OWORD *)a1 = xmmword_2103BCA00;
  v2 = (_QWORD *)(a1 + 232);
  sub_20E86872C(a1 + 224, *(_QWORD **)(a1 + 232));
  *(_QWORD *)(a1 + 224) = v2;
  *(_QWORD *)(a1 + 240) = 0;
  *v2 = 0;
  if (*(_QWORD *)(a1 + 272))
  {
    v3 = *(_QWORD **)(a1 + 264);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    *(_QWORD *)(a1 + 264) = 0;
    v5 = *(_QWORD *)(a1 + 256);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 272) = 0;
  }
  if (*(_QWORD *)(a1 + 312))
  {
    v7 = *(_QWORD **)(a1 + 304);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 304) = 0;
    v9 = *(_QWORD *)(a1 + 296);
    if (v9)
    {
      for (j = 0; j != v9; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 312) = 0;
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v11 = *(_QWORD **)(a1 + 344);
    if (v11)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    *(_QWORD *)(a1 + 344) = 0;
    v13 = *(_QWORD *)(a1 + 336);
    if (v13)
    {
      for (k = 0; k != v13; ++k)
        *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * k) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
}

BOOL sub_20FCCD298(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 v20;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 v30;
  __int128 v31;

  if (!a5)
    return 0;
  _Q1 = *a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (fabs(sqrt(_D2 + *((double *)a2 + 2) * *((double *)a2 + 2)) + -1.0) > 0.000001)
    goto LABEL_15;
  _Q2 = *a3;
  _D4 = *((_QWORD *)a3 + 1);
  __asm { FMLA            D3, D4, V2.D[1] }
  if (fabs(sqrt(_D3 + *((double *)a3 + 2) * *((double *)a3 + 2)) + -1.0) > 0.000001)
  {
LABEL_15:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIOAnchoredLine3D.hpp", 45, (uint64_t)"std::fabs(vio::math::L2Norm3(src_anchor_direction.data()) - 1) <= 1e-6 && std::fabs(vio::math::L2Norm3(end_anchor_direction.data()) - 1) <= 1e-6", 144, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_12;
    }
  }
  v20 = *a4;
  *(_DWORD *)(a1 + 912) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 896) = v20;
  *(_QWORD *)(a1 + 920) = a5;
  _Q1 = *a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (fabs(sqrt(_D2 + *((double *)a2 + 2) * *((double *)a2 + 2)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_12;
  }
  v24 = *a4;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 96) = a5;
  v25 = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = 0xFFEFFFFFFFFFFFFFLL;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  _Q1 = *a3;
  _D3 = *((_QWORD *)a3 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (fabs(sqrt(_D2 + *((double *)a3 + 2) * *((double *)a3 + 2)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
LABEL_12:
    abort();
  }
  v30 = *a4;
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 480) = v30;
  *(_QWORD *)(a1 + 544) = a5;
  v31 = *a3;
  *(_QWORD *)(a1 + 528) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 512) = v31;
  *(_QWORD *)(a1 + 536) = 0xFFEFFFFFFFFFFFFFLL;
  return (v26 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 448) + 16))(a1 + 448)) == 1
      && *(_QWORD *)(a1 + 920) != 0;
}

void **sub_20FCCD4FC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while ((*(v3 - 1) & 0x80000000) == 0)
    {
      v5 = (void *)*((_QWORD *)v3 - 6);
      if (v5)
        goto LABEL_7;
LABEL_8:
      if (*(v3 - 49) < 0)
        operator delete(*((void **)v3 - 9));
      v3 -= 184;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
    operator delete(*((void **)v3 - 3));
    v5 = (void *)*((_QWORD *)v3 - 6);
    if (!v5)
      goto LABEL_8;
LABEL_7:
    *((_QWORD *)v3 - 5) = v5;
    operator delete(v5);
    goto LABEL_8;
  }
  return a1;
}

void sub_20FCCD598(uint64_t *a1, uint64_t **a2, char **a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v7;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  uint64_t i;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned int *v102;
  unsigned int *j;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  char v113;
  unint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v7 = a5;
  v118 = *a1;
  v120 = a1[1];
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((v120 - *a1) >> 3);
  v11 = *a3;
  v12 = a3[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a3) >> 3);
  v14 = v10 - v13;
  v116 = v10;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      v29 = &v11[0x6DB6DB6DB6DB6DB8 * ((v120 - *a1) >> 3)];
      if (v12 != v29)
      {
        v30 = a3[1];
        do
        {
          v32 = (void *)*((_QWORD *)v30 - 3);
          v30 -= 24;
          v31 = v32;
          if (v32)
          {
            *((_QWORD *)v12 - 2) = v31;
            operator delete(v31);
          }
          v12 = v30;
        }
        while (v30 != v29);
      }
      a3[1] = v29;
    }
  }
  else
  {
    v15 = a3[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 3) >= v14)
    {
      bzero(v12, 24 * ((24 * v14 - 24) / 0x18) + 24);
      a3[1] = &v12[24 * ((24 * v14 - 24) / 0x18) + 24];
      goto LABEL_29;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v10)
      v17 = 0xCF3CF3CF3CF3CF3DLL * ((v120 - *a1) >> 3);
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_125;
    v19 = 24 * v18;
    v20 = (char *)operator new(24 * v18);
    v21 = &v20[24 * v13];
    v22 = &v20[v19];
    bzero(v21, 24 * ((24 * v14 - 24) / 0x18) + 24);
    v23 = &v21[24 * ((24 * v14 - 24) / 0x18) + 24];
    if (v12 == v11)
    {
      *a3 = v21;
      a3[1] = v23;
      a3[2] = v22;
      v10 = v116;
      v7 = a5;
      goto LABEL_27;
    }
    v7 = a5;
    do
    {
      v24 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v21 - 24) = v24;
      v21 -= 24;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    while (v12 != v11);
    v12 = *a3;
    v25 = a3[1];
    *a3 = v21;
    a3[1] = v23;
    a3[2] = v22;
    if (v25 != v12)
    {
      v26 = v25;
      v10 = v116;
      do
      {
        v28 = (void *)*((_QWORD *)v26 - 3);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *((_QWORD *)v25 - 2) = v27;
          operator delete(v27);
        }
        v25 = v26;
      }
      while (v26 != v12);
LABEL_27:
      if (!v12)
        goto LABEL_29;
      goto LABEL_28;
    }
    v10 = v116;
    if (v12)
LABEL_28:
      operator delete(v12);
  }
LABEL_29:
  v33 = a4[1];
  v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *a4) >> 3);
  if (v10 <= v34)
  {
    if (v10 < v34)
    {
      v35 = *a4 + 24 * v10;
      if (v33 != v35)
      {
        v36 = a4[1];
        do
        {
          v38 = *(void **)(v36 - 24);
          v36 -= 24;
          v37 = v38;
          if (v38)
          {
            *(_QWORD *)(v33 - 16) = v37;
            operator delete(v37);
          }
          v33 = v36;
        }
        while (v36 != v35);
      }
      a4[1] = v35;
    }
  }
  else
  {
    sub_20FCD06C0((uint64_t)a4, v10 - v34);
  }
  v39 = v7[1];
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *v7) >> 3);
  if (v10 <= v40)
  {
    if (v10 < v40)
    {
      v41 = *v7 + 24 * v10;
      if (v39 != v41)
      {
        v42 = v7[1];
        do
        {
          v44 = *(void **)(v42 - 24);
          v42 -= 24;
          v43 = v44;
          if (v44)
          {
            *(_QWORD *)(v39 - 16) = v43;
            operator delete(v43);
          }
          v39 = v42;
        }
        while (v42 != v41);
      }
      v7[1] = v41;
    }
  }
  else
  {
    sub_20FCD06C0((uint64_t)v7, v10 - v40);
  }
  v45 = *(_QWORD **)a6;
  v46 = *(_QWORD **)(a6 + 8);
  v47 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v46 - *(_QWORD *)a6) >> 3);
  v48 = v10 - v47;
  if (v10 > v47)
  {
    v49 = *(_QWORD *)(a6 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v46) >> 3) >= v48)
    {
      bzero(*(void **)(a6 + 8), 24 * ((24 * v48 - 24) / 0x18) + 24);
      *(_QWORD *)(a6 + 8) = &v46[3 * ((24 * v48 - 24) / 0x18) + 3];
      v59 = v118;
      v58 = v120;
      goto LABEL_75;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v45) >> 3);
    v51 = 2 * v50;
    if (2 * v50 <= v10)
      v51 = v10;
    if (v50 >= 0x555555555555555)
      v52 = 0xAAAAAAAAAAAAAAALL;
    else
      v52 = v51;
    if (v52 <= 0xAAAAAAAAAAAAAAALL)
    {
      v53 = 24 * v52;
      v54 = (char *)operator new(24 * v52);
      v55 = &v54[24 * v47];
      v56 = &v54[v53];
      bzero(v55, 24 * ((24 * v48 - 24) / 0x18) + 24);
      v57 = &v55[24 * ((24 * v48 - 24) / 0x18) + 24];
      if (v46 == v45)
      {
        *(_QWORD *)a6 = v55;
        *(_QWORD *)(a6 + 8) = v57;
        *(_QWORD *)(a6 + 16) = v56;
        v59 = v118;
        v58 = v120;
      }
      else
      {
        v59 = v118;
        v58 = v120;
        do
        {
          v60 = v55;
          *((_QWORD *)v55 - 2) = 0;
          *((_QWORD *)v55 - 1) = 0;
          v61 = *(_OWORD *)(v46 - 3);
          v46 -= 3;
          *(_OWORD *)(v55 - 24) = v61;
          v55 -= 24;
          *((_QWORD *)v60 - 1) = v46[2];
          *v46 = 0;
          v46[1] = 0;
          v46[2] = 0;
        }
        while (v46 != v45);
        v46 = *(_QWORD **)a6;
        v62 = *(_QWORD **)(a6 + 8);
        *(_QWORD *)a6 = v55;
        *(_QWORD *)(a6 + 8) = v57;
        *(_QWORD *)(a6 + 16) = v56;
        if (v62 != v46)
        {
          v63 = v62;
          do
          {
            v65 = (void *)*(v63 - 3);
            v63 -= 3;
            v64 = v65;
            if (v65)
            {
              *(v62 - 2) = v64;
              operator delete(v64);
            }
            v62 = v63;
          }
          while (v63 != v46);
        }
      }
      if (v46)
        operator delete(v46);
      goto LABEL_75;
    }
LABEL_125:
    sub_20E877A38();
  }
  v59 = v118;
  v58 = v120;
  if (v10 < v47)
  {
    v66 = &v45[3 * v10];
    if (v46 != v66)
    {
      v67 = *(_QWORD **)(a6 + 8);
      do
      {
        v69 = (void *)*(v67 - 3);
        v67 -= 3;
        v68 = v69;
        if (v69)
        {
          *(v46 - 2) = v68;
          operator delete(v68);
        }
        v46 = v67;
      }
      while (v67 != v66);
    }
    *(_QWORD *)(a6 + 8) = v66;
  }
LABEL_75:
  if (v58 != v59)
  {
    for (i = 0; i != v116; ++i)
    {
      v119 = *(_QWORD *)(*a1 + 168 * i + 32);
      v121 = *(_QWORD *)(*a1 + 168 * i + 40);
      v76 = (v121 - v119) / 48;
      if (v121 == v119)
      {
        v79 = 0;
        v78 = 0;
        v84 = *a3;
        v85 = (uint64_t)&(*a3)[24 * i];
        v86 = *(void **)v85;
        if (*(_QWORD *)v85)
          goto LABEL_88;
      }
      else
      {
        if (v76 >> 60)
          sub_20E9DEF2C();
        v77 = (char *)operator new(16 * v76);
        v78 = v77;
        v79 = (unint64_t)&v77[16 * v76];
        v80 = v77;
        if (((v76 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_130;
        v81 = ((v76 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
        v80 = &v77[16 * (v81 & 0x1FFFFFFFFFFFFFFELL)];
        v82 = v77 + 16;
        v83 = v81 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *((_QWORD *)v82 - 2) = 0;
          *(_QWORD *)v82 = 0;
          *((_DWORD *)v82 - 2) = -1;
          *((_DWORD *)v82 + 2) = -1;
          v82 += 32;
          v83 -= 2;
        }
        while (v83);
        if (v81 != (v81 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_130:
          do
          {
            *(_QWORD *)v80 = 0;
            *((_DWORD *)v80 + 2) = -1;
            v80 += 16;
          }
          while (v80 != (char *)v79);
        }
        v84 = *a3;
        v85 = (uint64_t)&(*a3)[24 * i];
        v86 = *(void **)v85;
        if (*(_QWORD *)v85)
        {
LABEL_88:
          *(_QWORD *)&v84[24 * i + 8] = v86;
          operator delete(v86);
          *(_QWORD *)v85 = 0;
          *(_QWORD *)(v85 + 8) = 0;
          *(_QWORD *)(v85 + 16) = 0;
        }
      }
      *(_QWORD *)v85 = v78;
      *(int64x2_t *)&v84[24 * i + 8] = vdupq_n_s64(v79);
      if (v121 == v119)
      {
        v88 = 0;
        v87 = 0;
        v89 = *a4;
        v90 = *a4 + 24 * i;
        v91 = *(void **)v90;
        if (*(_QWORD *)v90)
          goto LABEL_92;
      }
      else
      {
        if (v76 > 0xAAAAAAAAAAAAAAALL)
          sub_20E9DEF2C();
        v87 = operator new(24 * v76);
        bzero(v87, 24 * ((24 * v76 - 24) / 0x18) + 24);
        v88 = (unint64_t)v87 + 24 * v76;
        v89 = *a4;
        v90 = *a4 + 24 * i;
        v91 = *(void **)v90;
        if (*(_QWORD *)v90)
        {
LABEL_92:
          *(_QWORD *)(v89 + 24 * i + 8) = v91;
          operator delete(v91);
          *(_QWORD *)v90 = 0;
          *(_QWORD *)(v90 + 8) = 0;
          *(_QWORD *)(v90 + 16) = 0;
        }
      }
      *(_QWORD *)v90 = v87;
      *(int64x2_t *)(v89 + 24 * i + 8) = vdupq_n_s64(v88);
      if (v121 == v119)
      {
        v93 = 0;
        v92 = 0;
        v94 = *a5;
        v95 = *a5 + 24 * i;
        v96 = *(void **)v95;
        if (*(_QWORD *)v95)
          goto LABEL_96;
      }
      else
      {
        if (v76 > 0xAAAAAAAAAAAAAAALL)
          sub_20E9DEF2C();
        v92 = operator new(24 * v76);
        bzero(v92, 24 * ((24 * v76 - 24) / 0x18) + 24);
        v93 = (unint64_t)v92 + 24 * v76;
        v94 = *a5;
        v95 = *a5 + 24 * i;
        v96 = *(void **)v95;
        if (*(_QWORD *)v95)
        {
LABEL_96:
          *(_QWORD *)(v94 + 24 * i + 8) = v96;
          operator delete(v96);
          *(_QWORD *)v95 = 0;
          *(_QWORD *)(v95 + 8) = 0;
          *(_QWORD *)(v95 + 16) = 0;
        }
      }
      *(_QWORD *)v95 = v92;
      *(int64x2_t *)(v94 + 24 * i + 8) = vdupq_n_s64(v93);
      if (v121 != v119)
      {
        if (v76 >= 0x333333333333334)
          sub_20E9DEF2C();
        v97 = (char *)operator new(80 * v76);
        v72 = v97;
        v98 = 0;
        v71 = (unint64_t)&v97[80 * v76];
        do
        {
          v99 = &v97[v98];
          *(_OWORD *)(v99 + 57) = 0uLL;
          *((_OWORD *)v99 + 2) = 0uLL;
          *((_OWORD *)v99 + 3) = 0uLL;
          v98 += 80;
          *(_OWORD *)v99 = 0uLL;
          *((_OWORD *)v99 + 1) = 0uLL;
        }
        while (80 * v76 != v98);
        v73 = *(_QWORD **)a6;
        v74 = *(_QWORD *)a6 + 24 * i;
        v75 = *(void **)v74;
        if (!*(_QWORD *)v74)
          goto LABEL_79;
LABEL_78:
        v73[3 * i + 1] = v75;
        operator delete(v75);
        *(_QWORD *)v74 = 0;
        *(_QWORD *)(v74 + 8) = 0;
        *(_QWORD *)(v74 + 16) = 0;
        goto LABEL_79;
      }
      v71 = 0;
      v72 = 0;
      v73 = *(_QWORD **)a6;
      v74 = *(_QWORD *)a6 + 24 * i;
      v75 = *(void **)v74;
      if (*(_QWORD *)v74)
        goto LABEL_78;
LABEL_79:
      *(_QWORD *)v74 = v72;
      *(int64x2_t *)&v73[3 * i + 1] = vdupq_n_s64(v71);
    }
  }
  v100 = *a2;
  v101 = a2[1];
  if (*a2 != v101)
  {
    do
    {
      v102 = (unsigned int *)v100[18];
      for (j = (unsigned int *)v100[19]; v102 != j; *(_BYTE *)(v106 + 72) = v113)
      {
        v107 = *(_QWORD *)&(*a3)[24 * *v102] + 16 * v102[1];
        v108 = *v100;
        *(_DWORD *)(v107 + 8) = *((_DWORD *)v100 + 2);
        *(_QWORD *)v107 = v108;
        v109 = *(_QWORD *)(*a4 + 24 * *v102) + 24 * v102[1];
        v110 = *((_OWORD *)v100 + 1);
        *(_QWORD *)(v109 + 16) = v100[4];
        *(_OWORD *)v109 = v110;
        v111 = *(_QWORD *)(*a5 + 24 * *v102) + 24 * v102[1];
        v112 = *(_OWORD *)(v100 + 5);
        *(_QWORD *)(v111 + 16) = v100[7];
        *(_OWORD *)v111 = v112;
        v113 = *((_BYTE *)v100 + 136);
        if (v113)
        {
          v124 = *((_OWORD *)v100 + 6);
          v125 = *((_OWORD *)v100 + 7);
          v126 = v100[16];
          v122 = *((_OWORD *)v100 + 4);
          v123 = *((_OWORD *)v100 + 5);
          v113 = 1;
        }
        else
        {
          v126 = 0;
          v124 = 0uLL;
          v125 = 0uLL;
          v122 = 0uLL;
          v123 = 0uLL;
        }
        v104 = *v102;
        v105 = v102[1];
        v102 += 2;
        v106 = *(_QWORD *)(*(_QWORD *)a6 + 24 * v104) + 80 * v105;
        *(_OWORD *)(v106 + 16) = v123;
        *(_OWORD *)(v106 + 32) = v124;
        *(_OWORD *)(v106 + 48) = v125;
        *(_QWORD *)(v106 + 64) = v126;
        *(_OWORD *)v106 = v122;
      }
      v100 += 22;
    }
    while (v100 != v101);
  }
}

void sub_20FCCDFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FCCDFEC(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, int64x2_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD **v37;
  _QWORD *v38;
  _QWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  char *v87;
  char *v88;
  _QWORD **v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int16 v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  BOOL v117;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  void *v143;
  _QWORD *v144;
  _QWORD **v145;
  int64x2_t v146;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  char v158;
  uint64_t *v159;
  _QWORD **v160;
  _QWORD *v161;
  unint64_t v162;
  int64x2_t v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[32];
  __int128 v169;
  __int128 v170;
  _OWORD v171[2];
  void *__p;
  uint64_t v173;
  uint64_t v174;
  int v175;
  __int16 v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  v161 = 0;
  v162 = 0;
  v160 = &v161;
  v6 = *a1;
  v5 = a1[1];
  v152 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) != v152
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSample.cpp", 153, (uint64_t)"frame_feature_positions.size() == num_frames", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v152&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSample.cpp", 154, (uint64_t)"frame_feature_directions.size() == num_frames", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) != v152&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSample.cpp",
         155,
         (uint64_t)"frame_feature_covariance.size() == num_frames",
         45,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v5 != v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(*a1 + 24 * v7);
      v157 = (_QWORD *)(*a3 + 24 * v7);
      v155 = (_QWORD *)(*a2 + 24 * v7);
      v156 = (_QWORD *)(*a4 + 24 * v7);
      v10 = v8 + 1;
      v9 = v8[1];
      v159 = v8;
      v11 = *v8;
      v12 = (v9 - *v8) >> 4;
      v153 = v7;
      if (v12 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155[1] - *v155) >> 3)
        || v12 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*a3 + 24 * v7 + 8) - *v157) >> 3)
        || v12 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a4 + 24 * v7 + 8) - *v156) >> 4))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSample.cpp", 166, (uint64_t)"numFeatures == feature_positions.size() && numFeatures == feature_directions.size() && numFeatures == feature_covariance.size()", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v9 = *v10;
        v11 = *v159;
        v12 = (*v10 - *v159) >> 4;
      }
      if (v9 != v11)
        break;
LABEL_9:
      v7 = v153 + 1;
      if (v153 + 1 == v152)
        goto LABEL_110;
    }
    v13 = 0;
    v154 = v12;
    while (1)
    {
      v14 = *v159 + 16 * v13;
      v15 = *(_DWORD *)(v14 + 8);
      if (v15 != -1)
        break;
LABEL_22:
      if (++v13 == v12)
        goto LABEL_9;
    }
    v16 = *(_QWORD **)v14;
    v17 = v161;
    if (!v161)
      goto LABEL_36;
    v18 = &v161;
    v19 = v161;
    do
    {
      v20 = (_QWORD *)v19[4];
      if (v20 < v16)
      {
        ++v19;
      }
      else if (v20 == v16)
      {
        if (*((_DWORD *)v19 + 10) < v15)
          ++v19;
        else
          v18 = (_QWORD **)v19;
      }
      else
      {
        v18 = (_QWORD **)v19;
      }
      v19 = (_QWORD *)*v19;
    }
    while (v19);
    if (v18 == &v161 || (v21 = v18[4], v16 < v21) || v16 == v21 && v15 < *((_DWORD *)v18 + 10))
    {
LABEL_36:
      v22 = *(_QWORD *)(v14 + 8);
      v23 = (uint64_t *)(*v155 + 24 * v13);
      v24 = *v23;
      v25 = v23[1];
      v26 = v23[2];
      v27 = (uint64_t *)(*v157 + 24 * v13);
      v28 = *v27;
      v29 = v27[1];
      v30 = v27[2];
      v31 = *v156 + 80 * v13;
      v32 = *(_BYTE *)v31;
      v33 = *(unsigned __int8 *)(v31 + 72);
      v34 = operator new(8uLL);
      v35 = v34;
      *v34 = v153 | (unint64_t)(v13 << 32);
      v36 = v34 + 1;
      if (v33)
      {
        v166 = *(_OWORD *)(v31 + 17);
        v167 = *(_OWORD *)(v31 + 33);
        *(_OWORD *)v168 = *(_OWORD *)(v31 + 49);
        *(_QWORD *)&v168[15] = *(_QWORD *)(v31 + 64);
        v165 = *(_OWORD *)(v31 + 1);
        v158 = 1;
      }
      else
      {
        v32 = 0;
        v158 = 0;
      }
      v37 = &v161;
LABEL_41:
      v38 = v37;
      if (v17)
      {
        while (1)
        {
          v37 = (_QWORD **)v17;
          v39 = (_QWORD *)v17[4];
          if (v16 < v39)
          {
LABEL_40:
            v17 = (_QWORD *)*v17;
            goto LABEL_41;
          }
          if (v16 == v39)
          {
            v40 = *((_DWORD *)v17 + 10);
            if (v15 < v40)
              goto LABEL_40;
            if (v40 >= v15)
            {
LABEL_73:
              operator delete(v34);
              goto LABEL_21;
            }
          }
          else if (v39 >= v16)
          {
            goto LABEL_73;
          }
          v17 = (_QWORD *)v17[1];
          if (!v17)
          {
            v38 = v37 + 1;
            break;
          }
        }
      }
      v41 = operator new(0xE0uLL);
      v41[4] = v16;
      *((_DWORD *)v41 + 10) = v15;
      v41[6] = v16;
      v41[7] = v22;
      v41[8] = v24;
      v41[9] = v25;
      v41[10] = v26;
      v41[11] = v28;
      v41[12] = v29;
      v41[13] = v30;
      *((_BYTE *)v41 + 112) = v32;
      v42 = v165;
      *(_OWORD *)((char *)v41 + 129) = v166;
      v43 = *(_OWORD *)v168;
      *(_OWORD *)((char *)v41 + 145) = v167;
      *(_OWORD *)((char *)v41 + 161) = v43;
      v41[22] = *(_QWORD *)&v168[15];
      *(_OWORD *)((char *)v41 + 113) = v42;
      *((_BYTE *)v41 + 184) = v158;
      v41[24] = v35;
      v41[25] = v36;
      v41[26] = v36;
      *((_DWORD *)v41 + 54) = v153;
      *((_WORD *)v41 + 110) = 1;
      *v41 = 0;
      v41[1] = 0;
      v41[2] = v37;
      *v38 = v41;
      if (*v160)
      {
        v160 = (_QWORD **)*v160;
        v41 = (_QWORD *)*v38;
      }
      v44 = v161;
      v45 = v41 == v161;
      *((_BYTE *)v41 + 24) = v41 == v161;
      if (!v45)
      {
        do
        {
          v46 = v41[2];
          if (*(_BYTE *)(v46 + 24))
            break;
          v47 = *(_QWORD **)(v46 + 16);
          v48 = *v47;
          if (*v47 == v46)
          {
            v51 = v47[1];
            if (!v51 || (v52 = *(unsigned __int8 *)(v51 + 24), v49 = (_BYTE *)(v51 + 24), v52))
            {
              if (*(_QWORD **)v46 == v41)
              {
                *(_BYTE *)(v46 + 24) = 1;
                *((_BYTE *)v47 + 24) = 0;
                v55 = *(_QWORD *)(v46 + 8);
                *v47 = v55;
                if (v55)
                  goto LABEL_67;
              }
              else
              {
                v53 = *(uint64_t **)(v46 + 8);
                v54 = *v53;
                *(_QWORD *)(v46 + 8) = *v53;
                if (v54)
                {
                  *(_QWORD *)(v54 + 16) = v46;
                  v47 = *(_QWORD **)(v46 + 16);
                }
                v53[2] = (uint64_t)v47;
                *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v53;
                *v53 = v46;
                *(_QWORD *)(v46 + 16) = v53;
                v47 = (_QWORD *)v53[2];
                v46 = *v47;
                *((_BYTE *)v53 + 24) = 1;
                *((_BYTE *)v47 + 24) = 0;
                v55 = *(_QWORD *)(v46 + 8);
                *v47 = v55;
                if (v55)
LABEL_67:
                  *(_QWORD *)(v55 + 16) = v47;
              }
              *(_QWORD *)(v46 + 16) = v47[2];
              *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
              *(_QWORD *)(v46 + 8) = v47;
LABEL_19:
              v47[2] = v46;
              break;
            }
          }
          else if (!v48 || (v50 = *(unsigned __int8 *)(v48 + 24), v49 = (_BYTE *)(v48 + 24), v50))
          {
            if (*(_QWORD **)v46 == v41)
            {
              v66 = v41[1];
              *(_QWORD *)v46 = v66;
              if (v66)
              {
                *(_QWORD *)(v66 + 16) = v46;
                v47 = *(_QWORD **)(v46 + 16);
              }
              v41[2] = v47;
              *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v41;
              v41[1] = v46;
              *(_QWORD *)(v46 + 16) = v41;
              v47 = (_QWORD *)v41[2];
              *((_BYTE *)v41 + 24) = 1;
              *((_BYTE *)v47 + 24) = 0;
              v46 = v47[1];
              v59 = *(_QWORD **)v46;
              v47[1] = *(_QWORD *)v46;
              if (!v59)
                goto LABEL_18;
            }
            else
            {
              *(_BYTE *)(v46 + 24) = 1;
              *((_BYTE *)v47 + 24) = 0;
              v46 = v47[1];
              v59 = *(_QWORD **)v46;
              v47[1] = *(_QWORD *)v46;
              if (!v59)
                goto LABEL_18;
            }
            v59[2] = v47;
LABEL_18:
            *(_QWORD *)(v46 + 16) = v47[2];
            *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
            *(_QWORD *)v46 = v47;
            goto LABEL_19;
          }
          *(_BYTE *)(v46 + 24) = 1;
          v41 = v47;
          *((_BYTE *)v47 + 24) = v47 == v44;
          *v49 = 1;
        }
        while (v47 != v44);
      }
      ++v162;
LABEL_21:
      v12 = v154;
      goto LABEL_22;
    }
    v57 = (char *)v18[25];
    v56 = (char *)v18[26];
    if (v57 < v56)
    {
      *(_QWORD *)v57 = v153 | (unint64_t)(v13 << 32);
      v58 = v57 + 8;
LABEL_106:
      v18[25] = v58;
      v77 = *v155 + 24 * v13;
      v78 = *(_OWORD *)v77;
      v18[10] = *(_QWORD **)(v77 + 16);
      *((_OWORD *)v18 + 4) = v78;
      v79 = *v157 + 24 * v13;
      v80 = *(_OWORD *)v79;
      v18[13] = *(_QWORD **)(v79 + 16);
      *(_OWORD *)(v18 + 11) = v80;
      v81 = *(_BYTE *)(*v156 + 80 * v13 + 72);
      if (v81)
      {
        v82 = *v156 + 80 * v13;
        v81 = *(_BYTE *)v82;
        v166 = *(_OWORD *)(v82 + 17);
        v167 = *(_OWORD *)(v82 + 33);
        *(_OWORD *)v168 = *(_OWORD *)(v82 + 49);
        *(_QWORD *)&v168[15] = *(_QWORD *)(v82 + 64);
        v165 = *(_OWORD *)(v82 + 1);
        v83 = 1;
      }
      else
      {
        v83 = 0;
      }
      *((_BYTE *)v18 + 112) = v81;
      v84 = v165;
      *(_OWORD *)((char *)v18 + 129) = v166;
      v85 = *(_OWORD *)v168;
      *(_OWORD *)((char *)v18 + 145) = v167;
      *(_OWORD *)((char *)v18 + 161) = v85;
      v18[22] = *(_QWORD **)&v168[15];
      *(_OWORD *)((char *)v18 + 113) = v84;
      *((_BYTE *)v18 + 184) = v83;
      goto LABEL_22;
    }
    v60 = (char *)v18[24];
    v61 = (v57 - v60) >> 3;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 61)
      sub_20E92CED8();
    v63 = v56 - v60;
    if (v63 >> 2 > v62)
      v62 = v63 >> 2;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    if (v64)
    {
      if (v64 >> 61)
        sub_20E877A38();
      v65 = (char *)operator new(8 * v64);
    }
    else
    {
      v65 = 0;
    }
    v67 = &v65[8 * v61];
    *(_QWORD *)v67 = v153 | (unint64_t)(v13 << 32);
    v58 = v67 + 8;
    if (v57 == v60)
    {
      v18[24] = v67;
      v18[25] = v58;
      v18[26] = &v65[8 * v64];
      if (!v57)
        goto LABEL_105;
    }
    else
    {
      v68 = v57 - v60 - 8;
      if (v68 < 0x58)
        goto LABEL_182;
      if ((unint64_t)(v60 - v65) < 0x20)
        goto LABEL_182;
      v69 = (v68 >> 3) + 1;
      v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
      v71 = &v57[-v70];
      v67 -= v70;
      v72 = &v65[8 * v61 - 16];
      v73 = v57 - 16;
      v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v75 = *(_OWORD *)v73;
        *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
        *(_OWORD *)v72 = v75;
        v72 -= 32;
        v73 -= 32;
        v74 -= 4;
      }
      while (v74);
      v57 = v71;
      if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_182:
        do
        {
          v76 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v67 - 1) = v76;
          v67 -= 8;
        }
        while (v57 != v60);
      }
      v57 = (char *)v18[24];
      v18[24] = v67;
      v18[25] = v58;
      v18[26] = &v65[8 * v64];
      if (!v57)
        goto LABEL_105;
    }
    operator delete(v57);
LABEL_105:
    v12 = v154;
    goto LABEL_106;
  }
LABEL_110:
  v86 = v162;
  v164 = 0;
  v163 = 0uLL;
  if (!v162)
  {
    v88 = 0;
    v87 = 0;
    v89 = v160;
    if (v160 != &v161)
      goto LABEL_115;
    goto LABEL_170;
  }
  if (v162 > 0x1745D1745D1745DLL)
    sub_20E92CED8();
  v87 = (char *)operator new(176 * v162);
  v88 = &v87[176 * v86];
  v163.i64[0] = (uint64_t)v87;
  v163.i64[1] = (uint64_t)v87;
  v164 = v88;
  v89 = v160;
  if (v160 == &v161)
  {
LABEL_170:
    v146 = vdupq_n_s64((unint64_t)v87);
    goto LABEL_171;
  }
  do
  {
LABEL_115:
    v90 = *((_OWORD *)v89 + 9);
    v169 = *((_OWORD *)v89 + 8);
    v170 = v90;
    v171[0] = *((_OWORD *)v89 + 10);
    *(_OWORD *)((char *)v171 + 9) = *(_OWORD *)((char *)v89 + 169);
    v91 = *((_OWORD *)v89 + 4);
    v92 = *((_OWORD *)v89 + 6);
    v93 = *((_OWORD *)v89 + 7);
    v167 = *((_OWORD *)v89 + 5);
    *(_OWORD *)v168 = v92;
    *(_OWORD *)&v168[16] = v93;
    v165 = *((_OWORD *)v89 + 3);
    v166 = v91;
    v173 = 0;
    v174 = 0;
    __p = 0;
    v95 = (char *)v89[24];
    v94 = (char *)v89[25];
    v96 = v94 - v95;
    if (v94 != v95)
    {
      if (v96 < 0)
        sub_20E92CED8();
      v97 = (char *)operator new(v94 - v95);
      v98 = v97;
      v99 = v96 - 8;
      if ((unint64_t)(v96 - 8) >= 0x78)
      {
        v117 = v97 + 4 < &v95[(v99 & 0xFFFFFFFFFFFFFFF8) + 8] && v95 + 4 < &v97[(v99 & 0xFFFFFFFFFFFFFFF8) + 8];
        v100 = v97;
        if ((v95 >= &v97[(v99 & 0xFFFFFFFFFFFFFFF8) + 4] || v97 >= &v95[(v99 & 0xFFFFFFFFFFFFFFF8) + 4]) && !v117)
        {
          v119 = (v99 >> 3) + 1;
          v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFF8);
          v121 = &v95[v120];
          v100 = &v97[v120];
          v122 = v97 + 32;
          v123 = (__int128 *)(v95 + 32);
          v124 = v119 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v126 = *(v123 - 2);
            v125 = *(v123 - 1);
            v128 = *v123;
            v127 = v123[1];
            v123 += 4;
            *(v122 - 2) = v126;
            *(v122 - 1) = v125;
            *v122 = v128;
            v122[1] = v127;
            v122 += 4;
            v124 -= 8;
          }
          while (v124);
          v95 = v121;
          if (v119 == (v119 & 0x3FFFFFFFFFFFFFF8))
            goto LABEL_120;
        }
      }
      else
      {
        v100 = v97;
      }
      do
      {
        v101 = *(_QWORD *)v95;
        v95 += 8;
        *(_QWORD *)v100 = v101;
        v100 += 8;
      }
      while (v95 != v94);
LABEL_120:
      v102 = &v97[8 * (v96 >> 3)];
      goto LABEL_122;
    }
    v102 = 0;
    v100 = 0;
    v98 = 0;
LABEL_122:
    v175 = *((_DWORD *)v89 + 54);
    v176 = *((_WORD *)v89 + 110);
    v103 = v163.i64[1];
    if (v163.i64[1] >= (unint64_t)v164)
    {
      v111 = v163.i64[0];
      v112 = 0x2E8BA2E8BA2E8BA3 * ((v163.i64[1] - v163.i64[0]) >> 4);
      v113 = v112 + 1;
      if ((unint64_t)(v112 + 1) > 0x1745D1745D1745DLL)
        sub_20E92CED8();
      if (0x5D1745D1745D1746 * ((uint64_t)&v164[-v163.i64[0]] >> 4) > v113)
        v113 = 0x5D1745D1745D1746 * ((uint64_t)&v164[-v163.i64[0]] >> 4);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v164[-v163.i64[0]] >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v114 = 0x1745D1745D1745DLL;
      else
        v114 = v113;
      if (v114)
      {
        if (v114 > 0x1745D1745D1745DLL)
          sub_20E877A38();
        v115 = (char *)operator new(176 * v114);
      }
      else
      {
        v115 = 0;
      }
      v129 = v169;
      v130 = &v115[176 * v112];
      v131 = v171[0];
      *((_OWORD *)v130 + 6) = v170;
      *((_OWORD *)v130 + 7) = v131;
      *(_OWORD *)(v130 + 121) = *(_OWORD *)((char *)v171 + 9);
      v132 = *(_OWORD *)v168;
      *((_OWORD *)v130 + 2) = v167;
      *((_OWORD *)v130 + 3) = v132;
      *((_OWORD *)v130 + 4) = *(_OWORD *)&v168[16];
      *((_OWORD *)v130 + 5) = v129;
      v133 = v166;
      *(_OWORD *)v130 = v165;
      *((_OWORD *)v130 + 1) = v133;
      *((_QWORD *)v130 + 18) = v98;
      *((_QWORD *)v130 + 19) = v100;
      *((_QWORD *)v130 + 20) = v102;
      v173 = 0;
      v174 = 0;
      __p = 0;
      *((_DWORD *)v130 + 42) = v175;
      v134 = v130 + 176;
      *((_WORD *)v130 + 86) = v176;
      if (v103 == v111)
      {
        v163.i64[0] = (uint64_t)&v115[176 * v112];
        v163.i64[1] = (uint64_t)(v130 + 176);
        v164 = &v115[176 * v114];
      }
      else
      {
        do
        {
          *((_OWORD *)v130 - 11) = *(_OWORD *)(v103 - 176);
          v135 = *(_OWORD *)(v103 - 160);
          v136 = *(_OWORD *)(v103 - 144);
          v137 = *(_OWORD *)(v103 - 112);
          *((_OWORD *)v130 - 8) = *(_OWORD *)(v103 - 128);
          *((_OWORD *)v130 - 7) = v137;
          *((_OWORD *)v130 - 10) = v135;
          *((_OWORD *)v130 - 9) = v136;
          v138 = *(_OWORD *)(v103 - 96);
          v139 = *(_OWORD *)(v103 - 80);
          v140 = *(_OWORD *)(v103 - 64);
          *(_OWORD *)(v130 - 55) = *(_OWORD *)(v103 - 55);
          *((_OWORD *)v130 - 5) = v139;
          *((_OWORD *)v130 - 4) = v140;
          *((_OWORD *)v130 - 6) = v138;
          *((_QWORD *)v130 - 3) = 0;
          *((_QWORD *)v130 - 2) = 0;
          *((_OWORD *)v130 - 2) = *(_OWORD *)(v103 - 32);
          *((_QWORD *)v130 - 2) = *(_QWORD *)(v103 - 16);
          *(_QWORD *)(v103 - 32) = 0;
          *(_QWORD *)(v103 - 24) = 0;
          *(_QWORD *)(v103 - 16) = 0;
          v141 = *(_DWORD *)(v103 - 8);
          *((_WORD *)v130 - 2) = *(_WORD *)(v103 - 4);
          *((_DWORD *)v130 - 2) = v141;
          v130 -= 176;
          v103 -= 176;
        }
        while (v103 != v111);
        v142 = v163.i64[1];
        v103 = v163.i64[0];
        v163.i64[0] = (uint64_t)v130;
        v163.i64[1] = (uint64_t)v134;
        v164 = &v115[176 * v114];
        while (v142 != v103)
        {
          v143 = *(void **)(v142 - 32);
          if (v143)
          {
            *(_QWORD *)(v142 - 24) = v143;
            operator delete(v143);
          }
          v142 -= 176;
        }
      }
      if (v103)
        operator delete((void *)v103);
      v163.i64[1] = (uint64_t)v134;
      if (__p)
        operator delete(__p);
    }
    else
    {
      *(_OWORD *)v163.i64[1] = v165;
      v104 = v166;
      v105 = v167;
      v106 = *(_OWORD *)&v168[16];
      *(_OWORD *)(v103 + 48) = *(_OWORD *)v168;
      *(_OWORD *)(v103 + 64) = v106;
      *(_OWORD *)(v103 + 16) = v104;
      *(_OWORD *)(v103 + 32) = v105;
      v107 = v169;
      v108 = v170;
      v109 = v171[0];
      *(_OWORD *)(v103 + 121) = *(_OWORD *)((char *)v171 + 9);
      *(_OWORD *)(v103 + 96) = v108;
      *(_OWORD *)(v103 + 112) = v109;
      *(_OWORD *)(v103 + 80) = v107;
      *(_QWORD *)(v103 + 144) = v98;
      *(_QWORD *)(v103 + 152) = v100;
      *(_QWORD *)(v103 + 160) = v102;
      v173 = 0;
      v174 = 0;
      __p = 0;
      v110 = v176;
      *(_DWORD *)(v103 + 168) = v175;
      *(_WORD *)(v103 + 172) = v110;
      v163.i64[1] = v103 + 176;
    }
    v144 = v89[1];
    if (v144)
    {
      do
      {
        v145 = (_QWORD **)v144;
        v144 = (_QWORD *)*v144;
      }
      while (v144);
    }
    else
    {
      do
      {
        v145 = (_QWORD **)v89[2];
        v45 = *v145 == v89;
        v89 = v145;
      }
      while (!v45);
    }
    v89 = v145;
  }
  while (v145 != &v161);
  v146 = v163;
  v88 = v164;
LABEL_171:
  *a5 = v146;
  a5[1].i64[0] = (uint64_t)v88;
  sub_20FCD0898(v161);
}

void sub_20FCCEDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,void *a27)
{
  sub_20FCCEEB0(&a27);
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void sub_20FCCEE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49)
    JUMPOUT(0x20FCCEE28);
  JUMPOUT(0x20FCCEE2CLL);
}

void sub_20FCCEE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void sub_20FCCEE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void sub_20FCCEE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void sub_20FCCEE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  void *v25;

  operator delete(v25);
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void sub_20FCCEE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  sub_20FCD0898(a25);
  _Unwind_Resume(a1);
}

void **sub_20FCCEEB0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 176;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

int64x2_t *sub_20FCCEF20(int64x2_t *a1, uint64_t a2)
{
  void **v2;
  void **v3;
  char **v4;
  void **v5;
  __int128 v6;
  void *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  char **v11;
  char **v12;
  char *v13;
  unsigned int v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  int64x2_t *v18;
  _QWORD *v19;
  uint64_t v20;
  void **i;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 *j;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  void *v39;
  int64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  char v60;
  int64x2_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  int64x2_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  char *v96;
  int64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  __int128 v129;
  char *v130;
  void *v131;
  void *v132;
  char *v133;
  char *v134;
  void *v135;
  char *v136;
  void *v137;
  void *v138;
  char *v139;
  char *v140;
  void *v141;
  char *v142;
  void *v143;
  void *v144;
  char *v145;
  char *v146;
  void *v147;
  char *v148;
  void *v149;
  void *v150;
  char *v151;
  char *v152;
  void *v153;
  char *v154;
  void *v155;
  void *v156;
  char *v157;
  char *v158;
  unint64_t v159;
  char *v160;
  unint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  int v164;
  uint64_t *v167;
  int64x2_t *v168;
  char *v169;
  char *v170;
  char *v171;
  __int128 v172;
  char *v173;
  char *v174;
  char *v175;
  void *v177;
  char *v178;
  char *v179;
  void *v180;
  char *v181;
  void *v182;
  char *v183;
  void *v184;
  char *v185;
  char *v186;
  void *v187;
  __int128 v188;
  void *v189[4];
  __int128 v190;
  __int128 v191;
  _BYTE v192[32];
  char v193[8];
  __int128 __p;
  uint64_t v195;

  v187 = *(void **)a2;
  v2 = (void **)v187;
  v188 = *(_OWORD *)(a2 + 8);
  v3 = (void **)v188;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1->i64[1] = 0;
  v4 = (char **)&a1->i64[1];
  a1[1].i64[0] = 0;
  a1->i64[0] = (uint64_t)&a1->i64[1];
  v5 = v3;
  if (v2 == v3)
  {
    v20 = a2;
    v18 = a1;
    if (!v2)
      goto LABEL_32;
LABEL_21:
    for (i = (void **)v188; ; i -= 23)
    {
      if (i == v2)
      {
        *(_QWORD *)&v188 = v2;
        operator delete(v2);
        goto LABEL_32;
      }
      if ((*((char *)i - 1) & 0x80000000) == 0)
        break;
      operator delete(*(i - 3));
      v22 = *(i - 6);
      if (v22)
        goto LABEL_26;
LABEL_27:
      if (*((char *)i - 49) < 0)
        operator delete(*(i - 9));
    }
    v22 = *(i - 6);
    if (!v22)
      goto LABEL_27;
LABEL_26:
    *(i - 5) = v22;
    operator delete(v22);
    goto LABEL_27;
  }
  do
  {
    v6 = *((_OWORD *)v2 + 3);
    *(_OWORD *)&v189[2] = *((_OWORD *)v2 + 2);
    v190 = v6;
    v191 = *((_OWORD *)v2 + 4);
    *(_QWORD *)v192 = v2[10];
    *(_OWORD *)v189 = *((_OWORD *)v2 + 1);
    v7 = v2[13];
    *(_OWORD *)&v192[8] = *(_OWORD *)(v2 + 11);
    *(_QWORD *)&v192[24] = v7;
    sub_20EB4453C((uint64_t)v193, (uint64_t *)v2 + 14);
    v8 = *(_DWORD *)v2;
    v9 = v193[0];
    v172 = __p;
    v10 = v195;
    __p = 0uLL;
    v195 = 0;
    v11 = v4;
    v12 = v4;
    v13 = *v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v12 = (char **)v13;
          v14 = *((_DWORD *)v13 + 8);
          if (v8 >= v14)
            break;
          v13 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_11;
        }
        if (v14 >= v8)
          break;
        v13 = v12[1];
        if (!v13)
        {
          v11 = v12 + 1;
          goto LABEL_11;
        }
      }
      v18 = a1;
      if ((_QWORD)v172)
        operator delete((void *)v172);
    }
    else
    {
LABEL_11:
      v15 = (char *)operator new(0xA8uLL);
      v16 = *(_OWORD *)&v189[2];
      *(_OWORD *)(v15 + 72) = v190;
      v17 = *(_OWORD *)v192;
      *(_OWORD *)(v15 + 88) = v191;
      *(_OWORD *)(v15 + 104) = v17;
      *(_OWORD *)(v15 + 120) = *(_OWORD *)&v192[16];
      *(_OWORD *)(v15 + 40) = *(_OWORD *)v189;
      *((_DWORD *)v15 + 8) = v8;
      *(_OWORD *)(v15 + 56) = v16;
      v15[136] = v9;
      *((_OWORD *)v15 + 9) = v172;
      *((_QWORD *)v15 + 20) = v10;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v12;
      *v11 = v15;
      v18 = a1;
      v19 = *(_QWORD **)a1->i64[0];
      if (v19)
      {
        a1->i64[0] = (uint64_t)v19;
        v15 = *v11;
      }
      sub_20E868578((uint64_t *)a1->i64[1], (uint64_t *)v15);
      ++a1[1].i64[0];
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v2 += 23;
  }
  while (v2 != v5);
  v2 = (void **)v187;
  v20 = a2;
  if (v187)
    goto LABEL_21;
LABEL_32:
  v18[1].i64[1] = 0;
  v18[2].i64[0] = 0;
  v167 = &v18[1].i64[1];
  v18[2].i64[1] = 0;
  v23 = &v18[2].i64[1];
  v24 = *(_QWORD *)(v20 + 24);
  v25 = *(_QWORD *)(v20 + 32);
  if (v25 != v24)
  {
    if (0xAFD6A052BF5A814BLL * ((v25 - v24) >> 3) > 0x51EB851EB851EBLL)
      sub_20E92CED8();
    v26 = (char *)operator new(0x7EB50295FAD40A60 * ((v25 - v24) >> 3));
    v18[1].i64[1] = (uint64_t)v26;
    v18[2].i64[0] = (uint64_t)v26;
    v18[2].i64[1] = (uint64_t)&v26[0x7EB50295FAD40A60 * ((v25 - v24) >> 3)];
    v27 = *(__int128 **)(a2 + 24);
    for (j = *(__int128 **)(a2 + 32); v27 != j; v27 = (__int128 *)((char *)v27 + 792))
    {
      if ((unint64_t)v26 < *v23)
      {
        sub_20FCF1280((uint64_t)v26, v27);
        v26 += 800;
        v18[2].i64[0] = (uint64_t)v26;
      }
      else
      {
        v29 = 0x8F5C28F5C28F5C29 * ((uint64_t)&v26[-*v167] >> 5);
        v30 = v29 + 1;
        if (v29 + 1 > 0x51EB851EB851EBLL)
          sub_20E92CED8();
        if (0x1EB851EB851EB852 * ((*v23 - *v167) >> 5) > v30)
          v30 = 0x1EB851EB851EB852 * ((*v23 - *v167) >> 5);
        if (0x8F5C28F5C28F5C29 * ((*v23 - *v167) >> 5) >= 0x28F5C28F5C28F5)
          v31 = 0x51EB851EB851EBLL;
        else
          v31 = v30;
        *(_QWORD *)&v190 = v23;
        if (v31)
        {
          if (v31 > 0x51EB851EB851EBLL)
            sub_20E877A38();
          v32 = (char *)operator new(800 * v31);
        }
        else
        {
          v32 = 0;
        }
        v189[0] = v32;
        v189[1] = &v32[800 * v29];
        v189[2] = v189[1];
        v189[3] = &v32[800 * v31];
        sub_20FCF1280((uint64_t)v189[1], v27);
        v33 = (char *)v189[1];
        v26 = (char *)v189[1] + 800;
        v34 = (char *)v18[1].i64[1];
        v35 = (char *)v18[2].i64[0];
        if (v35 == v34)
        {
          v18[1].i64[1] = (uint64_t)v189[1];
          v18[2].i64[0] = (uint64_t)v26;
          v18[2].i64[1] = (uint64_t)v189[3];
        }
        else
        {
          do
          {
            v36 = v33;
            v33 -= 800;
            memcpy(v33, v35 - 800, 0x2E8uLL);
            *((_QWORD *)v36 - 6) = 0;
            *((_QWORD *)v36 - 5) = 0;
            *((_QWORD *)v36 - 7) = 0;
            *(_OWORD *)(v36 - 56) = *(_OWORD *)(v35 - 56);
            *((_QWORD *)v36 - 5) = *((_QWORD *)v35 - 5);
            *((_QWORD *)v35 - 7) = 0;
            *((_QWORD *)v35 - 6) = 0;
            *((_QWORD *)v35 - 5) = 0;
            v37 = *(_OWORD *)(v35 - 20);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v35 - 2);
            *(_OWORD *)(v36 - 20) = v37;
            v35 -= 800;
          }
          while (v35 != v34);
          v18 = a1;
          v35 = (char *)a1[1].i64[1];
          v38 = (char *)a1[2].i64[0];
          a1[1].i64[1] = (uint64_t)v33;
          a1[2].i64[0] = (uint64_t)v26;
          a1[2].i64[1] = (uint64_t)v189[3];
          while (v38 != v35)
          {
            v39 = (void *)*((_QWORD *)v38 - 7);
            if (v39)
            {
              *((_QWORD *)v38 - 6) = v39;
              operator delete(v39);
            }
            v38 -= 800;
          }
        }
        if (v35)
          operator delete(v35);
      }
      v18[2].i64[0] = (uint64_t)v26;
    }
  }
  v18[3].i64[0] = 0;
  v18[3].i64[1] = 0;
  v168 = v18 + 3;
  v18[4].i64[0] = 0;
  v40 = v18 + 4;
  v42 = *(_QWORD *)(a2 + 48);
  v41 = *(_QWORD *)(a2 + 56);
  if (v41 != v42)
  {
    v43 = 0x86BCA1AF286BCA1BLL * ((v41 - v42) >> 3);
    if (v43 > 0x186186186186186)
      sub_20E92CED8();
    *(_QWORD *)&v190 = v18 + 4;
    v44 = (char *)operator new(168 * v43);
    v18[3].i64[0] = (uint64_t)v44;
    v18[3].i64[1] = (uint64_t)v44;
    v18[4].i64[0] = (uint64_t)&v44[168 * v43];
    memset(v189, 0, sizeof(v189));
    sub_20E9467F8((uint64_t)v189, 0);
    if (v189[0])
      operator delete(v189[0]);
    v46 = *(_QWORD *)(a2 + 48);
    v45 = *(_QWORD *)(a2 + 56);
    if (v46 != v45)
    {
      v47 = (char *)a1[3].i64[1];
      do
      {
        while ((unint64_t)v47 < v40->i64[0])
        {
          sub_20FCF0EA8((uint64_t)v47, v46);
          v47 += 168;
          a1[3].i64[1] = (uint64_t)v47;
          a1[3].i64[1] = (uint64_t)v47;
          v46 += 152;
          if (v46 == v45)
            goto LABEL_90;
        }
        v48 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v47[-v168->i64[0]] >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0x186186186186186)
          sub_20E92CED8();
        if (0x9E79E79E79E79E7ALL * ((v40->i64[0] - v168->i64[0]) >> 3) > v49)
          v49 = 0x9E79E79E79E79E7ALL * ((v40->i64[0] - v168->i64[0]) >> 3);
        if (0xCF3CF3CF3CF3CF3DLL * ((v40->i64[0] - v168->i64[0]) >> 3) >= 0xC30C30C30C30C3)
          v50 = 0x186186186186186;
        else
          v50 = v49;
        *(_QWORD *)&v190 = v18 + 4;
        if (v50)
        {
          if (v50 > 0x186186186186186)
            sub_20E877A38();
          v51 = (char *)operator new(168 * v50);
        }
        else
        {
          v51 = 0;
        }
        v189[0] = v51;
        v189[1] = &v51[168 * v48];
        v189[2] = v189[1];
        v189[3] = &v51[168 * v50];
        sub_20FCF0EA8((uint64_t)v189[1], v46);
        v52 = (char *)v189[1];
        v47 = (char *)v189[2] + 168;
        v189[2] = (char *)v189[2] + 168;
        v54 = (_QWORD *)a1[3].i64[0];
        v53 = a1[3].u64[1];
        if ((_QWORD *)v53 == v54)
        {
          v61 = vdupq_n_s64(v53);
        }
        else
        {
          v55 = 0;
          do
          {
            v56 = &v52[v55];
            v57 = v53 + v55;
            v58 = *(_OWORD *)(v53 + v55 - 168);
            *(_OWORD *)(v56 - 152) = *(_OWORD *)(v53 + v55 - 152);
            *((_QWORD *)v56 - 16) = 0;
            *((_QWORD *)v56 - 15) = 0;
            *((_QWORD *)v56 - 17) = 0;
            *(_OWORD *)(v56 - 168) = v58;
            *(_OWORD *)(v56 - 136) = *(_OWORD *)(v53 + v55 - 136);
            *((_QWORD *)v56 - 15) = *(_QWORD *)(v53 + v55 - 120);
            *(_QWORD *)(v57 - 136) = 0;
            *(_QWORD *)(v57 - 128) = 0;
            *(_QWORD *)(v57 - 120) = 0;
            *((_QWORD *)v56 - 14) = 0;
            *((_QWORD *)v56 - 13) = 0;
            *((_QWORD *)v56 - 12) = 0;
            *((_OWORD *)v56 - 7) = *(_OWORD *)(v53 + v55 - 112);
            *((_QWORD *)v56 - 12) = *(_QWORD *)(v53 + v55 - 96);
            *(_QWORD *)(v57 - 104) = 0;
            *(_QWORD *)(v57 - 96) = 0;
            v59 = *(_BYTE *)(v53 + v55 - 88);
            *(_QWORD *)(v57 - 112) = 0;
            *(v56 - 88) = v59;
            *((_QWORD *)v56 - 9) = 0;
            *((_QWORD *)v56 - 8) = 0;
            *((_QWORD *)v56 - 10) = 0;
            *((_OWORD *)v56 - 5) = *(_OWORD *)(v53 + v55 - 80);
            *((_QWORD *)v56 - 8) = *(_QWORD *)(v53 + v55 - 64);
            *(_QWORD *)(v57 - 72) = 0;
            *(_QWORD *)(v57 - 64) = 0;
            v60 = *(_BYTE *)(v53 + v55 - 56);
            *(_QWORD *)(v57 - 80) = 0;
            *(v56 - 56) = v60;
            *((_QWORD *)v56 - 5) = 0;
            *((_QWORD *)v56 - 4) = 0;
            *((_QWORD *)v56 - 6) = 0;
            *((_OWORD *)v56 - 3) = *(_OWORD *)(v53 + v55 - 48);
            *((_QWORD *)v56 - 4) = *(_QWORD *)(v53 + v55 - 32);
            *(_QWORD *)(v57 - 48) = 0;
            *(_QWORD *)(v57 - 40) = 0;
            *(_QWORD *)(v57 - 32) = 0;
            *((_QWORD *)v56 - 2) = 0;
            *((_QWORD *)v56 - 1) = 0;
            *((_QWORD *)v56 - 3) = 0;
            *(_OWORD *)(v56 - 24) = *(_OWORD *)(v53 + v55 - 24);
            *((_QWORD *)v56 - 1) = *(_QWORD *)(v53 + v55 - 8);
            *(_QWORD *)(v57 - 24) = 0;
            *(_QWORD *)(v57 - 16) = 0;
            *(_QWORD *)(v57 - 8) = 0;
            v55 -= 168;
          }
          while ((_QWORD *)(v53 + v55) != v54);
          v61 = *v168;
          v47 = (char *)v189[2];
          v52 += v55;
        }
        a1[3].i64[0] = (uint64_t)v52;
        a1[3].i64[1] = (uint64_t)v47;
        *(int64x2_t *)&v189[1] = v61;
        v62 = (_QWORD *)a1[4].i64[0];
        a1[4].i64[0] = (uint64_t)v189[3];
        v189[3] = v62;
        v189[0] = (void *)v61.i64[0];
        sub_20E9467F8((uint64_t)v189, v61.i64[0]);
        if (v189[0])
          operator delete(v189[0]);
        a1[3].i64[1] = (uint64_t)v47;
        v46 += 152;
      }
      while (v46 != v45);
    }
  }
LABEL_90:
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v63 = a2;
  v64 = *(char **)(a2 + 72);
  v170 = *(char **)(a2 + 80);
  v65 = v170 - v64;
  v66 = a1;
  if (v170 == v64)
    goto LABEL_138;
  v67 = 0xAAAAAAAAAAAAAAABLL * (v65 >> 3);
  if (v67 > 0xAAAAAAAAAAAAAAALL)
    sub_20E9DEF2C();
  v68 = (char *)operator new(v65);
  v173 = &v68[24 * v67];
  v69 = v68;
  do
  {
    while (1)
    {
      memset(v189, 0, 24);
      v71 = *(_QWORD *)v64;
      v70 = *((_QWORD *)v64 + 1);
      v72 = v70 - *(_QWORD *)v64;
      if (v70 != *(_QWORD *)v64)
        break;
      v74 = 0;
      v75 = 0;
      v73 = 0;
      if (v69 >= v173)
        goto LABEL_118;
LABEL_93:
      *(_QWORD *)v69 = v73;
      *((_QWORD *)v69 + 1) = v75;
      *((void **)v69 + 2) = v189[2];
      v66 = a1;
      v69 += 24;
      v64 += 24;
      if (v64 == v170)
        goto LABEL_137;
    }
    if (v72 < 0)
    {
      v185 = v69;
      v186 = v173;
      v184 = v68;
      sub_20E9DEF2C();
    }
    v73 = (char *)operator new(v70 - *(_QWORD *)v64);
    v74 = &v73[16 * (v72 >> 4)];
    v189[1] = v73;
    v75 = v73;
    do
    {
      while (v75 < v74)
      {
        *(_QWORD *)v75 = *(_QWORD *)v71;
        *((_DWORD *)v75 + 2) = *(_DWORD *)(v71 + 8);
        v75 += 16;
        v71 += 16;
        if (v71 == v70)
          goto LABEL_115;
      }
      v76 = (v75 - v73) >> 4;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 60)
      {
        v185 = v69;
        v186 = v173;
        v184 = v68;
        v189[1] = v75;
        v189[2] = v74;
        v189[0] = v73;
        sub_20E9DEF2C();
      }
      if ((v74 - v73) >> 3 > v77)
        v77 = (v74 - v73) >> 3;
      if ((unint64_t)(v74 - v73) >= 0x7FFFFFFFFFFFFFF0)
        v78 = 0xFFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
      {
        if (v78 >> 60)
        {
          v185 = v69;
          v186 = v173;
          v184 = v68;
          v189[1] = v75;
          v189[2] = v74;
          v189[0] = v73;
          sub_20E877A38();
        }
        v79 = (char *)operator new(16 * v78);
      }
      else
      {
        v79 = 0;
      }
      v80 = &v79[16 * v76];
      *(_QWORD *)v80 = *(_QWORD *)v71;
      *((_DWORD *)v80 + 2) = *(_DWORD *)(v71 + 8);
      v81 = v80;
      while (v75 != v73)
      {
        v82 = *((_QWORD *)v75 - 2);
        v75 -= 16;
        v83 = *((_DWORD *)v75 + 2);
        *((_QWORD *)v81 - 2) = v82;
        v81 -= 16;
        *((_DWORD *)v81 + 2) = v83;
      }
      v74 = &v79[16 * v78];
      v75 = v80 + 16;
      if (v73)
        operator delete(v73);
      v73 = v81;
      v71 += 16;
    }
    while (v71 != v70);
LABEL_115:
    v189[1] = v75;
    v189[2] = v74;
    v189[0] = v73;
    if (v69 < v173)
      goto LABEL_93;
LABEL_118:
    v84 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3) + 1;
    if (v84 > 0xAAAAAAAAAAAAAAALL)
    {
      v185 = v69;
      v186 = v173;
      v184 = v68;
      sub_20E9DEF2C();
    }
    if (0x5555555555555556 * ((v173 - v68) >> 3) > v84)
      v84 = 0x5555555555555556 * ((v173 - v68) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v173 - v68) >> 3) >= 0x555555555555555)
      v85 = 0xAAAAAAAAAAAAAAALL;
    else
      v85 = v84;
    if (v85 > 0xAAAAAAAAAAAAAAALL)
    {
      v185 = v69;
      v186 = v173;
      v184 = v68;
      sub_20E877A38();
    }
    v86 = (char *)operator new(24 * v85);
    v87 = v86;
    v88 = &v86[8 * ((v69 - v68) >> 3)];
    *(_QWORD *)v88 = v73;
    *((_QWORD *)v88 + 1) = v75;
    *((_QWORD *)v88 + 2) = v74;
    memset(v189, 0, 24);
    v89 = v88;
    if (v69 != v68)
    {
      v89 = &v86[8 * ((v69 - v68) >> 3)];
      v90 = v69;
      do
      {
        v91 = *(_OWORD *)(v90 - 24);
        v90 -= 24;
        *(_OWORD *)(v89 - 24) = v91;
        v89 -= 24;
        *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
        *((_QWORD *)v90 + 2) = 0;
      }
      while (v90 != v68);
      v92 = v69;
      do
      {
        v94 = (void *)*((_QWORD *)v92 - 3);
        v92 -= 24;
        v93 = v94;
        if (v94)
        {
          *((_QWORD *)v69 - 2) = v93;
          operator delete(v93);
        }
        v69 = v92;
      }
      while (v92 != v68);
    }
    if (v68)
      operator delete(v68);
    v173 = &v87[24 * v85];
    if (v189[0])
      operator delete(v189[0]);
    v68 = v89;
    v95 = v88;
    v66 = a1;
    v69 = v95 + 24;
    v64 += 24;
  }
  while (v64 != v170);
LABEL_137:
  v185 = v69;
  v186 = v173;
  v184 = v68;
  v63 = a2;
LABEL_138:
  sub_20FCD02D4((char **)&v182, (uint64_t **)(v63 + 96));
  sub_20FCD02D4((char **)&v180, (uint64_t **)(v63 + 120));
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v96 = *(char **)(v63 + 144);
  v169 = *(char **)(v63 + 152);
  v97 = v169 - v96;
  if (v169 == v96)
    goto LABEL_186;
  v98 = 0xAAAAAAAAAAAAAAABLL * (v97 >> 3);
  if (v98 > 0xAAAAAAAAAAAAAAALL)
    sub_20E9DEF2C();
  v99 = (char *)operator new(v97);
  v174 = &v99[24 * v98];
  v100 = v99;
  while (2)
  {
    while (2)
    {
      memset(v189, 0, 24);
      v102 = *(_QWORD *)v96;
      v101 = *((_QWORD *)v96 + 1);
      v103 = v101 - *(_QWORD *)v96;
      v171 = v96;
      if (v101 == *(_QWORD *)v96)
      {
        v106 = 0;
        v107 = 0;
        v105 = 0;
        v66 = a1;
        if (v100 >= v174)
          break;
        goto LABEL_141;
      }
      v104 = 0xCCCCCCCCCCCCCCCDLL * (v103 >> 4);
      if (v104 > 0x333333333333333)
      {
        v178 = v100;
        v179 = v174;
        v177 = v99;
        sub_20E9DEF2C();
      }
      v105 = (char *)operator new(v103);
      v106 = &v105[80 * v104];
      v107 = v105;
      while (2)
      {
        while (v107 < v106)
        {
          *(_OWORD *)v107 = *(_OWORD *)v102;
          v108 = *(_OWORD *)(v102 + 16);
          v109 = *(_OWORD *)(v102 + 32);
          v110 = *(_OWORD *)(v102 + 48);
          *((_QWORD *)v107 + 8) = *(_QWORD *)(v102 + 64);
          *((_OWORD *)v107 + 2) = v109;
          *((_OWORD *)v107 + 3) = v110;
          *((_OWORD *)v107 + 1) = v108;
          v107[72] = *(_BYTE *)(v102 + 72);
          v107 += 80;
          v102 += 80;
          if (v102 == v101)
            goto LABEL_163;
        }
        v111 = 0xCCCCCCCCCCCCCCCDLL * ((v107 - v105) >> 4) + 1;
        if (v111 > 0x333333333333333)
        {
          v178 = v100;
          v179 = v174;
          v177 = v99;
          v189[1] = v107;
          v189[2] = v106;
          v189[0] = v105;
          sub_20E9DEF2C();
        }
        if (0x999999999999999ALL * ((v106 - v105) >> 4) > v111)
          v111 = 0x999999999999999ALL * ((v106 - v105) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v106 - v105) >> 4) >= 0x199999999999999)
          v112 = 0x333333333333333;
        else
          v112 = v111;
        if (v112 > 0x333333333333333)
        {
          v178 = v100;
          v179 = v174;
          v177 = v99;
          v189[1] = v107;
          v189[2] = v106;
          v189[0] = v105;
          sub_20E877A38();
        }
        v113 = (char *)operator new(80 * v112);
        v114 = &v113[16 * ((v107 - v105) >> 4)];
        *(_OWORD *)v114 = *(_OWORD *)v102;
        v115 = *(_OWORD *)(v102 + 16);
        v116 = *(_OWORD *)(v102 + 32);
        v117 = *(_OWORD *)(v102 + 48);
        *((_QWORD *)v114 + 8) = *(_QWORD *)(v102 + 64);
        *((_OWORD *)v114 + 2) = v116;
        *((_OWORD *)v114 + 3) = v117;
        *((_OWORD *)v114 + 1) = v115;
        v114[72] = *(_BYTE *)(v102 + 72);
        if (v107 == v105)
        {
          v122 = &v113[16 * ((v107 - v105) >> 4)];
          v106 = &v113[80 * v112];
          v107 = v114 + 80;
          if (v105)
            goto LABEL_158;
        }
        else
        {
          v118 = &v113[16 * ((v107 - v105) >> 4)];
          do
          {
            *((_OWORD *)v118 - 5) = *((_OWORD *)v107 - 5);
            v119 = *((_OWORD *)v107 - 4);
            v120 = *((_OWORD *)v107 - 3);
            v121 = *((_OWORD *)v107 - 2);
            v122 = v118 - 80;
            *(_OWORD *)(v118 - 23) = *(_OWORD *)(v107 - 23);
            *((_OWORD *)v118 - 3) = v120;
            *((_OWORD *)v118 - 2) = v121;
            *((_OWORD *)v118 - 4) = v119;
            v107 -= 80;
            v118 -= 80;
          }
          while (v107 != v105);
          v106 = &v113[80 * v112];
          v107 = v114 + 80;
          if (v105)
LABEL_158:
            operator delete(v105);
        }
        v105 = v122;
        v102 += 80;
        if (v102 != v101)
          continue;
        break;
      }
LABEL_163:
      v189[1] = v107;
      v189[2] = v106;
      v189[0] = v105;
      v66 = a1;
      if (v100 < v174)
      {
LABEL_141:
        *(_QWORD *)v100 = v105;
        *((_QWORD *)v100 + 1) = v107;
        *((void **)v100 + 2) = v189[2];
        v100 += 24;
        v96 = v171 + 24;
        if (v171 + 24 == v169)
          goto LABEL_185;
        continue;
      }
      break;
    }
    v123 = 0xAAAAAAAAAAAAAAABLL * ((v100 - v99) >> 3) + 1;
    if (v123 > 0xAAAAAAAAAAAAAAALL)
    {
      v178 = v100;
      v179 = v174;
      v177 = v99;
      sub_20E9DEF2C();
    }
    if (0x5555555555555556 * ((v174 - v99) >> 3) > v123)
      v123 = 0x5555555555555556 * ((v174 - v99) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v174 - v99) >> 3) >= 0x555555555555555)
      v124 = 0xAAAAAAAAAAAAAAALL;
    else
      v124 = v123;
    if (v124 > 0xAAAAAAAAAAAAAAALL)
    {
      v178 = v100;
      v179 = v174;
      v177 = v99;
      sub_20E877A38();
    }
    v125 = (char *)operator new(24 * v124);
    v175 = v125;
    v126 = &v125[8 * ((v100 - v99) >> 3)];
    *(_QWORD *)v126 = v105;
    *((_QWORD *)v126 + 1) = v107;
    *((_QWORD *)v126 + 2) = v106;
    memset(v189, 0, 24);
    v127 = v126;
    if (v100 != v99)
    {
      v127 = &v125[8 * ((v100 - v99) >> 3)];
      v128 = v100;
      do
      {
        v129 = *(_OWORD *)(v128 - 24);
        v128 -= 24;
        *(_OWORD *)(v127 - 24) = v129;
        v127 -= 24;
        *((_QWORD *)v127 + 2) = *((_QWORD *)v128 + 2);
        *(_QWORD *)v128 = 0;
        *((_QWORD *)v128 + 1) = 0;
        *((_QWORD *)v128 + 2) = 0;
      }
      while (v128 != v99);
      v130 = v100;
      do
      {
        v132 = (void *)*((_QWORD *)v130 - 3);
        v130 -= 24;
        v131 = v132;
        if (v132)
        {
          *((_QWORD *)v100 - 2) = v131;
          operator delete(v131);
        }
        v100 = v130;
      }
      while (v130 != v99);
    }
    if (v99)
      operator delete(v99);
    v174 = &v175[24 * v124];
    if (v189[0])
      operator delete(v189[0]);
    v99 = v127;
    v66 = a1;
    v100 = v126 + 24;
    v96 = v171 + 24;
    if (v171 + 24 != v169)
      continue;
    break;
  }
LABEL_185:
  v178 = v100;
  v179 = v174;
  v177 = v99;
  v63 = a2;
LABEL_186:
  sub_20FCCDFEC((uint64_t *)&v184, &v182, &v180, &v177, (int64x2_t *)((char *)v66 + 72));
  v133 = (char *)v177;
  if (v177)
  {
    v134 = v178;
    v135 = v177;
    if (v178 != v177)
    {
      v136 = v178;
      do
      {
        v138 = (void *)*((_QWORD *)v136 - 3);
        v136 -= 24;
        v137 = v138;
        if (v138)
        {
          *((_QWORD *)v134 - 2) = v137;
          operator delete(v137);
        }
        v134 = v136;
      }
      while (v136 != v133);
      v135 = v177;
    }
    v178 = v133;
    operator delete(v135);
  }
  v139 = (char *)v180;
  if (v180)
  {
    v140 = v181;
    v141 = v180;
    if (v181 != v180)
    {
      v142 = v181;
      do
      {
        v144 = (void *)*((_QWORD *)v142 - 3);
        v142 -= 24;
        v143 = v144;
        if (v144)
        {
          *((_QWORD *)v140 - 2) = v143;
          operator delete(v143);
        }
        v140 = v142;
      }
      while (v142 != v139);
      v141 = v180;
    }
    v181 = v139;
    operator delete(v141);
  }
  v145 = (char *)v182;
  if (v182)
  {
    v146 = v183;
    v147 = v182;
    if (v183 != v182)
    {
      v148 = v183;
      do
      {
        v150 = (void *)*((_QWORD *)v148 - 3);
        v148 -= 24;
        v149 = v150;
        if (v150)
        {
          *((_QWORD *)v146 - 2) = v149;
          operator delete(v149);
        }
        v146 = v148;
      }
      while (v148 != v145);
      v147 = v182;
    }
    v183 = v145;
    operator delete(v147);
  }
  v151 = (char *)v184;
  if (v184)
  {
    v152 = v185;
    v153 = v184;
    if (v185 != v184)
    {
      v154 = v185;
      do
      {
        v156 = (void *)*((_QWORD *)v154 - 3);
        v154 -= 24;
        v155 = v156;
        if (v156)
        {
          *((_QWORD *)v152 - 2) = v155;
          operator delete(v155);
        }
        v152 = v154;
      }
      while (v154 != v151);
      v153 = v184;
    }
    v185 = v151;
    operator delete(v153);
  }
  v66[6].i8[0] = *(_BYTE *)(v63 + 168);
  v158 = (char *)v66[4].i64[1];
  v157 = (char *)v66[5].i64[0];
  if (v158 != v157)
  {
    v159 = v157 - v158 - 176;
    v160 = (char *)v66[4].i64[1];
    if (v159 < 0xB0)
      goto LABEL_245;
    v161 = v159 / 0xB0 + 1;
    v160 = &v158[176 * (v161 & 0x3FFFFFFFFFFFFFELL)];
    v162 = v158 + 344;
    v163 = v161 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v164 = **((_DWORD **)v162 - 3);
      *(v162 - 44) = **((_DWORD **)v162 - 25);
      *v162 = v164;
      v162 += 88;
      v163 -= 2;
    }
    while (v163);
    if (v161 != (v161 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_245:
      do
      {
        *((_DWORD *)v160 + 42) = **((_DWORD **)v160 + 18);
        v160 += 176;
      }
      while (v160 != v157);
    }
  }
  return v66;
}

void sub_20FCD00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t *a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  uint64_t v46;

  sub_20E9DD680((void **)&a17);
  sub_20E9DD680(&a20);
  sub_20E9DD680(&a23);
  sub_20E9DD680((void **)&a26);
  sub_20E947294(a12);
  sub_20E9472CC(a11);
  sub_20E8FB1C0(v46, *(_QWORD **)(v46 + 8));
  _Unwind_Resume(a1);
}

void sub_20FCD02D4(char **a1, uint64_t **a2)
{
  uint64_t *v3;
  int64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  char **v22;
  char **v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char **v33;
  char **v34;
  char *v35;
  char *v36;
  char **v37;
  uint64_t *v38;
  char *__p;
  char *v40;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v38 = a2[1];
  v4 = (char *)v38 - (char *)*a2;
  if (v38 != *a2)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v5 > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[24 * v5];
    if (v38 != v3)
    {
      v37 = a1;
      while (1)
      {
        __p = 0;
        v40 = 0;
        v7 = *v3;
        v8 = v3[1];
        v9 = v8 - *v3;
        if (v8 != *v3)
          break;
        v13 = 0;
LABEL_30:
        v22 = (char **)v37[1];
        v21 = (unint64_t)v37[2];
        if ((unint64_t)v22 < v21)
        {
          *v22 = 0;
          v22[1] = 0;
          v22[1] = v13;
          v22[2] = 0;
          *v22 = __p;
          v22[2] = v40;
          v37[1] = (char *)(v22 + 3);
        }
        else
        {
          v23 = (char **)*v37;
          v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - *v37) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E9DEF2C();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v23) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          if (v27 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v28 = (char *)operator new(24 * v27);
          v29 = &v28[24 * v24];
          *(_QWORD *)v29 = __p;
          *((_QWORD *)v29 + 1) = v13;
          v30 = &v28[24 * v27];
          *((_QWORD *)v29 + 2) = v40;
          v31 = v29 + 24;
          if (v22 == v23)
          {
            *v37 = v29;
            v37[1] = v31;
            v37[2] = v30;
          }
          else
          {
            do
            {
              v32 = *(_OWORD *)(v22 - 3);
              v22 -= 3;
              *(_OWORD *)(v29 - 24) = v32;
              v29 -= 24;
              *((_QWORD *)v29 + 2) = v22[2];
              *v22 = 0;
              v22[1] = 0;
              v22[2] = 0;
            }
            while (v22 != v23);
            v22 = (char **)*v37;
            v33 = (char **)v37[1];
            *v37 = v29;
            v37[1] = v31;
            v37[2] = v30;
            if (v33 != v22)
            {
              v34 = v33;
              do
              {
                v36 = *(v34 - 3);
                v34 -= 3;
                v35 = v36;
                if (v36)
                {
                  *(v33 - 2) = v35;
                  operator delete(v35);
                }
                v33 = v34;
              }
              while (v34 != v22);
            }
          }
          if (v22)
            operator delete(v22);
          v37[1] = v31;
        }
        v3 += 3;
        if (v3 == v38)
          return;
      }
      v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E9DEF2C();
      v11 = (char *)operator new(v9);
      __p = v11;
      v40 = &v11[24 * v10];
      while (1)
      {
        if (v11 < v40)
        {
          v12 = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v11 = *(_OWORD *)v7;
          *((_QWORD *)v11 + 2) = v12;
          v13 = v11 + 24;
        }
        else
        {
          v14 = __p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - __p) >> 3) + 1;
          if (v15 > 0xAAAAAAAAAAAAAAALL)
            sub_20E9DEF2C();
          if (0x5555555555555556 * ((v40 - __p) >> 3) > v15)
            v15 = 0x5555555555555556 * ((v40 - __p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v40 - __p) >> 3) >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v15;
          if (v16)
          {
            if (v16 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v17 = (char *)operator new(24 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * ((v11 - __p) >> 3)];
          v19 = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v18 = *(_OWORD *)v7;
          *((_QWORD *)v18 + 2) = v19;
          v13 = v18 + 24;
          if (v11 == __p)
          {
            __p = &v17[8 * ((v11 - __p) >> 3)];
            v40 = &v17[24 * v16];
            v14 = v11;
          }
          else
          {
            do
            {
              v20 = *(_OWORD *)(v11 - 24);
              *((_QWORD *)v18 - 1) = *((_QWORD *)v11 - 1);
              *(_OWORD *)(v18 - 24) = v20;
              v18 -= 24;
              v11 -= 24;
            }
            while (v11 != __p);
            __p = v18;
            v40 = &v17[24 * v16];
            if (!v14)
              goto LABEL_11;
          }
          operator delete(v14);
        }
LABEL_11:
        v7 += 24;
        v11 = v13;
        if (v7 == v8)
          goto LABEL_30;
      }
    }
  }
}

void sub_20FCD065C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E9DD680(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD0670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  sub_20E9DD680(a10);
  _Unwind_Resume(a1);
}

void sub_20FCD06C0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20FCD0898(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_20FCD0898(*a1);
    sub_20FCD0898(a1[1]);
    v2 = (void *)a1[24];
    if (v2)
    {
      a1[25] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_20FCD08E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 800;
        *(_QWORD *)(a1 + 16) = v2 - 800;
        v5 = *(void **)(v2 - 56);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 48) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 800;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FCD094C(uint64_t a1)
{
  sub_20E9467F8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20FCD0980@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;

  v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a4 + 144) = v8;
  *(_QWORD *)(a4 + 160) = *(_QWORD *)(a3 + 160);
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 80) = v9;
  v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 112) = v10;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 16) = v11;
  v12 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 48) = v12;
  memcpy((void *)(a4 + 168), (const void *)(a3 + 168), 0x120uLL);
  memcpy((void *)(a4 + 456), (const void *)(a3 + 456), 0x120uLL);
  *(_OWORD *)(a4 + 744) = 0u;
  *(_OWORD *)(a4 + 760) = 0u;
  *(_OWORD *)(a4 + 776) = 0u;
  *(_QWORD *)(a4 + 792) = 0;
  v13 = *(_QWORD *)(a3 + 752);
  v14 = *(_QWORD *)(a3 + 744);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 3);
    if (v16 >= 0x492492492492493)
      sub_20E92CED8();
    v17 = (char *)operator new(v15);
    *(_QWORD *)(a4 + 744) = v17;
    *(_QWORD *)(a4 + 752) = v17;
    *(_QWORD *)(a4 + 760) = &v17[56 * v16];
    do
    {
      if ((unint64_t)v17 < *(_QWORD *)(a4 + 760))
      {
        *(_QWORD *)v17 = *(_QWORD *)v14;
        v18 = *(_QWORD *)(v14 + 24);
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v14 + 8);
        *((_QWORD *)v17 + 3) = v18;
        v19 = *(_QWORD *)(v14 + 48);
        *((_OWORD *)v17 + 2) = *(_OWORD *)(v14 + 32);
        *((_QWORD *)v17 + 6) = v19;
        v17 += 56;
        *(_QWORD *)(a4 + 752) = v17;
      }
      else
      {
        v17 = sub_20FCDFDE4((void **)(a4 + 744), (_QWORD *)v14, v14 + 8, v14 + 32);
      }
      *(_QWORD *)(a4 + 752) = v17;
      v14 += 56;
    }
    while (v14 != v13);
  }
  result = *(__n128 *)(a3 + 816);
  *(__n128 *)(a4 + 768) = result;
  *(_QWORD *)(a4 + 784) = a1;
  *(_DWORD *)(a4 + 792) = a2;
  return result;
}

void sub_20FCD0B00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 752) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20FCD0B20(uint64_t a1, _QWORD *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  char *i;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v9 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    v13 = *(_QWORD **)a1;
    v14 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x492492492492492)
      sub_20EABADD4();
    v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x249249249249249)
      v17 = 0x492492492492492;
    else
      v17 = v15;
    if (v17 > 0x492492492492492)
      sub_20E877A38();
    v18 = 56 * v17;
    v19 = (char *)operator new(56 * v17);
    v20 = &v19[56 * v14];
    *(_QWORD *)v20 = *a2;
    v21 = *a3;
    *((_QWORD *)v20 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v20 + 8) = v21;
    v22 = *a4;
    *((_QWORD *)v20 + 6) = *((_QWORD *)a4 + 2);
    *((_OWORD *)v20 + 2) = v22;
    for (i = v20 + 56; v9 != v13; *((_OWORD *)v20 + 2) = v25)
    {
      v23 = *(v9 - 7);
      v9 -= 7;
      *((_QWORD *)v20 - 7) = v23;
      v20 -= 56;
      v24 = *(_OWORD *)(v9 + 1);
      *((_QWORD *)v20 + 3) = v9[3];
      *(_OWORD *)(v20 + 8) = v24;
      v25 = *((_OWORD *)v9 + 2);
      *((_QWORD *)v20 + 6) = v9[6];
    }
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = &v19[v18];
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v9 = *a2;
    v10 = *a3;
    v9[3] = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v9 + 1) = v10;
    v11 = *a4;
    v9[6] = *((_QWORD *)a4 + 2);
    *((_OWORD *)v9 + 2) = v11;
    i = (char *)(v9 + 7);
  }
  *(_QWORD *)(a1 + 8) = i;
  return i - 56;
}

__n128 sub_20FCD0CB8@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 result;

  v4 = a2 + 744;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_QWORD *)(a2 + 824) = 0xBFF0000000000000;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = a1[7];
  v13 = a1[8];
  v14 = a1[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a1 + 20);
  *(_OWORD *)(a2 + 128) = v13;
  *(_OWORD *)(a2 + 144) = v14;
  *(_OWORD *)(a2 + 96) = v11;
  *(_OWORD *)(a2 + 112) = v12;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v10;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  v15 = *(__int128 *)((char *)a1 + 168);
  v16 = *(__int128 *)((char *)a1 + 264);
  v17 = *(__int128 *)((char *)a1 + 280);
  v18 = *(__int128 *)((char *)a1 + 296);
  v19 = *(__int128 *)((char *)a1 + 312);
  v20 = *(__int128 *)((char *)a1 + 328);
  v21 = *(__int128 *)((char *)a1 + 344);
  v22 = *(__int128 *)((char *)a1 + 360);
  v23 = *(__int128 *)((char *)a1 + 376);
  v24 = *(__int128 *)((char *)a1 + 392);
  v25 = *(__int128 *)((char *)a1 + 408);
  v26 = *(__int128 *)((char *)a1 + 424);
  v27 = *(__int128 *)((char *)a1 + 440);
  v28 = *(__int128 *)((char *)a1 + 184);
  v29 = *(__int128 *)((char *)a1 + 200);
  v30 = *(__int128 *)((char *)a1 + 216);
  v31 = *(__int128 *)((char *)a1 + 232);
  *(_OWORD *)(a2 + 248) = *(__int128 *)((char *)a1 + 248);
  *(_OWORD *)(a2 + 232) = v31;
  *(_OWORD *)(a2 + 216) = v30;
  *(_OWORD *)(a2 + 200) = v29;
  *(_OWORD *)(a2 + 168) = v15;
  v32 = (_OWORD *)(a2 + 168);
  *(_OWORD *)(a2 + 184) = v28;
  v32[16] = v26;
  v32[17] = v27;
  v32[14] = v24;
  v32[15] = v25;
  v32[12] = v22;
  v32[13] = v23;
  v32[10] = v20;
  v32[11] = v21;
  v32[8] = v18;
  v32[9] = v19;
  v32[6] = v16;
  v32[7] = v17;
  v33 = *(__int128 *)((char *)a1 + 456);
  v34 = *(__int128 *)((char *)a1 + 472);
  v35 = *(__int128 *)((char *)a1 + 488);
  v36 = *(__int128 *)((char *)a1 + 504);
  v37 = *(__int128 *)((char *)a1 + 520);
  v38 = *(__int128 *)((char *)a1 + 536);
  v39 = *(__int128 *)((char *)a1 + 552);
  v40 = *(__int128 *)((char *)a1 + 568);
  v41 = *(__int128 *)((char *)a1 + 584);
  v42 = *(__int128 *)((char *)a1 + 600);
  v43 = *(__int128 *)((char *)a1 + 616);
  v44 = *(__int128 *)((char *)a1 + 632);
  v45 = *(__int128 *)((char *)a1 + 648);
  v46 = *(__int128 *)((char *)a1 + 664);
  v47 = *(__int128 *)((char *)a1 + 680);
  v48 = *(__int128 *)((char *)a1 + 696);
  v49 = *(__int128 *)((char *)a1 + 728);
  *(_OWORD *)(a2 + 712) = *(__int128 *)((char *)a1 + 712);
  *(_OWORD *)(a2 + 728) = v49;
  *(_OWORD *)(a2 + 680) = v47;
  *(_OWORD *)(a2 + 696) = v48;
  *(_OWORD *)(a2 + 648) = v45;
  *(_OWORD *)(a2 + 664) = v46;
  *(_OWORD *)(a2 + 616) = v43;
  *(_OWORD *)(a2 + 632) = v44;
  *(_OWORD *)(a2 + 584) = v41;
  *(_OWORD *)(a2 + 600) = v42;
  *(_OWORD *)(a2 + 552) = v39;
  *(_OWORD *)(a2 + 568) = v40;
  *(_OWORD *)(a2 + 520) = v37;
  *(_OWORD *)(a2 + 536) = v38;
  *(_OWORD *)(a2 + 488) = v35;
  *(_OWORD *)(a2 + 504) = v36;
  *(_OWORD *)(a2 + 456) = v33;
  *(_OWORD *)(a2 + 472) = v34;
  v50 = *((_QWORD *)a1 + 94);
  v51 = *((_QWORD *)a1 + 93);
  v52 = v50 - v51;
  if (v50 != v51)
  {
    v53 = 0x6DB6DB6DB6DB6DB7 * (v52 >> 3);
    if (v53 >= 0x492492492492493)
      sub_20EABADD4();
    v54 = (char *)operator new(v52);
    *(_QWORD *)(a2 + 744) = v54;
    *(_QWORD *)(a2 + 752) = v54;
    *(_QWORD *)(a2 + 760) = &v54[56 * v53];
    do
    {
      v55 = v51 + 32;
      sub_20FCD0B20(v4, (_QWORD *)v51, (__int128 *)(v51 + 8), (__int128 *)(v51 + 32));
      v51 += 56;
    }
    while (v55 + 24 != v50);
  }
  result = (__n128)a1[48];
  *(__n128 *)(a2 + 816) = result;
  return result;
}

void sub_20FCD0E7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 752) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FCD0E9C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 992);
  if (v4 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_DWORD *)(a2 + 992);
    if (v4 <= 7)
      goto LABEL_3;
  }
  else if (v4 <= 7)
  {
LABEL_3:
    if (v4 > 3)
    {
      if (v4 > 5)
      {
        if (v4 == 6)
          sub_20EB420E0((_QWORD *)a2, (char **)&v15);
        else
          sub_20EB30308(a2, (uint64_t)&v15);
      }
      else if (v4 == 5)
      {
        sub_20EB2D3B4((_QWORD *)a2, (char **)&v15);
      }
      else
      {
        sub_20EB2C934((_QWORD *)a2, (char **)&v15);
      }
    }
    else if (v4 > 1)
    {
      if (v4 == 2)
        sub_20EB409F8((_QWORD *)a2, (char **)&v15);
      else
        sub_20EB2B1E0((_QWORD *)a2, (char **)&v15);
    }
    else
    {
      if (!v4)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      sub_20EB4308C(a2, (char **)&v15);
    }
    goto LABEL_34;
  }
  if (v4 <= 0xB)
  {
    if (v4 > 9)
    {
      if (v4 == 10)
        sub_20EB2F158(a2, (unint64_t *)&v15);
      else
        sub_20EB38A1C(a2, (uint64_t)&v15);
    }
    else if (v4 == 9)
    {
      sub_20EB34C30(a2, (uint64_t)&v15);
    }
    else
    {
      sub_20EB2DE34((uint64_t *)a2, (char **)&v15);
    }
    goto LABEL_34;
  }
  if (v4 > 0xD)
  {
    if (v4 == 14)
      sub_20EB2FA30(a2, (unint64_t *)&v15);
    else
      sub_20EB3C850(a2, (uint64_t)&v15);
    goto LABEL_34;
  }
  if (v4 != 13)
  {
    sub_20EB2E6D8((_QWORD *)a2, (char **)&v15);
LABEL_34:
    v13 = v16;
    *(_QWORD *)&v12 = v15;
    *(_OWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v13;
    return *(double *)&v12;
  }
  v5 = operator new(0x128uLL);
  v6 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  *(_OWORD *)((char *)v5 + 120) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)((char *)v5 + 136) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)((char *)v5 + 152) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)((char *)v5 + 168) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)((char *)v5 + 72) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)v5 + 88) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)((char *)v5 + 104) = *(_OWORD *)(a2 + 200);
  v8 = *(_OWORD *)(a2 + 376);
  v9 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)((char *)v5 + 264) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)((char *)v5 + 280) = v8;
  *(_OWORD *)((char *)v5 + 248) = v9;
  v10 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)((char *)v5 + 232) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)((char *)v5 + 216) = v10;
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)((char *)v5 + 200) = *(_OWORD *)(a2 + 296);
  *((_QWORD *)v5 + 8) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)((char *)v5 + 184) = v11;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = (char *)v5 + 296;
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = (char *)v5 + 296;
  return *(double *)&v12;
}

double sub_20FCD113C(int a1, uint64_t *a2, uint64_t *a3, double a4, double a5, float64x2_t a6)
{
  uint64_t v8;
  int64x2_t v9;
  int v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  int64x2_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  unsigned int v44;
  double result;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  __int128 v57;
  __int128 v58;
  const void *v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t *v69;
  _QWORD *exception;
  _QWORD *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  _BYTE v76[80];
  int64x2_t v77;
  char v78;
  _OWORD v79[45];
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;

  switch(a1)
  {
    case -1:
    case 5:
      exception = __cxa_allocate_exception(0x580uLL);
      v71 = sub_20F4657D0(exception, "Unsupported lens type!");
      __cxa_throw(v71, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
    case 0:
      v8 = operator new();
      v9 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v9;
      *(int64x2_t *)(v8 + 16) = v9;
      *(int64x2_t *)(v8 + 32) = v9;
      *(int64x2_t *)(v8 + 48) = v9;
      *(int64x2_t *)(v8 + 64) = v9;
      *(int64x2_t *)(v8 + 80) = v9;
      *(int64x2_t *)(v8 + 96) = v9;
      *(int64x2_t *)(v8 + 112) = v9;
      *(int64x2_t *)(v8 + 128) = v9;
      *(int64x2_t *)(v8 + 144) = v9;
      *(_BYTE *)(v8 + 160) = 0;
      v10 = 1;
      goto LABEL_25;
    case 1:
      v8 = operator new();
      v11 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v11;
      *(int64x2_t *)(v8 + 16) = v11;
      *(int64x2_t *)(v8 + 32) = v11;
      *(int64x2_t *)(v8 + 48) = v11;
      *(int64x2_t *)(v8 + 64) = v11;
      *(int64x2_t *)(v8 + 80) = v11;
      *(int64x2_t *)(v8 + 96) = v11;
      *(int64x2_t *)(v8 + 112) = v11;
      *(int64x2_t *)(v8 + 128) = v11;
      *(int64x2_t *)(v8 + 144) = v11;
      *(_BYTE *)(v8 + 160) = 0;
      *(_QWORD *)(v8 + 184) = 0x7FF8000000000000;
      *(_OWORD *)(v8 + 168) = xmmword_2103BCA58;
      *(int64x2_t *)(v8 + 192) = v11;
      *(_QWORD *)&a5 = 0x200000003;
      *(_QWORD *)(v8 + 208) = 0x200000003;
      *(int64x2_t *)(v8 + 216) = v11;
      *(int64x2_t *)(v8 + 232) = v11;
      v10 = 2;
      goto LABEL_25;
    case 2:
      v8 = operator new();
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v12;
      *(int64x2_t *)(v8 + 16) = v12;
      *(int64x2_t *)(v8 + 32) = v12;
      *(int64x2_t *)(v8 + 48) = v12;
      *(int64x2_t *)(v8 + 64) = v12;
      *(int64x2_t *)(v8 + 80) = v12;
      *(int64x2_t *)(v8 + 96) = v12;
      *(int64x2_t *)(v8 + 112) = v12;
      *(int64x2_t *)(v8 + 128) = v12;
      *(int64x2_t *)(v8 + 144) = v12;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v12;
      *(int64x2_t *)(v8 + 184) = v12;
      *(_BYTE *)(v8 + 468) = 0;
      v10 = 3;
      goto LABEL_25;
    case 3:
      v8 = operator new();
      v13 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v13;
      *(int64x2_t *)(v8 + 16) = v13;
      *(int64x2_t *)(v8 + 32) = v13;
      *(int64x2_t *)(v8 + 48) = v13;
      *(int64x2_t *)(v8 + 64) = v13;
      *(int64x2_t *)(v8 + 80) = v13;
      *(int64x2_t *)(v8 + 96) = v13;
      *(int64x2_t *)(v8 + 112) = v13;
      *(int64x2_t *)(v8 + 128) = v13;
      *(int64x2_t *)(v8 + 144) = v13;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v13;
      *(int64x2_t *)(v8 + 184) = v13;
      *(_BYTE *)(v8 + 468) = 0;
      v10 = 4;
      goto LABEL_25;
    case 4:
      v8 = operator new();
      v14 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v14;
      *(int64x2_t *)(v8 + 16) = v14;
      *(int64x2_t *)(v8 + 32) = v14;
      *(int64x2_t *)(v8 + 48) = v14;
      *(int64x2_t *)(v8 + 64) = v14;
      *(int64x2_t *)(v8 + 80) = v14;
      *(int64x2_t *)(v8 + 96) = v14;
      *(int64x2_t *)(v8 + 112) = v14;
      *(int64x2_t *)(v8 + 128) = v14;
      *(int64x2_t *)(v8 + 144) = v14;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v14;
      *(int64x2_t *)(v8 + 184) = v14;
      *(_BYTE *)(v8 + 468) = 0;
      v10 = 5;
      goto LABEL_25;
    case 6:
      v78 = 0;
      v72 = vdupq_n_s64(0x7FF8000000000000uLL);
      v73 = v72;
      v74 = v72;
      v75 = v72;
      *(int64x2_t *)v76 = v72;
      *(int64x2_t *)&v76[16] = v72;
      *(int64x2_t *)&v76[32] = v72;
      *(int64x2_t *)&v76[48] = v72;
      *(int64x2_t *)&v76[64] = v72;
      v77 = v72;
      v79[0] = v72;
      v79[1] = v72;
      BYTE12(v79[18]) = 0;
      v79[19] = 0u;
      *(_OWORD *)((char *)&v79[20] + 8) = 0u;
      *((_QWORD *)&v79[21] + 1) = 0;
      *(_OWORD *)((char *)&v79[22] + 8) = 0u;
      *((_QWORD *)&v79[23] + 1) = 0;
      *(_QWORD *)&v79[20] = 0x3FF0000000000000;
      *(_QWORD *)&v79[22] = 0x3FF0000000000000;
      *(_QWORD *)&v79[24] = 0x3FF0000000000000;
      *(_OWORD *)((char *)&v79[24] + 8) = 0u;
      *(_OWORD *)((char *)&v79[25] + 8) = xmmword_2102E3C50;
      *((_QWORD *)&v88 + 1) = 0xBFF0000000000000;
      v89 = 0xFFEFFFFFFFFFFFFFLL;
      v15 = operator new();
      v16 = v72;
      *(int64x2_t *)(v15 + 32) = v72;
      *(int64x2_t *)(v15 + 48) = v16;
      *(_QWORD *)(v15 + 64) = *(_QWORD *)v76;
      v17 = v73;
      *(int64x2_t *)v15 = v72;
      *(int64x2_t *)(v15 + 16) = v17;
      *(_OWORD *)(v15 + 88) = *(_OWORD *)&v76[24];
      *(_OWORD *)(v15 + 104) = *(_OWORD *)&v76[40];
      *(_OWORD *)(v15 + 120) = *(_OWORD *)&v76[56];
      *(_QWORD *)(v15 + 136) = *(_QWORD *)&v76[72];
      *(_OWORD *)(v15 + 72) = *(_OWORD *)&v76[8];
      *(_BYTE *)(v15 + 160) = v78;
      *(int64x2_t *)(v15 + 144) = v77;
      memcpy((void *)(v15 + 168), v79, 0x12DuLL);
      *(_QWORD *)(v15 + 472) = 0;
      *(_QWORD *)(v15 + 480) = 0;
      v18 = v79[23];
      *(_OWORD *)(v15 + 520) = v79[22];
      *(_OWORD *)(v15 + 536) = v18;
      *(_QWORD *)(v15 + 552) = *(_QWORD *)&v79[24];
      a5 = *(double *)&v79[20];
      v19 = v79[21];
      *(_OWORD *)(v15 + 488) = v79[20];
      *(_OWORD *)(v15 + 504) = v19;
      *(_OWORD *)(v15 + 560) = *(_OWORD *)((char *)&v79[24] + 8);
      *(_DWORD *)(v15 + 992) = 7;
      *(_QWORD *)(v15 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v15 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      a4 = -1.0;
      *(_OWORD *)(v15 + 1424) = xmmword_2102E3C60;
      v20 = *a2;
      *a2 = v15;
      if (!v20)
        goto LABEL_27;
      goto LABEL_26;
    case 7:
      v8 = operator new();
      v21 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v21;
      *(int64x2_t *)(v8 + 16) = v21;
      *(int64x2_t *)(v8 + 32) = v21;
      *(int64x2_t *)(v8 + 48) = v21;
      *(int64x2_t *)(v8 + 64) = v21;
      *(int64x2_t *)(v8 + 80) = v21;
      *(int64x2_t *)(v8 + 96) = v21;
      *(int64x2_t *)(v8 + 112) = v21;
      *(int64x2_t *)(v8 + 128) = v21;
      *(int64x2_t *)(v8 + 144) = v21;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v21;
      *(int64x2_t *)(v8 + 184) = v21;
      *(int64x2_t *)(v8 + 200) = v21;
      *(_QWORD *)(v8 + 216) = 0x7FF8000000000000;
      *(_BYTE *)(v8 + 492) = 0;
      v10 = 8;
      goto LABEL_25;
    case 8:
      v78 = 0;
      v72 = vdupq_n_s64(0x7FF8000000000000uLL);
      v73 = v72;
      v74 = v72;
      v75 = v72;
      *(int64x2_t *)v76 = v72;
      *(int64x2_t *)&v76[16] = v72;
      *(int64x2_t *)&v76[32] = v72;
      *(int64x2_t *)&v76[48] = v72;
      *(int64x2_t *)&v76[64] = v72;
      v77 = v72;
      v79[0] = v72;
      v79[1] = v72;
      v79[2] = v72;
      *(_QWORD *)&v79[3] = 0x7FF8000000000000;
      BYTE4(v79[20]) = 0;
      *(_OWORD *)((char *)&v79[20] + 8) = 0u;
      memset(&v79[22], 0, 24);
      memset(&v79[24], 0, 24);
      *((_QWORD *)&v79[21] + 1) = 0x3FF0000000000000;
      *((_QWORD *)&v79[23] + 1) = 0x3FF0000000000000;
      *((_QWORD *)&v79[25] + 1) = 0x3FF0000000000000;
      v79[26] = 0u;
      *(_QWORD *)&v79[27] = 0x7FF8000000000000;
      *((_QWORD *)&v79[27] + 1) = 0xFFEFFFFFFFFFFFFFLL;
      v90 = xmmword_2102E3C60;
      v22 = operator new();
      v23 = v72;
      *(int64x2_t *)(v22 + 32) = v72;
      *(int64x2_t *)(v22 + 48) = v23;
      *(_QWORD *)(v22 + 64) = *(_QWORD *)v76;
      v24 = v73;
      *(int64x2_t *)v22 = v72;
      *(int64x2_t *)(v22 + 16) = v24;
      *(_OWORD *)(v22 + 88) = *(_OWORD *)&v76[24];
      *(_OWORD *)(v22 + 104) = *(_OWORD *)&v76[40];
      *(_OWORD *)(v22 + 120) = *(_OWORD *)&v76[56];
      *(_QWORD *)(v22 + 136) = *(_QWORD *)&v76[72];
      *(_OWORD *)(v22 + 72) = *(_OWORD *)&v76[8];
      *(_BYTE *)(v22 + 160) = v78;
      *(int64x2_t *)(v22 + 144) = v77;
      memcpy((void *)(v22 + 168), v79, 0x145uLL);
      *(_QWORD *)(v22 + 496) = 0;
      *(_QWORD *)(v22 + 504) = 0;
      v25 = *(_OWORD *)((char *)&v79[24] + 8);
      *(_OWORD *)(v22 + 544) = *(_OWORD *)((char *)&v79[23] + 8);
      *(_OWORD *)(v22 + 560) = v25;
      *(_QWORD *)(v22 + 576) = *((_QWORD *)&v79[25] + 1);
      a5 = *((double *)&v79[21] + 1);
      v26 = *(_OWORD *)((char *)&v79[22] + 8);
      *(_OWORD *)(v22 + 512) = *(_OWORD *)((char *)&v79[21] + 8);
      *(_OWORD *)(v22 + 528) = v26;
      *(_OWORD *)(v22 + 584) = v79[26];
      *(_DWORD *)(v22 + 992) = 9;
      *(_QWORD *)(v22 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v22 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      a4 = -1.0;
      *(_OWORD *)(v22 + 1424) = xmmword_2102E3C60;
      v20 = *a2;
      *a2 = v22;
      if (!v20)
        goto LABEL_27;
      goto LABEL_26;
    case 9:
      v8 = operator new();
      v41 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v41;
      *(int64x2_t *)(v8 + 16) = v41;
      *(int64x2_t *)(v8 + 32) = v41;
      *(int64x2_t *)(v8 + 48) = v41;
      *(int64x2_t *)(v8 + 64) = v41;
      *(int64x2_t *)(v8 + 80) = v41;
      *(int64x2_t *)(v8 + 96) = v41;
      *(int64x2_t *)(v8 + 112) = v41;
      *(int64x2_t *)(v8 + 128) = v41;
      *(int64x2_t *)(v8 + 144) = v41;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v41;
      *(int64x2_t *)(v8 + 184) = v41;
      *(int64x2_t *)(v8 + 200) = v41;
      *(int64x2_t *)(v8 + 216) = v41;
      *(int64x2_t *)(v8 + 232) = v41;
      *(int64x2_t *)(v8 + 248) = v41;
      *(_QWORD *)(v8 + 264) = 0x7FF8000000000000;
      *(_QWORD *)(v8 + 272) = 0x7FF8000000000000;
      *(_BYTE *)(v8 + 656) = 0;
      v10 = 10;
      goto LABEL_25;
    case 10:
      v78 = 0;
      v72 = vdupq_n_s64(0x7FF8000000000000uLL);
      v73 = v72;
      v74 = v72;
      v75 = v72;
      *(int64x2_t *)v76 = v72;
      *(int64x2_t *)&v76[16] = v72;
      *(int64x2_t *)&v76[32] = v72;
      *(int64x2_t *)&v76[48] = v72;
      *(int64x2_t *)&v76[64] = v72;
      v77 = v72;
      *(_QWORD *)&v79[0] = 0x7FF8000000000000;
      *((_QWORD *)&v79[0] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[1] = 0x7FF8000000000000;
      *((_QWORD *)&v79[1] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[2] = 0x7FF8000000000000;
      *((_QWORD *)&v79[2] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[3] = 0x7FF8000000000000;
      *((_QWORD *)&v79[3] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[4] = 0x7FF8000000000000;
      *((_QWORD *)&v79[4] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[5] = 0x7FF8000000000000;
      *((_QWORD *)&v79[5] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[6] = 0x7FF8000000000000;
      *((_QWORD *)&v79[6] + 1) = 0x7FF8000000000000;
      BYTE8(v79[30]) = 0;
      v79[31] = 0u;
      *((_QWORD *)&v79[35] + 1) = 0;
      *((_QWORD *)&v79[33] + 1) = 0;
      *(_OWORD *)((char *)&v79[34] + 8) = 0u;
      *(_OWORD *)((char *)&v79[32] + 8) = 0u;
      *(_QWORD *)&v79[32] = 0x3FF0000000000000;
      *(_QWORD *)&v79[34] = 0x3FF0000000000000;
      *(_QWORD *)&v79[36] = 0x3FF0000000000000;
      *(_OWORD *)((char *)&v79[36] + 8) = 0u;
      *((_QWORD *)&v79[37] + 1) = 0x7FF8000000000000;
      *(_QWORD *)&v79[38] = 0xFFEFFFFFFFFFFFFFLL;
      v91 = 0xBFF0000000000000;
      v92 = 0xFFEFFFFFFFFFFFFFLL;
      v27 = operator new();
      v28 = v72;
      *(int64x2_t *)(v27 + 32) = v72;
      *(int64x2_t *)(v27 + 48) = v28;
      *(_QWORD *)(v27 + 64) = *(_QWORD *)v76;
      v29 = v73;
      *(int64x2_t *)v27 = v72;
      *(int64x2_t *)(v27 + 16) = v29;
      *(_OWORD *)(v27 + 88) = *(_OWORD *)&v76[24];
      *(_OWORD *)(v27 + 104) = *(_OWORD *)&v76[40];
      *(_OWORD *)(v27 + 120) = *(_OWORD *)&v76[56];
      *(_QWORD *)(v27 + 136) = *(_QWORD *)&v76[72];
      *(_OWORD *)(v27 + 72) = *(_OWORD *)&v76[8];
      *(_BYTE *)(v27 + 160) = v78;
      *(int64x2_t *)(v27 + 144) = v77;
      memcpy((void *)(v27 + 168), v79, 0x1E9uLL);
      *(_QWORD *)(v27 + 664) = *(_QWORD *)&v79[31];
      v30 = *((_QWORD *)&v79[31] + 1);
      *(_QWORD *)(v27 + 672) = *((_QWORD *)&v79[31] + 1);
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = v79[35];
      *(_OWORD *)(v27 + 712) = v79[34];
      *(_OWORD *)(v27 + 728) = v33;
      *(_QWORD *)(v27 + 744) = *(_QWORD *)&v79[36];
      a5 = *(double *)&v79[32];
      v34 = v79[33];
      *(_OWORD *)(v27 + 680) = v79[32];
      *(_OWORD *)(v27 + 696) = v34;
      *(_OWORD *)(v27 + 752) = *(_OWORD *)((char *)&v79[36] + 8);
      *(_DWORD *)(v27 + 992) = 11;
      *(_QWORD *)(v27 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v27 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      a4 = -1.0;
      *(_OWORD *)(v27 + 1424) = xmmword_2102E3C60;
      v35 = *a2;
      *a2 = v27;
      if (v35)
        sub_20E8E931C((uint64_t)a2, v35);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v79[31] + 1);
      if (!*((_QWORD *)&v79[31] + 1))
        goto LABEL_27;
      v37 = (unint64_t *)(*((_QWORD *)&v79[31] + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_68;
    case 11:
      v8 = operator new();
      v39 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v39;
      *(int64x2_t *)(v8 + 16) = v39;
      *(int64x2_t *)(v8 + 32) = v39;
      *(int64x2_t *)(v8 + 48) = v39;
      *(int64x2_t *)(v8 + 64) = v39;
      *(int64x2_t *)(v8 + 80) = v39;
      *(int64x2_t *)(v8 + 96) = v39;
      *(int64x2_t *)(v8 + 112) = v39;
      *(int64x2_t *)(v8 + 128) = v39;
      *(int64x2_t *)(v8 + 144) = v39;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v39;
      *(int64x2_t *)(v8 + 184) = v39;
      *(_BYTE *)(v8 + 468) = 0;
      v10 = 12;
      goto LABEL_25;
    case 12:
      v8 = operator new();
      v40 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v40;
      *(int64x2_t *)(v8 + 16) = v40;
      *(int64x2_t *)(v8 + 32) = v40;
      *(int64x2_t *)(v8 + 48) = v40;
      *(int64x2_t *)(v8 + 64) = v40;
      *(int64x2_t *)(v8 + 80) = v40;
      *(int64x2_t *)(v8 + 96) = v40;
      *(int64x2_t *)(v8 + 112) = v40;
      *(int64x2_t *)(v8 + 128) = v40;
      *(int64x2_t *)(v8 + 144) = v40;
      *(_BYTE *)(v8 + 160) = 0;
      *(_QWORD *)(v8 + 168) = 0x7FF8000000000000;
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 208) = 0u;
      *(_OWORD *)(v8 + 224) = 0u;
      *(_OWORD *)(v8 + 240) = 0u;
      *(_OWORD *)(v8 + 256) = 0u;
      *(_QWORD *)(v8 + 272) = 0;
      *(_QWORD *)(v8 + 280) = 0x7FF8000000000000;
      *(_OWORD *)(v8 + 288) = 0u;
      *(_OWORD *)(v8 + 304) = 0u;
      *(_OWORD *)(v8 + 320) = 0u;
      *(_OWORD *)(v8 + 336) = 0u;
      *(_OWORD *)(v8 + 352) = 0u;
      *(_OWORD *)(v8 + 368) = 0u;
      *(_QWORD *)(v8 + 384) = 0;
      v10 = 13;
      goto LABEL_25;
    case 13:
      v8 = operator new();
      v42 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)v8 = v42;
      *(int64x2_t *)(v8 + 16) = v42;
      *(int64x2_t *)(v8 + 32) = v42;
      *(int64x2_t *)(v8 + 48) = v42;
      *(int64x2_t *)(v8 + 64) = v42;
      *(int64x2_t *)(v8 + 80) = v42;
      *(int64x2_t *)(v8 + 96) = v42;
      *(int64x2_t *)(v8 + 112) = v42;
      *(int64x2_t *)(v8 + 128) = v42;
      *(int64x2_t *)(v8 + 144) = v42;
      *(_BYTE *)(v8 + 160) = 0;
      *(int64x2_t *)(v8 + 168) = v42;
      *(int64x2_t *)(v8 + 184) = v42;
      *(int64x2_t *)(v8 + 200) = v42;
      *(int64x2_t *)(v8 + 216) = v42;
      *(int64x2_t *)(v8 + 232) = v42;
      *(int64x2_t *)(v8 + 248) = v42;
      *(_QWORD *)(v8 + 264) = 0x7FF8000000000000;
      *(int64x2_t *)(v8 + 272) = v42;
      *(int64x2_t *)(v8 + 288) = v42;
      *(int64x2_t *)(v8 + 304) = v42;
      *(int64x2_t *)(v8 + 320) = v42;
      *(int64x2_t *)(v8 + 336) = v42;
      *(int64x2_t *)(v8 + 352) = v42;
      *(int64x2_t *)(v8 + 368) = v42;
      *(_QWORD *)(v8 + 384) = 0x7FF8000000000000;
      *(_BYTE *)(v8 + 880) = 0;
      v10 = 14;
LABEL_25:
      *(_DWORD *)(v8 + 992) = v10;
      *(_QWORD *)(v8 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v8 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      a4 = -1.0;
      *(_OWORD *)(v8 + 1424) = xmmword_2102E3C60;
      v20 = *a2;
      *a2 = v8;
      if (v20)
LABEL_26:
        sub_20E8E931C((uint64_t)a2, v20);
      goto LABEL_27;
    case 14:
      sub_20EB3C5DC((uint64_t)&v72);
      v88 = xmmword_2102E3C50;
      v93 = 0xBFF0000000000000;
      v94 = 0xFFEFFFFFFFFFFFFFLL;
      v60 = operator new();
      v61 = v75;
      *(int64x2_t *)(v60 + 32) = v74;
      *(int64x2_t *)(v60 + 48) = v61;
      *(_QWORD *)(v60 + 64) = *(_QWORD *)v76;
      v62 = v73;
      *(int64x2_t *)v60 = v72;
      *(int64x2_t *)(v60 + 16) = v62;
      *(_OWORD *)(v60 + 88) = *(_OWORD *)&v76[24];
      *(_OWORD *)(v60 + 104) = *(_OWORD *)&v76[40];
      *(_OWORD *)(v60 + 120) = *(_OWORD *)&v76[56];
      *(_QWORD *)(v60 + 136) = *(_QWORD *)&v76[72];
      *(_OWORD *)(v60 + 72) = *(_OWORD *)&v76[8];
      *(_BYTE *)(v60 + 160) = v78;
      *(int64x2_t *)(v60 + 144) = v77;
      memcpy((void *)(v60 + 168), v79, 0x2C9uLL);
      *(_QWORD *)(v60 + 888) = v80;
      v63 = v81;
      *(_QWORD *)(v60 + 896) = v81;
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(p_shared_owners);
        while (__stxr(v65 + 1, p_shared_owners));
      }
      *(_QWORD *)(v60 + 968) = v86;
      v66 = v85;
      *(_OWORD *)(v60 + 936) = v84;
      *(_OWORD *)(v60 + 952) = v66;
      a5 = *(double *)&v82;
      v67 = v83;
      *(_OWORD *)(v60 + 904) = v82;
      *(_OWORD *)(v60 + 920) = v67;
      *(_OWORD *)(v60 + 976) = v87;
      *(_DWORD *)(v60 + 992) = 15;
      *(_QWORD *)(v60 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v60 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      a4 = -1.0;
      *(_OWORD *)(v60 + 1424) = xmmword_2102E3C60;
      v68 = *a2;
      *a2 = v60;
      if (v68)
        sub_20E8E931C((uint64_t)a2, v68);
      v36 = v81;
      if (!v81)
        goto LABEL_27;
      v69 = (unint64_t *)&v81->__shared_owners_;
      do
        v38 = __ldaxr(v69);
      while (__stlxr(v38 - 1, v69));
LABEL_68:
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
LABEL_27:
      v43 = *a2;
      v44 = *(_DWORD *)(v43 + 992);
      if (v44 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_74;
        }
        v44 = *(_DWORD *)(v43 + 992);
        if (v44 <= 7)
        {
LABEL_29:
          if (v44 > 3)
          {
            v46 = v43;
            v47 = a3;
            if (v44 > 5)
            {
              if (v44 != 6)
                return sub_20EB303C0(v43, a3, a4, a5, a6);
              *(_QWORD *)&result = sub_20EB42D5C((int64x2_t *)v43, (uint64_t)a3).u64[0];
              return result;
            }
          }
          else
          {
            if (v44 <= 1)
            {
              if (!v44)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              *(_QWORD *)&result = sub_20EB43460((int64x2_t *)v43, (uint64_t)a3).u64[0];
              return result;
            }
            v46 = v43;
            v47 = a3;
            if (v44 == 2)
            {
              sub_20EB418D4(v43, a3);
              return result;
            }
          }
          *(_QWORD *)&result = sub_20EB2BA78(v46, v47).u64[0];
          return result;
        }
      }
      else if (v44 <= 7)
      {
        goto LABEL_29;
      }
      if (v44 <= 0xB)
      {
        if (v44 > 9)
        {
          if (v44 == 10)
            *(_QWORD *)&result = sub_20EB2F70C((int64x2_t *)v43, (uint64_t **)a3).u64[0];
          else
            return sub_20EB38AFC(v43, a3, a4, a5, a6);
        }
        else if (v44 == 9)
        {
          return sub_20EB34CE8(v43, a3, a4, a5, a6);
        }
        else
        {
          *(_QWORD *)&result = sub_20EB2E3C4(v43, a3).u64[0];
        }
        return result;
      }
      if (v44 > 0xD)
      {
        if (v44 != 14)
          return sub_20EB3C930(v43, a3, a4, a5, a6);
        *(_QWORD *)&result = sub_20EB2FFE4((int64x2_t *)v43, (uint64_t **)a3).u64[0];
        return result;
      }
      if (v44 != 13)
      {
        *(_QWORD *)&result = sub_20EB2BA78(v43, a3).u64[0];
        return result;
      }
      v48 = *a3;
      if ((unint64_t)(a3[1] - *a3) > 0x120)
        goto LABEL_48;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 950, (uint64_t)"data.size() >= 37", 17, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_74:
        abort();
      }
      v48 = *a3;
LABEL_48:
      a6.f64[0] = *(float64_t *)(v48 + 64);
      v49 = *(float64x2_t *)(v48 + 32);
      v50 = *(float64x2_t *)(v48 + 48);
      v52 = *(int8x16_t *)v48;
      v51 = *(float64x2_t *)(v48 + 16);
      v53 = (int8x16_t)vabdq_f64(*(float64x2_t *)v48, *(float64x2_t *)v43);
      v54 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      v55 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v54, (float64x2_t)vextq_s8(v53, v53, 8uLL)), (int32x4_t)vcgeq_f64(v54, vabdq_f64(v51, *(float64x2_t *)(v43 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v54, vabdq_f64(v49, *(float64x2_t *)(v43 + 32))), (int32x4_t)vcgeq_f64(v54, vabdq_f64(v50, *(float64x2_t *)(v43 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v55)) & 1) != 0
        || (v55.f64[0] = *(float64_t *)(v43 + 64), vabdq_f64(a6, v55).f64[0] > 1.0e-10))
      {
        v56 = *(double *)vextq_s8(v52, v52, 8uLL).i64;
        *(_QWORD *)&v57 = *(_QWORD *)(v48 + 16);
        *((_QWORD *)&v57 + 1) = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
        *(_QWORD *)&v58 = *(_QWORD *)v48;
        *((double *)&v58 + 1) = v56;
        *(_OWORD *)v43 = v58;
        *(_OWORD *)(v43 + 16) = v57;
        *(float64_t *)&v58 = v49.f64[0];
        *((double *)&v58 + 1) = *(double *)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).i64;
        *(_QWORD *)&v50.f64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
        *(_OWORD *)(v43 + 32) = v58;
        *(float64x2_t *)(v43 + 48) = v50;
        *(float64_t *)(v43 + 64) = a6.f64[0];
        *(double *)(v43 + 72) = 1.0 / *(double *)v52.i64;
        *(double *)(v43 + 80) = -v56 / (*(double *)v52.i64 * v49.f64[0]);
        *(double *)(v43 + 88) = -(v49.f64[0] * v51.f64[0] - v56 * *((double *)&v58 + 1))
                              / (*(double *)v52.i64
                               * v49.f64[0]);
        *(_QWORD *)(v43 + 96) = 0;
        *(double *)(v43 + 104) = 1.0 / v49.f64[0];
        *(double *)(v43 + 112) = -*((double *)&v58 + 1) / v49.f64[0];
        *(_QWORD *)(v43 + 120) = 0;
        *(_QWORD *)(v43 + 128) = 0;
        *(_OWORD *)(v43 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v43 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v43 + 160) = 0;
      }
      v59 = (const void *)(v48 + 184);
      memmove((void *)(v43 + 168), (const void *)(v48 + 72), 0x70uLL);
      memmove((void *)(v43 + 280), v59, 0x70uLL);
      return result;
    default:
      goto LABEL_27;
  }
}

void sub_20FCD1E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9702A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCD1E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E970240((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCD1E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9701D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCD1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E970170((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCD1E98(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 136);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 160));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  return a1;
}

_QWORD *sub_20FCD1F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  unint64_t v3;
  int16x8_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  float64x2_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int16x8_t *v29;
  int16x8_t **v30;
  char *v31;
  int16x8_t *v32;
  size_t v33;
  unint64_t v34;
  int16x8_t *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t *v44;
  unint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  int16x8_t v53;
  char *v54;
  int16x8_t v55;
  int16x8_t v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  unsigned __int16 v61;
  void *v62;
  unsigned int *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  _OWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  unsigned int v103;
  char *v104;
  unint64_t v105;
  _QWORD *v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  unsigned int v112;
  int64_t v113;
  _QWORD *v115;
  _QWORD *v116;
  void **v118;
  float64x2_t v119;
  int16x8_t v120;
  void *v121;
  __int128 v122;
  uint64_t v123;
  char v124[8];
  __int128 v125;
  uint64_t v126;
  _BYTE v127[48];
  int16x8_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v5 = 0uLL;
  *(_OWORD *)(a2 + 32) = 0u;
  v118 = (void **)(a2 + 32);
  *(_QWORD *)(a2 + 88) = 0;
  v116 = (_QWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 120) = 0u;
  v115 = (_QWORD *)(a2 + 120);
  *(_BYTE *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = 0xBFF0000000000000;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
    v2 = 85;
    if (v11 > 0x555555555555555)
      sub_20E92CED8();
    v12 = (char *)operator new(0x6666666666666670 * (v10 >> 3));
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v12;
    *(_QWORD *)(a2 + 48) = &v12[48 * v11];
    LOWORD(v3) = -21845;
    while (1)
    {
      v14 = *(_DWORD *)(v9 + 4);
      v5.i64[0] = *(_QWORD *)(v9 + 8);
      v15 = *(_QWORD *)(v9 + 16);
      v16 = vcvtq_f64_f32(*(float32x2_t *)v5.i8);
      v17 = *(_QWORD *)(v9 + 24);
      v5.i32[0] = *(_DWORD *)(v9 + 32);
      v18 = *(float *)v5.i32;
      v19 = *(_QWORD *)(a2 + 48);
      if ((unint64_t)v12 < v19)
      {
        *(_DWORD *)v12 = v14;
        *(float64x2_t *)(v12 + 8) = v16;
        *((_QWORD *)v12 + 3) = v15;
        *((_QWORD *)v12 + 4) = v17;
        v13 = v12 + 48;
        *((double *)v12 + 5) = v18;
      }
      else
      {
        v20 = (char *)*v118;
        v21 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*v118) >> 4);
        v22 = v21 + 1;
        if (v21 + 1 > 0x555555555555555)
          sub_20E92CED8();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v20) >> 4);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x2AAAAAAAAAAAAAALL)
          v24 = 0x555555555555555;
        else
          v24 = v22;
        if (v24)
        {
          v119 = v16;
          if (v24 > 0x555555555555555)
            sub_20E877A38();
          v25 = (char *)operator new(48 * v24);
          v16 = v119;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[48 * v21];
        *(_DWORD *)v26 = v14;
        *(float64x2_t *)(v26 + 8) = v16;
        v27 = &v25[48 * v24];
        *((_QWORD *)v26 + 3) = v15;
        *((_QWORD *)v26 + 4) = v17;
        *((double *)v26 + 5) = v18;
        v13 = v26 + 48;
        if (v12 == v20)
        {
          *(_QWORD *)(a2 + 32) = v26;
          *(_QWORD *)(a2 + 40) = v13;
          *(_QWORD *)(a2 + 48) = v27;
        }
        else
        {
          do
          {
            v5 = *((int16x8_t *)v12 - 3);
            v28 = *((_OWORD *)v12 - 1);
            *((_OWORD *)v26 - 2) = *((_OWORD *)v12 - 2);
            *((_OWORD *)v26 - 1) = v28;
            *((int16x8_t *)v26 - 3) = v5;
            v26 -= 48;
            v12 -= 48;
          }
          while (v12 != v20);
          v12 = *(char **)(a2 + 32);
          *(_QWORD *)(a2 + 32) = v26;
          *(_QWORD *)(a2 + 40) = v13;
          *(_QWORD *)(a2 + 48) = v27;
          if (!v12)
            goto LABEL_5;
        }
        operator delete(v12);
      }
LABEL_5:
      *(_QWORD *)(a2 + 40) = v13;
      v9 += 40;
      v12 = v13;
      if (v9 == v8)
      {
        v10 = *(_QWORD *)(a2 + 72);
        v29 = *(int16x8_t **)(a2 + 56);
        goto LABEL_25;
      }
    }
  }
  v29 = 0;
LABEL_25:
  v30 = (int16x8_t **)(a2 + 56);
  v31 = *(char **)(a1 + 584);
  v32 = *(int16x8_t **)(a1 + 576);
  v33 = v31 - (char *)v32;
  v34 = (v31 - (char *)v32) >> 6;
  if (v34 > (v10 - (uint64_t)v29) >> 6)
  {
    if ((v33 & 0x8000000000000000) != 0)
      sub_20E92CED8();
    v35 = *(int16x8_t **)(a2 + 64);
    v36 = (char *)operator new(v33);
    v37 = &v36[((char *)v35 - (char *)v29) & 0xFFFFFFFFFFFFFFC0];
    v38 = v37;
    if (v35 != v29)
    {
      v39 = &v36[((char *)v35 - (char *)v29) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        v5 = v35[-4];
        v40 = v35[-3];
        v41 = v35[-1];
        v38 = v39 - 64;
        *((int16x8_t *)v39 - 2) = v35[-2];
        *((int16x8_t *)v39 - 1) = v41;
        *((int16x8_t *)v39 - 4) = v5;
        *((int16x8_t *)v39 - 3) = v40;
        v35 -= 4;
        v39 -= 64;
      }
      while (v35 != v29);
    }
    *(_QWORD *)(a2 + 56) = v38;
    *(_QWORD *)(a2 + 64) = v37;
    *(_QWORD *)(a2 + 72) = &v36[64 * v34];
    if (v29)
    {
      operator delete(v29);
      v32 = *(int16x8_t **)(a1 + 576);
      v31 = *(char **)(a1 + 584);
    }
  }
  if (v32 != (int16x8_t *)v31)
  {
    v29 = *(int16x8_t **)(a2 + 64);
    LOWORD(v34) = -64;
    v2 = -1;
    do
    {
      *(int16x8_t *)v127 = *v32;
      *(int16x8_t *)&v127[16] = v32[1];
      *(int16x8_t *)&v127[32] = v32[2];
      v128 = v32[3];
      v45 = *(_QWORD *)(a2 + 72);
      if ((unint64_t)v29 < v45)
      {
        v5 = *v32;
        v42 = v32[1];
        v43 = v32[3];
        v29[2] = v32[2];
        v29[3] = v43;
        *v29 = v5;
        v29[1] = v42;
        v44 = v29 + 4;
      }
      else
      {
        v46 = *v30;
        v47 = ((char *)v29 - (char *)*v30) >> 6;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 58)
          sub_20E92CED8();
        v49 = v45 - (_QWORD)v46;
        if (v49 >> 5 > v48)
          v48 = v49 >> 5;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFC0)
          v3 = 0x3FFFFFFFFFFFFFFLL;
        else
          v3 = v48;
        if (v3)
        {
          if (v3 >> 58)
            sub_20E877A38();
          v50 = (char *)operator new(v3 << 6);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[64 * v47];
        v52 = *(_OWORD *)&v127[16];
        *(_OWORD *)v51 = *(_OWORD *)v127;
        *((_OWORD *)v51 + 1) = v52;
        v5 = *(int16x8_t *)&v127[32];
        v53 = v128;
        *((_OWORD *)v51 + 2) = *(_OWORD *)&v127[32];
        *((int16x8_t *)v51 + 3) = v53;
        v54 = v51;
        if (v29 != v46)
        {
          do
          {
            v5 = v29[-4];
            v55 = v29[-3];
            v56 = v29[-1];
            *((int16x8_t *)v54 - 2) = v29[-2];
            *((int16x8_t *)v54 - 1) = v56;
            *((int16x8_t *)v54 - 4) = v5;
            *((int16x8_t *)v54 - 3) = v55;
            v54 -= 64;
            v29 -= 4;
          }
          while (v29 != v46);
          v29 = *v30;
        }
        v44 = (int16x8_t *)(v51 + 64);
        *(_QWORD *)(a2 + 56) = v54;
        *(_QWORD *)(a2 + 64) = v51 + 64;
        *(_QWORD *)(a2 + 72) = &v50[64 * v3];
        if (v29)
          operator delete(v29);
      }
      *(_QWORD *)(a2 + 64) = v44;
      v32 += 4;
      v29 = v44;
    }
    while (v32 != (int16x8_t *)v31);
  }
  v57 = *(_QWORD *)(a1 + 24);
  v58 = *(_DWORD *)(v57 + 992);
  if (v58 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_144;
    }
    v58 = *(_DWORD *)(v57 + 992);
    if (v58 <= 7)
      goto LABEL_54;
  }
  else if (v58 <= 7)
  {
LABEL_54:
    if (v58 <= 3)
    {
      if (v58 <= 1)
      {
        if (v58)
        {
          LOBYTE(v32) = 0;
          v59 = 10;
          v60 = 0x654C7261656E694CLL;
          LOWORD(v34) = 29550;
LABEL_72:
          v120 = v5;
          goto LABEL_89;
        }
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_144:
        abort();
      }
      if (v58 == 2)
      {
        v59 = 15;
        LOBYTE(v29) = 115;
        v120 = 0u;
        LOBYTE(v31) = 76;
        LOBYTE(v32) = 101;
        v60 = 0x7463657073726550;
        LOWORD(v3) = 28261;
        LOWORD(v34) = 30313;
      }
      else
      {
        LOBYTE(v31) = 0;
        v59 = 11;
        LOBYTE(v32) = 115;
        LOWORD(v34) = 28261;
        v120 = v5;
        v60 = 0x4C65796568736946;
      }
      goto LABEL_89;
    }
    if (v58 <= 5)
    {
      if (v58 == 5)
        v61 = 50;
      else
        v61 = 49;
      v59 = 16;
      LOBYTE(v29) = 116;
      LOBYTE(v31) = 70;
      v120 = (int16x8_t)v61;
      LOBYTE(v32) = 115;
      LOWORD(v3) = 29537;
      LOWORD(v34) = 28261;
      v60 = 0x4C65796568736946;
      goto LABEL_89;
    }
    if (v58 == 6)
    {
      v59 = 22;
      v5.i64[0] = 0x4C006500760069;
      v120 = v5;
      LOBYTE(v30) = 110;
      v2 = 101;
      LOBYTE(v29) = 116;
      LOBYTE(v31) = 112;
      LOBYTE(v32) = 115;
      v60 = 0x507265766F796C46;
      LOWORD(v3) = 25445;
      LOWORD(v34) = 29285;
      goto LABEL_89;
    }
    LOBYTE(v29) = 0;
    v59 = 14;
    LOBYTE(v31) = 101;
    LOBYTE(v32) = 76;
    LOWORD(v3) = 29550;
    LOWORD(v34) = 25449;
    v120 = v5;
LABEL_88:
    v60 = 0x72746E65636E6F4ELL;
    goto LABEL_89;
  }
  if (v58 > 0xB)
  {
    if (v58 <= 0xD)
    {
      if (v58 == 13)
      {
        v59 = 7;
        v60 = 0x736E654C353149;
        goto LABEL_72;
      }
      LOBYTE(v30) = 0;
      v5.i64[0] = 0x52004B00730065;
      v120 = v5;
      v59 = 20;
      v2 = 52;
      LOBYTE(v29) = 109;
      LOBYTE(v31) = 72;
      LOBYTE(v32) = 115;
      LOWORD(v3) = 29285;
      LOWORD(v34) = 28261;
      v60 = 0x4C65796568736946;
      goto LABEL_89;
    }
    if (v58 == 14)
    {
      v59 = 16;
      LOBYTE(v29) = 67;
      v5.i64[0] = 0x3700000037;
      v120 = v5;
      LOBYTE(v31) = 75;
      LOBYTE(v32) = 115;
      LOWORD(v3) = 21060;
      LOWORD(v34) = 28261;
      v60 = 0x4C65796568736946;
      goto LABEL_89;
    }
    v2 = 0;
    v5.i64[0] = 0x37004300520044;
    v120 = v5;
    v59 = 19;
    LOBYTE(v29) = 75;
    LOBYTE(v31) = 101;
    LOBYTE(v32) = 76;
    LOWORD(v3) = 29550;
    LOWORD(v34) = 25449;
    goto LABEL_88;
  }
  v60 = 0x4C65796568736946;
  if (v58 > 9)
  {
    if (v58 == 10)
    {
      v59 = 15;
      LOBYTE(v29) = 55;
      v120 = 0u;
      LOBYTE(v31) = 75;
      LOBYTE(v32) = 115;
      LOWORD(v3) = 21060;
      LOWORD(v34) = 28261;
      goto LABEL_89;
    }
    v5.i64[0] = 0x3700520044;
    v120 = v5;
    v59 = 18;
  }
  else
  {
    if (v58 != 9)
    {
      LOBYTE(v29) = 0;
      v59 = 14;
      LOBYTE(v31) = 75;
      LOBYTE(v32) = 115;
      LOWORD(v3) = 14162;
      v120 = v5;
      LOWORD(v34) = 28261;
      goto LABEL_89;
    }
    v5.i64[0] = 3604562;
    v120 = v5;
    v59 = 17;
  }
  LOBYTE(v29) = 75;
  LOBYTE(v31) = 101;
  LOBYTE(v32) = 76;
  LOWORD(v3) = 29550;
  LOWORD(v34) = 25449;
  v60 = 0x72746E65636E6F4ELL;
LABEL_89:
  sub_20FCD0E9C((uint64_t)&v122, *(_QWORD *)(a1 + 24));
  *(_QWORD *)v127 = v60;
  *(_WORD *)&v127[8] = v34;
  v127[10] = (_BYTE)v32;
  v127[11] = (_BYTE)v31;
  *(_WORD *)&v127[12] = v3;
  v127[14] = (_BYTE)v29;
  *(_DWORD *)&v127[15] = vmovn_s16(v120).u32[0];
  v127[19] = v2;
  v127[20] = (_BYTE)v30;
  strcpy(&v127[21], "s");
  v127[23] = v59;
  v121 = (void *)v122;
  *(_OWORD *)&v127[24] = v122;
  *(_QWORD *)&v127[40] = v123;
  sub_20EB4453C((uint64_t)v124, (uint64_t *)v127);
  *(_BYTE *)(a2 + 80) = v124[0];
  v62 = *(void **)(a2 + 88);
  if (v62)
  {
    *(_QWORD *)(a2 + 96) = v62;
    operator delete(v62);
    *v116 = 0;
    v116[1] = 0;
    v116[2] = 0;
  }
  *(_OWORD *)(a2 + 88) = v125;
  *(_QWORD *)(a2 + 104) = v126;
  v126 = 0;
  v125 = 0uLL;
  if (v121)
    operator delete(v121);
  v63 = *(unsigned int **)(a1 + 528);
  v64 = *(char **)(a1 + 536);
  v65 = *(_QWORD *)(a2 + 136);
  v66 = *(char **)(a2 + 120);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 736);
  v67 = v64 - (char *)v63;
  v68 = (v64 - (char *)v63) >> 2;
  if (v68 > (v65 - (uint64_t)v66) >> 3)
  {
    if (v66)
    {
      *(_QWORD *)(a2 + 128) = v66;
      operator delete(v66);
      v65 = 0;
      *v115 = 0;
      v115[1] = 0;
      v115[2] = 0;
    }
    if (v67 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_140;
    v69 = v65 >> 2;
    if (v65 >> 2 <= v68)
      v69 = (v64 - (char *)v63) >> 2;
    v70 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v69;
    if (v70 >> 61)
LABEL_140:
      sub_20E92CED8();
    v71 = (char *)operator new(8 * v70);
    *(_QWORD *)(a2 + 120) = v71;
    *(_QWORD *)(a2 + 136) = &v71[8 * v70];
    v72 = v71;
    if (v63 != (unsigned int *)v64)
    {
      v72 = v71;
      if (v67 - 4 < 0xC)
        goto LABEL_147;
      v73 = ((v67 - 4) >> 2) + 1;
      v72 = &v71[8 * (v73 & 0x7FFFFFFFFFFFFFFCLL)];
      v74 = v71 + 16;
      v75 = v63 + 2;
      v76 = v73 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v77 = *(v75 - 1);
        *(_QWORD *)&v78 = v77;
        *((_QWORD *)&v78 + 1) = HIDWORD(v77);
        v79 = v78;
        *(_QWORD *)&v78 = *v75;
        *((_QWORD *)&v78 + 1) = HIDWORD(*v75);
        *(v74 - 1) = v79;
        *v74 = v78;
        v74 += 2;
        v75 += 2;
        v76 -= 4;
      }
      while (v76);
      v63 += v73 & 0x7FFFFFFFFFFFFFFCLL;
      if (v73 != (v73 & 0x7FFFFFFFFFFFFFFCLL))
      {
LABEL_147:
        do
        {
          v80 = *v63++;
          *(_QWORD *)v72 = v80;
          v72 += 8;
        }
        while (v63 != (unsigned int *)v64);
      }
    }
LABEL_132:
    v113 = v72 - v71;
    goto LABEL_135;
  }
  v71 = *(char **)(a2 + 128);
  v81 = v71 - v66;
  v82 = (v71 - v66) >> 3;
  if (v82 < v68)
  {
    v83 = (char *)&v63[v82];
    if (v71 != v66)
    {
      v84 = (v81 >> 1) - 4;
      v85 = v63;
      if (v84 < 0xC)
        goto LABEL_148;
      v86 = (v84 >> 2) + 1;
      v87 = &v66[8 * (v86 & 0x7FFFFFFFFFFFFFFCLL)];
      v85 = &v63[v86 & 0x7FFFFFFFFFFFFFFCLL];
      v88 = v63 + 2;
      v89 = v66 + 16;
      v90 = v86 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v91 = *(v88 - 1);
        *(_QWORD *)&v92 = v91;
        *((_QWORD *)&v92 + 1) = HIDWORD(v91);
        v93 = v92;
        *(_QWORD *)&v92 = *v88;
        *((_QWORD *)&v92 + 1) = HIDWORD(*v88);
        *(v89 - 1) = v93;
        *v89 = v92;
        v88 += 2;
        v89 += 2;
        v90 -= 4;
      }
      while (v90);
      v66 = v87;
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFFCLL))
      {
LABEL_148:
        do
        {
          v94 = *v85++;
          *(_QWORD *)v66 = v94;
          v66 += 8;
        }
        while (v85 != (unsigned int *)v83);
      }
    }
    if (v83 == v64)
    {
      v72 = v71;
    }
    else
    {
      v95 = v64 - ((char *)v63 + (v81 >> 1)) - 4;
      v72 = v71;
      if (v95 < 0xC)
        goto LABEL_149;
      v96 = (v95 >> 2) + 1;
      v83 += 4 * (v96 & 0x7FFFFFFFFFFFFFFCLL);
      v72 = &v71[8 * (v96 & 0x7FFFFFFFFFFFFFFCLL)];
      v97 = v71 + 16;
      v98 = &v63[v82 + 2];
      v99 = v96 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v100 = *((_QWORD *)v98 - 1);
        *(_QWORD *)&v101 = v100;
        *((_QWORD *)&v101 + 1) = HIDWORD(v100);
        v102 = v101;
        *(_QWORD *)&v101 = *(_QWORD *)v98;
        *((_QWORD *)&v101 + 1) = HIDWORD(*(_QWORD *)v98);
        *(v97 - 1) = v102;
        *v97 = v101;
        v97 += 2;
        v98 += 4;
        v99 -= 4;
      }
      while (v99);
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFFCLL))
      {
LABEL_149:
        do
        {
          v103 = *(_DWORD *)v83;
          v83 += 4;
          *(_QWORD *)v72 = v103;
          v72 += 8;
        }
        while (v83 != v64);
      }
    }
    goto LABEL_132;
  }
  if (v63 == (unsigned int *)v64)
  {
    v104 = v66;
  }
  else
  {
    v104 = v66;
    if (v67 - 4 < 0xC)
      goto LABEL_150;
    v105 = ((v67 - 4) >> 2) + 1;
    v104 = &v66[8 * (v105 & 0x7FFFFFFFFFFFFFFCLL)];
    v106 = v63 + 2;
    v107 = v66 + 16;
    v108 = v105 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v109 = *(v106 - 1);
      *(_QWORD *)&v110 = v109;
      *((_QWORD *)&v110 + 1) = HIDWORD(v109);
      v111 = v110;
      *(_QWORD *)&v110 = *v106;
      *((_QWORD *)&v110 + 1) = HIDWORD(*v106);
      *(v107 - 1) = v111;
      *v107 = v110;
      v106 += 2;
      v107 += 2;
      v108 -= 4;
    }
    while (v108);
    v63 += v105 & 0x7FFFFFFFFFFFFFFCLL;
    if (v105 != (v105 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_150:
      do
      {
        v112 = *v63++;
        *(_QWORD *)v104 = v112;
        v104 += 8;
      }
      while (v63 != (unsigned int *)v64);
    }
  }
  v113 = v104 - v66;
  v71 = v66;
LABEL_135:
  *(_QWORD *)(a2 + 128) = &v71[v113];
  return sub_20EDCEA70((_QWORD *)(a2 + 144), *(char **)(a1 + 552), *(char **)(a1 + 560), (uint64_t)(*(_QWORD *)(a1 + 560) - *(_QWORD *)(a1 + 552)) >> 2);
}

void sub_20FCD2A7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _QWORD *v15;
  va_list va;

  va_start(va, a15);
  sub_20E93DA98((uint64_t)va);
  sub_20E9DD610(v15);
  _Unwind_Resume(a1);
}

void sub_20FCD2AAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2AC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2AD4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2AE8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2AFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2B10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9DD610(v1);
  _Unwind_Resume(a1);
}

void sub_20FCD2B24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  char **v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  void **v12;
  int64_t v13;
  unint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  char *v17;
  char *v18;
  char *v19;
  float64x2_t *v20;
  float64x2_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  __int128 v28;
  float v29;
  float64x2_t v30;
  __int128 v31;
  float v32;
  __int128 *v33;
  __int128 *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  int32x4_t **v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v7;
  v8 = (char **)(a2 + 72);
  sub_20EE6BAB0(a2 + 72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4));
  v12 = (void **)(a2 + 576);
  v13 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  v14 = v13 >> 6;
  if (*(_BYTE *)(a2 + 608))
  {
    v15 = *(float64x2_t **)(a2 + 576);
    *(_QWORD *)(a2 + 584) = v15;
    *(_BYTE *)(a2 + 608) = 0;
    *(_QWORD *)(a2 + 600) = v14;
    if (v14 <= (uint64_t)(*(_QWORD *)(a2 + 592) - (_QWORD)v15) >> 6)
      goto LABEL_11;
  }
  else
  {
    v15 = (float64x2_t *)*v12;
    *(_QWORD *)(a2 + 600) = v14;
    if (v14 <= (uint64_t)(*(_QWORD *)(a2 + 592) - (_QWORD)v15) >> 6)
      goto LABEL_11;
  }
  if (v13 < 0)
LABEL_61:
    sub_20ED343A8();
  v16 = *(float64x2_t **)(a2 + 584);
  v17 = (char *)operator new(v13);
  v18 = &v17[((char *)v16 - (char *)v15) & 0xFFFFFFFFFFFFFFC0];
  v19 = v18;
  if (v16 != v15)
  {
    v20 = (float64x2_t *)&v17[((char *)v16 - (char *)v15) & 0xFFFFFFFFFFFFFFC0];
    do
    {
      v9 = v16[-4];
      v10 = v16[-3];
      v11 = v16[-2];
      v21 = v16[-1];
      v19 = (char *)&v20[-4];
      v20[-2] = v11;
      v20[-1] = v21;
      v20[-4] = v9;
      v20[-3] = v10;
      v16 -= 4;
      v20 -= 4;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a2 + 576) = v19;
  *(_QWORD *)(a2 + 584) = v18;
  *(_QWORD *)(a2 + 592) = &v17[64 * v14];
  if (v15)
    operator delete(v15);
LABEL_11:
  *(_BYTE *)(a2 + 608) = 1;
  v22 = *(unsigned __int8 *)(a1 + 80) - 1;
  if (v22 > 0xB)
  {
    sub_20FCD113C(0, (uint64_t *)(a2 + 24), (uint64_t *)(a1 + 88), v9.f64[0], v10.f64[0], v11);
    if (!a3)
      goto LABEL_60;
  }
  else
  {
    sub_20FCD113C(dword_2103BCAD4[(char)v22], (uint64_t *)(a2 + 24), (uint64_t *)(a1 + 88), v9.f64[0], v10.f64[0], v11);
    if (!a3)
      goto LABEL_60;
  }
  v23 = *(unsigned int **)(a1 + 32);
  v24 = *(unsigned int **)(a1 + 40);
  if (v23 != v24)
  {
    while (1)
    {
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
      v26 = *v23;
      if (v25 != v26)
        break;
      v27 = *(float64x2_t *)(v23 + 2);
      v28 = *(_OWORD *)(v23 + 6);
      v29 = *((double *)v23 + 5);
      LODWORD(v63) = 0;
      DWORD1(v63) = v26;
      *((float32x2_t *)&v63 + 1) = vcvt_f32_f64(v27);
      v64 = v28;
      *(float *)&v65 = v29;
      if (v25 < *(_QWORD *)(a2 + 96))
        goto LABEL_20;
LABEL_17:
      v23 += 12;
      if (v23 == v24)
        goto LABEL_23;
    }
    v30 = *(float64x2_t *)(v23 + 2);
    v31 = *(_OWORD *)(v23 + 6);
    v32 = *((double *)v23 + 5);
    LODWORD(v63) = 0;
    DWORD1(v63) = v25;
    *((float32x2_t *)&v63 + 1) = vcvt_f32_f64(v30);
    v64 = v31;
    *(float *)&v65 = v32;
    if (v25 >= *(_QWORD *)(a2 + 96))
      goto LABEL_17;
LABEL_20:
    sub_20FCE03F0(v8, (uint64_t)&v63);
    goto LABEL_17;
  }
LABEL_23:
  v33 = *(__int128 **)(a1 + 56);
  v34 = *(__int128 **)(a1 + 64);
  if (v33 != v34)
  {
    v35 = *(char **)(a2 + 584);
    do
    {
      v40 = v33[1];
      v63 = *v33;
      v64 = v40;
      v41 = v33[3];
      v65 = v33[2];
      v66 = v41;
      v42 = *(char **)(a2 + 576);
      v43 = (v35 - v42) >> 6;
      if (v43 < *(_QWORD *)(a2 + 600))
      {
        v44 = *(_QWORD *)(a2 + 592);
        if ((unint64_t)v35 < v44)
        {
          v36 = *v33;
          v37 = v33[1];
          v38 = v33[3];
          *((_OWORD *)v35 + 2) = v33[2];
          *((_OWORD *)v35 + 3) = v38;
          *(_OWORD *)v35 = v36;
          *((_OWORD *)v35 + 1) = v37;
          v39 = v35 + 64;
        }
        else
        {
          v45 = v43 + 1;
          if ((v43 + 1) >> 58)
            goto LABEL_61;
          v46 = v44 - (_QWORD)v42;
          if (v46 >> 5 > v45)
            v45 = v46 >> 5;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0)
            v47 = 0x3FFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            if (v47 >> 58)
              sub_20E877A38();
            v48 = (char *)operator new(v47 << 6);
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[64 * v43];
          v50 = v64;
          *(_OWORD *)v49 = v63;
          *((_OWORD *)v49 + 1) = v50;
          v51 = v66;
          *((_OWORD *)v49 + 2) = v65;
          *((_OWORD *)v49 + 3) = v51;
          v52 = v49;
          if (v35 != v42)
          {
            do
            {
              v53 = *((_OWORD *)v35 - 4);
              v54 = *((_OWORD *)v35 - 3);
              v55 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v52 - 2) = *((_OWORD *)v35 - 2);
              *((_OWORD *)v52 - 1) = v55;
              *((_OWORD *)v52 - 4) = v53;
              *((_OWORD *)v52 - 3) = v54;
              v52 -= 64;
              v35 -= 64;
            }
            while (v35 != v42);
            v35 = (char *)*v12;
          }
          *(_QWORD *)(a2 + 576) = v52;
          v39 = v49 + 64;
          *(_QWORD *)(a2 + 584) = v49 + 64;
          *(_QWORD *)(a2 + 592) = &v48[64 * v47];
          if (v35)
            operator delete(v35);
        }
        *(_QWORD *)(a2 + 584) = v39;
        v35 = v39;
      }
      v33 += 4;
    }
    while (v33 != v34);
  }
  sub_20F28C48C((int32x4_t **)(a2 + 528), *(int32x4_t **)(a1 + 120), *(int32x4_t **)(a1 + 128), (uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3);
  if (*(_BYTE *)(a2 + 280))
  {
    sub_20E990EA4((uint64_t *)(a2 + 232));
    v56 = *(void **)(a2 + 208);
    if (v56)
    {
      *(_QWORD *)(a2 + 216) = v56;
      operator delete(v56);
    }
    v57 = *(void **)(a2 + 128);
    if (v57)
    {
      *(_QWORD *)(a2 + 136) = v57;
      operator delete(v57);
    }
    *(_BYTE *)(a2 + 280) = 0;
  }
  if (*(_BYTE *)(a2 + 456))
  {
    sub_20E990EA4((uint64_t *)(a2 + 408));
    v58 = *(void **)(a2 + 384);
    if (v58)
    {
      *(_QWORD *)(a2 + 392) = v58;
      operator delete(v58);
    }
    v59 = *(void **)(a2 + 304);
    if (v59)
    {
      *(_QWORD *)(a2 + 312) = v59;
      operator delete(v59);
    }
    *(_BYTE *)(a2 + 456) = 0;
  }
  v60 = *(char **)(a1 + 144);
  v61 = *(char **)(a1 + 152);
  v62 = (int32x4_t **)(a2 + 552);
  if (v60 == v61)
    sub_20F28C48C(v62, *(int32x4_t **)(a1 + 120), *(int32x4_t **)(a1 + 128), (uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3);
  else
    sub_20EDCEA70(v62, v60, v61, (v61 - v60) >> 2);
LABEL_60:
  *(_BYTE *)(a2 + 736) = *(_BYTE *)(a1 + 112);
}

void sub_20FCD2F84(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v3;
  char **v5;
  _BYTE *i;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  _QWORD *v12;
  __int128 *v13;
  __int128 *v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  _QWORD *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  int16x8_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  void *v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  char *v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  unint64_t v103;
  int v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  void *v118;
  void *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  float32x2_t *v131;
  float32x2_t *v132;
  __int128 *v133;
  __int128 *v134;
  __int32 v135;
  float32x2_t v136;
  float64x2_t v137;
  float32x2_t v138;
  double v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  unsigned int v157;
  int16x8_t v158;
  uint64_t v159;
  unsigned __int16 v160;
  int v161;
  char v162;
  uint8x8_t v163;
  unint64_t v164;
  uint64_t **v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  char ***v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t **v182;
  unint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  char *v187;
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t **v191;
  unint64_t v192;
  char *v193;
  unint64_t v194;
  char *v195;
  char *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t **v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  void *v206;
  void *v207;
  uint64_t **v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  char **v212;
  uint64_t v213;
  uint64_t v214;
  int8x8_t *v215;
  int8x8_t v216;
  unsigned int v217;
  int v218;
  unint64_t v219;
  uint8x8_t v220;
  unint64_t v221;
  int8x8_t **v222;
  int8x8_t *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int8x8_t v227;
  int8x8_t v228;
  int8x8_t v229;
  uint8x8_t v230;
  unint64_t v231;
  uint64_t **v232;
  uint64_t *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  unint64_t v241;
  char *v242;
  unint64_t v243;
  char *v244;
  int8x16_t *v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  int v255;
  char *v256;
  char *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  char *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  char *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  char *v314;
  uint64_t v315;
  int v316;
  unint64_t v317;
  _QWORD *v318;
  unint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  __int128 v330;
  _QWORD *v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  char *v339;
  __int128 v340;
  int8x16_t v341;
  int8x16_t v342;
  unint64_t v343;
  int8x16_t v344;
  unint64_t v345;
  int8x16_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  __int8 v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  int8x16_t *v360;
  int8x16_t *v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  std::__shared_weak_count *v368;
  unint64_t *p_shared_owners;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  char v374;
  uint64_t v375;
  __int8 v376;
  unint64_t v377;
  _QWORD *v378;
  char *v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  _QWORD *v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE *__dst;
  void *__dsta[2];
  uint64_t __dstb;
  char *v390;
  float32x4_t v391;
  unint64_t v392;
  int16x8_t v393;
  uint64_t v394;
  int16x8_t v395;
  float32x2_t v396;
  uint64_t v397;
  char v398;
  int v399;
  _QWORD *v400;
  uint64_t **v401;
  char **v402;
  uint64_t v403;
  uint64_t **v404;
  float64x2_t v405;
  char v406;
  uint64_t v407;
  unsigned int v409;
  void *v410[2];
  void *__p[2];
  int v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _BYTE __src[744];
  __int128 v419;
  char *v420;
  __int128 v421;
  uint64_t v422;
  _BYTE v423[24];
  int16x8_t v424;
  __int128 v425;
  __int128 v426;
  _OWORD v427[2];
  _BYTE v428[64];
  uint64_t v429;
  uint64_t v430;

  v5 = a3;
  v430 = *MEMORY[0x24BDAC8D0];
  a3[20] = 0;
  *((_OWORD *)a3 + 8) = 0u;
  *((_OWORD *)a3 + 9) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_BYTE *)a3 + 168) = 1;
  sub_20E8965F4();
  i = __src;
  *(_OWORD *)v410 = 0u;
  *(_OWORD *)__p = 0u;
  v412 = 1065353216;
  v402 = v5;
  if (*(_BYTE *)(a2 + 2432))
  {
    memset(__src, 0, 24);
    v7 = *(_DWORD **)a2;
    v8 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)v423 = __src;
    if (v7 == v8)
    {
      LOWORD(v5) = (_WORD)v402;
    }
    else
    {
      do
      {
        LODWORD(v415) = *v7;
        sub_20EA9AB98((uint64_t *)v423, &v415);
        v7 += 272;
      }
      while (v7 != v8);
      v9 = *(unsigned int **)&__src[8];
      v10 = *(unsigned int **)__src;
      if (*(_QWORD *)__src != *(_QWORD *)&__src[8])
      {
        do
        {
          v415 = v413;
          sub_20E893368((unsigned int *)v423, &v415);
          v11 = *(_DWORD *)v423;
          *(_QWORD *)v423 = v10;
          *((_DWORD *)sub_20F2CE5F0((uint64_t)v410, v10++, (uint64_t)&unk_2102DB95C, (_DWORD **)v423) + 5) = v11;
        }
        while (v10 != v9);
        v9 = *(unsigned int **)__src;
      }
      LOWORD(v5) = (_WORD)v402;
      if (v9)
      {
        *(_QWORD *)&__src[8] = v9;
        operator delete(v9);
      }
    }
  }
  v403 = a2;
  v12 = (_QWORD *)*a1;
  v13 = &xmmword_2103BC000;
  v14 = &xmmword_2103BC000;
  v15 = *(_QWORD **)(*a1 + 1760);
  v16 = &xmmword_2103BC000;
  v17 = &xmmword_2103BC000;
  v18 = &xmmword_2103BC000;
  if (v15 != (_QWORD *)(*a1 + 1768))
  {
    v19 = (_QWORD *)v12[37];
    while (1)
    {
      v20 = *((unsigned int *)v15 + 8);
      v409 = *((_DWORD *)v15 + 8);
      if (*(_BYTE *)(v403 + 2432) && v410[1])
      {
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v410[1]);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          v22 = v20;
          if (v410[1] <= (void *)v20)
            v22 = v20 % (unint64_t)v410[1];
        }
        else
        {
          v22 = (LODWORD(v410[1]) - 1) & v20;
        }
        v23 = (uint64_t **)*((_QWORD *)v410[0] + v22);
        if (v23)
        {
          v24 = *v23;
          if (v24)
          {
            if (v21.u32[0] < 2uLL)
            {
              while (1)
              {
                v26 = v24[1];
                if (v26 == v20)
                {
                  if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                    goto LABEL_35;
                }
                else if ((v26 & ((unint64_t)v410[1] - 1)) != v22)
                {
                  goto LABEL_36;
                }
                v24 = (uint64_t *)*v24;
                if (!v24)
                  goto LABEL_36;
              }
            }
            do
            {
              v25 = v24[1];
              if (v25 == v20)
              {
                if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                {
LABEL_35:
                  *(_QWORD *)__src = &v409;
                  LODWORD(v20) = *((_DWORD *)sub_20F2CE5F0((uint64_t)v410, &v409, (uint64_t)&unk_2102DB95C, (_DWORD **)__src)+ 5);
                  v409 = v20;
                  break;
                }
              }
              else
              {
                if ((void *)v25 >= v410[1])
                  v25 %= (unint64_t)v410[1];
                if (v25 != v22)
                  break;
              }
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
      }
LABEL_36:
      v27 = v15[5];
      __src[183] = 0;
      memset(&__src[16], 0, 97);
      memset(&__src[135], 0, 26);
      *(_DWORD *)__src = v20;
      HIBYTE(v429) = 0;
      memset(&v428[23], 0, 26);
      v29 = *(int16x8_t *)(v19 + 7);
      v28 = *(_OWORD *)(v19 + 11);
      v425 = *(_OWORD *)(v19 + 9);
      v426 = v28;
      *(_QWORD *)&v427[0] = v19[13];
      *(_OWORD *)&v423[8] = *(_OWORD *)(v19 + 5);
      v424 = v29;
      v29.i64[0] = v19[16];
      v428[0] = 0;
      *(_OWORD *)((char *)v427 + 8) = *((_OWORD *)v19 + 7);
      *((_QWORD *)&v427[1] + 1) = v29.i64[0];
      v30 = *(_DWORD *)(v27 + 992);
      if (v30 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_548;
        }
        v30 = *(_DWORD *)(v27 + 992);
        LODWORD(v390) = v20;
        if (v30 > 7)
        {
LABEL_44:
          if (v30 > 0xB)
          {
            if (v30 > 0xD)
            {
              if (v30 == 14)
              {
                LOBYTE(__dst) = 115;
                v383 = 75;
                v29.i64[0] = 0x3700000037;
                v393 = v29;
                v380 = 67;
                v33 = 16;
                goto LABEL_64;
              }
              LOBYTE(v20) = 0;
              LOBYTE(__dst) = 76;
              v383 = 101;
              v380 = 75;
              v398 = 19;
              LOWORD(v5) = 29550;
              LOWORD(v13) = 25449;
              v31 = 0x72746E65636E6F4ELL;
              v29.i64[0] = 0x37004300520044;
            }
            else if (v30 == 13)
            {
              v398 = 7;
              v31 = 0x736E654C353149;
            }
            else
            {
              v374 = 0;
              LOBYTE(__dst) = 115;
              v383 = 72;
              v380 = 109;
              LOBYTE(v20) = 52;
              v398 = 20;
              LOWORD(v5) = 29285;
              LOWORD(v13) = 28261;
              v31 = 0x4C65796568736946;
              v29.i64[0] = 0x52004B00730065;
            }
          }
          else if (v30 > 9)
          {
            if (v30 == 10)
            {
              LOBYTE(__dst) = 115;
              v383 = 75;
              v393 = 0u;
              v380 = 55;
              v33 = 15;
LABEL_64:
              v398 = v33;
              LOWORD(v5) = 21060;
              LOWORD(v13) = 28261;
              v31 = 0x4C65796568736946;
              goto LABEL_73;
            }
            LOBYTE(__dst) = 76;
            v383 = 101;
            v380 = 75;
            v398 = 18;
            LOWORD(v5) = 29550;
            LOWORD(v13) = 25449;
            v31 = 0x72746E65636E6F4ELL;
            v29.i64[0] = 0x3700520044;
          }
          else
          {
            if (v30 != 9)
            {
              v380 = 0;
              LOBYTE(__dst) = 115;
              v383 = 75;
              v398 = 14;
              LOWORD(v5) = 14162;
              LOWORD(v13) = 28261;
LABEL_68:
              v393 = v29;
              v31 = 0x4C65796568736946;
              goto LABEL_73;
            }
            LOBYTE(__dst) = 76;
            v383 = 101;
            v380 = 75;
            v398 = 17;
            LOWORD(v5) = 29550;
            LOWORD(v13) = 25449;
            v31 = 0x72746E65636E6F4ELL;
            v29.i64[0] = 3604562;
          }
          goto LABEL_72;
        }
      }
      else
      {
        LODWORD(v390) = v20;
        if (v30 > 7)
          goto LABEL_44;
      }
      if (v30 <= 3)
      {
        if (v30 > 1)
        {
          if (v30 == 2)
          {
            LOBYTE(__dst) = 101;
            v383 = 76;
            v393 = 0u;
            v380 = 115;
            v398 = 15;
            LOWORD(v5) = 28261;
            LOWORD(v13) = 30313;
            v31 = 0x7463657073726550;
            goto LABEL_73;
          }
          v383 = 0;
          LOBYTE(__dst) = 115;
          v398 = 11;
          LOWORD(v13) = 28261;
          goto LABEL_68;
        }
        if (!v30)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_548:
          abort();
        }
        LOBYTE(__dst) = 0;
        v398 = 10;
        LOWORD(v13) = 29550;
        v31 = 0x654C7261656E694CLL;
LABEL_72:
        v393 = v29;
        goto LABEL_73;
      }
      if (v30 > 5)
      {
        if (v30 != 6)
        {
          v380 = 0;
          LOBYTE(__dst) = 76;
          v383 = 101;
          v398 = 14;
          LOWORD(v5) = 29550;
          LOWORD(v13) = 25449;
          v393 = v29;
          v31 = 0x72746E65636E6F4ELL;
          goto LABEL_73;
        }
        LOBYTE(__dst) = 115;
        v383 = 112;
        v380 = 116;
        LOBYTE(v20) = 101;
        v374 = 110;
        v398 = 22;
        LOWORD(v5) = 25445;
        LOWORD(v13) = 29285;
        v31 = 0x507265766F796C46;
        v29.i64[0] = 0x4C006500760069;
        goto LABEL_72;
      }
      if (v30 == 5)
        v32 = 50;
      else
        v32 = 49;
      LOBYTE(__dst) = 115;
      v383 = 70;
      v380 = 116;
      v393 = (int16x8_t)v32;
      v398 = 16;
      LOWORD(v5) = 29537;
      LOWORD(v13) = 28261;
      v31 = 0x4C65796568736946;
LABEL_73:
      sub_20FCD0E9C((uint64_t)&v415, v27);
      *(_WORD *)&v428[8] = (_WORD)v13;
      v428[10] = (_BYTE)__dst;
      v428[11] = v383;
      *(_WORD *)&v428[12] = (_WORD)v5;
      v428[14] = v380;
      *(_DWORD *)&v428[15] = vmovn_s16(v393).u32[0];
      v428[19] = v20;
      v428[20] = v374;
      strcpy(&v428[21], "s");
      v34 = v415;
      v35 = v416;
      v36 = v417;
      *(_QWORD *)v428 = v31;
      v428[23] = v398;
      *(_QWORD *)&v428[24] = v415;
      *(_QWORD *)&v428[32] = v416;
      *(_QWORD *)&v428[40] = v417;
      *(_OWORD *)&__src[48] = v425;
      *(_OWORD *)&__src[64] = v426;
      *(_OWORD *)&__src[80] = v427[0];
      *(_OWORD *)&__src[96] = v427[1];
      *(_OWORD *)&__src[16] = *(_OWORD *)&v423[8];
      *(int16x8_t *)&__src[32] = v424;
      *(_OWORD *)&__src[112] = *(_OWORD *)v428;
      *(_QWORD *)&__src[128] = *(_QWORD *)&v428[16];
      *(_QWORD *)&__src[136] = v415;
      *(_QWORD *)&__src[144] = v416;
      *(_QWORD *)&__src[152] = v417;
      *(_QWORD *)&__src[176] = v429;
      *(_OWORD *)&__src[160] = *(_OWORD *)&v428[48];
      LOWORD(v5) = (_WORD)v402;
      v3 = v402[1];
      v37 = (unint64_t)v402[2];
      if ((unint64_t)v3 < v37)
      {
        *(_DWORD *)v3 = (_DWORD)v390;
        v38 = *(_OWORD *)&__src[32];
        *((_OWORD *)v3 + 1) = *(_OWORD *)&__src[16];
        *((_OWORD *)v3 + 2) = v38;
        v39 = *(_OWORD *)&__src[48];
        v40 = *(_OWORD *)&__src[64];
        v41 = *(_OWORD *)&__src[96];
        *((_OWORD *)v3 + 5) = *(_OWORD *)&__src[80];
        *((_OWORD *)v3 + 6) = v41;
        *((_OWORD *)v3 + 3) = v39;
        *((_OWORD *)v3 + 4) = v40;
        v42 = *(_OWORD *)&__src[112];
        *((_QWORD *)v3 + 16) = *(_QWORD *)&__src[128];
        *((_QWORD *)v3 + 17) = v34;
        *((_OWORD *)v3 + 7) = v42;
        memset(&__src[112], 0, 24);
        *((_QWORD *)v3 + 18) = v35;
        *((_QWORD *)v3 + 19) = v36;
        memset(&__src[136], 0, 24);
        v43 = *(_OWORD *)&__src[160];
        *((_QWORD *)v3 + 22) = *(_QWORD *)&__src[176];
        *((_OWORD *)v3 + 10) = v43;
        v402[1] = v3 + 184;
        v44 = *(void **)&__src[136];
        v17 = &xmmword_2103BC000;
        v18 = &xmmword_2103BC000;
        v13 = &xmmword_2103BC000;
        if (*(_QWORD *)&__src[136])
          goto LABEL_103;
        goto LABEL_104;
      }
      v45 = *v402;
      v46 = 0xD37A6F4DE9BD37A7 * ((v3 - *v402) >> 3) + 1;
      if (v46 > 0x1642C8590B21642)
        sub_20E92CED8();
      v47 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v37 - (_QWORD)v45) >> 3);
      if (2 * v47 > v46)
        v46 = 2 * v47;
      if (v47 >= 0xB21642C8590B21)
        v48 = 0x1642C8590B21642;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 > 0x1642C8590B21642)
          sub_20E877A38();
        v49 = (char *)operator new(184 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[8 * ((v3 - v45) >> 3)];
      *(_DWORD *)v50 = (_DWORD)v390;
      v51 = *(_OWORD *)&__src[64];
      v52 = &v49[184 * v48];
      *((_OWORD *)v50 + 3) = *(_OWORD *)&__src[48];
      *((_OWORD *)v50 + 4) = v51;
      v53 = *(_OWORD *)&__src[96];
      *((_OWORD *)v50 + 5) = *(_OWORD *)&__src[80];
      *((_OWORD *)v50 + 6) = v53;
      v54 = *(_OWORD *)&__src[32];
      *((_OWORD *)v50 + 1) = *(_OWORD *)&__src[16];
      *((_OWORD *)v50 + 2) = v54;
      *((_OWORD *)v50 + 7) = *(_OWORD *)&__src[112];
      v55 = *(_QWORD *)&__src[128];
      memset(&__src[112], 0, 24);
      *((_QWORD *)v50 + 16) = v55;
      *((_QWORD *)v50 + 17) = v34;
      *((_QWORD *)v50 + 18) = v35;
      *((_QWORD *)v50 + 19) = v36;
      memset(&__src[136], 0, 24);
      *((_QWORD *)v50 + 22) = *(_QWORD *)&__src[176];
      *((_OWORD *)v50 + 10) = *(_OWORD *)&__src[160];
      v56 = v50 + 184;
      memset(&__src[160], 0, 24);
      if (v3 != v45)
      {
        v57 = 0;
        v14 = &xmmword_2103BC000;
        v16 = &xmmword_2103BC000;
        do
        {
          v58 = &v50[v57];
          v59 = &v3[v57];
          *((_DWORD *)v58 - 46) = *(_DWORD *)&v3[v57 - 184];
          v60 = *(_OWORD *)&v3[v57 - 168];
          *(_OWORD *)(v58 - 152) = *(_OWORD *)&v3[v57 - 152];
          *(_OWORD *)(v58 - 168) = v60;
          v61 = *(_OWORD *)&v3[v57 - 136];
          v62 = *(_OWORD *)&v3[v57 - 120];
          v63 = *(_OWORD *)&v3[v57 - 104];
          *(_OWORD *)(v58 - 88) = *(_OWORD *)&v3[v57 - 88];
          *(_OWORD *)(v58 - 104) = v63;
          *(_OWORD *)(v58 - 120) = v62;
          *(_OWORD *)(v58 - 136) = v61;
          v64 = *(_OWORD *)&v3[v57 - 72];
          *((_QWORD *)v58 - 7) = *(_QWORD *)&v3[v57 - 56];
          *(_OWORD *)(v58 - 72) = v64;
          *((_QWORD *)v59 - 8) = 0;
          *((_QWORD *)v59 - 7) = 0;
          *((_QWORD *)v59 - 9) = 0;
          *((_QWORD *)v58 - 5) = 0;
          *((_QWORD *)v58 - 4) = 0;
          *((_OWORD *)v58 - 3) = *(_OWORD *)&v3[v57 - 48];
          *((_QWORD *)v58 - 4) = *(_QWORD *)&v3[v57 - 32];
          *((_QWORD *)v59 - 6) = 0;
          *((_QWORD *)v59 - 5) = 0;
          *((_QWORD *)v59 - 4) = 0;
          v65 = *(_OWORD *)&v3[v57 - 24];
          *((_QWORD *)v58 - 1) = *(_QWORD *)&v3[v57 - 8];
          *(_OWORD *)(v58 - 24) = v65;
          *((_QWORD *)v59 - 2) = 0;
          *((_QWORD *)v59 - 1) = 0;
          *((_QWORD *)v59 - 3) = 0;
          v57 -= 184;
        }
        while (&v3[v57] != v45);
        v3 = *v402;
        v66 = v402[1];
        *v402 = &v50[v57];
        v402[1] = v56;
        v402[2] = v52;
        while (1)
        {
          if (v66 == v3)
          {
            v5 = v402;
            if (v3)
              goto LABEL_100;
            goto LABEL_101;
          }
          if ((*(v66 - 1) & 0x80000000) == 0)
            break;
          operator delete(*((void **)v66 - 3));
          v67 = (void *)*((_QWORD *)v66 - 6);
          if (v67)
            goto LABEL_94;
LABEL_95:
          if (*(v66 - 49) < 0)
            operator delete(*((void **)v66 - 9));
          v66 -= 184;
        }
        v67 = (void *)*((_QWORD *)v66 - 6);
        if (!v67)
          goto LABEL_95;
LABEL_94:
        *((_QWORD *)v66 - 5) = v67;
        operator delete(v67);
        goto LABEL_95;
      }
      v5 = v402;
      *v402 = v50;
      v402[1] = v56;
      v402[2] = v52;
      v14 = &xmmword_2103BC000;
      v16 = &xmmword_2103BC000;
      if (v3)
LABEL_100:
        operator delete(v3);
LABEL_101:
      v68 = __src[183];
      v5[1] = v56;
      if ((v68 & 0x80000000) == 0)
      {
        v44 = *(void **)&__src[136];
        v17 = &xmmword_2103BC000;
        v18 = &xmmword_2103BC000;
        v13 = &xmmword_2103BC000;
        if (!*(_QWORD *)&__src[136])
          goto LABEL_104;
LABEL_103:
        operator delete(v44);
        goto LABEL_104;
      }
      operator delete(*(void **)&__src[160]);
      v44 = *(void **)&__src[136];
      v17 = &xmmword_2103BC000;
      v18 = &xmmword_2103BC000;
      v13 = &xmmword_2103BC000;
      if (*(_QWORD *)&__src[136])
        goto LABEL_103;
LABEL_104:
      if ((__src[135] & 0x80000000) != 0)
      {
        operator delete(*(void **)&__src[112]);
        v69 = (_QWORD *)v15[1];
        if (!v69)
        {
          do
          {
LABEL_110:
            v70 = (_QWORD *)v15[2];
            v71 = *v70 == (_QWORD)v15;
            v15 = v70;
          }
          while (!v71);
          goto LABEL_112;
        }
      }
      else
      {
        v69 = (_QWORD *)v15[1];
        if (!v69)
          goto LABEL_110;
      }
      do
      {
        v70 = v69;
        v69 = (_QWORD *)*v69;
      }
      while (v69);
LABEL_112:
      v72 = (_QWORD *)v19[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD *)v19[2];
          v71 = *v73 == (_QWORD)v19;
          v19 = v73;
        }
        while (!v71);
      }
      v12 = (_QWORD *)*a1;
      v15 = v70;
      v19 = v73;
      if (v70 == (_QWORD *)(*a1 + 1768))
      {
        i = __src;
        break;
      }
    }
  }
  v74 = (_QWORD *)v12[6];
  if (v74 != v12 + 7)
  {
    v378 = v402 + 3;
    v390 = (char *)&v421 + 8;
    __dst = &__src[168];
    while (1)
    {
      v76 = v74[4];
      v75 = v74[5];
      v77 = (__int128 *)v74[6];
      *((_QWORD *)&v421 + 1) = 0;
      v422 = 0;
      v78 = *v77;
      v79 = v77[1];
      *(_OWORD *)&__src[32] = v77[2];
      *(_OWORD *)__src = v78;
      *(_OWORD *)&__src[16] = v79;
      v80 = v77[3];
      v81 = v77[4];
      v82 = v77[6];
      *(_OWORD *)&__src[80] = v77[5];
      *(_OWORD *)&__src[96] = v82;
      *(_OWORD *)&__src[48] = v80;
      *(_OWORD *)&__src[64] = v81;
      v83 = v77[7];
      v84 = v77[8];
      v85 = v77[9];
      *(_QWORD *)&__src[160] = *((_QWORD *)v77 + 20);
      *(_OWORD *)&__src[128] = v84;
      *(_OWORD *)&__src[144] = v85;
      *(_OWORD *)&__src[112] = v83;
      memcpy(&__src[168], (char *)v77 + 168, 0x120uLL);
      memcpy(&__src[456], (char *)v77 + 456, 0x120uLL);
      v420 = 0;
      v419 = 0uLL;
      v86 = (char *)*((_QWORD *)v77 + 94);
      v87 = (char *)*((_QWORD *)v77 + 93);
      v88 = v86 - v87;
      v399 = v75;
      v394 = v76;
      if (v86 != v87)
        break;
      v91 = 0;
      v92 = 0;
      v90 = 0;
      i = __src;
LABEL_149:
      *(_QWORD *)&v421 = *((_QWORD *)v77 + 102);
      *((_QWORD *)&v421 + 1) = v394;
      LODWORD(v422) = v399;
      v3 = v402[4];
      v103 = (unint64_t)v402[5];
      if ((unint64_t)v3 >= v103)
      {
        v105 = (char *)*v378;
        v106 = 0xAFD6A052BF5A814BLL * ((uint64_t)&v3[-*v378] >> 3);
        v107 = v106 + 1;
        if (v106 + 1 > 0x52BF5A814AFD6ALL)
          sub_20E92CED8();
        v108 = 0xAFD6A052BF5A814BLL * ((uint64_t)(v103 - (_QWORD)v105) >> 3);
        if (2 * v108 > v107)
          v107 = 2 * v108;
        if (v108 >= 0x295FAD40A57EB5)
          v109 = 0x52BF5A814AFD6ALL;
        else
          v109 = v107;
        if (v109)
        {
          if (v109 > 0x52BF5A814AFD6ALL)
            sub_20E877A38();
          v110 = (char *)operator new(792 * v109);
        }
        else
        {
          v110 = 0;
        }
        v111 = &v110[792 * v106];
        v112 = &v110[792 * v109];
        memcpy(v111, __src, 0x2E8uLL);
        *((_QWORD *)v111 + 93) = v90;
        *((_QWORD *)v111 + 94) = v92;
        *((_QWORD *)v111 + 95) = v91;
        v420 = 0;
        v419 = 0uLL;
        *((_OWORD *)v111 + 48) = v421;
        *((_DWORD *)v111 + 196) = v422;
        v113 = v111 + 792;
        if (v3 == v105)
        {
          v402[3] = v111;
          v402[4] = v113;
          v402[5] = v112;
          i = __src;
          v14 = &xmmword_2103BC000;
        }
        else
        {
          v114 = v112;
          do
          {
            v115 = v111;
            v111 -= 792;
            memcpy(v111, v3 - 792, 0x2E8uLL);
            *((_QWORD *)v115 - 5) = 0;
            *((_QWORD *)v115 - 4) = 0;
            *((_OWORD *)v115 - 3) = *((_OWORD *)v3 - 3);
            *((_QWORD *)v115 - 4) = *((_QWORD *)v3 - 4);
            *((_QWORD *)v3 - 6) = 0;
            *((_QWORD *)v3 - 5) = 0;
            *((_QWORD *)v3 - 4) = 0;
            v116 = *((_DWORD *)v3 - 2);
            *(_OWORD *)(v115 - 24) = *(_OWORD *)(v3 - 24);
            *((_DWORD *)v115 - 2) = v116;
            v3 -= 792;
          }
          while (v3 != v105);
          v3 = v402[3];
          v117 = v402[4];
          v402[3] = v111;
          v402[4] = v113;
          v402[5] = v114;
          v14 = &xmmword_2103BC000;
          for (i = __src; v117 != v3; v117 -= 792)
          {
            v118 = (void *)*((_QWORD *)v117 - 6);
            if (v118)
            {
              *((_QWORD *)v117 - 5) = v118;
              operator delete(v118);
            }
          }
        }
        v17 = &xmmword_2103BC000;
        if (v3)
          operator delete(v3);
        v119 = (void *)v419;
        v402[4] = v113;
        if (v119)
        {
          *((_QWORD *)&v419 + 1) = v119;
          operator delete(v119);
        }
      }
      else
      {
        memcpy(v402[4], __src, 0x2E8uLL);
        *((_QWORD *)v3 + 93) = 0;
        *((_QWORD *)v3 + 95) = 0;
        *((_QWORD *)v3 + 94) = 0;
        *(_OWORD *)(v3 + 744) = v419;
        *((_QWORD *)v3 + 95) = v420;
        v419 = 0uLL;
        v420 = 0;
        v104 = v422;
        *((_OWORD *)v3 + 48) = v421;
        *((_DWORD *)v3 + 196) = v104;
        v402[4] = v3 + 792;
        v14 = &xmmword_2103BC000;
        v17 = &xmmword_2103BC000;
      }
      v120 = (_QWORD *)v74[1];
      v16 = &xmmword_2103BC000;
      v18 = &xmmword_2103BC000;
      v13 = &xmmword_2103BC000;
      if (v120)
      {
        do
        {
          v121 = v120;
          v120 = (_QWORD *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          v121 = (_QWORD *)v74[2];
          v71 = *v121 == (_QWORD)v74;
          v74 = v121;
        }
        while (!v71);
      }
      v74 = v121;
      if (v121 == (_QWORD *)(*a1 + 56))
        goto LABEL_180;
    }
    v89 = 0x6DB6DB6DB6DB6DB7 * (v88 >> 3);
    if (v89 > 0x492492492492492)
      sub_20E92CED8();
    v90 = (char *)operator new(v88);
    v91 = &v90[56 * v89];
    v92 = v90;
    while (1)
    {
      while (1)
      {
        v93 = *(_QWORD *)v87;
        if (v92 >= v91)
          break;
        *(_QWORD *)v92 = v93;
        *((_QWORD *)v92 + 1) = *((_QWORD *)v87 + 1);
        *((_QWORD *)v92 + 2) = *((_QWORD *)v87 + 2);
        *((_QWORD *)v92 + 3) = *((_QWORD *)v87 + 3);
        *((_QWORD *)v92 + 4) = *((_QWORD *)v87 + 4);
        *((_QWORD *)v92 + 5) = *((_QWORD *)v87 + 5);
        *((_QWORD *)v92 + 6) = *((_QWORD *)v87 + 6);
        v92 += 56;
        v87 += 56;
        if (v87 == v86)
          goto LABEL_147;
      }
      v94 = 0x6DB6DB6DB6DB6DB7 * ((v92 - v90) >> 3) + 1;
      if (v94 > 0x492492492492492)
      {
        v420 = v91;
        *(_QWORD *)&v419 = v90;
        *((_QWORD *)&v419 + 1) = v92;
        sub_20E92CED8();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((v91 - v90) >> 3) > v94)
        v94 = 0xDB6DB6DB6DB6DB6ELL * ((v91 - v90) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v91 - v90) >> 3)) >= 0x249249249249249)
        v95 = 0x492492492492492;
      else
        v95 = v94;
      if (v95 > 0x492492492492492)
      {
        v420 = v91;
        *(_QWORD *)&v419 = v90;
        sub_20E877A38();
      }
      v96 = (char *)operator new(56 * v95);
      v97 = &v96[8 * ((v92 - v90) >> 3)];
      *(_QWORD *)v97 = v93;
      *((_QWORD *)v97 + 1) = *((_QWORD *)v87 + 1);
      *((_QWORD *)v97 + 2) = *((_QWORD *)v87 + 2);
      *((_QWORD *)v97 + 3) = *((_QWORD *)v87 + 3);
      *((_QWORD *)v97 + 4) = *((_QWORD *)v87 + 4);
      *((_QWORD *)v97 + 5) = *((_QWORD *)v87 + 5);
      *((_QWORD *)v97 + 6) = *((_QWORD *)v87 + 6);
      if (v92 == v90)
      {
        v102 = &v96[8 * ((v92 - v90) >> 3)];
        v91 = &v96[56 * v95];
        v92 = v97 + 56;
        if (!v90)
          goto LABEL_143;
      }
      else
      {
        v98 = &v96[8 * ((v92 - v90) >> 3)];
        do
        {
          v99 = *(_OWORD *)(v92 - 56);
          v100 = *(_OWORD *)(v92 - 40);
          v101 = *(_OWORD *)(v92 - 24);
          v102 = v98 - 56;
          *((_QWORD *)v98 - 1) = *((_QWORD *)v92 - 1);
          *(_OWORD *)(v98 - 24) = v101;
          *(_OWORD *)(v98 - 40) = v100;
          *(_OWORD *)(v98 - 56) = v99;
          v92 -= 56;
          v98 -= 56;
        }
        while (v92 != v90);
        v91 = &v96[56 * v95];
        v92 = v97 + 56;
        if (!v90)
          goto LABEL_143;
      }
      operator delete(v90);
LABEL_143:
      v90 = v102;
      v87 += 56;
      if (v87 == v86)
      {
LABEL_147:
        i = __src;
        v420 = v91;
        *(_QWORD *)&v419 = v90;
        *((_QWORD *)&v419 + 1) = v92;
        goto LABEL_149;
      }
    }
  }
LABEL_180:
  v122 = (_QWORD *)a1[5];
  v384 = (_QWORD *)a1[6];
  v123 = v402;
  if (v122 != v384)
  {
    v375 = *((_QWORD *)v13 + 326);
    v124 = *((_QWORD *)v14 + 325);
    v125 = *((_QWORD *)v16 + 324);
    v126 = *((_QWORD *)v17 + 323);
    v127 = *((_QWORD *)v18 + 322);
    do
    {
      v400 = v122;
      v128 = *v122;
      memset(&__src[48], 0, 49);
      memset(&__src[119], 0, 26);
      v129 = *(_DWORD *)(v128 + 8);
      v130 = *(_DWORD *)(v128 + 16);
      *(_QWORD *)&__src[16] = *(_QWORD *)v128;
      *(_DWORD *)&__src[24] = v129;
      *(_DWORD *)&__src[32] = v130;
      *(_QWORD *)&__src[40] = 0xBFF0000000000000;
      v132 = *(float32x2_t **)(v128 + 72);
      v131 = *(float32x2_t **)(v128 + 80);
      if (v131 != v132)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v131 - v132) > 0x555555555555555)
          sub_20E92CED8();
        v133 = (__int128 *)operator new(0x6666666666666670 * (v131 - v132));
        v17 = &v133[0x666666666666667 * (v131 - v132)];
        *(_QWORD *)&__src[48] = v133;
        *(_QWORD *)&__src[56] = v133;
        *(_QWORD *)&__src[64] = v17;
        v134 = v133;
        do
        {
          while (1)
          {
            v135 = v132->i32[0];
            LODWORD(v3) = v132->i32[1];
            v136 = v132[2];
            v137 = vcvtq_f64_f32(v132[1]);
            v138 = v132[3];
            v139 = v132[4].f32[0];
            if (v134 >= v17)
              break;
            *(_DWORD *)v134 = v135;
            *((_DWORD *)v134 + 1) = (_DWORD)v3;
            *(__int128 *)((char *)v134 + 8) = (__int128)v137;
            *((float32x2_t *)v134 + 3) = v136;
            *((float32x2_t *)v134 + 4) = v138;
            LOWORD(v3) = (_WORD)v134 + 48;
            *((double *)v134 + 5) = v139;
            *(_QWORD *)&__src[56] = v134 + 3;
            v132 += 5;
            v134 += 3;
            if (v132 == v131)
              goto LABEL_205;
          }
          v140 = 0xAAAAAAAAAAAAAAABLL * (v134 - v133) + 1;
          if (v140 > 0x555555555555555)
            sub_20E92CED8();
          if (0x5555555555555556 * (v17 - v133) > v140)
            v140 = 0x5555555555555556 * (v17 - v133);
          if (0xAAAAAAAAAAAAAAABLL * (v17 - v133) >= 0x2AAAAAAAAAAAAAALL)
            v141 = 0x555555555555555;
          else
            v141 = v140;
          if (v141)
          {
            v405 = v137;
            if (v141 > 0x555555555555555)
              sub_20E877A38();
            v142 = (char *)operator new(48 * v141);
            v137 = v405;
          }
          else
          {
            v142 = 0;
          }
          v143 = &v142[16 * (v134 - v133)];
          *(_DWORD *)v143 = v135;
          *((_DWORD *)v143 + 1) = (_DWORD)v3;
          *(float64x2_t *)(v143 + 8) = v137;
          v17 = (__int128 *)&v142[48 * v141];
          *((float32x2_t *)v143 + 3) = v136;
          *((float32x2_t *)v143 + 4) = v138;
          *((double *)v143 + 5) = v139;
          v3 = v143 + 48;
          if (v134 == v133)
          {
            *(_QWORD *)&__src[48] = &v142[16 * (v134 - v133)];
            *(_QWORD *)&__src[64] = v17;
          }
          else
          {
            do
            {
              v144 = *(v134 - 3);
              v145 = *(v134 - 1);
              *((_OWORD *)v143 - 2) = *(v134 - 2);
              *((_OWORD *)v143 - 1) = v145;
              *((_OWORD *)v143 - 3) = v144;
              v143 -= 48;
              v134 -= 3;
            }
            while (v134 != v133);
            *(_QWORD *)&__src[48] = v143;
            *(_QWORD *)&__src[64] = v17;
            if (!v133)
              goto LABEL_204;
          }
          operator delete(v133);
LABEL_204:
          v133 = (__int128 *)v143;
          i = __src;
          *(_QWORD *)&__src[56] = v3;
          v132 += 5;
          v134 = (__int128 *)v3;
        }
        while (v132 != v131);
      }
LABEL_205:
      memset(v423, 0, sizeof(v423));
      v146 = *(_QWORD *)(v128 + 584) - *(_QWORD *)(v128 + 576);
      if (v146)
      {
        sub_20E93D564((char **)v423, v146 >> 6);
        v147 = *(_QWORD *)(v128 + 576);
        if (*(_QWORD *)(v128 + 584) != v147)
        {
          v148 = 0;
          v149 = 0;
          v150 = *(_QWORD *)v423;
          do
          {
            v151 = (_OWORD *)(v150 + v148);
            v152 = (__int128 *)(v147 + v148);
            v153 = *v152;
            v154 = v152[1];
            v155 = v152[3];
            v151[2] = v152[2];
            v151[3] = v155;
            *v151 = v153;
            v151[1] = v154;
            ++v149;
            v147 = *(_QWORD *)(v128 + 576);
            v148 += 64;
          }
          while (v149 < (*(_QWORD *)(v128 + 584) - v147) >> 6);
        }
      }
      v156 = *(_QWORD *)(v128 + 24);
      v157 = *(_DWORD *)(v156 + 992);
      v158 = *(int16x8_t *)v423;
      *(_OWORD *)&__src[72] = *(_OWORD *)v423;
      *(_QWORD *)&__src[88] = *(_QWORD *)&v423[16];
      if (v157 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_550;
        }
        v157 = *(_DWORD *)(v156 + 992);
        if (v157 <= 7)
        {
LABEL_211:
          v123 = v402;
          if (v157 > 3)
          {
            if (v157 > 5)
            {
              if (v157 == 6)
              {
                v406 = 22;
                LOBYTE(v131) = 110;
                LOBYTE(v17) = 101;
                LOBYTE(__dst) = 116;
                LOBYTE(v390) = 112;
                LOBYTE(v132) = 115;
                LOWORD(v3) = 25445;
                LOWORD(i) = 29285;
                v159 = 0x507265766F796C46;
                v158.i64[0] = v375;
                goto LABEL_245;
              }
              LOBYTE(__dst) = 0;
              v406 = 14;
              LOBYTE(v390) = 101;
              LOBYTE(v132) = 76;
              LOWORD(v3) = 29550;
              LOWORD(i) = 25449;
              v395 = v158;
              v159 = 0x72746E65636E6F4ELL;
            }
            else
            {
              if (v157 == 5)
                v160 = 50;
              else
                v160 = 49;
              v406 = 16;
              LOBYTE(__dst) = 116;
              LOBYTE(v390) = 70;
              v395 = (int16x8_t)v160;
              LOBYTE(v132) = 115;
              LOWORD(v3) = 29537;
              LOWORD(i) = 28261;
              v159 = 0x4C65796568736946;
            }
          }
          else
          {
            if (v157 <= 1)
            {
              if (!v157)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_550:
                abort();
              }
              LOBYTE(v132) = 0;
              v406 = 10;
              LOWORD(i) = 29550;
              v159 = 0x654C7261656E694CLL;
              goto LABEL_245;
            }
            if (v157 != 2)
            {
              LOBYTE(v390) = 0;
              v406 = 11;
              LOBYTE(v132) = 115;
              LOWORD(i) = 28261;
LABEL_241:
              v395 = v158;
              v159 = 0x4C65796568736946;
              goto LABEL_246;
            }
            v406 = 15;
            LOBYTE(__dst) = 115;
            v395 = 0u;
            LOBYTE(v390) = 76;
            LOBYTE(v132) = 101;
            LOWORD(v3) = 28261;
            LOWORD(i) = 30313;
            v159 = 0x7463657073726550;
          }
          goto LABEL_246;
        }
      }
      else if (v157 <= 7)
      {
        goto LABEL_211;
      }
      v123 = v402;
      if (v157 > 0xB)
      {
        if (v157 <= 0xD)
        {
          if (v157 == 13)
          {
            v406 = 7;
            v159 = 0x736E654C353149;
          }
          else
          {
            LOBYTE(v131) = 0;
            v406 = 20;
            LOBYTE(v17) = 52;
            LOBYTE(__dst) = 109;
            LOBYTE(v390) = 72;
            LOBYTE(v132) = 115;
            LOWORD(v3) = 29285;
            LOWORD(i) = 28261;
            v159 = 0x4C65796568736946;
            v158.i64[0] = v126;
          }
          goto LABEL_245;
        }
        if (v157 != 14)
        {
          LOBYTE(v17) = 0;
          v406 = 19;
          LOBYTE(__dst) = 75;
          LOBYTE(v390) = 101;
          LOBYTE(v132) = 76;
          LOWORD(v3) = 29550;
          LOWORD(i) = 25449;
          v159 = 0x72746E65636E6F4ELL;
          v158.i64[0] = v127;
          goto LABEL_245;
        }
        v406 = 16;
        LOBYTE(__dst) = 67;
        v158.i64[0] = 0x3700000037;
      }
      else
      {
        if (v157 <= 9)
        {
          if (v157 == 9)
          {
            v406 = 17;
            LOBYTE(__dst) = 75;
            LOBYTE(v390) = 101;
            LOBYTE(v132) = 76;
            LOWORD(v3) = 29550;
            LOWORD(i) = 25449;
            v159 = 0x72746E65636E6F4ELL;
            v158.i64[0] = v124;
LABEL_245:
            v395 = v158;
            goto LABEL_246;
          }
          LOBYTE(__dst) = 0;
          v406 = 14;
          LOBYTE(v390) = 75;
          LOBYTE(v132) = 115;
          LOWORD(v3) = 14162;
          LOWORD(i) = 28261;
          goto LABEL_241;
        }
        if (v157 != 10)
        {
          v406 = 18;
          LOBYTE(__dst) = 75;
          LOBYTE(v390) = 101;
          LOBYTE(v132) = 76;
          LOWORD(v3) = 29550;
          LOWORD(i) = 25449;
          v159 = 0x72746E65636E6F4ELL;
          v158.i64[0] = v125;
          goto LABEL_245;
        }
        v406 = 15;
        LOBYTE(__dst) = 55;
        v158 = 0uLL;
      }
      v395 = v158;
      LOBYTE(v390) = 75;
      LOBYTE(v132) = 115;
      LOWORD(v3) = 21060;
      LOWORD(i) = 28261;
      v159 = 0x4C65796568736946;
LABEL_246:
      sub_20FCD0E9C((uint64_t)v423, *(_QWORD *)(v128 + 24));
      *(_QWORD *)&__src[96] = v159;
      *(_WORD *)&__src[104] = (_WORD)i;
      __src[106] = (_BYTE)v132;
      __src[107] = (_BYTE)v390;
      *(_WORD *)&__src[108] = (_WORD)v3;
      __src[110] = (_BYTE)__dst;
      *(_DWORD *)&__src[111] = vmovn_s16(v395).u32[0];
      __src[115] = (_BYTE)v17;
      __src[116] = (_BYTE)v131;
      strcpy(&__src[117], "s");
      __src[119] = v406;
      v161 = *(unsigned __int8 *)(v403 + 2432);
      v162 = *(_BYTE *)(v128 + 736);
      *(_OWORD *)&__src[120] = *(_OWORD *)v423;
      *(_QWORD *)&__src[136] = *(_QWORD *)&v423[16];
      __src[144] = v162;
      LODWORD(v415) = *(_DWORD *)&__src[32];
      if (!v161 || !v410[1])
        goto LABEL_267;
      v163 = (uint8x8_t)vcnt_s8((int8x8_t)v410[1]);
      v163.i16[0] = vaddlv_u8(v163);
      if (v163.u32[0] > 1uLL)
      {
        v164 = *(unsigned int *)&__src[32];
        if (v410[1] <= (void *)*(unsigned int *)&__src[32])
          v164 = *(unsigned int *)&__src[32] % (unint64_t)v410[1];
      }
      else
      {
        v164 = (LODWORD(v410[1]) - 1) & *(_DWORD *)&__src[32];
      }
      v165 = (uint64_t **)*((_QWORD *)v410[0] + v164);
      if (!v165 || (v166 = *v165) == 0)
      {
LABEL_267:
        v169 = v123[7];
        if (v169 >= v123[8])
          goto LABEL_270;
LABEL_268:
        sub_20FCE014C(v169, (uint64_t)__src);
        v170 = v169 + 152;
        v123[7] = v169 + 152;
        i = __src;
        goto LABEL_271;
      }
      if (v163.u32[0] < 2uLL)
      {
        while (1)
        {
          v168 = v166[1];
          if (v168 == *(unsigned int *)&__src[32])
          {
            if (*((_DWORD *)v166 + 4) == *(_DWORD *)&__src[32])
              goto LABEL_269;
          }
          else if ((v168 & ((uint64_t)v410[1] - 1)) != v164)
          {
            goto LABEL_267;
          }
          v166 = (uint64_t *)*v166;
          if (!v166)
            goto LABEL_267;
        }
      }
      while (1)
      {
        v167 = v166[1];
        if (v167 == *(unsigned int *)&__src[32])
          break;
        if ((void *)v167 >= v410[1])
          v167 %= (unint64_t)v410[1];
        if (v167 != v164)
          goto LABEL_267;
LABEL_257:
        v166 = (uint64_t *)*v166;
        if (!v166)
          goto LABEL_267;
      }
      if (*((_DWORD *)v166 + 4) != *(_DWORD *)&__src[32])
        goto LABEL_257;
LABEL_269:
      *(_QWORD *)v423 = &v415;
      *(_DWORD *)&__src[32] = *((_DWORD *)sub_20F2CE5F0((uint64_t)v410, (unsigned int *)&v415, (uint64_t)&unk_2102DB95C, (_DWORD **)v423)+ 5);
      v169 = v123[7];
      if (v169 < v123[8])
        goto LABEL_268;
LABEL_270:
      v170 = sub_20FCDFF48((int64x2_t *)v402 + 3, (uint64_t)__src);
      i = __src;
LABEL_271:
      v123[7] = v170;
      if (*(_QWORD *)&__src[120])
      {
        *(_QWORD *)&__src[128] = *(_QWORD *)&__src[120];
        operator delete(*(void **)&__src[120]);
      }
      if ((__src[119] & 0x80000000) != 0)
      {
        operator delete(*(void **)&__src[96]);
        v171 = *(void **)&__src[72];
        if (*(_QWORD *)&__src[72])
        {
LABEL_275:
          *(_QWORD *)&__src[80] = v171;
          operator delete(v171);
        }
      }
      else
      {
        v171 = *(void **)&__src[72];
        if (*(_QWORD *)&__src[72])
          goto LABEL_275;
      }
      if (*(_QWORD *)&__src[48])
      {
        *(_QWORD *)&__src[56] = *(_QWORD *)&__src[48];
        operator delete(*(void **)&__src[48]);
      }
      v122 = v400 + 2;
    }
    while (v400 + 2 != v384);
  }
  v173 = (char ***)(v123 + 9);
  v172 = v123[9];
  v174 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v123[7] - v123[6]) >> 3);
  v175 = (char *)v123[10];
  v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v175[-v172] >> 3);
  if (v174 <= v176)
  {
    if (v174 < v176)
    {
      v177 = (char *)(v172 - 0x5E50D79435E50D78 * ((uint64_t)(v123[7] - v123[6]) >> 3));
      if (v175 != v177)
      {
        v178 = v175;
        do
        {
          v180 = (void *)*((_QWORD *)v178 - 3);
          v178 -= 24;
          v179 = v180;
          if (v180)
          {
            *((_QWORD *)v175 - 2) = v179;
            operator delete(v179);
          }
          v175 = v178;
        }
        while (v178 != v177);
      }
      v402[10] = v177;
      v123 = v402;
    }
  }
  else
  {
    sub_20E948258((uint64_t)(v123 + 9), v174 - v176);
  }
  v182 = (uint64_t **)(v123 + 12);
  v181 = v123[12];
  v183 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v123[7] - v123[6]) >> 3);
  v184 = (char *)v123[13];
  v185 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v184[-v181] >> 3);
  if (v183 <= v185)
  {
    if (v183 < v185)
    {
      v186 = (char *)(v181 - 0x5E50D79435E50D78 * ((uint64_t)(v123[7] - v123[6]) >> 3));
      if (v184 != v186)
      {
        v187 = v184;
        do
        {
          v189 = (void *)*((_QWORD *)v187 - 3);
          v187 -= 24;
          v188 = v189;
          if (v189)
          {
            *((_QWORD *)v184 - 2) = v188;
            operator delete(v188);
          }
          v184 = v187;
        }
        while (v187 != v186);
      }
      v402[13] = v186;
      v123 = v402;
    }
  }
  else
  {
    sub_20E948258((uint64_t)(v123 + 12), v183 - v185);
  }
  v191 = (uint64_t **)(v123 + 15);
  v190 = v123[15];
  v192 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v123[7] - v123[6]) >> 3);
  v193 = (char *)v123[16];
  v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v193[-v190] >> 3);
  if (v192 <= v194)
  {
    if (v192 < v194)
    {
      v195 = (char *)(v190 - 0x5E50D79435E50D78 * ((uint64_t)(v123[7] - v123[6]) >> 3));
      if (v193 != v195)
      {
        v196 = v193;
        do
        {
          v198 = (void *)*((_QWORD *)v196 - 3);
          v196 -= 24;
          v197 = v198;
          if (v198)
          {
            *((_QWORD *)v193 - 2) = v197;
            operator delete(v197);
          }
          v193 = v196;
        }
        while (v196 != v195);
      }
      v402[16] = v195;
      v123 = v402;
    }
  }
  else
  {
    sub_20E948258((uint64_t)(v123 + 15), v192 - v194);
  }
  v200 = (uint64_t **)(v123 + 18);
  v199 = v123[18];
  v201 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v123[7] - v123[6]) >> 3);
  v202 = (char *)v123[19];
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v202[-v199] >> 3);
  if (v201 <= v203)
  {
    if (v201 < v203)
    {
      v204 = (char *)(v199 - 0x5E50D79435E50D78 * ((uint64_t)(v123[7] - v123[6]) >> 3));
      if (v202 != v204)
      {
        v205 = v202;
        do
        {
          v207 = (void *)*((_QWORD *)v205 - 3);
          v205 -= 24;
          v206 = v207;
          if (v207)
          {
            *((_QWORD *)v202 - 2) = v206;
            operator delete(v206);
          }
          v202 = v205;
        }
        while (v205 != v204);
      }
      v402[19] = v204;
    }
  }
  else
  {
    sub_20E948258((uint64_t)(v123 + 18), v201 - v203);
  }
  v208 = (uint64_t **)a1[5];
  v401 = (uint64_t **)a1[6];
  if (v208 != v401)
  {
    v209 = *v200;
    v210 = *v191;
    v211 = *v182;
    v212 = *v173;
    do
    {
      v214 = (*v208)[9];
      v213 = (*v208)[10];
      v404 = v208;
      v407 = v213;
      while (v214 != v213)
      {
        v215 = (int8x8_t *)a1[1];
        v216 = v215[4];
        if (!*(_QWORD *)&v216)
          goto LABEL_366;
        v217 = *((_DWORD *)*v404 + 2);
        v218 = *((_DWORD *)*v404 + 4);
        v219 = v217 ^ __ROR4__(v218, 13);
        v220 = (uint8x8_t)vcnt_s8(v216);
        v220.i16[0] = vaddlv_u8(v220);
        if (v220.u32[0] > 1uLL)
        {
          v221 = v219;
          if (*(_QWORD *)&v216 <= v219)
            v221 = v219 % *(_QWORD *)&v216;
        }
        else
        {
          v221 = (v216.i32[0] - 1) & v219;
        }
        v222 = *(int8x8_t ***)(*(_QWORD *)&v215[3] + 8 * v221);
        if (!v222 || (v223 = *v222) == 0)
        {
LABEL_366:
          *(_OWORD *)__src = 0uLL;
          v237 = v212[1];
LABEL_367:
          v238 = (unint64_t)v212[2];
          if ((unint64_t)v237 >= v238)
          {
            v246 = *v212;
            v247 = (v237 - *v212) >> 4;
            v248 = v247 + 1;
            if ((unint64_t)(v247 + 1) >> 60)
              sub_20E92CED8();
            v249 = v238 - (_QWORD)v246;
            if (v249 >> 3 > v248)
              v248 = v249 >> 3;
            if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF0)
              v250 = 0xFFFFFFFFFFFFFFFLL;
            else
              v250 = v248;
            if (v250)
            {
              if (v250 >> 60)
                sub_20E877A38();
              v251 = (char *)operator new(16 * v250);
            }
            else
            {
              v251 = 0;
            }
            v252 = &v251[16 * v247];
            *(_QWORD *)v252 = 0;
            *((_DWORD *)v252 + 2) = -1;
            v253 = v252;
            if (v237 != v246)
            {
              do
              {
                v254 = *((_QWORD *)v237 - 2);
                v237 -= 16;
                v255 = *((_DWORD *)v237 + 2);
                *((_QWORD *)v253 - 2) = v254;
                v253 -= 16;
                *((_DWORD *)v253 + 2) = v255;
              }
              while (v237 != v246);
              v237 = *v212;
            }
            v256 = v252 + 16;
            *v212 = v253;
            v212[1] = v252 + 16;
            v212[2] = &v251[16 * v250];
            if (v237)
              operator delete(v237);
            v212[1] = v256;
            v240 = (char *)v211[1];
            v239 = v211[2];
            if ((unint64_t)v240 >= v239)
              goto LABEL_388;
LABEL_369:
            v211[1] = (uint64_t)(v240 + 24);
            v242 = (char *)v210[1];
            v241 = v210[2];
            if ((unint64_t)v242 >= v241)
              goto LABEL_405;
          }
          else
          {
            *(_QWORD *)v237 = 0;
            *((_DWORD *)v237 + 2) = -1;
            v212[1] = v237 + 16;
            v240 = (char *)v211[1];
            v239 = v211[2];
            if ((unint64_t)v240 < v239)
              goto LABEL_369;
LABEL_388:
            v257 = (char *)*v211;
            v258 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v240[-*v211] >> 3);
            v259 = v258 + 1;
            if (v258 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E92CED8();
            v260 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - (_QWORD)v257) >> 3);
            if (2 * v260 > v259)
              v259 = 2 * v260;
            if (v260 >= 0x555555555555555)
              v261 = 0xAAAAAAAAAAAAAAALL;
            else
              v261 = v259;
            if (v261)
            {
              if (v261 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v262 = (char *)operator new(24 * v261);
              v263 = (uint64_t)&v262[24 * v258];
              v264 = v263;
              if (v240 == v257)
              {
LABEL_402:
                v266 = v263 + 24;
                *v211 = v264;
                v211[1] = v263 + 24;
                v211[2] = (uint64_t)&v262[24 * v261];
                if (v240)
                  goto LABEL_403;
                goto LABEL_404;
              }
            }
            else
            {
              v262 = 0;
              v263 = 8 * ((uint64_t)&v240[-*v211] >> 3);
              v264 = v263;
              if (v240 == v257)
                goto LABEL_402;
            }
            do
            {
              v265 = *(_OWORD *)(v240 - 24);
              *(_QWORD *)(v264 - 8) = *((_QWORD *)v240 - 1);
              *(_OWORD *)(v264 - 24) = v265;
              v264 -= 24;
              v240 -= 24;
            }
            while (v240 != v257);
            v240 = (char *)*v211;
            v266 = v263 + 24;
            *v211 = v264;
            v211[1] = v263 + 24;
            v211[2] = (uint64_t)&v262[24 * v261];
            if (v240)
LABEL_403:
              operator delete(v240);
LABEL_404:
            v211[1] = v266;
            v242 = (char *)v210[1];
            v241 = v210[2];
            if ((unint64_t)v242 >= v241)
            {
LABEL_405:
              v267 = (char *)*v210;
              v268 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v242[-*v210] >> 3);
              v269 = v268 + 1;
              if (v268 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E92CED8();
              v270 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v241 - (_QWORD)v267) >> 3);
              if (2 * v270 > v269)
                v269 = 2 * v270;
              if (v270 >= 0x555555555555555)
                v271 = 0xAAAAAAAAAAAAAAALL;
              else
                v271 = v269;
              if (v271)
              {
                if (v271 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v272 = (char *)operator new(24 * v271);
                v273 = (uint64_t)&v272[24 * v268];
                v274 = v273;
                if (v242 == v267)
                {
LABEL_419:
                  v276 = v273 + 24;
                  *v210 = v274;
                  v210[1] = v273 + 24;
                  v210[2] = (uint64_t)&v272[24 * v271];
                  if (v242)
                    goto LABEL_420;
                  goto LABEL_421;
                }
              }
              else
              {
                v272 = 0;
                v273 = 8 * ((uint64_t)&v242[-*v210] >> 3);
                v274 = v273;
                if (v242 == v267)
                  goto LABEL_419;
              }
              do
              {
                v275 = *(_OWORD *)(v242 - 24);
                *(_QWORD *)(v274 - 8) = *((_QWORD *)v242 - 1);
                *(_OWORD *)(v274 - 24) = v275;
                v274 -= 24;
                v242 -= 24;
              }
              while (v242 != v267);
              v242 = (char *)*v210;
              v276 = v273 + 24;
              *v210 = v274;
              v210[1] = v273 + 24;
              v210[2] = (uint64_t)&v272[24 * v271];
              if (v242)
LABEL_420:
                operator delete(v242);
LABEL_421:
              v210[1] = v276;
              v244 = (char *)v209[1];
              v243 = v209[2];
              if ((unint64_t)v244 >= v243)
              {
LABEL_422:
                v277 = (char *)*v209;
                v278 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v244[-*v209] >> 4);
                v279 = v278 + 1;
                if (v278 + 1 > 0x333333333333333)
                  sub_20E92CED8();
                v280 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v243 - (_QWORD)v277) >> 4);
                if (2 * v280 > v279)
                  v279 = 2 * v280;
                if (v280 >= 0x199999999999999)
                  v281 = 0x333333333333333;
                else
                  v281 = v279;
                if (v281)
                {
                  if (v281 > 0x333333333333333)
                    sub_20E877A38();
                  v282 = (char *)operator new(80 * v281);
                  v283 = (uint64_t)&v282[80 * v278];
                  *(_BYTE *)(v283 + 72) = 0;
                  v284 = v283;
                  if (v244 == v277)
                  {
LABEL_436:
                    v245 = (int8x16_t *)(v283 + 80);
                    *v209 = v284;
                    v209[1] = v283 + 80;
                    v209[2] = (uint64_t)&v282[80 * v281];
                    if (!v244)
                      goto LABEL_438;
                    goto LABEL_437;
                  }
                }
                else
                {
                  v282 = 0;
                  v283 = 16 * ((uint64_t)&v244[-*v209] >> 4);
                  *(_BYTE *)(v283 + 0x48) = 0;
                  v284 = 80 * v278;
                  if (v244 == v277)
                    goto LABEL_436;
                }
                do
                {
                  *(_OWORD *)(v284 - 80) = *((_OWORD *)v244 - 5);
                  v285 = *((_OWORD *)v244 - 4);
                  v286 = *((_OWORD *)v244 - 3);
                  v287 = *((_OWORD *)v244 - 2);
                  *(_OWORD *)(v284 - 23) = *(_OWORD *)(v244 - 23);
                  *(_OWORD *)(v284 - 48) = v286;
                  *(_OWORD *)(v284 - 32) = v287;
                  *(_OWORD *)(v284 - 64) = v285;
                  v284 -= 80;
                  v244 -= 80;
                }
                while (v244 != v277);
                v244 = (char *)*v209;
                v245 = (int8x16_t *)(v283 + 80);
                *v209 = v284;
                v209[1] = v283 + 80;
                v209[2] = (uint64_t)&v282[80 * v281];
                if (!v244)
                  goto LABEL_438;
                goto LABEL_437;
              }
LABEL_371:
              v244[72] = 0;
              v245 = (int8x16_t *)(v244 + 80);
              goto LABEL_438;
            }
          }
          v210[1] = (uint64_t)(v242 + 24);
          v244 = (char *)v209[1];
          v243 = v209[2];
          if ((unint64_t)v244 >= v243)
            goto LABEL_422;
          goto LABEL_371;
        }
        v224 = **v404;
        v225 = *(unsigned int *)(v214 + 4);
        if (v220.u32[0] < 2uLL)
        {
          v226 = *(_QWORD *)&v216 - 1;
          while (1)
          {
            v228 = v223[1];
            if (*(_QWORD *)&v228 == v219)
            {
              if (v223[4].i32[0] == v218 && *(_QWORD *)&v223[2] == v224 && v223[3].i32[0] == v217)
                goto LABEL_346;
            }
            else if ((*(_QWORD *)&v228 & v226) != v221)
            {
              goto LABEL_366;
            }
            v223 = (int8x8_t *)*v223;
            if (!v223)
              goto LABEL_366;
          }
        }
        while (1)
        {
          v227 = v223[1];
          if (*(_QWORD *)&v227 == v219)
            break;
          if (*(_QWORD *)&v227 >= *(_QWORD *)&v216)
            *(_QWORD *)&v227 %= *(_QWORD *)&v216;
          if (*(_QWORD *)&v227 != v221)
            goto LABEL_366;
LABEL_332:
          v223 = (int8x8_t *)*v223;
          if (!v223)
            goto LABEL_366;
        }
        if (v223[4].i32[0] != v218 || *(_QWORD *)&v223[2] != v224 || v223[3].i32[0] != v217)
          goto LABEL_332;
LABEL_346:
        v229 = v223[6];
        if (!*(_QWORD *)&v229)
          goto LABEL_366;
        v230 = (uint8x8_t)vcnt_s8(v229);
        v230.i16[0] = vaddlv_u8(v230);
        if (v230.u32[0] > 1uLL)
        {
          v231 = *(unsigned int *)(v214 + 4);
          if (*(_QWORD *)&v229 <= v225)
            v231 = v225 % *(_QWORD *)&v229;
        }
        else
        {
          v231 = (v229.i32[0] - 1) & v225;
        }
        v232 = *(uint64_t ***)(*(_QWORD *)&v223[5] + 8 * v231);
        if (!v232)
          goto LABEL_366;
        v233 = *v232;
        if (!v233)
          goto LABEL_366;
        if (v230.u32[0] < 2uLL)
        {
          v234 = *(_QWORD *)&v229 - 1;
          while (1)
          {
            v236 = v233[1];
            if (v236 == v225)
            {
              if (*((_DWORD *)v233 + 4) == (_DWORD)v225)
                goto LABEL_443;
            }
            else if ((v236 & v234) != v231)
            {
              goto LABEL_366;
            }
            v233 = (uint64_t *)*v233;
            if (!v233)
              goto LABEL_366;
          }
        }
        while (2)
        {
          v235 = v233[1];
          if (v235 != v225)
          {
            if (v235 >= *(_QWORD *)&v229)
              v235 %= *(_QWORD *)&v229;
            if (v235 != v231)
              goto LABEL_366;
            goto LABEL_356;
          }
          if (*((_DWORD *)v233 + 4) != (_DWORD)v225)
          {
LABEL_356:
            v233 = (uint64_t *)*v233;
            if (!v233)
              goto LABEL_366;
            continue;
          }
          break;
        }
LABEL_443:
        v291 = v233[3];
        v292 = v233[4];
        *(_QWORD *)__src = v291;
        *(_QWORD *)&__src[8] = v292;
        if (v292)
        {
          v293 = (unint64_t *)(v292 + 8);
          do
            v294 = __ldxr(v293);
          while (__stxr(v294 + 1, v293));
        }
        v237 = v212[1];
        if (!v291)
          goto LABEL_367;
        v295 = v291 + 40;
        if (!*(_BYTE *)(v291 + 192))
          v295 = 0;
        v297 = *(_QWORD *)(v295 + 8);
        v296 = *(_QWORD *)(v295 + 16);
        v298 = *(_QWORD *)(v295 + 24);
        v300 = *(_QWORD *)(v295 + 64);
        v299 = *(_QWORD *)(v295 + 72);
        v301 = *(_QWORD *)(v295 + 80);
        v230.i32[0] = *(_DWORD *)(v295 + 144);
        v396 = (float32x2_t)v230;
        *(_OWORD *)__dsta = *(_OWORD *)(v295 + 128);
        v391 = *(float32x4_t *)(v295 + 112);
        v302 = *(_QWORD *)(v291 + 24);
        v303 = *(unsigned int *)(v291 + 32);
        v304 = (unint64_t)v212[2];
        if ((unint64_t)v237 >= v304)
        {
          v306 = *v212;
          v307 = (v237 - *v212) >> 4;
          v308 = v307 + 1;
          if ((unint64_t)(v307 + 1) >> 60)
            sub_20E92CED8();
          v309 = v304 - (_QWORD)v306;
          if (v309 >> 3 > v308)
            v308 = v309 >> 3;
          if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF0)
            v310 = 0xFFFFFFFFFFFFFFFLL;
          else
            v310 = v308;
          if (v310)
          {
            v381 = v302;
            v385 = v303;
            if (v310 >> 60)
              sub_20E877A38();
            v311 = v310;
            v312 = (char *)operator new(16 * v310);
            v310 = v311;
            v303 = v385;
            v302 = v381;
          }
          else
          {
            v312 = 0;
          }
          v313 = &v312[16 * v307];
          *(_QWORD *)v313 = v302;
          *((_QWORD *)v313 + 1) = v303;
          v314 = v313;
          if (v237 != v306)
          {
            do
            {
              v315 = *((_QWORD *)v237 - 2);
              v237 -= 16;
              v316 = *((_DWORD *)v237 + 2);
              *((_QWORD *)v314 - 2) = v315;
              v314 -= 16;
              *((_DWORD *)v314 + 2) = v316;
            }
            while (v237 != v306);
            v237 = *v212;
          }
          v305 = v313 + 16;
          *v212 = v314;
          v212[1] = v313 + 16;
          v212[2] = &v312[16 * v310];
          if (v237)
            operator delete(v237);
        }
        else
        {
          *(_QWORD *)v237 = v302;
          *((_QWORD *)v237 + 1) = v303;
          v305 = v237 + 16;
        }
        v212[1] = v305;
        v318 = (_QWORD *)v211[1];
        v317 = v211[2];
        if ((unint64_t)v318 >= v317)
        {
          v322 = (_QWORD *)*v211;
          v323 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v318 - *v211) >> 3);
          v324 = v323 + 1;
          if (v323 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E92CED8();
          v325 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v317 - (_QWORD)v322) >> 3);
          if (2 * v325 > v324)
            v324 = 2 * v325;
          if (v325 >= 0x555555555555555)
            v326 = 0xAAAAAAAAAAAAAAALL;
          else
            v326 = v324;
          if (v326)
          {
            if (v326 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v327 = (char *)operator new(24 * v326);
          }
          else
          {
            v327 = 0;
          }
          v328 = &v327[24 * v323];
          *(_QWORD *)v328 = v297;
          *((_QWORD *)v328 + 1) = v296;
          *((_QWORD *)v328 + 2) = v298;
          v329 = v328;
          if (v318 != v322)
          {
            do
            {
              v330 = *(_OWORD *)(v318 - 3);
              *((_QWORD *)v329 - 1) = *(v318 - 1);
              *(_OWORD *)(v329 - 24) = v330;
              v329 -= 24;
              v318 -= 3;
            }
            while (v318 != v322);
            v318 = (_QWORD *)*v211;
          }
          v331 = v328 + 24;
          *v211 = (uint64_t)v329;
          v211[1] = (uint64_t)(v328 + 24);
          v211[2] = (uint64_t)&v327[24 * v326];
          if (v318)
            operator delete(v318);
          v211[1] = (uint64_t)v331;
          v320 = (_QWORD *)v210[1];
          v319 = v210[2];
          if ((unint64_t)v320 >= v319)
            goto LABEL_485;
LABEL_468:
          *v320 = v300;
          v320[1] = v299;
          v321 = v320 + 3;
          v320[2] = v301;
        }
        else
        {
          *v318 = v297;
          v318[1] = v296;
          v318[2] = v298;
          v211[1] = (uint64_t)(v318 + 3);
          v320 = (_QWORD *)v210[1];
          v319 = v210[2];
          if ((unint64_t)v320 < v319)
            goto LABEL_468;
LABEL_485:
          v332 = (_QWORD *)*v210;
          v333 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v320 - *v210) >> 3);
          v334 = v333 + 1;
          if (v333 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E92CED8();
          v335 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v319 - (_QWORD)v332) >> 3);
          if (2 * v335 > v334)
            v334 = 2 * v335;
          if (v335 >= 0x555555555555555)
            v336 = 0xAAAAAAAAAAAAAAALL;
          else
            v336 = v334;
          if (v336)
          {
            if (v336 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v337 = (char *)operator new(24 * v336);
          }
          else
          {
            v337 = 0;
          }
          v338 = &v337[24 * v333];
          *(_QWORD *)v338 = v300;
          *((_QWORD *)v338 + 1) = v299;
          *((_QWORD *)v338 + 2) = v301;
          v339 = v338;
          if (v320 != v332)
          {
            do
            {
              v340 = *(_OWORD *)(v320 - 3);
              *((_QWORD *)v339 - 1) = *(v320 - 1);
              *(_OWORD *)(v339 - 24) = v340;
              v339 -= 24;
              v320 -= 3;
            }
            while (v320 != v332);
            v320 = (_QWORD *)*v210;
          }
          v321 = v338 + 24;
          *v210 = (uint64_t)v339;
          v210[1] = (uint64_t)(v338 + 24);
          v210[2] = (uint64_t)&v337[24 * v336];
          if (v320)
            operator delete(v320);
        }
        v341 = (int8x16_t)vcvt_hight_f64_f32(*(float32x4_t *)__dsta);
        v342 = (int8x16_t)vcvt_hight_f64_f32(v391);
        v343 = vextq_s8(v341, v341, 8uLL).u64[0];
        v344 = (int8x16_t)vcvtq_f64_f32((float32x2_t)__dsta[0]);
        v345 = vextq_s8(v342, v342, 8uLL).u64[0];
        v346 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v391.f32);
        v347 = *(_OWORD *)&vcvtq_f64_f32(v396);
        v348 = vextq_s8(v344, v344, 8uLL).u64[0];
        v349 = vextq_s8(v346, v346, 8uLL).u64[0];
        v210[1] = (uint64_t)v321;
        if (*(_BYTE *)(*(_QWORD *)__src + 192))
          v350 = *(_QWORD *)__src + 40;
        else
          v350 = 0;
        v351 = *(_BYTE *)(v350 + 148);
        v244 = (char *)v209[1];
        v352 = v209[2];
        if ((unint64_t)v244 < v352)
        {
          v346.i64[1] = v349;
          v342.i64[1] = v345;
          *(int8x16_t *)v244 = v346;
          *((int8x16_t *)v244 + 1) = v342;
          v344.i64[1] = v348;
          *((_QWORD *)v244 + 8) = v347;
          v341.i64[1] = v343;
          *((int8x16_t *)v244 + 2) = v344;
          *((int8x16_t *)v244 + 3) = v341;
          v244[72] = v351;
          v245 = (int8x16_t *)(v244 + 80);
          goto LABEL_438;
        }
        v353 = (char *)*v209;
        v354 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v244[-*v209] >> 4);
        v355 = v354 + 1;
        v356 = 0x333333333333333;
        if (v354 + 1 > 0x333333333333333)
          sub_20E92CED8();
        v357 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v352 - (_QWORD)v353) >> 4);
        if (2 * v357 > v355)
          v355 = 2 * v357;
        if (v357 < 0x199999999999999)
          v356 = v355;
        if (v356)
        {
          v371 = v349;
          v372 = v346.i64[0];
          v373 = v345;
          v377 = v348;
          v379 = (char *)*v209;
          v376 = v351;
          v382 = v347;
          v386 = v342.i64[0];
          __dstb = v344.i64[0];
          v392 = v343;
          v397 = v341.i64[0];
          if (v356 > 0x333333333333333)
            sub_20E877A38();
          v358 = v356;
          v359 = (char *)operator new(80 * v356);
          v343 = v392;
          v341.i64[0] = v397;
          v342.i64[0] = v386;
          v344.i64[0] = __dstb;
          v347 = v382;
          v351 = v376;
          v353 = v379;
          v348 = v377;
          v356 = v358;
          v346.i64[0] = v372;
          v345 = v373;
          v349 = v371;
        }
        else
        {
          v359 = 0;
        }
        v346.i64[1] = v349;
        v342.i64[1] = v345;
        v360 = (int8x16_t *)&v359[80 * v354];
        *v360 = v346;
        v360[1] = v342;
        v344.i64[1] = v348;
        v360[4].i64[0] = v347;
        v341.i64[1] = v343;
        v360[2] = v344;
        v360[3] = v341;
        v360[4].i8[8] = v351;
        v361 = v360;
        if (v244 != v353)
        {
          do
          {
            v361[-5] = *((int8x16_t *)v244 - 5);
            v362 = *((int8x16_t *)v244 - 4);
            v363 = *((int8x16_t *)v244 - 3);
            v364 = *((int8x16_t *)v244 - 2);
            *(int8x16_t *)((char *)v361 - 23) = *(int8x16_t *)(v244 - 23);
            v361[-3] = v363;
            v361[-2] = v364;
            v361[-4] = v362;
            v361 -= 5;
            v244 -= 80;
          }
          while (v244 != v353);
          v244 = (char *)*v209;
        }
        v245 = v360 + 5;
        *v209 = (uint64_t)v361;
        v209[1] = (uint64_t)v360[5].i64;
        v209[2] = (uint64_t)&v359[80 * v356];
        if (v244)
LABEL_437:
          operator delete(v244);
LABEL_438:
        v209[1] = (uint64_t)v245;
        v288 = *(std::__shared_weak_count **)&__src[8];
        if (*(_QWORD *)&__src[8])
        {
          v289 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v214 += 40;
        v213 = v407;
      }
      v212 += 3;
      v211 += 3;
      v210 += 3;
      v209 += 3;
      v208 = v404 + 2;
    }
    while (v404 + 2 != v401);
  }
  v365 = __p[0];
  if (__p[0])
  {
    do
    {
      v366 = (_QWORD *)*v365;
      operator delete(v365);
      v365 = v366;
    }
    while (v366);
  }
  v367 = v410[0];
  v410[0] = 0;
  if (v367)
    operator delete(v367);
  v368 = v414;
  if (v414)
  {
    p_shared_owners = (unint64_t *)&v414->__shared_owners_;
    do
      v370 = __ldaxr(p_shared_owners);
    while (__stlxr(v370 - 1, p_shared_owners));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
}

void sub_20FCD5A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  sub_20E86665C((uint64_t)&__p);
  sub_20E8C25A8((uint64_t)&a41);
  sub_20E896798((uint64_t)&a47);
  sub_20E948C74(a35);
  _Unwind_Resume(a1);
}

void sub_20FCD5C18(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t **v3;
  char **v4;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  char **v25;
  char **v26;
  char *v27;
  unsigned int v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t *v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  __int128 v84;
  char v85;
  char v86;
  int64x2_t v87;
  uint64_t *v88;
  uint64_t *v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  _DWORD **v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  float v101;
  _BOOL8 v102;
  unint64_t v103;
  unint64_t v104;
  size_t prime;
  unint64_t v106;
  uint8x8_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  void *v137;
  void **v138;
  _QWORD *v139;
  _QWORD *v140;
  void *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t **v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  float32x2_t v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int v160;
  unint64_t v161;
  uint8x8_t v162;
  unint64_t v163;
  uint64_t **v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int16 v178;
  char *v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unint64_t v183;
  uint8x8_t v184;
  unint64_t v185;
  uint64_t **v186;
  uint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  int8x8_t v194;
  uint8x8_t v195;
  unint64_t v196;
  unsigned __int8 v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  BOOL v201;
  uint64_t v202;
  const char *v203;
  size_t v204;
  unsigned __int8 v205;
  unsigned __int8 v206;
  const char *v207;
  size_t v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  NSObject *v213;
  uint64_t v214;
  uint64_t v215;
  size_t v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  const char *v226;
  void *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t **v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE *v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _BYTE *v256;
  unint64_t *v257;
  char *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  _OWORD *v272;
  __int128 *v273;
  uint64_t v274;
  __int128 v275;
  unint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  __int128 v283;
  char *v284;
  char *v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  char *v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  int v296;
  char *v297;
  void *v298;
  void *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  char *v305;
  char *v306;
  void *v307;
  _QWORD *v308;
  _QWORD *v309;
  void *v310;
  void *v311;
  _QWORD *v312;
  _QWORD *v313;
  void *v314;
  void **v315;
  _QWORD *v316;
  _QWORD *__dst;
  uint64_t *v318;
  const char *v320;
  __int128 v321;
  uint64_t *v322;
  uint64_t *v323;
  __int128 v324;
  char *v325;
  int v326;
  uint64_t **v327;
  void *v328[2];
  void *v329[2];
  const char *v330;
  int v331;
  const char *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  _QWORD v335[2];
  std::__shared_weak_count *v336;
  void *v337;
  char *v338;
  unint64_t v339;
  void *v340[2];
  void *v341[2];
  float v342;
  void *v343;
  char *v344;
  char *v345;
  _BYTE object[24];
  __int128 v347;
  void *v348[2];
  unint64_t v349;
  char v350;
  void *v351[2];
  char v352;
  char v353;
  uint64_t v354;
  _BYTE __src[744];
  __int128 __p;
  uint64_t v357;
  _OWORD v358[2];
  uint64_t v359;

  v3 = a3;
  v359 = *MEMORY[0x24BDAC8D0];
  a3[1] = 0;
  v4 = (char **)(a3 + 1);
  a3[2] = 0;
  *a3 = (uint64_t *)(a3 + 1);
  *(_OWORD *)(a3 + 3) = 0u;
  v318 = (uint64_t *)(a3 + 3);
  *(_OWORD *)(a3 + 5) = 0u;
  *(_OWORD *)(a3 + 7) = 0u;
  *(_OWORD *)(a3 + 9) = 0u;
  a3[11] = 0;
  *((_BYTE *)a3 + 96) = 3;
  v343 = 0;
  v344 = 0;
  v345 = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  v327 = v3;
  if (v5 != *(_QWORD *)a2)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v7);
    v9 = &v8[16 * (v7 >> 4)];
    v343 = v8;
    v345 = v9;
    memcpy(v8, v6, v7 - 4);
    v344 = v9;
    v3 = v327;
  }
  v10 = (_QWORD *)*a1;
  v11 = *(_QWORD **)(*a1 + 1760);
  if (v11 != (_QWORD *)(*a1 + 1768))
  {
    v12 = (_QWORD *)v10[37];
    while (1)
    {
      v13 = v11[5];
      v14 = *(_OWORD *)(v12 + 7);
      v15 = *(_OWORD *)(v12 + 11);
      *(_OWORD *)&__src[32] = *(_OWORD *)(v12 + 9);
      *(_OWORD *)&__src[48] = v15;
      *(_QWORD *)&__src[64] = v12[13];
      *(_OWORD *)__src = *(_OWORD *)(v12 + 5);
      *(_OWORD *)&__src[16] = v14;
      v321 = *((_OWORD *)v12 + 7);
      v16 = v12[16];
      v17 = *(_DWORD *)(v13 + 992);
      if (v17 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_532;
        }
        v17 = *(_DWORD *)(v13 + 992);
        if (v17 > 7)
        {
LABEL_15:
          if (v17 == 14)
            v19 = 11;
          else
            v19 = 12;
          if (v17 == 13)
            v20 = 10;
          else
            v20 = 9;
          if (v17 <= 0xD)
            v19 = v20;
          if (v17 == 10)
            v21 = 7;
          else
            v21 = 8;
          if (v17 == 9)
            v22 = 6;
          else
            v22 = 5;
          if (v17 <= 9)
            v21 = v22;
          if (v17 <= 0xB)
            v18 = v21;
          else
            v18 = v19;
          goto LABEL_41;
        }
      }
      else if (v17 > 7)
      {
        goto LABEL_15;
      }
      if (v17 > 3)
        break;
      if (v17 <= 1)
      {
        if (!v17)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_532:
          abort();
        }
        v18 = 0;
        goto LABEL_41;
      }
      if (v17 != 2)
        goto LABEL_40;
      v18 = 1;
LABEL_41:
      sub_20FCD0E9C((uint64_t)object, v13);
      v324 = *(_OWORD *)object;
      v23 = *(_QWORD *)&object[16];
      v24 = *((_DWORD *)v11 + 8);
      v25 = v4;
      v26 = v4;
      v27 = *v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v26 = (char **)v27;
            v28 = *((_DWORD *)v27 + 8);
            if (v24 >= v28)
              break;
            v27 = *v26;
            v25 = v26;
            if (!*v26)
              goto LABEL_48;
          }
          if (v28 >= v24)
            break;
          v27 = v26[1];
          if (!v27)
          {
            v25 = v26 + 1;
            goto LABEL_48;
          }
        }
        v3 = v327;
        if (*(_QWORD *)object)
          operator delete(*(void **)object);
      }
      else
      {
LABEL_48:
        v29 = (char *)operator new(0xA8uLL);
        v30 = *(_OWORD *)__src;
        *(_OWORD *)(v29 + 56) = *(_OWORD *)&__src[16];
        v31 = *(_OWORD *)&__src[48];
        *(_OWORD *)(v29 + 72) = *(_OWORD *)&__src[32];
        *(_OWORD *)(v29 + 88) = v31;
        *((_DWORD *)v29 + 8) = v24;
        *((_QWORD *)v29 + 13) = *(_QWORD *)&__src[64];
        *(_OWORD *)(v29 + 40) = v30;
        *((_OWORD *)v29 + 7) = v321;
        *((_QWORD *)v29 + 16) = v16;
        v29[136] = v18;
        *((_OWORD *)v29 + 9) = v324;
        *((_QWORD *)v29 + 20) = v23;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = v26;
        *v25 = v29;
        v3 = v327;
        v32 = (uint64_t *)**v327;
        if (v32)
        {
          *v327 = v32;
          v29 = *v25;
        }
        sub_20E868578(v327[1], (uint64_t *)v29);
        v327[2] = (uint64_t *)((char *)v327[2] + 1);
      }
      v33 = (_QWORD *)v11[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v11[2];
          v201 = *v34 == (_QWORD)v11;
          v11 = v34;
        }
        while (!v201);
      }
      v35 = (_QWORD *)v12[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v12[2];
          v201 = *v36 == (_QWORD)v12;
          v12 = v36;
        }
        while (!v201);
      }
      v10 = (_QWORD *)*a1;
      v11 = v34;
      v12 = v36;
      if (v34 == (_QWORD *)(*a1 + 1768))
        goto LABEL_64;
    }
    if (v17 >= 6)
    {
      if (v17 == 6)
        v18 = 3;
      else
        v18 = 4;
      goto LABEL_41;
    }
LABEL_40:
    v18 = 2;
    goto LABEL_41;
  }
LABEL_64:
  v37 = (_QWORD *)v10[6];
  v38 = v10 + 7;
  if (v37 != v10 + 7)
  {
    v40 = (char *)v343;
    v39 = v344;
    __dst = v10 + 7;
    while (1)
    {
      v41 = v37[4];
      if (v40 != v39)
      {
        v42 = v40;
        while (*(_QWORD *)v42 != v41 || *((_DWORD *)v42 + 2) != *((_DWORD *)v37 + 10))
        {
          v42 += 16;
          if (v42 == v39)
            goto LABEL_73;
        }
        if (v42 != v39)
          goto LABEL_97;
      }
LABEL_73:
      sub_20FCD0980(v41, v37[5], v37[6], (uint64_t)__src);
      v44 = (unint64_t)v3[4];
      v43 = (unint64_t)v3[5];
      if (v44 >= v43)
        break;
      memcpy(v3[4], __src, 0x2E8uLL);
      *(_QWORD *)(v44 + 744) = 0;
      *(_QWORD *)(v44 + 760) = 0;
      *(_QWORD *)(v44 + 752) = 0;
      *(_OWORD *)(v44 + 744) = __p;
      *(_QWORD *)(v44 + 760) = v357;
      __p = 0uLL;
      v357 = 0;
      v45 = *(_OWORD *)((char *)v358 + 12);
      *(_OWORD *)(v44 + 768) = v358[0];
      *(_OWORD *)(v44 + 780) = v45;
      v3[4] = (uint64_t *)(v44 + 800);
LABEL_97:
      v60 = (_QWORD *)v37[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (_QWORD *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (_QWORD *)v37[2];
          v201 = *v61 == (_QWORD)v37;
          v37 = v61;
        }
        while (!v201);
      }
      v37 = v61;
      if (v61 == v38)
        goto LABEL_105;
    }
    v46 = *v318;
    v47 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v44 - *v318) >> 5);
    v48 = v47 + 1;
    if (v47 + 1 > 0x51EB851EB851EBLL)
      sub_20E92CED8();
    v49 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v43 - v46) >> 5);
    if (2 * v49 > v48)
      v48 = 2 * v49;
    if (v49 >= 0x28F5C28F5C28F5)
      v50 = 0x51EB851EB851EBLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 > 0x51EB851EB851EBLL)
        sub_20E877A38();
      v51 = (char *)operator new(800 * v50);
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[800 * v47];
    v53 = &v51[800 * v50];
    memcpy(v52, __src, 0x2E8uLL);
    *(_OWORD *)(v52 + 744) = __p;
    *((_QWORD *)v52 + 95) = v357;
    __p = 0uLL;
    *((_OWORD *)v52 + 48) = v358[0];
    *(_OWORD *)(v52 + 780) = *(_OWORD *)((char *)v358 + 12);
    v54 = v52 + 800;
    v357 = 0;
    if (v44 == v46)
    {
      v327[3] = (uint64_t *)v52;
      v327[4] = (uint64_t *)v54;
      v3 = v327;
      v327[5] = (uint64_t *)v53;
    }
    else
    {
      do
      {
        v55 = v52;
        v52 -= 800;
        memcpy(v52, (const void *)(v44 - 800), 0x2E8uLL);
        *((_QWORD *)v55 - 6) = 0;
        *((_QWORD *)v55 - 5) = 0;
        *(_OWORD *)(v55 - 56) = *(_OWORD *)(v44 - 56);
        *((_QWORD *)v55 - 5) = *(_QWORD *)(v44 - 40);
        *(_QWORD *)(v44 - 56) = 0;
        *(_QWORD *)(v44 - 48) = 0;
        *(_QWORD *)(v44 - 40) = 0;
        v56 = *(_OWORD *)(v44 - 20);
        *((_OWORD *)v55 - 2) = *(_OWORD *)(v44 - 32);
        *(_OWORD *)(v55 - 20) = v56;
        v44 -= 800;
      }
      while (v44 != v46);
      v44 = (unint64_t)v327[3];
      v57 = v327[4];
      v327[3] = (uint64_t *)v52;
      v327[4] = (uint64_t *)v54;
      v3 = v327;
      v327[5] = (uint64_t *)v53;
      if (v57 == (uint64_t *)v44)
      {
        v38 = __dst;
        if (!v44)
        {
LABEL_95:
          v59 = (void *)__p;
          v3[4] = (uint64_t *)v54;
          if (v59)
          {
            *((_QWORD *)&__p + 1) = v59;
            operator delete(v59);
          }
          goto LABEL_97;
        }
LABEL_94:
        operator delete((void *)v44);
        goto LABEL_95;
      }
      v38 = __dst;
      do
      {
        v58 = (void *)*(v57 - 7);
        if (v58)
        {
          *(v57 - 6) = (uint64_t)v58;
          operator delete(v58);
        }
        v57 -= 100;
      }
      while (v57 != (uint64_t *)v44);
    }
    if (!v44)
      goto LABEL_95;
    goto LABEL_94;
  }
LABEL_105:
  *(_OWORD *)v340 = 0u;
  *(_OWORD *)v341 = 0u;
  v342 = 1.0;
  v337 = 0;
  v338 = 0;
  v339 = 0;
  v63 = (uint64_t *)a1[5];
  v62 = (uint64_t *)a1[6];
  if (v63 != v62)
  {
    v65 = (char *)v343;
    v64 = v344;
    v322 = (uint64_t *)a1[6];
    v325 = (char *)v343;
    while (1)
    {
      v66 = *v63;
      if (v65 != v64)
      {
        v67 = v65;
        while (*(_QWORD *)v67 != *(_QWORD *)v66 || *((_DWORD *)v67 + 2) != *(_DWORD *)(v66 + 8))
        {
          v67 += 16;
          if (v67 == v64)
            goto LABEL_115;
        }
        if (v67 != v64)
          goto LABEL_108;
      }
LABEL_115:
      sub_20FCD1F04(v66, (uint64_t)__src);
      v68 = v327[6];
      v69 = (unint64_t)v327[7];
      v70 = (unint64_t)v327[8];
      if (v69 >= v70)
      {
        v71 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v69 - (_QWORD)v68) >> 3);
        if (v71 + 1 > 0x186186186186186)
          sub_20E92CED8();
        v74 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v70 - (_QWORD)v68) >> 3);
        v75 = 2 * v74;
        if (2 * v74 <= v71 + 1)
          v75 = v71 + 1;
        if (v74 >= 0xC30C30C30C30C3)
          v76 = 0x186186186186186;
        else
          v76 = v75;
        *((_QWORD *)&v347 + 1) = v327 + 8;
        if (v76)
        {
          if (v76 > 0x186186186186186)
            sub_20E877A38();
          v77 = (char *)operator new(168 * v76);
        }
        else
        {
          v77 = 0;
        }
        *(_QWORD *)object = v77;
        *(_QWORD *)&object[8] = &v77[168 * v71];
        *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
        *(_QWORD *)&v347 = &v77[168 * v76];
        sub_20E9417E0(*(uint64_t *)&object[8], (__int128 *)__src);
        v78 = *(uint64_t **)&object[8];
        v72 = *(_QWORD *)&object[16] + 168;
        *(_QWORD *)&object[16] += 168;
        v80 = v327[6];
        v79 = (unint64_t)v327[7];
        if ((uint64_t *)v79 == v80)
        {
          v87 = vdupq_n_s64(v79);
        }
        else
        {
          v81 = 0;
          do
          {
            v82 = &v78[v81 / 8];
            v83 = v79 + v81;
            v84 = *(_OWORD *)(v79 + v81 - 168);
            *(_OWORD *)(v82 - 19) = *(_OWORD *)(v79 + v81 - 152);
            *(v82 - 16) = 0;
            *(v82 - 15) = 0;
            *(v82 - 17) = 0;
            *(_OWORD *)(v82 - 21) = v84;
            *(_OWORD *)(v82 - 17) = *(_OWORD *)(v79 + v81 - 136);
            *(v82 - 15) = *(_QWORD *)(v79 + v81 - 120);
            *(_QWORD *)(v83 - 136) = 0;
            *(_QWORD *)(v83 - 128) = 0;
            *(_QWORD *)(v83 - 120) = 0;
            *(v82 - 14) = 0;
            *(v82 - 13) = 0;
            *(v82 - 12) = 0;
            *((_OWORD *)v82 - 7) = *(_OWORD *)(v79 + v81 - 112);
            *(v82 - 12) = *(_QWORD *)(v79 + v81 - 96);
            *(_QWORD *)(v83 - 104) = 0;
            *(_QWORD *)(v83 - 96) = 0;
            v85 = *(_BYTE *)(v79 + v81 - 88);
            *(_QWORD *)(v83 - 112) = 0;
            *((_BYTE *)v82 - 88) = v85;
            *(v82 - 9) = 0;
            *(v82 - 8) = 0;
            *(v82 - 10) = 0;
            *((_OWORD *)v82 - 5) = *(_OWORD *)(v79 + v81 - 80);
            *(v82 - 8) = *(_QWORD *)(v79 + v81 - 64);
            *(_QWORD *)(v83 - 72) = 0;
            *(_QWORD *)(v83 - 64) = 0;
            v86 = *(_BYTE *)(v79 + v81 - 56);
            *(_QWORD *)(v83 - 80) = 0;
            *((_BYTE *)v82 - 56) = v86;
            *(v82 - 5) = 0;
            *(v82 - 4) = 0;
            *(v82 - 6) = 0;
            *((_OWORD *)v82 - 3) = *(_OWORD *)(v79 + v81 - 48);
            *(v82 - 4) = *(_QWORD *)(v79 + v81 - 32);
            *(_QWORD *)(v83 - 48) = 0;
            *(_QWORD *)(v83 - 40) = 0;
            *(_QWORD *)(v83 - 32) = 0;
            *(v82 - 2) = 0;
            *(v82 - 1) = 0;
            *(v82 - 3) = 0;
            *(_OWORD *)(v82 - 3) = *(_OWORD *)(v79 + v81 - 24);
            *(v82 - 1) = *(_QWORD *)(v79 + v81 - 8);
            *(_QWORD *)(v83 - 24) = 0;
            *(_QWORD *)(v83 - 16) = 0;
            *(_QWORD *)(v83 - 8) = 0;
            v81 -= 168;
          }
          while ((uint64_t *)(v79 + v81) != v80);
          v87 = *((int64x2_t *)v327 + 3);
          v72 = *(_QWORD *)&object[16];
          v78 = (uint64_t *)((char *)v78 + v81);
        }
        v327[6] = v78;
        v327[7] = (uint64_t *)v72;
        *(int64x2_t *)&object[8] = v87;
        v88 = v327[8];
        v327[8] = (uint64_t *)v347;
        *(_QWORD *)&v347 = v88;
        *(_QWORD *)object = v87.i64[0];
        sub_20E9467F8((uint64_t)object, v87.i64[0]);
        if (*(_QWORD *)object)
          operator delete(*(void **)object);
        v73 = v327;
      }
      else
      {
        v71 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v69 - (_QWORD)v68) >> 3);
        sub_20E9417E0((uint64_t)v327[7], (__int128 *)__src);
        v72 = v69 + 168;
        v73 = v327;
        v327[7] = (uint64_t *)(v69 + 168);
      }
      v73[7] = (uint64_t *)v72;
      v89 = (uint64_t *)*v63;
      v90 = *(_DWORD *)(*v63 + 16);
      v91 = *(_DWORD *)(*v63 + 8);
      v92 = v91 ^ __ROR4__(v90, 13);
      v93 = (unint64_t)v340[1];
      if (v340[1])
      {
        v94 = (uint8x8_t)vcnt_s8((int8x8_t)v340[1]);
        v94.i16[0] = vaddlv_u8(v94);
        if (v94.u32[0] > 1uLL)
        {
          v72 = v92;
          if (v340[1] <= (void *)v92)
            v72 = v92 % (unint64_t)v340[1];
        }
        else
        {
          v72 = (LODWORD(v340[1]) - 1) & v92;
        }
        v95 = (_DWORD **)*((_QWORD *)v340[0] + v72);
        if (v95)
        {
          v96 = *v95;
          if (*v95)
          {
            v97 = *v89;
            if (v94.u32[0] < 2uLL)
            {
              while (1)
              {
                v99 = *((_QWORD *)v96 + 1);
                if (v99 == v92)
                {
                  if (v96[8] == v90 && *((_QWORD *)v96 + 2) == v97 && v96[6] == v91)
                    goto LABEL_198;
                }
                else if ((v99 & ((unint64_t)v340[1] - 1)) != v72)
                {
                  goto LABEL_160;
                }
                v96 = *(_DWORD **)v96;
                if (!v96)
                  goto LABEL_160;
              }
            }
            do
            {
              v98 = *((_QWORD *)v96 + 1);
              if (v98 == v92)
              {
                if (v96[8] == v90 && *((_QWORD *)v96 + 2) == v97 && v96[6] == v91)
                  goto LABEL_198;
              }
              else
              {
                if ((void *)v98 >= v340[1])
                  v98 %= (unint64_t)v340[1];
                if (v98 != v72)
                  goto LABEL_160;
              }
              v96 = *(_DWORD **)v96;
            }
            while (v96);
          }
        }
      }
      v96 = operator new(0x30uLL);
      *(_QWORD *)v96 = 0;
      *((_QWORD *)v96 + 1) = v92;
      v100 = *(_OWORD *)v89;
      *((_QWORD *)v96 + 4) = v89[2];
      *((_OWORD *)v96 + 1) = v100;
      v96[10] = 0;
      v101 = (float)((unint64_t)v341[1] + 1);
      if (!v93)
        goto LABEL_163;
LABEL_160:
      if ((float)(v342 * (float)v93) >= v101)
      {
        v92 = v72;
      }
      else
      {
LABEL_163:
        v102 = (v93 & (v93 - 1)) != 0;
        if (v93 < 3)
          v102 = 1;
        v103 = v102 | (2 * v93);
        v104 = vcvtps_u32_f32(v101 / v342);
        prime = v103 <= v104 ? v104 : v103;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v93 = (unint64_t)v340[1];
        }
        if (prime > v93)
          goto LABEL_173;
        if (prime < v93)
        {
          v106 = vcvtps_u32_f32((float)(unint64_t)v341[1] / v342);
          if (v93 < 3 || (v107 = (uint8x8_t)vcnt_s8((int8x8_t)v93), v107.i16[0] = vaddlv_u8(v107), v107.u32[0] > 1uLL))
          {
            v106 = std::__next_prime(v106);
          }
          else
          {
            v108 = 1 << -(char)__clz(v106 - 1);
            if (v106 >= 2)
              v106 = v108;
          }
          if (prime <= v106)
            prime = v106;
          if (prime < v93)
LABEL_173:
            sub_20E8D2B3C((uint64_t)v340, prime);
        }
        v93 = (unint64_t)v340[1];
        if (((unint64_t)v340[1] & ((unint64_t)v340[1] - 1)) != 0)
        {
          if (v340[1] <= (void *)v92)
            v92 %= (unint64_t)v340[1];
        }
        else
        {
          v92 = (LODWORD(v340[1]) - 1) & v92;
        }
      }
      v109 = v340[0];
      v110 = (_QWORD *)*((_QWORD *)v340[0] + v92);
      if (v110)
        break;
      *(void **)v96 = v341[0];
      v341[0] = v96;
      v109[v92] = v341;
      if (*(_QWORD *)v96)
      {
        v111 = *(_QWORD *)(*(_QWORD *)v96 + 8);
        if ((v93 & (v93 - 1)) != 0)
        {
          if (v111 >= v93)
            v111 %= v93;
        }
        else
        {
          v111 &= v93 - 1;
        }
        v110 = (char *)v340[0] + 8 * v111;
        goto LABEL_196;
      }
LABEL_197:
      ++v341[1];
LABEL_198:
      v96[10] = v71;
      *(_OWORD *)v328 = 0u;
      *(_OWORD *)v329 = 0u;
      LODWORD(v330) = 1065353216;
      v112 = *(_QWORD *)(*v63 + 72);
      if (*(_QWORD *)(*v63 + 80) != v112)
      {
        v113 = 0;
        v114 = 1;
        do
        {
          LODWORD(v351[0]) = 0;
          LODWORD(v351[0]) = *(_DWORD *)(v112 + 40 * v113 + 4);
          *(_QWORD *)object = v351;
          *((_DWORD *)sub_20F2CE5F0((uint64_t)v328, (unsigned int *)v351, (uint64_t)&unk_2102DB95C, (_DWORD **)object) + 5) = v114 - 1;
          v113 = v114;
          v112 = *(_QWORD *)(*v63 + 72);
          ++v114;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*v63 + 80) - v112) >> 3) > v113);
      }
      v115 = v338;
      if ((unint64_t)v338 >= v339)
      {
        v117 = 0xCCCCCCCCCCCCCCCDLL * ((v338 - (_BYTE *)v337) >> 3);
        v118 = v117 + 1;
        if (v117 + 1 > 0x666666666666666)
          sub_20E867F44();
        if (0x999999999999999ALL * ((uint64_t)(v339 - (_QWORD)v337) >> 3) > v118)
          v118 = 0x999999999999999ALL * ((uint64_t)(v339 - (_QWORD)v337) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v339 - (_QWORD)v337) >> 3) >= 0x333333333333333)
          v119 = 0x666666666666666;
        else
          v119 = v118;
        *((_QWORD *)&v347 + 1) = &v339;
        v65 = v325;
        if (v119)
        {
          if (v119 > 0x666666666666666)
            sub_20E877A38();
          v120 = (char *)operator new(40 * v119);
        }
        else
        {
          v120 = 0;
        }
        *(_QWORD *)object = v120;
        *(_QWORD *)&object[8] = &v120[40 * v117];
        *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
        *(_QWORD *)&v347 = &v120[40 * v119];
        sub_20E96A108(*(uint64_t *)&object[8], (uint64_t)v328);
        v122 = (char *)v337;
        v121 = v338;
        v123 = *(char **)&object[8];
        v124 = *(_QWORD *)&object[16];
        if (v338 == v337)
        {
          v133 = v338;
        }
        else
        {
          v125 = 0;
          do
          {
            v127 = &v123[v125];
            v128 = &v121[v125];
            v129 = *(_QWORD *)&v121[v125 - 40];
            *((_QWORD *)v128 - 5) = 0;
            *((_QWORD *)v127 - 5) = v129;
            *((_QWORD *)v127 - 4) = *(_QWORD *)&v121[v125 - 32];
            *((_QWORD *)v128 - 4) = 0;
            v130 = *(_QWORD *)&v121[v125 - 24];
            *(_QWORD *)&v123[v125 - 24] = v130;
            v131 = *(_QWORD *)&v121[v125 - 16];
            *((_QWORD *)v127 - 2) = v131;
            *((_DWORD *)v127 - 2) = *(_DWORD *)&v121[v125 - 8];
            if (v131)
            {
              v126 = *(_QWORD *)(v130 + 8);
              v132 = *((_QWORD *)v127 - 4);
              if ((v132 & (v132 - 1)) != 0)
              {
                if (v126 >= v132)
                  v126 %= v132;
              }
              else
              {
                v126 &= v132 - 1;
              }
              *(_QWORD *)(v129 + 8 * v126) = &v123[v125 - 24];
              *(_QWORD *)&v121[v125 - 24] = 0;
              *(_QWORD *)&v121[v125 - 16] = 0;
            }
            v125 -= 40;
          }
          while (&v121[v125] != v122);
          v133 = (char *)v337;
          v121 = v338;
          v123 += v125;
        }
        v116 = (char *)(v124 + 40);
        v337 = v123;
        v338 = (char *)(v124 + 40);
        v134 = v339;
        v339 = v347;
        *(_QWORD *)&v347 = v134;
        *(_QWORD *)object = v133;
        *(_QWORD *)&object[8] = v133;
        if (v121 != v133)
        {
          do
          {
            v138 = (void **)(v121 - 40);
            *(_QWORD *)&object[16] = v121 - 40;
            v139 = (_QWORD *)*((_QWORD *)v121 - 3);
            if (v139)
            {
              do
              {
                v140 = (_QWORD *)*v139;
                operator delete(v139);
                v139 = v140;
              }
              while (v140);
            }
            v141 = *v138;
            *v138 = 0;
            if (v141)
              operator delete(v141);
            v121 = *(char **)&object[16];
          }
          while (*(char **)&object[16] != v133);
          v121 = *(char **)object;
          v65 = v325;
          if (!*(_QWORD *)object)
            goto LABEL_227;
LABEL_226:
          operator delete(v121);
          goto LABEL_227;
        }
        if (v121)
          goto LABEL_226;
      }
      else
      {
        sub_20E96A108((uint64_t)v338, (uint64_t)v328);
        v116 = v115 + 40;
        v65 = v325;
      }
LABEL_227:
      v338 = v116;
      v135 = v329[0];
      if (v329[0])
      {
        do
        {
          v136 = (_QWORD *)*v135;
          operator delete(v135);
          v135 = v136;
        }
        while (v136);
      }
      v137 = v328[0];
      v328[0] = 0;
      if (v137)
        operator delete(v137);
      v62 = v322;
      if (*(_QWORD *)&__src[144])
      {
        *(_QWORD *)&__src[152] = *(_QWORD *)&__src[144];
        operator delete(*(void **)&__src[144]);
      }
      if (*(_QWORD *)&__src[120])
      {
        *(_QWORD *)&__src[128] = *(_QWORD *)&__src[120];
        operator delete(*(void **)&__src[120]);
      }
      if (*(_QWORD *)&__src[88])
      {
        *(_QWORD *)&__src[96] = *(_QWORD *)&__src[88];
        operator delete(*(void **)&__src[88]);
      }
      if (*(_QWORD *)&__src[56])
      {
        *(_QWORD *)&__src[64] = *(_QWORD *)&__src[56];
        operator delete(*(void **)&__src[56]);
      }
      if (*(_QWORD *)&__src[32])
      {
        *(_QWORD *)&__src[40] = *(_QWORD *)&__src[32];
        operator delete(*(void **)&__src[32]);
      }
LABEL_108:
      v63 += 2;
      if (v63 == v62)
        goto LABEL_248;
    }
    *(_QWORD *)v96 = *v110;
LABEL_196:
    *v110 = v96;
    goto LABEL_197;
  }
LABEL_248:
  v142 = (_QWORD *)a1[1];
  v145 = (_QWORD *)*v142;
  v143 = v142 + 1;
  v144 = v145;
  v146 = v327;
  if (v145 != v143)
  {
    v315 = (void **)(v327 + 9);
    v316 = v143;
    do
    {
      v147 = v144[6];
      v148 = (std::__shared_weak_count *)v144[7];
      v335[1] = v147;
      v336 = v148;
      if (v148)
      {
        p_shared_owners = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldxr(p_shared_owners);
        while (__stxr(v150 + 1, p_shared_owners));
      }
      __src[136] = 0;
      memset(&__src[144], 0, 24);
      __src[64] = 0;
      __src[172] = 1;
      v151 = v147 + 40;
      if (!*(_BYTE *)(v147 + 192))
        v151 = 0;
      v152 = (char *)v343;
      v153 = *(_QWORD *)(v151 + 32);
      v154 = *(_DWORD *)(v151 + 40);
      if (v343 != v344)
      {
        while (*(_QWORD *)v152 != v153 || *((_DWORD *)v152 + 2) != v154)
        {
          v152 += 16;
          if (v152 == v344)
            goto LABEL_262;
        }
      }
      if (v152 != v344)
        goto LABEL_493;
LABEL_262:
      v155 = *(_QWORD *)(v147 + 32);
      *(_QWORD *)__src = *(_QWORD *)(v147 + 24);
      *(_DWORD *)&__src[8] = v155;
      v156 = *(float32x2_t *)(v151 + 24);
      *(_OWORD *)&__src[16] = *(_OWORD *)(v151 + 8);
      v157 = *(_QWORD *)(v151 + 80);
      *(_OWORD *)&__src[40] = *(_OWORD *)(v151 + 64);
      *(float32x2_t *)&__src[32] = v156;
      *(_QWORD *)&__src[56] = v157;
      if (*(_BYTE *)(v151 + 148))
      {
        v156.i32[0] = *(_DWORD *)(v151 + 144);
        v158 = *(float32x4_t *)(v151 + 112);
        v159 = *(float32x4_t *)(v151 + 128);
        *(float64x2_t *)&__src[64] = vcvtq_f64_f32(*(float32x2_t *)v158.f32);
        *(float64x2_t *)&__src[80] = vcvt_hight_f64_f32(v158);
        *(float64x2_t *)&__src[96] = vcvtq_f64_f32(*(float32x2_t *)v159.f32);
        *(float64x2_t *)&__src[112] = vcvt_hight_f64_f32(v159);
        *(_QWORD *)&__src[128] = *(_OWORD *)&vcvtq_f64_f32(v156);
        __src[136] = 1;
      }
      __src[173] = *(_BYTE *)(v151 + 149);
      if (!v340[1])
        goto LABEL_523;
      v160 = *(_DWORD *)(v151 + 48);
      v161 = v154 ^ __ROR4__(v160, 13);
      v162 = (uint8x8_t)vcnt_s8((int8x8_t)v340[1]);
      v162.i16[0] = vaddlv_u8(v162);
      if (v162.u32[0] > 1uLL)
      {
        v163 = v161;
        if (v340[1] <= (void *)v161)
          v163 = v161 % (unint64_t)v340[1];
      }
      else
      {
        v163 = (LODWORD(v340[1]) - 1) & v161;
      }
      v164 = (uint64_t **)*((_QWORD *)v340[0] + v163);
      if (!v164 || (v165 = *v164) == 0)
      {
LABEL_523:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSerializeUtil.cpp", 782, (uint64_t)"anchor_frame_index_iter != image_id_to_frame_index.end()", 56, (uint64_t)"Fail to find the anchor frame", 29, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v162.u32[0] < 2uLL)
      {
        while (1)
        {
          v167 = v165[1];
          if (v167 == v161)
          {
            if (*((_DWORD *)v165 + 8) == v160 && v165[2] == v153 && *((_DWORD *)v165 + 6) == v154)
              goto LABEL_288;
          }
          else if ((v167 & ((unint64_t)v340[1] - 1)) != v163)
          {
            goto LABEL_523;
          }
          v165 = (uint64_t *)*v165;
          if (!v165)
            goto LABEL_523;
        }
      }
      while (1)
      {
        v166 = v165[1];
        if (v166 == v161)
          break;
        if ((void *)v166 >= v340[1])
          v166 %= (unint64_t)v340[1];
        if (v166 != v163)
          goto LABEL_523;
LABEL_274:
        v165 = (uint64_t *)*v165;
        if (!v165)
          goto LABEL_523;
      }
      if (*((_DWORD *)v165 + 8) != v160 || v165[2] != v153 || *((_DWORD *)v165 + 6) != v154)
        goto LABEL_274;
LABEL_288:
      *(_DWORD *)&__src[168] = *((_DWORD *)v165 + 10);
      __src[172] = *(_BYTE *)(v151 + 150);
      v168 = *(uint64_t **)(v147 + 200);
      v169 = *(uint64_t **)(v147 + 208);
      v323 = v169;
      while (v168 != v169)
      {
        v179 = (char *)v343;
        v180 = *v168;
        v181 = *((_DWORD *)v168 + 2);
        if (v343 != v344)
        {
          while (*(_QWORD *)v179 != v180 || *((_DWORD *)v179 + 2) != v181)
          {
            v179 += 16;
            if (v179 == v344)
              goto LABEL_299;
          }
        }
        if (v179 != v344)
          goto LABEL_292;
LABEL_299:
        if (!v340[1])
          goto LABEL_329;
        v182 = *((_DWORD *)v168 + 4);
        v183 = v181 ^ __ROR4__(v182, 13);
        v184 = (uint8x8_t)vcnt_s8((int8x8_t)v340[1]);
        v184.i16[0] = vaddlv_u8(v184);
        if (v184.u32[0] > 1uLL)
        {
          v185 = v183;
          if (v340[1] <= (void *)v183)
            v185 = v183 % (unint64_t)v340[1];
        }
        else
        {
          v185 = (LODWORD(v340[1]) - 1) & v183;
        }
        v186 = (uint64_t **)*((_QWORD *)v340[0] + v185);
        if (!v186 || (v187 = *v186) == 0)
        {
LABEL_329:
          v197 = atomic_load((unsigned __int8 *)&qword_254A6C120);
          if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C120))
          {
            sub_21021D3D8(v328);
            sub_20E8610C0(object, "cv3d.vio");
            sub_20E8C4068((uint64_t **)v328, (uint64_t)object, &qword_254A6C118);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_254A6C120);
            v146 = v327;
            v143 = v316;
            v169 = v323;
          }
          v335[0] = qword_254A6C118;
          if (**(int **)(qword_254A6C118 + 56) > 4)
            goto LABEL_292;
          v198 = *(unsigned __int8 *)(qword_254A6C118 + 72);
          v199 = sub_20E8C31DC(qword_254A6C118, "OSLogSurrogateAppender", 1, 0);
          v200 = v199;
          v201 = !v198 && v199 == 0;
          if (v201)
            goto LABEL_292;
          v326 = v198;
          v328[0] = v335;
          v328[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
          v329[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v329[1]) = 4;
          v330 = "unknown file";
          v331 = 797;
          v332 = "unknown function";
          v333 = 0;
          v334 = 0;
          v202 = *(_QWORD *)v328[0];
          v203 = (const char *)(*(_QWORD *)v328[0] + 16);
          v320 = v203;
          if (*(char *)(*(_QWORD *)v328[0] + 39) < 0)
          {
            v203 = *(const char **)(v202 + 16);
            v204 = *(_QWORD *)(v202 + 24);
            v206 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v206 & 1) == 0)
            {
LABEL_467:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v351);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v351);
                if (v353 && v352 < 0)
                  operator delete(v351[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v143 = v316;
              }
            }
          }
          else
          {
            v204 = *(unsigned __int8 *)(*(_QWORD *)v328[0] + 39);
            v205 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v205 & 1) == 0)
              goto LABEL_467;
          }
          if (byte_254A4A4F8[23] >= 0)
            v207 = byte_254A4A4F8;
          else
            v207 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v208 = byte_254A4A4F8[23];
          else
            v208 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v207, v203);
          if (v208 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v208 >= 0x17)
          {
            v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v208 | 7) != 0x17)
              v210 = v208 | 7;
            v211 = v210 + 1;
            v209 = operator new(v210 + 1);
            *(_QWORD *)&object[16] = v208;
            *(_QWORD *)&v347 = v211 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v209;
            v143 = v316;
          }
          else
          {
            BYTE7(v347) = v208;
            v209 = &object[8];
            if (!v208)
            {
LABEL_353:
              v209[v208] = 0;
              BYTE8(v347) = 1;
              if (v204 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v204 >= 0x17)
              {
                v214 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v204 | 7) != 0x17)
                  v214 = v204 | 7;
                v215 = v214 + 1;
                v212 = operator new(v214 + 1);
                v348[1] = (void *)v204;
                v349 = v215 | 0x8000000000000000;
                v348[0] = v212;
              }
              else
              {
                HIBYTE(v349) = v204;
                v212 = v348;
                if (!v204)
                {
                  LOBYTE(v348[0]) = 0;
                  v350 = 1;
                  v213 = *(NSObject **)object;
                  if ((SHIBYTE(v349) & 0x80000000) == 0)
                    goto LABEL_357;
LABEL_363:
                  operator delete(v348[0]);
                  if (BYTE8(v347))
                    goto LABEL_364;
                  goto LABEL_366;
                }
              }
              memmove(v212, v203, v204);
              *((_BYTE *)v212 + v204) = 0;
              v350 = 1;
              v213 = *(NSObject **)object;
              if (SHIBYTE(v349) < 0)
                goto LABEL_363;
LABEL_357:
              if (BYTE8(v347))
              {
LABEL_364:
                if (SBYTE7(v347) < 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_366:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v200 && *(_QWORD *)(v200 + 24))
              {
                v216 = _os_log_pack_size();
                v217 = (std::__shared_weak_count_vtbl *)operator new(v216, (std::align_val_t)8uLL);
                v218 = (std::__shared_weak_count *)operator new();
                v219 = v218;
                v218->__shared_owners_ = 0;
                v220 = (unint64_t *)&v218->__shared_owners_;
                v218->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v218->__shared_weak_owners_ = 0;
                v218[1].__vftable = v217;
                *(_QWORD *)object = v217;
                *(_QWORD *)&object[8] = v217;
                *(_QWORD *)&object[16] = v218;
                do
                  v221 = __ldxr(v220);
                while (__stxr(v221 + 1, v220));
                v347 = 0uLL;
                v348[0] = 0;
                do
                  v222 = __ldaxr(v220);
                while (__stlxr(v222 - 1, v220));
                if (!v222)
                {
                  ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                  std::__shared_weak_count::__release_weak(v219);
                }
                v223 = *(_QWORD *)object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v224 = (char *)operator new();
                v225 = *(unsigned __int8 *)(v202 + 39);
                v226 = v320;
                if ((v225 & 0x80u) != 0)
                {
                  v226 = *(const char **)(v202 + 16);
                  v225 = *(_QWORD *)(v202 + 24);
                }
                *(_QWORD *)v224 = v223;
                *(_OWORD *)(v224 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v224 + 24) = v347;
                v347 = 0uLL;
                *((_QWORD *)v224 + 5) = v226;
                *((_QWORD *)v224 + 6) = v225;
                v224[56] = 16;
                v354 = 0;
                v351[0] = v224;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v200 + 24) + 40))(*(_QWORD *)(v200 + 24), v351);
                v227 = v351[0];
                v351[0] = 0;
                v146 = v327;
                if (v227)
                {
                  v228 = (std::__shared_weak_count *)*((_QWORD *)v227 + 4);
                  if (!v228)
                    goto LABEL_383;
                  v229 = (unint64_t *)&v228->__shared_owners_;
                  do
                    v230 = __ldaxr(v229);
                  while (__stlxr(v230 - 1, v229));
                  if (!v230)
                  {
                    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                    std::__shared_weak_count::__release_weak(v228);
                    v231 = (std::__shared_weak_count *)*((_QWORD *)v227 + 2);
                    if (v231)
                    {
LABEL_384:
                      v232 = (unint64_t *)&v231->__shared_owners_;
                      do
                        v233 = __ldaxr(v232);
                      while (__stlxr(v233 - 1, v232));
                      if (!v233)
                      {
                        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                        std::__shared_weak_count::__release_weak(v231);
                      }
                    }
                  }
                  else
                  {
LABEL_383:
                    v231 = (std::__shared_weak_count *)*((_QWORD *)v227 + 2);
                    if (v231)
                      goto LABEL_384;
                  }
                  MEMORY[0x212BC6398](v227, 0x10F0C40B62ED6C6);
                  v235 = v354;
                  v354 = 0;
                  if (v235)
                  {
                    v236 = *(std::__shared_weak_count **)(v235 + 32);
                    if (!v236)
                      goto LABEL_396;
                    v237 = (unint64_t *)&v236->__shared_owners_;
                    do
                      v238 = __ldaxr(v237);
                    while (__stlxr(v238 - 1, v237));
                    if (!v238)
                    {
                      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                      std::__shared_weak_count::__release_weak(v236);
                      v239 = *(std::__shared_weak_count **)(v235 + 16);
                      if (v239)
                      {
LABEL_397:
                        v240 = (unint64_t *)&v239->__shared_owners_;
                        do
                          v241 = __ldaxr(v240);
                        while (__stlxr(v241 - 1, v240));
                        if (!v241)
                        {
                          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                          std::__shared_weak_count::__release_weak(v239);
                        }
                      }
                    }
                    else
                    {
LABEL_396:
                      v239 = *(std::__shared_weak_count **)(v235 + 16);
                      if (v239)
                        goto LABEL_397;
                    }
                    MEMORY[0x212BC6398](v235, 0x10F0C40B62ED6C6);
                  }
                }
                v260 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
                if (!*((_QWORD *)&v347 + 1))
                  goto LABEL_437;
                v261 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
                do
                  v262 = __ldaxr(v261);
                while (__stlxr(v262 - 1, v261));
                if (!v262)
                {
                  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                  std::__shared_weak_count::__release_weak(v260);
                  v263 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
LABEL_438:
                    v264 = (unint64_t *)&v263->__shared_owners_;
                    do
                      v265 = __ldaxr(v264);
                    while (__stlxr(v265 - 1, v264));
                    if (!v265)
                    {
                      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                      std::__shared_weak_count::__release_weak(v263);
                    }
                  }
                }
                else
                {
LABEL_437:
                  v263 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                    goto LABEL_438;
                }
              }
              else
              {
                os_log_type_enabled(v213, OS_LOG_TYPE_ERROR);
                *(_WORD *)object = 0;
                v234 = (void *)_os_log_send_and_compose_impl();
                v146 = v327;
                if (v234)
                  free(v234);
              }
              if (v326)
              {
                sub_20E8C003C((uint64_t)v328, "Incompatible tracks observation for IO");
                sub_20E863570((uint64_t)v328);
              }
              sub_20E863570((uint64_t)v328);
              v266 = v334;
              if (v334)
              {
                v267 = (unint64_t *)&v334->__shared_owners_;
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 - 1, v267));
                if (!v268)
                {
                  ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                  std::__shared_weak_count::__release_weak(v266);
                }
              }
              v169 = v323;
              goto LABEL_292;
            }
          }
          memmove(v209, v207, v208);
          goto LABEL_353;
        }
        if (v184.u32[0] < 2uLL)
        {
          while (1)
          {
            v189 = v187[1];
            if (v189 == v183)
            {
              if (*((_DWORD *)v187 + 8) == v182 && v187[2] == v180 && *((_DWORD *)v187 + 6) == v181)
                goto LABEL_323;
            }
            else if ((v189 & ((unint64_t)v340[1] - 1)) != v185)
            {
              goto LABEL_329;
            }
            v187 = (uint64_t *)*v187;
            if (!v187)
              goto LABEL_329;
          }
        }
        while (1)
        {
          v188 = v187[1];
          if (v188 == v183)
            break;
          if ((void *)v188 >= v340[1])
            v188 %= (unint64_t)v340[1];
          if (v188 != v185)
            goto LABEL_329;
LABEL_309:
          v187 = (uint64_t *)*v187;
          if (!v187)
            goto LABEL_329;
        }
        if (*((_DWORD *)v187 + 8) != v182 || v187[2] != v180 || *((_DWORD *)v187 + 6) != v181)
          goto LABEL_309;
LABEL_323:
        v190 = *((unsigned int *)v187 + 10);
        v191 = *(unsigned int *)(v168[3] + 4);
        v192 = (char *)v337;
        if (0xCCCCCCCCCCCCCCCDLL * ((v338 - (_BYTE *)v337) >> 3) <= v190)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSerializeUtil.cpp", 808, (uint64_t)"frame_index < feature_key_to_feature_index_per_frame.size()", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v192 = (char *)v337;
        }
        v193 = &v192[40 * v190];
        v194 = *(int8x8_t *)(v193 + 8);
        if (!*(_QWORD *)&v194)
          goto LABEL_524;
        v195 = (uint8x8_t)vcnt_s8(v194);
        v195.i16[0] = vaddlv_u8(v195);
        if (v195.u32[0] > 1uLL)
        {
          v196 = v191;
          if (*(_QWORD *)&v194 <= v191)
            v196 = v191 % *(_QWORD *)&v194;
        }
        else
        {
          v196 = (v194.i32[0] - 1) & v191;
        }
        v242 = *(uint64_t ***)(*(_QWORD *)v193 + 8 * v196);
        if (!v242 || (v243 = *v242) == 0)
        {
LABEL_524:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseSerializeUtil.cpp", 813, (uint64_t)"ftr_index_iter != feature_key_to_feature_index.end()", 52, (uint64_t)"Cannot find the feature", 23, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (v195.u32[0] < 2uLL)
        {
          v244 = *(_QWORD *)&v194 - 1;
          while (1)
          {
            v246 = v243[1];
            if (v246 == v191)
            {
              if (*((_DWORD *)v243 + 4) == (_DWORD)v191)
                goto LABEL_418;
            }
            else if ((v246 & v244) != v196)
            {
              goto LABEL_524;
            }
            v243 = (uint64_t *)*v243;
            if (!v243)
              goto LABEL_524;
          }
        }
        while (2)
        {
          v245 = v243[1];
          if (v245 != v191)
          {
            if (v245 >= *(_QWORD *)&v194)
              v245 %= *(_QWORD *)&v194;
            if (v245 != v196)
              goto LABEL_524;
LABEL_408:
            v243 = (uint64_t *)*v243;
            if (!v243)
              goto LABEL_524;
            continue;
          }
          break;
        }
        if (*((_DWORD *)v243 + 4) != (_DWORD)v191)
          goto LABEL_408;
LABEL_418:
        v247 = *((unsigned int *)v243 + 5);
        v248 = *(_BYTE **)&__src[152];
        v169 = v323;
        if (*(_QWORD *)&__src[152] < *(_QWORD *)&__src[160])
        {
          **(_QWORD **)&__src[152] = v190 | (v247 << 32);
          v249 = (uint64_t)(v248 + 8);
          goto LABEL_462;
        }
        v250 = *(_BYTE **)&__src[144];
        v251 = *(_QWORD *)&__src[152] - *(_QWORD *)&__src[144];
        v252 = (uint64_t)(*(_QWORD *)&__src[152] - *(_QWORD *)&__src[144]) >> 3;
        v253 = v252 + 1;
        if ((unint64_t)(v252 + 1) >> 61)
          sub_20E92CED8();
        v254 = *(_QWORD *)&__src[160] - *(_QWORD *)&__src[144];
        if ((uint64_t)(*(_QWORD *)&__src[160] - *(_QWORD *)&__src[144]) >> 2 > v253)
          v253 = v254 >> 2;
        if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8)
          v255 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v255 = v253;
        if (!v255)
        {
          v256 = 0;
          v257 = (unint64_t *)(8 * v252);
          *(_QWORD *)(8 * v252) = v190 | (v247 << 32);
          v249 = 8 * v252 + 8;
          v258 = (char *)(v248 - v250);
          if (v248 != v250)
            goto LABEL_429;
LABEL_452:
          *(_QWORD *)&__src[144] = v257;
          *(_QWORD *)&__src[160] = &v256[8 * v255];
          v143 = v316;
          if (v248)
            goto LABEL_460;
          goto LABEL_461;
        }
        if (v255 >> 61)
          sub_20E877A38();
        v256 = operator new(8 * v255);
        v257 = (unint64_t *)&v256[8 * v252];
        *v257 = v190 | (v247 << 32);
        v249 = (uint64_t)(v257 + 1);
        v258 = (char *)(v248 - v250);
        if (v248 == v250)
          goto LABEL_452;
LABEL_429:
        v259 = (unint64_t)(v258 - 8);
        if (v259 < 0x58)
          goto LABEL_543;
        if ((unint64_t)(v248 - v256 - v251) < 0x20)
          goto LABEL_543;
        v269 = (v259 >> 3) + 1;
        v270 = 8 * (v269 & 0x3FFFFFFFFFFFFFFCLL);
        v271 = &v248[-v270];
        v257 = (unint64_t *)((char *)v257 - v270);
        v272 = &v256[8 * v252 - 16];
        v273 = (__int128 *)(v248 - 16);
        v274 = v269 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v275 = *v273;
          *(v272 - 1) = *(v273 - 1);
          *v272 = v275;
          v272 -= 2;
          v273 -= 2;
          v274 -= 4;
        }
        while (v274);
        v248 = v271;
        if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_543:
          do
          {
            v276 = *((_QWORD *)v248 - 1);
            v248 -= 8;
            *--v257 = v276;
          }
          while (v248 != v250);
        }
        v248 = *(_BYTE **)&__src[144];
        *(_QWORD *)&__src[144] = v257;
        *(_QWORD *)&__src[160] = &v256[8 * v255];
        v143 = v316;
        if (v248)
LABEL_460:
          operator delete(v248);
LABEL_461:
        v169 = v323;
LABEL_462:
        *(_QWORD *)&__src[152] = v249;
        v146 = v327;
LABEL_292:
        v168 += 4;
      }
      v171 = v146[10];
      v170 = (unint64_t)v146[11];
      if ((unint64_t)v171 < v170)
      {
        *(_OWORD *)v171 = *(_OWORD *)__src;
        v172 = *(_OWORD *)&__src[16];
        v173 = *(_OWORD *)&__src[32];
        v174 = *(_OWORD *)&__src[64];
        *((_OWORD *)v171 + 3) = *(_OWORD *)&__src[48];
        *((_OWORD *)v171 + 4) = v174;
        *((_OWORD *)v171 + 1) = v172;
        *((_OWORD *)v171 + 2) = v173;
        v175 = *(_OWORD *)&__src[80];
        v176 = *(_OWORD *)&__src[96];
        v177 = *(_OWORD *)&__src[112];
        *(_OWORD *)((char *)v171 + 121) = *(_OWORD *)&__src[121];
        *((_OWORD *)v171 + 6) = v176;
        *((_OWORD *)v171 + 7) = v177;
        *((_OWORD *)v171 + 5) = v175;
        *((_OWORD *)v171 + 9) = *(_OWORD *)&__src[144];
        v171[20] = *(_QWORD *)&__src[160];
        memset(&__src[144], 0, 24);
        v178 = *(_WORD *)&__src[172];
        *((_DWORD *)v171 + 42) = *(_DWORD *)&__src[168];
        *((_WORD *)v171 + 86) = v178;
        v146[10] = v171 + 22;
        goto LABEL_493;
      }
      v277 = (uint64_t *)*v315;
      v278 = 0x2E8BA2E8BA2E8BA3 * (((char *)v171 - (_BYTE *)*v315) >> 4);
      v279 = v278 + 1;
      if ((unint64_t)(v278 + 1) > 0x1745D1745D1745DLL)
        sub_20E92CED8();
      v280 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v170 - (_QWORD)v277) >> 4);
      if (2 * v280 > v279)
        v279 = 2 * v280;
      if (v280 >= 0xBA2E8BA2E8BA2ELL)
        v281 = 0x1745D1745D1745DLL;
      else
        v281 = v279;
      if (v281)
      {
        if (v281 > 0x1745D1745D1745DLL)
          sub_20E877A38();
        v282 = (char *)operator new(176 * v281);
      }
      else
      {
        v282 = 0;
      }
      v283 = *(_OWORD *)&__src[112];
      v284 = &v282[176 * v278];
      *((_OWORD *)v284 + 6) = *(_OWORD *)&__src[96];
      *((_OWORD *)v284 + 7) = v283;
      v285 = &v282[176 * v281];
      *(_OWORD *)(v284 + 121) = *(_OWORD *)&__src[121];
      v286 = *(_OWORD *)&__src[48];
      *((_OWORD *)v284 + 2) = *(_OWORD *)&__src[32];
      *((_OWORD *)v284 + 3) = v286;
      v287 = *(_OWORD *)&__src[80];
      *((_OWORD *)v284 + 4) = *(_OWORD *)&__src[64];
      *((_OWORD *)v284 + 5) = v287;
      v288 = *(_OWORD *)&__src[16];
      *(_OWORD *)v284 = *(_OWORD *)__src;
      *((_OWORD *)v284 + 1) = v288;
      *((_OWORD *)v284 + 9) = *(_OWORD *)&__src[144];
      *((_QWORD *)v284 + 20) = *(_QWORD *)&__src[160];
      *(_QWORD *)&__src[152] = 0;
      *(_QWORD *)&__src[160] = 0;
      *((_DWORD *)v284 + 42) = *(_DWORD *)&__src[168];
      *((_WORD *)v284 + 86) = *(_WORD *)&__src[172];
      v289 = v284 + 176;
      *(_QWORD *)&__src[144] = 0;
      if (v171 == v277)
      {
        v146 = v327;
        v327[9] = (uint64_t *)v284;
        v327[10] = (uint64_t *)v289;
        v327[11] = (uint64_t *)v285;
        if (v171)
          goto LABEL_490;
      }
      else
      {
        do
        {
          *((_OWORD *)v284 - 11) = *((_OWORD *)v171 - 11);
          v290 = *((_OWORD *)v171 - 10);
          v291 = *((_OWORD *)v171 - 9);
          v292 = *((_OWORD *)v171 - 7);
          *((_OWORD *)v284 - 8) = *((_OWORD *)v171 - 8);
          *((_OWORD *)v284 - 7) = v292;
          *((_OWORD *)v284 - 10) = v290;
          *((_OWORD *)v284 - 9) = v291;
          v293 = *((_OWORD *)v171 - 6);
          v294 = *((_OWORD *)v171 - 5);
          v295 = *((_OWORD *)v171 - 4);
          *(_OWORD *)(v284 - 55) = *(_OWORD *)((char *)v171 - 55);
          *((_OWORD *)v284 - 5) = v294;
          *((_OWORD *)v284 - 4) = v295;
          *((_OWORD *)v284 - 6) = v293;
          *((_QWORD *)v284 - 3) = 0;
          *((_QWORD *)v284 - 2) = 0;
          *((_OWORD *)v284 - 2) = *((_OWORD *)v171 - 2);
          *((_QWORD *)v284 - 2) = *(v171 - 2);
          *(v171 - 4) = 0;
          *(v171 - 3) = 0;
          *(v171 - 2) = 0;
          v296 = *((_DWORD *)v171 - 2);
          *((_WORD *)v284 - 2) = *((_WORD *)v171 - 2);
          *((_DWORD *)v284 - 2) = v296;
          v284 -= 176;
          v171 -= 22;
        }
        while (v171 != v277);
        v171 = v327[9];
        v297 = (char *)v327[10];
        v327[9] = (uint64_t *)v284;
        v327[10] = (uint64_t *)v289;
        v327[11] = (uint64_t *)v285;
        while (v297 != (char *)v171)
        {
          v298 = (void *)*((_QWORD *)v297 - 4);
          if (v298)
          {
            *((_QWORD *)v297 - 3) = v298;
            operator delete(v298);
          }
          v297 -= 176;
        }
        v146 = v327;
        if (v171)
LABEL_490:
          operator delete(v171);
      }
      v299 = *(void **)&__src[144];
      v146[10] = (uint64_t *)v289;
      if (v299)
        operator delete(v299);
LABEL_493:
      v300 = v336;
      if (!v336)
        goto LABEL_497;
      v301 = (unint64_t *)&v336->__shared_owners_;
      do
        v302 = __ldaxr(v301);
      while (__stlxr(v302 - 1, v301));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
        std::__shared_weak_count::__release_weak(v300);
        v303 = (_QWORD *)v144[1];
        if (v303)
          goto LABEL_498;
      }
      else
      {
LABEL_497:
        v303 = (_QWORD *)v144[1];
        if (v303)
        {
          do
          {
LABEL_498:
            v304 = v303;
            v303 = (_QWORD *)*v303;
          }
          while (v303);
          goto LABEL_250;
        }
      }
      do
      {
        v304 = (_QWORD *)v144[2];
        v201 = *v304 == (_QWORD)v144;
        v144 = v304;
      }
      while (!v201);
LABEL_250:
      v144 = v304;
    }
    while (v304 != v143);
  }
  v305 = (char *)v337;
  if (v337)
  {
    v306 = v338;
    v307 = v337;
    if (v338 != v337)
    {
      do
      {
        v308 = (_QWORD *)*((_QWORD *)v306 - 3);
        if (v308)
        {
          do
          {
            v309 = (_QWORD *)*v308;
            operator delete(v308);
            v308 = v309;
          }
          while (v309);
        }
        v311 = (void *)*((_QWORD *)v306 - 5);
        v306 -= 40;
        v310 = v311;
        *(_QWORD *)v306 = 0;
        if (v311)
          operator delete(v310);
      }
      while (v306 != v305);
      v307 = v337;
    }
    v338 = v305;
    operator delete(v307);
  }
  v312 = v341[0];
  if (v341[0])
  {
    do
    {
      v313 = (_QWORD *)*v312;
      operator delete(v312);
      v312 = v313;
    }
    while (v313);
  }
  v314 = v340[0];
  v340[0] = 0;
  if (v314)
    operator delete(v314);
  if (v343)
    operator delete(v343);
}

void sub_20FCD7EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *object,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  void *v67;

  if (a66 && a65 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  v67 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v67;
    operator delete(v67);
  }
  sub_20E86665C((uint64_t)&a38);
  sub_20F40935C(&a40);
  sub_20E8C25A8((uint64_t)&a43);
  if (a48)
    operator delete(a48);
  sub_20E8FB5B8(a26);
  _Unwind_Resume(a1);
}

void sub_20FCD8180(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C120);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C120))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C118);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C120);
  }
  *a1 = qword_254A6C118;
}

void sub_20FCD821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C120);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C120);
  _Unwind_Resume(a1);
}

void sub_20FCD8274(_QWORD *a1, int8x8_t **a2)
{
  uint64_t v3;
  uint64_t i;
  __int128 v5;
  __int128 v6;
  int v7;
  double v8;
  double v9;
  float64x2_t v10;
  int8x8_t *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  char *v17;
  uint64_t *v18;
  int8x8_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *k;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  int8x16_t **v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  int64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  double v73;
  double v74;
  float64x2_t v75;
  uint64_t *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 *v79;
  __int128 *v80;
  char *v81;
  char *v82;
  int v83;
  double v84;
  double v85;
  uint64_t *v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  float v90;
  float v91;
  float v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  double v106;
  int8x8_t *v107;
  int8x8_t *v108;
  int8x8_t *v109;
  int8x8_t *v110;
  int8x8_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  char *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  uint64_t (***v118)();
  int8x8_t v119;
  uint64_t *v120;
  int v121;
  unsigned int v122;
  unint64_t v123;
  uint8x8_t v124;
  unint64_t v125;
  uint64_t **v126;
  __int128 v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  double v133;
  float64x2_t v134;
  double v135;
  uint64_t (**v136)();
  __int128 v137;
  char v138;
  int8x16_t v139;
  float32x2_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int8x8_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  int8x8_t v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  char *v172;
  char *v173;
  unint64_t *v174;
  unint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _OWORD *v179;
  uint64_t *v180;
  _OWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  char *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  char *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  const char *v206;
  _QWORD *v207;
  void *exception;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  int8x16_t **v213;
  _QWORD *v214;
  _QWORD *v215;
  double v216;
  float64x2_t v217;
  float64x2_t v218;
  _QWORD *v219;
  float64x2_t v220;
  void *v221[2];
  char *__dst;
  std::__shared_weak_count *v223;
  __int128 *j;
  __int128 *v225;
  uint64_t v226;
  double v227;
  unint64_t v228;
  __int128 *m;
  int8x16_t v230;
  uint64_t v232;
  int8x16_t *v233;
  uint64_t *v234;
  std::__shared_weak_count *v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  uint64_t *v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _BYTE v245[32];
  _OWORD v246[4];
  uint64_t v247;
  _BYTE v248[288];
  _BYTE v249[288];
  __int128 __p;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  uint64_t v256;

  v256 = *MEMORY[0x24BDAC8D0];
  sub_20FCD95B4(a2);
  v219 = a1;
  v3 = *a1;
  for (i = a1[1]; v3 != i; v3 += 184)
  {
    v5 = *(_OWORD *)(v3 + 48);
    v242 = *(_OWORD *)(v3 + 32);
    v243 = v5;
    v244 = *(_OWORD *)(v3 + 64);
    *(_QWORD *)v245 = *(_QWORD *)(v3 + 80);
    v241 = *(_OWORD *)(v3 + 16);
    *(_QWORD *)&v246[0] = 0;
    v6 = *(_OWORD *)(v3 + 88);
    *(_QWORD *)&v245[24] = *(_QWORD *)(v3 + 104);
    *(_OWORD *)&v245[8] = v6;
    v7 = sub_20EB40694((const void **)(v3 + 112));
    sub_20FCD113C(v7, (uint64_t *)v246, (uint64_t *)(v3 + 136), v8, v9, v10);
    v11 = *a2;
    v12 = *(_DWORD *)v3;
    v13 = (uint64_t *)(*a2)[38];
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = *((_DWORD *)v13 + 8);
          if (v16 <= v12)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_11;
        }
        if (v16 >= v12)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_11;
        }
      }
      v17 = (char *)v15;
    }
    else
    {
      v14 = (uint64_t **)&v11[38];
      v15 = (uint64_t **)&v11[38];
LABEL_11:
      v17 = (char *)operator new(0x88uLL);
      *((_DWORD *)v17 + 8) = v12;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      *((_QWORD *)v17 + 5) = 0x3FF0000000000000;
      *((_QWORD *)v17 + 9) = 0x3FF0000000000000;
      *((_QWORD *)v17 + 12) = 0;
      *((_QWORD *)v17 + 13) = 0x3FF0000000000000;
      *((_QWORD *)v17 + 15) = 0;
      *((_QWORD *)v17 + 16) = 0;
      *((_QWORD *)v17 + 14) = 0;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v15;
      *v14 = (uint64_t *)v17;
      v18 = (uint64_t *)v17;
      v19 = **(int8x8_t **)&v11[37];
      if (v19)
      {
        v11[37] = v19;
        v18 = *v14;
      }
      sub_20E868578(*(uint64_t **)&v11[38], v18);
      ++*(_QWORD *)&v11[39];
    }
    v20 = v242;
    *(_OWORD *)(v17 + 40) = v241;
    v21 = v243;
    *(_OWORD *)(v17 + 88) = v244;
    *(_OWORD *)(v17 + 72) = v21;
    *((_QWORD *)v17 + 13) = *(_QWORD *)v245;
    *(_OWORD *)(v17 + 56) = v20;
    *((_OWORD *)v17 + 7) = *(_OWORD *)&v245[8];
    *((_QWORD *)v17 + 16) = *(_QWORD *)&v245[24];
    sub_20F3454F8((uint64_t)*a2, *(_DWORD *)v3, *(uint64_t *)&v246[0]);
    v22 = *(_QWORD *)&v246[0];
    *(_QWORD *)&v246[0] = 0;
    if (v22)
      sub_20E8E931C((uint64_t)v246, v22);
  }
  v23 = (__int128 *)v219[3];
  for (j = (__int128 *)v219[4]; v23 != j; v23 = (__int128 *)((char *)v23 + 792))
  {
    v232 = (uint64_t)*a2;
    v228 = *((_QWORD *)v23 + 97);
    v226 = *((unsigned int *)v23 + 196);
    v255 = 0xBFF0000000000000;
    v24 = *v23;
    v25 = v23[2];
    v242 = v23[1];
    v243 = v25;
    v241 = v24;
    v26 = v23[3];
    v27 = v23[4];
    v28 = v23[6];
    *(_OWORD *)&v245[16] = v23[5];
    v246[0] = v28;
    v244 = v26;
    *(_OWORD *)v245 = v27;
    v29 = v23[7];
    v30 = v23[8];
    v31 = v23[9];
    v247 = *((_QWORD *)v23 + 20);
    v246[2] = v30;
    v246[3] = v31;
    v246[1] = v29;
    memcpy(v248, (char *)v23 + 168, sizeof(v248));
    memcpy(v249, (char *)v23 + 456, sizeof(v249));
    __p = 0u;
    v251 = 0u;
    v252 = 0u;
    v253 = 0u;
    v254 = 0u;
    v32 = *((_QWORD *)v23 + 94);
    v33 = *((_QWORD *)v23 + 93);
    v34 = v32 - v33;
    if (v32 != v33)
    {
      v35 = 0x6DB6DB6DB6DB6DB7 * (v34 >> 3);
      if (v35 > 0x492492492492492)
        sub_20EABADD4();
      v36 = (char *)operator new(v34);
      *(_QWORD *)&__p = v36;
      *((_QWORD *)&__p + 1) = v36;
      *(_QWORD *)&v251 = &v36[56 * v35];
      do
      {
        if ((unint64_t)v36 < (unint64_t)v251)
        {
          *(_QWORD *)v36 = *(_QWORD *)v33;
          v37 = *(_OWORD *)(v33 + 8);
          *((_QWORD *)v36 + 3) = *(_QWORD *)(v33 + 24);
          *(_OWORD *)(v36 + 8) = v37;
          v38 = *(_OWORD *)(v33 + 32);
          *((_QWORD *)v36 + 6) = *(_QWORD *)(v33 + 48);
          *((_OWORD *)v36 + 2) = v38;
          v36 += 56;
        }
        else
        {
          v39 = (char *)__p;
          v40 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v36[-__p] >> 3);
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) > 0x492492492492492)
            sub_20EABADD4();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v251 - __p) >> 3) > v41)
            v41 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v251 - __p) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v251 - __p) >> 3)) >= 0x249249249249249)
            v42 = 0x492492492492492;
          else
            v42 = v41;
          if (v42 > 0x492492492492492)
            sub_20E877A38();
          v43 = (char *)operator new(56 * v42);
          v44 = &v43[56 * v40];
          *(_QWORD *)v44 = *(_QWORD *)v33;
          v45 = *(_OWORD *)(v33 + 8);
          *((_QWORD *)v44 + 3) = *(_QWORD *)(v33 + 24);
          *(_OWORD *)(v44 + 8) = v45;
          v46 = *(_OWORD *)(v33 + 32);
          *((_QWORD *)v44 + 6) = *(_QWORD *)(v33 + 48);
          *((_OWORD *)v44 + 2) = v46;
          for (k = v44; v36 != v39; *((_OWORD *)k + 2) = v50)
          {
            v48 = *((_QWORD *)v36 - 7);
            v36 -= 56;
            *((_QWORD *)k - 7) = v48;
            k -= 56;
            v49 = *(_OWORD *)(v36 + 8);
            *((_QWORD *)k + 3) = *((_QWORD *)v36 + 3);
            *(_OWORD *)(k + 8) = v49;
            v50 = *((_OWORD *)v36 + 2);
            *((_QWORD *)k + 6) = *((_QWORD *)v36 + 6);
          }
          *(_QWORD *)&__p = k;
          v36 = v44 + 56;
          *((_QWORD *)&__p + 1) = v44 + 56;
          *(_QWORD *)&v251 = &v43[56 * v42];
          if (v39)
            operator delete(v39);
        }
        *((_QWORD *)&__p + 1) = v36;
        v33 += 56;
      }
      while (v33 != v32);
    }
    *((_QWORD *)&v254 + 1) = *((_QWORD *)v23 + 96);
    v255 = 0;
    sub_20F283D18(v232, v228, v226, (uint64_t)&v241);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  v51 = (_QWORD *)v219[6];
  v210 = (_QWORD *)v219[7];
  if (v51 != v210)
  {
    v52 = (_QWORD *)v219[18];
    v53 = (int8x16_t **)v219[15];
    v54 = (_QWORD *)v219[12];
    v55 = (_QWORD *)v219[9];
    do
    {
      v56 = operator new(0x300uLL);
      v56[2] = 0;
      *v56 = &off_24C9FC5B0;
      v56[1] = 0;
      v239 = (uint64_t *)sub_20F469B44((uint64_t)(v56 + 3));
      v240 = (std::__shared_weak_count *)v56;
      v57 = *((unsigned int *)v51 + 6);
      v58 = *((_DWORD *)v51 + 8);
      v56[3] = v51[2];
      v56[4] = v57;
      *((_DWORD *)v56 + 10) = v58;
      sub_20EE6BAB0((uint64_t)(v56 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[7] - v51[6]) >> 4));
      v60 = v51[9];
      v59 = v51[10];
      v61 = (_BYTE *)v56[75];
      if (*((_BYTE *)v56 + 632))
      {
        v56[76] = v61;
        *((_BYTE *)v56 + 632) = 0;
      }
      v62 = v59 - v60;
      v63 = v62 >> 6;
      v56[78] = v62 >> 6;
      if (v62 >> 6 > (unint64_t)((uint64_t)(v56[77] - (_QWORD)v61) >> 6))
      {
        if (v62 < 0)
          sub_20ED343A8();
        v64 = (_BYTE *)v56[76];
        v65 = (char *)operator new(v62);
        v66 = &v65[(v64 - v61) & 0xFFFFFFFFFFFFFFC0];
        v67 = v66;
        if (v64 != v61)
        {
          v68 = &v65[(v64 - v61) & 0xFFFFFFFFFFFFFFC0];
          do
          {
            v69 = *((_OWORD *)v64 - 4);
            v70 = *((_OWORD *)v64 - 3);
            v71 = *((_OWORD *)v64 - 1);
            v67 = v68 - 64;
            *((_OWORD *)v68 - 2) = *((_OWORD *)v64 - 2);
            *((_OWORD *)v68 - 1) = v71;
            *((_OWORD *)v68 - 4) = v69;
            *((_OWORD *)v68 - 3) = v70;
            v64 -= 64;
            v68 -= 64;
          }
          while (v64 != v61);
        }
        v56[75] = v67;
        v56[76] = v66;
        v56[77] = &v65[64 * v63];
        if (v61)
          operator delete(v61);
      }
      *((_BYTE *)v56 + 632) = 1;
      v72 = sub_20EB40694((const void **)v51 + 12);
      sub_20FCD113C(v72, v56 + 6, v51 + 15, v73, v74, v75);
      *((_BYTE *)v56 + 760) = *((_BYTE *)v51 + 144);
      v215 = v51;
      if ((sub_20F286CA4((uint64_t *)a2, (char *)&v239) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x580uLL);
        v209 = (_QWORD *)sub_20EA59064((uint64_t)exception, "Failed to add Frame!", "Unknown");
        *v209 = &off_24CA05150;
        __cxa_throw(v209, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
      }
      v211 = v55;
      v212 = v54;
      v76 = (uint64_t *)*v55;
      v77 = (__int128 *)*v54;
      v213 = v53;
      v214 = v52;
      v233 = *v53;
      v78 = *v52;
      v80 = (__int128 *)v215[9];
      v79 = (__int128 *)v215[10];
      for (m = v79; v80 != v79; v80 += 4)
      {
        v180 = v239;
        v241 = *v80;
        v242 = v80[1];
        v243 = v80[2];
        v244 = v80[3];
        v181 = (_OWORD *)v239[73];
        v182 = v239[72];
        v183 = ((uint64_t)v181 - v182) >> 6;
        if (v183 < v239[75])
        {
          v184 = v239[74];
          if ((unint64_t)v181 < v184)
          {
            v176 = *v80;
            v177 = v80[1];
            v178 = v80[3];
            v181[2] = v80[2];
            v181[3] = v178;
            *v181 = v176;
            v181[1] = v177;
            v179 = v181 + 4;
          }
          else
          {
            v185 = v239 + 72;
            v186 = v183 + 1;
            if ((v183 + 1) >> 58)
              sub_20ED343A8();
            v187 = v184 - v182;
            if (v187 >> 5 > v186)
              v186 = v187 >> 5;
            if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFC0)
              v188 = 0x3FFFFFFFFFFFFFFLL;
            else
              v188 = v186;
            if (v188)
            {
              if (v188 >> 58)
                sub_20E877A38();
              v189 = (char *)operator new(v188 << 6);
            }
            else
            {
              v189 = 0;
            }
            v190 = &v189[64 * v183];
            v191 = v242;
            *(_OWORD *)v190 = v241;
            *((_OWORD *)v190 + 1) = v191;
            v192 = v244;
            *((_OWORD *)v190 + 2) = v243;
            *((_OWORD *)v190 + 3) = v192;
            v193 = v190;
            if (v181 != (_OWORD *)v182)
            {
              do
              {
                v194 = *(v181 - 4);
                v195 = *(v181 - 3);
                v196 = *(v181 - 1);
                *((_OWORD *)v193 - 2) = *(v181 - 2);
                *((_OWORD *)v193 - 1) = v196;
                *((_OWORD *)v193 - 4) = v194;
                *((_OWORD *)v193 - 3) = v195;
                v193 -= 64;
                v181 -= 4;
              }
              while (v181 != (_OWORD *)v182);
              v181 = (_OWORD *)*v185;
            }
            v180[72] = (uint64_t)v193;
            v179 = v190 + 64;
            v180[73] = (uint64_t)(v190 + 64);
            v180[74] = (uint64_t)&v189[64 * v188];
            if (v181)
              operator delete(v181);
            v79 = m;
          }
          v180[73] = (uint64_t)v179;
        }
      }
      v82 = (char *)v215[6];
      v81 = (char *)v215[7];
      __dst = v81;
      while (v82 != v81)
      {
        v83 = *(_DWORD *)v82;
        v84 = *((double *)v82 + 1);
        v85 = *((double *)v82 + 2);
        v238 = *(_OWORD *)(v82 + 24);
        v86 = v239;
        v87 = (void *)v239[9];
        v88 = v239[10];
        v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v88 - (_QWORD)v87) >> 3);
        v90 = v85;
        if (v89 < v239[12])
        {
          v91 = *((double *)v82 + 5);
          v92 = v84;
          v93 = v239[11];
          if (v88 >= v93)
          {
            v95 = v89 + 1;
            if (v89 + 1 > 0x666666666666666)
              sub_20E867F44();
            v96 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (_QWORD)v87) >> 3);
            if (2 * v96 > v95)
              v95 = 2 * v96;
            if (v96 >= 0x333333333333333)
              v97 = 0x666666666666666;
            else
              v97 = v95;
            if (v97 > 0x666666666666666)
              sub_20E877A38();
            v98 = (char *)operator new(40 * v97);
            v99 = &v98[8 * ((uint64_t)(v88 - (_QWORD)v87) >> 3)];
            *(_DWORD *)v99 = v83;
            *((_DWORD *)v99 + 1) = v89;
            *((float *)v99 + 2) = v92;
            *((float *)v99 + 3) = v90;
            *((_OWORD *)v99 + 1) = v238;
            *((float *)v99 + 8) = v91;
            if ((void *)v88 == v87)
            {
              v172 = &v98[40 * v97];
              v94 = (unint64_t)(v99 + 40);
              v86[9] = (uint64_t)v99;
              v86[10] = (uint64_t)(v99 + 40);
              v86[11] = (uint64_t)v172;
              if (!v87)
                goto LABEL_71;
            }
            else
            {
              v100 = 0;
              do
              {
                v101 = &v99[v100];
                *((_QWORD *)v101 - 5) = *(_QWORD *)(v88 + v100 - 40);
                *((_QWORD *)v101 - 4) = *(_QWORD *)(v88 + v100 - 32);
                *(_OWORD *)(v101 - 24) = *(_OWORD *)(v88 + v100 - 24);
                *((_DWORD *)v101 - 2) = *(_DWORD *)(v88 + v100 - 8);
                v100 -= 40;
              }
              while ((void *)(v88 + v100) != v87);
              v102 = &v98[40 * v97];
              v94 = (unint64_t)(v99 + 40);
              v86[9] = (uint64_t)&v99[v100];
              v86[10] = (uint64_t)(v99 + 40);
              v86[11] = (uint64_t)v102;
              if (!v87)
                goto LABEL_71;
            }
            operator delete(v87);
          }
          else
          {
            *(_DWORD *)v88 = v83;
            *(_DWORD *)(v88 + 4) = v89;
            *(float *)(v88 + 8) = v92;
            *(float *)(v88 + 12) = v90;
            *(_OWORD *)(v88 + 16) = v238;
            *(float *)(v88 + 32) = v91;
            v94 = v88 + 40;
          }
LABEL_71:
          v86[10] = v94;
          v88 = v94 - 40;
        }
        v103 = *v76;
        v104 = *((_DWORD *)v76 + 2);
        v236 = *v77;
        v237 = *((_QWORD *)v77 + 2);
        if (v104 == -1)
          goto LABEL_54;
        v225 = v77;
        v227 = *(double *)v233[1].i64;
        v230 = *v233;
        v105 = *(unsigned __int8 *)(v78 + 72);
        v220 = *(float64x2_t *)(v78 + 16);
        *(_OWORD *)v221 = *(_OWORD *)(v78 + 48);
        v217 = *(float64x2_t *)v78;
        v218 = *(float64x2_t *)(v78 + 32);
        v106 = *(double *)(v78 + 64);
        v107 = a2[1];
        v110 = (int8x8_t *)v107[1];
        v108 = v107 + 1;
        v109 = v110;
        if (!v110)
          goto LABEL_85;
        v111 = v108;
        do
        {
          v112 = (unint64_t)v109[4];
          if (v112 < v103)
          {
            ++v109;
          }
          else if (v112 == v103)
          {
            if (v109[5].i32[0] < v104)
              ++v109;
            else
              v111 = v109;
          }
          else
          {
            v111 = v109;
          }
          v109 = (int8x8_t *)*v109;
        }
        while (v109);
        if (v111 == v108 || (v113 = (unint64_t)v111[4], v103 < v113) || v103 == v113 && v104 < v111[5].i32[0])
        {
LABEL_85:
          v114 = 0;
        }
        else
        {
          v157 = v111[6];
          v156 = (std::__shared_weak_count *)v111[7];
          v158 = v156;
          if (!v156)
            goto LABEL_139;
          p_shared_owners = (unint64_t *)&v156->__shared_owners_;
          do
            v160 = __ldxr(p_shared_owners);
          while (__stxr(v160 + 1, p_shared_owners));
          do
            v161 = __ldxr(p_shared_owners);
          while (__stxr(v161 + 1, p_shared_owners));
          do
            v162 = __ldaxr(p_shared_owners);
          while (__stlxr(v162 - 1, p_shared_owners));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
            if (v157)
            {
LABEL_140:
              v163 = v239;
              v164 = v239[2];
              v241 = *(_OWORD *)v239;
              *(_QWORD *)&v242 = v164;
              *((_QWORD *)&v242 + 1) = v88;
              v165 = *(_QWORD *)(*(_QWORD *)&v157 + 200);
              v166 = *(char **)(*(_QWORD *)&v157 + 208);
              if (v166 == (char *)v165)
              {
                v77 = v225;
LABEL_156:
                if ((char *)v165 == v166
                  || *(_DWORD *)(v165 + 16) != *((_DWORD *)v239 + 4)
                  || *(_QWORD *)v165 != *v239
                  || (v173 = *(char **)(*(_QWORD *)&v157 + 208), *(_DWORD *)(v165 + 8) != *((_DWORD *)v239 + 2)))
                {
                  v173 = sub_20F287F84((char **)(*(_QWORD *)&v157 + 200), (char *)v165, &v241);
                  v166 = *(char **)(*(_QWORD *)&v157 + 208);
                }
                if (v166 != v173)
                {
                  *(_QWORD *)&v241 = v88;
                  sub_20EE6BDF0(*(uint64_t **)&v157, v163, (uint64_t)&v241);
                  v166 = *(char **)(*(_QWORD *)&v157 + 208);
                }
                if (v166 == v173)
                {
                  v205 = __cxa_allocate_exception(0x580uLL);
                  v206 = "Adding node failed!";
                }
                else
                {
                  if ((unint64_t)&v166[-*(_QWORD *)(*(_QWORD *)&v157 + 200)] > 0x3F)
                  {
                    v155 = v158;
                    if (!v158)
                      goto LABEL_54;
                    goto LABEL_166;
                  }
                  v205 = __cxa_allocate_exception(0x580uLL);
                  v206 = "Track length < 2!";
                }
                v207 = (_QWORD *)sub_20EA59064((uint64_t)v205, v206, "Unknown");
                *v207 = &off_24CA05150;
                __cxa_throw(v207, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
              }
              v167 = (uint64_t)&v166[-v165] >> 5;
              v77 = v225;
              while (2)
              {
                v168 = v167 >> 1;
                v169 = v165 + 32 * (v167 >> 1);
                v170 = *(_DWORD *)(v169 + 16);
                v171 = v170 >= v242;
                if (v170 == (_DWORD)v242)
                {
                  if (*(_QWORD *)v169 >= (unint64_t)v241)
                  {
                    if (*(_QWORD *)v169 == (_QWORD)v241)
                    {
                      v171 = *(_DWORD *)(v169 + 8) >= DWORD2(v241);
                      goto LABEL_148;
                    }
LABEL_143:
                    v167 = v168;
                    if (!v168)
                      goto LABEL_156;
                    continue;
                  }
                }
                else
                {
LABEL_148:
                  if (v171)
                    goto LABEL_143;
                }
                break;
              }
              v165 = v169 + 32;
              v168 = v167 + ~v168;
              goto LABEL_143;
            }
          }
          else
          {
LABEL_139:
            if (v157)
              goto LABEL_140;
          }
          v114 = v158;
        }
        v115 = (char *)operator new(0xB0uLL);
        v116 = (std::__shared_weak_count *)v115;
        v223 = v114;
        *((_QWORD *)v115 + 1) = 0;
        v117 = (unint64_t *)(v115 + 8);
        *((_QWORD *)v115 + 2) = 0;
        *(_QWORD *)v115 = &off_24CA05190;
        *((_OWORD *)v115 + 5) = 0u;
        *((_OWORD *)v115 + 6) = 0u;
        *((_OWORD *)v115 + 7) = 0u;
        *((_OWORD *)v115 + 8) = 0u;
        *((_OWORD *)v115 + 3) = 0u;
        *((_OWORD *)v115 + 4) = 0u;
        *((_OWORD *)v115 + 9) = 0u;
        *((_OWORD *)v115 + 10) = 0u;
        *((_OWORD *)v115 + 2) = 0u;
        v115[80] = 1;
        *((_QWORD *)v115 + 12) = 0;
        *((_QWORD *)v115 + 13) = 0;
        *((_QWORD *)v115 + 11) = 0;
        *((_QWORD *)v115 + 14) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v115 + 3) = &off_24C9FC600;
        v118 = (uint64_t (***)())(v115 + 24);
        *((_QWORD *)v115 + 16) = 0x3FF0000000000000;
        *(_QWORD *)(v115 + 165) = 0;
        *(_OWORD *)(v115 + 136) = 0u;
        *(_OWORD *)(v115 + 152) = 0u;
        v119 = (*a2)[224];
        if (!*(_QWORD *)&v119)
          goto LABEL_197;
        v120 = v239;
        v121 = *((_DWORD *)v239 + 4);
        v122 = *((_DWORD *)v239 + 2);
        v123 = v122 ^ __ROR4__(v121, 13);
        v124 = (uint8x8_t)vcnt_s8(v119);
        v124.i16[0] = vaddlv_u8(v124);
        if (v124.u32[0] > 1uLL)
        {
          v125 = v123;
          if (*(_QWORD *)&v119 <= v123)
            v125 = v123 % *(_QWORD *)&v119;
        }
        else
        {
          v125 = (v119.i32[0] - 1) & v123;
        }
        v126 = *(uint64_t ***)(*(_QWORD *)&(*a2)[223] + 8 * v125);
        *(_QWORD *)&v127 = v230.i64[0];
        if (!v126 || (v128 = *v126) == 0)
        {
LABEL_197:
          v200 = (char *)__cxa_allocate_exception(0x580uLL);
          *(_QWORD *)v200 = &off_24C9BFC10;
          snprintf(v200 + 8, 0x576uLL, "[%s] %s", "Unknown", "Failed to find pose_ref!");
          *(_QWORD *)v200 = &off_24CA05150;
          __cxa_throw(v200, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
        }
        v129 = *v239;
        if (v124.u32[0] < 2uLL)
        {
          v130 = *(_QWORD *)&v119 - 1;
          while (1)
          {
            v132 = v128[1];
            if (v132 == v123)
            {
              if (*((_DWORD *)v128 + 8) == v121 && v128[2] == v129 && *((_DWORD *)v128 + 6) == v122)
                goto LABEL_110;
            }
            else if ((v132 & v130) != v125)
            {
              goto LABEL_197;
            }
            v128 = (uint64_t *)*v128;
            if (!v128)
              goto LABEL_197;
          }
        }
        while (1)
        {
          v131 = v128[1];
          if (v131 == v123)
            break;
          if (v131 >= *(_QWORD *)&v119)
            v131 %= *(_QWORD *)&v119;
          if (v131 != v125)
            goto LABEL_197;
LABEL_96:
          v128 = (uint64_t *)*v128;
          if (!v128)
            goto LABEL_197;
        }
        if (*((_DWORD *)v128 + 8) != v121 || v128[2] != v129 || *((_DWORD *)v128 + 6) != v122)
          goto LABEL_96;
LABEL_110:
        v133 = *(double *)vextq_s8(v230, v230, 8uLL).i64;
        *((_OWORD *)v115 + 2) = v236;
        *((_QWORD *)v115 + 6) = v237;
        *(_QWORD *)&v134.f64[0] = v230.i64[0];
        v134.f64[1] = v133;
        v135 = v227;
        v136 = &off_24C9FC600;
        if (fabs(sqrt(vmulq_f64(v134, v134).f64[0] + v133 * v133 + v135 * v135) + -1.0) > 0.000001)
        {
          v216 = v133;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v136 = *v118;
          v135 = v227;
          *(_QWORD *)&v127 = v230.i64[0];
          v133 = v216;
        }
        v137 = *(_OWORD *)v120;
        LODWORD(v116[3].__vftable) = *((_DWORD *)v120 + 4);
        *(_OWORD *)&v116[2].__shared_owners_ = v137;
        v116[5].__vftable = (std::__shared_weak_count_vtbl *)(v128 + 5);
        *((double *)&v127 + 1) = v133;
        *(_OWORD *)&v116[3].__shared_weak_owners_ = v127;
        *(double *)&v116[4].__shared_owners_ = v135;
        *(double *)&v116[4].__shared_weak_owners_ = v90;
        v138 = ((uint64_t (*)(uint64_t (***)()))v136[2])(v118);
        if (v105)
        {
          v140 = vcvt_f32_f64(v217);
          v141 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v140, v220);
          *(int8x16_t *)&v116[5].__shared_weak_owners_ = v141;
          *(float *)v139.i32 = v106;
          v142 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v218), *(float64x2_t *)v221);
          *(int8x16_t *)&v116[6].__shared_owners_ = v142;
          LODWORD(v116[7].__vftable) = v139.i32[0];
          v143 = (int32x4_t)vextq_s8(v141, v142, 0xCuLL);
          v144 = (int32x4_t)vextq_s8(v142, v139, 8uLL);
          v145 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v143, (int8x16_t)v143, 0xCuLL), (int8x16_t)v143, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v144, v144), (int8x16_t)v144, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v143, v143), (int8x16_t)v143, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL), (int8x16_t)v144, 8uLL));
          BYTE4(v116[7].__vftable) = vmla_f32(vmla_lane_f32(vmul_f32(v140, *(float32x2_t *)v145.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v145.i8, 1), v140, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL), vcvt_f32_f64(v220)).f32[0] > 0.0;
        }
        if ((v138 & 1) == 0)
        {
          v203 = __cxa_allocate_exception(0x580uLL);
          v204 = (_QWORD *)sub_20EA59064((uint64_t)v203, "Failed to SetAnchor()!", "Unknown");
          *v204 = &off_24CA05150;
          __cxa_throw(v204, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
        }
        v146 = a2[1];
        v147 = *v76;
        v148 = *((unsigned int *)v76 + 2);
        *(_QWORD *)&v241 = &off_24C9FC700;
        *((_QWORD *)&v241 + 1) = v147;
        *(_QWORD *)&v242 = v148;
        *((_QWORD *)&v242 + 1) = v88;
        *(_QWORD *)&v243 = v118;
        v149 = sub_20F28AA04(&v146[3], v239);
        sub_20F289D80((uint64_t **)v146, (int8x8_t *)v149, (uint64_t)&v241, &v234);
        if (!v234)
        {
          v201 = __cxa_allocate_exception(0x580uLL);
          v202 = (_QWORD *)sub_20EA59064((uint64_t)v201, "addCorrespondenceImageScene failed!", "Unknown");
          *v202 = &off_24CA05150;
          __cxa_throw(v202, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
        }
        if (*((_BYTE *)v234 + 192))
          v150 = v234 + 5;
        else
          v150 = 0;
        *((_BYTE *)v150 + 150) = 1;
        v151 = v235;
        v77 = v225;
        if (v235)
        {
          v152 = (unint64_t *)&v235->__shared_owners_;
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 - 1, v152));
          if (!v153)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        do
          v154 = __ldaxr(v117);
        while (__stlxr(v154 - 1, v117));
        if (v154)
        {
          v155 = v223;
          if (!v223)
            goto LABEL_54;
LABEL_166:
          v174 = (unint64_t *)&v155->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
          v155 = v223;
          if (v223)
            goto LABEL_166;
        }
LABEL_54:
        v76 += 2;
        v77 = (__int128 *)((char *)v77 + 24);
        v233 = (int8x16_t *)((char *)v233 + 24);
        v78 += 80;
        v82 += 48;
        v81 = __dst;
      }
      v197 = v240;
      if (v240)
      {
        v198 = (unint64_t *)&v240->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      v55 = v211 + 3;
      v54 = v212 + 3;
      v53 = v213 + 3;
      v52 = v214 + 3;
      v51 = v215 + 19;
    }
    while (v215 + 19 != v210);
  }
}

void sub_20FCD9448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  unint64_t *p_shared_owners;
  unint64_t v48;

  if (a46)
  {
    p_shared_owners = (unint64_t *)&a46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a46->__on_zero_shared)(a46);
      std::__shared_weak_count::__release_weak(a46);
    }
  }
  _Unwind_Resume(a1);
}

double sub_20FCD95B4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v61;
  uint64_t k;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  double result;

  v2 = *a1;
  v3 = (_QWORD **)(*a1 + 56);
  sub_20E8E8F80(*a1 + 48, *v3);
  *(_QWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 64) = 0;
  *v3 = 0;
  if (*(_QWORD *)(v2 + 1808))
  {
    v4 = *(_QWORD **)(v2 + 1800);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(v2 + 1800) = 0;
    v6 = *(_QWORD *)(v2 + 1792);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)(v2 + 1784) + 8 * i) = 0;
    }
    *(_QWORD *)(v2 + 1808) = 0;
  }
  sub_20E8E92C8(v2 + 1760, *(_QWORD **)(v2 + 1768));
  *(_QWORD *)(v2 + 1760) = v2 + 1768;
  *(_QWORD *)(v2 + 1776) = 0;
  *(_QWORD *)(v2 + 1768) = 0;
  sub_20FCCD180(v2 + 72);
  v8 = (uint64_t *)a1[2];
  v9 = v8[3];
  if (v9 < 0x80)
  {
    if (v9)
    {
      v15 = 0;
      do
      {
        v16 = v15;
        if ((*(char *)(*v8 + v15) & 0x80000000) == 0)
        {
          v17 = *(std::__shared_weak_count **)(v8[1] + 32 * v15 + 24);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        ++v15;
      }
      while (v16 + 1 != v8[3]);
      v8[2] = 0;
      v27 = (_BYTE *)*v8;
      memset((void *)*v8, 128, v16 + 9);
      v27[v15] = -1;
      v28 = v8[3];
      v29 = v28 - (v28 >> 3);
      v30 = v28 == 7;
      v31 = 6;
      if (!v30)
        v31 = v29;
      v8[4] = v31 - v8[2];
      v20 = a1[3];
      v21 = *(_QWORD *)(v20 + 24);
      if (v21 >= 0x80)
        goto LABEL_28;
      goto LABEL_40;
    }
  }
  else
  {
    v10 = 0;
    v11 = v8 + 1;
    do
    {
      if ((*(char *)(*v8 + v10) & 0x80000000) == 0)
      {
        v12 = *(std::__shared_weak_count **)(*v11 + 32 * v10 + 24);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      ++v10;
    }
    while (v10 != v8[3]);
    operator delete((void *)*v8);
    *v8 = (uint64_t)&unk_2102DAFF0;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v8 + 3) = 0u;
  }
  v20 = a1[3];
  v21 = *(_QWORD *)(v20 + 24);
  if (v21 >= 0x80)
  {
LABEL_28:
    v22 = 0;
    v23 = (_QWORD *)(v20 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)v20 + v22) & 0x80000000) == 0)
      {
        v24 = *(std::__shared_weak_count **)(*v23 + 32 * v22 + 24);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      ++v22;
    }
    while (v22 != *(_QWORD *)(v20 + 24));
    operator delete(*(void **)v20);
    *(_QWORD *)v20 = &unk_2102DAFF0;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)(v20 + 24) = 0u;
    goto LABEL_52;
  }
LABEL_40:
  if (v21)
  {
    v32 = 0;
    do
    {
      v33 = v32;
      if ((*(char *)(*(_QWORD *)v20 + v32) & 0x80000000) == 0)
      {
        v34 = *(std::__shared_weak_count **)(*(_QWORD *)(v20 + 8) + 32 * v32 + 24);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      ++v32;
    }
    while (v33 + 1 != *(_QWORD *)(v20 + 24));
    *(_QWORD *)(v20 + 16) = 0;
    v37 = *(_BYTE **)v20;
    memset(*(void **)v20, 128, v33 + 9);
    v37[v32] = -1;
    v38 = *(_QWORD *)(v20 + 24);
    v39 = v38 - (v38 >> 3);
    v30 = v38 == 7;
    v40 = 6;
    if (!v30)
      v40 = v39;
    *(_QWORD *)(v20 + 32) = v40 - *(_QWORD *)(v20 + 16);
  }
LABEL_52:
  v41 = a1[4];
  v42 = *(_QWORD *)(v41 + 24);
  if (v42 >= 0x80)
  {
    v43 = 0;
    v44 = (_QWORD *)(v41 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)v41 + v43) & 0x80000000) == 0)
      {
        v45 = *(std::__shared_weak_count **)(*v44 + 32 * v43 + 24);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
      ++v43;
    }
    while (v43 != *(_QWORD *)(v41 + 24));
    operator delete(*(void **)v41);
    *(_QWORD *)v41 = &unk_2102DAFF0;
    *(_OWORD *)v44 = 0u;
    *(_OWORD *)(v41 + 24) = 0u;
LABEL_71:
    v53 = a1[1];
    if (!*(_QWORD *)(v53 + 48))
      goto LABEL_81;
    goto LABEL_76;
  }
  if (!v42)
    goto LABEL_71;
  v48 = 0;
  do
  {
    v49 = v48;
    if ((*(char *)(*(_QWORD *)v41 + v48) & 0x80000000) == 0)
    {
      v50 = *(std::__shared_weak_count **)(*(_QWORD *)(v41 + 8) + 32 * v48 + 24);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    ++v48;
  }
  while (v49 + 1 != *(_QWORD *)(v41 + 24));
  *(_QWORD *)(v41 + 16) = 0;
  v54 = *(_BYTE **)v41;
  memset(*(void **)v41, 128, v49 + 9);
  v54[v48] = -1;
  v55 = *(_QWORD *)(v41 + 24);
  v56 = v55 - (v55 >> 3);
  v30 = v55 == 7;
  v57 = 6;
  if (!v30)
    v57 = v56;
  *(_QWORD *)(v41 + 32) = v57 - *(_QWORD *)(v41 + 16);
  v53 = a1[1];
  if (*(_QWORD *)(v53 + 48))
  {
LABEL_76:
    v58 = *(_QWORD **)(v53 + 40);
    if (v58)
    {
      do
      {
        v66 = (_QWORD *)*v58;
        v67 = (_QWORD *)v58[7];
        while (v67)
        {
          v69 = v67;
          v67 = (_QWORD *)*v67;
          v70 = (std::__shared_weak_count *)v69[4];
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          operator delete(v69);
        }
        v68 = (void *)v58[5];
        v58[5] = 0;
        if (v68)
          operator delete(v68);
        operator delete(v58);
        v58 = v66;
      }
      while (v66);
    }
    *(_QWORD *)(v53 + 40) = 0;
    v59 = *(_QWORD *)(v53 + 32);
    if (v59)
    {
      for (j = 0; j != v59; ++j)
        *(_QWORD *)(*(_QWORD *)(v53 + 24) + 8 * j) = 0;
    }
    *(_QWORD *)(v53 + 48) = 0;
  }
LABEL_81:
  sub_20E8E91A4(v53, *(_QWORD **)(v53 + 8));
  *(_QWORD *)v53 = v53 + 8;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 8) = 0;
  v61 = a1[5];
  for (k = a1[6]; k != v61; k -= 16)
  {
    v63 = *(std::__shared_weak_count **)(k - 8);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  a1[6] = v61;
  v73 = a1[9];
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)(v73 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(v73 + 72) = 0u;
  *(_OWORD *)(v73 + 88) = 0u;
  *(_QWORD *)(v73 + 104) = 0;
  return result;
}

void sub_20FCD9BAC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  float64x2_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned int v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  const void *v28;
  uint64_t v29;
  unsigned int v30;
  size_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unsigned int *v57;
  unsigned int *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  __int128 *v71;
  uint64_t *v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  __int128 v80;
  unint64_t v81;
  uint8x8_t v82;
  unint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  size_t v92;
  void *v93;
  uint64_t v94;
  const void **v95;
  uint64_t *v96;
  int8x16_t v102;
  int8x16_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  size_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  const char *v114;
  size_t v115;
  uint64_t *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  const char *v119;
  size_t v120;
  _BYTE *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  size_t v133;
  size_t v134;
  _BYTE *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char *v141;
  void *v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  char *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void **v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  size_t v192;
  void *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  size_t v197;
  void *v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float32x2_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int8x16_t v207;
  unsigned int *v208;
  unint64_t v209;
  uint8x8_t v210;
  unint64_t v211;
  uint64_t v212;
  const void **v213;
  uint64_t v214;
  const void **v215;
  uint64_t **v216;
  uint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  size_t v225;
  void *v226;
  uint64_t v227;
  const void **v228;
  const void *v229;
  uint64_t v230;
  uint64_t v231;
  void **v232;
  uint64_t v233;
  const char *v234;
  size_t v235;
  unsigned __int8 v236;
  const char *v237;
  size_t v238;
  _BYTE *v239;
  const char *v240;
  unint64_t v241;
  void **v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  NSObject *v250;
  size_t v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  size_t v254;
  size_t v255;
  _BYTE *v256;
  void *v257;
  const void *v258;
  uint64_t v259;
  uint64_t v260;
  void **v261;
  uint64_t v262;
  const char *v263;
  size_t v264;
  uint64_t *v265;
  unsigned __int8 v266;
  const char *v267;
  size_t v268;
  _BYTE *v269;
  uint64_t v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  NSObject *v275;
  size_t v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  size_t v279;
  size_t v280;
  _BYTE *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  _QWORD *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  char *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  _QWORD *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  char *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  const void **v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  void **v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  const void *v350;
  uint64_t v351;
  uint64_t v352;
  void **v353;
  uint64_t v354;
  const char *v355;
  size_t v356;
  uint64_t *v357;
  unsigned __int8 v358;
  const char *v359;
  size_t v360;
  _BYTE *v361;
  uint64_t v362;
  uint64_t v363;
  _BYTE *v364;
  uint64_t v365;
  uint64_t v366;
  NSObject *v367;
  size_t v368;
  std::__shared_weak_count_vtbl *v369;
  std::__shared_weak_count *v370;
  size_t v371;
  size_t v372;
  _BYTE *v373;
  void *v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  const char *v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  void **v404;
  unint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  _QWORD *v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  char *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  unsigned int v428;
  BOOL v429;
  uint64_t v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  const char *v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  uint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  void **v461;
  unint64_t *v462;
  const void *v463;
  uint64_t v464;
  uint64_t v465;
  void **v466;
  uint64_t v467;
  const char *v468;
  size_t v469;
  uint64_t *v470;
  unsigned __int8 v471;
  const char *v472;
  size_t v473;
  _BYTE *v474;
  uint64_t v475;
  uint64_t v476;
  _BYTE *v477;
  uint64_t v478;
  uint64_t v479;
  NSObject *v480;
  size_t v481;
  std::__shared_weak_count_vtbl *v482;
  std::__shared_weak_count *v483;
  size_t v484;
  size_t v485;
  _BYTE *v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char v491;
  _QWORD *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  char *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  const char *v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  void **v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  void *v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint8x8_t v551;
  unint64_t v552;
  uint64_t **v553;
  uint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  void *v557;
  unsigned int v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  unsigned int v566;
  BOOL v567;
  uint64_t v568;
  uint64_t v569;
  __int128 *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  char *v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unsigned int v579;
  BOOL v580;
  char *v581;
  uint64_t v582;
  int v583;
  unint64_t v584;
  unint64_t v585;
  size_t v586;
  __int128 *v587;
  int v588;
  unint64_t v589;
  unint64_t v590;
  size_t v591;
  __int128 *v592;
  uint64_t v593;
  const void **v594;
  uint64_t v595;
  const void **v596;
  const void *v597;
  uint64_t v598;
  uint64_t v599;
  const char *v600;
  uint64_t v601;
  const char *v602;
  size_t v603;
  unsigned __int8 v604;
  const char *v605;
  size_t v606;
  _BYTE *v607;
  uint64_t v608;
  uint64_t v609;
  _BYTE *v610;
  uint64_t v611;
  uint64_t v612;
  NSObject *v613;
  size_t v614;
  std::__shared_weak_count_vtbl *v615;
  std::__shared_weak_count *v616;
  size_t v617;
  size_t v618;
  uint64_t v619;
  _BYTE *v620;
  void *v621;
  const void *v622;
  uint64_t v623;
  uint64_t v624;
  const char *v625;
  uint64_t v626;
  const char *v627;
  size_t v628;
  unsigned __int8 v629;
  const char *v630;
  size_t v631;
  _BYTE *v632;
  uint64_t v633;
  uint64_t v634;
  _BYTE *v635;
  uint64_t v636;
  uint64_t v637;
  NSObject *v638;
  size_t v639;
  std::__shared_weak_count_vtbl *v640;
  std::__shared_weak_count *v641;
  size_t v642;
  size_t v643;
  uint64_t v644;
  _BYTE *v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  char v650;
  _QWORD *v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  char *v656;
  unint64_t *v657;
  unint64_t v658;
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  char v666;
  _QWORD *v667;
  uint64_t v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  char *v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  unint64_t v678;
  std::__shared_weak_count *v679;
  unint64_t *v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  const char *v687;
  uint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  std::__shared_weak_count *v692;
  unint64_t *v693;
  unint64_t v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  const char *v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  const char *v720;
  uint64_t v721;
  std::__shared_weak_count *v722;
  unint64_t *v723;
  unint64_t v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  uint64_t v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  const char *v741;
  unint64_t *v742;
  _QWORD *v743;
  _QWORD *v744;
  void *v745;
  void *exception;
  const char *v747;
  void *v748;
  _QWORD *v749;
  _QWORD *v750;
  void *v751;
  _QWORD *v752;
  void *v753;
  _QWORD *v754;
  void *v755;
  _QWORD *v756;
  void *v757;
  const char *v758;
  _QWORD *v759;
  void *v760;
  _QWORD *v761;
  const char *v762;
  const char *v763;
  const char *v764;
  uint64_t *v765;
  uint64_t *v766;
  uint64_t *v767;
  uint64_t *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t *v773;
  _QWORD *v774;
  int8x16_t v775;
  const char *v776;
  size_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  char **v781;
  const char *v782;
  const char *v783;
  _QWORD *__s;
  double __sa;
  const char *__sb;
  const char *__sc;
  const char *__sd;
  const char *__se;
  const char *__sf;
  uint64_t __sg;
  const char *__sh;
  const char *__si;
  uint64_t v795;
  __int128 v796;
  void *v797[2];
  int64_t v798;
  char *v799;
  std::__shared_weak_count *v800;
  __int128 v801;
  int64_t v802;
  void *v803[2];
  int64_t v804;
  __int128 v805;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v807;
  const char *v808;
  int v809;
  const char *v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  __int128 v813;
  __int128 v814;
  int v815;
  __int128 __dst;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  void *__p;
  void *v831;
  _BYTE object[48];
  __int128 v833;
  uint64_t v834;
  __int128 v835;
  uint64_t v836;
  uint64_t v837[2];
  uint64_t v838[2];
  __int128 v839;
  std::__shared_weak_count *v840;
  char *v841;
  std::__shared_weak_count *v842;
  _BYTE v843[24];
  uint64_t v844;

  v844 = *MEMORY[0x24BDAC8D0];
  sub_20FCD95B4(a2);
  v774 = a1;
  v3 = (_QWORD *)*a1;
  __s = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v837[0] = 0;
      v4 = *(_OWORD *)(v3 + 5);
      v5 = *(_OWORD *)(v3 + 7);
      v6 = *(float64x2_t *)(v3 + 9);
      v7 = *(_OWORD *)(v3 + 11);
      v8 = v3[13];
      v9 = *((_OWORD *)v3 + 7);
      v10 = v3[16];
      *(float64x2_t *)&object[32] = v6;
      v833 = v7;
      *(_OWORD *)object = v4;
      *(_OWORD *)&object[16] = v5;
      v834 = v8;
      v836 = v10;
      v11 = *((unsigned __int8 *)v3 + 136) - 1;
      v835 = v9;
      if (v11 > 0xB)
        v12 = 0;
      else
        v12 = dword_2103BCAD4[(char)v11];
      sub_20FCD113C(v12, v837, v3 + 18, *(double *)&v4, *(double *)&v5, v6);
      v13 = *a2;
      v14 = *((_DWORD *)v3 + 8);
      v15 = *(uint64_t **)(*a2 + 304);
      if (v15)
      {
        while (1)
        {
          while (1)
          {
            v17 = (uint64_t **)v15;
            v18 = *((_DWORD *)v15 + 8);
            if (v18 <= v14)
              break;
            v15 = *v17;
            v16 = v17;
            if (!*v17)
              goto LABEL_14;
          }
          if (v18 >= v14)
            break;
          v15 = v17[1];
          if (!v15)
          {
            v16 = v17 + 1;
            goto LABEL_14;
          }
        }
        v19 = (char *)v17;
      }
      else
      {
        v16 = (uint64_t **)(v13 + 304);
        v17 = (uint64_t **)(v13 + 304);
LABEL_14:
        v19 = (char *)operator new(0x88uLL);
        *((_DWORD *)v19 + 8) = v14;
        *((_OWORD *)v19 + 3) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_QWORD *)v19 + 5) = 0x3FF0000000000000;
        *((_QWORD *)v19 + 9) = 0x3FF0000000000000;
        *((_QWORD *)v19 + 12) = 0;
        *((_QWORD *)v19 + 13) = 0x3FF0000000000000;
        *((_QWORD *)v19 + 15) = 0;
        *((_QWORD *)v19 + 16) = 0;
        *((_QWORD *)v19 + 14) = 0;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v17;
        *v16 = (uint64_t *)v19;
        v20 = (uint64_t *)v19;
        v21 = **(_QWORD **)(v13 + 296);
        if (v21)
        {
          *(_QWORD *)(v13 + 296) = v21;
          v20 = *v16;
        }
        sub_20E868578(*(uint64_t **)(v13 + 304), v20);
        ++*(_QWORD *)(v13 + 312);
      }
      v22 = *(_OWORD *)&object[16];
      *(_OWORD *)(v19 + 40) = *(_OWORD *)object;
      v23 = *(_OWORD *)&object[32];
      *(_OWORD *)(v19 + 88) = v833;
      *(_OWORD *)(v19 + 72) = v23;
      *((_QWORD *)v19 + 13) = v834;
      *(_OWORD *)(v19 + 56) = v22;
      *((_OWORD *)v19 + 7) = v835;
      *((_QWORD *)v19 + 16) = v836;
      sub_20F3454F8(*a2, *((_DWORD *)v3 + 8), v837[0]);
      v24 = *a2;
      LODWORD(v805) = *((_DWORD *)v3 + 8);
      *(_QWORD *)&__dst = &v805;
      v25 = sub_20F3456E8(v24 + 320, (unsigned int *)&v805, (uint64_t)&unk_2102DB95C, (_DWORD **)&__dst);
      v25[56] = 0;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      v25[64] = 0;
      v828 = 0u;
      v829 = 0u;
      v826 = 0u;
      v827 = 0u;
      v824 = 0u;
      v825 = 0u;
      v822 = 0u;
      v823 = 0u;
      v820 = 0u;
      v821 = 0u;
      v818 = 0u;
      v819 = 0u;
      __dst = 0u;
      v817 = 0u;
      v26 = v837[0];
      v27 = *(_DWORD *)(v837[0] + 992);
      if (v27 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1280;
        }
        v27 = *(_DWORD *)(v26 + 992);
        if (v27 > 7)
        {
LABEL_27:
          if (v27 <= 0xB && v27 > 9)
          {
            v28 = (const void *)(v26 + 168);
            v29 = v837[0];
            v30 = *(_DWORD *)(v837[0] + 992);
            if (v30 != -1)
              goto LABEL_35;
            goto LABEL_44;
          }
LABEL_34:
          v28 = (const void *)(v26 + 168);
          v29 = v837[0];
          v30 = *(_DWORD *)(v837[0] + 992);
          if (v30 != -1)
            goto LABEL_35;
          goto LABEL_44;
        }
      }
      else if (v27 > 7)
      {
        goto LABEL_27;
      }
      if (v27 > 3)
      {
        if (v27 > 5)
        {
          v28 = (const void *)(v26 + 168);
          v29 = v837[0];
          v30 = *(_DWORD *)(v837[0] + 992);
          if (v30 != -1)
            goto LABEL_35;
          goto LABEL_44;
        }
        goto LABEL_34;
      }
      if (v27 > 1)
      {
        v28 = (const void *)(v26 + 168);
        v29 = v837[0];
        v30 = *(_DWORD *)(v837[0] + 992);
        if (v30 != -1)
          goto LABEL_35;
      }
      else
      {
        if (!v27)
          goto LABEL_1279;
        v28 = 0;
        v29 = v837[0];
        v30 = *(_DWORD *)(v837[0] + 992);
        if (v30 != -1)
        {
LABEL_35:
          if (v30 > 7)
            goto LABEL_46;
          goto LABEL_36;
        }
      }
LABEL_44:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1280;
      }
      v30 = *(_DWORD *)(v29 + 992);
      if (v30 > 7)
      {
LABEL_46:
        if (v30 > 0xB)
        {
          if (v30 > 0xD)
          {
            v32 = 224;
            if (v28)
              goto LABEL_51;
          }
          else
          {
            if (v30 == 13)
              v32 = 112;
            else
              v32 = 32;
            if (v28)
              goto LABEL_51;
          }
        }
        else
        {
          if (v30 >= 0xA)
            v32 = 112;
          else
            v32 = 56;
          if (v28)
            goto LABEL_51;
        }
        goto LABEL_52;
      }
LABEL_36:
      if (v30 > 3)
      {
        _ZF = v30 == 6;
        if (v30 < 6)
        {
          v32 = 32;
          if (v28)
            goto LABEL_51;
          goto LABEL_52;
        }
      }
      else
      {
        if (v30 <= 1)
        {
          if (!v30)
          {
LABEL_1279:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1280:
            abort();
          }
          goto LABEL_52;
        }
        _ZF = v30 == 2;
      }
      if (_ZF)
        v32 = 24;
      else
        v32 = 32;
      if (v28)
LABEL_51:
        memcpy(&__dst, v28, v32);
LABEL_52:
      v33 = *a2;
      LODWORD(v839) = *((_DWORD *)v3 + 8);
      *(_QWORD *)&v805 = &v839;
      v34 = sub_20F3459FC(v33 + 360, (unsigned int *)&v839, (uint64_t)&unk_2102DB95C, (_DWORD **)&v805);
      *(_OWORD *)(v34 + 184) = v826;
      *(_OWORD *)(v34 + 200) = v827;
      *(_OWORD *)(v34 + 216) = v828;
      *(_OWORD *)(v34 + 232) = v829;
      *(_OWORD *)(v34 + 120) = v822;
      *(_OWORD *)(v34 + 136) = v823;
      *(_OWORD *)(v34 + 152) = v824;
      *(_OWORD *)(v34 + 168) = v825;
      *(_OWORD *)(v34 + 56) = v818;
      *(_OWORD *)(v34 + 72) = v819;
      *(_OWORD *)(v34 + 88) = v820;
      *(_OWORD *)(v34 + 104) = v821;
      *(_OWORD *)(v34 + 24) = __dst;
      *(_OWORD *)(v34 + 40) = v817;
      v35 = v837[0];
      v36 = *(_DWORD *)(v837[0] + 992);
      if (v36 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1284;
        }
        v36 = *(_DWORD *)(v35 + 992);
        if (v36 <= 7)
        {
LABEL_54:
          if (v36 <= 3)
          {
            if (!v36)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1284:
              abort();
            }
LABEL_82:
            v805 = 0uLL;
            rep = 0;
            v840 = 0;
            v38 = 1.0;
            v39 = 1.0;
            v37 = 1.0;
            v839 = 0uLL;
            goto LABEL_83;
          }
          if (v36 <= 6)
            goto LABEL_82;
          v37 = *(double *)(v35 + 488);
          v805 = *(_OWORD *)(v35 + 496);
          rep = *(_QWORD *)(v35 + 512);
          v38 = *(double *)(v35 + 520);
          v839 = *(_OWORD *)(v35 + 528);
          v840 = *(std::__shared_weak_count **)(v35 + 544);
          v39 = *(double *)(v35 + 552);
          goto LABEL_83;
        }
      }
      else if (v36 <= 7)
      {
        goto LABEL_54;
      }
      if (v36 > 0xB)
      {
        if (v36 <= 0xE)
          goto LABEL_82;
        v37 = *(double *)(v35 + 904);
        v805 = *(_OWORD *)(v35 + 912);
        rep = *(_QWORD *)(v35 + 928);
        v38 = *(double *)(v35 + 936);
        v839 = *(_OWORD *)(v35 + 944);
        v840 = *(std::__shared_weak_count **)(v35 + 960);
        v39 = *(double *)(v35 + 968);
      }
      else
      {
        if (v36 > 9)
        {
          if (v36 != 10)
          {
            v37 = *(double *)(v35 + 680);
            v805 = *(_OWORD *)(v35 + 688);
            rep = *(_QWORD *)(v35 + 704);
            v38 = *(double *)(v35 + 712);
            v839 = *(_OWORD *)(v35 + 720);
            v840 = *(std::__shared_weak_count **)(v35 + 736);
            v39 = *(double *)(v35 + 744);
            goto LABEL_83;
          }
          goto LABEL_82;
        }
        if (v36 != 9)
          goto LABEL_82;
        v37 = *(double *)(v35 + 512);
        rep = *(_QWORD *)(v35 + 536);
        v805 = *(_OWORD *)(v35 + 520);
        v38 = *(double *)(v35 + 544);
        v840 = *(std::__shared_weak_count **)(v35 + 568);
        v839 = *(_OWORD *)(v35 + 552);
        v39 = *(double *)(v35 + 576);
      }
LABEL_83:
      v813 = v805;
      *(_QWORD *)&v814 = rep;
      *(_OWORD *)v843 = v839;
      *(_QWORD *)&v843[16] = v840;
      v40 = *a2;
      LODWORD(v839) = *((_DWORD *)v3 + 8);
      *(_QWORD *)&v805 = &v839;
      v41 = sub_20F345D3C(v40 + 400, (unsigned int *)&v839, (uint64_t)&unk_2102DB95C, (_DWORD **)&v805);
      *((double *)v41 + 3) = v37;
      *((_OWORD *)v41 + 2) = v813;
      v41[6] = v814;
      *((double *)v41 + 7) = v38;
      *((_OWORD *)v41 + 4) = *(_OWORD *)v843;
      v41[10] = *(_QWORD *)&v843[16];
      *((double *)v41 + 11) = v39;
      v42 = v837[0];
      v837[0] = 0;
      if (v42)
        sub_20E8E931C((uint64_t)v837, v42);
      v43 = (_QWORD *)v3[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (_QWORD *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (_QWORD *)v3[2];
          _ZF = *v44 == (_QWORD)v3;
          v3 = v44;
        }
        while (!_ZF);
      }
      v3 = v44;
    }
    while (v44 != __s);
  }
  v46 = v774[3];
  v45 = v774[4];
  while (v46 != v45)
  {
    v47 = *a2;
    v48 = *(_QWORD *)(v46 + 784);
    v49 = *(unsigned int *)(v46 + 792);
    sub_20FCD0CB8((__int128 *)v46, (uint64_t)&__dst);
    sub_20F283D18(v47, v48, v49, (uint64_t)&__dst);
    if (__p)
    {
      v831 = __p;
      operator delete(__p);
    }
    v46 += 800;
  }
  v813 = 0u;
  v814 = 0u;
  v815 = 1065353216;
  v51 = (_QWORD *)v774[6];
  v50 = (_QWORD *)v774[7];
  if (v51 != v50)
  {
    v52 = 0;
    while (1)
    {
      v53 = operator new(0x300uLL);
      v53[1] = 0;
      v53[2] = 0;
      *v53 = &off_24C9FC5B0;
      sub_20F469B44((uint64_t)(v53 + 3));
      *(_QWORD *)&__dst = v53 + 3;
      *((_QWORD *)&__dst + 1) = v53;
      v54 = (uint64_t)(v51[8] - v51[7]) >> 6;
      v55 = (unint64_t *)v51[15];
      v56 = (unint64_t *)v51[16];
      if (v54 < v56 - v55)
      {
        exception = __cxa_allocate_exception(0x580uLL);
        v747 = "VIOFrame invalid feature_indices size!";
        goto LABEL_1278;
      }
      v57 = (unsigned int *)v51[18];
      v58 = (unsigned int *)v51[19];
      if (v54 < v58 - v57)
      {
        exception = __cxa_allocate_exception(0x580uLL);
        v747 = "VIOFrame invalid reloc feature_indices size!";
        goto LABEL_1278;
      }
      if (v55 != v56)
      {
        v59 = v55 + 1;
        if (v55 + 1 != v56)
        {
          v60 = *v55;
          v61 = v55 + 1;
          do
          {
            v63 = *v61++;
            v62 = v63;
            _CF = v60 >= v63;
            if (v60 <= v63)
              v60 = v62;
            if (!_CF)
              v55 = v59;
            v59 = v61;
          }
          while (v61 != v56);
        }
        if (*v55 >= v54)
          break;
      }
      if (v57 != v58)
      {
        v65 = v57 + 1;
        if (v57 + 1 != v58)
        {
          v66 = *v57;
          v67 = v57 + 1;
          do
          {
            v69 = *v67++;
            v68 = v69;
            v70 = v66 >= v69;
            if (v66 <= v69)
              v66 = v68;
            if (!v70)
              v57 = v65;
            v65 = v67;
          }
          while (v67 != v58);
        }
        if (v54 <= *v57)
        {
          exception = __cxa_allocate_exception(0x580uLL);
          v747 = "VIOFrame invalid reloc feature index!";
          goto LABEL_1278;
        }
      }
      sub_20FCD2B24((uint64_t)v51, (uint64_t)(v53 + 3), 1);
      v71 = (__int128 *)__dst;
      LODWORD(v805) = v52;
      *(_QWORD *)object = &v805;
      v72 = sub_20F448798((uint64_t)&v813, (unsigned int *)&v805, (uint64_t)&unk_2102DB95C, (_DWORD **)object);
      v73 = *v71;
      *((_DWORD *)v72 + 10) = *((_DWORD *)v71 + 4);
      *(_OWORD *)(v72 + 3) = v73;
      if ((sub_20F286CA4(a2, (char *)&__dst) & 1) == 0)
      {
        v748 = __cxa_allocate_exception(0x580uLL);
        v749 = (_QWORD *)sub_20EA59064((uint64_t)v748, "Failed to add Frame!", "Unknown");
        *v749 = &off_24CA05150;
        __cxa_throw(v749, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      ++v52;
      v51 += 21;
      if (v51 == v50)
        goto LABEL_126;
    }
    exception = __cxa_allocate_exception(0x580uLL);
    v747 = "VIOFrame invalid feature index!";
LABEL_1278:
    v750 = (_QWORD *)sub_20EA59064((uint64_t)exception, v747, "Unknown");
    *v750 = &off_24CA05150;
    __cxa_throw(v750, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
  }
LABEL_126:
  v78 = (uint64_t *)v774[9];
  v77 = (uint64_t *)v774[10];
  if (v78 == v77)
    goto LABEL_1268;
  v771 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v772 = *MEMORY[0x24BEDB7F0];
  v770 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v769 = MEMORY[0x24BEDB848] + 16;
  v773 = (uint64_t *)v774[10];
  while (2)
  {
    if (v78[18] == v78[19])
      goto LABEL_128;
    v79 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v79 + 1) = 0;
    *((_QWORD *)v79 + 2) = 0;
    *(_QWORD *)v79 = &off_24CA05190;
    *((_OWORD *)v79 + 6) = 0u;
    *((_OWORD *)v79 + 7) = 0u;
    *((_OWORD *)v79 + 2) = 0u;
    *((_OWORD *)v79 + 3) = 0u;
    *((_OWORD *)v79 + 4) = 0u;
    *((_OWORD *)v79 + 5) = 0u;
    *((_OWORD *)v79 + 8) = 0u;
    *((_OWORD *)v79 + 9) = 0u;
    *((_OWORD *)v79 + 10) = 0u;
    v79[80] = 1;
    *((_QWORD *)v79 + 11) = 0;
    *((_QWORD *)v79 + 12) = 0;
    *((_QWORD *)v79 + 13) = 0;
    *((_QWORD *)v79 + 14) = 0xFFEFFFFFFFFFFFFFLL;
    *((_QWORD *)v79 + 16) = 0x3FF0000000000000;
    *((_QWORD *)v79 + 3) = &off_24C9FC600;
    *(_QWORD *)(v79 + 165) = 0;
    *(_OWORD *)(v79 + 136) = 0u;
    *(_OWORD *)(v79 + 152) = 0u;
    v799 = v79 + 24;
    v800 = (std::__shared_weak_count *)v79;
    v80 = *((_OWORD *)v78 + 1);
    *((_QWORD *)v79 + 6) = v78[4];
    *((_OWORD *)v79 + 2) = v80;
    if (!*((_QWORD *)&v813 + 1))
      goto LABEL_150;
    v81 = *((unsigned int *)v78 + 42);
    v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v813 + 8));
    v82.i16[0] = vaddlv_u8(v82);
    if (v82.u32[0] > 1uLL)
    {
      v83 = *((unsigned int *)v78 + 42);
      if (*((_QWORD *)&v813 + 1) <= v81)
        v83 = v81 % *((_QWORD *)&v813 + 1);
    }
    else
    {
      v83 = (DWORD2(v813) - 1) & v81;
    }
    v84 = *(uint64_t ***)(v813 + 8 * v83);
    if (!v84 || (v85 = *v84) == 0)
    {
LABEL_150:
      sub_20FCD8180(&v801);
      if (**(int **)(v801 + 56) > 4)
        goto LABEL_298;
      v88 = *(unsigned __int8 *)(v801 + 72);
      v89 = sub_20E8C31DC(v801, "OSLogSurrogateAppender", 1, 0);
      v90 = v89;
      if (!v88 && v89 == 0)
        goto LABEL_298;
      sub_20E863438((uint64_t)&__dst);
      sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, anchor frame ID not found", 53);
      if ((BYTE8(v823) & 0x10) != 0)
      {
        v94 = v823;
        v95 = (const void **)&v820;
        if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
        {
          *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
          v94 = *((_QWORD *)&v820 + 1);
          v95 = (const void **)&v820;
        }
      }
      else
      {
        if ((BYTE8(v823) & 8) == 0)
        {
          v92 = 0;
          HIBYTE(v798) = 0;
          v93 = v797;
          goto LABEL_180;
        }
        v94 = *((_QWORD *)&v819 + 1);
        v95 = (const void **)&v818 + 1;
      }
      v109 = *v95;
      v92 = v94 - (_QWORD)*v95;
      if (v92 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v92 >= 0x17)
      {
        v110 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v92 | 7) != 0x17)
          v110 = v92 | 7;
        v111 = v110 + 1;
        v93 = operator new(v110 + 1);
        v797[1] = (void *)v92;
        v798 = v111 | 0x8000000000000000;
        v797[0] = v93;
      }
      else
      {
        HIBYTE(v798) = v94 - *(_BYTE *)v95;
        v93 = v797;
        if (!v92)
        {
LABEL_180:
          *((_BYTE *)v93 + v92) = 0;
          *(_QWORD *)&v805 = &v801;
          *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v807 = 4;
          v808 = "unknown file";
          v809 = 1050;
          v810 = "unknown function";
          v811 = 0;
          v812 = 0;
          v112 = v797;
          if (v798 < 0)
            v112 = (void **)v797[0];
          __sb = (const char *)v112;
          v113 = *(_QWORD *)v805;
          v114 = (const char *)(*(_QWORD *)v805 + 16);
          v776 = v114;
          if (*(char *)(*(_QWORD *)v805 + 39) < 0)
          {
            v114 = *(const char **)(v113 + 16);
            v115 = *(_QWORD *)(v113 + 24);
            v116 = v78;
            v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v118 & 1) != 0)
              goto LABEL_186;
          }
          else
          {
            v115 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
            v116 = v78;
            v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v117 & 1) != 0)
              goto LABEL_186;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v839);
            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
            if ((_BYTE)v841 && SHIBYTE(v840) < 0)
              operator delete((void *)v839);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_186:
          if (byte_254A4A50F >= 0)
            v119 = (const char *)&xmmword_254A4A4F8;
          else
            v119 = (const char *)xmmword_254A4A4F8;
          if (byte_254A4A50F >= 0)
            v120 = byte_254A4A50F;
          else
            v120 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          *(_QWORD *)object = os_log_create(v119, v114);
          if (v120 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v120 >= 0x17)
          {
            v122 = v88;
            v123 = v113;
            v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v120 | 7) != 0x17)
              v124 = v120 | 7;
            v125 = v124 + 1;
            v121 = operator new(v124 + 1);
            *(_QWORD *)&object[24] = v125 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v121;
            *(_QWORD *)&object[16] = v120;
            v113 = v123;
            v88 = v122;
          }
          else
          {
            object[31] = v120;
            v121 = &object[8];
            if (!v120)
            {
LABEL_200:
              v121[v120] = 0;
              object[32] = 1;
              if (v115 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v78 = v116;
              if (v115 >= 0x17)
              {
                v128 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v115 | 7) != 0x17)
                  v128 = v115 | 7;
                v129 = v128 + 1;
                v126 = operator new(v128 + 1);
                *((_QWORD *)&v833 + 1) = v129 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v126;
                *(_QWORD *)&v833 = v115;
              }
              else
              {
                HIBYTE(v833) = v115;
                v126 = &object[40];
                if (!v115)
                {
                  object[40] = 0;
                  LOBYTE(v834) = 1;
                  v127 = *(NSObject **)object;
                  if ((SHIBYTE(v833) & 0x80000000) == 0)
                    goto LABEL_204;
                  goto LABEL_210;
                }
              }
              memmove(v126, v114, v115);
              v126[v115] = 0;
              LOBYTE(v834) = 1;
              v127 = *(NSObject **)object;
              if ((SHIBYTE(v833) & 0x80000000) == 0)
              {
LABEL_204:
                if (!object[32])
                  goto LABEL_213;
                goto LABEL_211;
              }
LABEL_210:
              operator delete(*(void **)&object[40]);
              if (!object[32])
                goto LABEL_213;
LABEL_211:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
LABEL_213:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v90 || !*(_QWORD *)(v90 + 24))
              {
                os_log_type_enabled(v127, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = __sb;
                v136 = (void *)_os_log_send_and_compose_impl();
                v77 = v773;
                if (!v136)
                  goto LABEL_285;
                free(v136);
                if (!v88)
                  goto LABEL_289;
                goto LABEL_286;
              }
              v130 = _os_log_pack_size();
              v131 = (std::__shared_weak_count_vtbl *)operator new(v130, (std::align_val_t)8uLL);
              v132 = (std::__shared_weak_count *)operator new();
              v77 = v773;
              v132->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v132->__shared_owners_ = 0;
              v132->__shared_weak_owners_ = 0;
              v132[1].__vftable = v131;
              *(_QWORD *)&v839 = v131;
              *((_QWORD *)&v839 + 1) = v131;
              v840 = v132;
              v841 = 0;
              v842 = 0;
              v133 = strlen(__sb);
              if (v133 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v134 = v133;
              if (v133 >= 0x17)
              {
                v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v133 | 7) != 0x17)
                  v137 = v133 | 7;
                v138 = v137 + 1;
                v135 = operator new(v137 + 1);
                *(_QWORD *)&v843[8] = v134;
                *(_QWORD *)&v843[16] = v138 | 0x8000000000000000;
                *(_QWORD *)v843 = v135;
              }
              else
              {
                v843[23] = v133;
                v135 = v843;
                if (!v133)
                {
LABEL_228:
                  v135[v134] = 0;
                  v139 = *(_QWORD *)v843;
                  v803[0] = *(void **)&v843[8];
                  *(void **)((char *)v803 + 7) = *(void **)&v843[15];
                  v140 = v843[23];
                  v141 = (char *)operator new(0x38uLL);
                  *((_QWORD *)v141 + 1) = 0;
                  *((_QWORD *)v141 + 2) = 0;
                  *((_QWORD *)v141 + 3) = off_24C9ABC20;
                  *(_QWORD *)v141 = &off_24C9ABBD0;
                  v142 = v803[0];
                  *((_QWORD *)v141 + 4) = v139;
                  *((_QWORD *)v141 + 5) = v142;
                  *(void **)(v141 + 47) = *(void **)((char *)v803 + 7);
                  v141[55] = v140;
                  v803[0] = 0;
                  *(void **)((char *)v803 + 7) = 0;
                  v143 = v842;
                  v841 = v141 + 24;
                  v842 = (std::__shared_weak_count *)v141;
                  if (v143)
                  {
                    p_shared_owners = (unint64_t *)&v143->__shared_owners_;
                    do
                      v145 = __ldaxr(p_shared_owners);
                    while (__stlxr(v145 - 1, p_shared_owners));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                  }
                  *(_OWORD *)object = v839;
                  v146 = v841;
                  *(_QWORD *)&object[16] = v840;
                  if (v840)
                  {
                    v147 = (unint64_t *)&v840->__shared_owners_;
                    do
                      v148 = __ldxr(v147);
                    while (__stxr(v148 + 1, v147));
                  }
                  v149 = v842;
                  *(_QWORD *)&object[24] = v146;
                  *(_QWORD *)&object[32] = v842;
                  if (v842)
                  {
                    v150 = (unint64_t *)&v842->__shared_owners_;
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                    *(_QWORD *)&object[40] = v146;
                    do
                      v152 = __ldaxr(v150);
                    while (__stlxr(v152 - 1, v150));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                      std::__shared_weak_count::__release_weak(v149);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&object[40] = v146;
                  }
                  v153 = v840;
                  if (v840)
                  {
                    v154 = (unint64_t *)&v840->__shared_owners_;
                    do
                      v155 = __ldaxr(v154);
                    while (__stlxr(v155 - 1, v154));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v156 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                    v157 = *(_QWORD *)&object[40] + 8;
                  else
                    v157 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                  v158 = _os_log_pack_fill();
                  *(_DWORD *)v158 = 136315138;
                  *(_QWORD *)(v158 + 4) = v157;
                  v159 = operator new();
                  v160 = *(unsigned __int8 *)(v113 + 39);
                  v161 = v776;
                  if ((v160 & 0x80u) != 0)
                  {
                    v161 = *(const char **)(v113 + 16);
                    v160 = *(_QWORD *)(v113 + 24);
                  }
                  *(_QWORD *)v159 = v156;
                  *(_OWORD *)(v159 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v159 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *(_QWORD *)(v159 + 40) = v161;
                  *(_QWORD *)(v159 + 48) = v160;
                  *(_BYTE *)(v159 + 56) = 16;
                  *(_QWORD *)v843 = 0;
                  *(_QWORD *)&v839 = v159;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v90 + 24) + 40))(*(_QWORD *)(v90 + 24), &v839);
                  v162 = v839;
                  *(_QWORD *)&v839 = 0;
                  if (v162)
                  {
                    v163 = *(std::__shared_weak_count **)(v162 + 32);
                    if (v163)
                    {
                      v164 = (unint64_t *)&v163->__shared_owners_;
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                    v166 = *(std::__shared_weak_count **)(v162 + 16);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldaxr(v167);
                      while (__stlxr(v168 - 1, v167));
                      if (!v168)
                      {
                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                        std::__shared_weak_count::__release_weak(v166);
                      }
                    }
                    MEMORY[0x212BC6398](v162, 0x10F0C40B62ED6C6);
                    v169 = *(_QWORD *)v843;
                    *(_QWORD *)v843 = 0;
                    if (v169)
                    {
                      v170 = *(std::__shared_weak_count **)(v169 + 32);
                      if (v170)
                      {
                        v171 = (unint64_t *)&v170->__shared_owners_;
                        do
                          v172 = __ldaxr(v171);
                        while (__stlxr(v172 - 1, v171));
                        if (!v172)
                        {
                          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                          std::__shared_weak_count::__release_weak(v170);
                        }
                      }
                      v173 = *(std::__shared_weak_count **)(v169 + 16);
                      if (v173)
                      {
                        v174 = (unint64_t *)&v173->__shared_owners_;
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      MEMORY[0x212BC6398](v169, 0x10F0C40B62ED6C6);
                    }
                  }
                  v176 = *(std::__shared_weak_count **)&object[32];
                  if (!*(_QWORD *)&object[32])
                    goto LABEL_281;
                  v177 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                    v179 = *(std::__shared_weak_count **)&object[16];
                    if (!*(_QWORD *)&object[16])
                      goto LABEL_285;
                  }
                  else
                  {
LABEL_281:
                    v179 = *(std::__shared_weak_count **)&object[16];
                    if (!*(_QWORD *)&object[16])
                      goto LABEL_285;
                  }
                  v180 = (unint64_t *)&v179->__shared_owners_;
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 - 1, v180));
                  if (v181)
                  {
LABEL_285:
                    if (!v88)
                      goto LABEL_289;
                    goto LABEL_286;
                  }
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                  if (!v88)
                    goto LABEL_289;
LABEL_286:
                  v182 = v797;
                  if (v798 < 0)
                    v182 = (void **)v797[0];
                  sub_20E8C003C((uint64_t)&v805, "%s", (const char *)v182);
                  sub_20E863570((uint64_t)&v805);
LABEL_289:
                  sub_20E863570((uint64_t)&v805);
                  v183 = v812;
                  if (!v812)
                    goto LABEL_293;
                  v184 = (unint64_t *)&v812->__shared_owners_;
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                    if ((SHIBYTE(v798) & 0x80000000) == 0)
                    {
LABEL_295:
                      *(_QWORD *)&__dst = v772;
                      *(_QWORD *)((char *)&__dst + *(_QWORD *)(v772 - 24)) = v771;
                      *(_QWORD *)&v817 = v770;
                      *((_QWORD *)&v817 + 1) = v769;
                      if ((SHIBYTE(v822) & 0x80000000) == 0)
                      {
LABEL_297:
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v824);
                        goto LABEL_298;
                      }
LABEL_296:
                      operator delete(*((void **)&v821 + 1));
                      goto LABEL_297;
                    }
                  }
                  else
                  {
LABEL_293:
                    if ((SHIBYTE(v798) & 0x80000000) == 0)
                      goto LABEL_295;
                  }
                  operator delete(v797[0]);
                  goto LABEL_295;
                }
              }
              memcpy(v135, __sb, v134);
              goto LABEL_228;
            }
          }
          memmove(v121, v119, v120);
          goto LABEL_200;
        }
      }
      memmove(v93, v109, v92);
      goto LABEL_180;
    }
    if (v82.u32[0] < 2uLL)
    {
      while (1)
      {
        v87 = v85[1];
        if (v87 == v81)
        {
          if (*((_DWORD *)v85 + 4) == (_DWORD)v81)
            goto LABEL_160;
        }
        else if ((v87 & (*((_QWORD *)&v813 + 1) - 1)) != v83)
        {
          goto LABEL_150;
        }
        v85 = (uint64_t *)*v85;
        if (!v85)
          goto LABEL_150;
      }
    }
    while (1)
    {
      v86 = v85[1];
      if (v86 == v81)
        break;
      if (v86 >= *((_QWORD *)&v813 + 1))
        v86 %= *((_QWORD *)&v813 + 1);
      if (v86 != v83)
        goto LABEL_150;
LABEL_140:
      v85 = (uint64_t *)*v85;
      if (!v85)
        goto LABEL_150;
    }
    if (*((_DWORD *)v85 + 4) != (_DWORD)v81)
      goto LABEL_140;
LABEL_160:
    *(_OWORD *)v797 = *(_OWORD *)(v85 + 3);
    v798 = v85[5];
    v96 = sub_20E9DF85C((_QWORD *)(*a2 + 1784), (uint64_t *)v797);
    if (!v96)
    {
      sub_20FCD8180(&v796);
      if (**(int **)(v796 + 56) > 4)
        goto LABEL_298;
      v189 = *(unsigned __int8 *)(v796 + 72);
      v190 = sub_20E8C31DC(v796, "OSLogSurrogateAppender", 1, 0);
      v191 = v190;
      if (!v189 && !v190)
        goto LABEL_298;
      sub_20E863438((uint64_t)&__dst);
      sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, failed to find pose_ref!", 52);
      if ((BYTE8(v823) & 0x10) != 0)
      {
        v212 = v823;
        v213 = (const void **)&v820;
        if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
        {
          *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
          v212 = *((_QWORD *)&v820 + 1);
          v213 = (const void **)&v820;
        }
      }
      else
      {
        if ((BYTE8(v823) & 8) == 0)
        {
          v192 = 0;
          HIBYTE(v804) = 0;
          v193 = v803;
          goto LABEL_366;
        }
        v212 = *((_QWORD *)&v819 + 1);
        v213 = (const void **)&v818 + 1;
      }
      v229 = *v213;
      v192 = v212 - (_QWORD)*v213;
      if (v192 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v192 >= 0x17)
      {
        v230 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v192 | 7) != 0x17)
          v230 = v192 | 7;
        v231 = v230 + 1;
        v193 = operator new(v230 + 1);
        v803[1] = (void *)v192;
        v804 = v231 | 0x8000000000000000;
        v803[0] = v193;
      }
      else
      {
        HIBYTE(v804) = v212 - *(_BYTE *)v213;
        v193 = v803;
        if (!v192)
        {
LABEL_366:
          *((_BYTE *)v193 + v192) = 0;
          *(_QWORD *)&v805 = &v796;
          *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v807 = 4;
          v808 = "unknown file";
          v809 = 1059;
          v810 = "unknown function";
          v811 = 0;
          v812 = 0;
          if (v804 >= 0)
            v232 = v803;
          else
            v232 = (void **)v803[0];
          v233 = *(_QWORD *)v805;
          v234 = (const char *)(*(_QWORD *)v805 + 16);
          __sc = v234;
          if (*(char *)(*(_QWORD *)v805 + 39) < 0)
          {
            v234 = *(const char **)(v233 + 16);
            v235 = *(_QWORD *)(v233 + 24);
          }
          else
          {
            v235 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
          }
          v765 = v78;
          v236 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v839);
            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
            if ((_BYTE)v841 && SHIBYTE(v840) < 0)
              operator delete((void *)v839);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A50F >= 0)
            v237 = (const char *)&xmmword_254A4A4F8;
          else
            v237 = (const char *)xmmword_254A4A4F8;
          if (byte_254A4A50F >= 0)
            v238 = byte_254A4A50F;
          else
            v238 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          *(_QWORD *)object = os_log_create(v237, v234);
          if (v238 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v238 >= 0x17)
          {
            v777 = v235;
            v240 = v234;
            v241 = v191;
            v242 = v232;
            v243 = v189;
            v244 = v233;
            v245 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v238 | 7) != 0x17)
              v245 = v238 | 7;
            v246 = v245 + 1;
            v239 = operator new(v245 + 1);
            *(_QWORD *)&object[24] = v246 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v239;
            *(_QWORD *)&object[16] = v238;
            v233 = v244;
            v189 = v243;
            v232 = v242;
            v191 = v241;
            v234 = v240;
            v235 = v777;
          }
          else
          {
            object[31] = v238;
            v239 = &object[8];
            if (!v238)
            {
LABEL_387:
              v239[v238] = 0;
              object[32] = 1;
              if (v235 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v78 = v765;
              if (v235 >= 0x17)
              {
                v248 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v235 | 7) != 0x17)
                  v248 = v235 | 7;
                v249 = v248 + 1;
                v247 = operator new(v248 + 1);
                *((_QWORD *)&v833 + 1) = v249 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v247;
                *(_QWORD *)&v833 = v235;
              }
              else
              {
                HIBYTE(v833) = v235;
                v247 = &object[40];
                if (!v235)
                {
LABEL_395:
                  v247[v235] = 0;
                  LOBYTE(v834) = 1;
                  v250 = *(NSObject **)object;
                  if (SHIBYTE(v833) < 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (!v191 || !*(_QWORD *)(v191 + 24))
                  {
                    os_log_type_enabled(v250, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)object = 136315138;
                    *(_QWORD *)&object[4] = v232;
                    v257 = (void *)_os_log_send_and_compose_impl();
                    v77 = v773;
                    if (v257)
                      free(v257);
LABEL_547:
                    if (v189)
                    {
                      v346 = v803;
                      if (v804 < 0)
                        v346 = (void **)v803[0];
                      sub_20E8C003C((uint64_t)&v805, "%s", (const char *)v346);
                      sub_20E863570((uint64_t)&v805);
                    }
                    sub_20E863570((uint64_t)&v805);
                    v347 = v812;
                    if (v812)
                    {
                      v348 = (unint64_t *)&v812->__shared_owners_;
                      do
                        v349 = __ldaxr(v348);
                      while (__stlxr(v349 - 1, v348));
                      goto LABEL_747;
                    }
                    goto LABEL_749;
                  }
                  v251 = _os_log_pack_size();
                  v252 = (std::__shared_weak_count_vtbl *)operator new(v251, (std::align_val_t)8uLL);
                  v253 = (std::__shared_weak_count *)operator new();
                  v253->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v253->__shared_owners_ = 0;
                  v253->__shared_weak_owners_ = 0;
                  v253[1].__vftable = v252;
                  *(_QWORD *)&v839 = v252;
                  *((_QWORD *)&v839 + 1) = v252;
                  v840 = v253;
                  v841 = 0;
                  v842 = 0;
                  v254 = strlen((const char *)v232);
                  if (v254 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v255 = v254;
                  if (v254 >= 0x17)
                  {
                    v283 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v254 | 7) != 0x17)
                      v283 = v254 | 7;
                    v284 = v283 + 1;
                    v256 = operator new(v283 + 1);
                    *(_QWORD *)&v843[8] = v255;
                    *(_QWORD *)&v843[16] = v284 | 0x8000000000000000;
                    *(_QWORD *)v843 = v256;
                  }
                  else
                  {
                    v843[23] = v254;
                    v256 = v843;
                    if (!v254)
                    {
LABEL_467:
                      v256[v255] = 0;
                      v285 = *(_QWORD *)v843;
                      *(_QWORD *)&v801 = *(_QWORD *)&v843[8];
                      *(_QWORD *)((char *)&v801 + 7) = *(_QWORD *)&v843[15];
                      v286 = v843[23];
                      v287 = operator new(0x38uLL);
                      v287[1] = 0;
                      v287[2] = 0;
                      v287[3] = off_24C9ABC20;
                      *v287 = &off_24C9ABBD0;
                      v288 = v801;
                      v287[4] = v285;
                      v287[5] = v288;
                      *(_QWORD *)((char *)v287 + 47) = *(_QWORD *)((char *)&v801 + 7);
                      *((_BYTE *)v287 + 55) = v286;
                      *(_QWORD *)&v801 = 0;
                      *(_QWORD *)((char *)&v801 + 7) = 0;
                      v289 = v842;
                      v841 = (char *)(v287 + 3);
                      v842 = (std::__shared_weak_count *)v287;
                      if (v289)
                      {
                        v290 = (unint64_t *)&v289->__shared_owners_;
                        do
                          v291 = __ldaxr(v290);
                        while (__stlxr(v291 - 1, v290));
                        if (!v291)
                        {
                          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                          std::__shared_weak_count::__release_weak(v289);
                        }
                      }
                      *(_OWORD *)object = v839;
                      v292 = v841;
                      *(_QWORD *)&object[16] = v840;
                      if (v840)
                      {
                        v293 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v294 = __ldxr(v293);
                        while (__stxr(v294 + 1, v293));
                      }
                      v295 = v842;
                      *(_QWORD *)&object[24] = v292;
                      *(_QWORD *)&object[32] = v842;
                      if (v842)
                      {
                        v296 = (unint64_t *)&v842->__shared_owners_;
                        do
                          v297 = __ldxr(v296);
                        while (__stxr(v297 + 1, v296));
                        *(_QWORD *)&object[40] = v292;
                        do
                          v298 = __ldaxr(v296);
                        while (__stlxr(v298 - 1, v296));
                        if (!v298)
                        {
                          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                          std::__shared_weak_count::__release_weak(v295);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&object[40] = v292;
                      }
                      v317 = v840;
                      if (v840)
                      {
                        v318 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v319 = __ldaxr(v318);
                        while (__stlxr(v319 - 1, v318));
                        if (!v319)
                        {
                          ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                          std::__shared_weak_count::__release_weak(v317);
                        }
                      }
                      v320 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                        v321 = *(_QWORD *)&object[40] + 8;
                      else
                        v321 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                      v322 = _os_log_pack_fill();
                      *(_DWORD *)v322 = 136315138;
                      *(_QWORD *)(v322 + 4) = v321;
                      v323 = operator new();
                      v324 = *(unsigned __int8 *)(v233 + 39);
                      v325 = __sc;
                      if ((v324 & 0x80u) != 0)
                      {
                        v325 = *(const char **)(v233 + 16);
                        v324 = *(_QWORD *)(v233 + 24);
                      }
                      *(_QWORD *)v323 = v320;
                      *(_OWORD *)(v323 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v323 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *(_QWORD *)(v323 + 40) = v325;
                      *(_QWORD *)(v323 + 48) = v324;
                      *(_BYTE *)(v323 + 56) = 16;
                      *(_QWORD *)v843 = 0;
                      *(_QWORD *)&v839 = v323;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v191 + 24) + 40))(*(_QWORD *)(v191 + 24), &v839);
                      v77 = v773;
                      v326 = v839;
                      *(_QWORD *)&v839 = 0;
                      if (v326)
                      {
                        v327 = *(std::__shared_weak_count **)(v326 + 32);
                        if (v327)
                        {
                          v328 = (unint64_t *)&v327->__shared_owners_;
                          do
                            v329 = __ldaxr(v328);
                          while (__stlxr(v329 - 1, v328));
                          if (!v329)
                          {
                            ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                            std::__shared_weak_count::__release_weak(v327);
                          }
                        }
                        v330 = *(std::__shared_weak_count **)(v326 + 16);
                        if (v330)
                        {
                          v331 = (unint64_t *)&v330->__shared_owners_;
                          do
                            v332 = __ldaxr(v331);
                          while (__stlxr(v332 - 1, v331));
                          if (!v332)
                          {
                            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                            std::__shared_weak_count::__release_weak(v330);
                          }
                        }
                        MEMORY[0x212BC6398](v326, 0x10F0C40B62ED6C6);
                        v333 = *(_QWORD *)v843;
                        *(_QWORD *)v843 = 0;
                        if (v333)
                        {
                          v334 = *(std::__shared_weak_count **)(v333 + 32);
                          if (v334)
                          {
                            v335 = (unint64_t *)&v334->__shared_owners_;
                            do
                              v336 = __ldaxr(v335);
                            while (__stlxr(v336 - 1, v335));
                            if (!v336)
                            {
                              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                              std::__shared_weak_count::__release_weak(v334);
                            }
                          }
                          v337 = *(std::__shared_weak_count **)(v333 + 16);
                          if (v337)
                          {
                            v338 = (unint64_t *)&v337->__shared_owners_;
                            do
                              v339 = __ldaxr(v338);
                            while (__stlxr(v339 - 1, v338));
                            if (!v339)
                            {
                              ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                              std::__shared_weak_count::__release_weak(v337);
                            }
                          }
                          MEMORY[0x212BC6398](v333, 0x10F0C40B62ED6C6);
                        }
                      }
                      v340 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v341 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v342 = __ldaxr(v341);
                        while (__stlxr(v342 - 1, v341));
                        if (!v342)
                        {
                          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                          std::__shared_weak_count::__release_weak(v340);
                        }
                      }
                      v343 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v344 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v345 = __ldaxr(v344);
                        while (__stlxr(v345 - 1, v344));
                        if (!v345)
                        {
                          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                          std::__shared_weak_count::__release_weak(v343);
                        }
                      }
                      goto LABEL_547;
                    }
                  }
                  memcpy(v256, v232, v255);
                  goto LABEL_467;
                }
              }
              memmove(v247, v234, v235);
              goto LABEL_395;
            }
          }
          memmove(v239, v237, v238);
          goto LABEL_387;
        }
      }
      memmove(v193, v229, v192);
      goto LABEL_366;
    }
    _Q3 = *(int8x16_t *)(v78 + 5);
    _D1 = v78[6];
    v775 = _Q3;
    __sa = *((double *)v78 + 7);
    __asm { FMLA            D0, D1, V3.D[1] }
    if (fabs(sqrt(_D0 + __sa * __sa) + -1.0) > 0.000001
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v102 = v775;
    *(_OWORD *)(v79 + 56) = *(_OWORD *)v797;
    *((_DWORD *)v79 + 18) = v798;
    v102.i64[1] = vextq_s8(v102, v102, 8uLL).u64[0];
    *((double *)v79 + 13) = __sa;
    *(int8x16_t *)(v79 + 88) = v102;
    *((_QWORD *)v79 + 14) = 0xFFEFFFFFFFFFFFFFLL;
    *((_QWORD *)v79 + 15) = v96 + 5;
    if (((*(uint64_t (**)(char *))(*((_QWORD *)v79 + 3) + 16))(v79 + 24) & 1) == 0)
    {
      sub_20FCD8180(&v796);
      if (**(int **)(v796 + 56) > 4)
        goto LABEL_298;
      v194 = *(unsigned __int8 *)(v796 + 72);
      v195 = sub_20E8C31DC(v796, "OSLogSurrogateAppender", 1, 0);
      v196 = v195;
      if (!v194 && !v195)
        goto LABEL_298;
      sub_20E863438((uint64_t)&__dst);
      sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, failed to SetAnchor()!", 50);
      if ((BYTE8(v823) & 0x10) != 0)
      {
        v214 = v823;
        v215 = (const void **)&v820;
        if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
        {
          *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
          v214 = *((_QWORD *)&v820 + 1);
          v215 = (const void **)&v820;
        }
      }
      else
      {
        if ((BYTE8(v823) & 8) == 0)
        {
          v197 = 0;
          HIBYTE(v804) = 0;
          v198 = v803;
          goto LABEL_419;
        }
        v214 = *((_QWORD *)&v819 + 1);
        v215 = (const void **)&v818 + 1;
      }
      v258 = *v215;
      v197 = v214 - (_QWORD)*v215;
      if (v197 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v197 >= 0x17)
      {
        v259 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v197 | 7) != 0x17)
          v259 = v197 | 7;
        v260 = v259 + 1;
        v198 = operator new(v259 + 1);
        v803[1] = (void *)v197;
        v804 = v260 | 0x8000000000000000;
        v803[0] = v198;
      }
      else
      {
        HIBYTE(v804) = v214 - *(_BYTE *)v215;
        v198 = v803;
        if (!v197)
        {
LABEL_419:
          *((_BYTE *)v198 + v197) = 0;
          *(_QWORD *)&v805 = &v796;
          *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v807 = 4;
          v808 = "unknown file";
          v809 = 1073;
          v810 = "unknown function";
          v811 = 0;
          v812 = 0;
          if (v804 >= 0)
            v261 = v803;
          else
            v261 = (void **)v803[0];
          v262 = *(_QWORD *)v805;
          v263 = (const char *)(*(_QWORD *)v805 + 16);
          v778 = *(_QWORD *)v805;
          v762 = v263;
          __sd = (const char *)v261;
          if (*(char *)(*(_QWORD *)v805 + 39) < 0)
          {
            v263 = *(const char **)(v262 + 16);
            v264 = *(_QWORD *)(v262 + 24);
          }
          else
          {
            v264 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
          }
          v265 = v78;
          v266 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v266 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v839);
            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
            if ((_BYTE)v841 && SHIBYTE(v840) < 0)
              operator delete((void *)v839);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A50F >= 0)
            v267 = (const char *)&xmmword_254A4A4F8;
          else
            v267 = (const char *)xmmword_254A4A4F8;
          if (byte_254A4A50F >= 0)
            v268 = byte_254A4A50F;
          else
            v268 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          *(_QWORD *)object = os_log_create(v267, v263);
          if (v268 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v268 >= 0x17)
          {
            v270 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v268 | 7) != 0x17)
              v270 = v268 | 7;
            v271 = v270 + 1;
            v269 = operator new(v270 + 1);
            *(_QWORD *)&object[24] = v271 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v269;
            *(_QWORD *)&object[16] = v268;
          }
          else
          {
            object[31] = v268;
            v269 = &object[8];
            if (!v268)
            {
LABEL_440:
              v269[v268] = 0;
              object[32] = 1;
              if (v264 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v78 = v265;
              if (v264 >= 0x17)
              {
                v273 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v264 | 7) != 0x17)
                  v273 = v264 | 7;
                v274 = v273 + 1;
                v272 = operator new(v273 + 1);
                *((_QWORD *)&v833 + 1) = v274 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v272;
                *(_QWORD *)&v833 = v264;
              }
              else
              {
                HIBYTE(v833) = v264;
                v272 = &object[40];
                if (!v264)
                {
LABEL_448:
                  v272[v264] = 0;
                  LOBYTE(v834) = 1;
                  v275 = *(NSObject **)object;
                  if (SHIBYTE(v833) < 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (!v196 || !*(_QWORD *)(v196 + 24))
                  {
                    os_log_type_enabled(v275, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)object = 136315138;
                    *(_QWORD *)&object[4] = __sd;
                    v282 = (void *)_os_log_send_and_compose_impl();
                    v77 = v773;
                    if (v282)
                      free(v282);
LABEL_652:
                    if (v194)
                    {
                      v404 = v803;
                      if (v804 < 0)
                        v404 = (void **)v803[0];
                      sub_20E8C003C((uint64_t)&v805, "%s", (const char *)v404);
                      sub_20E863570((uint64_t)&v805);
                    }
                    sub_20E863570((uint64_t)&v805);
                    v347 = v812;
                    if (v812)
                    {
                      v405 = (unint64_t *)&v812->__shared_owners_;
                      do
                        v349 = __ldaxr(v405);
                      while (__stlxr(v349 - 1, v405));
                      goto LABEL_747;
                    }
LABEL_749:
                    if (SHIBYTE(v804) < 0)
                      operator delete(v803[0]);
                    *(_QWORD *)&__dst = v772;
                    *(_QWORD *)((char *)&__dst + *(_QWORD *)(v772 - 24)) = v771;
                    *(_QWORD *)&v817 = v770;
                    *((_QWORD *)&v817 + 1) = MEMORY[0x24BEDB848] + 16;
                    if ((SHIBYTE(v822) & 0x80000000) == 0)
                      goto LABEL_297;
                    goto LABEL_296;
                  }
                  v276 = _os_log_pack_size();
                  v277 = (std::__shared_weak_count_vtbl *)operator new(v276, (std::align_val_t)8uLL);
                  v278 = (std::__shared_weak_count *)operator new();
                  v278->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v278->__shared_owners_ = 0;
                  v278->__shared_weak_owners_ = 0;
                  v278[1].__vftable = v277;
                  *(_QWORD *)&v839 = v277;
                  *((_QWORD *)&v839 + 1) = v277;
                  v840 = v278;
                  v841 = 0;
                  v842 = 0;
                  v279 = strlen(__sd);
                  if (v279 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v280 = v279;
                  if (v279 >= 0x17)
                  {
                    v299 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v279 | 7) != 0x17)
                      v299 = v279 | 7;
                    v300 = v299 + 1;
                    v281 = operator new(v299 + 1);
                    *(_QWORD *)&v843[8] = v280;
                    *(_QWORD *)&v843[16] = v300 | 0x8000000000000000;
                    *(_QWORD *)v843 = v281;
                  }
                  else
                  {
                    v843[23] = v279;
                    v281 = v843;
                    if (!v279)
                    {
LABEL_486:
                      v281[v280] = 0;
                      v301 = *(_QWORD *)v843;
                      *(_QWORD *)&v801 = *(_QWORD *)&v843[8];
                      *(_QWORD *)((char *)&v801 + 7) = *(_QWORD *)&v843[15];
                      v302 = v843[23];
                      v303 = operator new(0x38uLL);
                      v303[1] = 0;
                      v303[2] = 0;
                      v303[3] = off_24C9ABC20;
                      *v303 = &off_24C9ABBD0;
                      v304 = v801;
                      v303[4] = v301;
                      v303[5] = v304;
                      *(_QWORD *)((char *)v303 + 47) = *(_QWORD *)((char *)&v801 + 7);
                      *((_BYTE *)v303 + 55) = v302;
                      *(_QWORD *)&v801 = 0;
                      *(_QWORD *)((char *)&v801 + 7) = 0;
                      v305 = v842;
                      v841 = (char *)(v303 + 3);
                      v842 = (std::__shared_weak_count *)v303;
                      if (v305)
                      {
                        v306 = (unint64_t *)&v305->__shared_owners_;
                        do
                          v307 = __ldaxr(v306);
                        while (__stlxr(v307 - 1, v306));
                        if (!v307)
                        {
                          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                          std::__shared_weak_count::__release_weak(v305);
                        }
                      }
                      *(_OWORD *)object = v839;
                      v308 = v841;
                      *(_QWORD *)&object[16] = v840;
                      if (v840)
                      {
                        v309 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v310 = __ldxr(v309);
                        while (__stxr(v310 + 1, v309));
                      }
                      v311 = v842;
                      *(_QWORD *)&object[24] = v308;
                      *(_QWORD *)&object[32] = v842;
                      if (v842)
                      {
                        v312 = (unint64_t *)&v842->__shared_owners_;
                        do
                          v313 = __ldxr(v312);
                        while (__stxr(v313 + 1, v312));
                        *(_QWORD *)&object[40] = v308;
                        do
                          v314 = __ldaxr(v312);
                        while (__stlxr(v314 - 1, v312));
                        if (!v314)
                        {
                          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                          std::__shared_weak_count::__release_weak(v311);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&object[40] = v308;
                      }
                      v375 = v840;
                      if (v840)
                      {
                        v376 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v377 = __ldaxr(v376);
                        while (__stlxr(v377 - 1, v376));
                        if (!v377)
                        {
                          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                          std::__shared_weak_count::__release_weak(v375);
                        }
                      }
                      v378 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                        v379 = *(_QWORD *)&object[40] + 8;
                      else
                        v379 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                      v380 = _os_log_pack_fill();
                      *(_DWORD *)v380 = 136315138;
                      *(_QWORD *)(v380 + 4) = v379;
                      v381 = operator new();
                      v382 = *(unsigned __int8 *)(v778 + 39);
                      v383 = v762;
                      if ((v382 & 0x80u) != 0)
                      {
                        v383 = *(const char **)(v778 + 16);
                        v382 = *(_QWORD *)(v778 + 24);
                      }
                      *(_QWORD *)v381 = v378;
                      *(_OWORD *)(v381 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v381 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *(_QWORD *)(v381 + 40) = v383;
                      *(_QWORD *)(v381 + 48) = v382;
                      *(_BYTE *)(v381 + 56) = 16;
                      *(_QWORD *)v843 = 0;
                      *(_QWORD *)&v839 = v381;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v196 + 24) + 40))(*(_QWORD *)(v196 + 24), &v839);
                      v77 = v773;
                      v384 = v839;
                      *(_QWORD *)&v839 = 0;
                      if (v384)
                      {
                        v385 = *(std::__shared_weak_count **)(v384 + 32);
                        if (v385)
                        {
                          v386 = (unint64_t *)&v385->__shared_owners_;
                          do
                            v387 = __ldaxr(v386);
                          while (__stlxr(v387 - 1, v386));
                          if (!v387)
                          {
                            ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                            std::__shared_weak_count::__release_weak(v385);
                          }
                        }
                        v388 = *(std::__shared_weak_count **)(v384 + 16);
                        if (v388)
                        {
                          v389 = (unint64_t *)&v388->__shared_owners_;
                          do
                            v390 = __ldaxr(v389);
                          while (__stlxr(v390 - 1, v389));
                          if (!v390)
                          {
                            ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                            std::__shared_weak_count::__release_weak(v388);
                          }
                        }
                        MEMORY[0x212BC6398](v384, 0x10F0C40B62ED6C6);
                        v391 = *(_QWORD *)v843;
                        *(_QWORD *)v843 = 0;
                        if (v391)
                        {
                          v392 = *(std::__shared_weak_count **)(v391 + 32);
                          if (v392)
                          {
                            v393 = (unint64_t *)&v392->__shared_owners_;
                            do
                              v394 = __ldaxr(v393);
                            while (__stlxr(v394 - 1, v393));
                            if (!v394)
                            {
                              ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                              std::__shared_weak_count::__release_weak(v392);
                            }
                          }
                          v395 = *(std::__shared_weak_count **)(v391 + 16);
                          if (v395)
                          {
                            v396 = (unint64_t *)&v395->__shared_owners_;
                            do
                              v397 = __ldaxr(v396);
                            while (__stlxr(v397 - 1, v396));
                            if (!v397)
                            {
                              ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                              std::__shared_weak_count::__release_weak(v395);
                            }
                          }
                          MEMORY[0x212BC6398](v391, 0x10F0C40B62ED6C6);
                        }
                      }
                      v398 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v399 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v400 = __ldaxr(v399);
                        while (__stlxr(v400 - 1, v399));
                        if (!v400)
                        {
                          ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                          std::__shared_weak_count::__release_weak(v398);
                        }
                      }
                      v401 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v402 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v403 = __ldaxr(v402);
                        while (__stlxr(v403 - 1, v402));
                        if (!v403)
                        {
                          ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                          std::__shared_weak_count::__release_weak(v401);
                        }
                      }
                      goto LABEL_652;
                    }
                  }
                  memcpy(v281, __sd, v280);
                  goto LABEL_486;
                }
              }
              memmove(v272, v263, v264);
              goto LABEL_448;
            }
          }
          memmove(v269, v267, v268);
          goto LABEL_440;
        }
      }
      memmove(v198, v258, v197);
      goto LABEL_419;
    }
    if (!v79[172])
    {
      if (*((_BYTE *)v78 + 136))
      {
        v200 = *((float64x2_t *)v78 + 6);
        v199 = *((float64x2_t *)v78 + 7);
        v103.i64[0] = v78[16];
        v201 = *((float64x2_t *)v78 + 5);
        v202 = vcvt_f32_f64(*((float64x2_t *)v78 + 4));
        v203 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v202, v201);
        *(int8x16_t *)(v79 + 136) = v203;
        *(float *)v103.i32 = *(double *)v103.i64;
        v204 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v200), v199);
        *(int8x16_t *)(v79 + 152) = v204;
        *((_DWORD *)v79 + 42) = v103.i32[0];
        v205 = (int32x4_t)vextq_s8(v203, v204, 0xCuLL);
        v206 = (int32x4_t)vextq_s8(v204, v103, 8uLL);
        v207 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v205, (int8x16_t)v205, 0xCuLL), (int8x16_t)v205, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v206, v206), (int8x16_t)v206, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v205, v205), (int8x16_t)v205, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v206, (int8x16_t)v206, 0xCuLL), (int8x16_t)v206, 8uLL));
        v79[172] = vmla_f32(vmla_lane_f32(vmul_f32(v202, *(float32x2_t *)v207.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v207.i8, 1), v202, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL), vcvt_f32_f64(v201)).f32[0] > 0.0;
      }
      v79[174] = *((_BYTE *)v78 + 172);
      v79[173] = *((_BYTE *)v78 + 173);
      v796 = 0uLL;
      if (*((_QWORD *)&v813 + 1))
      {
        v208 = (unsigned int *)v78[18];
        v209 = *v208;
        v210 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v813 + 8));
        v210.i16[0] = vaddlv_u8(v210);
        if (v210.u32[0] > 1uLL)
        {
          v211 = *v208;
          if (*((_QWORD *)&v813 + 1) <= v209)
            v211 = v209 % *((_QWORD *)&v813 + 1);
        }
        else
        {
          v211 = (DWORD2(v813) - 1) & v209;
        }
        v216 = *(uint64_t ***)(v813 + 8 * v211);
        if (v216)
        {
          v217 = *v216;
          if (v217)
          {
            v218 = v208[1];
            if (v210.u32[0] < 2uLL)
            {
              while (1)
              {
                v220 = v217[1];
                if (v220 == v209)
                {
                  if (*((_DWORD *)v217 + 4) == (_DWORD)v209)
                    goto LABEL_679;
                }
                else if ((v220 & (*((_QWORD *)&v813 + 1) - 1)) != v211)
                {
                  goto LABEL_347;
                }
                v217 = (uint64_t *)*v217;
                if (!v217)
                  goto LABEL_347;
              }
            }
            while (1)
            {
              v219 = v217[1];
              if (v219 == v209)
                break;
              if (v219 >= *((_QWORD *)&v813 + 1))
                v219 %= *((_QWORD *)&v813 + 1);
              if (v219 != v211)
                goto LABEL_347;
LABEL_337:
              v217 = (uint64_t *)*v217;
              if (!v217)
                goto LABEL_347;
            }
            if (*((_DWORD *)v217 + 4) != (_DWORD)v209)
              goto LABEL_337;
LABEL_679:
            *(_OWORD *)v803 = *(_OWORD *)(v217 + 3);
            v804 = v217[5];
            v423 = a2[5];
            v422 = a2[6];
            if (v422 != v423)
            {
              v424 = (v422 - v423) >> 4;
              while (1)
              {
                v425 = v424 >> 1;
                v426 = (uint64_t *)(v423 + 16 * (v424 >> 1));
                v427 = *v426;
                v428 = *(_DWORD *)(*v426 + 16);
                v429 = v428 >= v804;
                if (v428 != (_DWORD)v804)
                  goto LABEL_687;
                if ((void *)*(_QWORD *)v427 >= v803[0])
                  break;
LABEL_681:
                v423 = (uint64_t)(v426 + 2);
                v425 = v424 + ~v425;
LABEL_682:
                v424 = v425;
                if (!v425)
                  goto LABEL_690;
              }
              if (*(void **)v427 != v803[0])
                goto LABEL_682;
              v429 = *(_DWORD *)(v427 + 8) >= LODWORD(v803[1]);
LABEL_687:
              if (v429)
                goto LABEL_682;
              goto LABEL_681;
            }
LABEL_690:
            if (v423 == v422)
            {
              v431 = a2[6];
            }
            else
            {
              v430 = *(_QWORD *)v423;
              v431 = a2[6];
              if (*(_DWORD *)(*(_QWORD *)v423 + 16) == (_DWORD)v804)
              {
                v431 = a2[6];
                if (*(void **)v430 == v803[0])
                {
                  if (*(_DWORD *)(v430 + 8) == LODWORD(v803[1]))
                    v431 = v423;
                  else
                    v431 = a2[6];
                }
              }
            }
            if (v422 != v431)
            {
              v541 = *(_QWORD *)(*(_QWORD *)v431 + 72);
              if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)v431 + 80) - v541) >> 3) > v218)
              {
                v542 = a2[1];
                v543 = *v78;
                v544 = *((unsigned int *)v78 + 2);
                *(_QWORD *)&__dst = &off_24C9FC700;
                *((_QWORD *)&__dst + 1) = v543;
                *(_QWORD *)&v817 = v544;
                *((_QWORD *)&v817 + 1) = v541 + 40 * v218;
                *(_QWORD *)&v818 = v79 + 24;
                v545 = sub_20F28AA04((_QWORD *)(v542 + 24), (uint64_t *)v803);
                sub_20F289D80((uint64_t **)v542, (int8x8_t *)v545, (uint64_t)&__dst, (uint64_t **)object);
                v796 = *(_OWORD *)object;
                __sg = *(_QWORD *)object;
                if (!*(_QWORD *)object)
                {
                  v760 = __cxa_allocate_exception(0x580uLL);
                  v761 = (_QWORD *)sub_20EA59064((uint64_t)v760, "Failure, addCorrespondenceImageScene failed!", "Unknown");
                  *v761 = &off_24CA05150;
                  __cxa_throw(v761, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
                }
                if ((_DWORD)v804 == (_DWORD)v798 && v803[0] == v797[0] && LODWORD(v803[1]) == LODWORD(v797[1]))
                {
                  v546 = *(_QWORD *)object + 40;
                  if (!*(_BYTE *)(*(_QWORD *)object + 192))
                    v546 = 0;
                  *(double *)(v546 + 88) = *(float *)(v541 + 40 * v218 + 12);
                }
                v547 = v78[18];
                v77 = v773;
                v548 = __sg;
                if ((unint64_t)(v78[19] - v547) >= 9)
                {
                  v781 = (char **)(__sg + 200);
                  v766 = v78;
                  v549 = 1;
                  do
                  {
                    if (!*((_QWORD *)&v813 + 1))
                      goto LABEL_1283;
                    v550 = *(unsigned int *)(v547 + 8 * v549);
                    v551 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v813 + 8));
                    v551.i16[0] = vaddlv_u8(v551);
                    if (v551.u32[0] > 1uLL)
                    {
                      v552 = *(unsigned int *)(v547 + 8 * v549);
                      if (*((_QWORD *)&v813 + 1) <= v550)
                        v552 = v550 % *((_QWORD *)&v813 + 1);
                    }
                    else
                    {
                      v552 = (DWORD2(v813) - 1) & v550;
                    }
                    v553 = *(uint64_t ***)(v813 + 8 * v552);
                    if (!v553 || (v554 = *v553) == 0)
                    {
LABEL_1283:
                      v751 = __cxa_allocate_exception(0x580uLL);
                      v752 = (_QWORD *)sub_20EA59064((uint64_t)v751, "Failure, Incompatible Track observation!", "Unknown");
                      *v752 = &off_24CA05150;
                      __cxa_throw(v752, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
                    }
                    if (v551.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v556 = v554[1];
                        if (v556 == v550)
                        {
                          if (*((_DWORD *)v554 + 4) == (_DWORD)v550)
                            goto LABEL_922;
                        }
                        else if ((v556 & (*((_QWORD *)&v813 + 1) - 1)) != v552)
                        {
                          goto LABEL_1283;
                        }
                        v554 = (uint64_t *)*v554;
                        if (!v554)
                          goto LABEL_1283;
                      }
                    }
                    while (1)
                    {
                      v555 = v554[1];
                      if (v555 == v550)
                        break;
                      if (v555 >= *((_QWORD *)&v813 + 1))
                        v555 %= *((_QWORD *)&v813 + 1);
                      if (v555 != v552)
                        goto LABEL_1283;
LABEL_912:
                      v554 = (uint64_t *)*v554;
                      if (!v554)
                        goto LABEL_1283;
                    }
                    if (*((_DWORD *)v554 + 4) != (_DWORD)v550)
                      goto LABEL_912;
LABEL_922:
                    v557 = (void *)v554[3];
                    v558 = *((_DWORD *)v554 + 8);
                    v559 = *((_DWORD *)v554 + 10);
                    v561 = a2[5];
                    v560 = a2[6];
                    if (v560 != v561)
                    {
                      v562 = (v560 - v561) >> 4;
                      while (1)
                      {
                        v563 = v562 >> 1;
                        v564 = (uint64_t *)(v561 + 16 * (v562 >> 1));
                        v565 = *v564;
                        v566 = *(_DWORD *)(*v564 + 16);
                        v567 = v566 >= v559;
                        if (v566 != v559)
                          goto LABEL_930;
                        if (*(_QWORD *)v565 >= (unint64_t)v557)
                          break;
LABEL_924:
                        v561 = (uint64_t)(v564 + 2);
                        v563 = v562 + ~v563;
LABEL_925:
                        v562 = v563;
                        if (!v563)
                          goto LABEL_933;
                      }
                      if (*(void **)v565 != v557)
                        goto LABEL_925;
                      v567 = *(_DWORD *)(v565 + 8) >= v558;
LABEL_930:
                      if (v567)
                        goto LABEL_925;
                      goto LABEL_924;
                    }
LABEL_933:
                    if (v561 == v560)
                    {
                      v569 = a2[6];
                    }
                    else
                    {
                      v568 = *(_QWORD *)v561;
                      v569 = a2[6];
                      if (*(_DWORD *)(*(_QWORD *)v561 + 16) == v559)
                      {
                        v569 = a2[6];
                        if (*(void **)v568 == v557)
                        {
                          if (*(_DWORD *)(v568 + 8) == v558)
                            v569 = v561;
                          else
                            v569 = a2[6];
                        }
                      }
                    }
                    if (v560 == v569)
                    {
                      v753 = __cxa_allocate_exception(0x580uLL);
                      v754 = (_QWORD *)sub_20EA59064((uint64_t)v753, "Failure, Cannot find the frame!", "Unknown");
                      *v754 = &off_24CA05150;
                      __cxa_throw(v754, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
                    }
                    v570 = *(__int128 **)v569;
                    v571 = *(unsigned int *)(v547 + 8 * v549 + 4);
                    v572 = *(_QWORD *)(*(_QWORD *)v569 + 72);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)v569 + 80) - v572) >> 3) <= v571)
                    {
                      v755 = __cxa_allocate_exception(0x580uLL);
                      v756 = (_QWORD *)sub_20EA59064((uint64_t)v755, "Failure, Imcompatible feature index exceeds frame features!", "Unknown");
                      *v756 = &off_24CA05150;
                      __cxa_throw(v756, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
                    }
                    v573 = *((_QWORD *)v570 + 2);
                    __dst = *v570;
                    *(_QWORD *)&v817 = v573;
                    *((_QWORD *)&v817 + 1) = v572 + 40 * v571;
                    v574 = *(_QWORD *)(v548 + 200);
                    v575 = *(char **)(v548 + 208);
                    if (v575 != (char *)v574)
                    {
                      v576 = (uint64_t)&v575[-v574] >> 5;
                      while (1)
                      {
                        v577 = v576 >> 1;
                        v578 = v574 + 32 * (v576 >> 1);
                        v579 = *(_DWORD *)(v578 + 16);
                        v580 = v579 >= v817;
                        if (v579 != (_DWORD)v817)
                          goto LABEL_950;
                        if (*(_QWORD *)v578 >= (unint64_t)__dst)
                          break;
LABEL_944:
                        v574 = v578 + 32;
                        v577 = v576 + ~v577;
LABEL_945:
                        v576 = v577;
                        if (!v577)
                          goto LABEL_953;
                      }
                      if (*(_QWORD *)v578 != (_QWORD)__dst)
                        goto LABEL_945;
                      v580 = *(_DWORD *)(v578 + 8) >= DWORD2(__dst);
LABEL_950:
                      if (v580)
                        goto LABEL_945;
                      goto LABEL_944;
                    }
LABEL_953:
                    if ((char *)v574 == v575
                      || *(_DWORD *)(v574 + 16) != *((_DWORD *)v570 + 4)
                      || *(_QWORD *)v574 != *(_QWORD *)v570
                      || (v581 = *(char **)(v548 + 208), *(_DWORD *)(v574 + 8) != *((_DWORD *)v570 + 2)))
                    {
                      v581 = sub_20F287F84(v781, (char *)v574, &__dst);
                      v575 = *(char **)(__sg + 208);
                    }
                    if (v575 != v581)
                    {
                      *(_QWORD *)&__dst = v572 + 40 * v571;
                      sub_20EE6BDF0((uint64_t *)__sg, (uint64_t *)v570, (uint64_t)&__dst);
                      v575 = *(char **)(__sg + 208);
                    }
                    if (v575 == v581)
                    {
                      v757 = __cxa_allocate_exception(0x580uLL);
                      v758 = "Failure, Adding node failed!";
                      goto LABEL_1302;
                    }
                    v548 = __sg;
                    if ((unint64_t)(v575 - *v781) <= 0x3F)
                    {
                      v757 = __cxa_allocate_exception(0x580uLL);
                      v758 = "Failure, Track length < 2!";
LABEL_1302:
                      v759 = (_QWORD *)sub_20EA59064((uint64_t)v757, v758, "Unknown");
                      *v759 = &off_24CA05150;
                      __cxa_throw(v759, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
                    }
                    if (v559 == (_DWORD)v798 && v557 == v797[0] && v558 == LODWORD(v797[1]))
                    {
                      v582 = __sg + 40;
                      if (!*(_BYTE *)(__sg + 192))
                        v582 = 0;
                      *(double *)(v582 + 88) = *(float *)(v572 + 40 * v571 + 12);
                    }
                    v549 = (v549 + 1);
                    v78 = v766;
                    v547 = v766[18];
                    v77 = v773;
                  }
                  while (v549 < (v766[19] - v547) >> 3);
                }
LABEL_884:
                v538 = (std::__shared_weak_count *)*((_QWORD *)&v796 + 1);
                if (*((_QWORD *)&v796 + 1))
                {
                  v539 = (unint64_t *)(*((_QWORD *)&v796 + 1) + 8);
                  do
                    v540 = __ldaxr(v539);
                  while (__stlxr(v540 - 1, v539));
                  if (!v540)
                  {
                    ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
                    std::__shared_weak_count::__release_weak(v538);
                  }
                }
                goto LABEL_298;
              }
              sub_20FCD8180(&v795);
              v77 = v773;
              if (**(int **)(v795 + 56) > 4)
                goto LABEL_884;
              v588 = *(unsigned __int8 *)(v795 + 72);
              v589 = sub_20E8C31DC(v795, "OSLogSurrogateAppender", 1, 0);
              v590 = v589;
              if (!v588 && !v589)
                goto LABEL_884;
              sub_20E863438((uint64_t)&__dst);
              sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, Imcompatible feature index exceeds frame features", 77);
              if ((BYTE8(v823) & 0x10) != 0)
              {
                v595 = v823;
                v596 = (const void **)&v820;
                if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
                {
                  *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
                  v595 = *((_QWORD *)&v820 + 1);
                  v596 = (const void **)&v820;
                }
              }
              else
              {
                if ((BYTE8(v823) & 8) == 0)
                {
                  v591 = 0;
                  HIBYTE(v802) = 0;
                  v592 = &v801;
                  goto LABEL_1045;
                }
                v595 = *((_QWORD *)&v819 + 1);
                v596 = (const void **)&v818 + 1;
              }
              v622 = *v596;
              v591 = v595 - (_QWORD)*v596;
              if (v591 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v591 >= 0x17)
              {
                v623 = (v591 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v591 | 7) != 0x17)
                  v623 = v591 | 7;
                v624 = v623 + 1;
                v592 = (__int128 *)operator new(v623 + 1);
                *((_QWORD *)&v801 + 1) = v591;
                v802 = v624 | 0x8000000000000000;
                *(_QWORD *)&v801 = v592;
              }
              else
              {
                HIBYTE(v802) = v595 - *(_BYTE *)v596;
                v592 = &v801;
                if (!v591)
                {
LABEL_1045:
                  *((_BYTE *)v592 + v591) = 0;
                  *(_QWORD *)&v805 = &v795;
                  *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
                  rep = std::chrono::system_clock::now().__d_.__rep_;
                  v807 = 4;
                  v808 = "unknown file";
                  v809 = 1113;
                  v810 = "unknown function";
                  v811 = 0;
                  v812 = 0;
                  v625 = (const char *)&v801;
                  if (v802 < 0)
                    v625 = (const char *)v801;
                  __si = v625;
                  v626 = *(_QWORD *)v805;
                  v627 = (const char *)(*(_QWORD *)v805 + 16);
                  v783 = v627;
                  if (*(char *)(*(_QWORD *)v805 + 39) < 0)
                  {
                    v627 = *(const char **)(v626 + 16);
                    v628 = *(_QWORD *)(v626 + 24);
                  }
                  else
                  {
                    v628 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
                  }
                  v768 = v78;
                  v629 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v629 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&v839);
                    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
                    if ((_BYTE)v841 && SHIBYTE(v840) < 0)
                      operator delete((void *)v839);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  if (byte_254A4A50F >= 0)
                    v630 = (const char *)&xmmword_254A4A4F8;
                  else
                    v630 = (const char *)xmmword_254A4A4F8;
                  if (byte_254A4A50F >= 0)
                    v631 = byte_254A4A50F;
                  else
                    v631 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                  *(_QWORD *)object = os_log_create(v630, v627);
                  if (v631 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v631 >= 0x17)
                  {
                    v633 = (v631 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v631 | 7) != 0x17)
                      v633 = v631 | 7;
                    v634 = v633 + 1;
                    v632 = operator new(v633 + 1);
                    *(_QWORD *)&object[24] = v634 | 0x8000000000000000;
                    *(_QWORD *)&object[8] = v632;
                    *(_QWORD *)&object[16] = v631;
                  }
                  else
                  {
                    object[31] = v631;
                    v632 = &object[8];
                    if (!v631)
                    {
LABEL_1065:
                      v632[v631] = 0;
                      object[32] = 1;
                      if (v628 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v78 = v768;
                      if (v628 >= 0x17)
                      {
                        v636 = (v628 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v628 | 7) != 0x17)
                          v636 = v628 | 7;
                        v637 = v636 + 1;
                        v635 = operator new(v636 + 1);
                        *((_QWORD *)&v833 + 1) = v637 | 0x8000000000000000;
                        *(_QWORD *)&object[40] = v635;
                        *(_QWORD *)&v833 = v628;
                      }
                      else
                      {
                        HIBYTE(v833) = v628;
                        v635 = &object[40];
                        if (!v628)
                        {
LABEL_1073:
                          v635[v628] = 0;
                          LOBYTE(v834) = 1;
                          v638 = *(NSObject **)object;
                          if (SHIBYTE(v833) < 0)
                            operator delete(*(void **)&object[40]);
                          if (object[32] && (object[31] & 0x80000000) != 0)
                            operator delete(*(void **)&object[8]);
                          if (*(_QWORD *)object)
                            os_release(*(void **)object);
                          if (!v590 || !*(_QWORD *)(v590 + 24))
                          {
                            os_log_type_enabled(v638, OS_LOG_TYPE_ERROR);
                            v77 = v773;
                            *(_DWORD *)object = 136315138;
                            *(_QWORD *)&object[4] = __si;
                            v646 = (void *)_os_log_send_and_compose_impl();
                            if (v646)
                              free(v646);
                            goto LABEL_1222;
                          }
                          v639 = _os_log_pack_size();
                          v640 = (std::__shared_weak_count_vtbl *)operator new(v639, (std::align_val_t)8uLL);
                          v641 = (std::__shared_weak_count *)operator new();
                          v641->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v641->__shared_owners_ = 0;
                          v641->__shared_weak_owners_ = 0;
                          v641[1].__vftable = v640;
                          *(_QWORD *)&v839 = v640;
                          *((_QWORD *)&v839 + 1) = v640;
                          v840 = v641;
                          v841 = 0;
                          v842 = 0;
                          v642 = strlen(__si);
                          if (v642 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v643 = v642;
                          v644 = v626;
                          if (v642 >= 0x17)
                          {
                            v663 = (v642 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v642 | 7) != 0x17)
                              v663 = v642 | 7;
                            v664 = v663 + 1;
                            v645 = operator new(v663 + 1);
                            *(_QWORD *)&v843[8] = v643;
                            *(_QWORD *)&v843[16] = v664 | 0x8000000000000000;
                            *(_QWORD *)v843 = v645;
                          }
                          else
                          {
                            v843[23] = v642;
                            v645 = v843;
                            if (!v642)
                            {
LABEL_1111:
                              v645[v643] = 0;
                              v665 = *(_QWORD *)v843;
                              v838[0] = *(_QWORD *)&v843[8];
                              *(uint64_t *)((char *)v838 + 7) = *(_QWORD *)&v843[15];
                              v666 = v843[23];
                              v667 = operator new(0x38uLL);
                              v667[1] = 0;
                              v667[2] = 0;
                              v667[3] = off_24C9ABC20;
                              *v667 = &off_24C9ABBD0;
                              v668 = v838[0];
                              v667[4] = v665;
                              v667[5] = v668;
                              *(_QWORD *)((char *)v667 + 47) = *(uint64_t *)((char *)v838 + 7);
                              *((_BYTE *)v667 + 55) = v666;
                              memset(v838, 0, 15);
                              v669 = v842;
                              v841 = (char *)(v667 + 3);
                              v842 = (std::__shared_weak_count *)v667;
                              if (v669)
                              {
                                v670 = (unint64_t *)&v669->__shared_owners_;
                                do
                                  v671 = __ldaxr(v670);
                                while (__stlxr(v671 - 1, v670));
                                if (!v671)
                                {
                                  ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
                                  std::__shared_weak_count::__release_weak(v669);
                                }
                              }
                              *(_OWORD *)object = v839;
                              v672 = v841;
                              *(_QWORD *)&object[16] = v840;
                              if (v840)
                              {
                                v673 = (unint64_t *)&v840->__shared_owners_;
                                do
                                  v674 = __ldxr(v673);
                                while (__stxr(v674 + 1, v673));
                              }
                              v675 = v842;
                              *(_QWORD *)&object[24] = v672;
                              *(_QWORD *)&object[32] = v842;
                              if (v842)
                              {
                                v676 = (unint64_t *)&v842->__shared_owners_;
                                do
                                  v677 = __ldxr(v676);
                                while (__stxr(v677 + 1, v676));
                                *(_QWORD *)&object[40] = v672;
                                do
                                  v678 = __ldaxr(v676);
                                while (__stlxr(v678 - 1, v676));
                                v78 = v768;
                                if (!v678)
                                {
                                  ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
                                  std::__shared_weak_count::__release_weak(v675);
                                }
                              }
                              else
                              {
                                *(_QWORD *)&object[40] = v672;
                                v78 = v768;
                              }
                              v712 = v840;
                              if (v840)
                              {
                                v713 = (unint64_t *)&v840->__shared_owners_;
                                do
                                  v714 = __ldaxr(v713);
                                while (__stlxr(v714 - 1, v713));
                                if (!v714)
                                {
                                  ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
                                  std::__shared_weak_count::__release_weak(v712);
                                }
                              }
                              v715 = *(_QWORD *)object;
                              if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                                v716 = *(_QWORD *)&object[40] + 8;
                              else
                                v716 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                              v717 = _os_log_pack_fill();
                              *(_DWORD *)v717 = 136315138;
                              *(_QWORD *)(v717 + 4) = v716;
                              v718 = operator new();
                              v719 = *(unsigned __int8 *)(v644 + 39);
                              v720 = v783;
                              if ((v719 & 0x80u) != 0)
                              {
                                v720 = *(const char **)(v644 + 16);
                                v719 = *(_QWORD *)(v644 + 24);
                              }
                              *(_QWORD *)v718 = v715;
                              *(_OWORD *)(v718 + 8) = *(_OWORD *)&object[8];
                              *(_QWORD *)&object[8] = 0;
                              *(_QWORD *)&object[16] = 0;
                              *(_OWORD *)(v718 + 24) = *(_OWORD *)&object[24];
                              *(_QWORD *)&object[24] = 0;
                              *(_QWORD *)&object[32] = 0;
                              *(_QWORD *)(v718 + 40) = v720;
                              *(_QWORD *)(v718 + 48) = v719;
                              *(_BYTE *)(v718 + 56) = 16;
                              *(_QWORD *)v843 = 0;
                              *(_QWORD *)&v839 = v718;
                              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v590 + 24) + 40))(*(_QWORD *)(v590 + 24), &v839);
                              v77 = v773;
                              v721 = v839;
                              *(_QWORD *)&v839 = 0;
                              if (v721)
                              {
                                v722 = *(std::__shared_weak_count **)(v721 + 32);
                                if (v722)
                                {
                                  v723 = (unint64_t *)&v722->__shared_owners_;
                                  do
                                    v724 = __ldaxr(v723);
                                  while (__stlxr(v724 - 1, v723));
                                  if (!v724)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
                                    std::__shared_weak_count::__release_weak(v722);
                                  }
                                }
                                v725 = *(std::__shared_weak_count **)(v721 + 16);
                                if (v725)
                                {
                                  v726 = (unint64_t *)&v725->__shared_owners_;
                                  do
                                    v727 = __ldaxr(v726);
                                  while (__stlxr(v727 - 1, v726));
                                  if (!v727)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
                                    std::__shared_weak_count::__release_weak(v725);
                                  }
                                }
                                MEMORY[0x212BC6398](v721, 0x10F0C40B62ED6C6);
                                v728 = *(_QWORD *)v843;
                                *(_QWORD *)v843 = 0;
                                v78 = v768;
                                v77 = v773;
                                if (v728)
                                {
                                  v729 = *(std::__shared_weak_count **)(v728 + 32);
                                  if (v729)
                                  {
                                    v730 = (unint64_t *)&v729->__shared_owners_;
                                    do
                                      v731 = __ldaxr(v730);
                                    while (__stlxr(v731 - 1, v730));
                                    if (!v731)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
                                      std::__shared_weak_count::__release_weak(v729);
                                    }
                                  }
                                  v732 = *(std::__shared_weak_count **)(v728 + 16);
                                  if (v732)
                                  {
                                    v733 = (unint64_t *)&v732->__shared_owners_;
                                    do
                                      v734 = __ldaxr(v733);
                                    while (__stlxr(v734 - 1, v733));
                                    if (!v734)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
                                      std::__shared_weak_count::__release_weak(v732);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v728, 0x10F0C40B62ED6C6);
                                  v78 = v768;
                                  v77 = v773;
                                }
                              }
                              v735 = *(std::__shared_weak_count **)&object[32];
                              if (*(_QWORD *)&object[32])
                              {
                                v736 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                do
                                  v737 = __ldaxr(v736);
                                while (__stlxr(v737 - 1, v736));
                                if (!v737)
                                {
                                  ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
                                  std::__shared_weak_count::__release_weak(v735);
                                }
                              }
                              v738 = *(std::__shared_weak_count **)&object[16];
                              if (*(_QWORD *)&object[16])
                              {
                                v739 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                do
                                  v740 = __ldaxr(v739);
                                while (__stlxr(v740 - 1, v739));
                                if (!v740)
                                {
                                  ((void (*)(std::__shared_weak_count *))v738->__on_zero_shared)(v738);
                                  std::__shared_weak_count::__release_weak(v738);
                                }
                              }
LABEL_1222:
                              if (v588)
                              {
                                v741 = (const char *)&v801;
                                if (v802 < 0)
                                  v741 = (const char *)v801;
                                sub_20E8C003C((uint64_t)&v805, "%s", v741);
                                sub_20E863570((uint64_t)&v805);
                              }
                              sub_20E863570((uint64_t)&v805);
                              v709 = v812;
                              if (!v812)
                                goto LABEL_1231;
                              v742 = (unint64_t *)&v812->__shared_owners_;
                              do
                                v711 = __ldaxr(v742);
                              while (__stlxr(v711 - 1, v742));
LABEL_1229:
                              if (!v711)
                              {
                                ((void (*)(std::__shared_weak_count *))v709->__on_zero_shared)(v709);
                                std::__shared_weak_count::__release_weak(v709);
                              }
LABEL_1231:
                              if ((SHIBYTE(v802) & 0x80000000) == 0)
                                goto LABEL_881;
                              v537 = (void *)v801;
LABEL_880:
                              operator delete(v537);
LABEL_881:
                              *(_QWORD *)&__dst = v772;
                              *(_QWORD *)((char *)&__dst + *(_QWORD *)(v772 - 24)) = v771;
                              *(_QWORD *)&v817 = v770;
                              *((_QWORD *)&v817 + 1) = MEMORY[0x24BEDB848] + 16;
                              if (SHIBYTE(v822) < 0)
                                operator delete(*((void **)&v821 + 1));
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              MEMORY[0x212BC6290](&v824);
                              goto LABEL_884;
                            }
                          }
                          memcpy(v645, __si, v643);
                          goto LABEL_1111;
                        }
                      }
                      memmove(v635, v627, v628);
                      goto LABEL_1073;
                    }
                  }
                  memmove(v632, v630, v631);
                  goto LABEL_1065;
                }
              }
              memmove(v592, v622, v591);
              goto LABEL_1045;
            }
            sub_20FCD8180(&v795);
            v77 = v773;
            if (**(int **)(v795 + 56) > 4)
              goto LABEL_884;
            v583 = *(unsigned __int8 *)(v795 + 72);
            v584 = sub_20E8C31DC(v795, "OSLogSurrogateAppender", 1, 0);
            v585 = v584;
            if (!v583 && !v584)
              goto LABEL_884;
            sub_20E863438((uint64_t)&__dst);
            sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, Cannot find the frame", 49);
            if ((BYTE8(v823) & 0x10) != 0)
            {
              v593 = v823;
              v594 = (const void **)&v820;
              if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
              {
                *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
                v593 = *((_QWORD *)&v820 + 1);
                v594 = (const void **)&v820;
              }
            }
            else
            {
              if ((BYTE8(v823) & 8) == 0)
              {
                v586 = 0;
                HIBYTE(v802) = 0;
                v587 = &v801;
                goto LABEL_993;
              }
              v593 = *((_QWORD *)&v819 + 1);
              v594 = (const void **)&v818 + 1;
            }
            v597 = *v594;
            v586 = v593 - (_QWORD)*v594;
            if (v586 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v586 >= 0x17)
            {
              v598 = (v586 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v586 | 7) != 0x17)
                v598 = v586 | 7;
              v599 = v598 + 1;
              v587 = (__int128 *)operator new(v598 + 1);
              *((_QWORD *)&v801 + 1) = v586;
              v802 = v599 | 0x8000000000000000;
              *(_QWORD *)&v801 = v587;
            }
            else
            {
              HIBYTE(v802) = v593 - *(_BYTE *)v594;
              v587 = &v801;
              if (!v586)
              {
LABEL_993:
                *((_BYTE *)v587 + v586) = 0;
                *(_QWORD *)&v805 = &v795;
                *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
                rep = std::chrono::system_clock::now().__d_.__rep_;
                v807 = 4;
                v808 = "unknown file";
                v809 = 1106;
                v810 = "unknown function";
                v811 = 0;
                v812 = 0;
                v600 = (const char *)&v801;
                if (v802 < 0)
                  v600 = (const char *)v801;
                __sh = v600;
                v601 = *(_QWORD *)v805;
                v602 = (const char *)(*(_QWORD *)v805 + 16);
                v782 = v602;
                if (*(char *)(*(_QWORD *)v805 + 39) < 0)
                {
                  v602 = *(const char **)(v601 + 16);
                  v603 = *(_QWORD *)(v601 + 24);
                }
                else
                {
                  v603 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
                }
                v767 = v78;
                v604 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v604 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v839);
                  sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
                  if ((_BYTE)v841 && SHIBYTE(v840) < 0)
                    operator delete((void *)v839);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                if (byte_254A4A50F >= 0)
                  v605 = (const char *)&xmmword_254A4A4F8;
                else
                  v605 = (const char *)xmmword_254A4A4F8;
                if (byte_254A4A50F >= 0)
                  v606 = byte_254A4A50F;
                else
                  v606 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                *(_QWORD *)object = os_log_create(v605, v602);
                if (v606 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v606 >= 0x17)
                {
                  v608 = (v606 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v606 | 7) != 0x17)
                    v608 = v606 | 7;
                  v609 = v608 + 1;
                  v607 = operator new(v608 + 1);
                  *(_QWORD *)&object[24] = v609 | 0x8000000000000000;
                  *(_QWORD *)&object[8] = v607;
                  *(_QWORD *)&object[16] = v606;
                }
                else
                {
                  object[31] = v606;
                  v607 = &object[8];
                  if (!v606)
                  {
LABEL_1013:
                    v607[v606] = 0;
                    object[32] = 1;
                    if (v603 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v78 = v767;
                    if (v603 >= 0x17)
                    {
                      v611 = (v603 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v603 | 7) != 0x17)
                        v611 = v603 | 7;
                      v612 = v611 + 1;
                      v610 = operator new(v611 + 1);
                      *((_QWORD *)&v833 + 1) = v612 | 0x8000000000000000;
                      *(_QWORD *)&object[40] = v610;
                      *(_QWORD *)&v833 = v603;
                    }
                    else
                    {
                      HIBYTE(v833) = v603;
                      v610 = &object[40];
                      if (!v603)
                      {
LABEL_1021:
                        v610[v603] = 0;
                        LOBYTE(v834) = 1;
                        v613 = *(NSObject **)object;
                        if (SHIBYTE(v833) < 0)
                          operator delete(*(void **)&object[40]);
                        if (object[32] && (object[31] & 0x80000000) != 0)
                          operator delete(*(void **)&object[8]);
                        if (*(_QWORD *)object)
                          os_release(*(void **)object);
                        if (!v585 || !*(_QWORD *)(v585 + 24))
                        {
                          os_log_type_enabled(v613, OS_LOG_TYPE_ERROR);
                          v77 = v773;
                          *(_DWORD *)object = 136315138;
                          *(_QWORD *)&object[4] = __sh;
                          v621 = (void *)_os_log_send_and_compose_impl();
                          if (v621)
                            free(v621);
                          goto LABEL_1170;
                        }
                        v614 = _os_log_pack_size();
                        v615 = (std::__shared_weak_count_vtbl *)operator new(v614, (std::align_val_t)8uLL);
                        v616 = (std::__shared_weak_count *)operator new();
                        v616->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v616->__shared_owners_ = 0;
                        v616->__shared_weak_owners_ = 0;
                        v616[1].__vftable = v615;
                        *(_QWORD *)&v839 = v615;
                        *((_QWORD *)&v839 + 1) = v615;
                        v840 = v616;
                        v841 = 0;
                        v842 = 0;
                        v617 = strlen(__sh);
                        if (v617 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v618 = v617;
                        v619 = v601;
                        if (v617 >= 0x17)
                        {
                          v647 = (v617 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v617 | 7) != 0x17)
                            v647 = v617 | 7;
                          v648 = v647 + 1;
                          v620 = operator new(v647 + 1);
                          *(_QWORD *)&v843[8] = v618;
                          *(_QWORD *)&v843[16] = v648 | 0x8000000000000000;
                          *(_QWORD *)v843 = v620;
                        }
                        else
                        {
                          v843[23] = v617;
                          v620 = v843;
                          if (!v617)
                          {
LABEL_1092:
                            v620[v618] = 0;
                            v649 = *(_QWORD *)v843;
                            v838[0] = *(_QWORD *)&v843[8];
                            *(uint64_t *)((char *)v838 + 7) = *(_QWORD *)&v843[15];
                            v650 = v843[23];
                            v651 = operator new(0x38uLL);
                            v651[1] = 0;
                            v651[2] = 0;
                            v651[3] = off_24C9ABC20;
                            *v651 = &off_24C9ABBD0;
                            v652 = v838[0];
                            v651[4] = v649;
                            v651[5] = v652;
                            *(_QWORD *)((char *)v651 + 47) = *(uint64_t *)((char *)v838 + 7);
                            *((_BYTE *)v651 + 55) = v650;
                            memset(v838, 0, 15);
                            v653 = v842;
                            v841 = (char *)(v651 + 3);
                            v842 = (std::__shared_weak_count *)v651;
                            if (v653)
                            {
                              v654 = (unint64_t *)&v653->__shared_owners_;
                              do
                                v655 = __ldaxr(v654);
                              while (__stlxr(v655 - 1, v654));
                              if (!v655)
                              {
                                ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                                std::__shared_weak_count::__release_weak(v653);
                              }
                            }
                            *(_OWORD *)object = v839;
                            v656 = v841;
                            *(_QWORD *)&object[16] = v840;
                            if (v840)
                            {
                              v657 = (unint64_t *)&v840->__shared_owners_;
                              do
                                v658 = __ldxr(v657);
                              while (__stxr(v658 + 1, v657));
                            }
                            v659 = v842;
                            *(_QWORD *)&object[24] = v656;
                            *(_QWORD *)&object[32] = v842;
                            if (v842)
                            {
                              v660 = (unint64_t *)&v842->__shared_owners_;
                              do
                                v661 = __ldxr(v660);
                              while (__stxr(v661 + 1, v660));
                              *(_QWORD *)&object[40] = v656;
                              do
                                v662 = __ldaxr(v660);
                              while (__stlxr(v662 - 1, v660));
                              if (!v662)
                              {
                                ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
                                std::__shared_weak_count::__release_weak(v659);
                              }
                            }
                            else
                            {
                              *(_QWORD *)&object[40] = v656;
                            }
                            v679 = v840;
                            if (v840)
                            {
                              v680 = (unint64_t *)&v840->__shared_owners_;
                              do
                                v681 = __ldaxr(v680);
                              while (__stlxr(v681 - 1, v680));
                              if (!v681)
                              {
                                ((void (*)(std::__shared_weak_count *))v679->__on_zero_shared)(v679);
                                std::__shared_weak_count::__release_weak(v679);
                              }
                            }
                            v682 = *(_QWORD *)object;
                            if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                              v683 = *(_QWORD *)&object[40] + 8;
                            else
                              v683 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                            v684 = _os_log_pack_fill();
                            *(_DWORD *)v684 = 136315138;
                            *(_QWORD *)(v684 + 4) = v683;
                            v685 = operator new();
                            v686 = *(unsigned __int8 *)(v619 + 39);
                            v687 = v782;
                            if ((v686 & 0x80u) != 0)
                            {
                              v687 = *(const char **)(v619 + 16);
                              v686 = *(_QWORD *)(v619 + 24);
                            }
                            *(_QWORD *)v685 = v682;
                            *(_OWORD *)(v685 + 8) = *(_OWORD *)&object[8];
                            *(_QWORD *)&object[8] = 0;
                            *(_QWORD *)&object[16] = 0;
                            *(_OWORD *)(v685 + 24) = *(_OWORD *)&object[24];
                            *(_QWORD *)&object[24] = 0;
                            *(_QWORD *)&object[32] = 0;
                            *(_QWORD *)(v685 + 40) = v687;
                            *(_QWORD *)(v685 + 48) = v686;
                            *(_BYTE *)(v685 + 56) = 16;
                            *(_QWORD *)v843 = 0;
                            *(_QWORD *)&v839 = v685;
                            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v585 + 24) + 40))(*(_QWORD *)(v585 + 24), &v839);
                            v77 = v773;
                            v688 = v839;
                            *(_QWORD *)&v839 = 0;
                            if (v688)
                            {
                              v689 = *(std::__shared_weak_count **)(v688 + 32);
                              if (v689)
                              {
                                v690 = (unint64_t *)&v689->__shared_owners_;
                                do
                                  v691 = __ldaxr(v690);
                                while (__stlxr(v691 - 1, v690));
                                if (!v691)
                                {
                                  ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
                                  std::__shared_weak_count::__release_weak(v689);
                                }
                              }
                              v692 = *(std::__shared_weak_count **)(v688 + 16);
                              if (v692)
                              {
                                v693 = (unint64_t *)&v692->__shared_owners_;
                                do
                                  v694 = __ldaxr(v693);
                                while (__stlxr(v694 - 1, v693));
                                if (!v694)
                                {
                                  ((void (*)(std::__shared_weak_count *))v692->__on_zero_shared)(v692);
                                  std::__shared_weak_count::__release_weak(v692);
                                }
                              }
                              MEMORY[0x212BC6398](v688, 0x10F0C40B62ED6C6);
                              v695 = *(_QWORD *)v843;
                              *(_QWORD *)v843 = 0;
                              if (v695)
                              {
                                v696 = *(std::__shared_weak_count **)(v695 + 32);
                                if (v696)
                                {
                                  v697 = (unint64_t *)&v696->__shared_owners_;
                                  do
                                    v698 = __ldaxr(v697);
                                  while (__stlxr(v698 - 1, v697));
                                  if (!v698)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                                    std::__shared_weak_count::__release_weak(v696);
                                  }
                                }
                                v699 = *(std::__shared_weak_count **)(v695 + 16);
                                if (v699)
                                {
                                  v700 = (unint64_t *)&v699->__shared_owners_;
                                  do
                                    v701 = __ldaxr(v700);
                                  while (__stlxr(v701 - 1, v700));
                                  if (!v701)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
                                    std::__shared_weak_count::__release_weak(v699);
                                  }
                                }
                                MEMORY[0x212BC6398](v695, 0x10F0C40B62ED6C6);
                                v78 = v767;
                                v77 = v773;
                              }
                            }
                            v702 = *(std::__shared_weak_count **)&object[32];
                            if (*(_QWORD *)&object[32])
                            {
                              v703 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                              do
                                v704 = __ldaxr(v703);
                              while (__stlxr(v704 - 1, v703));
                              if (!v704)
                              {
                                ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
                                std::__shared_weak_count::__release_weak(v702);
                              }
                            }
                            v705 = *(std::__shared_weak_count **)&object[16];
                            if (*(_QWORD *)&object[16])
                            {
                              v706 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                              do
                                v707 = __ldaxr(v706);
                              while (__stlxr(v707 - 1, v706));
                              if (!v707)
                              {
                                ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
                                std::__shared_weak_count::__release_weak(v705);
                              }
                            }
LABEL_1170:
                            if (v583)
                            {
                              v708 = (const char *)&v801;
                              if (v802 < 0)
                                v708 = (const char *)v801;
                              sub_20E8C003C((uint64_t)&v805, "%s", v708);
                              sub_20E863570((uint64_t)&v805);
                            }
                            sub_20E863570((uint64_t)&v805);
                            v709 = v812;
                            if (!v812)
                              goto LABEL_1231;
                            v710 = (unint64_t *)&v812->__shared_owners_;
                            do
                              v711 = __ldaxr(v710);
                            while (__stlxr(v711 - 1, v710));
                            goto LABEL_1229;
                          }
                        }
                        memcpy(v620, __sh, v618);
                        goto LABEL_1092;
                      }
                    }
                    memmove(v610, v602, v603);
                    goto LABEL_1021;
                  }
                }
                memmove(v607, v605, v606);
                goto LABEL_1013;
              }
            }
            memmove(v587, v597, v586);
            goto LABEL_993;
          }
        }
      }
LABEL_347:
      sub_20FCD8180(v838);
      v77 = v773;
      if (**(int **)(v838[0] + 56) > 4)
        goto LABEL_884;
      v221 = *(unsigned __int8 *)(v838[0] + 72);
      v222 = sub_20E8C31DC(v838[0], "OSLogSurrogateAppender", 1, 0);
      v223 = v222;
      if (!v221 && v222 == 0)
        goto LABEL_884;
      sub_20E863438((uint64_t)&__dst);
      sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, Incompatible Track observation", 58);
      if ((BYTE8(v823) & 0x10) != 0)
      {
        v315 = v823;
        v316 = (const void **)&v820;
        if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
        {
          *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
          v315 = *((_QWORD *)&v820 + 1);
          v316 = (const void **)&v820;
        }
      }
      else
      {
        if ((BYTE8(v823) & 8) == 0)
        {
          v225 = 0;
          HIBYTE(v804) = 0;
          v226 = v803;
          goto LABEL_762;
        }
        v315 = *((_QWORD *)&v819 + 1);
        v316 = (const void **)&v818 + 1;
      }
      v463 = *v316;
      v225 = v315 - (_QWORD)*v316;
      if (v225 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v225 >= 0x17)
      {
        v464 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v225 | 7) != 0x17)
          v464 = v225 | 7;
        v465 = v464 + 1;
        v226 = operator new(v464 + 1);
        v803[1] = (void *)v225;
        v804 = v465 | 0x8000000000000000;
        v803[0] = v226;
      }
      else
      {
        HIBYTE(v804) = v315 - *(_BYTE *)v316;
        v226 = v803;
        if (!v225)
        {
LABEL_762:
          *((_BYTE *)v226 + v225) = 0;
          *(_QWORD *)&v805 = v838;
          *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v807 = 4;
          v808 = "unknown file";
          v809 = 1100;
          v810 = "unknown function";
          v811 = 0;
          v812 = 0;
          if (v804 >= 0)
            v466 = v803;
          else
            v466 = (void **)v803[0];
          v467 = *(_QWORD *)v805;
          v468 = (const char *)(*(_QWORD *)v805 + 16);
          v780 = *(_QWORD *)v805;
          v764 = v468;
          __sf = (const char *)v466;
          if (*(char *)(*(_QWORD *)v805 + 39) < 0)
          {
            v468 = *(const char **)(v467 + 16);
            v469 = *(_QWORD *)(v467 + 24);
          }
          else
          {
            v469 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
          }
          v470 = v78;
          v471 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v471 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v839);
            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
            if ((_BYTE)v841 && SHIBYTE(v840) < 0)
              operator delete((void *)v839);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A50F >= 0)
            v472 = (const char *)&xmmword_254A4A4F8;
          else
            v472 = (const char *)xmmword_254A4A4F8;
          if (byte_254A4A50F >= 0)
            v473 = byte_254A4A50F;
          else
            v473 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          *(_QWORD *)object = os_log_create(v472, v468);
          if (v473 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v473 >= 0x17)
          {
            v475 = (v473 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v473 | 7) != 0x17)
              v475 = v473 | 7;
            v476 = v475 + 1;
            v474 = operator new(v475 + 1);
            *(_QWORD *)&object[24] = v476 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v474;
            *(_QWORD *)&object[16] = v473;
          }
          else
          {
            object[31] = v473;
            v474 = &object[8];
            if (!v473)
            {
LABEL_783:
              v474[v473] = 0;
              object[32] = 1;
              if (v469 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v78 = v470;
              if (v469 >= 0x17)
              {
                v478 = (v469 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v469 | 7) != 0x17)
                  v478 = v469 | 7;
                v479 = v478 + 1;
                v477 = operator new(v478 + 1);
                *((_QWORD *)&v833 + 1) = v479 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v477;
                *(_QWORD *)&v833 = v469;
              }
              else
              {
                HIBYTE(v833) = v469;
                v477 = &object[40];
                if (!v469)
                {
LABEL_791:
                  v477[v469] = 0;
                  LOBYTE(v834) = 1;
                  v480 = *(NSObject **)object;
                  if (SHIBYTE(v833) < 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (!v223 || !*(_QWORD *)(v223 + 24))
                  {
                    os_log_type_enabled(v480, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)object = 136315138;
                    *(_QWORD *)&object[4] = __sf;
                    v487 = (void *)_os_log_send_and_compose_impl();
                    v77 = v773;
                    if (v487)
                      free(v487);
                    goto LABEL_869;
                  }
                  v481 = _os_log_pack_size();
                  v482 = (std::__shared_weak_count_vtbl *)operator new(v481, (std::align_val_t)8uLL);
                  v483 = (std::__shared_weak_count *)operator new();
                  v483->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v483->__shared_owners_ = 0;
                  v483->__shared_weak_owners_ = 0;
                  v483[1].__vftable = v482;
                  *(_QWORD *)&v839 = v482;
                  *((_QWORD *)&v839 + 1) = v482;
                  v840 = v483;
                  v841 = 0;
                  v842 = 0;
                  v484 = strlen(__sf);
                  if (v484 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v485 = v484;
                  if (v484 >= 0x17)
                  {
                    v488 = (v484 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v484 | 7) != 0x17)
                      v488 = v484 | 7;
                    v489 = v488 + 1;
                    v486 = operator new(v488 + 1);
                    *(_QWORD *)&v843[8] = v485;
                    *(_QWORD *)&v843[16] = v489 | 0x8000000000000000;
                    *(_QWORD *)v843 = v486;
                  }
                  else
                  {
                    v843[23] = v484;
                    v486 = v843;
                    if (!v484)
                    {
LABEL_810:
                      v486[v485] = 0;
                      v490 = *(_QWORD *)v843;
                      *(_QWORD *)&v801 = *(_QWORD *)&v843[8];
                      *(_QWORD *)((char *)&v801 + 7) = *(_QWORD *)&v843[15];
                      v491 = v843[23];
                      v492 = operator new(0x38uLL);
                      v492[1] = 0;
                      v492[2] = 0;
                      v492[3] = off_24C9ABC20;
                      *v492 = &off_24C9ABBD0;
                      v493 = v801;
                      v492[4] = v490;
                      v492[5] = v493;
                      *(_QWORD *)((char *)v492 + 47) = *(_QWORD *)((char *)&v801 + 7);
                      *((_BYTE *)v492 + 55) = v491;
                      *(_QWORD *)&v801 = 0;
                      *(_QWORD *)((char *)&v801 + 7) = 0;
                      v494 = v842;
                      v841 = (char *)(v492 + 3);
                      v842 = (std::__shared_weak_count *)v492;
                      if (v494)
                      {
                        v495 = (unint64_t *)&v494->__shared_owners_;
                        do
                          v496 = __ldaxr(v495);
                        while (__stlxr(v496 - 1, v495));
                        if (!v496)
                        {
                          ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
                          std::__shared_weak_count::__release_weak(v494);
                        }
                      }
                      *(_OWORD *)object = v839;
                      v497 = v841;
                      *(_QWORD *)&object[16] = v840;
                      if (v840)
                      {
                        v498 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v499 = __ldxr(v498);
                        while (__stxr(v499 + 1, v498));
                      }
                      v500 = v842;
                      *(_QWORD *)&object[24] = v497;
                      *(_QWORD *)&object[32] = v842;
                      if (v842)
                      {
                        v501 = (unint64_t *)&v842->__shared_owners_;
                        do
                          v502 = __ldxr(v501);
                        while (__stxr(v502 + 1, v501));
                        *(_QWORD *)&object[40] = v497;
                        do
                          v503 = __ldaxr(v501);
                        while (__stlxr(v503 - 1, v501));
                        if (!v503)
                        {
                          ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                          std::__shared_weak_count::__release_weak(v500);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&object[40] = v497;
                      }
                      v504 = v840;
                      if (v840)
                      {
                        v505 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v506 = __ldaxr(v505);
                        while (__stlxr(v506 - 1, v505));
                        if (!v506)
                        {
                          ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                          std::__shared_weak_count::__release_weak(v504);
                        }
                      }
                      v507 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                        v508 = *(_QWORD *)&object[40] + 8;
                      else
                        v508 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                      v509 = _os_log_pack_fill();
                      *(_DWORD *)v509 = 136315138;
                      *(_QWORD *)(v509 + 4) = v508;
                      v510 = operator new();
                      v511 = *(unsigned __int8 *)(v780 + 39);
                      v512 = v764;
                      if ((v511 & 0x80u) != 0)
                      {
                        v512 = *(const char **)(v780 + 16);
                        v511 = *(_QWORD *)(v780 + 24);
                      }
                      *(_QWORD *)v510 = v507;
                      *(_OWORD *)(v510 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v510 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *(_QWORD *)(v510 + 40) = v512;
                      *(_QWORD *)(v510 + 48) = v511;
                      *(_BYTE *)(v510 + 56) = 16;
                      *(_QWORD *)v843 = 0;
                      *(_QWORD *)&v839 = v510;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v223 + 24) + 40))(*(_QWORD *)(v223 + 24), &v839);
                      v77 = v773;
                      v513 = v839;
                      *(_QWORD *)&v839 = 0;
                      if (v513)
                      {
                        v514 = *(std::__shared_weak_count **)(v513 + 32);
                        if (v514)
                        {
                          v515 = (unint64_t *)&v514->__shared_owners_;
                          do
                            v516 = __ldaxr(v515);
                          while (__stlxr(v516 - 1, v515));
                          if (!v516)
                          {
                            ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
                            std::__shared_weak_count::__release_weak(v514);
                          }
                        }
                        v517 = *(std::__shared_weak_count **)(v513 + 16);
                        if (v517)
                        {
                          v518 = (unint64_t *)&v517->__shared_owners_;
                          do
                            v519 = __ldaxr(v518);
                          while (__stlxr(v519 - 1, v518));
                          if (!v519)
                          {
                            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                            std::__shared_weak_count::__release_weak(v517);
                          }
                        }
                        MEMORY[0x212BC6398](v513, 0x10F0C40B62ED6C6);
                        v520 = *(_QWORD *)v843;
                        *(_QWORD *)v843 = 0;
                        if (v520)
                        {
                          v521 = *(std::__shared_weak_count **)(v520 + 32);
                          if (v521)
                          {
                            v522 = (unint64_t *)&v521->__shared_owners_;
                            do
                              v523 = __ldaxr(v522);
                            while (__stlxr(v523 - 1, v522));
                            if (!v523)
                            {
                              ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
                              std::__shared_weak_count::__release_weak(v521);
                            }
                          }
                          v524 = *(std::__shared_weak_count **)(v520 + 16);
                          if (v524)
                          {
                            v525 = (unint64_t *)&v524->__shared_owners_;
                            do
                              v526 = __ldaxr(v525);
                            while (__stlxr(v526 - 1, v525));
                            if (!v526)
                            {
                              ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
                              std::__shared_weak_count::__release_weak(v524);
                            }
                          }
                          MEMORY[0x212BC6398](v520, 0x10F0C40B62ED6C6);
                        }
                      }
                      v527 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v528 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v529 = __ldaxr(v528);
                        while (__stlxr(v529 - 1, v528));
                        if (!v529)
                        {
                          ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
                          std::__shared_weak_count::__release_weak(v527);
                        }
                      }
                      v530 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v531 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v532 = __ldaxr(v531);
                        while (__stlxr(v532 - 1, v531));
                        if (!v532)
                        {
                          ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
                          std::__shared_weak_count::__release_weak(v530);
                        }
                      }
LABEL_869:
                      if (v221)
                      {
                        v533 = v803;
                        if (v804 < 0)
                          v533 = (void **)v803[0];
                        sub_20E8C003C((uint64_t)&v805, "%s", (const char *)v533);
                        sub_20E863570((uint64_t)&v805);
                      }
                      sub_20E863570((uint64_t)&v805);
                      v534 = v812;
                      if (v812)
                      {
                        v535 = (unint64_t *)&v812->__shared_owners_;
                        do
                          v536 = __ldaxr(v535);
                        while (__stlxr(v536 - 1, v535));
                        if (!v536)
                        {
                          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                          std::__shared_weak_count::__release_weak(v534);
                        }
                      }
                      if ((SHIBYTE(v804) & 0x80000000) == 0)
                        goto LABEL_881;
                      v537 = v803[0];
                      goto LABEL_880;
                    }
                  }
                  memcpy(v486, __sf, v485);
                  goto LABEL_810;
                }
              }
              memmove(v477, v468, v469);
              goto LABEL_791;
            }
          }
          memmove(v474, v472, v473);
          goto LABEL_783;
        }
      }
      memmove(v226, v463, v225);
      goto LABEL_762;
    }
    sub_20FCD8180(&v796);
    if (**(int **)(v796 + 56) <= 4)
    {
      v104 = *(unsigned __int8 *)(v796 + 72);
      v105 = sub_20E8C31DC(v796, "OSLogSurrogateAppender", 1, 0);
      v106 = v105;
      if (v104 || v105)
      {
        sub_20E863438((uint64_t)&__dst);
        sub_20E86A980(&v817, (uint64_t)"Unexpected deserialization, new structure should not be initialized to valid covariance.", 88);
        if ((BYTE8(v823) & 0x10) != 0)
        {
          v227 = v823;
          v228 = (const void **)&v820;
          if ((unint64_t)v823 < *((_QWORD *)&v820 + 1))
          {
            *(_QWORD *)&v823 = *((_QWORD *)&v820 + 1);
            v227 = *((_QWORD *)&v820 + 1);
            v228 = (const void **)&v820;
          }
        }
        else
        {
          if ((BYTE8(v823) & 8) == 0)
          {
            v107 = 0;
            HIBYTE(v804) = 0;
            v108 = v803;
            goto LABEL_564;
          }
          v227 = *((_QWORD *)&v819 + 1);
          v228 = (const void **)&v818 + 1;
        }
        v350 = *v228;
        v107 = v227 - (_QWORD)*v228;
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v107 >= 0x17)
        {
          v351 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v351 = v107 | 7;
          v352 = v351 + 1;
          v108 = operator new(v351 + 1);
          v803[1] = (void *)v107;
          v804 = v352 | 0x8000000000000000;
          v803[0] = v108;
        }
        else
        {
          HIBYTE(v804) = v227 - *(_BYTE *)v228;
          v108 = v803;
          if (!v107)
          {
LABEL_564:
            *((_BYTE *)v108 + v107) = 0;
            *(_QWORD *)&v805 = &v796;
            *((std::chrono::steady_clock::time_point *)&v805 + 1) = std::chrono::steady_clock::now();
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v807 = 4;
            v808 = "unknown file";
            v809 = 1081;
            v810 = "unknown function";
            v811 = 0;
            v812 = 0;
            if (v804 >= 0)
              v353 = v803;
            else
              v353 = (void **)v803[0];
            v354 = *(_QWORD *)v805;
            v355 = (const char *)(*(_QWORD *)v805 + 16);
            v779 = *(_QWORD *)v805;
            v763 = v355;
            __se = (const char *)v353;
            if (*(char *)(*(_QWORD *)v805 + 39) < 0)
            {
              v355 = *(const char **)(v354 + 16);
              v356 = *(_QWORD *)(v354 + 24);
            }
            else
            {
              v356 = *(unsigned __int8 *)(*(_QWORD *)v805 + 39);
            }
            v357 = v78;
            v358 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v358 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v839);
              sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v839);
              if ((_BYTE)v841 && SHIBYTE(v840) < 0)
                operator delete((void *)v839);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A50F >= 0)
              v359 = (const char *)&xmmword_254A4A4F8;
            else
              v359 = (const char *)xmmword_254A4A4F8;
            if (byte_254A4A50F >= 0)
              v360 = byte_254A4A50F;
            else
              v360 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
            *(_QWORD *)object = os_log_create(v359, v355);
            if (v360 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v360 >= 0x17)
            {
              v362 = (v360 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v360 | 7) != 0x17)
                v362 = v360 | 7;
              v363 = v362 + 1;
              v361 = operator new(v362 + 1);
              *(_QWORD *)&object[24] = v363 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v361;
              *(_QWORD *)&object[16] = v360;
            }
            else
            {
              object[31] = v360;
              v361 = &object[8];
              if (!v360)
              {
LABEL_585:
                v361[v360] = 0;
                object[32] = 1;
                if (v356 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v78 = v357;
                if (v356 >= 0x17)
                {
                  v365 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v356 | 7) != 0x17)
                    v365 = v356 | 7;
                  v366 = v365 + 1;
                  v364 = operator new(v365 + 1);
                  *((_QWORD *)&v833 + 1) = v366 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v364;
                  *(_QWORD *)&v833 = v356;
                }
                else
                {
                  HIBYTE(v833) = v356;
                  v364 = &object[40];
                  if (!v356)
                  {
LABEL_593:
                    v364[v356] = 0;
                    LOBYTE(v834) = 1;
                    v367 = *(NSObject **)object;
                    if (SHIBYTE(v833) < 0)
                      operator delete(*(void **)&object[40]);
                    if (object[32] && (object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (v106 && *(_QWORD *)(v106 + 24))
                    {
                      v368 = _os_log_pack_size();
                      v369 = (std::__shared_weak_count_vtbl *)operator new(v368, (std::align_val_t)8uLL);
                      v370 = (std::__shared_weak_count *)operator new();
                      v370->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v370->__shared_owners_ = 0;
                      v370->__shared_weak_owners_ = 0;
                      v370[1].__vftable = v369;
                      *(_QWORD *)&v839 = v369;
                      *((_QWORD *)&v839 + 1) = v369;
                      v840 = v370;
                      v841 = 0;
                      v842 = 0;
                      v371 = strlen(__se);
                      if (v371 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v372 = v371;
                      if (v371 >= 0x17)
                      {
                        v406 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v371 | 7) != 0x17)
                          v406 = v371 | 7;
                        v407 = v406 + 1;
                        v373 = operator new(v406 + 1);
                        *(_QWORD *)&v843[8] = v372;
                        *(_QWORD *)&v843[16] = v407 | 0x8000000000000000;
                        *(_QWORD *)v843 = v373;
                      }
                      else
                      {
                        v843[23] = v371;
                        v373 = v843;
                        if (!v371)
                          goto LABEL_664;
                      }
                      memcpy(v373, __se, v372);
LABEL_664:
                      v373[v372] = 0;
                      v408 = *(_QWORD *)v843;
                      *(_QWORD *)&v801 = *(_QWORD *)&v843[8];
                      *(_QWORD *)((char *)&v801 + 7) = *(_QWORD *)&v843[15];
                      v409 = v843[23];
                      v410 = operator new(0x38uLL);
                      v410[1] = 0;
                      v410[2] = 0;
                      v410[3] = off_24C9ABC20;
                      *v410 = &off_24C9ABBD0;
                      v411 = v801;
                      v410[4] = v408;
                      v410[5] = v411;
                      *(_QWORD *)((char *)v410 + 47) = *(_QWORD *)((char *)&v801 + 7);
                      *((_BYTE *)v410 + 55) = v409;
                      *(_QWORD *)&v801 = 0;
                      *(_QWORD *)((char *)&v801 + 7) = 0;
                      v412 = v842;
                      v841 = (char *)(v410 + 3);
                      v842 = (std::__shared_weak_count *)v410;
                      if (v412)
                      {
                        v413 = (unint64_t *)&v412->__shared_owners_;
                        do
                          v414 = __ldaxr(v413);
                        while (__stlxr(v414 - 1, v413));
                        if (!v414)
                        {
                          ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                          std::__shared_weak_count::__release_weak(v412);
                        }
                      }
                      *(_OWORD *)object = v839;
                      v415 = v841;
                      *(_QWORD *)&object[16] = v840;
                      if (v840)
                      {
                        v416 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v417 = __ldxr(v416);
                        while (__stxr(v417 + 1, v416));
                      }
                      v418 = v842;
                      *(_QWORD *)&object[24] = v415;
                      *(_QWORD *)&object[32] = v842;
                      if (v842)
                      {
                        v419 = (unint64_t *)&v842->__shared_owners_;
                        do
                          v420 = __ldxr(v419);
                        while (__stxr(v420 + 1, v419));
                        *(_QWORD *)&object[40] = v415;
                        do
                          v421 = __ldaxr(v419);
                        while (__stlxr(v421 - 1, v419));
                        if (!v421)
                        {
                          ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
                          std::__shared_weak_count::__release_weak(v418);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&object[40] = v415;
                      }
                      v432 = v840;
                      if (v840)
                      {
                        v433 = (unint64_t *)&v840->__shared_owners_;
                        do
                          v434 = __ldaxr(v433);
                        while (__stlxr(v434 - 1, v433));
                        if (!v434)
                        {
                          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                          std::__shared_weak_count::__release_weak(v432);
                        }
                      }
                      v435 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                        v436 = *(_QWORD *)&object[40] + 8;
                      else
                        v436 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                      v437 = _os_log_pack_fill();
                      *(_DWORD *)v437 = 136315138;
                      *(_QWORD *)(v437 + 4) = v436;
                      v438 = operator new();
                      v439 = *(unsigned __int8 *)(v779 + 39);
                      v440 = v763;
                      if ((v439 & 0x80u) != 0)
                      {
                        v440 = *(const char **)(v779 + 16);
                        v439 = *(_QWORD *)(v779 + 24);
                      }
                      *(_QWORD *)v438 = v435;
                      *(_OWORD *)(v438 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v438 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *(_QWORD *)(v438 + 40) = v440;
                      *(_QWORD *)(v438 + 48) = v439;
                      *(_BYTE *)(v438 + 56) = 16;
                      *(_QWORD *)v843 = 0;
                      *(_QWORD *)&v839 = v438;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v106 + 24) + 40))(*(_QWORD *)(v106 + 24), &v839);
                      v77 = v773;
                      v441 = v839;
                      *(_QWORD *)&v839 = 0;
                      if (v441)
                      {
                        v442 = *(std::__shared_weak_count **)(v441 + 32);
                        if (v442)
                        {
                          v443 = (unint64_t *)&v442->__shared_owners_;
                          do
                            v444 = __ldaxr(v443);
                          while (__stlxr(v444 - 1, v443));
                          if (!v444)
                          {
                            ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                            std::__shared_weak_count::__release_weak(v442);
                          }
                        }
                        v445 = *(std::__shared_weak_count **)(v441 + 16);
                        if (v445)
                        {
                          v446 = (unint64_t *)&v445->__shared_owners_;
                          do
                            v447 = __ldaxr(v446);
                          while (__stlxr(v447 - 1, v446));
                          if (!v447)
                          {
                            ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                            std::__shared_weak_count::__release_weak(v445);
                          }
                        }
                        MEMORY[0x212BC6398](v441, 0x10F0C40B62ED6C6);
                        v448 = *(_QWORD *)v843;
                        *(_QWORD *)v843 = 0;
                        if (v448)
                        {
                          v449 = *(std::__shared_weak_count **)(v448 + 32);
                          if (v449)
                          {
                            v450 = (unint64_t *)&v449->__shared_owners_;
                            do
                              v451 = __ldaxr(v450);
                            while (__stlxr(v451 - 1, v450));
                            if (!v451)
                            {
                              ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                              std::__shared_weak_count::__release_weak(v449);
                            }
                          }
                          v452 = *(std::__shared_weak_count **)(v448 + 16);
                          if (v452)
                          {
                            v453 = (unint64_t *)&v452->__shared_owners_;
                            do
                              v454 = __ldaxr(v453);
                            while (__stlxr(v454 - 1, v453));
                            if (!v454)
                            {
                              ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                              std::__shared_weak_count::__release_weak(v452);
                            }
                          }
                          MEMORY[0x212BC6398](v448, 0x10F0C40B62ED6C6);
                        }
                      }
                      v455 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v456 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v457 = __ldaxr(v456);
                        while (__stlxr(v457 - 1, v456));
                        if (!v457)
                        {
                          ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                          std::__shared_weak_count::__release_weak(v455);
                        }
                      }
                      v458 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v459 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v460 = __ldaxr(v459);
                        while (__stlxr(v460 - 1, v459));
                        if (!v460)
                        {
                          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                          std::__shared_weak_count::__release_weak(v458);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v367, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)object = 136315138;
                      *(_QWORD *)&object[4] = __se;
                      v374 = (void *)_os_log_send_and_compose_impl();
                      v77 = v773;
                      if (v374)
                        free(v374);
                    }
                    if (v104)
                    {
                      v461 = v803;
                      if (v804 < 0)
                        v461 = (void **)v803[0];
                      sub_20E8C003C((uint64_t)&v805, "%s", (const char *)v461);
                      sub_20E863570((uint64_t)&v805);
                    }
                    sub_20E863570((uint64_t)&v805);
                    v347 = v812;
                    if (v812)
                    {
                      v462 = (unint64_t *)&v812->__shared_owners_;
                      do
                        v349 = __ldaxr(v462);
                      while (__stlxr(v349 - 1, v462));
LABEL_747:
                      if (!v349)
                      {
                        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                        std::__shared_weak_count::__release_weak(v347);
                      }
                    }
                    goto LABEL_749;
                  }
                }
                memmove(v364, v355, v356);
                goto LABEL_593;
              }
            }
            memmove(v361, v359, v360);
            goto LABEL_585;
          }
        }
        memmove(v108, v350, v107);
        goto LABEL_564;
      }
    }
LABEL_298:
    v186 = v800;
    if (v800)
    {
      v187 = (unint64_t *)&v800->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
LABEL_128:
    v78 += 22;
    if (v78 != v77)
      continue;
    break;
  }
LABEL_1268:
  v743 = (_QWORD *)v814;
  if ((_QWORD)v814)
  {
    do
    {
      v744 = (_QWORD *)*v743;
      operator delete(v743);
      v743 = v744;
    }
    while (v744);
  }
  v745 = (void *)v813;
  *(_QWORD *)&v813 = 0;
  if (v745)
    operator delete(v745);
}

void sub_20FCDF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;

  sub_20E863784((uint64_t)&a69);
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a44);
  sub_20E8C25A8((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FCDFC60()
{
  JUMPOUT(0x20FCDFC8CLL);
}

void sub_20FCDFC68()
{
  JUMPOUT(0x20FCDFC78);
}

void sub_20FCDFC9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FCDFCAC()
{
  JUMPOUT(0x20FCDFCD4);
}

void sub_20FCDFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E86665C((uint64_t)&a44);
  sub_20E8C25A8((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FCDFD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E8C25A8((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FCDFD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E8C25A8((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FCDFD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__shared_weak_count *v63;
  void *v65;

  std::__shared_weak_count::~__shared_weak_count(v63);
  operator delete(v65);
  sub_20E8C25A8((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FCDFD88(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x4C8];
  if (STACK[0x4C8])
  {
    STACK[0x4D0] = (unint64_t)v2;
    operator delete(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FCDFDA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = STACK[0x580];
  STACK[0x580] = 0;
  if (v3)
  {
    sub_20E8E931C(v1, v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FCDFDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;

  sub_20E86665C((uint64_t)&a69);
  sub_20E8C25A8((uint64_t)&a63);
  JUMPOUT(0x20FCDFDDCLL);
}

char *sub_20FCDFDE4(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    sub_20E92CED8();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v6) >> 3) > v8)
    v8 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v6) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - v6) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  if (v8 > 0x492492492492492)
    sub_20E877A38();
  v12 = 56 * v8;
  v13 = (char *)operator new(56 * v8);
  v14 = &v13[56 * v7];
  *(_QWORD *)v14 = *a2;
  v15 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 3) = v15;
  v16 = *(_QWORD *)(a4 + 16);
  *((_OWORD *)v14 + 2) = *(_OWORD *)a4;
  *((_QWORD *)v14 + 6) = v16;
  v17 = v14 + 56;
  if (v5 != v6)
  {
    do
    {
      v18 = *(_OWORD *)(v5 - 56);
      v19 = *(_OWORD *)(v5 - 40);
      v20 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v20;
      *(_OWORD *)(v14 - 40) = v19;
      *(_OWORD *)(v14 - 56) = v18;
      v14 -= 56;
      v5 -= 56;
    }
    while (v5 != v6);
    v5 = v6;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = &v13[v12];
  if (v5)
    operator delete(v5);
  return v17;
}

uint64_t sub_20FCDFF48(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v3 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286)
    sub_20E92CED8();
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xD79435E50D7943)
    v6 = 0x1AF286BCA1AF286;
  else
    v6 = v4;
  v24 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286)
      sub_20E877A38();
    v7 = (char *)operator new(152 * v6);
  }
  else
  {
    v7 = 0;
  }
  v21 = v7;
  v22.i64[0] = (uint64_t)&v7[152 * v3];
  v23 = &v7[152 * v6];
  sub_20FCE014C(v22.i64[0], a2);
  v8 = v22.i64[0];
  v9 = v22.i64[0] + 152;
  v22.i64[1] = v22.i64[0] + 152;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v10 + v12;
      v14 = v8 + v12;
      v15 = *(_OWORD *)(v10 + v12 - 128);
      v16 = *(_QWORD *)(v10 + v12 - 112);
      *(_OWORD *)(v14 - 144) = *(_OWORD *)(v10 + v12 - 144);
      *(_OWORD *)(v14 - 128) = v15;
      *(_QWORD *)(v14 - 112) = v16;
      *(_QWORD *)(v14 - 104) = 0;
      *(_QWORD *)(v14 - 96) = 0;
      *(_QWORD *)(v14 - 88) = 0;
      *(_OWORD *)(v14 - 104) = *(_OWORD *)(v10 + v12 - 104);
      *(_QWORD *)(v14 - 88) = *(_QWORD *)(v10 + v12 - 88);
      *(_QWORD *)(v13 - 104) = 0;
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v14 - 80) = 0;
      *(_QWORD *)(v14 - 72) = 0;
      *(_QWORD *)(v14 - 64) = 0;
      *(_OWORD *)(v14 - 80) = *(_OWORD *)(v10 + v12 - 80);
      *(_QWORD *)(v14 - 64) = *(_QWORD *)(v10 + v12 - 64);
      *(_QWORD *)(v13 - 80) = 0;
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      v17 = *(_OWORD *)(v10 + v12 - 56);
      *(_QWORD *)(v14 - 40) = *(_QWORD *)(v10 + v12 - 40);
      *(_OWORD *)(v14 - 56) = v17;
      *(_QWORD *)(v13 - 48) = 0;
      *(_QWORD *)(v13 - 40) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(_QWORD *)(v14 - 16) = *(_QWORD *)(v10 + v12 - 16);
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_BYTE *)(v14 - 8) = *(_BYTE *)(v10 + v12 - 8);
      v12 -= 152;
    }
    while (v10 + v12 != v11);
    v18 = *a1;
    v9 = v22.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v22 = v18;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  v23 = v19;
  v21 = (char *)v18.i64[0];
  sub_20E948094((uint64_t)&v21);
  return v9;
}

void sub_20FCE0138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E948094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCE014C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;

  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(_BYTE **)(a2 + 48);
  v7 = *(_BYTE **)(a2 + 56);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      sub_20E92CED8();
    v10 = (char *)operator new(v9);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v10;
    v11 = &v10[16 * (v9 >> 4)];
    *(_QWORD *)(a1 + 64) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 56) = v11;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v13 = *(_BYTE **)(a2 + 72);
  v12 = *(_BYTE **)(a2 + 80);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20E92CED8();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v15;
    v16 = &v15[64 * (v14 >> 6)];
    *(_QWORD *)(a1 + 88) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 80) = v16;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 96), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v17;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v19 = *(_BYTE **)(a2 + 120);
  v18 = *(_BYTE **)(a2 + 128);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      sub_20E867F44();
    v21 = (char *)operator new(v18 - v19);
    *(_QWORD *)(a1 + 120) = v21;
    *(_QWORD *)(a1 + 128) = v21;
    v22 = &v21[8 * (v20 >> 3)];
    *(_QWORD *)(a1 + 136) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(a1 + 128) = v22;
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20FCE02E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void *v6;

  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
    v4 = *v2;
    if (!*v2)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *v2;
    if (!*v2)
      goto LABEL_4;
  }
  *(_QWORD *)(v1 + 56) = v4;
  operator delete(v4);
  goto LABEL_4;
}

void sub_20FCE0364()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20FCE0318);
  JUMPOUT(0x20FCE0310);
}

uint64_t sub_20FCE0374(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *v4;
    *v4 = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FCE03F0(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = *(_QWORD *)(a2 + 8);
    *((_OWORD *)v5 + 1) = *(_OWORD *)(a2 + 16);
    *((_DWORD *)v5 + 8) = *(_DWORD *)(a2 + 32);
    v6 = v5 + 40;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = *a1;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x666666666666666)
    sub_20E867F44();
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v7) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v9;
  if (v11 > 0x666666666666666)
    sub_20E877A38();
  v12 = 40 * v11;
  v13 = (char *)operator new(40 * v11);
  v14 = &v13[40 * v8];
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a2;
  *((_OWORD *)v14 + 1) = v15;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a2 + 32);
  v6 = v14 + 40;
  if (v5 != v7)
  {
    v16 = 0;
    do
    {
      v17 = &v14[v16];
      *((_QWORD *)v17 - 5) = *(_QWORD *)&v5[v16 - 40];
      *((_QWORD *)v17 - 4) = *(_QWORD *)&v5[v16 - 32];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v5[v16 - 24];
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v5[v16 - 8];
      v16 -= 40;
    }
    while (&v5[v16] != v7);
    v14 += v16;
  }
  *a1 = v14;
  a1[1] = v6;
  a1[2] = &v13[v12];
  if (!v7)
    goto LABEL_3;
  operator delete(v7);
  a1[1] = v6;
}

void sub_20FCE0560(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCE0570(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCE05A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20FCE05B0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;

  if ((_QWORD *)a1 != a2)
  {
    v4 = (_QWORD *)a2[220];
    v5 = a2 + 221;
    if (v4 != a2 + 221)
    {
      v6 = (uint64_t *)(a1 + 1768);
      while (1)
      {
        v7 = v4[5];
        v8 = operator new();
        sub_20E972DB4(v8, v7);
        memcpy((void *)(v8 + 1000), (const void *)(v7 + 1000), 0x1B8uLL);
        v9 = *((_DWORD *)v4 + 8);
        v30 = v9;
        v29 = 0;
        v31 = v8;
        v10 = *v6;
        v11 = (_QWORD *)(a1 + 1768);
        v12 = (_QWORD *)(a1 + 1768);
        if (*v6)
          break;
LABEL_12:
        v14 = operator new(0x30uLL);
        v14[8] = v9;
        v31 = 0;
        *((_QWORD *)v14 + 5) = v8;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v12;
        *v11 = v14;
        v15 = **(_QWORD **)(a1 + 1760);
        if (v15)
        {
          *(_QWORD *)(a1 + 1760) = v15;
          v14 = (_DWORD *)*v11;
        }
        sub_20E868578(*(uint64_t **)(a1 + 1768), (uint64_t *)v14);
        ++*(_QWORD *)(a1 + 1776);
        v8 = v31;
        v31 = 0;
        if (v8)
          goto LABEL_24;
        v16 = v29;
        v29 = 0;
        if (v16)
          goto LABEL_16;
LABEL_17:
        v17 = (_QWORD *)v4[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v4[2];
            v19 = *v18 == (_QWORD)v4;
            v4 = v18;
          }
          while (!v19);
        }
        v4 = v18;
        if (v18 == v5)
          goto LABEL_26;
      }
      while (1)
      {
        while (1)
        {
          v12 = (_QWORD *)v10;
          v13 = *(_DWORD *)(v10 + 32);
          if (v9 >= v13)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_12;
        }
        if (v13 >= v9)
          break;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_12;
        }
      }
      v31 = 0;
LABEL_24:
      sub_20E8E931C((uint64_t)&v31, v8);
      v16 = v29;
      v29 = 0;
      if (!v16)
        goto LABEL_17;
LABEL_16:
      sub_20E8E931C((uint64_t)&v29, v16);
      goto LABEL_17;
    }
LABEL_26:
    sub_20FBEE4FC(a1 + 72, (uint64_t)(a2 + 9));
    sub_20E8E8F80(a1 + 48, *(_QWORD **)(a1 + 56));
    *(_QWORD *)(a1 + 48) = a1 + 56;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v20 = (_QWORD *)a2[6];
    v21 = a2 + 7;
    if (v20 != v21)
    {
      do
      {
        sub_20F283D18(a1, v20[4], v20[5], v20[6]);
        v27 = (_QWORD *)v20[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v20[2];
            v19 = *v28 == (_QWORD)v20;
            v20 = v28;
          }
          while (!v19);
        }
        v20 = v28;
      }
      while (v28 != v21);
    }
    if (*(_QWORD *)(a1 + 1808))
    {
      v22 = *(_QWORD **)(a1 + 1800);
      if (v22)
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
      *(_QWORD *)(a1 + 1800) = 0;
      v24 = *(_QWORD *)(a1 + 1792);
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 1784) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 1808) = 0;
    }
  }
  return a1;
}

void sub_20FCE0840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  a12 = 0;
  sub_20E8E931C(v12, v13);
  v15 = a10;
  a10 = 0;
  if (v15)
  {
    sub_20E8E931C((uint64_t)&a10, v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FCE0894(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  __int128 **v6;
  __int128 **i;
  __int128 *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int8x8_t *v46;
  int8x8_t *v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t *v50;
  int8x8_t v51;
  unsigned int v52;
  int8x8_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  int8x8_t *v65;
  uint64_t *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  uint64_t *p_shared_weak_owners;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int8x8_t v95;
  unint64_t v96;
  uint8x8_t v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t j;
  unsigned __int8 v107;
  uint64_t v109;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t k;
  uint64_t v115;
  unsigned __int8 v116;
  __int128 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t m;
  unsigned __int8 v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t n;
  unsigned __int8 v125;
  int8x16_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  int8x8_t *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  int8x8_t *v151;
  int8x8_t *v152;
  unint64_t v153;
  unint64_t v154;
  int8x8_t *v155;
  int8x8_t v156;
  unsigned int v157;
  BOOL v158;
  int8x8_t v159;
  int8x8_t v160;
  unsigned int v161;
  uint64_t v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  unint64_t v173;
  int8x8_t *v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  int8x8_t *v193;
  _OWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  _OWORD *v197;
  _QWORD *v198;
  char *v199;
  int v200;
  unint64_t v201;
  int v202;
  int v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  int8x8_t *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int8x8_t v221;
  uint64_t v223;
  std::__shared_weak_count_vtbl *v224;
  int v225;
  uint64_t v226;
  _QWORD *v228;
  int8x8_t **v229;
  __int128 v230;
  uint64_t v231;
  __int128 *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  int v248;

  if (*(_QWORD *)a1)
    sub_20FCE05B0(*a4, *(_QWORD **)a1);
  v229 = (int8x8_t **)a4;
  if ((a2 & 1) == 0)
  {
    v6 = *(__int128 ***)(a1 + 40);
    for (i = *(__int128 ***)(a1 + 48); v6 != i; v6 += 2)
    {
      v8 = *v6;
      v9 = operator new(0x300uLL);
      v9[1] = 0;
      v9[2] = 0;
      *v9 = &off_24C9FC5B0;
      *(_QWORD *)&v234 = sub_20F2878BC((uint64_t)(v9 + 3), v8);
      *((_QWORD *)&v234 + 1) = v9;
      if ((sub_20F286CA4((uint64_t *)v229, (char *)&v234) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 67, (uint64_t)"success", 7, (uint64_t)"Failed to add the frame.", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
      if (*((_QWORD *)&v234 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  v13 = a1;
  if ((a3 & 1) == 0)
  {
    v14 = *(_QWORD **)(a1 + 8);
    v15 = (_QWORD *)*v14;
    v228 = v14 + 1;
    if ((_QWORD *)*v14 != v14 + 1)
    {
      do
      {
        v16 = v15[6];
        if (*(_BYTE *)(v16 + 192))
          v17 = v16 + 40;
        else
          v17 = 0;
        v18 = (char *)operator new(0xB0uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = &off_24CA05190;
        *((_OWORD *)v18 + 6) = 0u;
        *((_OWORD *)v18 + 7) = 0u;
        *((_OWORD *)v18 + 2) = 0u;
        *((_OWORD *)v18 + 3) = 0u;
        *((_OWORD *)v18 + 4) = 0u;
        *((_OWORD *)v18 + 5) = 0u;
        *((_OWORD *)v18 + 8) = 0u;
        *((_OWORD *)v18 + 9) = 0u;
        *((_OWORD *)v18 + 10) = 0u;
        v18[80] = 1;
        *((_QWORD *)v18 + 12) = 0;
        *((_QWORD *)v18 + 13) = 0;
        *((_QWORD *)v18 + 11) = 0;
        *((_QWORD *)v18 + 14) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v18 + 16) = 0x3FF0000000000000;
        *((_QWORD *)v18 + 3) = &off_24C9FC600;
        v19 = v18 + 24;
        *(_QWORD *)(v18 + 165) = 0;
        *(_OWORD *)(v18 + 136) = 0u;
        *(_OWORD *)(v18 + 152) = 0u;
        *(_QWORD *)&v243 = v18 + 24;
        *((_QWORD *)&v243 + 1) = v18;
        v20 = *(_OWORD *)(v17 + 8);
        *((_QWORD *)v18 + 6) = *(_QWORD *)(v17 + 24);
        *((_OWORD *)v18 + 2) = v20;
        v21 = *(int8x16_t *)(v17 + 32);
        v230 = (__int128)v21;
        v231 = *(_QWORD *)(v17 + 48);
        if ((a2 & 1) == 0)
        {
          v22 = sub_20E9DF85C(&(*v229)[223], (uint64_t *)&v230);
          if (v22)
            v23 = v22 + 5;
          else
            v23 = 0;
          if (!v22
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 88, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          _Q0 = *(_OWORD *)(v17 + 64);
          v25 = *(_QWORD *)(v17 + 88);
          _D3 = *(_QWORD *)(v17 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v17 + 80) * *(double *)(v17 + 80)) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0)|| (*(_OWORD *)(v18 + 56) = v230, *((_DWORD *)v18 + 18) = v231, *((_QWORD *)v18 + 15) = v23, v31 = *(_OWORD *)(v17 + 64), *((_QWORD *)v18 + 13) = *(_QWORD *)(v17 + 80), *(_OWORD *)(v18 + 88) = v31, *((_QWORD *)v18 + 14) = v25, ((*(uint64_t (**)(char *))(*((_QWORD *)v18 + 3) + 16))(v19) & 1) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 94,
                 (uint64_t)"result",
                 6,
                 (uint64_t)"Fail to set anchor",
                 18,
                 (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        if (v18[172]
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 99, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_BYTE *)(v17 + 148))
        {
          *((_DWORD *)v18 + 34) = *(_DWORD *)(v17 + 112);
          *((_DWORD *)v18 + 35) = *(_DWORD *)(v17 + 116);
          *((_DWORD *)v18 + 36) = *(_DWORD *)(v17 + 120);
          *((_DWORD *)v18 + 37) = *(_DWORD *)(v17 + 124);
          *((_DWORD *)v18 + 38) = *(_DWORD *)(v17 + 128);
          *((_DWORD *)v18 + 39) = *(_DWORD *)(v17 + 132);
          *((_DWORD *)v18 + 40) = *(_DWORD *)(v17 + 136);
          *((_DWORD *)v18 + 41) = *(_DWORD *)(v17 + 140);
          v21.i32[0] = *(_DWORD *)(v17 + 144);
          *((_DWORD *)v18 + 42) = v21.i32[0];
          v32 = *(int8x16_t *)(v18 + 136);
          v33 = *(int8x16_t *)(v18 + 152);
          v34 = (int32x4_t)vextq_s8(v32, v33, 0xCuLL);
          v35 = (int32x4_t)vextq_s8(v33, v21, 8uLL);
          v36 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL));
          v18[172] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v32.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)(v18 + 173) = *(_WORD *)(v17 + 149);
        v38 = *(_QWORD *)(v16 + 24);
        v37 = *(_QWORD *)(v16 + 32);
        v242 = 0uLL;
        if ((a2 & 1) != 0)
        {
          v234 = 0xFFFFFFFFBF800000;
          v235 = 0;
          v236 = 0;
          LODWORD(v237) = 2143289344;
          v39 = v229[1];
          v40 = *(uint64_t **)(v16 + 200);
          *(_QWORD *)&v244 = &off_24C9FC700;
          *((_QWORD *)&v244 + 1) = v38;
          v245 = v37;
          *(_QWORD *)&v246 = &v234;
          *((_QWORD *)&v246 + 1) = v19;
          v41 = sub_20F28AA04(&v39[3], v40);
          sub_20F289D80((uint64_t **)v39, (int8x8_t *)v41, (uint64_t)&v244, (uint64_t **)&v241);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
          v242 = v241;
          sub_20FCE23E0((_QWORD *)v241, *(_QWORD *)(v16 + 200));
          if (!v42)
            goto LABEL_91;
          goto LABEL_88;
        }
        v44 = *(_QWORD *)(v16 + 200);
        v43 = *(_QWORD *)(v16 + 208);
        if (v44 == v43)
          goto LABEL_91;
        do
        {
          v45 = *(_OWORD *)v44;
          v245 = *(_QWORD *)(v44 + 16);
          v244 = v45;
          v47 = v229[5];
          v46 = v229[6];
          if (v46 != v47)
          {
            v48 = ((char *)v46 - (char *)v47) >> 4;
            while (1)
            {
              v49 = v48 >> 1;
              v50 = &v47[2 * (v48 >> 1)];
              v51 = *v50;
              v52 = *(_DWORD *)(*(_QWORD *)v50 + 16);
              _CF = v52 >= v245;
              if (v52 != (_DWORD)v245)
                goto LABEL_49;
              if (**(_QWORD **)&v51 >= (unint64_t)v244)
                break;
LABEL_43:
              v47 = v50 + 2;
              v49 = v48 + ~v49;
LABEL_44:
              v48 = v49;
              if (!v49)
                goto LABEL_52;
            }
            if (**(_QWORD **)&v51 != (_QWORD)v244)
              goto LABEL_44;
            _CF = *(_DWORD *)(*(_QWORD *)&v51 + 8) >= DWORD2(v244);
LABEL_49:
            if (_CF)
              goto LABEL_44;
            goto LABEL_43;
          }
LABEL_52:
          if (v47 != v46)
          {
            v54 = *v47;
            if (*(_DWORD *)(*(_QWORD *)v47 + 16) == (_DWORD)v245
              && **(_QWORD **)&v54 == (_QWORD)v244
              && *(_DWORD *)(*(_QWORD *)&v54 + 8) == DWORD2(v244))
            {
              v46 = v47;
            }
          }
          v55 = *(_QWORD *)(*(_QWORD *)v46 + 72) + 40 * *(unsigned int *)(*(_QWORD *)(v44 + 24) + 4);
          v56 = (uint64_t *)v242;
          if ((_QWORD)v242)
          {
            *(_QWORD *)&v241 = v55;
            v234 = v244;
            v235 = v245;
            v236 = v55;
            v57 = *(_QWORD *)(v242 + 200);
            v58 = *(char **)(v242 + 208);
            if (v58 != (char *)v57)
            {
              v59 = (uint64_t)&v58[-v57] >> 5;
              while (1)
              {
                v60 = v59 >> 1;
                v61 = v57 + 32 * (v59 >> 1);
                v62 = *(_DWORD *)(v61 + 16);
                v63 = v62 >= v235;
                if (v62 != (_DWORD)v235)
                  goto LABEL_66;
                if (*(_QWORD *)v61 >= (unint64_t)v234)
                  break;
LABEL_60:
                v57 = v61 + 32;
                v60 = v59 + ~v60;
LABEL_61:
                v59 = v60;
                if (!v60)
                  goto LABEL_69;
              }
              if (*(_QWORD *)v61 != (_QWORD)v234)
                goto LABEL_61;
              v63 = *(_DWORD *)(v61 + 8) >= DWORD2(v234);
LABEL_66:
              if (v63)
                goto LABEL_61;
              goto LABEL_60;
            }
LABEL_69:
            if ((char *)v57 == v58
              || *(_DWORD *)(v57 + 16) != (_DWORD)v245
              || *(_QWORD *)v57 != (_QWORD)v244
              || (v64 = *(char **)(v242 + 208), *(_DWORD *)(v57 + 8) != DWORD2(v244)))
            {
              v64 = sub_20F287F84((char **)(v242 + 200), (char *)v57, &v234);
              v58 = (char *)v56[26];
            }
            if (v58 != v64)
              sub_20EE6BDF0(v56, (uint64_t *)&v244, (uint64_t)&v241);
          }
          else
          {
            v65 = v229[1];
            *(_QWORD *)&v234 = &off_24C9FC700;
            *((_QWORD *)&v234 + 1) = v38;
            v235 = v37;
            v236 = v55;
            v237 = v243;
            v66 = sub_20F28AA04(&v65[3], (uint64_t *)&v244);
            sub_20F289D80((uint64_t **)v65, (int8x8_t *)v66, (uint64_t)&v234, (uint64_t **)&v241);
            v67 = v241;
            v241 = 0uLL;
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
            v242 = v67;
            if (!v68)
              goto LABEL_80;
            p_shared_owners = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(p_shared_owners);
            while (__stlxr(v70 - 1, p_shared_owners));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
              if (!*((_QWORD *)&v241 + 1))
                goto LABEL_40;
            }
            else
            {
LABEL_80:
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
              if (!*((_QWORD *)&v241 + 1))
                goto LABEL_40;
            }
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
LABEL_40:
          v44 += 32;
        }
        while (v44 != v43);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
        if (!*((_QWORD *)&v242 + 1))
          goto LABEL_91;
LABEL_88:
        v74 = (unint64_t *)&v42->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (v75)
        {
LABEL_91:
          v76 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
          if (*((_QWORD *)&v243 + 1))
            goto LABEL_92;
          goto LABEL_97;
        }
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        v76 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
        if (*((_QWORD *)&v243 + 1))
        {
LABEL_92:
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
LABEL_97:
        v79 = (_QWORD *)v15[1];
        if (v79)
        {
          do
          {
            v80 = v79;
            v79 = (_QWORD *)*v79;
          }
          while (v79);
        }
        else
        {
          do
          {
            v80 = (_QWORD *)v15[2];
            _ZF = *v80 == (_QWORD)v15;
            v15 = v80;
          }
          while (!_ZF);
        }
        v15 = v80;
      }
      while (v80 != v228);
    }
    *((_QWORD *)&v234 + 1) = 0;
    v235 = 0;
    *(_QWORD *)&v234 = (char *)&v234 + 8;
    sub_20FCEDC80((uint64_t)&v236);
    v239 = 0;
    v240 = 0;
    v238 = 1000;
    v81 = *(unsigned __int8 ***)(a1 + 16);
    v83 = *v81;
    v82 = v81[1];
    v84 = **v81;
    if ((char)v84 <= -2)
    {
      do
      {
        v85 = (__clz(__rbit64(((*v83 >> 7) & ~*v83 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v83 = (_QWORD *)((char *)v83 + v85);
        v82 += 32 * v85;
      }
      while (*(char *)v83 < -1);
      v84 = *(unsigned __int8 *)v83;
    }
    if (v84 != 255)
    {
      while (1)
      {
        v86 = *((_QWORD *)v82 + 2);
        if (*(_BYTE *)(v86 + 192))
          v87 = v86 + 40;
        else
          v87 = 0;
        v88 = (std::__shared_weak_count *)operator new(0xB0uLL);
        v88->__shared_owners_ = 0;
        v89 = (unint64_t *)&v88->__shared_owners_;
        v88->__shared_weak_owners_ = 0;
        v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05190;
        v88[4].std::__shared_count = 0u;
        *(_OWORD *)&v88[4].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[1].__shared_owners_ = 0u;
        v88[2].std::__shared_count = 0u;
        *(_OWORD *)&v88[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[3].__shared_owners_ = 0u;
        *(_OWORD *)&v88[5].__shared_owners_ = 0u;
        v88[6].std::__shared_count = 0u;
        *(_OWORD *)&v88[6].__shared_weak_owners_ = 0u;
        LOBYTE(v88[3].__shared_owners_) = 1;
        v88[4].__vftable = 0;
        v88[4].__shared_owners_ = 0;
        v88[3].__shared_weak_owners_ = 0;
        p_shared_weak_owners = &v88[3].__shared_weak_owners_;
        v88[4].__shared_weak_owners_ = 0xFFEFFFFFFFFFFFFFLL;
        v88[5].__shared_owners_ = 0x3FF0000000000000;
        v88[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC600;
        *(uint64_t *)((char *)&v88[6].__shared_weak_owners_ + 5) = 0;
        *(_OWORD *)&v88[5].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[6].__shared_owners_ = 0u;
        v91 = *(int8x16_t *)(v87 + 8);
        v88[2].__vftable = *(std::__shared_weak_count_vtbl **)(v87 + 24);
        *(int8x16_t *)&v88[1].__shared_owners_ = v91;
        if ((a2 & 1) == 0)
        {
          v92 = *(_QWORD *)(v87 + 32);
          v93 = *(_QWORD *)(v87 + 40);
          v226 = v93;
          v94 = *(_DWORD *)(v87 + 48);
          v95 = (*v229)[224];
          v225 = v94;
          if (v95)
          {
            v96 = v93 ^ __ROR4__(v94, 13);
            v97 = (uint8x8_t)vcnt_s8(v95);
            v97.i16[0] = vaddlv_u8(v97);
            if (v97.u32[0] > 1uLL)
            {
              v98 = v96;
              if (*(_QWORD *)&v95 <= v96)
                v98 = v96 % *(_QWORD *)&v95;
            }
            else
            {
              v98 = (v95.i32[0] - 1) & v96;
            }
            v99 = *(uint64_t ***)(*(_QWORD *)&(*v229)[223] + 8 * v98);
            if (v99)
            {
              v100 = *v99;
              if (v100)
              {
                if (v97.u32[0] < 2uLL)
                {
                  v101 = *(_QWORD *)&v95 - 1;
                  while (1)
                  {
                    v103 = v100[1];
                    if (v103 == v96)
                    {
                      if (*((_DWORD *)v100 + 8) == v94 && v100[2] == v92 && *((_DWORD *)v100 + 6) == (_DWORD)v226)
                        goto LABEL_137;
                    }
                    else if ((v103 & v101) != v98)
                    {
                      goto LABEL_138;
                    }
                    v100 = (uint64_t *)*v100;
                    if (!v100)
                      goto LABEL_138;
                  }
                }
                do
                {
                  v102 = v100[1];
                  if (v102 == v96)
                  {
                    if (*((_DWORD *)v100 + 8) == v94 && v100[2] == v92 && *((_DWORD *)v100 + 6) == (_DWORD)v226)
                    {
LABEL_137:
                      v224 = (std::__shared_weak_count_vtbl *)(v100 + 5);
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    if (v102 >= *(_QWORD *)&v95)
                      v102 %= *(_QWORD *)&v95;
                    if (v102 != v98)
                      break;
                  }
                  v100 = (uint64_t *)*v100;
                }
                while (v100);
              }
            }
          }
LABEL_138:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 156, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0);
          v223 = v92;
          v104 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v105 = qword_254A6DE40;
            for (j = qword_254A6DE48; v105 != j; v105 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v105)(*(_QWORD *)(v105 + 8), "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          }
          v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v92 = v223;
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          v224 = 0;
LABEL_146:
          _Q0 = *(_OWORD *)(v87 + 64);
          v109 = *(_QWORD *)(v87 + 88);
          _D3 = *(_QWORD *)(v87 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v87 + 80) * *(double *)(v87 + 80)) + -1.0) > 0.000001)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0);
            v112 = v92;
            v113 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v115 = qword_254A6DE40;
              for (k = qword_254A6DE48; v115 != k; v115 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v115)(*(_QWORD *)(v115 + 8), "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            }
            v116 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_306:
              abort();
            v92 = v112;
            qword_254A6DE58(unk_254A6DE60, "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            p_shared_weak_owners = &v88[3].__shared_weak_owners_;
          }
          v88[2].__shared_owners_ = v92;
          v88[2].__shared_weak_owners_ = v226;
          LODWORD(v88[3].__vftable) = v225;
          v88[5].__vftable = v224;
          v117 = *(_OWORD *)(v87 + 64);
          p_shared_weak_owners[2] = *(_QWORD *)(v87 + 80);
          *(_OWORD *)p_shared_weak_owners = v117;
          v88[4].__shared_weak_owners_ = v109;
          if ((((uint64_t (*)(std::__shared_weak_count *))v88[1].__on_zero_shared)(&v88[1]) & 1) == 0)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 162, (uint64_t)"result", 6, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0);
            v118 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v119 = qword_254A6DE40;
              for (m = qword_254A6DE48; v119 != m; v119 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v119)(*(_QWORD *)(v119 + 8), "result", 6, "Fail to set anchor", 18);
            }
            v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_306;
            qword_254A6DE58(unk_254A6DE60, "result", 6, "Fail to set anchor", 18);
          }
        }
        if (BYTE4(v88[7].__vftable))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 167, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0);
          v122 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v123 = qword_254A6DE40;
            for (n = qword_254A6DE48; v123 != n; v123 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v123)(*(_QWORD *)(v123 + 8), "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
          }
          v125 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
        }
        if (*(_BYTE *)(v87 + 148))
        {
          LODWORD(v88[5].__shared_weak_owners_) = *(_DWORD *)(v87 + 112);
          HIDWORD(v88[5].__shared_weak_owners_) = *(_DWORD *)(v87 + 116);
          LODWORD(v88[6].__vftable) = *(_DWORD *)(v87 + 120);
          HIDWORD(v88[6].__vftable) = *(_DWORD *)(v87 + 124);
          LODWORD(v88[6].__shared_owners_) = *(_DWORD *)(v87 + 128);
          HIDWORD(v88[6].__shared_owners_) = *(_DWORD *)(v87 + 132);
          LODWORD(v88[6].__shared_weak_owners_) = *(_DWORD *)(v87 + 136);
          HIDWORD(v88[6].__shared_weak_owners_) = *(_DWORD *)(v87 + 140);
          v91.i32[0] = *(_DWORD *)(v87 + 144);
          LODWORD(v88[7].__vftable) = v91.i32[0];
          v126 = *(int8x16_t *)&v88[5].__shared_weak_owners_;
          v127 = *(int8x16_t *)&v88[6].__shared_owners_;
          v128 = (int32x4_t)vextq_s8(v126, v127, 0xCuLL);
          v129 = (int32x4_t)vextq_s8(v127, v91, 8uLL);
          v130 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v128, (int8x16_t)v128, 0xCuLL), (int8x16_t)v128, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v129, v129), (int8x16_t)v129, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v128, v128), (int8x16_t)v128, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v129, (int8x16_t)v129, 0xCuLL), (int8x16_t)v129, 8uLL));
          BYTE4(v88[7].__vftable) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v130.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1), *(float32x2_t *)v126.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)((char *)&v88[7].__vftable + 5) = *(_WORD *)(v87 + 149);
        v131 = *(_QWORD *)(v86 + 24);
        v132 = *(_QWORD *)(v86 + 32);
        v243 = 0uLL;
        if ((a2 & 1) == 0)
          break;
        v244 = 0xFFFFFFFFBF800000;
        v245 = 0;
        *(_QWORD *)&v246 = 0;
        DWORD2(v246) = 2143289344;
        v133 = *(uint64_t **)(v86 + 200);
        *(_QWORD *)&v230 = &off_24C9FC700;
        *((_QWORD *)&v230 + 1) = v131;
        v231 = v132;
        v232 = &v244;
        v233 = v88 + 1;
        v134 = sub_20FCEEEF0((uint64_t)&v236, v133);
        sub_20FCEDD68((uint64_t *)&v242, (uint64_t **)&v234, v134, (uint64_t)&v230);
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
        v135 = v242;
        v243 = v242;
        v137 = *(_QWORD *)(v86 + 200);
        v139 = *(_QWORD *)(v242 + 200);
        v138 = *(_QWORD *)(v242 + 208);
        v140 = *(_QWORD *)v137;
        v141 = *(_DWORD *)(v137 + 8);
        v142 = *(_DWORD *)(v137 + 16);
        if (v138 != v139)
        {
          v143 = (v138 - v139) >> 6;
          while (1)
          {
            v144 = v143 >> 1;
            v145 = v139 + (v143 >> 1 << 6);
            v146 = *(_DWORD *)(v145 + 16);
            v147 = v146 >= v142;
            if (v146 != v142)
              goto LABEL_184;
            if (*(_QWORD *)v145 >= v140)
              break;
LABEL_178:
            v139 = v145 + 64;
            v144 = v143 + ~v144;
LABEL_179:
            v143 = v144;
            if (!v144)
              goto LABEL_236;
          }
          if (*(_QWORD *)v145 != v140)
            goto LABEL_179;
          v147 = *(_DWORD *)(v145 + 8) >= v141;
LABEL_184:
          if (v147)
            goto LABEL_179;
          goto LABEL_178;
        }
LABEL_236:
        if (v139 == v138 || *(_DWORD *)(v139 + 16) != v142 || *(_QWORD *)v139 != v140 || *(_DWORD *)(v139 + 8) != v141)
          goto LABEL_248;
        v182 = *(_QWORD **)(v242 + 16);
        if (!v182)
          goto LABEL_243;
        if (sub_20EE6BF60(v182, (uint64_t *)v137, *(_DWORD *)(v139 + 28)))
        {
          v138 = *(_QWORD *)(v135 + 208);
LABEL_243:
          if (v139 + 64 != v138)
          {
            do
            {
              v183 = v139 + 64;
              *(_OWORD *)v139 = *(_OWORD *)(v139 + 64);
              *(_DWORD *)(v139 + 16) = *(_DWORD *)(v139 + 80);
              v184 = *(_QWORD *)(v139 + 96);
              *(_QWORD *)(v139 + 24) = *(_QWORD *)(v139 + 88);
              *(_QWORD *)(v139 + 32) = v184;
              *(_OWORD *)(v139 + 40) = *(_OWORD *)(v139 + 104);
              v185 = v139 + 128;
              *(_DWORD *)(v139 + 56) = *(_DWORD *)(v139 + 120);
              v139 += 64;
            }
            while (v185 != v138);
            v139 = v183;
          }
          *(_QWORD *)(v135 + 208) = v139;
        }
LABEL_248:
        if (v136)
        {
          v186 = (unint64_t *)&v136->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        do
LABEL_253:
          v188 = __ldaxr(v89);
        while (__stlxr(v188 - 1, v89));
        if (v188)
        {
          v190 = *((char *)v83 + 1);
          v83 = (_QWORD *)((char *)v83 + 1);
          LOBYTE(v189) = v190;
          v82 += 32;
          if (v190 <= -2)
            goto LABEL_258;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          v191 = *((char *)v83 + 1);
          v83 = (_QWORD *)((char *)v83 + 1);
          LOBYTE(v189) = v191;
          v82 += 32;
          if (v191 <= -2)
          {
            do
            {
LABEL_258:
              v192 = (__clz(__rbit64(((*v83 >> 7) & ~*v83 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v83 = (_QWORD *)((char *)v83 + v192);
              v82 += 32 * v192;
              v189 = *(char *)v83;
            }
            while (v189 < -1);
          }
        }
        if (v189 == 255)
          goto LABEL_276;
      }
      v148 = *(_QWORD *)(v86 + 200);
      v149 = *(_QWORD *)(v86 + 208);
      if (v148 == v149)
        goto LABEL_253;
      while (1)
      {
        v150 = *(_OWORD *)v148;
        v231 = *(_QWORD *)(v148 + 16);
        v230 = v150;
        v152 = v229[5];
        v151 = v229[6];
        if (v151 != v152)
        {
          v153 = ((char *)v151 - (char *)v152) >> 4;
          while (1)
          {
            v154 = v153 >> 1;
            v155 = &v152[2 * (v153 >> 1)];
            v156 = *v155;
            v157 = *(_DWORD *)(*(_QWORD *)v155 + 16);
            v158 = v157 >= v231;
            if (v157 != (_DWORD)v231)
              goto LABEL_198;
            if (**(_QWORD **)&v156 >= (unint64_t)v230)
              break;
LABEL_192:
            v152 = v155 + 2;
            v154 = v153 + ~v154;
LABEL_193:
            v153 = v154;
            if (!v154)
              goto LABEL_201;
          }
          if (**(_QWORD **)&v156 != (_QWORD)v230)
            goto LABEL_193;
          v158 = *(_DWORD *)(*(_QWORD *)&v156 + 8) >= DWORD2(v230);
LABEL_198:
          if (v158)
            goto LABEL_193;
          goto LABEL_192;
        }
LABEL_201:
        if (v152 != v151)
        {
          v159 = *v152;
          if (*(_DWORD *)(*(_QWORD *)v152 + 16) == (_DWORD)v231
            && **(_QWORD **)&v159 == (_QWORD)v230
            && *(_DWORD *)(*(_QWORD *)&v159 + 8) == DWORD2(v230))
          {
            v151 = v152;
          }
        }
        v160 = *v151;
        v161 = *(_DWORD *)(v148 + 28);
        v162 = *(_QWORD *)(*(_QWORD *)&v160 + 72);
        v163 = (__int128 *)(v162 + 40 * v161);
        v164 = v243;
        if ((_QWORD)v243)
        {
          v244 = *(_OWORD *)v148;
          v245 = *(_QWORD *)(v148 + 16);
          v246 = *v163;
          v165 = v162 + 40 * v161;
          v247 = *(_OWORD *)(v165 + 16);
          v248 = *(_DWORD *)(v165 + 32);
          v166 = *(_QWORD *)(v243 + 200);
          v167 = *(_QWORD *)(v243 + 208);
          if (v167 != v166)
          {
            v168 = (v167 - v166) >> 6;
            while (1)
            {
              v169 = v168 >> 1;
              v170 = v166 + (v168 >> 1 << 6);
              v171 = *(_DWORD *)(v170 + 16);
              v172 = v171 >= v245;
              if (v171 != (_DWORD)v245)
                goto LABEL_215;
              if (*(_QWORD *)v170 >= (unint64_t)v244)
                break;
LABEL_209:
              v166 = v170 + 64;
              v169 = v168 + ~v169;
LABEL_210:
              v168 = v169;
              if (!v169)
                goto LABEL_218;
            }
            if (*(_QWORD *)v170 != (_QWORD)v244)
              goto LABEL_210;
            v172 = *(_DWORD *)(v170 + 8) >= DWORD2(v244);
LABEL_215:
            if (v172)
              goto LABEL_210;
            goto LABEL_209;
          }
LABEL_218:
          if (v166 == v167
            || *(_DWORD *)(v166 + 16) != (_DWORD)v231
            || *(_QWORD *)v166 != (_QWORD)v230
            || (v173 = *(_QWORD *)(v243 + 208), *(_DWORD *)(v166 + 8) != DWORD2(v230)))
          {
            v173 = sub_20FCEFA44((char **)(v243 + 200), (char *)v166, &v244);
            v167 = *(_QWORD *)(v164 + 208);
          }
          if (v167 != v173)
            sub_20FCF0734(v164, (uint64_t)&v230, (uint64_t)v163);
        }
        else
        {
          *(_QWORD *)&v244 = &off_24C9FC700;
          *((_QWORD *)&v244 + 1) = v131;
          v245 = v132;
          *(_QWORD *)&v246 = v162 + 40 * v161;
          *((_QWORD *)&v246 + 1) = v88 + 1;
          v174 = sub_20FCEEEF0((uint64_t)&v236, (uint64_t *)&v230);
          sub_20FCEDD68((uint64_t *)&v242, (uint64_t **)&v234, v174, (uint64_t)&v244);
          v175 = v242;
          v242 = 0uLL;
          v176 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
          v243 = v175;
          if (!v176)
            goto LABEL_229;
          v177 = (unint64_t *)&v176->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
            if (*((_QWORD *)&v242 + 1))
            {
LABEL_230:
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
          }
          else
          {
LABEL_229:
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
            if (*((_QWORD *)&v242 + 1))
              goto LABEL_230;
          }
        }
        v148 += 64;
        if (v148 == v149)
        {
          v136 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
          goto LABEL_248;
        }
      }
    }
LABEL_276:
    v193 = v229[2];
    v194 = (_OWORD *)v234;
    if ((__int128 *)v234 != (__int128 *)((char *)&v234 + 8))
    {
      do
      {
        *(_QWORD *)&v243 = v193;
        v195 = *((_QWORD *)v194 + 4);
        *(_QWORD *)&v230 = v194 + 2;
        *((_QWORD *)&v230 + 1) = v194 + 3;
        sub_20FCF0D40((uint64_t)&v244, (uint64_t **)&v243, v195, *((_DWORD *)v194 + 10), (_OWORD **)&v230, (_QWORD **)&v230 + 1);
        v196 = (_QWORD *)*((_QWORD *)v194 + 1);
        if (v196)
        {
          do
          {
            v197 = v196;
            v196 = (_QWORD *)*v196;
          }
          while (v196);
        }
        else
        {
          do
          {
            v197 = (_OWORD *)*((_QWORD *)v194 + 2);
            _ZF = *(_QWORD *)v197 == (_QWORD)v194;
            v194 = v197;
          }
          while (!_ZF);
        }
        v194 = v197;
      }
      while (v197 != (__int128 *)((char *)&v234 + 8));
      v193 = v229[2];
    }
    v198 = (_QWORD *)*v193;
    v199 = (char *)v193[1];
    v200 = **(char **)v193;
    v13 = a1;
    if (v200 <= -2)
    {
      do
      {
        v201 = (__clz(__rbit64(((*v198 >> 7) & ~*v198 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v198 = (_QWORD *)((char *)v198 + v201);
        v199 += 32 * v201;
        v200 = *(char *)v198;
      }
      while (v200 < -1);
    }
    if (v200 != 255)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)v199 + 2) + 16) = 0;
        v203 = *((unsigned __int8 *)v198 + 1);
        v198 = (_QWORD *)((char *)v198 + 1);
        v202 = v203;
        v199 += 32;
        if ((char)v203 <= -2)
        {
          do
          {
            v204 = (__clz(__rbit64(((*v198 >> 7) & ~*v198 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v198 = (_QWORD *)((char *)v198 + v204);
            v199 += 32 * v204;
          }
          while (*(char *)v198 < -1);
          v202 = *(unsigned __int8 *)v198;
        }
      }
      while (v202 != 255);
    }
    v205 = v240;
    if (v240)
    {
      v206 = (unint64_t *)&v240->__shared_owners_;
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    sub_20E8E90DC((uint64_t)&v236);
    sub_20EE7D0A8(*((_QWORD **)&v234 + 1));
  }
  v208 = *(_QWORD *)(v13 + 64);
  if (v208)
  {
    v209 = v229[8];
    v210 = *(_OWORD *)(v208 + 16);
    *(_OWORD *)v209->i8 = *(_OWORD *)v208;
    *(_OWORD *)v209[2].i8 = v210;
    v211 = *(_OWORD *)(v208 + 32);
    v209[6] = *(int8x8_t *)(v208 + 48);
    *(_OWORD *)v209[4].i8 = v211;
    v209[7] = *(int8x8_t *)(v208 + 56);
    v212 = *(_OWORD *)(v208 + 64);
    v209[10] = *(int8x8_t *)(v208 + 80);
    *(_OWORD *)v209[8].i8 = v212;
    v213 = *(_OWORD *)(v208 + 88);
    v209[13] = *(int8x8_t *)(v208 + 104);
    *(_OWORD *)v209[11].i8 = v213;
    v214 = *(_OWORD *)(v208 + 112);
    v209[16] = *(int8x8_t *)(v208 + 128);
    *(_OWORD *)v209[14].i8 = v214;
    v215 = *(_OWORD *)(v208 + 136);
    v209[19] = *(int8x8_t *)(v208 + 152);
    *(_OWORD *)v209[17].i8 = v215;
    v217 = *(_OWORD *)(v208 + 192);
    v216 = *(_OWORD *)(v208 + 208);
    v218 = *(_OWORD *)(v208 + 176);
    v209[28] = *(int8x8_t *)(v208 + 224);
    *(_OWORD *)v209[24].i8 = v217;
    *(_OWORD *)v209[26].i8 = v216;
    *(_OWORD *)v209[22].i8 = v218;
    *(_OWORD *)v209[20].i8 = *(_OWORD *)(v208 + 160);
    v219 = *(_OWORD *)(v208 + 264);
    v220 = *(_OWORD *)(v208 + 280);
    v221 = *(int8x8_t *)(v208 + 296);
    *(_OWORD *)v209[31].i8 = *(_OWORD *)(v208 + 248);
    v209[37] = v221;
    *(_OWORD *)v209[33].i8 = v219;
    *(_OWORD *)v209[35].i8 = v220;
    *(_OWORD *)v209[29].i8 = *(_OWORD *)(v208 + 232);
  }
  if (v229 != (int8x8_t **)v13)
    sub_20FCE9FD4((char *)v229 + 80, *(uint64_t **)(v13 + 80), *(uint64_t **)(v13 + 88), 0x80BFA02FE80BFA03 * ((uint64_t)(*(_QWORD *)(v13 + 88) - *(_QWORD *)(v13 + 80)) >> 4));
}

void sub_20FCE21FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30)
{
  sub_20EE7D0A8(a30);
  _Unwind_Resume(a1);
}

void sub_20FCE2210(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20FCE2224(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 224);
  sub_20E86665C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20FCE22F8()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2300()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2308()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2310()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2324()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE232C()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2334()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE233C()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2344()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE234C()
{
  JUMPOUT(0x20FCE2364);
}

void sub_20FCE2358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  sub_20E86665C(v41 - 208);
  do
    v43 = __ldaxr(v40);
  while (__stlxr(v43 - 1, v40));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (a39)
  {
    p_shared_owners = (unint64_t *)&a39->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a39->__on_zero_shared)(a39);
      std::__shared_weak_count::__release_weak(a39);
    }
  }
  sub_20E8E90DC(a19);
  sub_20EE7D0A8(a30);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCE23E0(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  BOOL v12;
  int64_t v13;

  v2 = result;
  v4 = (char *)result[25];
  v3 = (char *)result[26];
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 16);
  if (v3 != v4)
  {
    v8 = (v3 - v4) >> 5;
    while (1)
    {
      v9 = v8 >> 1;
      v10 = (unint64_t *)&v4[32 * (v8 >> 1)];
      v11 = *((_DWORD *)v10 + 4);
      v12 = v11 >= v7;
      if (v11 != v7)
        goto LABEL_9;
      if (*v10 >= v5)
        break;
LABEL_3:
      v4 = (char *)(v10 + 4);
      v9 = v8 + ~v9;
LABEL_4:
      v8 = v9;
      if (!v9)
        goto LABEL_12;
    }
    if (*v10 != v5)
      goto LABEL_4;
    v12 = *((_DWORD *)v10 + 2) >= v6;
LABEL_9:
    if (v12)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v4 != v3 && *((_DWORD *)v4 + 4) == v7 && *(_QWORD *)v4 == v5 && *((_DWORD *)v4 + 2) == v6)
  {
    result = (_QWORD *)result[2];
    if (result)
    {
      result = sub_20EE6BF60(result, (uint64_t *)a2, *(_DWORD *)(*((_QWORD *)v4 + 3) + 4));
      if (!(_DWORD)result)
        return result;
      v3 = (char *)v2[26];
    }
    v13 = v3 - (v4 + 32);
    if (v3 != v4 + 32)
      result = memmove(v4, v4 + 32, v3 - (v4 + 32));
    v2[26] = &v4[v13];
  }
  return result;
}

void sub_20FCE24D4(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  __int128 **v6;
  __int128 **i;
  __int128 *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int8x8_t *v46;
  int8x8_t *v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t *v50;
  int8x8_t v51;
  unsigned int v52;
  int8x8_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  int8x8_t *v65;
  uint64_t *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  uint64_t *p_shared_weak_owners;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int8x8_t v95;
  unint64_t v96;
  uint8x8_t v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t j;
  unsigned __int8 v107;
  uint64_t v109;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t k;
  uint64_t v115;
  unsigned __int8 v116;
  __int128 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t m;
  unsigned __int8 v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t n;
  unsigned __int8 v125;
  int8x16_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  int8x8_t *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  int8x8_t *v151;
  int8x8_t *v152;
  unint64_t v153;
  unint64_t v154;
  int8x8_t *v155;
  int8x8_t v156;
  unsigned int v157;
  BOOL v158;
  int8x8_t v159;
  int8x8_t v160;
  unsigned int v161;
  uint64_t v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  unint64_t v173;
  int8x8_t *v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  int8x8_t *v193;
  _OWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  _OWORD *v197;
  int8x8_t *v198;
  _QWORD *v199;
  char *v200;
  int v201;
  unint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  int8x8_t *v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  int8x8_t v222;
  uint64_t v224;
  std::__shared_weak_count_vtbl *v225;
  int v226;
  uint64_t v227;
  _QWORD *v229;
  int8x8_t **v230;
  __int128 v231;
  uint64_t v232;
  __int128 *v233;
  std::__shared_weak_count *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  int v249;

  if (*(_QWORD *)a1)
    sub_20FCE05B0(*a4, *(_QWORD **)a1);
  v230 = (int8x8_t **)a4;
  if ((a2 & 1) == 0)
  {
    v6 = *(__int128 ***)(a1 + 40);
    for (i = *(__int128 ***)(a1 + 48); v6 != i; v6 += 2)
    {
      v8 = *v6;
      v9 = operator new(0x300uLL);
      v9[1] = 0;
      v9[2] = 0;
      *v9 = &off_24C9FC5B0;
      *(_QWORD *)&v235 = sub_20F2878BC((uint64_t)(v9 + 3), v8);
      *((_QWORD *)&v235 + 1) = v9;
      if ((sub_20F286CA4((uint64_t *)v230, (char *)&v235) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 67, (uint64_t)"success", 7, (uint64_t)"Failed to add the frame.", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
      if (*((_QWORD *)&v235 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  v13 = a1;
  if ((a3 & 1) == 0)
  {
    v14 = *(_QWORD **)(a1 + 8);
    v15 = (_QWORD *)*v14;
    v229 = v14 + 1;
    if ((_QWORD *)*v14 != v14 + 1)
    {
      do
      {
        v16 = v15[6];
        if (*(_BYTE *)(v16 + 528))
          v17 = v16 + 40;
        else
          v17 = 0;
        v18 = (char *)operator new(0xB0uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = &off_24CA05190;
        *((_OWORD *)v18 + 6) = 0u;
        *((_OWORD *)v18 + 7) = 0u;
        *((_OWORD *)v18 + 2) = 0u;
        *((_OWORD *)v18 + 3) = 0u;
        *((_OWORD *)v18 + 4) = 0u;
        *((_OWORD *)v18 + 5) = 0u;
        *((_OWORD *)v18 + 8) = 0u;
        *((_OWORD *)v18 + 9) = 0u;
        *((_OWORD *)v18 + 10) = 0u;
        v18[80] = 1;
        *((_QWORD *)v18 + 12) = 0;
        *((_QWORD *)v18 + 13) = 0;
        *((_QWORD *)v18 + 11) = 0;
        *((_QWORD *)v18 + 14) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v18 + 16) = 0x3FF0000000000000;
        *((_QWORD *)v18 + 3) = &off_24C9FC600;
        v19 = v18 + 24;
        *(_QWORD *)(v18 + 165) = 0;
        *(_OWORD *)(v18 + 136) = 0u;
        *(_OWORD *)(v18 + 152) = 0u;
        *(_QWORD *)&v244 = v18 + 24;
        *((_QWORD *)&v244 + 1) = v18;
        v20 = *(_OWORD *)(v17 + 8);
        *((_QWORD *)v18 + 6) = *(_QWORD *)(v17 + 24);
        *((_OWORD *)v18 + 2) = v20;
        v21 = *(int8x16_t *)(v17 + 32);
        v231 = (__int128)v21;
        v232 = *(_QWORD *)(v17 + 48);
        if ((a2 & 1) == 0)
        {
          v22 = sub_20E9DF85C(&(*v230)[223], (uint64_t *)&v231);
          if (v22)
            v23 = v22 + 5;
          else
            v23 = 0;
          if (!v22
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 88, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          _Q0 = *(_OWORD *)(v17 + 64);
          v25 = *(_QWORD *)(v17 + 88);
          _D3 = *(_QWORD *)(v17 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v17 + 80) * *(double *)(v17 + 80)) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0)|| (*(_OWORD *)(v18 + 56) = v231, *((_DWORD *)v18 + 18) = v232, *((_QWORD *)v18 + 15) = v23, v31 = *(_OWORD *)(v17 + 64), *((_QWORD *)v18 + 13) = *(_QWORD *)(v17 + 80), *(_OWORD *)(v18 + 88) = v31, *((_QWORD *)v18 + 14) = v25, ((*(uint64_t (**)(char *))(*((_QWORD *)v18 + 3) + 16))(v19) & 1) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 94,
                 (uint64_t)"result",
                 6,
                 (uint64_t)"Fail to set anchor",
                 18,
                 (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        if (v18[172]
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 99, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_BYTE *)(v17 + 484))
        {
          *((_DWORD *)v18 + 34) = *(_DWORD *)(v17 + 448);
          *((_DWORD *)v18 + 35) = *(_DWORD *)(v17 + 452);
          *((_DWORD *)v18 + 36) = *(_DWORD *)(v17 + 456);
          *((_DWORD *)v18 + 37) = *(_DWORD *)(v17 + 460);
          *((_DWORD *)v18 + 38) = *(_DWORD *)(v17 + 464);
          *((_DWORD *)v18 + 39) = *(_DWORD *)(v17 + 468);
          *((_DWORD *)v18 + 40) = *(_DWORD *)(v17 + 472);
          *((_DWORD *)v18 + 41) = *(_DWORD *)(v17 + 476);
          v21.i32[0] = *(_DWORD *)(v17 + 480);
          *((_DWORD *)v18 + 42) = v21.i32[0];
          v32 = *(int8x16_t *)(v18 + 136);
          v33 = *(int8x16_t *)(v18 + 152);
          v34 = (int32x4_t)vextq_s8(v32, v33, 0xCuLL);
          v35 = (int32x4_t)vextq_s8(v33, v21, 8uLL);
          v36 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL));
          v18[172] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v32.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)(v18 + 173) = *(_WORD *)(v17 + 485);
        v38 = *(_QWORD *)(v16 + 24);
        v37 = *(_QWORD *)(v16 + 32);
        v243 = 0uLL;
        if ((a2 & 1) != 0)
        {
          v235 = 0xFFFFFFFFBF800000;
          v236 = 0;
          v237 = 0;
          LODWORD(v238) = 2143289344;
          v39 = v230[1];
          v40 = *(uint64_t **)(v16 + 536);
          *(_QWORD *)&v245 = &off_24C9FC700;
          *((_QWORD *)&v245 + 1) = v38;
          v246 = v37;
          *(_QWORD *)&v247 = &v235;
          *((_QWORD *)&v247 + 1) = v19;
          v41 = sub_20F28AA04(&v39[3], v40);
          sub_20F289D80((uint64_t **)v39, (int8x8_t *)v41, (uint64_t)&v245, (uint64_t **)&v242);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
          v243 = v242;
          sub_20FCE23E0((_QWORD *)v242, *(_QWORD *)(v16 + 536));
          if (!v42)
            goto LABEL_91;
          goto LABEL_88;
        }
        v43 = *(_QWORD *)(v16 + 536);
        v44 = *(_QWORD *)(v16 + 544);
        if (v43 == v44)
          goto LABEL_91;
        do
        {
          v45 = *(_OWORD *)v43;
          v246 = *(_QWORD *)(v43 + 16);
          v245 = v45;
          v47 = v230[5];
          v46 = v230[6];
          if (v46 != v47)
          {
            v48 = ((char *)v46 - (char *)v47) >> 4;
            while (1)
            {
              v49 = v48 >> 1;
              v50 = &v47[2 * (v48 >> 1)];
              v51 = *v50;
              v52 = *(_DWORD *)(*(_QWORD *)v50 + 16);
              _CF = v52 >= v246;
              if (v52 != (_DWORD)v246)
                goto LABEL_49;
              if (**(_QWORD **)&v51 >= (unint64_t)v245)
                break;
LABEL_43:
              v47 = v50 + 2;
              v49 = v48 + ~v49;
LABEL_44:
              v48 = v49;
              if (!v49)
                goto LABEL_52;
            }
            if (**(_QWORD **)&v51 != (_QWORD)v245)
              goto LABEL_44;
            _CF = *(_DWORD *)(*(_QWORD *)&v51 + 8) >= DWORD2(v245);
LABEL_49:
            if (_CF)
              goto LABEL_44;
            goto LABEL_43;
          }
LABEL_52:
          if (v47 != v46)
          {
            v54 = *v47;
            if (*(_DWORD *)(*(_QWORD *)v47 + 16) == (_DWORD)v246
              && **(_QWORD **)&v54 == (_QWORD)v245
              && *(_DWORD *)(*(_QWORD *)&v54 + 8) == DWORD2(v245))
            {
              v46 = v47;
            }
          }
          v55 = *(_QWORD *)(*(_QWORD *)v46 + 72) + 40 * *(unsigned int *)(*(_QWORD *)(v43 + 24) + 4);
          v56 = (uint64_t *)v243;
          if ((_QWORD)v243)
          {
            *(_QWORD *)&v242 = v55;
            v235 = v245;
            v236 = v246;
            v237 = v55;
            v57 = *(_QWORD *)(v243 + 200);
            v58 = *(char **)(v243 + 208);
            if (v58 != (char *)v57)
            {
              v59 = (uint64_t)&v58[-v57] >> 5;
              while (1)
              {
                v60 = v59 >> 1;
                v61 = v57 + 32 * (v59 >> 1);
                v62 = *(_DWORD *)(v61 + 16);
                v63 = v62 >= v236;
                if (v62 != (_DWORD)v236)
                  goto LABEL_66;
                if (*(_QWORD *)v61 >= (unint64_t)v235)
                  break;
LABEL_60:
                v57 = v61 + 32;
                v60 = v59 + ~v60;
LABEL_61:
                v59 = v60;
                if (!v60)
                  goto LABEL_69;
              }
              if (*(_QWORD *)v61 != (_QWORD)v235)
                goto LABEL_61;
              v63 = *(_DWORD *)(v61 + 8) >= DWORD2(v235);
LABEL_66:
              if (v63)
                goto LABEL_61;
              goto LABEL_60;
            }
LABEL_69:
            if ((char *)v57 == v58
              || *(_DWORD *)(v57 + 16) != (_DWORD)v246
              || *(_QWORD *)v57 != (_QWORD)v245
              || (v64 = *(char **)(v243 + 208), *(_DWORD *)(v57 + 8) != DWORD2(v245)))
            {
              v64 = sub_20F287F84((char **)(v243 + 200), (char *)v57, &v235);
              v58 = (char *)v56[26];
            }
            if (v58 != v64)
              sub_20EE6BDF0(v56, (uint64_t *)&v245, (uint64_t)&v242);
          }
          else
          {
            v65 = v230[1];
            *(_QWORD *)&v235 = &off_24C9FC700;
            *((_QWORD *)&v235 + 1) = v38;
            v236 = v37;
            v237 = v55;
            v238 = v244;
            v66 = sub_20F28AA04(&v65[3], (uint64_t *)&v245);
            sub_20F289D80((uint64_t **)v65, (int8x8_t *)v66, (uint64_t)&v235, (uint64_t **)&v242);
            v67 = v242;
            v242 = 0uLL;
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
            v243 = v67;
            if (!v68)
              goto LABEL_80;
            p_shared_owners = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(p_shared_owners);
            while (__stlxr(v70 - 1, p_shared_owners));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
              if (!*((_QWORD *)&v242 + 1))
                goto LABEL_40;
            }
            else
            {
LABEL_80:
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
              if (!*((_QWORD *)&v242 + 1))
                goto LABEL_40;
            }
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
LABEL_40:
          v43 += 32;
        }
        while (v43 != v44);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
        if (!*((_QWORD *)&v243 + 1))
          goto LABEL_91;
LABEL_88:
        v74 = (unint64_t *)&v42->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (v75)
        {
LABEL_91:
          v76 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
          if (*((_QWORD *)&v244 + 1))
            goto LABEL_92;
          goto LABEL_97;
        }
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        v76 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
LABEL_92:
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
LABEL_97:
        v79 = (_QWORD *)v15[1];
        if (v79)
        {
          do
          {
            v80 = v79;
            v79 = (_QWORD *)*v79;
          }
          while (v79);
        }
        else
        {
          do
          {
            v80 = (_QWORD *)v15[2];
            _ZF = *v80 == (_QWORD)v15;
            v15 = v80;
          }
          while (!_ZF);
        }
        v15 = v80;
      }
      while (v80 != v229);
    }
    *((_QWORD *)&v235 + 1) = 0;
    v236 = 0;
    *(_QWORD *)&v235 = (char *)&v235 + 8;
    sub_20FCEDC80((uint64_t)&v237);
    v240 = 0;
    v241 = 0;
    v239 = 1000;
    v81 = *(unsigned __int8 ***)(a1 + 16);
    v83 = *v81;
    v82 = v81[1];
    v84 = **v81;
    if ((char)v84 <= -2)
    {
      do
      {
        v85 = (__clz(__rbit64(((*v83 >> 7) & ~*v83 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v83 = (_QWORD *)((char *)v83 + v85);
        v82 += 32 * v85;
      }
      while (*(char *)v83 < -1);
      v84 = *(unsigned __int8 *)v83;
    }
    if (v84 != 255)
    {
      while (1)
      {
        v86 = *((_QWORD *)v82 + 2);
        if (*(_BYTE *)(v86 + 528))
          v87 = v86 + 40;
        else
          v87 = 0;
        v88 = (std::__shared_weak_count *)operator new(0xB0uLL);
        v88->__shared_owners_ = 0;
        v89 = (unint64_t *)&v88->__shared_owners_;
        v88->__shared_weak_owners_ = 0;
        v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05190;
        v88[4].std::__shared_count = 0u;
        *(_OWORD *)&v88[4].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[1].__shared_owners_ = 0u;
        v88[2].std::__shared_count = 0u;
        *(_OWORD *)&v88[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[3].__shared_owners_ = 0u;
        *(_OWORD *)&v88[5].__shared_owners_ = 0u;
        v88[6].std::__shared_count = 0u;
        *(_OWORD *)&v88[6].__shared_weak_owners_ = 0u;
        LOBYTE(v88[3].__shared_owners_) = 1;
        v88[4].__vftable = 0;
        v88[4].__shared_owners_ = 0;
        v88[3].__shared_weak_owners_ = 0;
        p_shared_weak_owners = &v88[3].__shared_weak_owners_;
        v88[4].__shared_weak_owners_ = 0xFFEFFFFFFFFFFFFFLL;
        v88[5].__shared_owners_ = 0x3FF0000000000000;
        v88[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC600;
        *(uint64_t *)((char *)&v88[6].__shared_weak_owners_ + 5) = 0;
        *(_OWORD *)&v88[5].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v88[6].__shared_owners_ = 0u;
        v91 = *(int8x16_t *)(v87 + 8);
        v88[2].__vftable = *(std::__shared_weak_count_vtbl **)(v87 + 24);
        *(int8x16_t *)&v88[1].__shared_owners_ = v91;
        if ((a2 & 1) == 0)
        {
          v92 = *(_QWORD *)(v87 + 32);
          v93 = *(_QWORD *)(v87 + 40);
          v227 = v93;
          v94 = *(_DWORD *)(v87 + 48);
          v95 = (*v230)[224];
          v226 = v94;
          if (v95)
          {
            v96 = v93 ^ __ROR4__(v94, 13);
            v97 = (uint8x8_t)vcnt_s8(v95);
            v97.i16[0] = vaddlv_u8(v97);
            if (v97.u32[0] > 1uLL)
            {
              v98 = v96;
              if (*(_QWORD *)&v95 <= v96)
                v98 = v96 % *(_QWORD *)&v95;
            }
            else
            {
              v98 = (v95.i32[0] - 1) & v96;
            }
            v99 = *(uint64_t ***)(*(_QWORD *)&(*v230)[223] + 8 * v98);
            if (v99)
            {
              v100 = *v99;
              if (v100)
              {
                if (v97.u32[0] < 2uLL)
                {
                  v101 = *(_QWORD *)&v95 - 1;
                  while (1)
                  {
                    v103 = v100[1];
                    if (v103 == v96)
                    {
                      if (*((_DWORD *)v100 + 8) == v94 && v100[2] == v92 && *((_DWORD *)v100 + 6) == (_DWORD)v227)
                        goto LABEL_137;
                    }
                    else if ((v103 & v101) != v98)
                    {
                      goto LABEL_138;
                    }
                    v100 = (uint64_t *)*v100;
                    if (!v100)
                      goto LABEL_138;
                  }
                }
                do
                {
                  v102 = v100[1];
                  if (v102 == v96)
                  {
                    if (*((_DWORD *)v100 + 8) == v94 && v100[2] == v92 && *((_DWORD *)v100 + 6) == (_DWORD)v227)
                    {
LABEL_137:
                      v225 = (std::__shared_weak_count_vtbl *)(v100 + 5);
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    if (v102 >= *(_QWORD *)&v95)
                      v102 %= *(_QWORD *)&v95;
                    if (v102 != v98)
                      break;
                  }
                  v100 = (uint64_t *)*v100;
                }
                while (v100);
              }
            }
          }
LABEL_138:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 156, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0);
          v224 = v92;
          v104 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v105 = qword_254A6DE40;
            for (j = qword_254A6DE48; v105 != j; v105 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v105)(*(_QWORD *)(v105 + 8), "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          }
          v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v92 = v224;
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          v225 = 0;
LABEL_146:
          _Q0 = *(_OWORD *)(v87 + 64);
          v109 = *(_QWORD *)(v87 + 88);
          _D3 = *(_QWORD *)(v87 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v87 + 80) * *(double *)(v87 + 80)) + -1.0) > 0.000001)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0);
            v112 = v92;
            v113 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v115 = qword_254A6DE40;
              for (k = qword_254A6DE48; v115 != k; v115 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v115)(*(_QWORD *)(v115 + 8), "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            }
            v116 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_307:
              abort();
            v92 = v112;
            qword_254A6DE58(unk_254A6DE60, "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            p_shared_weak_owners = &v88[3].__shared_weak_owners_;
          }
          v88[2].__shared_owners_ = v92;
          v88[2].__shared_weak_owners_ = v227;
          LODWORD(v88[3].__vftable) = v226;
          v88[5].__vftable = v225;
          v117 = *(_OWORD *)(v87 + 64);
          p_shared_weak_owners[2] = *(_QWORD *)(v87 + 80);
          *(_OWORD *)p_shared_weak_owners = v117;
          v88[4].__shared_weak_owners_ = v109;
          if ((((uint64_t (*)(std::__shared_weak_count *))v88[1].__on_zero_shared)(&v88[1]) & 1) == 0)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 162, (uint64_t)"result", 6, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0);
            v118 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v119 = qword_254A6DE40;
              for (m = qword_254A6DE48; v119 != m; v119 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v119)(*(_QWORD *)(v119 + 8), "result", 6, "Fail to set anchor", 18);
            }
            v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_307;
            qword_254A6DE58(unk_254A6DE60, "result", 6, "Fail to set anchor", 18);
          }
        }
        if (BYTE4(v88[7].__vftable))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 167, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0);
          v122 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v123 = qword_254A6DE40;
            for (n = qword_254A6DE48; v123 != n; v123 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v123)(*(_QWORD *)(v123 + 8), "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
          }
          v125 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
        }
        if (*(_BYTE *)(v87 + 484))
        {
          LODWORD(v88[5].__shared_weak_owners_) = *(_DWORD *)(v87 + 448);
          HIDWORD(v88[5].__shared_weak_owners_) = *(_DWORD *)(v87 + 452);
          LODWORD(v88[6].__vftable) = *(_DWORD *)(v87 + 456);
          HIDWORD(v88[6].__vftable) = *(_DWORD *)(v87 + 460);
          LODWORD(v88[6].__shared_owners_) = *(_DWORD *)(v87 + 464);
          HIDWORD(v88[6].__shared_owners_) = *(_DWORD *)(v87 + 468);
          LODWORD(v88[6].__shared_weak_owners_) = *(_DWORD *)(v87 + 472);
          HIDWORD(v88[6].__shared_weak_owners_) = *(_DWORD *)(v87 + 476);
          v91.i32[0] = *(_DWORD *)(v87 + 480);
          LODWORD(v88[7].__vftable) = v91.i32[0];
          v126 = *(int8x16_t *)&v88[5].__shared_weak_owners_;
          v127 = *(int8x16_t *)&v88[6].__shared_owners_;
          v128 = (int32x4_t)vextq_s8(v126, v127, 0xCuLL);
          v129 = (int32x4_t)vextq_s8(v127, v91, 8uLL);
          v130 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v128, (int8x16_t)v128, 0xCuLL), (int8x16_t)v128, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v129, v129), (int8x16_t)v129, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v128, v128), (int8x16_t)v128, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v129, (int8x16_t)v129, 0xCuLL), (int8x16_t)v129, 8uLL));
          BYTE4(v88[7].__vftable) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v130.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1), *(float32x2_t *)v126.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)((char *)&v88[7].__vftable + 5) = *(_WORD *)(v87 + 485);
        v131 = *(_QWORD *)(v86 + 24);
        v132 = *(_QWORD *)(v86 + 32);
        v244 = 0uLL;
        if ((a2 & 1) == 0)
          break;
        v245 = 0xFFFFFFFFBF800000;
        v246 = 0;
        *(_QWORD *)&v247 = 0;
        DWORD2(v247) = 2143289344;
        v133 = *(uint64_t **)(v86 + 536);
        *(_QWORD *)&v231 = &off_24C9FC700;
        *((_QWORD *)&v231 + 1) = v131;
        v232 = v132;
        v233 = &v245;
        v234 = v88 + 1;
        v134 = sub_20FCEEEF0((uint64_t)&v237, v133);
        sub_20FCEDD68((uint64_t *)&v243, (uint64_t **)&v235, v134, (uint64_t)&v231);
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
        v135 = v243;
        v244 = v243;
        v137 = *(_QWORD *)(v86 + 536);
        v139 = *(_QWORD *)(v243 + 200);
        v138 = *(_QWORD *)(v243 + 208);
        v140 = *(_QWORD *)v137;
        v141 = *(_DWORD *)(v137 + 8);
        v142 = *(_DWORD *)(v137 + 16);
        if (v138 != v139)
        {
          v143 = (v138 - v139) >> 6;
          while (1)
          {
            v144 = v143 >> 1;
            v145 = v139 + (v143 >> 1 << 6);
            v146 = *(_DWORD *)(v145 + 16);
            v147 = v146 >= v142;
            if (v146 != v142)
              goto LABEL_184;
            if (*(_QWORD *)v145 >= v140)
              break;
LABEL_178:
            v139 = v145 + 64;
            v144 = v143 + ~v144;
LABEL_179:
            v143 = v144;
            if (!v144)
              goto LABEL_236;
          }
          if (*(_QWORD *)v145 != v140)
            goto LABEL_179;
          v147 = *(_DWORD *)(v145 + 8) >= v141;
LABEL_184:
          if (v147)
            goto LABEL_179;
          goto LABEL_178;
        }
LABEL_236:
        if (v139 == v138 || *(_DWORD *)(v139 + 16) != v142 || *(_QWORD *)v139 != v140 || *(_DWORD *)(v139 + 8) != v141)
          goto LABEL_248;
        v182 = *(_QWORD **)(v243 + 16);
        if (!v182)
          goto LABEL_243;
        if (sub_20EE6BF60(v182, (uint64_t *)v137, *(_DWORD *)(v139 + 28)))
        {
          v138 = *(_QWORD *)(v135 + 208);
LABEL_243:
          if (v139 + 64 != v138)
          {
            do
            {
              v183 = v139 + 64;
              *(_OWORD *)v139 = *(_OWORD *)(v139 + 64);
              *(_DWORD *)(v139 + 16) = *(_DWORD *)(v139 + 80);
              v184 = *(_QWORD *)(v139 + 96);
              *(_QWORD *)(v139 + 24) = *(_QWORD *)(v139 + 88);
              *(_QWORD *)(v139 + 32) = v184;
              *(_OWORD *)(v139 + 40) = *(_OWORD *)(v139 + 104);
              v185 = v139 + 128;
              *(_DWORD *)(v139 + 56) = *(_DWORD *)(v139 + 120);
              v139 += 64;
            }
            while (v185 != v138);
            v139 = v183;
          }
          *(_QWORD *)(v135 + 208) = v139;
        }
LABEL_248:
        if (v136)
        {
          v186 = (unint64_t *)&v136->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        do
LABEL_253:
          v188 = __ldaxr(v89);
        while (__stlxr(v188 - 1, v89));
        if (v188)
        {
          v190 = *((char *)v83 + 1);
          v83 = (_QWORD *)((char *)v83 + 1);
          LOBYTE(v189) = v190;
          v82 += 32;
          if (v190 <= -2)
            goto LABEL_258;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          v191 = *((char *)v83 + 1);
          v83 = (_QWORD *)((char *)v83 + 1);
          LOBYTE(v189) = v191;
          v82 += 32;
          if (v191 <= -2)
          {
            do
            {
LABEL_258:
              v192 = (__clz(__rbit64(((*v83 >> 7) & ~*v83 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v83 = (_QWORD *)((char *)v83 + v192);
              v82 += 32 * v192;
              v189 = *(char *)v83;
            }
            while (v189 < -1);
          }
        }
        if (v189 == 255)
          goto LABEL_276;
      }
      v148 = *(_QWORD *)(v86 + 536);
      v149 = *(_QWORD *)(v86 + 544);
      if (v148 == v149)
        goto LABEL_253;
      while (1)
      {
        v150 = *(_OWORD *)v148;
        v232 = *(_QWORD *)(v148 + 16);
        v231 = v150;
        v152 = v230[5];
        v151 = v230[6];
        if (v151 != v152)
        {
          v153 = ((char *)v151 - (char *)v152) >> 4;
          while (1)
          {
            v154 = v153 >> 1;
            v155 = &v152[2 * (v153 >> 1)];
            v156 = *v155;
            v157 = *(_DWORD *)(*(_QWORD *)v155 + 16);
            v158 = v157 >= v232;
            if (v157 != (_DWORD)v232)
              goto LABEL_198;
            if (**(_QWORD **)&v156 >= (unint64_t)v231)
              break;
LABEL_192:
            v152 = v155 + 2;
            v154 = v153 + ~v154;
LABEL_193:
            v153 = v154;
            if (!v154)
              goto LABEL_201;
          }
          if (**(_QWORD **)&v156 != (_QWORD)v231)
            goto LABEL_193;
          v158 = *(_DWORD *)(*(_QWORD *)&v156 + 8) >= DWORD2(v231);
LABEL_198:
          if (v158)
            goto LABEL_193;
          goto LABEL_192;
        }
LABEL_201:
        if (v152 != v151)
        {
          v159 = *v152;
          if (*(_DWORD *)(*(_QWORD *)v152 + 16) == (_DWORD)v232
            && **(_QWORD **)&v159 == (_QWORD)v231
            && *(_DWORD *)(*(_QWORD *)&v159 + 8) == DWORD2(v231))
          {
            v151 = v152;
          }
        }
        v160 = *v151;
        v161 = *(_DWORD *)(v148 + 28);
        v162 = *(_QWORD *)(*(_QWORD *)&v160 + 72);
        v163 = (__int128 *)(v162 + 40 * v161);
        v164 = v244;
        if ((_QWORD)v244)
        {
          v245 = *(_OWORD *)v148;
          v246 = *(_QWORD *)(v148 + 16);
          v247 = *v163;
          v165 = v162 + 40 * v161;
          v248 = *(_OWORD *)(v165 + 16);
          v249 = *(_DWORD *)(v165 + 32);
          v166 = *(_QWORD *)(v244 + 200);
          v167 = *(_QWORD *)(v244 + 208);
          if (v167 != v166)
          {
            v168 = (v167 - v166) >> 6;
            while (1)
            {
              v169 = v168 >> 1;
              v170 = v166 + (v168 >> 1 << 6);
              v171 = *(_DWORD *)(v170 + 16);
              v172 = v171 >= v246;
              if (v171 != (_DWORD)v246)
                goto LABEL_215;
              if (*(_QWORD *)v170 >= (unint64_t)v245)
                break;
LABEL_209:
              v166 = v170 + 64;
              v169 = v168 + ~v169;
LABEL_210:
              v168 = v169;
              if (!v169)
                goto LABEL_218;
            }
            if (*(_QWORD *)v170 != (_QWORD)v245)
              goto LABEL_210;
            v172 = *(_DWORD *)(v170 + 8) >= DWORD2(v245);
LABEL_215:
            if (v172)
              goto LABEL_210;
            goto LABEL_209;
          }
LABEL_218:
          if (v166 == v167
            || *(_DWORD *)(v166 + 16) != (_DWORD)v232
            || *(_QWORD *)v166 != (_QWORD)v231
            || (v173 = *(_QWORD *)(v244 + 208), *(_DWORD *)(v166 + 8) != DWORD2(v231)))
          {
            v173 = sub_20FCEFA44((char **)(v244 + 200), (char *)v166, &v245);
            v167 = *(_QWORD *)(v164 + 208);
          }
          if (v167 != v173)
            sub_20FCF0734(v164, (uint64_t)&v231, (uint64_t)v163);
        }
        else
        {
          *(_QWORD *)&v245 = &off_24C9FC700;
          *((_QWORD *)&v245 + 1) = v131;
          v246 = v132;
          *(_QWORD *)&v247 = v162 + 40 * v161;
          *((_QWORD *)&v247 + 1) = v88 + 1;
          v174 = sub_20FCEEEF0((uint64_t)&v237, (uint64_t *)&v231);
          sub_20FCEDD68((uint64_t *)&v243, (uint64_t **)&v235, v174, (uint64_t)&v245);
          v175 = v243;
          v243 = 0uLL;
          v176 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
          v244 = v175;
          if (!v176)
            goto LABEL_229;
          v177 = (unint64_t *)&v176->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
            if (*((_QWORD *)&v243 + 1))
            {
LABEL_230:
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
          }
          else
          {
LABEL_229:
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
            if (*((_QWORD *)&v243 + 1))
              goto LABEL_230;
          }
        }
        v148 += 64;
        if (v148 == v149)
        {
          v136 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
          goto LABEL_248;
        }
      }
    }
LABEL_276:
    v193 = v230[2];
    v194 = (_OWORD *)v235;
    if ((__int128 *)v235 == (__int128 *)((char *)&v235 + 8))
    {
      v13 = a1;
      v199 = (_QWORD *)*v193;
      v200 = (char *)v193[1];
      v201 = **(char **)v193;
      if (v201 > -2)
      {
LABEL_287:
        if (v201 != 255)
        {
          do
          {
            *(_QWORD *)(*((_QWORD *)v200 + 2) + 16) = 0;
            v204 = *((unsigned __int8 *)v199 + 1);
            v199 = (_QWORD *)((char *)v199 + 1);
            v203 = v204;
            v200 += 32;
            if ((char)v204 <= -2)
            {
              do
              {
                v205 = (__clz(__rbit64(((*v199 >> 7) & ~*v199 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v199 = (_QWORD *)((char *)v199 + v205);
                v200 += 32 * v205;
              }
              while (*(char *)v199 < -1);
              v203 = *(unsigned __int8 *)v199;
            }
          }
          while (v203 != 255);
        }
        v206 = v241;
        if (v241)
        {
          v207 = (unint64_t *)&v241->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        sub_20E8E90DC((uint64_t)&v237);
        sub_20EE7D0A8(*((_QWORD **)&v235 + 1));
        goto LABEL_299;
      }
    }
    else
    {
      v13 = a1;
      do
      {
        *(_QWORD *)&v244 = v193;
        v195 = *((_QWORD *)v194 + 4);
        *(_QWORD *)&v231 = v194 + 2;
        *((_QWORD *)&v231 + 1) = v194 + 3;
        sub_20FCF0D40((uint64_t)&v245, (uint64_t **)&v244, v195, *((_DWORD *)v194 + 10), (_OWORD **)&v231, (_QWORD **)&v231 + 1);
        v196 = (_QWORD *)*((_QWORD *)v194 + 1);
        if (v196)
        {
          do
          {
            v197 = v196;
            v196 = (_QWORD *)*v196;
          }
          while (v196);
        }
        else
        {
          do
          {
            v197 = (_OWORD *)*((_QWORD *)v194 + 2);
            _ZF = *(_QWORD *)v197 == (_QWORD)v194;
            v194 = v197;
          }
          while (!_ZF);
        }
        v194 = v197;
      }
      while (v197 != (__int128 *)((char *)&v235 + 8));
      v198 = v230[2];
      v199 = (_QWORD *)*v198;
      v200 = (char *)v198[1];
      v201 = **(char **)v198;
      if (v201 > -2)
        goto LABEL_287;
    }
    do
    {
      v202 = (__clz(__rbit64(((*v199 >> 7) & ~*v199 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v199 = (_QWORD *)((char *)v199 + v202);
      v200 += 32 * v202;
      v201 = *(char *)v199;
    }
    while (v201 < -1);
    goto LABEL_287;
  }
LABEL_299:
  v209 = *(_QWORD *)(v13 + 64);
  if (v209)
  {
    v210 = v230[8];
    v211 = *(_OWORD *)(v209 + 16);
    *(_OWORD *)v210->i8 = *(_OWORD *)v209;
    *(_OWORD *)v210[2].i8 = v211;
    v212 = *(_OWORD *)(v209 + 32);
    v210[6] = *(int8x8_t *)(v209 + 48);
    *(_OWORD *)v210[4].i8 = v212;
    v210[7] = *(int8x8_t *)(v209 + 56);
    v213 = *(_OWORD *)(v209 + 64);
    v210[10] = *(int8x8_t *)(v209 + 80);
    *(_OWORD *)v210[8].i8 = v213;
    v214 = *(_OWORD *)(v209 + 88);
    v210[13] = *(int8x8_t *)(v209 + 104);
    *(_OWORD *)v210[11].i8 = v214;
    v215 = *(_OWORD *)(v209 + 112);
    v210[16] = *(int8x8_t *)(v209 + 128);
    *(_OWORD *)v210[14].i8 = v215;
    v216 = *(_OWORD *)(v209 + 136);
    v210[19] = *(int8x8_t *)(v209 + 152);
    *(_OWORD *)v210[17].i8 = v216;
    v218 = *(_OWORD *)(v209 + 192);
    v217 = *(_OWORD *)(v209 + 208);
    v219 = *(_OWORD *)(v209 + 176);
    v210[28] = *(int8x8_t *)(v209 + 224);
    *(_OWORD *)v210[24].i8 = v218;
    *(_OWORD *)v210[26].i8 = v217;
    *(_OWORD *)v210[22].i8 = v219;
    *(_OWORD *)v210[20].i8 = *(_OWORD *)(v209 + 160);
    v220 = *(_OWORD *)(v209 + 264);
    v221 = *(_OWORD *)(v209 + 280);
    v222 = *(int8x8_t *)(v209 + 296);
    *(_OWORD *)v210[31].i8 = *(_OWORD *)(v209 + 248);
    v210[37] = v222;
    *(_OWORD *)v210[33].i8 = v220;
    *(_OWORD *)v210[35].i8 = v221;
    *(_OWORD *)v210[29].i8 = *(_OWORD *)(v209 + 232);
  }
  if (v230 != (int8x8_t **)v13)
    sub_20FCE9FD4((char *)v230 + 80, *(uint64_t **)(v13 + 80), *(uint64_t **)(v13 + 88), 0x80BFA02FE80BFA03 * ((uint64_t)(*(_QWORD *)(v13 + 88) - *(_QWORD *)(v13 + 80)) >> 4));
}

void sub_20FCE3E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30)
{
  sub_20EE7D0A8(a30);
  _Unwind_Resume(a1);
}

void sub_20FCE3E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20FCE3E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 224);
  sub_20E86665C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20FCE3F64()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3F6C()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3F74()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3F7C()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3F90()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3F98()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3FA0()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3FA8()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3FB0()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3FB8()
{
  JUMPOUT(0x20FCE3FD0);
}

void sub_20FCE3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  sub_20E86665C(v41 - 208);
  do
    v43 = __ldaxr(v40);
  while (__stlxr(v43 - 1, v40));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (a39)
  {
    p_shared_owners = (unint64_t *)&a39->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a39->__on_zero_shared)(a39);
      std::__shared_weak_count::__release_weak(a39);
    }
  }
  sub_20E8E90DC(a19);
  sub_20EE7D0A8(a30);
  _Unwind_Resume(a1);
}

void sub_20FCE404C(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  __int128 **v5;
  __int128 **v6;
  char **v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int8x8_t **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int8x16_t *v34;
  uint64_t v35;
  int8x16_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v40;
  __int128 v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  int64_t v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  size_t prime;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint8x8_t v112;
  uint64_t v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  _QWORD *v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t *v122;
  char *v123;
  int8x16_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int8x8_t v128;
  unint64_t v129;
  uint8x8_t v130;
  unint64_t v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t i;
  unsigned __int8 v140;
  uint64_t v142;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t j;
  unsigned __int8 v149;
  __int128 v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t k;
  unsigned __int8 v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t m;
  unsigned __int8 v158;
  int8x16_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int8x16_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t *v165;
  int8x8_t *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  BOOL v179;
  uint64_t v180;
  __int128 v181;
  int8x8_t *v182;
  int8x8_t *v183;
  unint64_t v184;
  unint64_t v185;
  int8x8_t *v186;
  int8x8_t v187;
  unsigned int v188;
  BOOL v189;
  int8x8_t v190;
  int8x8_t v191;
  unsigned int v192;
  uint64_t v193;
  __int128 *v194;
  unint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int v202;
  BOOL v203;
  unint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unsigned int v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  unint64_t v215;
  unint64_t v216;
  int8x8_t *v217;
  int8x16_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t **v225;
  uint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void **v232;
  char *v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  float v237;
  float v238;
  uint64_t v239;
  _QWORD *v240;
  _BOOL8 v241;
  unint64_t v242;
  unint64_t v243;
  size_t v244;
  unint64_t v245;
  uint8x8_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int8x8_t v250;
  unsigned int v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t v254;
  uint8x8_t v255;
  uint64_t v256;
  unint64_t *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t *v277;
  _OWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v283;
  uint64_t v284;
  uint64_t n;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  unint64_t v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  _QWORD *v297;
  _OWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  int v303;
  int v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  int8x8_t *v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  int8x8_t v322;
  int64x2_t v324;
  uint64_t *v326;
  std::__shared_weak_count *v327;
  unsigned int v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  int64x2_t v338;
  _QWORD *v340;
  int8x16_t *v341;
  uint64_t v342;
  int8x16_t v343;
  std::__shared_weak_count *v344;
  __int128 *v345;
  char *v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  std::__shared_weak_count *v351;
  __int128 v352;
  __int128 v353;
  float v354;
  uint64_t v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  __int128 v358;
  std::__shared_weak_count *v359;
  __int128 v360;
  __int128 v361;
  int v362;
  __int128 v363;
  __int128 v364;

  if (*(_QWORD *)a1)
    sub_20FCE05B0(*a4, *(_QWORD **)a1);
  v326 = a4;
  if ((a2 & 1) == 0)
  {
    v5 = *(__int128 ***)(a1 + 40);
    v6 = *(__int128 ***)(a1 + 48);
    if (v5 != v6)
    {
      v7 = (char **)(a4 + 5);
      while (1)
      {
        v8 = *v5;
        v9 = operator new(0x300uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = &off_24C9FC5B0;
        v10 = v9 + 3;
        sub_20F2878BC((uint64_t)(v9 + 3), v8);
        *(_QWORD *)&v350 = v9 + 3;
        *((_QWORD *)&v350 + 1) = v9;
        v12 = v326[5];
        v11 = v326[6];
        if (v11 != v12)
          break;
LABEL_18:
        if (v12 != v11)
        {
          v21 = *(_QWORD *)v12;
          if (*(_DWORD *)(*(_QWORD *)v12 + 16) == *((_DWORD *)v9 + 10)
            && *(_QWORD *)v21 == *v10
            && *(_DWORD *)(v21 + 8) == *((_DWORD *)v9 + 8))
          {
            goto LABEL_514;
          }
        }
        v22 = v9[6];
        if (!v22)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 114, (uint64_t)"vio_frame->lens_model_", 22, (uint64_t)"VIO Frame Lens is not set!", 26, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v10 = (_QWORD *)v350;
          v22 = *(_QWORD *)(v350 + 24);
        }
        if (!sub_20F286E1C(*v326, (uint64_t)v10, v22)
          || (char *)v326[6] == sub_20F286FF8(v7, v12, (char *)&v350))
        {
LABEL_514:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 67, (uint64_t)"success", 7, (uint64_t)"Failed to add the frame.", 24, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
        if (*((_QWORD *)&v350 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v5 += 2;
        if (v5 == v6)
          goto LABEL_33;
      }
      v13 = (v11 - v12) >> 4;
      v14 = *((_DWORD *)v9 + 10);
      v15 = v9[3];
      while (1)
      {
        v16 = v13 >> 1;
        v17 = v12 + 16 * (v13 >> 1);
        v18 = *(_QWORD *)v17;
        v19 = *(_DWORD *)(*(_QWORD *)v17 + 16);
        _CF = v19 >= v14;
        if (v19 != v14)
          goto LABEL_15;
        if (*(_QWORD *)v18 >= v15)
          break;
LABEL_9:
        v12 = v17 + 16;
        v16 = v13 + ~v16;
LABEL_10:
        v13 = v16;
        if (!v16)
          goto LABEL_18;
      }
      if (*(_QWORD *)v18 != v15)
        goto LABEL_10;
      _CF = *(_DWORD *)(v18 + 8) >= *((_DWORD *)v9 + 8);
LABEL_15:
      if (_CF)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
LABEL_33:
  v26 = a1;
  v27 = (int8x8_t **)v326;
  if ((a3 & 1) == 0)
  {
    v28 = *(_QWORD **)(a1 + 8);
    v29 = (_QWORD *)*v28;
    v340 = v28 + 1;
    if ((_QWORD *)*v28 != v28 + 1)
    {
      v338 = vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        v30 = v29[6];
        if (*(_BYTE *)(v30 + 192))
          v31 = v30 + 40;
        else
          v31 = 0;
        v32 = (char *)operator new(0x200uLL);
        *(_QWORD *)v32 = &off_24CA051E0;
        *((_QWORD *)v32 + 1) = 0;
        v33 = v32 + 24;
        *((_OWORD *)v32 + 2) = 0u;
        *((_OWORD *)v32 + 3) = 0u;
        *((_OWORD *)v32 + 4) = 0u;
        *((_OWORD *)v32 + 5) = 0u;
        *((_OWORD *)v32 + 6) = 0u;
        *((_OWORD *)v32 + 7) = 0u;
        *((_OWORD *)v32 + 8) = 0u;
        *((_OWORD *)v32 + 9) = 0u;
        *((_OWORD *)v32 + 10) = 0u;
        *((_OWORD *)v32 + 11) = 0u;
        *((_OWORD *)v32 + 12) = 0u;
        *((_OWORD *)v32 + 13) = 0u;
        *((_OWORD *)v32 + 14) = 0u;
        *((_OWORD *)v32 + 15) = 0u;
        *((_OWORD *)v32 + 16) = 0u;
        *((_OWORD *)v32 + 17) = 0u;
        *((_OWORD *)v32 + 18) = 0u;
        *((_OWORD *)v32 + 19) = 0u;
        *((_OWORD *)v32 + 20) = 0u;
        *((_OWORD *)v32 + 21) = 0u;
        *((_OWORD *)v32 + 22) = 0u;
        *((_OWORD *)v32 + 23) = 0u;
        *((_OWORD *)v32 + 24) = 0u;
        *((_OWORD *)v32 + 25) = 0u;
        *((_OWORD *)v32 + 26) = 0u;
        *((_OWORD *)v32 + 27) = 0u;
        *((_OWORD *)v32 + 28) = 0u;
        *((_OWORD *)v32 + 29) = 0u;
        *((_OWORD *)v32 + 30) = 0u;
        *((_OWORD *)v32 + 31) = 0u;
        v32[80] = 1;
        *((_QWORD *)v32 + 11) = 0;
        *((_QWORD *)v32 + 12) = 0;
        *((_QWORD *)v32 + 13) = 0;
        *((_QWORD *)v32 + 14) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v32 + 16) = 0x3FF0000000000000;
        *(_OWORD *)(v32 + 136) = 0u;
        *(_OWORD *)(v32 + 152) = 0u;
        *(_OWORD *)(v32 + 168) = 0u;
        *(_OWORD *)(v32 + 184) = 0u;
        *(_OWORD *)(v32 + 200) = 0u;
        *(_OWORD *)(v32 + 216) = 0u;
        *(_OWORD *)(v32 + 232) = 0u;
        *(_OWORD *)(v32 + 248) = 0u;
        *(_OWORD *)(v32 + 264) = 0u;
        *(_OWORD *)(v32 + 280) = 0u;
        *(_OWORD *)(v32 + 296) = 0u;
        *(_OWORD *)(v32 + 312) = 0u;
        *(_OWORD *)(v32 + 328) = 0u;
        *(_OWORD *)(v32 + 344) = 0u;
        *(_OWORD *)(v32 + 360) = 0u;
        *(_OWORD *)(v32 + 376) = 0u;
        *((_QWORD *)v32 + 49) = 0;
        *((int64x2_t *)v32 + 25) = v338;
        *((_QWORD *)v32 + 58) = 0xBFF0000000000000;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = &off_24C9FD120;
        v34 = (int8x16_t *)(v32 + 472);
        *(_OWORD *)(v32 + 472) = 0u;
        *(_OWORD *)(v32 + 488) = 0u;
        *(_QWORD *)(v32 + 501) = 0;
        *(_QWORD *)&v347 = v32 + 24;
        *((_QWORD *)&v347 + 1) = v32;
        v35 = *(_QWORD *)(v31 + 24);
        *((_OWORD *)v32 + 2) = *(_OWORD *)(v31 + 8);
        *((_QWORD *)v32 + 6) = v35;
        v36 = *(int8x16_t *)(v31 + 32);
        v343 = v36;
        v344 = *(std::__shared_weak_count **)(v31 + 48);
        if ((a2 & 1) == 0)
        {
          v37 = sub_20E9DF85C((_QWORD *)(*v326 + 1784), v343.i64);
          if (v37)
            v38 = v37 + 5;
          else
            v38 = 0;
          if (!v37
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 88, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          _Q0 = *(_OWORD *)(v31 + 64);
          v40 = *(_QWORD *)(v31 + 88);
          _D3 = *(_QWORD *)(v31 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v31 + 80) * *(double *)(v31 + 80)) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0)|| (*(int8x16_t *)(v32 + 56) = v343, *((_DWORD *)v32 + 18) = (_DWORD)v344, *((_QWORD *)v32 + 15) = v38, v45 = *(_OWORD *)(v31 + 64), *((_QWORD *)v32 + 13) = *(_QWORD *)(v31 + 80), *(_OWORD *)(v32 + 88) = v45, *((_QWORD *)v32 + 14) = v40, ((*(uint64_t (**)(char *))(*((_QWORD *)v32 + 3) + 16))(v33) & 1) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 94,
                 (uint64_t)"result",
                 6,
                 (uint64_t)"Fail to set anchor",
                 18,
                 (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        if (v32[508]
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 99, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_BYTE *)(v31 + 148))
        {
          *((_DWORD *)v32 + 118) = *(_DWORD *)(v31 + 112);
          *((_DWORD *)v32 + 119) = *(_DWORD *)(v31 + 116);
          *((_DWORD *)v32 + 120) = *(_DWORD *)(v31 + 120);
          *((_DWORD *)v32 + 121) = *(_DWORD *)(v31 + 124);
          *((_DWORD *)v32 + 122) = *(_DWORD *)(v31 + 128);
          *((_DWORD *)v32 + 123) = *(_DWORD *)(v31 + 132);
          *((_DWORD *)v32 + 124) = *(_DWORD *)(v31 + 136);
          *((_DWORD *)v32 + 125) = *(_DWORD *)(v31 + 140);
          *((_DWORD *)v32 + 126) = *(_DWORD *)(v31 + 144);
          v36.i32[0] = *((_DWORD *)v32 + 126);
          v46 = *(int8x16_t *)(v32 + 488);
          v47 = (int32x4_t)vextq_s8(*v34, v46, 0xCuLL);
          v48 = (int32x4_t)vextq_s8(v46, v36, 8uLL);
          v49 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v47, (int8x16_t)v47, 0xCuLL), (int8x16_t)v47, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v48, v48), (int8x16_t)v48, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v48, (int8x16_t)v48, 0xCuLL), (int8x16_t)v48, 8uLL));
          v32[508] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34->i8, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), *(float32x2_t *)v34->i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*v34, *v34, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)(v32 + 509) = *(_WORD *)(v31 + 149);
        v50 = *(_QWORD *)(v30 + 24);
        v51 = *(std::__shared_weak_count **)(v30 + 32);
        v364 = 0uLL;
        if ((a2 & 1) == 0)
          break;
        v350 = 0xFFFFFFFFBF800000;
        v351 = 0;
        *(_QWORD *)&v352 = 0;
        DWORD2(v352) = 2143289344;
        v52 = v326[1];
        v53 = *(uint64_t **)(v30 + 200);
        *(_QWORD *)&v358 = &off_24C9FD220;
        *((_QWORD *)&v358 + 1) = v50;
        v359 = v51;
        *(_QWORD *)&v360 = &v350;
        *((_QWORD *)&v360 + 1) = v33;
        v54 = sub_20F2E2098((_QWORD *)(v52 + 24), v53);
        sub_20F2E16E0((uint64_t **)v52, (int8x8_t *)v54, (uint64_t)&v358, (uint64_t *)&v363);
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
        v55 = v363;
        v364 = v363;
        v57 = *(_QWORD *)(v30 + 200);
        v58 = *(char **)(v363 + 536);
        v59 = *(char **)(v363 + 544);
        v60 = *(_QWORD *)v57;
        v61 = *(_DWORD *)(v57 + 8);
        v62 = *(_DWORD *)(v57 + 16);
        if (v59 != v58)
        {
          v63 = (v59 - v58) >> 5;
          while (1)
          {
            v64 = v63 >> 1;
            v65 = (unint64_t *)&v58[32 * (v63 >> 1)];
            v66 = *((_DWORD *)v65 + 4);
            v67 = v66 >= v62;
            if (v66 != v62)
              goto LABEL_63;
            if (*v65 >= v60)
              break;
LABEL_57:
            v58 = (char *)(v65 + 4);
            v64 = v63 + ~v64;
LABEL_58:
            v63 = v64;
            if (!v64)
              goto LABEL_115;
          }
          if (*v65 != v60)
            goto LABEL_58;
          v67 = *((_DWORD *)v65 + 2) >= v61;
LABEL_63:
          if (v67)
            goto LABEL_58;
          goto LABEL_57;
        }
LABEL_115:
        if (v58 != v59 && *((_DWORD *)v58 + 4) == v62 && *(_QWORD *)v58 == v60 && *((_DWORD *)v58 + 2) == v61)
        {
          v99 = *(_QWORD **)(v363 + 16);
          if (v99)
          {
            if (!sub_20EE6BF60(v99, (uint64_t *)v57, *(_DWORD *)(*((_QWORD *)v58 + 3) + 4)))
              goto LABEL_126;
            v59 = *(char **)(v55 + 544);
          }
          v100 = v59 - (v58 + 32);
          if (v59 != v58 + 32)
            memmove(v58, v58 + 32, v59 - (v58 + 32));
          *(_QWORD *)(v55 + 544) = &v58[v100];
        }
LABEL_126:
        if (!v56)
          goto LABEL_130;
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v102 = __ldaxr(p_shared_owners);
        while (__stlxr(v102 - 1, p_shared_owners));
        if (v102)
        {
LABEL_130:
          v103 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
          v27 = (int8x8_t **)v326;
          if (*((_QWORD *)&v347 + 1))
            goto LABEL_131;
          goto LABEL_136;
        }
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        v103 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
        v27 = (int8x8_t **)v326;
        if (*((_QWORD *)&v347 + 1))
        {
LABEL_131:
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
LABEL_136:
        v106 = (_QWORD *)v29[1];
        if (v106)
        {
          do
          {
            v107 = v106;
            v106 = (_QWORD *)*v106;
          }
          while (v106);
        }
        else
        {
          do
          {
            v107 = (_QWORD *)v29[2];
            _ZF = *v107 == (_QWORD)v29;
            v29 = v107;
          }
          while (!_ZF);
        }
        v29 = v107;
        if (v107 == v340)
          goto LABEL_142;
      }
      v69 = *(_QWORD *)(v30 + 200);
      v68 = *(_QWORD *)(v30 + 208);
      if (v69 == v68)
        goto LABEL_130;
      while (1)
      {
        v70 = *(_OWORD *)v69;
        v359 = *(std::__shared_weak_count **)(v69 + 16);
        v358 = v70;
        v72 = v326[5];
        v71 = v326[6];
        if (v71 != v72)
        {
          v73 = (v71 - v72) >> 4;
          while (1)
          {
            v74 = v73 >> 1;
            v75 = v72 + 16 * (v73 >> 1);
            v76 = *(_QWORD *)v75;
            v77 = *(_DWORD *)(*(_QWORD *)v75 + 16);
            v78 = v77 >= v359;
            if (v77 != (_DWORD)v359)
              goto LABEL_77;
            if (*(_QWORD *)v76 >= (unint64_t)v358)
              break;
LABEL_71:
            v72 = v75 + 16;
            v74 = v73 + ~v74;
LABEL_72:
            v73 = v74;
            if (!v74)
              goto LABEL_80;
          }
          if (*(_QWORD *)v76 != (_QWORD)v358)
            goto LABEL_72;
          v78 = *(_DWORD *)(v76 + 8) >= DWORD2(v358);
LABEL_77:
          if (v78)
            goto LABEL_72;
          goto LABEL_71;
        }
LABEL_80:
        if (v72 != v71)
        {
          v79 = *(_QWORD *)v72;
          if (*(_DWORD *)(*(_QWORD *)v72 + 16) == (_DWORD)v359
            && *(_QWORD *)v79 == (_QWORD)v358
            && *(_DWORD *)(v79 + 8) == DWORD2(v358))
          {
            v71 = v72;
          }
        }
        v80 = *(_QWORD *)(*(_QWORD *)v71 + 72) + 40 * *(unsigned int *)(*(_QWORD *)(v69 + 24) + 4);
        v81 = (uint64_t *)v364;
        if ((_QWORD)v364)
        {
          *(_QWORD *)&v363 = v80;
          v350 = v358;
          v351 = v359;
          *(_QWORD *)&v352 = v80;
          v82 = *(_QWORD *)(v364 + 536);
          v83 = *(char **)(v364 + 544);
          if (v83 != (char *)v82)
          {
            v84 = (uint64_t)&v83[-v82] >> 5;
            while (1)
            {
              v85 = v84 >> 1;
              v86 = v82 + 32 * (v84 >> 1);
              v87 = *(_DWORD *)(v86 + 16);
              v88 = v87 >= v351;
              if (v87 != (_DWORD)v351)
                goto LABEL_94;
              if (*(_QWORD *)v86 >= (unint64_t)v350)
                break;
LABEL_88:
              v82 = v86 + 32;
              v85 = v84 + ~v85;
LABEL_89:
              v84 = v85;
              if (!v85)
                goto LABEL_97;
            }
            if (*(_QWORD *)v86 != (_QWORD)v350)
              goto LABEL_89;
            v88 = *(_DWORD *)(v86 + 8) >= DWORD2(v350);
LABEL_94:
            if (v88)
              goto LABEL_89;
            goto LABEL_88;
          }
LABEL_97:
          if ((char *)v82 == v83
            || *(_DWORD *)(v82 + 16) != (_DWORD)v359
            || *(_QWORD *)v82 != (_QWORD)v358
            || (v89 = *(char **)(v364 + 544), *(_DWORD *)(v82 + 8) != DWORD2(v358)))
          {
            v89 = sub_20F2E0A38((char **)(v364 + 536), (char *)v82, &v350);
            v83 = (char *)v81[68];
          }
          if (v83 != v89)
            sub_20F2E0CA4(v81, (uint64_t *)&v358, (uint64_t)&v363);
        }
        else
        {
          v90 = v326[1];
          *(_QWORD *)&v350 = &off_24C9FD220;
          *((_QWORD *)&v350 + 1) = v50;
          v351 = v51;
          *(_QWORD *)&v352 = v80;
          *((_QWORD *)&v352 + 1) = v347;
          v91 = sub_20F2E2098((_QWORD *)(v90 + 24), (uint64_t *)&v358);
          sub_20F2E16E0((uint64_t **)v90, (int8x8_t *)v91, (uint64_t)&v350, (uint64_t *)&v363);
          v92 = v363;
          v363 = 0uLL;
          v93 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
          v364 = v92;
          if (!v93)
            goto LABEL_108;
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
            v96 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
            if (*((_QWORD *)&v363 + 1))
            {
LABEL_109:
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          else
          {
LABEL_108:
            v96 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
            if (*((_QWORD *)&v363 + 1))
              goto LABEL_109;
          }
        }
        v69 += 32;
        if (v69 == v68)
        {
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
          goto LABEL_126;
        }
      }
    }
LABEL_142:
    *((_QWORD *)&v350 + 1) = 0;
    v351 = 0;
    *(_QWORD *)&v350 = (char *)&v350 + 8;
    v352 = 0u;
    v353 = 0u;
    v354 = 1.0;
    v355 = 1000;
    prime = std::__next_prime(0x3E8uLL);
    v109 = prime;
    v110 = *((_QWORD *)&v352 + 1);
    if (prime > *((_QWORD *)&v352 + 1))
      goto LABEL_143;
    if (prime < *((_QWORD *)&v352 + 1))
    {
      v111 = vcvtps_u32_f32((float)*((unint64_t *)&v353 + 1) / v354);
      if (*((_QWORD *)&v352 + 1) < 3uLL
        || (v112 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v352 + 8)),
            v112.i16[0] = vaddlv_u8(v112),
            v112.u32[0] > 1uLL))
      {
        v111 = std::__next_prime(v111);
      }
      else
      {
        v113 = 1 << -(char)__clz(v111 - 1);
        if (v111 >= 2)
          v111 = v113;
      }
      if (v109 <= v111)
        v109 = v111;
      if (v109 < v110)
LABEL_143:
        sub_20E8D2B3C((uint64_t)&v352, v109);
    }
    v356 = 0;
    v357 = 0;
    v355 = 1000;
    v114 = *(unsigned __int8 ***)(a1 + 16);
    v116 = *v114;
    v115 = v114[1];
    v117 = **v114;
    if ((char)v117 <= -2)
    {
      do
      {
        v118 = (__clz(__rbit64(((*v116 >> 7) & ~*v116 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v116 = (_QWORD *)((char *)v116 + v118);
        v115 += 32 * v118;
      }
      while (*(char *)v116 < -1);
      v117 = *(unsigned __int8 *)v116;
    }
    if (v117 != 255)
    {
      v324 = vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        v119 = *((_QWORD *)v115 + 2);
        if (*(_BYTE *)(v119 + 192))
          v120 = v119 + 40;
        else
          v120 = 0;
        v121 = (char *)operator new(0x200uLL);
        *((_QWORD *)v121 + 1) = 0;
        v122 = (unint64_t *)(v121 + 8);
        *((_QWORD *)v121 + 2) = 0;
        *(_QWORD *)v121 = &off_24CA051E0;
        *((_OWORD *)v121 + 2) = 0u;
        *((_OWORD *)v121 + 3) = 0u;
        *((_OWORD *)v121 + 4) = 0u;
        *((_OWORD *)v121 + 5) = 0u;
        *((_OWORD *)v121 + 6) = 0u;
        *((_OWORD *)v121 + 7) = 0u;
        *((_OWORD *)v121 + 8) = 0u;
        *((_OWORD *)v121 + 9) = 0u;
        *((_OWORD *)v121 + 10) = 0u;
        *((_OWORD *)v121 + 11) = 0u;
        *((_OWORD *)v121 + 12) = 0u;
        *((_OWORD *)v121 + 13) = 0u;
        *((_OWORD *)v121 + 14) = 0u;
        *((_OWORD *)v121 + 15) = 0u;
        *((_OWORD *)v121 + 16) = 0u;
        *((_OWORD *)v121 + 17) = 0u;
        *((_OWORD *)v121 + 18) = 0u;
        *((_OWORD *)v121 + 19) = 0u;
        *((_OWORD *)v121 + 20) = 0u;
        *((_OWORD *)v121 + 21) = 0u;
        *((_OWORD *)v121 + 22) = 0u;
        *((_OWORD *)v121 + 23) = 0u;
        *((_OWORD *)v121 + 24) = 0u;
        *((_OWORD *)v121 + 25) = 0u;
        *((_OWORD *)v121 + 26) = 0u;
        *((_OWORD *)v121 + 27) = 0u;
        *((_OWORD *)v121 + 28) = 0u;
        *((_OWORD *)v121 + 29) = 0u;
        *((_OWORD *)v121 + 30) = 0u;
        *((_OWORD *)v121 + 31) = 0u;
        *((_QWORD *)v121 + 11) = 0;
        v123 = v121 + 88;
        v337 = v121 + 24;
        v121[80] = 1;
        *((_QWORD *)v121 + 12) = 0;
        *((_QWORD *)v121 + 13) = 0;
        *((_QWORD *)v121 + 14) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v121 + 16) = 0x3FF0000000000000;
        *(_OWORD *)(v121 + 136) = 0u;
        *(_OWORD *)(v121 + 152) = 0u;
        *(_OWORD *)(v121 + 168) = 0u;
        *(_OWORD *)(v121 + 184) = 0u;
        *(_OWORD *)(v121 + 200) = 0u;
        *(_OWORD *)(v121 + 216) = 0u;
        *(_OWORD *)(v121 + 232) = 0u;
        *(_OWORD *)(v121 + 248) = 0u;
        *(_OWORD *)(v121 + 264) = 0u;
        *(_OWORD *)(v121 + 280) = 0u;
        *(_OWORD *)(v121 + 296) = 0u;
        *(_OWORD *)(v121 + 312) = 0u;
        *(_OWORD *)(v121 + 328) = 0u;
        *(_OWORD *)(v121 + 344) = 0u;
        *(_OWORD *)(v121 + 360) = 0u;
        *(_OWORD *)(v121 + 376) = 0u;
        *((_QWORD *)v121 + 49) = 0;
        *((int64x2_t *)v121 + 25) = v324;
        *((_QWORD *)v121 + 58) = 0xBFF0000000000000;
        *((_QWORD *)v121 + 3) = &off_24C9FD120;
        *(_OWORD *)(v121 + 472) = 0u;
        *(_OWORD *)(v121 + 488) = 0u;
        v341 = (int8x16_t *)(v121 + 472);
        *(_QWORD *)(v121 + 501) = 0;
        v124 = *(int8x16_t *)(v120 + 8);
        *((_QWORD *)v121 + 6) = *(_QWORD *)(v120 + 24);
        v329 = (std::__shared_weak_count *)v121;
        *((int8x16_t *)v121 + 2) = v124;
        if ((a2 & 1) == 0)
        {
          v125 = *(_QWORD *)(v120 + 32);
          v126 = *(_QWORD *)(v120 + 40);
          v335 = v126;
          v127 = *(_DWORD *)(v120 + 48);
          v128 = (*v27)[224];
          if (v128)
          {
            v129 = v126 ^ __ROR4__(v127, 13);
            v130 = (uint8x8_t)vcnt_s8(v128);
            v130.i16[0] = vaddlv_u8(v130);
            if (v130.u32[0] > 1uLL)
            {
              v131 = v129;
              if (*(_QWORD *)&v128 <= v129)
                v131 = v129 % *(_QWORD *)&v128;
            }
            else
            {
              v131 = (v128.i32[0] - 1) & v129;
            }
            v132 = *(uint64_t ***)(*(_QWORD *)&(*v27)[223] + 8 * v131);
            if (v132)
            {
              v133 = *v132;
              if (v133)
              {
                if (v130.u32[0] < 2uLL)
                {
                  v134 = *(_QWORD *)&v128 - 1;
                  while (1)
                  {
                    v136 = v133[1];
                    if (v136 == v129)
                    {
                      if (*((_DWORD *)v133 + 8) == v127 && v133[2] == v125 && *((_DWORD *)v133 + 6) == (_DWORD)v335)
                        goto LABEL_188;
                    }
                    else if ((v136 & v134) != v131)
                    {
                      goto LABEL_189;
                    }
                    v133 = (uint64_t *)*v133;
                    if (!v133)
                      goto LABEL_189;
                  }
                }
                do
                {
                  v135 = v133[1];
                  if (v135 == v129)
                  {
                    if (*((_DWORD *)v133 + 8) == v127 && v133[2] == v125 && *((_DWORD *)v133 + 6) == (_DWORD)v335)
                    {
LABEL_188:
                      v333 = (std::__shared_weak_count_vtbl *)(v133 + 5);
                      goto LABEL_197;
                    }
                  }
                  else
                  {
                    if (v135 >= *(_QWORD *)&v128)
                      v135 %= *(_QWORD *)&v128;
                    if (v135 != v131)
                      break;
                  }
                  v133 = (uint64_t *)*v133;
                }
                while (v133);
              }
            }
          }
LABEL_189:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 156, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Fail to find pose ref", 21, (void (*)(void **))sub_21023DDB0);
          v330 = v125;
          v137 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v138 = qword_254A6DE40;
            for (i = qword_254A6DE48; v138 != i; v138 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v138)(*(_QWORD *)(v138 + 8), "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          }
          v140 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v125 = v330;
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "anchor_pose_ref", 15, "Fail to find pose ref", 21);
          v333 = 0;
LABEL_197:
          _Q0 = *(_OWORD *)(v120 + 64);
          v142 = *(_QWORD *)(v120 + 88);
          _D3 = *(_QWORD *)(v120 + 72);
          __asm { FMLA            D2, D3, V0.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v120 + 80) * *(double *)(v120 + 80)) + -1.0) > 0.000001)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0);
            v331 = v127;
            v145 = v125;
            v146 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v147 = qword_254A6DE40;
              for (j = qword_254A6DE48; v147 != j; v147 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v147)(*(_QWORD *)(v147 + 8), "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            }
            v149 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v27 = (int8x8_t **)v326;
            if (!byte_254A6DE68)
LABEL_505:
              abort();
            v125 = v145;
            qword_254A6DE58(unk_254A6DE60, "std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, "anchor direction should be normalized to 1", 42);
            v127 = v331;
          }
          v329[2].__shared_owners_ = v125;
          v329[2].__shared_weak_owners_ = v335;
          LODWORD(v329[3].__vftable) = v127;
          v329[5].__vftable = v333;
          v150 = *(_OWORD *)(v120 + 64);
          *((_QWORD *)v123 + 2) = *(_QWORD *)(v120 + 80);
          *(_OWORD *)v123 = v150;
          v329[4].__shared_weak_owners_ = v142;
          if ((((uint64_t (*)(char *))v329[1].__on_zero_shared)(v337) & 1) == 0)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 162, (uint64_t)"result", 6, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0);
            v151 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v152 = qword_254A6DE40;
              for (k = qword_254A6DE48; v152 != k; v152 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v152)(*(_QWORD *)(v152 + 8), "result", 6, "Fail to set anchor", 18);
            }
            v154 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_505;
            qword_254A6DE58(unk_254A6DE60, "result", 6, "Fail to set anchor", 18);
          }
        }
        if (BYTE4(v329[21].__vftable))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 167, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0);
          v155 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v156 = qword_254A6DE40;
            for (m = qword_254A6DE48; v156 != m; v156 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v156)(*(_QWORD *)(v156 + 8), "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
          }
          v158 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "!new_structure->ValidStructureCovariance()", 42, "New structure initialized to valid covariance.", 46);
        }
        if (*(_BYTE *)(v120 + 148))
        {
          LODWORD(v329[19].__shared_weak_owners_) = *(_DWORD *)(v120 + 112);
          HIDWORD(v329[19].__shared_weak_owners_) = *(_DWORD *)(v120 + 116);
          LODWORD(v329[20].__vftable) = *(_DWORD *)(v120 + 120);
          HIDWORD(v329[20].__vftable) = *(_DWORD *)(v120 + 124);
          LODWORD(v329[20].__shared_owners_) = *(_DWORD *)(v120 + 128);
          HIDWORD(v329[20].__shared_owners_) = *(_DWORD *)(v120 + 132);
          LODWORD(v329[20].__shared_weak_owners_) = *(_DWORD *)(v120 + 136);
          HIDWORD(v329[20].__shared_weak_owners_) = *(_DWORD *)(v120 + 140);
          LODWORD(v329[21].__vftable) = *(_DWORD *)(v120 + 144);
          v124.i32[0] = v341[2].i32[0];
          v159 = v341[1];
          v160 = (int32x4_t)vextq_s8(*v341, v159, 0xCuLL);
          v161 = (int32x4_t)vextq_s8(v159, v124, 8uLL);
          v162 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v160, (int8x16_t)v160, 0xCuLL), (int8x16_t)v160, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v161, v161), (int8x16_t)v161, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v160, v160), (int8x16_t)v160, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v161, (int8x16_t)v161, 0xCuLL), (int8x16_t)v161, 8uLL));
          BYTE4(v329[21].__vftable) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341->i8, *(float32x2_t *)v162.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v162.i8, 1), *(float32x2_t *)v341->i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*v341, *v341, 8uLL)).f32[0] > 0.0;
        }
        *(_WORD *)((char *)&v329[21].__vftable + 5) = *(_WORD *)(v120 + 149);
        v164 = *(_QWORD *)(v119 + 24);
        v163 = *(std::__shared_weak_count **)(v119 + 32);
        v349 = 0uLL;
        if ((a2 & 1) == 0)
          break;
        v358 = 0xFFFFFFFFBF800000;
        v359 = 0;
        *(_QWORD *)&v360 = 0;
        DWORD2(v360) = 2143289344;
        v165 = *(uint64_t **)(v119 + 200);
        v343.i64[0] = (uint64_t)&off_24C9FD220;
        v343.i64[1] = v164;
        v344 = v163;
        v345 = &v358;
        v346 = v337;
        v166 = sub_20FCEC5B8((uint64_t)&v352, v165);
        sub_20FCEB6CC((uint64_t *)&v347, (uint64_t **)&v350, v166, (uint64_t)&v343);
        v167 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
        v168 = v347;
        v349 = v347;
        v169 = *(_QWORD *)(v119 + 200);
        v170 = *(_QWORD *)(v347 + 536);
        v171 = *(_QWORD *)(v347 + 544);
        v172 = *(_QWORD *)v169;
        v173 = *(_DWORD *)(v169 + 8);
        v174 = *(_DWORD *)(v169 + 16);
        if (v171 != v170)
        {
          v175 = (v171 - v170) >> 6;
          while (1)
          {
            v176 = v175 >> 1;
            v177 = v170 + (v175 >> 1 << 6);
            v178 = *(_DWORD *)(v177 + 16);
            v179 = v178 >= v174;
            if (v178 != v174)
              goto LABEL_235;
            if (*(_QWORD *)v177 >= v172)
              break;
LABEL_229:
            v170 = v177 + 64;
            v176 = v175 + ~v176;
LABEL_230:
            v175 = v176;
            if (!v176)
              goto LABEL_422;
          }
          if (*(_QWORD *)v177 != v172)
            goto LABEL_230;
          v179 = *(_DWORD *)(v177 + 8) >= v173;
LABEL_235:
          if (v179)
            goto LABEL_230;
          goto LABEL_229;
        }
LABEL_422:
        if (v170 == v171 || *(_DWORD *)(v170 + 16) != v174 || *(_QWORD *)v170 != v172 || *(_DWORD *)(v170 + 8) != v173)
          goto LABEL_434;
        v266 = *(_QWORD **)(v347 + 16);
        if (!v266)
          goto LABEL_429;
        if (sub_20EE6BF60(v266, (uint64_t *)v169, *(_DWORD *)(v170 + 28)))
        {
          v171 = *(_QWORD *)(v168 + 544);
LABEL_429:
          if (v170 + 64 != v171)
          {
            do
            {
              v267 = v170 + 64;
              *(_OWORD *)v170 = *(_OWORD *)(v170 + 64);
              *(_DWORD *)(v170 + 16) = *(_DWORD *)(v170 + 80);
              v268 = *(_QWORD *)(v170 + 96);
              *(_QWORD *)(v170 + 24) = *(_QWORD *)(v170 + 88);
              *(_QWORD *)(v170 + 32) = v268;
              *(_OWORD *)(v170 + 40) = *(_OWORD *)(v170 + 104);
              v269 = v170 + 128;
              *(_DWORD *)(v170 + 56) = *(_DWORD *)(v170 + 120);
              v170 += 64;
            }
            while (v269 != v171);
            v170 = v267;
          }
          *(_QWORD *)(v168 + 544) = v170;
        }
LABEL_434:
        if (v167)
        {
          v270 = (unint64_t *)&v167->__shared_owners_;
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        do
LABEL_439:
          v272 = __ldaxr(v122);
        while (__stlxr(v272 - 1, v122));
        if (v272)
        {
          v274 = *((char *)v116 + 1);
          v116 = (_QWORD *)((char *)v116 + 1);
          LOBYTE(v273) = v274;
          v115 += 32;
          if (v274 <= -2)
            goto LABEL_444;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
          std::__shared_weak_count::__release_weak(v329);
          v275 = *((char *)v116 + 1);
          v116 = (_QWORD *)((char *)v116 + 1);
          LOBYTE(v273) = v275;
          v115 += 32;
          if (v275 <= -2)
          {
            do
            {
LABEL_444:
              v276 = (__clz(__rbit64(((*v116 >> 7) & ~*v116 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v116 = (_QWORD *)((char *)v116 + v276);
              v115 += 32 * v276;
              v273 = *(char *)v116;
            }
            while (v273 < -1);
          }
        }
        if (v273 == 255)
          goto LABEL_462;
      }
      v332 = v164;
      v334 = v163;
      v180 = *(_QWORD *)(v119 + 200);
      v342 = *(_QWORD *)(v119 + 208);
      if (v180 == v342)
        goto LABEL_439;
      while (1)
      {
        v181 = *(_OWORD *)v180;
        v348 = *(_QWORD *)(v180 + 16);
        v347 = v181;
        v183 = v27[5];
        v182 = v27[6];
        if (v182 != v183)
        {
          v184 = ((char *)v182 - (char *)v183) >> 4;
          while (1)
          {
            v185 = v184 >> 1;
            v186 = &v183[2 * (v184 >> 1)];
            v187 = *v186;
            v188 = *(_DWORD *)(*(_QWORD *)v186 + 16);
            v189 = v188 >= v348;
            if (v188 != (_DWORD)v348)
              goto LABEL_249;
            if (**(_QWORD **)&v187 >= (unint64_t)v347)
              break;
LABEL_243:
            v183 = v186 + 2;
            v185 = v184 + ~v185;
LABEL_244:
            v184 = v185;
            if (!v185)
              goto LABEL_252;
          }
          if (**(_QWORD **)&v187 != (_QWORD)v347)
            goto LABEL_244;
          v189 = *(_DWORD *)(*(_QWORD *)&v187 + 8) >= DWORD2(v347);
LABEL_249:
          if (v189)
            goto LABEL_244;
          goto LABEL_243;
        }
LABEL_252:
        if (v183 != v182)
        {
          v190 = *v183;
          if (*(_DWORD *)(*(_QWORD *)v183 + 16) == (_DWORD)v348
            && **(_QWORD **)&v190 == (_QWORD)v347
            && *(_DWORD *)(*(_QWORD *)&v190 + 8) == DWORD2(v347))
          {
            v182 = v183;
          }
        }
        v191 = *v182;
        v192 = *(_DWORD *)(v180 + 28);
        v193 = *(_QWORD *)(*(_QWORD *)&v191 + 72);
        v194 = (__int128 *)(v193 + 40 * v192);
        v195 = (unint64_t *)v349;
        if ((_QWORD)v349)
        {
          v358 = *(_OWORD *)v180;
          v359 = *(std::__shared_weak_count **)(v180 + 16);
          v360 = *v194;
          v196 = v193 + 40 * v192;
          v361 = *(_OWORD *)(v196 + 16);
          v362 = *(_DWORD *)(v196 + 32);
          v197 = *(_QWORD *)(v349 + 536);
          v198 = *(_QWORD *)(v349 + 544);
          if (v198 != v197)
          {
            v199 = (uint64_t)(v198 - v197) >> 6;
            while (1)
            {
              v200 = v199 >> 1;
              v201 = v197 + (v199 >> 1 << 6);
              v202 = *(_DWORD *)(v201 + 16);
              v203 = v202 >= v359;
              if (v202 != (_DWORD)v359)
                goto LABEL_266;
              if (*(_QWORD *)v201 >= (unint64_t)v358)
                break;
LABEL_260:
              v197 = v201 + 64;
              v200 = v199 + ~v200;
LABEL_261:
              v199 = v200;
              if (!v200)
                goto LABEL_269;
            }
            if (*(_QWORD *)v201 != (_QWORD)v358)
              goto LABEL_261;
            v203 = *(_DWORD *)(v201 + 8) >= DWORD2(v358);
LABEL_266:
            if (v203)
              goto LABEL_261;
            goto LABEL_260;
          }
LABEL_269:
          if (v197 == v198
            || *(_DWORD *)(v197 + 16) != (_DWORD)v348
            || *(_QWORD *)v197 != (_QWORD)v347
            || (v204 = *(_QWORD *)(v349 + 544), *(_DWORD *)(v197 + 8) != DWORD2(v347)))
          {
            v204 = sub_20FCECF90((char **)(v349 + 536), (char *)v197, &v358);
            v198 = v195[68];
          }
          if (v198 != v204)
          {
            v205 = v195[2];
            if (v205)
            {
              v206 = (std::__shared_weak_count *)v195[1];
              if (!v206 || (v207 = *v195, (v208 = std::__shared_weak_count::lock(v206)) == 0))
                sub_20EE6CA64();
              *(_QWORD *)&v364 = v207;
              *((_QWORD *)&v364 + 1) = v208;
              v363 = 0uLL;
              v209 = *((_DWORD *)v194 + 1);
              v210 = (unint64_t *)&v208->__shared_owners_;
              v336 = v207;
              v343.i64[0] = v207;
              v343.i64[1] = (uint64_t)v208;
              v327 = v208;
              do
                v211 = __ldxr(v210);
              while (__stxr(v211 + 1, v210));
              v328 = v209;
              LODWORD(v344) = v209;
              v212 = (DWORD2(v347) ^ __ROR4__(v348, 13));
              v213 = *(_QWORD *)(v205 + 8);
              if (v213)
              {
                v214 = (uint8x8_t)vcnt_s8((int8x8_t)v213);
                v214.i16[0] = vaddlv_u8(v214);
                if (v214.u32[0] > 1uLL)
                {
                  v215 = v212;
                  v216 = v207;
                  if (v213 <= v212)
                    v215 = v212 % v213;
                }
                else
                {
                  v215 = ((_DWORD)v213 - 1) & v212;
                  v216 = v207;
                }
                v225 = *(uint64_t ***)(*(_QWORD *)v205 + 8 * v215);
                if (v225)
                {
                  v226 = *v225;
                  if (v226)
                  {
                    if (v214.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v228 = v226[1];
                        if (v228 == v212)
                        {
                          if (*((_DWORD *)v226 + 8) == (_DWORD)v348
                            && v226[2] == (_QWORD)v347
                            && *((_DWORD *)v226 + 6) == DWORD2(v347))
                          {
                            goto LABEL_315;
                          }
                        }
                        else if ((v228 & (v213 - 1)) != v215)
                        {
                          goto LABEL_319;
                        }
                        v226 = (uint64_t *)*v226;
                        if (!v226)
                          goto LABEL_319;
                      }
                    }
                    do
                    {
                      v227 = v226[1];
                      if (v227 == v212)
                      {
                        if (*((_DWORD *)v226 + 8) == (_DWORD)v348
                          && v226[2] == (_QWORD)v347
                          && *((_DWORD *)v226 + 6) == DWORD2(v347))
                        {
LABEL_315:
                          LODWORD(v358) = v209;
                          *((_QWORD *)&v358 + 1) = v216;
                          v359 = v208;
                          v343 = 0uLL;
                          LODWORD(v360) = v209;
                          sub_20FCED944((uint64_t)(v226 + 5), v209, (uint64_t)&v358);
                          v229 = v359;
                          if (v359)
                          {
                            v230 = (unint64_t *)&v359->__shared_owners_;
                            do
                              v231 = __ldaxr(v230);
                            while (__stlxr(v231 - 1, v230));
                            goto LABEL_404;
                          }
                          goto LABEL_405;
                        }
                      }
                      else
                      {
                        if (v227 >= v213)
                          v227 %= v213;
                        if (v227 != v215)
                          break;
                      }
                      v226 = (uint64_t *)*v226;
                    }
                    while (v226);
                  }
                }
LABEL_319:
                if (v214.u32[0] > 1uLL)
                {
                  v207 = v212;
                  if (v213 <= v212)
                    v207 = v212 % v213;
                }
                else
                {
                  v207 = ((_DWORD)v213 - 1) & v212;
                }
                v232 = *(void ***)(*(_QWORD *)v205 + 8 * v207);
                if (v232)
                {
                  v233 = (char *)*v232;
                  if (*v232)
                  {
                    if (v214.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v235 = *((_QWORD *)v233 + 1);
                        if (v235 == v212)
                        {
                          if (*((_DWORD *)v233 + 8) == (_DWORD)v348
                            && *((_QWORD *)v233 + 2) == (_QWORD)v347
                            && *((_DWORD *)v233 + 6) == DWORD2(v347))
                          {
                            goto LABEL_384;
                          }
                        }
                        else if ((v235 & (v213 - 1)) != v207)
                        {
                          goto LABEL_343;
                        }
                        v233 = *(char **)v233;
                        if (!v233)
                          goto LABEL_343;
                      }
                    }
                    do
                    {
                      v234 = *((_QWORD *)v233 + 1);
                      if (v234 == v212)
                      {
                        if (*((_DWORD *)v233 + 8) == (_DWORD)v348
                          && *((_QWORD *)v233 + 2) == (_QWORD)v347
                          && *((_DWORD *)v233 + 6) == DWORD2(v347))
                        {
                          goto LABEL_384;
                        }
                      }
                      else
                      {
                        if (v234 >= v213)
                          v234 %= v213;
                        if (v234 != v207)
                          break;
                      }
                      v233 = *(char **)v233;
                    }
                    while (v233);
                  }
                }
              }
LABEL_343:
              v233 = (char *)operator new(0x50uLL);
              v236 = (_QWORD *)(v205 + 16);
              *(_QWORD *)&v358 = v233;
              *((_QWORD *)&v358 + 1) = v205 + 16;
              *(_QWORD *)v233 = 0;
              *((_QWORD *)v233 + 1) = v212;
              *((_OWORD *)v233 + 1) = v347;
              *((_QWORD *)v233 + 4) = v348;
              *(_OWORD *)(v233 + 40) = 0u;
              *(_OWORD *)(v233 + 56) = 0u;
              *((_DWORD *)v233 + 18) = 1065353216;
              LOBYTE(v359) = 1;
              v237 = (float)(unint64_t)(*(_QWORD *)(v205 + 24) + 1);
              v238 = *(float *)(v205 + 32);
              if (v213 && (float)(v238 * (float)v213) >= v237)
              {
                v239 = *(_QWORD *)v205;
                v240 = *(_QWORD **)(*(_QWORD *)v205 + 8 * v207);
                if (v240)
                  goto LABEL_346;
LABEL_376:
                *(_QWORD *)v233 = *v236;
                *v236 = v233;
                *(_QWORD *)(v239 + 8 * v207) = v236;
                v27 = (int8x8_t **)v326;
                if (*(_QWORD *)v233)
                {
                  v248 = *(_QWORD *)(*(_QWORD *)v233 + 8);
                  if ((v213 & (v213 - 1)) != 0)
                  {
                    if (v248 >= v213)
                      v248 %= v213;
                  }
                  else
                  {
                    v248 &= v213 - 1;
                  }
                  v240 = (_QWORD *)(*(_QWORD *)v205 + 8 * v248);
                  goto LABEL_382;
                }
              }
              else
              {
                v241 = v213 < 3 || (v213 & (v213 - 1)) != 0;
                v242 = v241 | (2 * v213);
                v243 = vcvtps_u32_f32(v237 / v238);
                if (v242 <= v243)
                  v244 = v243;
                else
                  v244 = v242;
                if (v244 == 1)
                {
                  v244 = 2;
                }
                else if ((v244 & (v244 - 1)) != 0)
                {
                  v244 = std::__next_prime(v244);
                  v213 = *(_QWORD *)(v205 + 8);
                }
                if (v244 > v213)
                  goto LABEL_358;
                if (v244 < v213)
                {
                  v245 = vcvtps_u32_f32((float)*(unint64_t *)(v205 + 24) / *(float *)(v205 + 32));
                  if (v213 < 3
                    || (v246 = (uint8x8_t)vcnt_s8((int8x8_t)v213), v246.i16[0] = vaddlv_u8(v246), v246.u32[0] > 1uLL))
                  {
                    v245 = std::__next_prime(v245);
                  }
                  else
                  {
                    v247 = 1 << -(char)__clz(v245 - 1);
                    if (v245 >= 2)
                      v245 = v247;
                  }
                  if (v244 <= v245)
                    v244 = v245;
                  if (v244 < v213)
LABEL_358:
                    sub_20E8D2B3C(v205, v244);
                }
                v213 = *(_QWORD *)(v205 + 8);
                if ((v213 & (v213 - 1)) != 0)
                {
                  if (v213 <= v212)
                    v207 = v212 % v213;
                  else
                    v207 = v212;
                  v239 = *(_QWORD *)v205;
                  v240 = *(_QWORD **)(*(_QWORD *)v205 + 8 * v207);
                  if (!v240)
                    goto LABEL_376;
                }
                else
                {
                  v207 = ((_DWORD)v213 - 1) & v212;
                  v239 = *(_QWORD *)v205;
                  v240 = *(_QWORD **)(*(_QWORD *)v205 + 8 * v207);
                  if (!v240)
                    goto LABEL_376;
                }
LABEL_346:
                *(_QWORD *)v233 = *v240;
                v27 = (int8x8_t **)v326;
LABEL_382:
                *v240 = v233;
              }
              ++*(_QWORD *)(v205 + 24);
LABEL_384:
              v249 = vcvtps_u32_f32((float)*(unint64_t *)(v205 + 40) / *((float *)v233 + 18));
              if (v249 == 1)
              {
                v249 = 2;
              }
              else if ((v249 & (v249 - 1)) != 0)
              {
                v249 = std::__next_prime(v249);
              }
              v250 = *(int8x8_t *)(v233 + 48);
              if (v249 <= *(_QWORD *)&v250)
              {
                if (v249 >= *(_QWORD *)&v250)
                {
                  v251 = v328;
                  v252 = v336;
                  v253 = v327;
                }
                else
                {
                  v254 = vcvtps_u32_f32((float)*((unint64_t *)v233 + 8) / *((float *)v233 + 18));
                  if (*(_QWORD *)&v250 < 3uLL
                    || (v255 = (uint8x8_t)vcnt_s8(v250), v255.i16[0] = vaddlv_u8(v255), v255.u32[0] > 1uLL))
                  {
                    v254 = std::__next_prime(v254);
                  }
                  else
                  {
                    v256 = 1 << -(char)__clz(v254 - 1);
                    if (v254 >= 2)
                      v254 = v256;
                  }
                  if (v249 <= v254)
                    v249 = v254;
                  v251 = v328;
                  v252 = v336;
                  v253 = v327;
                  if (v249 < *(_QWORD *)&v250)
                    goto LABEL_389;
                }
              }
              else
              {
LABEL_389:
                sub_20E8D2B3C((uint64_t)(v233 + 40), v249);
                v251 = v344;
                v253 = (std::__shared_weak_count *)v343.i64[1];
                v252 = v343.i64[0];
              }
              LODWORD(v358) = v251;
              *((_QWORD *)&v358 + 1) = v252;
              v359 = v253;
              v343 = 0uLL;
              LODWORD(v360) = v251;
              sub_20FCED944((uint64_t)(v233 + 40), v251, (uint64_t)&v358);
              v229 = v359;
              if (!v359)
                goto LABEL_405;
              v257 = (unint64_t *)&v359->__shared_owners_;
              do
                v231 = __ldaxr(v257);
              while (__stlxr(v231 - 1, v257));
LABEL_404:
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
                v258 = (std::__shared_weak_count *)v343.i64[1];
                if (v343.i64[1])
                {
LABEL_406:
                  v259 = (unint64_t *)&v258->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                    std::__shared_weak_count::__release_weak(v258);
                  }
                }
              }
              else
              {
LABEL_405:
                v258 = (std::__shared_weak_count *)v343.i64[1];
                if (v343.i64[1])
                  goto LABEL_406;
              }
              v261 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
              if (!*((_QWORD *)&v364 + 1))
                goto LABEL_415;
              v262 = (unint64_t *)(*((_QWORD *)&v364 + 1) + 8);
              do
                v263 = __ldaxr(v262);
              while (__stlxr(v263 - 1, v262));
              if (!v263)
              {
                ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                std::__shared_weak_count::__release_weak(v261);
                v222 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
                if (!*((_QWORD *)&v363 + 1))
                  goto LABEL_240;
              }
              else
              {
LABEL_415:
                v222 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
                if (!*((_QWORD *)&v363 + 1))
                  goto LABEL_240;
              }
              v264 = (unint64_t *)&v222->__shared_owners_;
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (v265)
                goto LABEL_240;
LABEL_291:
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
        }
        else
        {
          *(_QWORD *)&v358 = &off_24C9FD220;
          *((_QWORD *)&v358 + 1) = v332;
          v359 = v334;
          *(_QWORD *)&v360 = v193 + 40 * v192;
          *((_QWORD *)&v360 + 1) = v337;
          v217 = sub_20FCEC5B8((uint64_t)&v352, (uint64_t *)&v347);
          sub_20FCEB6CC(v343.i64, (uint64_t **)&v350, v217, (uint64_t)&v358);
          v218 = v343;
          v343 = 0uLL;
          v219 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
          v349 = (__int128)v218;
          if (v219)
          {
            v220 = (unint64_t *)&v219->__shared_owners_;
            do
              v221 = __ldaxr(v220);
            while (__stlxr(v221 - 1, v220));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
              std::__shared_weak_count::__release_weak(v219);
              v222 = (std::__shared_weak_count *)v343.i64[1];
              if (!v343.i64[1])
                goto LABEL_240;
LABEL_288:
              v223 = (unint64_t *)&v222->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (v224)
                goto LABEL_240;
              goto LABEL_291;
            }
          }
          v222 = (std::__shared_weak_count *)v343.i64[1];
          if (v343.i64[1])
            goto LABEL_288;
        }
LABEL_240:
        v180 += 64;
        if (v180 == v342)
        {
          v167 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
          goto LABEL_434;
        }
      }
    }
LABEL_462:
    v277 = (uint64_t *)v27[2];
    v278 = (_OWORD *)v350;
    if ((__int128 *)v350 != (__int128 *)((char *)&v350 + 8))
    {
      do
      {
        v279 = 0;
        v280 = *((unsigned int *)v278 + 10);
        _X11 = *v277;
        __asm { PRFM            #4, [X11] }
        v283 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v280) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                        - 0x622015F714C7D297 * v280) >> 32);
        v284 = v277[3];
        for (n = (v283 >> 7) ^ 0x13701D; ; n = v279 + v286)
        {
          v286 = n & v284;
          v287 = *(_QWORD *)(_X11 + v286);
          v288 = ((v287 ^ (0x101010101010101 * (v283 & 0x7F))) - 0x101010101010101) & ~(v287 ^ (0x101010101010101
                                                                                                  * (v283 & 0x7F))) & 0x8080808080808080;
          if (v288)
            break;
LABEL_472:
          if ((v287 & (~v287 << 6) & 0x8080808080808080) != 0)
          {
            v293 = v277[1] + 32 * sub_20F346A98(v277, v283);
            *(_OWORD *)v293 = v278[2];
            *(_QWORD *)(v293 + 16) = *((_QWORD *)v278 + 6);
            v294 = *((_QWORD *)v278 + 7);
            *(_QWORD *)(v293 + 24) = v294;
            if (v294)
            {
              v295 = (unint64_t *)(v294 + 8);
              do
                v296 = __ldxr(v295);
              while (__stxr(v296 + 1, v295));
            }
            goto LABEL_477;
          }
          v279 += 8;
        }
        while (1)
        {
          v289 = v277[1] + 32 * ((v286 + (__clz(__rbit64(v288)) >> 3)) & v284);
          v290 = *(_QWORD *)v289;
          v291 = *(_DWORD *)(v289 + 8);
          _ZF = v290 == *((_QWORD *)v278 + 4) && v291 == (_DWORD)v280;
          if (_ZF)
            break;
          v288 &= v288 - 1;
          if (!v288)
            goto LABEL_472;
        }
LABEL_477:
        v297 = (_QWORD *)*((_QWORD *)v278 + 1);
        if (v297)
        {
          do
          {
            v298 = v297;
            v297 = (_QWORD *)*v297;
          }
          while (v297);
        }
        else
        {
          do
          {
            v298 = (_OWORD *)*((_QWORD *)v278 + 2);
            _ZF = *(_QWORD *)v298 == (_QWORD)v278;
            v278 = v298;
          }
          while (!_ZF);
        }
        v278 = v298;
      }
      while (v298 != (__int128 *)((char *)&v350 + 8));
      v277 = (uint64_t *)v27[2];
    }
    v299 = (_QWORD *)*v277;
    v300 = v277[1];
    v301 = *(char *)*v277;
    v26 = a1;
    if (v301 <= -2)
    {
      do
      {
        v302 = (__clz(__rbit64(((*v299 >> 7) & ~*v299 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v299 = (_QWORD *)((char *)v299 + v302);
        v300 += 32 * v302;
        v301 = *(char *)v299;
      }
      while (v301 < -1);
    }
    if (v301 != 255)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(v300 + 16) + 16) = 0;
        v304 = *((unsigned __int8 *)v299 + 1);
        v299 = (_QWORD *)((char *)v299 + 1);
        v303 = v304;
        v300 += 32;
        if ((char)v304 <= -2)
        {
          do
          {
            v305 = (__clz(__rbit64(((*v299 >> 7) & ~*v299 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v299 = (_QWORD *)((char *)v299 + v305);
            v300 += 32 * v305;
          }
          while (*(char *)v299 < -1);
          v303 = *(unsigned __int8 *)v299;
        }
      }
      while (v303 != 255);
    }
    v306 = v357;
    if (v357)
    {
      v307 = (unint64_t *)&v357->__shared_owners_;
      do
        v308 = __ldaxr(v307);
      while (__stlxr(v308 - 1, v307));
      if (!v308)
      {
        ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
        std::__shared_weak_count::__release_weak(v306);
      }
    }
    sub_20E8E90DC((uint64_t)&v352);
    sub_20EE7D0A8(*((_QWORD **)&v350 + 1));
  }
  v309 = *(_QWORD *)(v26 + 64);
  if (v309)
  {
    v310 = v27[8];
    v311 = *(_OWORD *)(v309 + 16);
    *(_OWORD *)v310->i8 = *(_OWORD *)v309;
    *(_OWORD *)v310[2].i8 = v311;
    v312 = *(_OWORD *)(v309 + 32);
    v310[6] = *(int8x8_t *)(v309 + 48);
    *(_OWORD *)v310[4].i8 = v312;
    v310[7] = *(int8x8_t *)(v309 + 56);
    v313 = *(_OWORD *)(v309 + 64);
    v310[10] = *(int8x8_t *)(v309 + 80);
    *(_OWORD *)v310[8].i8 = v313;
    v314 = *(_OWORD *)(v309 + 88);
    v310[13] = *(int8x8_t *)(v309 + 104);
    *(_OWORD *)v310[11].i8 = v314;
    v315 = *(_OWORD *)(v309 + 112);
    v310[16] = *(int8x8_t *)(v309 + 128);
    *(_OWORD *)v310[14].i8 = v315;
    v316 = *(_OWORD *)(v309 + 136);
    v310[19] = *(int8x8_t *)(v309 + 152);
    *(_OWORD *)v310[17].i8 = v316;
    v318 = *(_OWORD *)(v309 + 192);
    v317 = *(_OWORD *)(v309 + 208);
    v319 = *(_OWORD *)(v309 + 176);
    v310[28] = *(int8x8_t *)(v309 + 224);
    *(_OWORD *)v310[24].i8 = v318;
    *(_OWORD *)v310[26].i8 = v317;
    *(_OWORD *)v310[22].i8 = v319;
    *(_OWORD *)v310[20].i8 = *(_OWORD *)(v309 + 160);
    v320 = *(_OWORD *)(v309 + 264);
    v321 = *(_OWORD *)(v309 + 280);
    v322 = *(int8x8_t *)(v309 + 296);
    *(_OWORD *)v310[31].i8 = *(_OWORD *)(v309 + 248);
    v310[37] = v322;
    *(_OWORD *)v310[33].i8 = v320;
    *(_OWORD *)v310[35].i8 = v321;
    *(_OWORD *)v310[29].i8 = *(_OWORD *)(v309 + 232);
  }
  if (v27 != (int8x8_t **)v26)
    sub_20FCE9FD4((char *)v27 + 80, *(uint64_t **)(v26 + 80), *(uint64_t **)(v26 + 88), 0x80BFA02FE80BFA03 * ((uint64_t)(*(_QWORD *)(v26 + 88) - *(_QWORD *)(v26 + 80)) >> 4));
}

void sub_20FCE64F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86665C(v37 - 144);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20FCE6614()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE661C()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE6624()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE662C()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE6640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_20EE6C9B0(v31 - 224);
  sub_20E86665C((uint64_t)&a31);
  sub_20E86665C(v31 - 144);
  sub_20E86665C(v31 - 160);
  JUMPOUT(0x20FCE66BCLL);
}

void sub_20FCE6650()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE6658()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE6670()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE6678()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE66A4()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE66B0()
{
  JUMPOUT(0x20FCE66C4);
}

void sub_20FCE66B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,_QWORD *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  unint64_t *v53;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  sub_20E86665C((uint64_t)&a41);
  do
    v55 = __ldaxr(v53);
  while (__stlxr(v55 - 1, v53));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  v56 = a53;
  if (a53)
  {
    p_shared_owners = (unint64_t *)&a53->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  sub_20E8E90DC(a22);
  sub_20EE7D0A8(a44);
  _Unwind_Resume(a1);
}

char **sub_20FCE6744(_QWORD *a1, _QWORD *a2, int8x8_t **a3)
{
  size_t prime;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  void *v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  unint64_t v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint32x4_t v66;
  const float *v67;
  uint32x4_t v68;
  const float *v69;
  unsigned __int128 v70;
  unsigned __int128 v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  void **v77;
  void *v78;
  void *v79;
  void **v80;
  unint64_t v81;
  char *v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  uint8x8_t v98;
  unint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  char *v105;
  void *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  int64x2_t *v113;
  char *v114;
  void **v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void **v125;
  void *v126;
  void *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  char *v136;
  char *v137;
  __int128 v138;
  char *v139;
  __int128 v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unsigned int i;
  int64x2_t *v146;
  int64x2_t *v147;
  void *v148;
  _BYTE *v149;
  _BYTE *v150;
  int64_t v151;
  char *v152;
  char *v153;
  int64x2_t v154;
  int64x2_t *v155;
  int64_t v156;
  char *v157;
  char *v158;
  int64x2_t v159;
  int64x2_t *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  int64x2_t *v165;
  char *v166;
  int64_t v167;
  void *v168;
  unint64_t v169;
  int64x2_t v170;
  char *v171;
  uint64_t *v172;
  int64x2_t *v173;
  __int32 v174;
  int64x2_t *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  size_t v181;
  size_t v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  size_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  size_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint8x8_t v198;
  unint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  void *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  void *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  void *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char **v240;
  uint64_t v241;
  uint64_t v242;
  char **v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char **v248;
  char **v249;
  char **v250;
  char **v251;
  char **v252;
  char **v253;
  double *v254;
  double *v255;
  double v256;
  _QWORD *v257;
  _QWORD *v258;
  void *v259;
  void *v261;
  void *v262;
  void *v263;
  int8x8_t **v264;
  int64x2_t *v265;
  unsigned int v266;
  char *v267;
  void *v268[2];
  void *v269[2];
  float v270;
  void *v271[2];
  void *__dst[2];
  __int128 v273;
  size_t __sz[2];
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  char v282;
  char *v283;
  char *v284;
  int64x2_t *v285;
  int64x2_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  int64x2_t *v305;
  __int128 v306;
  void **v307;
  void *__src[93];
  char *v309;
  char *v310;
  char *v311;
  int64x2_t v312;
  __int32 v313;
  char v314;
  uint64_t v315;

  v315 = *MEMORY[0x24BDAC8D0];
  LOBYTE(__src[0]) = 0;
  v314 = 0;
  sub_20FCD2F84(a1, (uint64_t)__src, &v293);
  if (v314)
    sub_20E86A810((uint64_t)__src);
  LOBYTE(__src[0]) = 0;
  v314 = 0;
  sub_20FCD2F84(a2, (uint64_t)__src, &v283);
  if (v314)
    sub_20E86A810((uint64_t)__src);
  v281 = 0;
  v279 = 0u;
  v280 = 0u;
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v273 = 0u;
  *(_OWORD *)__sz = 0u;
  *(_OWORD *)v271 = 0u;
  *(_OWORD *)__dst = 0u;
  v282 = 1;
  *(_OWORD *)v268 = 0u;
  *(_OWORD *)v269 = 0u;
  v270 = 1.0;
  v6 = v283;
  v7 = v284;
  if (v283 == v284)
    goto LABEL_108;
  do
  {
    LODWORD(__src[0]) = *(_DWORD *)v6;
    sub_20FCEA8D8((uint64_t)&__src[1], (uint64_t)(v6 + 8));
    v8 = LODWORD(__src[0]);
    v9 = (unint64_t)v268[1];
    if (v268[1])
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v268[1]);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        prime = LODWORD(__src[0]);
        if (v268[1] <= (void *)LODWORD(__src[0]))
          prime = LODWORD(__src[0]) % (unint64_t)v268[1];
      }
      else
      {
        prime = (LODWORD(v268[1]) - 1) & (uint64_t)__src[0];
      }
      v11 = (uint64_t **)*((_QWORD *)v268[0] + prime);
      if (v11)
      {
        v12 = *v11;
        if (v12)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              v14 = v12[1];
              if (v14 == LODWORD(__src[0]))
              {
                if (*((_DWORD *)v12 + 4) == LODWORD(__src[0]))
                  goto LABEL_66;
              }
              else if ((v14 & ((uint64_t)v268[1] - 1)) != prime)
              {
                goto LABEL_28;
              }
              v12 = (uint64_t *)*v12;
              if (!v12)
                goto LABEL_28;
            }
          }
          do
          {
            v13 = v12[1];
            if (v13 == LODWORD(__src[0]))
            {
              if (*((_DWORD *)v12 + 4) == LODWORD(__src[0]))
                goto LABEL_66;
            }
            else
            {
              if ((void *)v13 >= v268[1])
                v13 %= (unint64_t)v268[1];
              if (v13 != prime)
                break;
            }
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
      }
    }
LABEL_28:
    v15 = operator new(0x18uLL);
    *v15 = 0;
    v15[1] = v8;
    *((_DWORD *)v15 + 4) = v8;
    *((_DWORD *)v15 + 5) = v8;
    v16 = (float)((unint64_t)v269[1] + 1);
    if (v9 && (float)(v270 * (float)v9) >= v16)
    {
      v8 = prime;
    }
    else
    {
      v17 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v17 = 1;
      v18 = v17 | (2 * v9);
      v19 = vcvtps_u32_f32(v16 / v270);
      if (v18 <= v19)
        prime = v19;
      else
        prime = v18;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v9 = (unint64_t)v268[1];
      }
      if (prime > v9)
        goto LABEL_41;
      if (prime < v9)
      {
        v20 = vcvtps_u32_f32((float)(unint64_t)v269[1] / v270);
        if (v9 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
        {
          v20 = std::__next_prime(v20);
        }
        else
        {
          v22 = 1 << -(char)__clz(v20 - 1);
          if (v20 >= 2)
            v20 = v22;
        }
        if (prime <= v20)
          prime = v20;
        if (prime < v9)
LABEL_41:
          sub_20E8D2B3C((uint64_t)v268, prime);
      }
      v9 = (unint64_t)v268[1];
      if (((unint64_t)v268[1] & ((unint64_t)v268[1] - 1)) != 0)
      {
        if (v268[1] <= (void *)v8)
          v8 %= (size_t)v268[1];
      }
      else
      {
        v8 = (LODWORD(v268[1]) - 1) & v8;
      }
    }
    v23 = v268[0];
    v24 = (_QWORD *)*((_QWORD *)v268[0] + v8);
    if (v24)
    {
      *v15 = *v24;
LABEL_64:
      *v24 = v15;
      goto LABEL_65;
    }
    *v15 = v269[0];
    v269[0] = v15;
    v23[v8] = v269;
    if (*v15)
    {
      v25 = *(_QWORD *)(*v15 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9)
          v25 %= v9;
      }
      else
      {
        v25 &= v9 - 1;
      }
      v24 = (char *)v268[0] + 8 * v25;
      goto LABEL_64;
    }
LABEL_65:
    ++v269[1];
LABEL_66:
    if ((SHIBYTE(__src[22]) & 0x80000000) == 0)
    {
      v26 = __src[17];
      if (!__src[17])
        goto LABEL_69;
LABEL_68:
      __src[18] = v26;
      operator delete(v26);
      goto LABEL_69;
    }
    operator delete(__src[20]);
    v26 = __src[17];
    if (__src[17])
      goto LABEL_68;
LABEL_69:
    if (SHIBYTE(__src[16]) < 0)
      operator delete(__src[14]);
    v6 += 184;
  }
  while (v6 != v7);
  v27 = v269[0];
  if (v269[0])
  {
    v28 = v293;
    v29 = v294;
    if (v293 != v294)
    {
      v30 = v294 - v293 - 184;
      v31 = v30 / 0xB8 + 1;
      v32 = v269[0];
      while (1)
      {
        v33 = 0;
        v34 = v32[5];
        do
        {
          if (v30 < 0xB8)
          {
            v35 = 0;
            v36 = v28;
            do
            {
LABEL_88:
              v41 = *(_DWORD *)v36;
              v36 += 184;
              if (v34 == v41)
                ++v35;
            }
            while (v36 != v29);
            goto LABEL_91;
          }
          v37 = 0;
          v38 = 0;
          v39 = v31 & 0x3FFFFFFFFFFFFFELL;
          v40 = v28;
          do
          {
            if (v34 == *(_DWORD *)v40)
              ++v37;
            if (v34 == *((_DWORD *)v40 + 46))
              ++v38;
            v40 += 368;
            v39 -= 2;
          }
          while (v39);
          v35 = v38 + v37;
          v36 = &v28[184 * (v31 & 0x3FFFFFFFFFFFFFELL)];
          if (v31 != (v31 & 0x3FFFFFFFFFFFFFELL))
            goto LABEL_88;
LABEL_91:
          v42 = 0;
          v43 = v27;
          do
          {
            if (v34 == v43[5])
              ++v42;
            v43 = *(_DWORD **)v43;
          }
          while (v43);
          if (!v35 && v42 == 1)
            break;
          v32[5] = ++v34;
          ++v33;
        }
        while (v33 != 1000);
        v32 = *(_DWORD **)v32;
        if (!v32)
          goto LABEL_108;
      }
    }
    v44 = v269[0];
    do
    {
      v45 = 0;
      v46 = v44[5];
      do
      {
        v47 = 0;
        v48 = v27;
        do
        {
          if (v46 == v48[5])
            ++v47;
          v48 = *(_DWORD **)v48;
        }
        while (v48);
        if (v47 == 1)
          break;
        v44[5] = ++v46;
        ++v45;
      }
      while (v45 != 1000);
      v44 = *(_DWORD **)v44;
    }
    while (v44);
  }
LABEL_108:
  v49 = v295;
  if (v295 == v296)
  {
    v51 = 0;
  }
  else
  {
    v50 = v296 - v295 - 792;
    if (v50 < 0x318)
    {
      v51 = 0;
      v52 = v295;
      goto LABEL_122;
    }
    v53 = 0;
    v54 = 0;
    v55 = v50 / 0x318 + 1;
    v52 = &v295[792 * (v55 & 0xFFFFFFFFFFFFFELL)];
    v56 = v55 & 0xFFFFFFFFFFFFFELL;
    do
    {
      if (v53 <= *((_DWORD *)v49 + 196))
        v53 = *((_DWORD *)v49 + 196);
      if (v54 <= *((_DWORD *)v49 + 394))
        v54 = *((_DWORD *)v49 + 394);
      v49 += 1584;
      v56 -= 2;
    }
    while (v56);
    if (v53 <= v54)
      v51 = v54;
    else
      v51 = v53;
    if (v55 != (v55 & 0xFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_122:
        if (v51 <= *((_DWORD *)v52 + 196))
          v51 = *((_DWORD *)v52 + 196);
        v52 += 792;
      }
      while (v52 != v296);
    }
  }
  v264 = a3;
  v57 = v299;
  if (v299 == v300)
  {
    v58 = 0;
  }
  else
  {
    v58 = 0;
    do
    {
      v60 = *v57;
      v59 = v57[1];
      if (*v57 != v59)
      {
        v61 = v59 - v60 - 16;
        if (v61 >= 0x80)
        {
          v63 = (v61 >> 4) + 1;
          v64 = v63 & 7;
          if ((v63 & 7) == 0)
            v64 = 8;
          v65 = v63 - v64;
          v62 = v60 + 16 * v65;
          v66 = (uint32x4_t)vdupq_n_s32(v58);
          v67 = (const float *)(v60 + 72);
          v68 = v66;
          do
          {
            v69 = v67 - 16;
            v70 = (unsigned __int128)vld4q_f32(v69);
            v71 = (unsigned __int128)vld4q_f32(v67);
            v66 = vmaxq_u32(v66, (uint32x4_t)v70);
            v68 = vmaxq_u32(v68, (uint32x4_t)v71);
            v67 += 32;
            v65 -= 8;
          }
          while (v65);
          v58 = vmaxvq_u32(vmaxq_u32(v66, v68));
        }
        else
        {
          v62 = *v57;
        }
        do
        {
          if (v58 <= *(_DWORD *)(v62 + 8))
            v58 = *(_DWORD *)(v62 + 8);
          v62 += 16;
        }
        while (v62 != v59);
      }
      v57 += 3;
    }
    while (v57 != v300);
  }
  v73 = v293;
  v72 = v294;
  v74 = 0xD37A6F4DE9BD37A7 * ((v294 - v293) >> 3);
  v75 = (uint64_t)__dst[0];
  v76 = (void **)v271[0];
  if (0xD37A6F4DE9BD37A7 * (((char *)__dst[0] - (char *)v271[0]) >> 3) >= v74)
  {
    v80 = (void **)v271[1];
    v81 = 0xD37A6F4DE9BD37A7 * (((char *)v271[1] - (char *)v271[0]) >> 3);
    if (v81 < v74)
    {
      if (v271[1] != v271[0])
      {
        v82 = (char *)v271[0] + 8;
        v83 = 8 * (((char *)v271[1] - (char *)v271[0]) >> 3);
        v84 = v293 + 8;
        do
        {
          *((_DWORD *)v82 - 2) = *((_DWORD *)v84 - 2);
          v82 = (char *)(sub_20FCEAA6C((uint64_t)v82, (uint64_t)v84) + 184);
          v84 += 184;
          v83 -= 184;
        }
        while (v83);
        v76 = (void **)v271[1];
      }
      v85 = &v73[184 * v81];
      v86 = (char *)v76;
      if (v85 != v72)
      {
        v87 = 0;
        do
        {
          LODWORD(v76[v87]) = *(_DWORD *)&v85[v87 * 8];
          sub_20FCEA8D8((uint64_t)&v76[v87 + 1], (uint64_t)&v85[v87 * 8 + 8]);
          v87 += 23;
        }
        while (&v85[v87 * 8] != v72);
        v86 = (char *)&v76[v87];
      }
      v271[1] = v86;
      v88 = v283;
      v89 = v284;
      if (v283 == v284)
        goto LABEL_250;
      while (1)
      {
LABEL_193:
        LODWORD(__src[0]) = *(_DWORD *)v88;
        sub_20FCEA8D8((uint64_t)&__src[1], (uint64_t)(v88 + 8));
        v97 = (int)__src[0];
        if (!v268[1])
          goto LABEL_213;
        v98 = (uint8x8_t)vcnt_s8((int8x8_t)v268[1]);
        v98.i16[0] = vaddlv_u8(v98);
        if (v98.u32[0] > 1uLL)
        {
          v99 = LODWORD(__src[0]);
          if (v268[1] <= (void *)LODWORD(__src[0]))
            v99 = LODWORD(__src[0]) % (unint64_t)v268[1];
        }
        else
        {
          v99 = (LODWORD(v268[1]) - 1) & (uint64_t)__src[0];
        }
        v100 = (uint64_t **)*((_QWORD *)v268[0] + v99);
        if (!v100 || (v101 = *v100) == 0)
        {
LABEL_213:
          v105 = (char *)v271[1];
          v104 = __dst[0];
          if (v271[1] >= __dst[0])
            goto LABEL_216;
LABEL_214:
          *(_DWORD *)v105 = v97;
          sub_20FCEA8D8((uint64_t)(v105 + 8), (uint64_t)&__src[1]);
          v106 = v105 + 184;
          goto LABEL_241;
        }
        if (v98.u32[0] < 2uLL)
        {
          while (1)
          {
            v103 = v101[1];
            if (v103 == LODWORD(__src[0]))
            {
              if (*((_DWORD *)v101 + 4) == LODWORD(__src[0]))
                goto LABEL_215;
            }
            else if ((v103 & ((uint64_t)v268[1] - 1)) != v99)
            {
              goto LABEL_213;
            }
            v101 = (uint64_t *)*v101;
            if (!v101)
              goto LABEL_213;
          }
        }
        while (1)
        {
          v102 = v101[1];
          if (v102 == LODWORD(__src[0]))
            break;
          if ((void *)v102 >= v268[1])
            v102 %= (unint64_t)v268[1];
          if (v102 != v99)
            goto LABEL_213;
LABEL_203:
          v101 = (uint64_t *)*v101;
          if (!v101)
            goto LABEL_213;
        }
        if (*((_DWORD *)v101 + 4) != LODWORD(__src[0]))
          goto LABEL_203;
LABEL_215:
        v97 = *((_DWORD *)v101 + 5);
        LODWORD(__src[0]) = v97;
        v105 = (char *)v271[1];
        v104 = __dst[0];
        if (v271[1] < __dst[0])
          goto LABEL_214;
LABEL_216:
        v107 = 0xD37A6F4DE9BD37A7 * ((v105 - (char *)v271[0]) >> 3);
        v108 = v107 + 1;
        if (v107 + 1 > 0x1642C8590B21642)
          sub_20E92CED8();
        v109 = 0xD37A6F4DE9BD37A7 * ((int64_t)((uint64_t)v104 - (unint64_t)v271[0]) >> 3);
        if (2 * v109 > v108)
          v108 = 2 * v109;
        if (v109 >= 0xB21642C8590B21)
          v110 = 0x1642C8590B21642;
        else
          v110 = v108;
        v307 = __dst;
        if (v110)
        {
          if (v110 > 0x1642C8590B21642)
            sub_20E877A38();
          v111 = (char *)operator new(184 * v110);
        }
        else
        {
          v111 = 0;
        }
        v112 = &v111[184 * v107];
        v304 = v111;
        v305 = (int64x2_t *)v112;
        *(_QWORD *)&v306 = v112;
        *((_QWORD *)&v306 + 1) = &v111[184 * v110];
        *(_DWORD *)v112 = v97;
        sub_20FCEA8D8((uint64_t)(v112 + 8), (uint64_t)&__src[1]);
        v113 = v305;
        v106 = (void *)(v306 + 184);
        v114 = (char *)v271[0];
        v115 = (void **)v271[1];
        if (v271[1] != v271[0])
        {
          v116 = 0;
          do
          {
            v117 = &v113->i8[v116 * 8];
            v118 = (char *)&v115[v116];
            *((_DWORD *)v117 - 46) = v115[v116 - 23];
            v119 = *(_OWORD *)&v115[v116 - 21];
            *(_OWORD *)(v117 - 152) = *(_OWORD *)&v115[v116 - 19];
            *(_OWORD *)(v117 - 168) = v119;
            v120 = *(_OWORD *)&v115[v116 - 17];
            v121 = *(_OWORD *)&v115[v116 - 15];
            v122 = *(_OWORD *)&v115[v116 - 13];
            *(_OWORD *)(v117 - 88) = *(_OWORD *)&v115[v116 - 11];
            *(_OWORD *)(v117 - 104) = v122;
            *(_OWORD *)(v117 - 120) = v121;
            *(_OWORD *)(v117 - 136) = v120;
            v123 = *(_OWORD *)&v115[v116 - 9];
            *((_QWORD *)v117 - 7) = v115[v116 - 7];
            *(_OWORD *)(v117 - 72) = v123;
            *((_QWORD *)v118 - 8) = 0;
            *((_QWORD *)v118 - 7) = 0;
            *((_QWORD *)v118 - 9) = 0;
            *((_QWORD *)v117 - 6) = 0;
            *((_QWORD *)v117 - 5) = 0;
            *((_QWORD *)v117 - 4) = 0;
            *((_OWORD *)v117 - 3) = *(_OWORD *)&v115[v116 - 6];
            *((_QWORD *)v117 - 4) = v115[v116 - 4];
            *((_QWORD *)v118 - 6) = 0;
            *((_QWORD *)v118 - 5) = 0;
            *((_QWORD *)v118 - 4) = 0;
            v124 = *(_OWORD *)&v115[v116 - 3];
            *((_QWORD *)v117 - 1) = v115[v116 - 1];
            *(_OWORD *)(v117 - 24) = v124;
            *((_QWORD *)v118 - 2) = 0;
            *((_QWORD *)v118 - 1) = 0;
            *((_QWORD *)v118 - 3) = 0;
            v116 -= 23;
          }
          while (&v115[v116] != (void **)v114);
          v115 = (void **)v271[0];
          v125 = (void **)v271[1];
          v271[0] = &v113->i8[v116 * 8];
          v271[1] = v106;
          __dst[0] = *((void **)&v306 + 1);
          while (1)
          {
            if (v125 == v115)
            {
              if (v115)
                goto LABEL_240;
              goto LABEL_241;
            }
            if ((*((char *)v125 - 1) & 0x80000000) == 0)
              break;
            operator delete(*(v125 - 3));
            v126 = *(v125 - 6);
            if (v126)
              goto LABEL_234;
LABEL_235:
            if (*((char *)v125 - 49) < 0)
              operator delete(*(v125 - 9));
            v125 -= 23;
          }
          v126 = *(v125 - 6);
          if (!v126)
            goto LABEL_235;
LABEL_234:
          *(v125 - 5) = v126;
          operator delete(v126);
          goto LABEL_235;
        }
        v271[0] = v305;
        v271[1] = (void *)(v306 + 184);
        __dst[0] = *((void **)&v306 + 1);
        if (v115)
LABEL_240:
          operator delete(v115);
LABEL_241:
        v271[1] = v106;
        if (SHIBYTE(__src[22]) < 0)
          break;
        v127 = __src[17];
        if (__src[17])
          goto LABEL_243;
LABEL_244:
        if (SHIBYTE(__src[16]) < 0)
          operator delete(__src[14]);
        v88 += 184;
        if (v88 == v89)
          goto LABEL_250;
      }
      operator delete(__src[20]);
      v127 = __src[17];
      if (!__src[17])
        goto LABEL_244;
LABEL_243:
      __src[18] = v127;
      operator delete(v127);
      goto LABEL_244;
    }
    if (v293 != v294)
    {
      v90 = (char *)v271[0] + 8;
      do
      {
        *((_DWORD *)v90 - 2) = *(_DWORD *)v73;
        v91 = sub_20FCEAA6C((uint64_t)v90, (uint64_t)(v73 + 8));
        v73 += 184;
        v76 += 23;
        v90 = (char *)(v91 + 184);
      }
      while (v73 != v72);
      v80 = (void **)v271[1];
    }
    while (1)
    {
      if (v80 == v76)
        goto LABEL_190;
      if ((*((char *)v80 - 1) & 0x80000000) == 0)
        break;
      operator delete(*(v80 - 3));
      v92 = *(v80 - 6);
      if (v92)
        goto LABEL_172;
LABEL_173:
      if (*((char *)v80 - 49) < 0)
        operator delete(*(v80 - 9));
      v80 -= 23;
    }
    v92 = *(v80 - 6);
    if (!v92)
      goto LABEL_173;
LABEL_172:
    *(v80 - 5) = v92;
    operator delete(v92);
    goto LABEL_173;
  }
  if (!v271[0])
    goto LABEL_179;
  v77 = (void **)v271[1];
  v78 = v271[0];
  if (v271[1] != v271[0])
  {
    while ((*((char *)v77 - 1) & 0x80000000) == 0)
    {
      v79 = *(v77 - 6);
      if (v79)
        goto LABEL_148;
LABEL_149:
      if (*((char *)v77 - 49) < 0)
        operator delete(*(v77 - 9));
      v77 -= 23;
      if (v77 == v76)
      {
        v78 = v271[0];
        goto LABEL_178;
      }
    }
    operator delete(*(v77 - 3));
    v79 = *(v77 - 6);
    if (!v79)
      goto LABEL_149;
LABEL_148:
    *(v77 - 5) = v79;
    operator delete(v79);
    goto LABEL_149;
  }
LABEL_178:
  v271[1] = v76;
  operator delete(v78);
  v75 = 0;
  v271[0] = 0;
  v271[1] = 0;
  __dst[0] = 0;
LABEL_179:
  if (v74 > 0x1642C8590B21642)
    goto LABEL_494;
  v93 = 0xD37A6F4DE9BD37A7 * (v75 >> 3);
  v94 = 2 * v93;
  if (2 * v93 <= v74)
    v94 = v74;
  v95 = v93 >= 0xB21642C8590B21 ? 0x1642C8590B21642 : v94;
  if (v95 > 0x1642C8590B21642)
LABEL_494:
    sub_20E92CED8();
  v76 = (void **)operator new(184 * v95);
  v271[0] = v76;
  v271[1] = v76;
  __dst[0] = &v76[23 * v95];
  if (v73 != v72)
  {
    v96 = 0;
    do
    {
      LODWORD(v76[v96 / 8]) = *(_DWORD *)&v73[v96];
      sub_20FCEA8D8((uint64_t)&v76[v96 / 8 + 1], (uint64_t)&v73[v96 + 8]);
      v96 += 184;
    }
    while (&v73[v96] != v72);
    v76 = (void **)((char *)v76 + v96);
  }
LABEL_190:
  v271[1] = v76;
  v88 = v283;
  v89 = v284;
  if (v283 != v284)
    goto LABEL_193;
LABEL_250:
  v129 = v295;
  v128 = v296;
  v130 = 0xAFD6A052BF5A814BLL * ((v296 - v295) >> 3);
  v131 = *((_QWORD *)&v273 + 1);
  v132 = (char *)__dst[1];
  if (0xAFD6A052BF5A814BLL * ((uint64_t)(*((_QWORD *)&v273 + 1) - (unint64_t)__dst[1]) >> 3) < v130)
  {
    if (__dst[1])
    {
      v133 = (char *)v273;
      v134 = __dst[1];
      if ((void *)v273 != __dst[1])
      {
        do
        {
          v135 = (void *)*((_QWORD *)v133 - 6);
          if (v135)
          {
            *((_QWORD *)v133 - 5) = v135;
            operator delete(v135);
          }
          v133 -= 792;
        }
        while (v133 != v132);
        v134 = __dst[1];
      }
      *(_QWORD *)&v273 = v132;
      operator delete(v134);
      v131 = 0;
      __dst[1] = 0;
      v273 = 0uLL;
    }
    if (v130 > 0x52BF5A814AFD6ALL)
      goto LABEL_495;
    v141 = 0xAFD6A052BF5A814BLL * (v131 >> 3);
    v142 = 2 * v141;
    if (2 * v141 <= v130)
      v142 = v130;
    v143 = v141 >= 0x295FAD40A57EB5 ? 0x52BF5A814AFD6ALL : v142;
    if (v143 > 0x52BF5A814AFD6ALL)
LABEL_495:
      sub_20E92CED8();
    __dst[1] = operator new(792 * v143);
    *(void **)&v273 = __dst[1];
    *((_QWORD *)&v273 + 1) = (char *)__dst[1] + 792 * v143;
    v144 = sub_20FCEAC24((int)&v273 + 8, v129, v128, (char *)__dst[1]);
    goto LABEL_280;
  }
  v136 = (char *)v273;
  if (0xAFD6A052BF5A814BLL * ((uint64_t)(v273 - (unint64_t)__dst[1]) >> 3) >= v130)
  {
    if (v295 == v296)
    {
      v139 = (char *)__dst[1];
    }
    else
    {
      v139 = (char *)__dst[1];
      do
      {
        memcpy(v132, v129, 0x2E8uLL);
        if (v132 != v129)
          sub_20F4393E4((_QWORD *)v132 + 93, *((char **)v129 + 93), *((char **)v129 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v129 + 94) - *((_QWORD *)v129 + 93)) >> 3));
        v140 = *((_OWORD *)v129 + 48);
        *((_DWORD *)v132 + 196) = *((_DWORD *)v129 + 196);
        *((_OWORD *)v132 + 48) = v140;
        v139 += 792;
        v129 += 792;
        v132 += 792;
      }
      while (v129 != v128);
      v136 = (char *)v273;
    }
    while (v136 != v139)
    {
      v148 = (void *)*((_QWORD *)v136 - 6);
      if (v148)
      {
        *((_QWORD *)v136 - 5) = v148;
        operator delete(v148);
      }
      v136 -= 792;
    }
    *(_QWORD *)&v273 = v139;
    i = v51 + 1;
    v147 = v285;
    v146 = v286;
    if (v285 == v286)
      goto LABEL_328;
    goto LABEL_289;
  }
  v137 = &v295[8 * ((uint64_t)(v273 - (unint64_t)__dst[1]) >> 3)];
  if ((void *)v273 != __dst[1])
  {
    do
    {
      memcpy(v132, v129, 0x2E8uLL);
      if (v132 != v129)
        sub_20F4393E4((_QWORD *)v132 + 93, *((char **)v129 + 93), *((char **)v129 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v129 + 94) - *((_QWORD *)v129 + 93)) >> 3));
      v138 = *((_OWORD *)v129 + 48);
      *((_DWORD *)v132 + 196) = *((_DWORD *)v129 + 196);
      *((_OWORD *)v132 + 48) = v138;
      v129 += 792;
      v132 += 792;
    }
    while (v129 != v137);
    v132 = (char *)v273;
  }
  v144 = sub_20FCEAC24((int)&v273 + 8, v137, v128, v132);
LABEL_280:
  *(_QWORD *)&v273 = v144;
  i = v51 + 1;
  v147 = v285;
  v146 = v286;
  if (v285 != v286)
  {
LABEL_289:
    v266 = i;
    v265 = v146;
    do
    {
      memcpy(__src, v147, sizeof(__src));
      v310 = 0;
      v311 = 0;
      v309 = 0;
      v149 = (_BYTE *)v147[46].i64[1];
      v150 = (_BYTE *)v147[47].i64[0];
      v151 = v150 - v149;
      if (v150 == v149)
      {
        v153 = 0;
        v152 = 0;
      }
      else
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v151 >> 3)) > 0x492492492492492)
          sub_20E92CED8();
        v152 = (char *)operator new(v151);
        v309 = v152;
        v153 = &v152[8 * (v151 >> 3)];
        v311 = v153;
        memcpy(v152, v149, v151);
        v310 = v153;
      }
      v154 = v147[48];
      v313 = v147[49].i32[0];
      v312 = v154;
      v313 += i;
      v155 = (int64x2_t *)v273;
      if ((unint64_t)v273 >= *((_QWORD *)&v273 + 1))
      {
        v160 = (int64x2_t *)__dst[1];
        v161 = 0xAFD6A052BF5A814BLL * ((uint64_t)(v273 - (unint64_t)__dst[1]) >> 3);
        v162 = v161 + 1;
        if (v161 + 1 > 0x52BF5A814AFD6ALL)
          sub_20E92CED8();
        if (0x5FAD40A57EB50296 * ((uint64_t)(*((_QWORD *)&v273 + 1) - (unint64_t)__dst[1]) >> 3) > v162)
          v162 = 0x5FAD40A57EB50296 * ((uint64_t)(*((_QWORD *)&v273 + 1) - (unint64_t)__dst[1]) >> 3);
        if (0xAFD6A052BF5A814BLL * ((uint64_t)(*((_QWORD *)&v273 + 1) - (unint64_t)__dst[1]) >> 3) >= 0x295FAD40A57EB5)
          v163 = 0x52BF5A814AFD6ALL;
        else
          v163 = v162;
        v307 = (void **)&v273 + 1;
        if (v163)
        {
          if (v163 > 0x52BF5A814AFD6ALL)
            sub_20E877A38();
          v164 = (char *)operator new(792 * v163);
        }
        else
        {
          v164 = 0;
        }
        v165 = (int64x2_t *)&v164[792 * v161];
        v304 = v164;
        v305 = v165;
        v166 = &v164[792 * v163];
        *(_QWORD *)&v306 = v165;
        *((_QWORD *)&v306 + 1) = v166;
        memcpy(v165, __src, 0x2E8uLL);
        v165[46].i64[1] = 0;
        v165[47].i64[1] = 0;
        v165[47].i64[0] = 0;
        v167 = v153 - v152;
        if (v167)
        {
          v267 = v166;
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v167 >> 3)) > 0x492492492492492)
            sub_20E92CED8();
          v168 = operator new(v167);
          v165[46].i64[1] = (uint64_t)v168;
          v169 = (unint64_t)v168 + 8 * (v167 >> 3);
          memcpy(v168, v152, v167);
          v170 = vdupq_n_s64(v169);
          v166 = v267;
          v165[47] = v170;
        }
        v171 = &v164[792 * v161];
        *((int64x2_t *)v171 + 48) = v312;
        *((_DWORD *)v171 + 196) = v313;
        v172 = &v165[49].i64[1];
        *(_QWORD *)&v306 = (char *)v165 + 792;
        if (v155 == v160)
        {
          __dst[1] = &v164[792 * v161];
          *(_QWORD *)&v273 = (char *)v165 + 792;
          *((_QWORD *)&v273 + 1) = v166;
          i = v266;
          v146 = v265;
        }
        else
        {
          v146 = v265;
          do
          {
            v173 = v165;
            v165 = (int64x2_t *)((char *)v165 - 792);
            memcpy(v165, &v155[-50].u64[1], 0x2E8uLL);
            v173[-3].i64[1] = 0;
            v173[-2].i64[0] = 0;
            v173[-3] = v155[-3];
            v173[-2].i64[0] = v155[-2].i64[0];
            v155[-3].i64[0] = 0;
            v155[-3].i64[1] = 0;
            v155[-2].i64[0] = 0;
            v174 = v155[-1].i32[2];
            *(int64x2_t *)((char *)v173 - 24) = *(int64x2_t *)((char *)v155 - 24);
            v173[-1].i32[2] = v174;
            v155 = (int64x2_t *)((char *)v155 - 792);
          }
          while (v155 != v160);
          v155 = (int64x2_t *)__dst[1];
          v175 = (int64x2_t *)v273;
          __dst[1] = v165;
          v273 = v306;
          v172 = (uint64_t *)v306;
          for (i = v266; v175 != v155; v175 = (int64x2_t *)((char *)v175 - 792))
          {
            v176 = (void *)v175[-3].i64[0];
            if (v176)
            {
              v175[-3].i64[1] = (uint64_t)v176;
              operator delete(v176);
            }
          }
        }
        if (v155)
          operator delete(v155);
        v152 = v309;
        *(_QWORD *)&v273 = v172;
        if (!v309)
          goto LABEL_291;
      }
      else
      {
        memcpy((void *)v273, __src, 0x2E8uLL);
        v155[46].i64[1] = 0;
        v155[47].i64[1] = 0;
        v155[47].i64[0] = 0;
        v156 = v153 - v152;
        if (v156)
        {
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v156 >> 3)) > 0x492492492492492)
            sub_20E92CED8();
          v157 = (char *)operator new(v156);
          v155[46].i64[1] = (uint64_t)v157;
          v155[47].i64[0] = (uint64_t)v157;
          v158 = &v157[8 * (v156 >> 3)];
          v155[47].i64[1] = (uint64_t)v158;
          memcpy(v157, v152, v156);
          v155[47].i64[0] = (uint64_t)v158;
        }
        v159 = v312;
        v155[49].i32[0] = v313;
        v155[48] = v159;
        *(_QWORD *)&v273 = (char *)v155 + 792;
        if (!v152)
          goto LABEL_291;
      }
      v310 = v152;
      operator delete(v152);
LABEL_291:
      v147 = (int64x2_t *)((char *)v147 + 792);
    }
    while (v147 != v146);
  }
LABEL_328:
  v177 = v297;
  v178 = v298;
  v179 = 0x86BCA1AF286BCA1BLL * ((v298 - v297) >> 3);
  v180 = v275;
  v181 = __sz[0];
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v275 - __sz[0]) >> 3) >= v179)
  {
    v187 = __sz[1];
    v188 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
    if (v188 < v179)
    {
      if (__sz[1] != __sz[0])
      {
        v189 = 8 * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
        v190 = v297;
        do
        {
          sub_20FCEAF1C(v181, v190);
          v190 += 152;
          v181 += 152;
          v189 -= 152;
        }
        while (v189);
        v181 = __sz[1];
      }
      v191 = sub_20FCEAE48(v177 + 152 * v188, v178, v181);
      goto LABEL_362;
    }
    if (v297 == v298)
    {
      v192 = __sz[0];
    }
    else
    {
      v192 = __sz[0];
      do
      {
        sub_20FCEAF1C(v181, v177);
        v177 += 152;
        v181 += 152;
        v192 += 152;
      }
      while (v177 != v178);
      v187 = __sz[1];
    }
    while (1)
    {
      if (v187 == v192)
        goto LABEL_363;
      v261 = *(void **)(v187 - 32);
      if (v261)
      {
        *(_QWORD *)(v187 - 24) = v261;
        operator delete(v261);
      }
      if ((*(char *)(v187 - 33) & 0x80000000) == 0)
        break;
      operator delete(*(void **)(v187 - 56));
      v262 = *(void **)(v187 - 80);
      if (v262)
        goto LABEL_482;
LABEL_483:
      v263 = *(void **)(v187 - 104);
      if (v263)
      {
        *(_QWORD *)(v187 - 96) = v263;
        operator delete(v263);
      }
      v187 -= 152;
    }
    v262 = *(void **)(v187 - 80);
    if (!v262)
      goto LABEL_483;
LABEL_482:
    *(_QWORD *)(v187 - 72) = v262;
    operator delete(v262);
    goto LABEL_483;
  }
  if (__sz[0])
  {
    v182 = __sz[1];
    v183 = (void *)__sz[0];
    if (__sz[1] == __sz[0])
    {
LABEL_353:
      __sz[1] = v181;
      operator delete(v183);
      v180 = 0;
      __sz[0] = 0;
      __sz[1] = 0;
      *(_QWORD *)&v275 = 0;
      goto LABEL_354;
    }
    while (2)
    {
      v184 = *(void **)(v182 - 32);
      if (v184)
      {
        *(_QWORD *)(v182 - 24) = v184;
        operator delete(v184);
      }
      if (*(char *)(v182 - 33) < 0)
      {
        operator delete(*(void **)(v182 - 56));
        v185 = *(void **)(v182 - 80);
        if (v185)
        {
LABEL_337:
          *(_QWORD *)(v182 - 72) = v185;
          operator delete(v185);
        }
      }
      else
      {
        v185 = *(void **)(v182 - 80);
        if (v185)
          goto LABEL_337;
      }
      v186 = *(void **)(v182 - 104);
      if (v186)
      {
        *(_QWORD *)(v182 - 96) = v186;
        operator delete(v186);
      }
      v182 -= 152;
      if (v182 == v181)
      {
        v183 = (void *)__sz[0];
        goto LABEL_353;
      }
      continue;
    }
  }
LABEL_354:
  if (v179 > 0x1AF286BCA1AF286)
    goto LABEL_496;
  v193 = 0x86BCA1AF286BCA1BLL * (v180 >> 3);
  v194 = 2 * v193;
  if (2 * v193 <= v179)
    v194 = v179;
  v195 = v193 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v194;
  if (v195 > 0x1AF286BCA1AF286)
LABEL_496:
    sub_20E92CED8();
  __sz[0] = (size_t)operator new(152 * v195);
  __sz[1] = __sz[0];
  *(_QWORD *)&v275 = __sz[0] + 152 * v195;
  v191 = sub_20FCEAE48(v177, v178, __sz[0]);
LABEL_362:
  v192 = v191;
LABEL_363:
  __sz[1] = v192;
  v197 = v287;
  v196 = v288;
  if (v287 != v288)
  {
LABEL_366:
    sub_20FCE014C((uint64_t)__src, v197);
    LODWORD(__src[3]) += i;
    if (!v268[1])
      goto LABEL_386;
    v198 = (uint8x8_t)vcnt_s8((int8x8_t)v268[1]);
    v198.i16[0] = vaddlv_u8(v198);
    if (v198.u32[0] > 1uLL)
    {
      v199 = LODWORD(__src[4]);
      if (v268[1] <= (void *)LODWORD(__src[4]))
        v199 = LODWORD(__src[4]) % (unint64_t)v268[1];
    }
    else
    {
      v199 = (LODWORD(v268[1]) - 1) & (uint64_t)__src[4];
    }
    v200 = (uint64_t **)*((_QWORD *)v268[0] + v199);
    if (!v200 || (v201 = *v200) == 0)
    {
LABEL_386:
      v204 = __sz[1];
      if (__sz[1] >= (unint64_t)v275)
        goto LABEL_389;
LABEL_387:
      sub_20FCE014C(v204, (uint64_t)__src);
      v205 = v204 + 152;
      goto LABEL_390;
    }
    if (v198.u32[0] < 2uLL)
    {
      while (1)
      {
        v203 = v201[1];
        if (v203 == LODWORD(__src[4]))
        {
          if (*((_DWORD *)v201 + 4) == LODWORD(__src[4]))
            goto LABEL_388;
        }
        else if ((v203 & ((uint64_t)v268[1] - 1)) != v199)
        {
          goto LABEL_386;
        }
        v201 = (uint64_t *)*v201;
        if (!v201)
          goto LABEL_386;
      }
    }
    while (1)
    {
      v202 = v201[1];
      if (v202 == LODWORD(__src[4]))
      {
        if (*((_DWORD *)v201 + 4) == LODWORD(__src[4]))
        {
LABEL_388:
          LODWORD(__src[4]) = *((_DWORD *)v201 + 5);
          v204 = __sz[1];
          if (__sz[1] < (unint64_t)v275)
            goto LABEL_387;
LABEL_389:
          v205 = sub_20FCDFF48((int64x2_t *)__sz, (uint64_t)__src);
LABEL_390:
          __sz[1] = v205;
          if (__src[15])
          {
            __src[16] = __src[15];
            operator delete(__src[15]);
          }
          if (SHIBYTE(__src[14]) < 0)
          {
            operator delete(__src[12]);
            v206 = __src[9];
            if (__src[9])
            {
LABEL_394:
              __src[10] = v206;
              operator delete(v206);
            }
          }
          else
          {
            v206 = __src[9];
            if (__src[9])
              goto LABEL_394;
          }
          if (__src[6])
          {
            __src[7] = __src[6];
            operator delete(__src[6]);
          }
          v197 += 152;
          if (v197 == v196)
          {
            v192 = __sz[1];
            break;
          }
          goto LABEL_366;
        }
      }
      else
      {
        if ((void *)v202 >= v268[1])
          v202 %= (unint64_t)v268[1];
        if (v202 != v199)
          goto LABEL_386;
      }
      v201 = (uint64_t *)*v201;
      if (!v201)
        goto LABEL_386;
    }
  }
  v207 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v192 - __sz[0]) >> 3);
  v208 = v276;
  v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v276 - *((_QWORD *)&v275 + 1)) >> 3);
  if (v207 <= v209)
  {
    if (v207 < v209)
    {
      v210 = *((_QWORD *)&v275 + 1) - 0x5E50D79435E50D78 * ((uint64_t)(v192 - __sz[0]) >> 3);
      if ((_QWORD)v276 != v210)
      {
        v211 = v276;
        do
        {
          v213 = *(void **)(v211 - 24);
          v211 -= 24;
          v212 = v213;
          if (v213)
          {
            *(_QWORD *)(v208 - 16) = v212;
            operator delete(v212);
          }
          v208 = v211;
        }
        while (v211 != v210);
      }
      *(_QWORD *)&v276 = v210;
    }
  }
  else
  {
    sub_20E948258((uint64_t)&v275 + 8, v207 - v209);
  }
  v214 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
  v215 = *((_QWORD *)&v277 + 1);
  v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v277 + 1) - v277) >> 3);
  if (v214 <= v216)
  {
    if (v214 < v216)
    {
      v217 = v277 - 0x5E50D79435E50D78 * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
      if (*((_QWORD *)&v277 + 1) != v217)
      {
        v218 = *((_QWORD *)&v277 + 1);
        do
        {
          v220 = *(void **)(v218 - 24);
          v218 -= 24;
          v219 = v220;
          if (v220)
          {
            *(_QWORD *)(v215 - 16) = v219;
            operator delete(v219);
          }
          v215 = v218;
        }
        while (v218 != v217);
      }
      *((_QWORD *)&v277 + 1) = v217;
    }
  }
  else
  {
    sub_20E948258((uint64_t)&v277, v214 - v216);
  }
  v221 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
  v222 = v279;
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v279 - *((_QWORD *)&v278 + 1)) >> 3);
  if (v221 <= v223)
  {
    if (v221 < v223)
    {
      v224 = *((_QWORD *)&v278 + 1) - 0x5E50D79435E50D78 * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
      if ((_QWORD)v279 != v224)
      {
        v225 = v279;
        do
        {
          v227 = *(void **)(v225 - 24);
          v225 -= 24;
          v226 = v227;
          if (v227)
          {
            *(_QWORD *)(v222 - 16) = v226;
            operator delete(v226);
          }
          v222 = v225;
        }
        while (v225 != v224);
      }
      *(_QWORD *)&v279 = v224;
    }
  }
  else
  {
    sub_20E948258((uint64_t)&v278 + 8, v221 - v223);
  }
  v228 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
  v229 = *((_QWORD *)&v280 + 1);
  v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v280 + 1) - v280) >> 3);
  if (v228 <= v230)
  {
    if (v228 < v230)
    {
      v231 = v280 - 0x5E50D79435E50D78 * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
      if (*((_QWORD *)&v280 + 1) != v231)
      {
        v232 = *((_QWORD *)&v280 + 1);
        do
        {
          v234 = *(void **)(v232 - 24);
          v232 -= 24;
          v233 = v234;
          if (v234)
          {
            *(_QWORD *)(v229 - 16) = v233;
            operator delete(v233);
          }
          v229 = v232;
        }
        while (v232 != v231);
      }
      *((_QWORD *)&v280 + 1) = v231;
    }
  }
  else
  {
    sub_20E948258((uint64_t)&v280, v228 - v230);
  }
  v235 = (v298 - v297) / 152;
  if (v298 != v297)
  {
    v236 = 0;
    if (v235 <= 1)
      v237 = 1;
    else
      v237 = (v298 - v297) / 152;
    do
    {
      if (*((uint64_t **)&v275 + 1) != v299)
        sub_20FCEB238((_QWORD *)(*((_QWORD *)&v275 + 1) + v236), (char *)v299[v236 / 8], (char *)v299[v236 / 8 + 1], (v299[v236 / 8 + 1] - v299[v236 / 8]) >> 4);
      if ((_QWORD)v277 != v301)
        sub_20FCEB384((_QWORD *)(v277 + v236), *(char **)(v301 + v236), *(char **)(v301 + v236 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v301 + v236 + 8) - *(_QWORD *)(v301 + v236)) >> 3));
      if (*((_QWORD *)&v278 + 1) != v302)
        sub_20FCEB384((_QWORD *)(*((_QWORD *)&v278 + 1) + v236), *(char **)(v302 + v236), *(char **)(v302 + v236 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v302 + v236 + 8) - *(_QWORD *)(v302 + v236)) >> 3));
      if ((_QWORD)v280 != v303)
        sub_20FCEB4FC((_QWORD *)(v280 + v236), *(char **)(v303 + v236), *(char **)(v303 + v236 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v303 + v236 + 8) - *(_QWORD *)(v303 + v236)) >> 4));
      v236 += 24;
      --v237;
    }
    while (v237);
  }
  if (v288 != v287)
  {
    v238 = 0;
    if ((unint64_t)((v288 - v287) / 152) <= 1)
      v239 = 1;
    else
      v239 = (v288 - v287) / 152;
    do
    {
      v240 = (char **)(v289 + 24 * v238);
      v241 = v238 + v235;
      v242 = *((_QWORD *)&v275 + 1);
      v243 = (char **)(*((_QWORD *)&v275 + 1) + 24 * (v238 + v235));
      if (v243 != v240)
      {
        sub_20FCEB238(v243, *v240, *(char **)(v289 + 24 * v238 + 8), (uint64_t)(*(_QWORD *)(v289 + 24 * v238 + 8) - (_QWORD)*v240) >> 4);
        v242 = *((_QWORD *)&v275 + 1);
      }
      v244 = (uint64_t *)(v242 + 24 * v241);
      v245 = *v244;
      v246 = v244[1];
      while (v245 != v246)
      {
        v247 = *(_DWORD *)(v245 + 8);
        if (v247 != -1)
          *(_DWORD *)(v245 + 8) = v58 + 1 + v247;
        v245 += 16;
      }
      v248 = (char **)(v290 + 24 * v238);
      v249 = (char **)(v277 + 24 * v241);
      if (v249 != v248)
        sub_20FCEB384(v249, *v248, *(char **)(v290 + 24 * v238 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v290 + 24 * v238 + 8) - (_QWORD)*v248) >> 3));
      v250 = (char **)(v291 + 24 * v238);
      v251 = (char **)(*((_QWORD *)&v278 + 1) + 24 * v241);
      if (v251 != v250)
        sub_20FCEB384(v251, *v250, *(char **)(v291 + 24 * v238 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v291 + 24 * v238 + 8) - (_QWORD)*v250) >> 3));
      v252 = (char **)(v292 + 24 * v238);
      v253 = (char **)(v280 + 24 * v241);
      if (v253 != v252)
        sub_20FCEB4FC(v253, *v252, *(char **)(v292 + 24 * v238 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v292 + 24 * v238 + 8) - (_QWORD)*v252) >> 4));
      ++v238;
    }
    while (v238 != v239);
  }
  v254 = (double *)__dst[1];
  v255 = (double *)v273;
  if (__dst[1] != (void *)v273)
  {
    v256 = 1.0;
    do
    {
      v254[96] = v256;
      v256 = v256 + 1.0;
      v254 += 99;
    }
    while (v254 != v255);
  }
  sub_20FCD8274(v271, v264);
  v257 = v269[0];
  if (v269[0])
  {
    do
    {
      v258 = (_QWORD *)*v257;
      operator delete(v257);
      v257 = v258;
    }
    while (v258);
  }
  v259 = v268[0];
  v268[0] = 0;
  if (v259)
    operator delete(v259);
  sub_20E948C74((char **)v271);
  sub_20E948C74(&v283);
  return sub_20E948C74(&v293);
}

void sub_20FCE8484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char *a69;

  sub_20E8C25A8((uint64_t)&a19);
  sub_20E948C74(&a25);
  sub_20E948C74(&a47);
  sub_20E948C74(&a69);
  _Unwind_Resume(a1);
}

void sub_20FCE86E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  _QWORD *v13;
  char *v14;
  unsigned int v15;
  uint64_t **v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t *i;
  unint64_t v28;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *j;
  unint64_t v41;
  int8x8_t v42;
  uint8x8_t v43;
  unint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t *k;
  unint64_t v62;
  int8x8_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  unsigned int v86;
  unsigned int *v87;

  v3 = (_QWORD *)a1[37];
  v4 = a1 + 38;
  if (v3 != a1 + 38)
  {
    v5 = (char **)(a2 + 304);
    while (1)
    {
      v6 = *((_DWORD *)v3 + 8);
      v7 = *v5;
      v8 = a2 + 304;
      v9 = *v5;
      if (!*v5)
        break;
      do
      {
        v10 = *((_DWORD *)v9 + 8);
        v11 = v10 >= v6;
        if (v10 >= v6)
          v12 = (char **)v9;
        else
          v12 = (char **)(v9 + 8);
        if (v11)
          v8 = (uint64_t)v9;
        v9 = *v12;
      }
      while (*v12);
      if ((char **)v8 == v5 || *(_DWORD *)(v8 + 32) > v6)
      {
        v13 = v3 + 5;
        do
        {
          while (1)
          {
            v14 = v7;
            v15 = *((_DWORD *)v7 + 8);
            if (v15 > v6)
              break;
            if (v15 >= v6)
              goto LABEL_25;
            v7 = (char *)*((_QWORD *)v14 + 1);
            if (!v7)
            {
              v16 = (uint64_t **)(v14 + 8);
              goto LABEL_22;
            }
          }
          v7 = *(char **)v14;
        }
        while (*(_QWORD *)v14);
        v16 = (uint64_t **)v14;
        goto LABEL_22;
      }
LABEL_26:
      v24 = (_QWORD *)v3[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v3[2];
          v26 = *v25 == (_QWORD)v3;
          v3 = v25;
        }
        while (!v26);
      }
      v3 = v25;
      if (v25 == v4)
        goto LABEL_32;
    }
    v13 = v3 + 5;
    v16 = (uint64_t **)(a2 + 304);
    v14 = (char *)(a2 + 304);
LABEL_22:
    v17 = v14;
    v14 = (char *)operator new(0x88uLL);
    *((_DWORD *)v14 + 8) = v6;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_QWORD *)v14 + 5) = 0x3FF0000000000000;
    *((_QWORD *)v14 + 9) = 0x3FF0000000000000;
    *((_QWORD *)v14 + 12) = 0;
    *((_QWORD *)v14 + 13) = 0x3FF0000000000000;
    *((_QWORD *)v14 + 15) = 0;
    *((_QWORD *)v14 + 16) = 0;
    *((_QWORD *)v14 + 14) = 0;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v17;
    *v16 = (uint64_t *)v14;
    v18 = (uint64_t *)v14;
    v19 = **(_QWORD **)(a2 + 296);
    if (v19)
    {
      *(_QWORD *)(a2 + 296) = v19;
      v18 = *v16;
    }
    sub_20E868578(*(uint64_t **)(a2 + 304), v18);
    ++*(_QWORD *)(a2 + 312);
LABEL_25:
    *(_OWORD *)(v14 + 40) = *(_OWORD *)v13;
    v20 = *((_OWORD *)v13 + 1);
    v21 = *((_OWORD *)v13 + 2);
    v22 = *((_OWORD *)v13 + 3);
    *((_QWORD *)v14 + 13) = v13[8];
    *(_OWORD *)(v14 + 88) = v22;
    *(_OWORD *)(v14 + 72) = v21;
    *(_OWORD *)(v14 + 56) = v20;
    v23 = *(_OWORD *)(v13 + 9);
    *((_QWORD *)v14 + 16) = v13[11];
    *((_OWORD *)v14 + 7) = v23;
    goto LABEL_26;
  }
LABEL_32:
  for (i = (uint64_t *)a1[42]; i; i = (uint64_t *)*i)
  {
    v28 = *((unsigned int *)i + 4);
    v29 = *(int8x8_t *)(a2 + 328);
    if (v29)
    {
      v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] > 1uLL)
      {
        v31 = *((unsigned int *)i + 4);
        if (*(_QWORD *)&v29 <= v28)
          v31 = v28 % *(_QWORD *)&v29;
      }
      else
      {
        v31 = (v29.i32[0] - 1) & v28;
      }
      v32 = *(uint64_t ***)(*(_QWORD *)(a2 + 320) + 8 * v31);
      if (v32)
      {
        v33 = *v32;
        if (v33)
        {
          if (v30.u32[0] < 2uLL)
          {
            v34 = *(_QWORD *)&v29 - 1;
            while (1)
            {
              v36 = v33[1];
              if (v36 == v28)
              {
                if (*((_DWORD *)v33 + 4) == (_DWORD)v28)
                  goto LABEL_54;
              }
              else if ((v36 & v34) != v31)
              {
                goto LABEL_53;
              }
              v33 = (uint64_t *)*v33;
              if (!v33)
                goto LABEL_53;
            }
          }
          do
          {
            v35 = v33[1];
            if (v35 == v28)
            {
              if (*((_DWORD *)v33 + 4) == (_DWORD)v28)
                goto LABEL_54;
            }
            else
            {
              if (v35 >= *(_QWORD *)&v29)
                v35 %= *(_QWORD *)&v29;
              if (v35 != v31)
                break;
            }
            v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
      }
    }
LABEL_53:
    v86 = *((_DWORD *)i + 4);
    v87 = &v86;
    v37 = sub_20F3456E8(a2 + 320, &v86, (uint64_t)&unk_2102DB95C, &v87);
    v38 = *(_OWORD *)(i + 3);
    *(_OWORD *)(v37 + 40) = *(_OWORD *)(i + 5);
    *(_OWORD *)(v37 + 24) = v38;
    v39 = i[7];
    v37[64] = *((_BYTE *)i + 64);
    *((_QWORD *)v37 + 7) = v39;
LABEL_54:
    ;
  }
  for (j = (uint64_t *)a1[47]; j; j = (uint64_t *)*j)
  {
    v41 = *((unsigned int *)j + 4);
    v42 = *(int8x8_t *)(a2 + 368);
    if (v42)
    {
      v43 = (uint8x8_t)vcnt_s8(v42);
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.u32[0] > 1uLL)
      {
        v44 = *((unsigned int *)j + 4);
        if (*(_QWORD *)&v42 <= v41)
          v44 = v41 % *(_QWORD *)&v42;
      }
      else
      {
        v44 = (v42.i32[0] - 1) & v41;
      }
      v45 = *(uint64_t ***)(*(_QWORD *)(a2 + 360) + 8 * v44);
      if (v45)
      {
        v46 = *v45;
        if (v46)
        {
          if (v43.u32[0] < 2uLL)
          {
            v47 = *(_QWORD *)&v42 - 1;
            while (1)
            {
              v49 = v46[1];
              if (v49 == v41)
              {
                if (*((_DWORD *)v46 + 4) == (_DWORD)v41)
                  goto LABEL_77;
              }
              else if ((v49 & v47) != v44)
              {
                goto LABEL_76;
              }
              v46 = (uint64_t *)*v46;
              if (!v46)
                goto LABEL_76;
            }
          }
          do
          {
            v48 = v46[1];
            if (v48 == v41)
            {
              if (*((_DWORD *)v46 + 4) == (_DWORD)v41)
                goto LABEL_77;
            }
            else
            {
              if (v48 >= *(_QWORD *)&v42)
                v48 %= *(_QWORD *)&v42;
              if (v48 != v44)
                break;
            }
            v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
      }
    }
LABEL_76:
    v86 = *((_DWORD *)j + 4);
    v87 = &v86;
    v50 = sub_20F3459FC(a2 + 360, &v86, (uint64_t)&unk_2102DB95C, &v87);
    v51 = *(_OWORD *)(j + 3);
    *(_OWORD *)(v50 + 40) = *(_OWORD *)(j + 5);
    *(_OWORD *)(v50 + 24) = v51;
    v52 = *(_OWORD *)(j + 7);
    v53 = *(_OWORD *)(j + 9);
    v54 = *(_OWORD *)(j + 11);
    *(_OWORD *)(v50 + 104) = *(_OWORD *)(j + 13);
    *(_OWORD *)(v50 + 88) = v54;
    *(_OWORD *)(v50 + 72) = v53;
    *(_OWORD *)(v50 + 56) = v52;
    v55 = *(_OWORD *)(j + 15);
    v56 = *(_OWORD *)(j + 17);
    v57 = *(_OWORD *)(j + 19);
    *(_OWORD *)(v50 + 168) = *(_OWORD *)(j + 21);
    *(_OWORD *)(v50 + 152) = v57;
    *(_OWORD *)(v50 + 136) = v56;
    *(_OWORD *)(v50 + 120) = v55;
    v58 = *(_OWORD *)(j + 23);
    v59 = *(_OWORD *)(j + 25);
    v60 = *(_OWORD *)(j + 27);
    *(_OWORD *)(v50 + 232) = *(_OWORD *)(j + 29);
    *(_OWORD *)(v50 + 216) = v60;
    *(_OWORD *)(v50 + 200) = v59;
    *(_OWORD *)(v50 + 184) = v58;
LABEL_77:
    ;
  }
  for (k = (uint64_t *)a1[52]; k; k = (uint64_t *)*k)
  {
    v62 = *((unsigned int *)k + 4);
    v63 = *(int8x8_t *)(a2 + 408);
    if (v63)
    {
      v64 = (uint8x8_t)vcnt_s8(v63);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        v65 = *((unsigned int *)k + 4);
        if (*(_QWORD *)&v63 <= v62)
          v65 = v62 % *(_QWORD *)&v63;
      }
      else
      {
        v65 = (v63.i32[0] - 1) & v62;
      }
      v66 = *(uint64_t ***)(*(_QWORD *)(a2 + 400) + 8 * v65);
      if (v66)
      {
        v67 = *v66;
        if (v67)
        {
          if (v64.u32[0] < 2uLL)
          {
            v68 = *(_QWORD *)&v63 - 1;
            while (1)
            {
              v70 = v67[1];
              if (v70 == v62)
              {
                if (*((_DWORD *)v67 + 4) == (_DWORD)v62)
                  goto LABEL_100;
              }
              else if ((v70 & v68) != v65)
              {
                goto LABEL_99;
              }
              v67 = (uint64_t *)*v67;
              if (!v67)
                goto LABEL_99;
            }
          }
          do
          {
            v69 = v67[1];
            if (v69 == v62)
            {
              if (*((_DWORD *)v67 + 4) == (_DWORD)v62)
                goto LABEL_100;
            }
            else
            {
              if (v69 >= *(_QWORD *)&v63)
                v69 %= *(_QWORD *)&v63;
              if (v69 != v65)
                break;
            }
            v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
      }
    }
LABEL_99:
    v86 = *((_DWORD *)k + 4);
    v87 = &v86;
    v71 = sub_20F345D3C(a2 + 400, &v86, (uint64_t)&unk_2102DB95C, &v87);
    *(_OWORD *)(v71 + 3) = *(_OWORD *)(k + 3);
    v72 = *(_OWORD *)(k + 5);
    v73 = *(_OWORD *)(k + 7);
    v74 = *(_OWORD *)(k + 9);
    v71[11] = k[11];
    *(_OWORD *)(v71 + 9) = v74;
    *(_OWORD *)(v71 + 7) = v73;
    *(_OWORD *)(v71 + 5) = v72;
LABEL_100:
    ;
  }
  v75 = (_QWORD *)a1[220];
  if (v75 != a1 + 221)
  {
    v76 = (uint64_t *)(a2 + 1768);
    do
    {
      v77 = *((_DWORD *)v75 + 8);
      v78 = *v76;
      if (!*v76)
        goto LABEL_118;
      v79 = a2 + 1768;
      do
      {
        v80 = *(_DWORD *)(v78 + 32);
        v81 = v80 >= v77;
        if (v80 >= v77)
          v82 = (uint64_t *)v78;
        else
          v82 = (uint64_t *)(v78 + 8);
        if (v81)
          v79 = v78;
        v78 = *v82;
      }
      while (*v82);
      if ((uint64_t *)v79 != v76 && *(_DWORD *)(v79 + 32) <= v77 && *(_QWORD *)(v79 + 40))
      {
        v83 = (_QWORD *)v75[1];
        if (v83)
          goto LABEL_119;
      }
      else
      {
LABEL_118:
        sub_20F3454F8(a2, v77, v75[5]);
        v83 = (_QWORD *)v75[1];
        if (v83)
        {
          do
          {
LABEL_119:
            v84 = v83;
            v83 = (_QWORD *)*v83;
          }
          while (v83);
          goto LABEL_103;
        }
      }
      do
      {
        v84 = (_QWORD *)v75[2];
        v26 = *v84 == (_QWORD)v75;
        v75 = v84;
      }
      while (!v26);
LABEL_103:
      v75 = v84;
    }
    while (v84 != a1 + 221);
  }
}

void sub_20FCE8D4C(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  float64x2_t v20;
  uint64_t v21;
  double v23;
  float64x2_t v24;
  double v31;
  double v33;
  float64x2_t v34;
  double v37;
  float64x2_t v38;
  double v39;
  double v42;
  double v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  double v104;
  float64x2_t v105;
  uint64_t v106;
  float32x2_t v109;
  float64x2_t v110;
  float32x4_t v115;
  float32x4_t v116;
  double v117;
  float64x2_t v122;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  int8x16_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int8x16_t v132;
  float32x2_t v133;
  int8x16_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int8x16_t v137;
  _QWORD *v138;
  _QWORD *v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  _OWORD v212[2];
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  _BYTE v220[32];
  int64x2_t v221;
  _BYTE v222[32];
  int64x2_t v223;
  _BYTE v224[32];
  float64x2_t v225;
  __int128 v226;
  float64x2_t v227;
  __int128 v228;
  float64x2_t v229;
  __int128 v230;
  float64x2_t v231;
  __int128 v232;

  v3 = *(_OWORD *)(a1 + 80);
  v229 = *(float64x2_t *)(a1 + 64);
  v230 = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v231 = *(float64x2_t *)(a1 + 96);
  v232 = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v225 = *(float64x2_t *)a1;
  v226 = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v227 = *(float64x2_t *)(a1 + 32);
  v228 = v6;
  sub_20EB70E00((uint64_t)&v225);
  v9 = 0;
  v10 = 0;
  do
  {
    v211.f64[v9] = 0.0;
    v11 = v10 < 2;
    if (v10 < 2)
      ++v10;
    else
      v10 = 0;
    if (v11)
      ++v9;
    else
      v9 += 4;
  }
  while (v9 != 18);
  v12 = 0;
  v13 = 0;
  v211.f64[0] = 1.0;
  v213.i64[1] = 0x3FF0000000000000;
  v217.i64[0] = 0x3FF0000000000000;
  do
  {
    v219.i64[v12] = 0;
    v14 = v13 < 2;
    if (v13 < 2)
      ++v13;
    else
      v13 = 0;
    if (v14)
      ++v12;
    else
      v12 += 4;
  }
  while (v12 != 18);
  v15 = 0;
  v16 = 0;
  do
  {
    *((_QWORD *)v212 + v15 + 1) = 0;
    v17 = v16 < 2;
    if (v16 < 2)
      ++v16;
    else
      v16 = 0;
    if (v17)
      ++v15;
    else
      v15 += 4;
  }
  while (v15 != 18);
  *(float64x2_t *)&v220[8] = v225;
  *(_QWORD *)&v220[24] = v226;
  *(_QWORD *)&v222[24] = v228;
  *(float64x2_t *)&v222[8] = v227;
  *(float64x2_t *)&v224[8] = v229;
  *(_QWORD *)&v224[24] = v230;
  v18 = *(_QWORD **)(*a2 + 48);
  v19 = *a2 + 56;
  if (v18 != (_QWORD *)v19)
  {
    v148 = (float64x2_t)v212[0];
    v207 = v211;
    v178 = (float64x2_t)v212[1];
    v20.f64[1] = *(float64_t *)&v224[8];
    v196 = (float64x2_t)vdupq_lane_s64(v219.i64[0], 0);
    v197 = (float64x2_t)vdupq_lane_s64(v216.i64[0], 0);
    v194 = (float64x2_t)vdupq_lane_s64(v223.i64[0], 0);
    v195 = (float64x2_t)vdupq_lane_s64(v221.i64[0], 0);
    v166 = (float64x2_t)v213;
    v167 = (float64x2_t)v214;
    v155 = (float64x2_t)vdupq_laneq_s64(v213, 1);
    v156 = (float64x2_t)vdupq_lane_s64(v213.i64[0], 0);
    v200 = (float64x2_t)v216;
    v160 = (float64x2_t)v221;
    v161 = (float64x2_t)v219;
    v153 = (float64x2_t)vdupq_laneq_s64(v221, 1);
    v154 = (float64x2_t)vdupq_laneq_s64(v219, 1);
    v157 = (float64x2_t)v223;
    v192 = (float64x2_t)vdupq_laneq_s64(v223, 1);
    v193 = (float64x2_t)vdupq_laneq_s64(v216, 1);
    v190 = (float64x2_t)vdupq_lane_s64(v217.i64[0], 0);
    v191 = (float64x2_t)vdupq_lane_s64(v214.i64[0], 0);
    v151 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v222, 0);
    v152 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v220, 0);
    v165 = (float64x2_t)v217;
    v188 = (float64x2_t)vdupq_laneq_s64(v217, 1);
    v189 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v224, 0);
    v162 = (float64x2_t)v218;
    v163 = *(float64x2_t *)v220;
    v198 = *(float64x2_t *)v224;
    v199 = *(float64x2_t *)v222;
    v186 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v222, 1);
    v187 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v220, 1);
    v209 = (float64x2_t)vdupq_lane_s64(v215.i64[0], 0);
    v210 = (float64x2_t)vdupq_laneq_s64(v214, 1);
    v184 = (float64x2_t)vdupq_lane_s64(v218.i64[0], 0);
    v185 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v224, 1);
    v182 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v224[16], 0);
    v183 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v222[16], 0);
    v168 = (float64x2_t)v215;
    v208 = (float64x2_t)vdupq_laneq_s64(v215, 1);
    v164 = *(float64x2_t *)&v220[16];
    v149 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v220[16], 1);
    v150 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v220[16], 0);
    v158 = *(float64x2_t *)&v222[16];
    v159 = *(float64x2_t *)&v224[16];
    v180 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v222[16], 1);
    v181 = (float64x2_t)vdupq_laneq_s64(v218, 1);
    v179 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v224[16], 1);
    do
    {
      v21 = v18[6];
      _Q3 = *(float64x2_t *)v21;
      v23 = *(double *)(v21 + 16);
      v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, *(double *)v21), v227, *(float64x2_t *)v21, 1), v229, v23);
      _D19 = v228;
      __asm { FMLA            D18, D19, V3.D[1] }
      v31 = _D18 + *(double *)&v230 * v23;
      _Q18 = *(float64x2_t *)(v21 + 24);
      v33 = *(double *)(v21 + 40);
      v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, _Q18.f64[0]), v227, _Q18, 1), v229, v33);
      __asm { FMLA            D22, D19, V18.D[1] }
      _Q18.f64[0] = _D22 + *(double *)&v230 * v33;
      _Q21 = *(float64x2_t *)(v21 + 48);
      *(_QWORD *)&v20.f64[0] = v232;
      v37 = *(double *)(v21 + 64);
      v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, _Q21.f64[0]), v227, _Q21, 1), v229, v37);
      v39 = *(double *)(v21 + 88);
      __asm { FMLA            D28, D19, V21.D[1] }
      _Q21 = *(float64x2_t *)(v21 + 72);
      v42 = _D28 + *(double *)&v230 * v37;
      _Q28 = *(float64x2_t *)(v21 + 96);
      v44 = *(double *)(v21 + 112);
      v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, _Q28.f64[0]), v227, _Q28, 1), v229, v44);
      __asm { FMLA            D8, D19, V28.D[1] }
      _Q28.f64[0] = _D8 + *(double *)&v230 * v44;
      __asm { FMLA            D6, D19, V21.D[1] }
      _Q3.f64[0] = _D6 + *(double *)&v230 * v39;
      v48 = vaddq_f64(v231, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, _Q21.f64[0]), v227, _Q21, 1), v229, v39));
      *(float64x2_t *)v21 = v24;
      *(double *)(v21 + 16) = v31;
      *(float64x2_t *)(v21 + 24) = v34;
      *(float64_t *)(v21 + 40) = _Q18.f64[0];
      *(float64x2_t *)(v21 + 48) = v38;
      *(double *)(v21 + 64) = v42;
      *(float64x2_t *)(v21 + 72) = v48;
      *(_QWORD *)(v21 + 88) = *(_OWORD *)&vaddq_f64(v20, _Q3);
      *(float64x2_t *)(v21 + 96) = v45;
      v49 = *(float64x2_t *)(v21 + 456);
      v50 = *(float64x2_t *)(v21 + 472);
      *(float64_t *)(v21 + 112) = _Q28.f64[0];
      v51 = *(float64x2_t *)(v21 + 488);
      v52 = *(float64x2_t *)(v21 + 504);
      v53 = *(float64x2_t *)(v21 + 520);
      v54 = *(float64x2_t *)(v21 + 536);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v49.f64[0]), v166, v49, 1), v200, v50.f64[0]), v161, v50, 1), v160, v51.f64[0]), v157, v51, 1);
      v56 = *(float64x2_t *)(v21 + 568);
      v55 = *(float64x2_t *)(v21 + 584);
      v57 = *(float64x2_t *)(v21 + 552);
      v58 = *(float64x2_t *)(v21 + 616);
      v59 = *(float64x2_t *)(v21 + 632);
      v60 = *(float64x2_t *)(v21 + 600);
      v176 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v49.f64[0]), v167, v49, 1), v165, v50.f64[0]), v163, v50, 1), v199, v51.f64[0]), v198, v51, 1);
      v62 = *(float64x2_t *)(v21 + 664);
      v61 = *(float64x2_t *)(v21 + 680);
      v63 = *(float64x2_t *)(v21 + 648);
      v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v49.f64[0]), v168, v49, 1), v162, v50.f64[0]);
      v65 = *(float64x2_t *)(v21 + 728);
      v144 = *(float64x2_t *)(v21 + 712);
      v66 = *(float64x2_t *)(v21 + 696);
      v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v64, v164, v50, 1), v158, v51.f64[0]), v159, v51, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v52.f64[0]), v166, v52, 1), v200, v53.f64[0]), v161, v53, 1), v160, v54.f64[0]), v157, v54, 1);
      v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v52.f64[0]), v167, v52, 1), v165, v53.f64[0]), v163, v53, 1), v199, v54.f64[0]), v198, v54, 1);
      v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v52.f64[0]), v168, v52, 1), v162, v53.f64[0]), v164, v53, 1), v158, v54.f64[0]), v159, v54, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v57.f64[0]), v166, v57, 1), v200, v56.f64[0]), v161, v56, 1), v160, v55.f64[0]), v157, v55, 1);
      v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v57.f64[0]), v167, v57, 1), v165, v56.f64[0]), v163, v56, 1), v199, v55.f64[0]), v198, v55, 1);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v57.f64[0]), v168, v57, 1), v162, v56.f64[0]), v164, v56, 1), v158, v55.f64[0]), v159, v55, 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v60.f64[0]), v166, v60, 1), v200, v58.f64[0]), v161, v58, 1), v160, v59.f64[0]), v157, v59, 1);
      v169 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v60.f64[0]), v167, v60, 1), v165, v58.f64[0]), v163, v58, 1), v199, v59.f64[0]), v198, v59, 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v60.f64[0]), v168, v60, 1), v162, v58.f64[0]), v164, v58, 1), v158, v59.f64[0]), v159, v59, 1);
      v71 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v63.f64[0]), v166, v63, 1), v200, v62.f64[0]), v161, v62, 1), v160, v61.f64[0]), v157, v61, 1);
      v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v63.f64[0]), v167, v63, 1), v165, v62.f64[0]), v163, v62, 1), v199, v61.f64[0]), v198, v61, 1);
      v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v63.f64[0]), v168, v63, 1), v162, v62.f64[0]), v164, v62, 1), v158, v61.f64[0]), v159, v61, 1);
      v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v66.f64[0]), v166, v66, 1), v200, v144.f64[0]), v161, v144, 1), v160, v65.f64[0]), v157, v65, 1);
      v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v66.f64[0]), v167, v66, 1), v165, v144.f64[0]), v163, v144, 1), v199, v65.f64[0]), v198, v65, 1);
      v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v66.f64[0]), v168, v66, 1), v162, v144.f64[0]), v164, v144, 1), v158, v65.f64[0]), v159, v65, 1);
      *(float64x2_t *)(v21 + 456) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v140, v207.f64[0]), v156, v67), v197, v68), v196, v69), v195, v71), v194, v74);
      *(float64x2_t *)(v21 + 472) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v176, v207.f64[0]), v156, v203), v197, v172), v196, v169), v195, v72), v194, v75);
      *(float64x2_t *)(v21 + 488) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v205, v207.f64[0]), v156, v201), v197, _Q24), v196, v70), v195, v73), v194, v76);
      *(float64x2_t *)(v21 + 504) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v140, v207, 1), v155, v67), v193, v68), v154, v69), v153, v71), v192, v74);
      *(float64x2_t *)(v21 + 520) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v176, v207, 1), v155, v203), v193, v172), v154, v169), v153, v72), v192, v75);
      *(float64x2_t *)(v21 + 536) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v205, v207, 1), v155, v201), v193, _Q24), v154, v70), v153, v73), v192, v76);
      *(float64x2_t *)(v21 + 552) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v140, v148.f64[0]), v191, v67), v190, v68), v152, v69), v151, v71), v189, v74);
      *(float64x2_t *)(v21 + 568) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v176, v148.f64[0]), v191, v203), v190, v172), v152, v169), v151, v72), v189, v75);
      *(float64x2_t *)(v21 + 584) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v205, v148.f64[0]), v191, v201), v190, _Q24), v152, v70), v151, v73), v189, v76);
      *(float64x2_t *)(v21 + 600) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v140, v148, 1), v210, v67), v188, v68), v187, v69), v186, v71), v185, v74);
      *(float64x2_t *)(v21 + 616) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v176, v148, 1), v210, v203), v188, v172), v187, v169), v186, v72), v185, v75);
      *(float64x2_t *)(v21 + 632) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v205, v148, 1), v210, v201), v188, _Q24), v187, v70), v186, v73), v185, v76);
      *(float64x2_t *)(v21 + 648) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v140, v178.f64[0]), v209, v67), v184, v68), v150, v69), v183, v71), v182, v74);
      *(float64x2_t *)(v21 + 664) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v176, v178.f64[0]), v209, v203), v184, v172), v150, v169), v183, v72), v182, v75);
      *(float64x2_t *)(v21 + 680) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v205, v178.f64[0]), v209, v201), v184, _Q24), v150, v70), v183, v73), v182, v76);
      *(float64x2_t *)(v21 + 696) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v140, v178, 1), v208, v67), v181, v68), v149, v69), v180, v71), v179, v74);
      *(float64x2_t *)(v21 + 712) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v176, v178, 1), v208, v203), v181, v172), v149, v169), v180, v72), v179, v75);
      *(float64x2_t *)(v21 + 728) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v205, v178, 1), v208, v201), v181, _Q24), v149, v70), v180, v73), v179, v76);
      v77 = *(float64x2_t *)(v21 + 200);
      v78 = *(float64x2_t *)(v21 + 184);
      v79 = *(float64x2_t *)(v21 + 168);
      v80 = *(float64x2_t *)(v21 + 248);
      v81 = *(float64x2_t *)(v21 + 232);
      v82 = *(float64x2_t *)(v21 + 216);
      v84 = *(float64x2_t *)(v21 + 264);
      v83 = *(float64x2_t *)(v21 + 280);
      v85 = *(float64x2_t *)(v21 + 328);
      v174 = *(float64x2_t *)(v21 + 344);
      v87 = *(float64x2_t *)(v21 + 296);
      v86 = *(float64x2_t *)(v21 + 312);
      v141 = *(float64x2_t *)(v21 + 360);
      v145 = *(float64x2_t *)(v21 + 440);
      v146 = *(float64x2_t *)(v21 + 376);
      v170 = *(float64x2_t *)(v21 + 392);
      v88 = *(float64x2_t *)(v21 + 424);
      v143 = *(float64x2_t *)(v21 + 408);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v79.f64[0]), v166, v79, 1), v200, v78.f64[0]), v161, v78, 1), v160, v77.f64[0]), v157, v77, 1);
      v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v79.f64[0]), v167, v79, 1), v165, v78.f64[0]), v163, v78, 1), v199, v77.f64[0]), v198, v77, 1);
      v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v79.f64[0]), v168, v79, 1), v162, v78.f64[0]), v164, v78, 1), v158, v77.f64[0]), v159, v77, 1);
      v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v82.f64[0]), v166, v82, 1), v200, v81.f64[0]), v161, v81, 1), v160, v80.f64[0]), v157, v80, 1);
      v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v82.f64[0]), v167, v82, 1), v165, v81.f64[0]), v163, v81, 1), v199, v80.f64[0]), v198, v80, 1);
      v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v82.f64[0]), v168, v82, 1), v162, v81.f64[0]), v164, v81, 1), v158, v80.f64[0]), v159, v80, 1);
      v206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v84.f64[0]), v166, v84, 1), v200, v83.f64[0]), v161, v83, 1), v160, v87.f64[0]), v157, v87, 1);
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v84.f64[0]), v167, v84, 1), v165, v83.f64[0]), v163, v83, 1), v199, v87.f64[0]), v198, v87, 1);
      v177 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v84.f64[0]), v168, v84, 1), v162, v83.f64[0]), v164, v83, 1), v158, v87.f64[0]), v159, v87, 1);
      v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v86.f64[0]), v166, v86, 1), v200, v85.f64[0]), v161, v85, 1), v160, v174.f64[0]), v157, v174, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v86.f64[0]), v167, v86, 1), v165, v85.f64[0]), v163, v85, 1), v199, v174.f64[0]), v198, v174, 1);
      v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v86.f64[0]), v168, v86, 1), v162, v85.f64[0]), v164, v85, 1), v158, v174.f64[0]), v159, v174, 1);
      v175 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v141.f64[0]), v166, v141, 1), v200, v146.f64[0]), v161, v146, 1), v160, v170.f64[0]), v157, v170, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v141.f64[0]), v167, v141, 1), v165, v146.f64[0]), v163, v146, 1), v199, v170.f64[0]), v198, v170, 1);
      v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v141.f64[0]), v168, v141, 1), v162, v146.f64[0]), v164, v146, 1), v158, v170.f64[0]), v159, v170, 1);
      v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v143.f64[0]), v166, v143, 1), v200, v88.f64[0]), v161, v88, 1), v160, v145.f64[0]), v157, v145, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v143.f64[0]), v167, v143, 1), v165, v88.f64[0]), v163, v88, 1), v199, v145.f64[0]), v198, v145, 1);
      v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v178, v143.f64[0]), v168, v143, 1), v162, v88.f64[0]), v164, v88, 1), v158, v145.f64[0]), v159, v145, 1);
      *(float64x2_t *)(v21 + 200) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v204, v207.f64[0]), v156, v142), v197, v177), v196, v173), v195, v147), v194, v97);
      *(float64x2_t *)(v21 + 184) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90, v207.f64[0]), v156, v92), v197, v93), v196, v94), v195, v95), v194, v96);
      _Q24.f64[1] = v175.f64[1];
      *(float64x2_t *)(v21 + 168) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v207.f64[0]), v156, v91), v197, v206), v196, v202), v195, v175), v194, v171);
      *(float64x2_t *)(v21 + 248) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v204, v207, 1), v155, v142), v193, v177), v154, v173), v153, v147), v192, v97);
      *(float64x2_t *)(v21 + 232) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v90, v207, 1), v155, v92), v193, v93), v154, v94), v153, v95), v192, v96);
      *(float64x2_t *)(v21 + 216) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v89, v207, 1), v155, v91), v193, v206), v154, v202), v153, v175), v192, v171);
      *(float64x2_t *)(v21 + 264) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v148.f64[0]), v191, v91), v190, v206), v152, v202), v151, v175), v189, v171);
      *(float64x2_t *)(v21 + 280) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90, v148.f64[0]), v191, v92), v190, v93), v152, v94), v151, v95), v189, v96);
      _Q3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v204, v148, 1), v210, v142), v188, v177), v187, v173), v186, v147), v185, v97);
      *(float64x2_t *)(v21 + 328) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v90, v148, 1), v210, v92), v188, v93), v187, v94), v186, v95), v185, v96);
      *(float64x2_t *)(v21 + 344) = _Q3;
      *(float64x2_t *)(v21 + 296) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v204, v148.f64[0]), v191, v142), v190, v177), v152, v173), v151, v147), v189, v97);
      *(float64x2_t *)(v21 + 312) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v89, v148, 1), v210, v91), v188, v206), v187, v202), v186, v175), v185, v171);
      v20 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v178.f64[0]), v209, v91), v184, v206), v150, v202), v183, v175), v182, v171);
      *(float64x2_t *)(v21 + 360) = v20;
      *(float64x2_t *)(v21 + 376) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90, v178.f64[0]), v209, v92), v184, v93), v150, v94), v183, v95), v182, v96);
      *(float64x2_t *)(v21 + 424) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v90, v178, 1), v208, v92), v181, v93), v149, v94), v180, v95), v179, v96);
      *(float64x2_t *)(v21 + 440) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v204, v178, 1), v208, v142), v181, v177), v149, v173), v180, v147), v179, v97);
      *(float64x2_t *)(v21 + 392) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v204, v178.f64[0]), v209, v142), v184, v177), v150, v173), v183, v147), v182, v97);
      *(float64x2_t *)(v21 + 408) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v89, v178, 1), v208, v91), v181, v206), v149, v202), v180, v175), v179, v171);
      v98 = (_QWORD *)v18[1];
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (_QWORD *)v18[2];
          _ZF = *v99 == (_QWORD)v18;
          v18 = v99;
        }
        while (!_ZF);
      }
      v18 = v99;
    }
    while (v99 != (_QWORD *)v19);
  }
  v100 = (_QWORD *)a2[1];
  v103 = (_QWORD *)*v100;
  v101 = v100 + 1;
  v102 = v103;
  if (v103 != v101)
  {
    v104 = *(double *)&v226;
    v105 = v225;
    do
    {
      v106 = v102[6];
      if (*(_BYTE *)(v106 + 192))
      {
        _Q3.f64[0] = *(float64_t *)(v106 + 64);
        _Q4 = *(float64x2_t *)(v106 + 48);
        _D5 = v228;
        v109.i32[1] = DWORD1(v230);
        v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v105, _Q4.f64[0]), v227, _Q4, 1), v229, _Q3.f64[0]);
        __asm { FMLA            D6, D5, V4.D[1] }
        _Q3.f64[0] = _D6 + *(double *)&v230 * _Q3.f64[0];
        *(_QWORD *)&_Q4.f64[0] = v232;
        _Q3 = vaddq_f64(_Q3, _Q4);
        *(float64x2_t *)(v106 + 48) = vaddq_f64(v110, v231);
        *(float64_t *)(v106 + 64) = _Q3.f64[0];
        if (*(_BYTE *)(v106 + 188))
        {
          *(_QWORD *)&_Q3.f64[0] = v228;
          _V5.D[1] = v227.f64[1];
          _D4 = v230;
          _V6.D[1] = v229.f64[1];
          v109.i32[0] = *(_DWORD *)(v106 + 184);
          v115 = *(float32x4_t *)(v106 + 152);
          v116 = *(float32x4_t *)(v106 + 168);
          *(_QWORD *)&v117 = *(_OWORD *)&vcvtq_f64_f32(v109);
          _Q18 = vcvt_hight_f64_f32(v116);
          _Q17 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
          _Q19 = vcvt_hight_f64_f32(v115);
          _Q16 = vcvtq_f64_f32(*(float32x2_t *)v115.f32);
          v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v105, _Q16.f64[0]), v227, _Q16, 1), v229, _Q19.f64[0]);
          __asm { FMLA            D21, D3, V16.D[1] }
          v124 = vmlad_n_f64(_D21, *(double *)&v230, _Q19.f64[0]);
          v125 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v105, _Q19, 1), v227, _Q17.f64[0]), v229, _Q17, 1);
          __asm { FMLA            D19, D4, V17.D[1] }
          v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v105, _Q18.f64[0]), v227, _Q18, 1), v229, v117);
          __asm { FMLA            D22, D3, V18.D[1] }
          _D22 = vmlad_n_f64(_D22, *(double *)&v230, v117);
          _Q18.f64[0] = vmlad_n_f64(vmlad_n_f64(v124 * v105.f64[0], _Q19.f64[0], v227.f64[0]), _D22, v229.f64[0]);
          v129 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v122, v105, 1), v125, v227, 1), v126, v229, 1);
          __asm
          {
            FMLA            D24, D19, V5.D[1]
            FMLA            D24, D22, V6.D[1]
          }
          v130 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, v104), v125, *(double *)&v228), v126, *(double *)&v230);
          _Q3.f64[0] = v124 * v104 + _Q19.f64[0] * *(double *)&v228 + _D22 * *(double *)&v230;
          v131 = (float64x2_t)vzip1q_s64((int64x2_t)_Q18, (int64x2_t)v129);
          v132 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v129, (int8x16_t)_Q24, 8uLL)), v130);
          v133 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, v105.f64[0]), v125, v227.f64[0]), v126, v229.f64[0]));
          v134 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v133, v131);
          *(int8x16_t *)(v106 + 152) = v134;
          *(_DWORD *)(v106 + 184) = vcvt_f32_f64(_Q3).u32[0];
          *(int8x16_t *)(v106 + 168) = v132;
          v135 = (int32x4_t)vextq_s8(v134, v132, 0xCuLL);
          v136 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v130), _Q3);
          v137 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v135, (int8x16_t)v135, 0xCuLL), (int8x16_t)v135, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v136, v136), (int8x16_t)v136, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v135, v135), (int8x16_t)v135, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v136, (int8x16_t)v136, 0xCuLL), (int8x16_t)v136, 8uLL));
          *(float32x2_t *)v135.i8 = vmla_lane_f32(vmul_f32(v133, *(float32x2_t *)v137.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1), v133, 1);
          _Q3 = (float64x2_t)vextq_s8(v137, v137, 8uLL);
          *(_BYTE *)(v106 + 188) = vmla_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)&_Q3.f64[0], vcvt_f32_f64(v131)).f32[0] > 0.0;
        }
        *(_BYTE *)(v106 + 190) = 1;
      }
      v138 = (_QWORD *)v102[1];
      if (v138)
      {
        do
        {
          v139 = v138;
          v138 = (_QWORD *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          v139 = (_QWORD *)v102[2];
          _ZF = *v139 == (_QWORD)v102;
          v102 = v139;
        }
        while (!_ZF);
      }
      v102 = v139;
    }
    while (v139 != v101);
  }
}

uint64_t sub_20FCE9ED0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;

  v2 = *(uint64_t **)result;
  v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      if (v2[3] != v2[4])
      {
        v5 = *v2;
        v6 = *((_DWORD *)v2 + 2);
        v7 = *((_DWORD *)v2 + 4);
        v9 = *(uint64_t **)(a2 + 40);
        v8 = *(uint64_t **)(a2 + 48);
        if (v8 != v9)
        {
          v10 = ((char *)v8 - (char *)v9) >> 4;
          while (1)
          {
            v11 = v10 >> 1;
            v12 = &v9[2 * (v10 >> 1)];
            v13 = *v12;
            v14 = *(_DWORD *)(*v12 + 16);
            v15 = v14 >= v7;
            if (v14 != v7)
              goto LABEL_13;
            if (*(_QWORD *)v13 >= v5)
              break;
LABEL_7:
            v9 = v12 + 2;
            v11 = v10 + ~v11;
LABEL_8:
            v10 = v11;
            if (!v11)
              goto LABEL_16;
          }
          if (*(_QWORD *)v13 != v5)
            goto LABEL_8;
          v15 = *(_DWORD *)(v13 + 8) >= v6;
LABEL_13:
          if (v15)
            goto LABEL_8;
          goto LABEL_7;
        }
LABEL_16:
        if (v9 != v8)
        {
          v16 = *v9;
          if (*(_DWORD *)(*v9 + 16) == v7 && *(_QWORD *)v16 == v5)
          {
            if (*(_DWORD *)(v16 + 8) == v6)
              v17 = v9;
            else
              v17 = *(uint64_t **)(a2 + 48);
            if (v8 != v17)
            {
              result = *v17;
              if (*v17)
                result = sub_20F289164(result, v2 + 3);
            }
          }
        }
      }
      v2 += 6;
    }
    while (v2 != v3);
  }
  return result;
}

char *sub_20FCE9FD4(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void **v44;
  _BYTE *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;

  v6 = a2;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x80BFA02FE80BFA03 * ((v8 - *(_QWORD *)result) >> 4) >= a4)
  {
    v44 = (void **)(result + 8);
    v45 = (_BYTE *)*((_QWORD *)result + 1);
    if (0x80BFA02FE80BFA03 * ((v45 - v9) >> 4) >= a4)
    {
      v112 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v113 = *(_QWORD *)result;
        do
        {
          v114 = *v6;
          *(_DWORD *)(v113 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v113 = v114;
          v115 = *((_OWORD *)v6 + 1);
          *(_OWORD *)(v113 + 28) = *(_OWORD *)((char *)v6 + 28);
          *(_OWORD *)(v113 + 16) = v115;
          v116 = *((_OWORD *)v6 + 3);
          *(_QWORD *)(v113 + 64) = v6[8];
          *(_OWORD *)(v113 + 48) = v116;
          v117 = *(_OWORD *)(v6 + 9);
          *(_QWORD *)(v113 + 88) = v6[11];
          *(_OWORD *)(v113 + 72) = v117;
          v118 = *((_OWORD *)v6 + 7);
          *(_OWORD *)(v113 + 96) = *((_OWORD *)v6 + 6);
          *(_OWORD *)(v113 + 112) = v118;
          v120 = *((_OWORD *)v6 + 10);
          v119 = *((_OWORD *)v6 + 11);
          v121 = *((_OWORD *)v6 + 9);
          *(_QWORD *)(v113 + 192) = v6[24];
          *(_OWORD *)(v113 + 160) = v120;
          *(_OWORD *)(v113 + 176) = v119;
          *(_OWORD *)(v113 + 144) = v121;
          *(_OWORD *)(v113 + 128) = *((_OWORD *)v6 + 8);
          *(_OWORD *)(v113 + 200) = *(_OWORD *)(v6 + 25);
          v122 = *(_OWORD *)(v6 + 27);
          v123 = *(_OWORD *)(v6 + 29);
          v124 = *(_OWORD *)(v6 + 31);
          *(_QWORD *)(v113 + 264) = v6[33];
          *(_OWORD *)(v113 + 248) = v124;
          *(_OWORD *)(v113 + 232) = v123;
          *(_OWORD *)(v113 + 216) = v122;
          *(_OWORD *)(v113 + 272) = *((_OWORD *)v6 + 17);
          v125 = *((_OWORD *)v6 + 18);
          v126 = *((_OWORD *)v6 + 19);
          v127 = *((_OWORD *)v6 + 20);
          *(_QWORD *)(v113 + 336) = v6[42];
          *(_OWORD *)(v113 + 304) = v126;
          *(_OWORD *)(v113 + 320) = v127;
          *(_OWORD *)(v113 + 288) = v125;
          *(_OWORD *)(v113 + 344) = *(_OWORD *)(v6 + 43);
          v128 = *(_OWORD *)(v6 + 45);
          v129 = *(_OWORD *)(v6 + 47);
          v130 = *(_OWORD *)(v6 + 49);
          *(_QWORD *)(v113 + 408) = v6[51];
          *(_OWORD *)(v113 + 376) = v129;
          *(_OWORD *)(v113 + 392) = v130;
          *(_OWORD *)(v113 + 360) = v128;
          *(_OWORD *)(v113 + 416) = *((_OWORD *)v6 + 26);
          v131 = *((_OWORD *)v6 + 27);
          v132 = *((_OWORD *)v6 + 28);
          v133 = *((_OWORD *)v6 + 29);
          *(_QWORD *)(v113 + 480) = v6[60];
          *(_OWORD *)(v113 + 448) = v132;
          *(_OWORD *)(v113 + 464) = v133;
          *(_OWORD *)(v113 + 432) = v131;
          *(_OWORD *)(v113 + 488) = *(_OWORD *)(v6 + 61);
          v134 = *(_OWORD *)(v6 + 63);
          v135 = *(_OWORD *)(v6 + 65);
          v136 = *(_OWORD *)(v6 + 67);
          *(_QWORD *)(v113 + 552) = v6[69];
          *(_OWORD *)(v113 + 520) = v135;
          *(_OWORD *)(v113 + 536) = v136;
          *(_OWORD *)(v113 + 504) = v134;
          *(_OWORD *)(v113 + 560) = *((_OWORD *)v6 + 35);
          v137 = *((_OWORD *)v6 + 36);
          v138 = *((_OWORD *)v6 + 37);
          v139 = *((_OWORD *)v6 + 38);
          *(_QWORD *)(v113 + 624) = v6[78];
          *(_OWORD *)(v113 + 592) = v138;
          *(_OWORD *)(v113 + 608) = v139;
          *(_OWORD *)(v113 + 576) = v137;
          *(_OWORD *)(v113 + 632) = *(_OWORD *)(v6 + 79);
          v140 = *(_OWORD *)(v6 + 81);
          v141 = *(_OWORD *)(v6 + 83);
          v142 = *(_OWORD *)(v6 + 85);
          *(_QWORD *)(v113 + 696) = v6[87];
          *(_OWORD *)(v113 + 664) = v141;
          *(_OWORD *)(v113 + 680) = v142;
          *(_OWORD *)(v113 + 648) = v140;
          memcpy((void *)(v113 + 704), v6 + 88, 0x288uLL);
          v143 = *(_OWORD *)(v6 + 169);
          *(_QWORD *)(v113 + 1368) = v6[171];
          *(_OWORD *)(v113 + 1352) = v143;
          v144 = v6[174];
          *(_OWORD *)(v113 + 1376) = *((_OWORD *)v6 + 86);
          *(_QWORD *)(v113 + 1392) = v144;
          memcpy((void *)(v113 + 1400), v6 + 175, 0x288uLL);
          result = (char *)memcpy((void *)(v113 + 2048), v6 + 256, 0x288uLL);
          v145 = *(_OWORD *)(v6 + 337);
          *(_QWORD *)(v113 + 2712) = v6[339];
          *(_OWORD *)(v113 + 2696) = v145;
          *(_OWORD *)(v113 + 2720) = *((_OWORD *)v6 + 170);
          v112 += 2736;
          v6 += 342;
          v113 += 2736;
        }
        while (v6 != a3);
      }
      v43 = v112 - (_QWORD)v9;
    }
    else
    {
      v46 = &a2[2 * ((v45 - v9) >> 4)];
      if (v45 != v9)
      {
        do
        {
          v47 = *v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v9 = v47;
          v48 = *((_OWORD *)v6 + 1);
          *(_OWORD *)(v9 + 28) = *(_OWORD *)((char *)v6 + 28);
          *((_OWORD *)v9 + 1) = v48;
          v49 = *((_OWORD *)v6 + 3);
          *((_QWORD *)v9 + 8) = v6[8];
          *((_OWORD *)v9 + 3) = v49;
          v50 = *(_OWORD *)(v6 + 9);
          *((_QWORD *)v9 + 11) = v6[11];
          *(_OWORD *)(v9 + 72) = v50;
          v51 = *((_OWORD *)v6 + 7);
          *((_OWORD *)v9 + 6) = *((_OWORD *)v6 + 6);
          *((_OWORD *)v9 + 7) = v51;
          v53 = *((_OWORD *)v6 + 10);
          v52 = *((_OWORD *)v6 + 11);
          v54 = *((_OWORD *)v6 + 9);
          *((_QWORD *)v9 + 24) = v6[24];
          *((_OWORD *)v9 + 10) = v53;
          *((_OWORD *)v9 + 11) = v52;
          *((_OWORD *)v9 + 9) = v54;
          *((_OWORD *)v9 + 8) = *((_OWORD *)v6 + 8);
          *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 25);
          v55 = *(_OWORD *)(v6 + 27);
          v56 = *(_OWORD *)(v6 + 29);
          v57 = *(_OWORD *)(v6 + 31);
          *((_QWORD *)v9 + 33) = v6[33];
          *(_OWORD *)(v9 + 248) = v57;
          *(_OWORD *)(v9 + 232) = v56;
          *(_OWORD *)(v9 + 216) = v55;
          *((_OWORD *)v9 + 17) = *((_OWORD *)v6 + 17);
          v58 = *((_OWORD *)v6 + 18);
          v59 = *((_OWORD *)v6 + 19);
          v60 = *((_OWORD *)v6 + 20);
          *((_QWORD *)v9 + 42) = v6[42];
          *((_OWORD *)v9 + 19) = v59;
          *((_OWORD *)v9 + 20) = v60;
          *((_OWORD *)v9 + 18) = v58;
          *(_OWORD *)(v9 + 344) = *(_OWORD *)(v6 + 43);
          v61 = *(_OWORD *)(v6 + 45);
          v62 = *(_OWORD *)(v6 + 47);
          v63 = *(_OWORD *)(v6 + 49);
          *((_QWORD *)v9 + 51) = v6[51];
          *(_OWORD *)(v9 + 376) = v62;
          *(_OWORD *)(v9 + 392) = v63;
          *(_OWORD *)(v9 + 360) = v61;
          *((_OWORD *)v9 + 26) = *((_OWORD *)v6 + 26);
          v64 = *((_OWORD *)v6 + 27);
          v65 = *((_OWORD *)v6 + 28);
          v66 = *((_OWORD *)v6 + 29);
          *((_QWORD *)v9 + 60) = v6[60];
          *((_OWORD *)v9 + 28) = v65;
          *((_OWORD *)v9 + 29) = v66;
          *((_OWORD *)v9 + 27) = v64;
          *(_OWORD *)(v9 + 488) = *(_OWORD *)(v6 + 61);
          v67 = *(_OWORD *)(v6 + 63);
          v68 = *(_OWORD *)(v6 + 65);
          v69 = *(_OWORD *)(v6 + 67);
          *((_QWORD *)v9 + 69) = v6[69];
          *(_OWORD *)(v9 + 520) = v68;
          *(_OWORD *)(v9 + 536) = v69;
          *(_OWORD *)(v9 + 504) = v67;
          *((_OWORD *)v9 + 35) = *((_OWORD *)v6 + 35);
          v70 = *((_OWORD *)v6 + 36);
          v71 = *((_OWORD *)v6 + 37);
          v72 = *((_OWORD *)v6 + 38);
          *((_QWORD *)v9 + 78) = v6[78];
          *((_OWORD *)v9 + 37) = v71;
          *((_OWORD *)v9 + 38) = v72;
          *((_OWORD *)v9 + 36) = v70;
          *(_OWORD *)(v9 + 632) = *(_OWORD *)(v6 + 79);
          v73 = *(_OWORD *)(v6 + 81);
          v74 = *(_OWORD *)(v6 + 83);
          v75 = *(_OWORD *)(v6 + 85);
          *((_QWORD *)v9 + 87) = v6[87];
          *(_OWORD *)(v9 + 664) = v74;
          *(_OWORD *)(v9 + 680) = v75;
          *(_OWORD *)(v9 + 648) = v73;
          memcpy(v9 + 704, v6 + 88, 0x288uLL);
          v76 = *(_OWORD *)(v6 + 169);
          *((_QWORD *)v9 + 171) = v6[171];
          *(_OWORD *)(v9 + 1352) = v76;
          v77 = v6[174];
          *((_OWORD *)v9 + 86) = *((_OWORD *)v6 + 86);
          *((_QWORD *)v9 + 174) = v77;
          memcpy(v9 + 1400, v6 + 175, 0x288uLL);
          result = (char *)memcpy(v9 + 2048, v6 + 256, 0x288uLL);
          v78 = *(_OWORD *)(v6 + 337);
          *((_QWORD *)v9 + 339) = v6[339];
          *(_OWORD *)(v9 + 2696) = v78;
          *((_OWORD *)v9 + 170) = *((_OWORD *)v6 + 170);
          v6 += 342;
          v9 += 2736;
        }
        while (v6 != v46);
        v9 = (char *)*v44;
      }
      v79 = v9;
      if (v46 != a3)
      {
        v79 = v9;
        v80 = v9;
        do
        {
          *(_OWORD *)v80 = *(_OWORD *)v46;
          v81 = *((_OWORD *)v46 + 1);
          *(_OWORD *)(v80 + 28) = *(_OWORD *)((char *)v46 + 28);
          *((_OWORD *)v80 + 1) = v81;
          v82 = *((_OWORD *)v46 + 3);
          *((_QWORD *)v80 + 8) = v46[8];
          *((_OWORD *)v80 + 3) = v82;
          v83 = *(_OWORD *)(v46 + 9);
          *((_QWORD *)v80 + 11) = v46[11];
          *(_OWORD *)(v80 + 72) = v83;
          v84 = *((_OWORD *)v46 + 7);
          *((_OWORD *)v80 + 6) = *((_OWORD *)v46 + 6);
          *((_OWORD *)v80 + 7) = v84;
          v86 = *((_OWORD *)v46 + 10);
          v85 = *((_OWORD *)v46 + 11);
          v87 = *((_OWORD *)v46 + 9);
          *((_QWORD *)v80 + 24) = v46[24];
          *((_OWORD *)v80 + 10) = v86;
          *((_OWORD *)v80 + 11) = v85;
          *((_OWORD *)v80 + 9) = v87;
          *((_OWORD *)v80 + 8) = *((_OWORD *)v46 + 8);
          *(_OWORD *)(v80 + 200) = *(_OWORD *)(v46 + 25);
          v88 = *(_OWORD *)(v46 + 27);
          v89 = *(_OWORD *)(v46 + 29);
          v90 = *(_OWORD *)(v46 + 31);
          *((_QWORD *)v80 + 33) = v46[33];
          *(_OWORD *)(v80 + 248) = v90;
          *(_OWORD *)(v80 + 232) = v89;
          *(_OWORD *)(v80 + 216) = v88;
          *((_OWORD *)v80 + 17) = *((_OWORD *)v46 + 17);
          v91 = *((_OWORD *)v46 + 18);
          v92 = *((_OWORD *)v46 + 19);
          v93 = *((_OWORD *)v46 + 20);
          *((_QWORD *)v80 + 42) = v46[42];
          *((_OWORD *)v80 + 19) = v92;
          *((_OWORD *)v80 + 20) = v93;
          *((_OWORD *)v80 + 18) = v91;
          *(_OWORD *)(v80 + 344) = *(_OWORD *)(v46 + 43);
          v94 = *(_OWORD *)(v46 + 45);
          v95 = *(_OWORD *)(v46 + 47);
          v96 = *(_OWORD *)(v46 + 49);
          *((_QWORD *)v80 + 51) = v46[51];
          *(_OWORD *)(v80 + 376) = v95;
          *(_OWORD *)(v80 + 392) = v96;
          *(_OWORD *)(v80 + 360) = v94;
          *((_OWORD *)v80 + 26) = *((_OWORD *)v46 + 26);
          v97 = *((_OWORD *)v46 + 27);
          v98 = *((_OWORD *)v46 + 28);
          v99 = *((_OWORD *)v46 + 29);
          *((_QWORD *)v80 + 60) = v46[60];
          *((_OWORD *)v80 + 28) = v98;
          *((_OWORD *)v80 + 29) = v99;
          *((_OWORD *)v80 + 27) = v97;
          *(_OWORD *)(v80 + 488) = *(_OWORD *)(v46 + 61);
          v100 = *(_OWORD *)(v46 + 63);
          v101 = *(_OWORD *)(v46 + 65);
          v102 = *(_OWORD *)(v46 + 67);
          *((_QWORD *)v80 + 69) = v46[69];
          *(_OWORD *)(v80 + 520) = v101;
          *(_OWORD *)(v80 + 536) = v102;
          *(_OWORD *)(v80 + 504) = v100;
          *((_OWORD *)v80 + 35) = *((_OWORD *)v46 + 35);
          v103 = *((_OWORD *)v46 + 36);
          v104 = *((_OWORD *)v46 + 37);
          v105 = *((_OWORD *)v46 + 38);
          *((_QWORD *)v80 + 78) = v46[78];
          *((_OWORD *)v80 + 37) = v104;
          *((_OWORD *)v80 + 38) = v105;
          *((_OWORD *)v80 + 36) = v103;
          *(_OWORD *)(v80 + 632) = *(_OWORD *)(v46 + 79);
          v106 = *(_OWORD *)(v46 + 81);
          v107 = *(_OWORD *)(v46 + 83);
          v108 = *(_OWORD *)(v46 + 85);
          *((_QWORD *)v80 + 87) = v46[87];
          *(_OWORD *)(v80 + 664) = v107;
          *(_OWORD *)(v80 + 680) = v108;
          *(_OWORD *)(v80 + 648) = v106;
          memcpy(v80 + 704, v46 + 88, 0x288uLL);
          v109 = *(_OWORD *)(v46 + 169);
          *((_QWORD *)v80 + 171) = v46[171];
          *(_OWORD *)(v80 + 1352) = v109;
          v110 = v46[174];
          *((_OWORD *)v80 + 86) = *((_OWORD *)v46 + 86);
          *((_QWORD *)v80 + 174) = v110;
          memcpy(v80 + 1400, v46 + 175, 0x288uLL);
          result = (char *)memcpy(v80 + 2048, v46 + 256, 0x288uLL);
          v111 = *(_OWORD *)(v46 + 337);
          *((_QWORD *)v80 + 339) = v46[339];
          *(_OWORD *)(v80 + 2696) = v111;
          *((_OWORD *)v80 + 170) = *((_OWORD *)v46 + 170);
          v79 += 2736;
          v46 += 342;
          v80 += 2736;
        }
        while (v46 != a3);
      }
      v43 = v79 - v9;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x17F405FD017F40)
      goto LABEL_28;
    v10 = 0x80BFA02FE80BFA03 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0xBFA02FE80BFA0 ? 0x17F405FD017F40 : v11;
    if (v12 > 0x17F405FD017F40)
LABEL_28:
      sub_20E92CED8();
    v13 = 2736 * v12;
    result = (char *)operator new(2736 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v14 = (void **)(v7 + 1);
    v7[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      v15 = result;
      do
      {
        v16 = *((_OWORD *)v6 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v6;
        *((_OWORD *)v15 + 1) = v16;
        *(_OWORD *)(v15 + 28) = *(_OWORD *)((char *)v6 + 28);
        *((_OWORD *)v15 + 3) = *((_OWORD *)v6 + 3);
        *((_QWORD *)v15 + 8) = v6[8];
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(v6 + 9);
        *((_QWORD *)v15 + 11) = v6[11];
        v17 = *((_OWORD *)v6 + 7);
        *((_OWORD *)v15 + 6) = *((_OWORD *)v6 + 6);
        *((_OWORD *)v15 + 7) = v17;
        *((_QWORD *)v15 + 24) = v6[24];
        v18 = *((_OWORD *)v6 + 11);
        *((_OWORD *)v15 + 10) = *((_OWORD *)v6 + 10);
        *((_OWORD *)v15 + 11) = v18;
        v19 = *((_OWORD *)v6 + 9);
        *((_OWORD *)v15 + 8) = *((_OWORD *)v6 + 8);
        *((_OWORD *)v15 + 9) = v19;
        *(_OWORD *)(v15 + 200) = *(_OWORD *)(v6 + 25);
        *((_QWORD *)v15 + 33) = v6[33];
        *(_OWORD *)(v15 + 248) = *(_OWORD *)(v6 + 31);
        *(_OWORD *)(v15 + 232) = *(_OWORD *)(v6 + 29);
        *(_OWORD *)(v15 + 216) = *(_OWORD *)(v6 + 27);
        v20 = *((_OWORD *)v6 + 17);
        v21 = *((_OWORD *)v6 + 18);
        v22 = *((_OWORD *)v6 + 19);
        v23 = *((_OWORD *)v6 + 20);
        *((_QWORD *)v15 + 42) = v6[42];
        *((_OWORD *)v15 + 19) = v22;
        *((_OWORD *)v15 + 20) = v23;
        *((_OWORD *)v15 + 17) = v20;
        *((_OWORD *)v15 + 18) = v21;
        v24 = *(_OWORD *)(v6 + 43);
        v25 = *(_OWORD *)(v6 + 45);
        v26 = *(_OWORD *)(v6 + 47);
        v27 = *(_OWORD *)(v6 + 49);
        *((_QWORD *)v15 + 51) = v6[51];
        *(_OWORD *)(v15 + 376) = v26;
        *(_OWORD *)(v15 + 392) = v27;
        *(_OWORD *)(v15 + 344) = v24;
        *(_OWORD *)(v15 + 360) = v25;
        v28 = *((_OWORD *)v6 + 26);
        v29 = *((_OWORD *)v6 + 27);
        v30 = *((_OWORD *)v6 + 28);
        v31 = *((_OWORD *)v6 + 29);
        *((_QWORD *)v15 + 60) = v6[60];
        *((_OWORD *)v15 + 28) = v30;
        *((_OWORD *)v15 + 29) = v31;
        *((_OWORD *)v15 + 26) = v28;
        *((_OWORD *)v15 + 27) = v29;
        v32 = *(_OWORD *)(v6 + 61);
        v33 = *(_OWORD *)(v6 + 63);
        v34 = *(_OWORD *)(v6 + 65);
        v35 = *(_OWORD *)(v6 + 67);
        *((_QWORD *)v15 + 69) = v6[69];
        *(_OWORD *)(v15 + 520) = v34;
        *(_OWORD *)(v15 + 536) = v35;
        *(_OWORD *)(v15 + 488) = v32;
        *(_OWORD *)(v15 + 504) = v33;
        v36 = *((_OWORD *)v6 + 35);
        v37 = *((_OWORD *)v6 + 36);
        v38 = *((_OWORD *)v6 + 37);
        v39 = *((_OWORD *)v6 + 38);
        *((_QWORD *)v15 + 78) = v6[78];
        *((_OWORD *)v15 + 37) = v38;
        *((_OWORD *)v15 + 38) = v39;
        v40 = *(_OWORD *)(v6 + 85);
        *(_OWORD *)(v15 + 664) = *(_OWORD *)(v6 + 83);
        *(_OWORD *)(v15 + 680) = v40;
        v41 = *(_OWORD *)(v6 + 79);
        v42 = *(_OWORD *)(v6 + 81);
        *((_QWORD *)v15 + 87) = v6[87];
        *(_OWORD *)(v15 + 632) = v41;
        *(_OWORD *)(v15 + 648) = v42;
        *((_OWORD *)v15 + 35) = v36;
        *((_OWORD *)v15 + 36) = v37;
        memcpy(v15 + 704, v6 + 88, 0x2B8uLL);
        memcpy(v15 + 1400, v6 + 175, 0x288uLL);
        result = (char *)memcpy(v15 + 2048, v6 + 256, 0x288uLL);
        *(_OWORD *)(v15 + 2696) = *(_OWORD *)(v6 + 337);
        *((_QWORD *)v15 + 339) = v6[339];
        *((_OWORD *)v15 + 170) = *((_OWORD *)v6 + 170);
        v15 += 2736;
        v6 += 342;
      }
      while (v6 != a3);
    }
    v43 = v15 - v9;
    v44 = v14;
  }
  *v44 = &v9[v43];
  return result;
}

uint64_t sub_20FCEA8D8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE *v15;
  char *v16;
  char *v17;

  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  if ((*(char *)(a2 + 127) & 0x80000000) == 0)
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v10 = *(_BYTE **)(a2 + 128);
    v9 = *(_BYTE **)(a2 + 136);
    v11 = v9 - v10;
    if (v9 == v10)
      goto LABEL_3;
LABEL_6:
    if (v11 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v16;
    v17 = &v16[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 144) = v17;
    memcpy(v16, v10, v11);
    *(_QWORD *)(a1 + 136) = v17;
    v12 = a1 + 152;
    if ((*(char *)(a2 + 175) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  sub_20E860C04((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = *(_BYTE **)(a2 + 128);
  v15 = *(_BYTE **)(a2 + 136);
  v11 = v15 - v10;
  if (v15 != v10)
    goto LABEL_6;
LABEL_3:
  v12 = a1 + 152;
  if ((*(char *)(a2 + 175) & 0x80000000) == 0)
  {
LABEL_4:
    v13 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v12 = v13;
    return a1;
  }
LABEL_8:
  sub_20E860C04((_BYTE *)v12, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  return a1;
}

void sub_20FCEAA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E93DA98(v1);
  _Unwind_Resume(a1);
}

void sub_20FCEAA30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 136) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 127) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCEAA6C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void **v8;
  size_t v9;
  __int128 v10;
  void *v11;
  size_t v12;
  void **v13;
  char v14;
  __int128 v15;
  void *v17;
  size_t v18;

  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  if (a1 == a2)
    return a1;
  v8 = (void **)(a1 + 104);
  v9 = *(unsigned __int8 *)(a2 + 127);
  if (*(char *)(a1 + 127) < 0)
  {
    if ((v9 & 0x80u) == 0)
      v11 = (void *)(a2 + 104);
    else
      v11 = *(void **)(a2 + 104);
    if ((v9 & 0x80u) == 0)
      v12 = v9;
    else
      v12 = *(_QWORD *)(a2 + 112);
    sub_20E867CBC(v8, v11, v12);
  }
  else if ((v9 & 0x80) != 0)
  {
    sub_20E867BF8(v8, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v8 = v10;
  }
  sub_20E86811C((_QWORD *)(a1 + 128), *(char **)(a2 + 128), *(char **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  v13 = (void **)(a1 + 152);
  v14 = *(_BYTE *)(a2 + 175);
  if (*(char *)(a1 + 175) < 0)
  {
    if (v14 >= 0)
      v17 = (void *)(a2 + 152);
    else
      v17 = *(void **)(a2 + 152);
    if (v14 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 175);
    else
      v18 = *(_QWORD *)(a2 + 160);
    sub_20E867CBC(v13, v17, v18);
    return a1;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 175) & 0x80) == 0)
    {
      v15 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)v13 = v15;
      return a1;
    }
    sub_20E867BF8(v13, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
    return a1;
  }
}

uint64_t sub_20FCEAB94(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    if ((*(char *)(i - 1) & 0x80000000) == 0)
    {
      v4 = *(void **)(i - 48);
      if (!v4)
        goto LABEL_7;
LABEL_6:
      *(_QWORD *)(i - 40) = v4;
      operator delete(v4);
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 24));
    v4 = *(void **)(i - 48);
    if (v4)
      goto LABEL_6;
LABEL_7:
    if (*(char *)(i - 49) < 0)
      operator delete(*(void **)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20FCEAC24(int a1, char *__src, char *a3, char *__dst)
{
  char *v6;
  char *v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;

  if (__src != a3)
  {
    v6 = __src;
    do
    {
      memcpy(__dst, v6, 0x2E8uLL);
      *((_QWORD *)__dst + 93) = 0;
      *((_QWORD *)__dst + 95) = 0;
      *((_QWORD *)__dst + 94) = 0;
      v9 = (_BYTE *)*((_QWORD *)v6 + 93);
      v10 = (_BYTE *)*((_QWORD *)v6 + 94);
      v11 = v10 - v9;
      if (v10 != v9)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493)
          sub_20E92CED8();
        v12 = (char *)operator new(v11);
        *((_QWORD *)__dst + 93) = v12;
        *((_QWORD *)__dst + 94) = v12;
        v7 = &v12[8 * (v11 >> 3)];
        *((_QWORD *)__dst + 95) = v7;
        memcpy(v12, v9, v11);
        *((_QWORD *)__dst + 94) = v7;
      }
      v8 = *((_OWORD *)v6 + 48);
      *((_DWORD *)__dst + 196) = *((_DWORD *)v6 + 196);
      *((_OWORD *)__dst + 48) = v8;
      __dst += 792;
      v6 += 792;
    }
    while (v6 != a3);
  }
  return __dst;
}

void sub_20FCEAD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 744);
  if (v11)
  {
    *(_QWORD *)(v9 + 752) = v11;
    operator delete(v11);
  }
  sub_20FCEAD7C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCEAD7C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 48);
      if (v5)
      {
        *(_QWORD *)(v3 - 40) = v5;
        operator delete(v5);
      }
      v3 -= 792;
    }
  }
  return a1;
}

uint64_t sub_20FCEADDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 792;
        *(_QWORD *)(a1 + 16) = v2 - 792;
        v5 = *(void **)(v2 - 48);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 40) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 792;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FCEAE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20FCE014C(a3 + v6, a1 + v6);
      v6 += 152;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20FCEAEA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (!v2)
LABEL_2:
    _Unwind_Resume(exception_object);
  while (1)
  {
    v4 = v1 + v2;
    v5 = *(void **)(v1 + v2 - 32);
    if (v5)
    {
      *(_QWORD *)(v4 - 24) = v5;
      operator delete(v5);
    }
    if (*(char *)(v4 - 33) < 0)
      break;
    v6 = v1 + v2;
    v7 = *(void **)(v1 + v2 - 80);
    if (v7)
      goto LABEL_8;
LABEL_9:
    v8 = *(void **)(v6 - 104);
    if (v8)
    {
      *(_QWORD *)(v1 + v2 - 96) = v8;
      operator delete(v8);
    }
    v2 -= 152;
    if (!v2)
      goto LABEL_2;
  }
  operator delete(*(void **)(v4 - 56));
  v6 = v1 + v2;
  v7 = *(void **)(v1 + v2 - 80);
  if (!v7)
    goto LABEL_9;
LABEL_8:
  *(_QWORD *)(v6 - 72) = v7;
  operator delete(v7);
  goto LABEL_9;
}

size_t sub_20FCEAF1C(size_t __sz, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  _BYTE *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _BYTE *v34;
  unint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  void **v39;
  char v40;
  __int128 v41;
  void *v42;
  size_t v43;

  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(__sz + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(__sz + 24) = v5;
  *(_OWORD *)(__sz + 8) = v4;
  if (__sz == a2)
    goto LABEL_53;
  v7 = (_QWORD *)(__sz + 48);
  v6 = *(char **)(__sz + 48);
  v8 = *(char **)(a2 + 48);
  v9 = *(_BYTE **)(a2 + 56);
  v10 = v9 - v8;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 4);
  v12 = *(_QWORD *)(__sz + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v6) >> 4) < v11)
  {
    if (v6)
    {
      *(_QWORD *)(__sz + 56) = v6;
      operator delete(v6);
      v12 = 0;
      *v7 = 0;
      *(_QWORD *)(__sz + 56) = 0;
      *(_QWORD *)(__sz + 64) = 0;
    }
    if (v11 > 0x555555555555555)
      goto LABEL_54;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 4);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 4);
    v15 = v13 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v14;
    if (v15 > 0x555555555555555)
LABEL_54:
      sub_20E92CED8();
    v16 = 48 * v15;
    v17 = (char *)operator new(48 * v15);
    v6 = v17;
    *(_QWORD *)(__sz + 48) = v17;
    *(_QWORD *)(__sz + 56) = v17;
    *(_QWORD *)(__sz + 64) = &v17[v16];
    if (v9 != v8)
      memcpy(v17, v8, v9 - v8);
    goto LABEL_22;
  }
  v18 = *(_BYTE **)(__sz + 56);
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - v6) >> 4) >= v11)
  {
    if (v9 == v8)
      goto LABEL_22;
    v20 = *(void **)(__sz + 48);
    v21 = *(char **)(a2 + 48);
    goto LABEL_21;
  }
  v19 = &v8[16 * ((v18 - v6) >> 4)];
  if (v18 != v6)
  {
    memmove(*(void **)(__sz + 48), *(const void **)(a2 + 48), v18 - v6);
    v6 = *(char **)(__sz + 56);
  }
  v10 = v9 - v19;
  if (v9 != v19)
  {
    v20 = v6;
    v21 = v19;
LABEL_21:
    memmove(v20, v21, v10);
  }
LABEL_22:
  v22 = &v6[v10];
  v23 = *(char **)(__sz + 72);
  *(_QWORD *)(__sz + 56) = v22;
  v24 = *(char **)(a2 + 72);
  v25 = *(_BYTE **)(a2 + 80);
  v26 = v25 - v24;
  v27 = (v25 - v24) >> 6;
  v28 = *(_QWORD *)(__sz + 88);
  if (v27 > (v28 - (uint64_t)v23) >> 6)
  {
    if (v23)
    {
      *(_QWORD *)(__sz + 80) = v23;
      operator delete(v23);
      v28 = 0;
      *(_QWORD *)(__sz + 72) = 0;
      *(_QWORD *)(__sz + 80) = 0;
      *(_QWORD *)(__sz + 88) = 0;
    }
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_55;
    v29 = v28 >> 5;
    if (v28 >> 5 <= v27)
      v29 = (v25 - v24) >> 6;
    v30 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0;
    v31 = 0x3FFFFFFFFFFFFFFLL;
    if (!v30)
      v31 = v29;
    if (v31 >> 58)
LABEL_55:
      sub_20E92CED8();
    v32 = v31 << 6;
    v33 = (char *)operator new(v31 << 6);
    v23 = v33;
    *(_QWORD *)(__sz + 72) = v33;
    *(_QWORD *)(__sz + 80) = v33;
    *(_QWORD *)(__sz + 88) = &v33[v32];
    if (v25 != v24)
      memcpy(v33, v24, v25 - v24);
    goto LABEL_41;
  }
  v34 = *(_BYTE **)(__sz + 80);
  v35 = (v34 - v23) >> 6;
  if (v35 < v27)
  {
    v36 = &v24[64 * v35];
    if (v34 != v23)
    {
      memmove(v23, *(const void **)(a2 + 72), v34 - v23);
      v23 = *(char **)(__sz + 80);
    }
    v26 = v25 - v36;
    if (v25 == v36)
      goto LABEL_41;
    v37 = v23;
    v38 = v36;
    goto LABEL_40;
  }
  if (v25 != v24)
  {
    v37 = v23;
    v38 = *(char **)(a2 + 72);
LABEL_40:
    memmove(v37, v38, v26);
  }
LABEL_41:
  *(_QWORD *)(__sz + 80) = &v23[v26];
  v39 = (void **)(__sz + 96);
  v40 = *(_BYTE *)(a2 + 119);
  if (*(char *)(__sz + 119) < 0)
  {
    if (v40 >= 0)
      v42 = (void *)(a2 + 96);
    else
      v42 = *(void **)(a2 + 96);
    if (v40 >= 0)
      v43 = *(unsigned __int8 *)(a2 + 119);
    else
      v43 = *(_QWORD *)(a2 + 104);
    sub_20E867CBC(v39, v42, v43);
  }
  else if ((*(_BYTE *)(a2 + 119) & 0x80) != 0)
  {
    sub_20E867BF8(v39, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(__sz + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)v39 = v41;
  }
  sub_20E86811C((_QWORD *)(__sz + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
LABEL_53:
  *(_BYTE *)(__sz + 144) = *(_BYTE *)(a2 + 144);
  return __sz;
}

_QWORD *sub_20FCEB238(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E92CED8();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 4);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 4;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 4);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 4;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20FCEB384(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_20E92CED8();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20FCEB4FC(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x333333333333333)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x199999999999999 ? 0x333333333333333 : v11;
    if (v12 > 0x333333333333333)
LABEL_23:
      sub_20E92CED8();
    v13 = 10 * v12;
    result = operator new(80 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 4) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 7;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 7;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_20FCEB67C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA051E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCEB68C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA051E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCEB6BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20FCEB6CC(uint64_t *a1, uint64_t **a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v4;
  int8x8_t *v5;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  int v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *p_shared_owners;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t v64;
  unint64_t *p_shared_weak_owners;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t **v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t **v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  _OWORD *v95;
  uint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  int8x8_t v127;
  unint64_t v128;
  uint8x8_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  std::runtime_error *exception;
  uint64_t **v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  __int128 v164;
  int v165;

  v4 = a4;
  v5 = a3;
  v7 = a1;
  v8 = a2 + 1;
  v9 = a2 + 1;
  v11 = (unint64_t *)(a4 + 8);
  v10 = *(uint64_t **)(a4 + 8);
  v12 = *(_DWORD *)(a4 + 16);
  v13 = v10 == (uint64_t *)-1 && v12 == -1;
  v14 = !v13;
  if (v13)
    goto LABEL_20;
  v15 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_20;
  v16 = a2 + 1;
  do
  {
    v17 = *(_QWORD *)(v15 + 32);
    if (v17 < (unint64_t)v10)
    {
      v15 += 8;
    }
    else if ((uint64_t *)v17 == v10)
    {
      if (*(_DWORD *)(v15 + 40) < v12)
        v15 += 8;
      else
        v16 = (uint64_t **)v15;
    }
    else
    {
      v16 = (uint64_t **)v15;
    }
    v15 = *(_QWORD *)v15;
  }
  while (v15);
  if (v16 == v8 || (v18 = v16[4], v10 < v18) || v10 == v18 && v12 < *((_DWORD *)v16 + 10))
  {
LABEL_20:
    v19 = a3[6];
    if (v19)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
        if (*(_QWORD *)&v19 <= v20)
          v22 = v20 % *(_QWORD *)&v19;
      }
      else
      {
        v22 = (v19.i32[0] - 1) & v20;
      }
      v23 = *(uint64_t ***)(*(_QWORD *)&a3[5] + 8 * v22);
      if (v23)
      {
        v24 = *v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v19 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v20)
              {
                if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                  goto LABEL_212;
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_40;
              }
              v24 = (uint64_t *)*v24;
              if (!v24)
                goto LABEL_40;
            }
          }
          do
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
              {
LABEL_212:
                v132 = v24[3];
                v131 = v24[4];
                if (v131)
                {
                  v133 = (unint64_t *)(v131 + 8);
                  do
                    v134 = __ldxr(v133);
                  while (__stxr(v134 + 1, v133));
                }
                if (!*(_BYTE *)(v132 + 528))
                {
                  v135 = *(_QWORD *)(a4 + 32);
                  if (v135)
                    sub_20F2E0670(v132, v135);
                }
                *v7 = v132;
                v7[1] = v131;
                return;
              }
            }
            else
            {
              if (v26 >= *(_QWORD *)&v19)
                v26 %= *(_QWORD *)&v19;
              if (v26 != v22)
                break;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_40:
    v158 = a2 + 1;
    v28 = a2[9];
    if (v28)
    {
      v29 = v14;
      v31 = v28[6];
      v30 = v28[7];
      *(_QWORD *)&v161 = v31;
      *((_QWORD *)&v161 + 1) = v30;
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = v28[2];
      if (v28[1] == v34)
      {
        v58 = v28[4];
        if (v58 >= v28[5])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v28[4] = v58 + 1;
        v35 = operator new();
        *(_BYTE *)(v35 + 40) = 0;
        *(_BYTE *)(v35 + 528) = 0;
        *(_OWORD *)v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_DWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 536) = 0;
        *(_QWORD *)(v35 + 552) = 0;
        *(_QWORD *)(v35 + 544) = 0;
        *(_DWORD *)(v35 + 560) = 0;
        if (!v30)
        {
LABEL_82:
          v44 = (std::__shared_weak_count *)operator new();
          v44->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05230;
          v44->__shared_weak_owners_ = 0;
          v44[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
          v44[1].__shared_owners_ = v31;
          v44[1].__shared_weak_owners_ = v30;
          v62 = v29;
          if (v35)
          {
            v63 = *(std::__shared_weak_count **)(v35 + 8);
            if (v63)
            {
              if (v63->__shared_owners_ != -1)
                goto LABEL_96;
              do
                v64 = __ldxr(p_shared_owners);
              while (__stxr(v64 + 1, p_shared_owners));
              p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
              do
                v66 = __ldxr(p_shared_weak_owners);
              while (__stxr(v66 + 1, p_shared_weak_owners));
              *(_QWORD *)v35 = v35;
              *(_QWORD *)(v35 + 8) = v44;
              std::__shared_weak_count::__release_weak(v63);
            }
            else
            {
              do
                v67 = __ldxr(p_shared_owners);
              while (__stxr(v67 + 1, p_shared_owners));
              v68 = (unint64_t *)&v44->__shared_weak_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
              *(_QWORD *)v35 = v35;
              *(_QWORD *)(v35 + 8) = v44;
            }
            do
              v70 = __ldaxr(p_shared_owners);
            while (__stlxr(v70 - 1, p_shared_owners));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
LABEL_96:
          v5 = a3;
          v43 = v158;
          if (*((_QWORD *)&v161 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
            }
          }
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = 0;
          *(_DWORD *)(v35 + 32) = 0;
          if (*(_BYTE *)(v35 + 528))
            *(_BYTE *)(v35 + 528) = 0;
          *(_QWORD *)(v35 + 544) = *(_QWORD *)(v35 + 536);
          *(_DWORD *)(v35 + 560) = 0;
          v159 = v35;
          v160 = v44;
          *(_QWORD *)(v35 + 16) = a2 + 3;
          if (!v62)
          {
LABEL_104:
            v73 = a2[1];
            v74 = a2[2];
            if (v74)
            {
              if (v73)
              {
                v75 = a2[1];
                do
                {
                  v76 = v75;
                  v75 = (uint64_t *)v75[1];
                }
                while (v75);
              }
              else
              {
                v77 = v9;
                do
                {
                  v76 = v77[2];
                  v13 = *v76 == (_QWORD)v77;
                  v77 = (uint64_t **)v76;
                }
                while (v13);
              }
              v78 = *((unsigned int *)v76 + 10);
              if ((unint64_t)v74 >= v78)
                LODWORD(v74) = v78;
              else
                LODWORD(v74) = 0;
            }
            v57 = (unint64_t)v5[2];
            v79 = v74;
            if (v73)
            {
              do
              {
                v80 = v9;
                do
                {
                  v81 = v73[4];
                  if (v81 < v57)
                  {
                    ++v73;
                  }
                  else if (v81 == v57)
                  {
                    if (*((_DWORD *)v73 + 10) < v79)
                      ++v73;
                    else
                      v80 = (uint64_t **)v73;
                  }
                  else
                  {
                    v80 = (uint64_t **)v73;
                  }
                  v73 = (uint64_t *)*v73;
                }
                while (v73);
                if (v80 == v43)
                  break;
                v82 = (unint64_t)v80[4];
                if (v82 > v57 || v82 == v57 && *((_DWORD *)v80 + 10) > v79)
                  break;
                v83 = v80[6];
                v84 = (std::__shared_weak_count *)v80[7];
                if (v84)
                {
                  v85 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                  do
                    v87 = __ldaxr(v85);
                  while (__stlxr(v87 - 1, v85));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                if (!v83)
                  break;
                ++v79;
                v73 = *v9;
              }
              while (*v9);
            }
            *(_QWORD *)(v35 + 24) = v57;
            *(_DWORD *)(v35 + 32) = v79;
LABEL_137:
            v88 = *(_QWORD *)(v35 + 32);
            *(_QWORD *)&v161 = v57;
            *((_QWORD *)&v161 + 1) = v88;
            v162 = (std::__shared_weak_count *)v35;
            *(_QWORD *)&v163 = v44;
            v89 = (unint64_t *)&v44->__shared_owners_;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
            v91 = (uint64_t)*v9;
            v92 = (uint64_t)v9;
            if (!*v9)
            {
LABEL_150:
              v95 = operator new(0x40uLL);
              v95[2] = v161;
              *((_QWORD *)v95 + 6) = v35;
              *((_QWORD *)v95 + 7) = v44;
              v162 = 0;
              *(_QWORD *)&v163 = 0;
              *(_QWORD *)v95 = 0;
              *((_QWORD *)v95 + 1) = 0;
              *((_QWORD *)v95 + 2) = v92;
              *v9 = (uint64_t *)v95;
              v96 = (uint64_t *)**a2;
              if (v96)
              {
                *a2 = v96;
                v95 = *v9;
              }
              sub_20E868578(a2[1], (uint64_t *)v95);
              a2[2] = (uint64_t *)((char *)a2[2] + 1);
              v44 = (std::__shared_weak_count *)v163;
              v4 = a4;
              v7 = a1;
              if ((_QWORD)v163)
              {
LABEL_155:
                v97 = (unint64_t *)&v44->__shared_owners_;
                do
                  v98 = __ldaxr(v97);
                while (__stlxr(v98 - 1, v97));
                if (!v98)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v99 = *(_QWORD *)(v4 + 32);
              v100 = v159;
              if (!v99)
              {
LABEL_161:
                v101 = *(__int128 **)(v4 + 24);
                v161 = *(_OWORD *)v5[2].i8;
                v162 = (std::__shared_weak_count *)v5[4];
                v163 = *v101;
                v164 = v101[1];
                v165 = *((_DWORD *)v101 + 8);
                v102 = *(_QWORD *)(v100 + 536);
                v103 = *(_QWORD *)(v100 + 544);
                if (v103 != v102)
                {
                  v104 = (v103 - v102) >> 6;
                  while (1)
                  {
                    v105 = v104 >> 1;
                    v106 = v102 + (v104 >> 1 << 6);
                    v107 = *(_DWORD *)(v106 + 16);
                    v108 = v107 >= v162;
                    if (v107 != (_DWORD)v162)
                      goto LABEL_169;
                    if (*(_QWORD *)v106 >= (unint64_t)v161)
                      break;
LABEL_163:
                    v102 = v106 + 64;
                    v105 = v104 + ~v105;
LABEL_164:
                    v104 = v105;
                    if (!v105)
                      goto LABEL_172;
                  }
                  if (*(_QWORD *)v106 != (_QWORD)v161)
                    goto LABEL_164;
                  v108 = *(_DWORD *)(v106 + 8) >= DWORD2(v161);
LABEL_169:
                  if (v108)
                    goto LABEL_164;
                  goto LABEL_163;
                }
LABEL_172:
                if ((v102 == v103
                   || *(_DWORD *)(v102 + 16) != v5[4].i32[0]
                   || *(_QWORD *)v102 != *(_QWORD *)&v5[2]
                   || *(_DWORD *)(v102 + 8) != v5[3].i32[0])
                  && *(_QWORD *)(v100 + 544) != sub_20FCECF90((char **)(v100 + 536), (char *)v102, &v161))
                {
                  v109 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4);
                  v110 = v109;
                  if (v160)
                  {
                    v111 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v112 = __ldxr(v111);
                    while (__stxr(v112 + 1, v111));
                    v110 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4);
                    do
                      v113 = __ldxr(v111);
                    while (__stxr(v113 + 1, v111));
                  }
                  LODWORD(v161) = v109;
                  *((_QWORD *)&v161 + 1) = v100;
                  v162 = v160;
                  LODWORD(v163) = v110;
                  v114 = sub_20FCED944((uint64_t)&v5[5], v109, (uint64_t)&v161);
                  v115 = v162;
                  if (v162)
                  {
                    v116 = (unint64_t *)&v162->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                  if (!v160)
                    goto LABEL_191;
                  v118 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                    if ((v114 & 1) == 0)
                      goto LABEL_192;
                  }
                  else
                  {
LABEL_191:
                    if ((v114 & 1) == 0)
                      goto LABEL_192;
                  }
                  v120 = v160;
                  *v7 = v159;
                  v7[1] = (uint64_t)v160;
                  if (!v160)
                    return;
                  v121 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                  goto LABEL_199;
                }
LABEL_192:
                *v7 = 0;
                v7[1] = 0;
                v120 = v160;
                goto LABEL_193;
              }
LABEL_160:
              sub_20F2E0670(v100, v99);
              goto LABEL_161;
            }
            while (1)
            {
              v92 = v91;
              v93 = *(_QWORD *)(v91 + 32);
              if (v57 < v93)
                goto LABEL_141;
              if (v57 == v93)
              {
                v94 = *(_DWORD *)(v92 + 40);
                if (v94 <= v88)
                {
                  if (v94 >= v88)
                    goto LABEL_154;
                  goto LABEL_148;
                }
LABEL_141:
                v91 = *(_QWORD *)v92;
                v9 = (uint64_t **)v92;
                if (!*(_QWORD *)v92)
                  goto LABEL_150;
              }
              else
              {
                if (v93 >= v57)
                {
LABEL_154:
                  v4 = a4;
                  v7 = a1;
                  goto LABEL_155;
                }
LABEL_148:
                v91 = *(_QWORD *)(v92 + 8);
                if (!v91)
                {
                  v9 = (uint64_t **)(v92 + 8);
                  goto LABEL_150;
                }
              }
            }
          }
LABEL_77:
          v57 = *v11;
          *(_DWORD *)(v35 + 32) = *((_DWORD *)v11 + 2);
          *(_QWORD *)(v35 + 24) = v57;
          goto LABEL_137;
        }
      }
      else
      {
        v35 = *(_QWORD *)(v34 - 8);
        *(_QWORD *)(v34 - 8) = 0;
        v36 = v28[2];
        v39 = *(_QWORD *)(v36 - 8);
        v37 = (_QWORD *)(v36 - 8);
        v38 = v39;
        *v37 = 0;
        if (v39)
        {
          if (*(_BYTE *)(v38 + 528))
            *(_BYTE *)(v38 + 528) = 0;
          v40 = *(void **)(v38 + 536);
          *(_QWORD *)(v38 + 544) = v40;
          *(_DWORD *)(v38 + 560) = 0;
          if (v40)
            operator delete(v40);
          v41 = *(std::__shared_weak_count **)(v38 + 8);
          if (v41)
            std::__shared_weak_count::__release_weak(v41);
          MEMORY[0x212BC6398](v38, 0x10E2C4097628474);
        }
        v28[2] = (uint64_t)v37;
        if (!v30)
          goto LABEL_82;
      }
      v59 = (unint64_t *)(v30 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      goto LABEL_82;
    }
    v35 = operator new();
    v42 = v14;
    *(_BYTE *)(v35 + 40) = 0;
    *(_BYTE *)(v35 + 528) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_DWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 536) = 0;
    *(_QWORD *)(v35 + 552) = 0;
    *(_QWORD *)(v35 + 544) = 0;
    *(_DWORD *)(v35 + 560) = 0;
    v43 = v158;
    v44 = (std::__shared_weak_count *)operator new();
    v44->__shared_owners_ = 0;
    v45 = (unint64_t *)&v44->__shared_owners_;
    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05280;
    v44->__shared_weak_owners_ = 0;
    v44[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
    *(_QWORD *)&v161 = 0;
    v46 = *(std::__shared_weak_count **)(v35 + 8);
    v5 = a3;
    if (v46)
    {
      if (v46->__shared_owners_ != -1)
        goto LABEL_68;
      do
        v47 = __ldxr(v45);
      while (__stxr(v47 + 1, v45));
      v48 = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      *(_QWORD *)v35 = v35;
      *(_QWORD *)(v35 + 8) = v44;
      std::__shared_weak_count::__release_weak(v46);
    }
    else
    {
      do
        v50 = __ldxr(v45);
      while (__stxr(v50 + 1, v45));
      v51 = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      *(_QWORD *)v35 = v35;
      *(_QWORD *)(v35 + 8) = v44;
    }
    do
      v53 = __ldaxr(v45);
    while (__stlxr(v53 - 1, v45));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
LABEL_68:
    v54 = v161;
    if ((_QWORD)v161)
    {
      if (*(_BYTE *)(v161 + 528))
        *(_BYTE *)(v161 + 528) = 0;
      v55 = *(void **)(v54 + 536);
      *(_QWORD *)(v54 + 544) = v55;
      *(_DWORD *)(v54 + 560) = 0;
      if (v55)
        operator delete(v55);
      v56 = *(std::__shared_weak_count **)(v54 + 8);
      if (v56)
        std::__shared_weak_count::__release_weak(v56);
      MEMORY[0x212BC6398](v54, 0x10E2C4097628474);
    }
    v159 = v35;
    v160 = v44;
    *(_QWORD *)(v35 + 16) = a2 + 3;
    if (!v42)
      goto LABEL_104;
    goto LABEL_77;
  }
  v100 = (uint64_t)v16[6];
  v120 = (std::__shared_weak_count *)v16[7];
  if (v120)
  {
    v125 = (unint64_t *)&v120->__shared_owners_;
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v159 = v100;
  v160 = v120;
  v127 = a3[6];
  if (!*(_QWORD *)&v127)
    goto LABEL_236;
  v128 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
  v129 = (uint8x8_t)vcnt_s8(v127);
  v129.i16[0] = vaddlv_u8(v129);
  if (v129.u32[0] > 1uLL)
  {
    v130 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
    if (*(_QWORD *)&v127 <= v128)
      v130 = v128 % *(_QWORD *)&v127;
  }
  else
  {
    v130 = (v127.i32[0] - 1) & v128;
  }
  v136 = *(uint64_t ***)(*(_QWORD *)&a3[5] + 8 * v130);
  if (!v136 || (v137 = *v136) == 0)
  {
LABEL_236:
    if (*(_BYTE *)(v100 + 528))
      goto LABEL_161;
    v99 = *(_QWORD *)(a4 + 32);
    if (!v99)
      goto LABEL_161;
    goto LABEL_160;
  }
  if (v129.u32[0] < 2uLL)
  {
    v138 = *(_QWORD *)&v127 - 1;
    while (1)
    {
      v140 = v137[1];
      if (v140 == v128)
      {
        if (*((_DWORD *)v137 + 4) == (_DWORD)v128)
          goto LABEL_239;
      }
      else if ((v140 & v138) != v130)
      {
        goto LABEL_236;
      }
      v137 = (uint64_t *)*v137;
      if (!v137)
        goto LABEL_236;
    }
  }
  while (1)
  {
    v139 = v137[1];
    if (v139 == v128)
      break;
    if (v139 >= *(_QWORD *)&v127)
      v139 %= *(_QWORD *)&v127;
    if (v139 != v130)
      goto LABEL_236;
LABEL_226:
    v137 = (uint64_t *)*v137;
    if (!v137)
      goto LABEL_236;
  }
  if (*((_DWORD *)v137 + 4) != (_DWORD)v128)
    goto LABEL_226;
LABEL_239:
  v141 = *(_QWORD *)(v100 + 24);
  v142 = *(_DWORD *)(v100 + 32);
  v143 = v137[3];
  v144 = *(uint64_t **)(v143 + 24);
  v145 = *(_DWORD *)(v143 + 32);
  if ((uint64_t *)v141 == v144 && v142 == v145)
  {
    *a1 = v100;
    a1[1] = (uint64_t)v120;
    return;
  }
  v147 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_269;
  v148 = (uint64_t)(a2 + 1);
  v149 = (uint64_t)*v9;
  do
  {
    v150 = *(_QWORD *)(v149 + 32);
    if (v150 < v141)
    {
      v149 += 8;
    }
    else if (v150 == v141)
    {
      if (*(_DWORD *)(v149 + 40) < v142)
        v149 += 8;
      else
        v148 = v149;
    }
    else
    {
      v148 = v149;
    }
    v149 = *(_QWORD *)v149;
  }
  while (v149);
  if ((uint64_t **)v148 == v8)
    goto LABEL_269;
  v151 = *(_QWORD *)(v148 + 32);
  if (v141 < v151 || v141 == v151 && *(_DWORD *)(v148 + 40) > v142)
    goto LABEL_269;
  do
  {
    v152 = *(_QWORD *)(v147 + 32);
    if (v152 < (unint64_t)v144)
    {
      v147 += 8;
    }
    else if ((uint64_t *)v152 == v144)
    {
      if (*(_DWORD *)(v147 + 40) < v145)
        v147 += 8;
      else
        v9 = (uint64_t **)v147;
    }
    else
    {
      v9 = (uint64_t **)v147;
    }
    v147 = *(_QWORD *)v147;
  }
  while (v147);
  if (v9 == v8 || (v153 = v9[4], v144 < v153) || v144 == v153 && *((_DWORD *)v9 + 10) > v145)
  {
LABEL_269:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    sub_20FCECA40(a1, a2, v148, (uint64_t *)v9);
  }
LABEL_193:
  if (v120)
  {
LABEL_199:
    v123 = (unint64_t *)&v120->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_20FCEC488()
{
  __break(1u);
}

void sub_20FCEC554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va);
  sub_20F2E25B4((uint64_t *)va2);
  sub_20E86665C((uint64_t)va3);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FCEC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20F28AC44((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCEC5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t *sub_20FCEC5B8(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  int8x8_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  unint64_t v12;
  int8x8_t v13;
  int8x8_t **v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t **v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t v28;
  size_t v29;
  uint8x8_t v30;
  uint64_t v31;
  size_t v32;
  __int128 v34;

  v5 = (int8x8_t *)sub_20E9DF85C((_QWORD *)a1, a2);
  if (v5)
    return v5;
  v34 = *(_OWORD *)a2;
  v6 = a2[2];
  v7 = a2[1];
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v9 <= v8)
        v2 = v8 % v9;
    }
    else
    {
      v2 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v5 = (int8x8_t *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v5[1];
            if (*(_QWORD *)&v13 == v8)
            {
              if (v5[4].i32[0] == (_DWORD)v6 && *(_QWORD *)&v5[2] == (_QWORD)v34 && v5[3].i32[0] == v7)
                goto LABEL_67;
            }
            else if ((*(_QWORD *)&v13 & (v9 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v5 = (int8x8_t *)*v5;
            if (!v5)
              goto LABEL_28;
          }
        }
        do
        {
          v12 = (unint64_t)v5[1];
          if (v12 == v8)
          {
            if (v5[4].i32[0] == (_DWORD)v6 && *(_QWORD *)&v5[2] == (_QWORD)v34 && v5[3].i32[0] == v7)
              goto LABEL_67;
          }
          else
          {
            if (v12 >= v9)
              v12 %= v9;
            if (v12 != v2)
              break;
          }
          v5 = (int8x8_t *)*v5;
        }
        while (v5);
      }
    }
  }
LABEL_28:
  v5 = (int8x8_t *)operator new(0x50uLL);
  v14 = (int8x8_t **)(a1 + 16);
  *v5 = 0;
  v5[1] = (int8x8_t)v8;
  *(_OWORD *)v5[2].i8 = *(_OWORD *)a2;
  v5[4] = (int8x8_t)a2[2];
  v5[5] = 0;
  v5[7] = 0;
  v5[8] = 0;
  v5[6] = 0;
  v5[9].i32[0] = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v9)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v2 = v8 % v9;
      else
        v2 = v8;
      v24 = *(_QWORD *)a1;
      v25 = *(int8x8_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
        goto LABEL_54;
      goto LABEL_59;
    }
    v2 = ((_DWORD)v9 - 1) & v8;
  }
  v24 = *(_QWORD *)a1;
  v25 = *(int8x8_t ***)(*(_QWORD *)a1 + 8 * v2);
  if (v25)
  {
LABEL_54:
    *v5 = (int8x8_t)*v25;
LABEL_65:
    *v25 = v5;
    goto LABEL_66;
  }
LABEL_59:
  *v5 = (int8x8_t)*v14;
  *v14 = v5;
  *(_QWORD *)(v24 + 8 * v2) = v14;
  if (*v5)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (int8x8_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
LABEL_67:
  v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)v5[9].i32);
  if (v27 == 1)
  {
    v27 = 2;
  }
  else if ((v27 & (v27 - 1)) != 0)
  {
    v27 = std::__next_prime(v27);
  }
  v28 = v5[6];
  if (v27 > *(_QWORD *)&v28)
    goto LABEL_72;
  if (v27 >= *(_QWORD *)&v28)
    return v5;
  v29 = vcvtps_u32_f32((float)(unint64_t)v5[8] / *(float *)v5[9].i32);
  if (*(_QWORD *)&v28 >= 3uLL)
  {
    v30 = (uint8x8_t)vcnt_s8(v28);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] <= 1uLL)
    {
      v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2)
        v29 = v31;
      if (v27 <= v29)
        v27 = v29;
      if (v27 >= *(_QWORD *)&v28)
        return v5;
LABEL_72:
      sub_20E8D2B3C((uint64_t)&v5[5], v27);
      return v5;
    }
  }
  v32 = std::__next_prime(v29);
  if (v27 <= v32)
    v27 = v32;
  if (v27 < *(_QWORD *)&v28)
    goto LABEL_72;
  return v5;
}

void sub_20FCECA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EE6C9B0(v2 - 88);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCECA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCECA40(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t **v77;
  _QWORD *v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;

  v4 = a4;
  v8 = *(_QWORD *)(a3 + 48);
  v9 = *(uint64_t **)(v8 + 536);
  v10 = *(uint64_t **)(v8 + 544);
  v11 = a4[6];
  v12 = *(_QWORD *)(v11 + 536);
  v13 = *(_QWORD *)(v11 + 544);
  if (v9 == v10)
  {
    v14 = v13 - v12;
LABEL_21:
    if (v12 == v13)
      goto LABEL_87;
    v75 = v14;
    v76 = v9;
    v79 = a1;
    v77 = a2;
    v25 = a2 + 3;
    while (1)
    {
      v26 = *(_QWORD *)(a3 + 48);
      v27 = *(_QWORD *)(v26 + 536);
      v28 = *(_QWORD *)(v26 + 544);
      v29 = *(_QWORD *)v12;
      v30 = *(_DWORD *)(v12 + 8);
      v31 = *(_DWORD *)(v12 + 16);
      if (v28 != v27)
      {
        v32 = (v28 - v27) >> 6;
        while (1)
        {
          v33 = v32 >> 1;
          v34 = v27 + (v32 >> 1 << 6);
          v35 = *(_DWORD *)(v34 + 16);
          v36 = v35 >= v31;
          if (v35 != v31)
            goto LABEL_33;
          if (*(_QWORD *)v34 >= v29)
            break;
LABEL_27:
          v27 = v34 + 64;
          v33 = v32 + ~v33;
LABEL_28:
          v32 = v33;
          if (!v33)
            goto LABEL_36;
        }
        if (*(_QWORD *)v34 != v29)
          goto LABEL_28;
        v36 = *(_DWORD *)(v34 + 8) >= v30;
LABEL_33:
        if (v36)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_36:
      if (v27 == v28 || *(_DWORD *)(v27 + 16) != v31 || *(_QWORD *)v27 != v29 || *(_DWORD *)(v27 + 8) != v30)
        break;
      sub_20EE6BF60(v25, (uint64_t *)v12, *(_DWORD *)(v12 + 28));
LABEL_24:
      v12 += 64;
      if (v12 == v13)
      {
        v4 = a4;
        a1 = v79;
        v11 = a4[6];
        v9 = v76;
        a2 = v77;
        v14 = v75;
        goto LABEL_87;
      }
    }
    v37 = sub_20E9DF85C(v25, (uint64_t *)v12);
    v38 = (int8x8_t)v37[6];
    if (v38)
    {
      v39 = *(unsigned int *)(v12 + 28);
      v40 = (uint8x8_t)vcnt_s8(v38);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = *(unsigned int *)(v12 + 28);
        if (*(_QWORD *)&v38 <= v39)
          v41 = v39 % *(_QWORD *)&v38;
      }
      else
      {
        v41 = (v38.i32[0] - 1) & v39;
      }
      v42 = *(uint64_t ***)(v37[5] + 8 * v41);
      if (v42)
      {
        v43 = *v42;
        if (v43)
        {
          if (v40.u32[0] < 2uLL)
          {
            v44 = *(_QWORD *)&v38 - 1;
            while (1)
            {
              v46 = v43[1];
              if (v46 == v39)
              {
                if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                  goto LABEL_62;
              }
              else if ((v46 & v44) != v41)
              {
                goto LABEL_61;
              }
              v43 = (uint64_t *)*v43;
              if (!v43)
                goto LABEL_61;
            }
          }
          do
          {
            v45 = v43[1];
            if (v45 == v39)
            {
              if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                goto LABEL_62;
            }
            else
            {
              if (v45 >= *(_QWORD *)&v38)
                v45 %= *(_QWORD *)&v38;
              if (v45 != v41)
                break;
            }
            v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
      }
    }
LABEL_61:
    v47 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 890, (uint64_t)"fitT != kfit->second.end()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v43 = 0;
    if (v47)
      abort();
LABEL_62:
    v49 = *(_QWORD *)(a3 + 48);
    v48 = *(_QWORD *)(a3 + 56);
    if (v48)
    {
      v50 = (unint64_t *)(v48 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = (std::__shared_weak_count *)v43[4];
    v43[3] = v49;
    v43[4] = v48;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(_QWORD *)(a3 + 48);
    v80 = *(_OWORD *)v12;
    v81 = *(_QWORD *)(v12 + 16);
    v82 = *(_OWORD *)(v12 + 24);
    v83 = *(_OWORD *)(v12 + 40);
    v84 = *(_DWORD *)(v12 + 56);
    v56 = *(_QWORD *)(v55 + 536);
    v57 = *(_QWORD *)(v55 + 544);
    if (v57 == v56)
    {
LABEL_81:
      if (v56 == v57
        || *(_DWORD *)(v56 + 16) != *(_DWORD *)(v12 + 16)
        || *(_QWORD *)v56 != *(_QWORD *)v12
        || *(_DWORD *)(v56 + 8) != *(_DWORD *)(v12 + 8))
      {
        sub_20FCECF90((char **)(v55 + 536), (char *)v56, &v80);
      }
      goto LABEL_24;
    }
    v58 = (v57 - v56) >> 6;
    while (1)
    {
      v59 = v58 >> 1;
      v60 = v56 + (v58 >> 1 << 6);
      v61 = *(_DWORD *)(v60 + 16);
      v62 = v61 >= v81;
      if (v61 != (_DWORD)v81)
        goto LABEL_78;
      if (*(_QWORD *)v60 >= (unint64_t)v80)
        break;
LABEL_72:
      v56 = v60 + 64;
      v59 = v58 + ~v59;
LABEL_73:
      v58 = v59;
      if (!v59)
        goto LABEL_81;
    }
    if (*(_QWORD *)v60 != (_QWORD)v80)
      goto LABEL_73;
    v62 = *(_DWORD *)(v60 + 8) >= DWORD2(v80);
LABEL_78:
    if (v62)
      goto LABEL_73;
    goto LABEL_72;
  }
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = v9;
    while (1)
    {
      v16 = *v15;
      v17 = *((_DWORD *)v15 + 2);
      v18 = *(_QWORD *)(v11 + 536);
      v19 = v14 >> 6;
      v20 = *((_DWORD *)v15 + 4);
      do
      {
        v21 = v19 >> 1;
        v22 = v18 + (v19 >> 1 << 6);
        v23 = *(_DWORD *)(v22 + 16);
        v24 = v23 >= v20;
        if (v23 != v20)
          goto LABEL_12;
        if (*(_QWORD *)v22 < v16)
          goto LABEL_6;
        if (*(_QWORD *)v22 == v16)
        {
          v24 = *(_DWORD *)(v22 + 8) >= v17;
LABEL_12:
          if (!v24)
          {
LABEL_6:
            v18 = v22 + 64;
            v21 = v19 + ~v21;
          }
        }
        v19 = v21;
      }
      while (v21);
      if (v18 != v13 && *(_DWORD *)(v18 + 16) == v20 && *(_QWORD *)v18 == v16 && *(_DWORD *)(v18 + 8) == v17)
      {
        *a1 = 0;
        a1[1] = 0;
        return;
      }
      v15 += 8;
      if (v15 == v10)
        goto LABEL_21;
    }
  }
LABEL_87:
  if (*(_BYTE *)(v11 + 528))
  {
    v63 = *(_QWORD *)(a3 + 48);
    if (v14 > (unint64_t)((char *)v10 - (char *)v9) || !*(_BYTE *)(v63 + 528))
      sub_20F2E0670(v63, v11 + 40);
  }
  v64 = (uint64_t *)v4[1];
  if (v64)
  {
    do
    {
      v65 = v64;
      v64 = (uint64_t *)*v64;
    }
    while (v64);
  }
  else
  {
    v66 = v4;
    do
    {
      v65 = (uint64_t *)v66[2];
      v67 = *v65 == (_QWORD)v66;
      v66 = v65;
    }
    while (!v67);
  }
  if (*a2 == v4)
    *a2 = v65;
  v68 = a2[1];
  a2[2] = (uint64_t *)((char *)a2[2] - 1);
  sub_20E8D2134(v68, v4);
  v69 = (std::__shared_weak_count *)v4[7];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  operator delete(v4);
  v72 = *(_QWORD *)(a3 + 56);
  *a1 = *(_QWORD *)(a3 + 48);
  a1[1] = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
}

unint64_t sub_20FCECF90(char **a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *i;
  __int128 v45;
  char *v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 6;
  v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFC0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      v31 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v31;
      v32 = &v6[64 * v8];
      *((_QWORD *)v32 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)v32 + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)(v32 + 40) = *(__int128 *)((char *)a3 + 40);
      *((_DWORD *)v32 + 14) = *((_DWORD *)a3 + 14);
      a1[1] = (char *)(v9 + 64);
    }
    else
    {
      v50 = *((_QWORD *)a3 + 2);
      v11 = *(__int128 *)((char *)a3 + 24);
      v48 = *(__int128 *)((char *)a3 + 40);
      v49 = *a3;
      v12 = *((_DWORD *)a3 + 14);
      v13 = v9 + 64;
      v14 = v5 - 64;
      v15 = a1[1];
      if (v5 >= 0x40)
      {
        do
        {
          v16 = *(_OWORD *)v14;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v14 + 24);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)(v15 + 40) = *(_OWORD *)(v14 + 40);
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v14 + 56);
          v15 += 64;
          v14 += 64;
        }
        while (v14 < v5);
      }
      a1[1] = v15;
      if (v5 != v13)
      {
        v17 = 0;
        v18 = (uint64_t)(v5 - v13) >> 6 << 6;
        v19 = &v6[64 * v8 + v18];
        v20 = -v18;
        do
        {
          v21 = v5 + v17;
          v22 = *(_OWORD *)&v19[v17 - 64];
          *(_DWORD *)(v21 - 48) = *(_DWORD *)&v19[v17 - 48];
          *(_OWORD *)(v21 - 64) = v22;
          *(_QWORD *)(v21 - 40) = *(_QWORD *)&v19[v17 - 40];
          *(_QWORD *)(v21 - 32) = *(_QWORD *)&v19[v17 - 32];
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v17 - 24];
          *(_DWORD *)(v21 - 8) = *(_DWORD *)&v19[v17 - 8];
          v17 -= 64;
        }
        while (v20 != v17);
      }
      *(_OWORD *)v9 = v49;
      *(_DWORD *)(v9 + 16) = v50;
      v23 = &v6[64 * v8];
      *(_OWORD *)(v23 + 24) = v11;
      *(_OWORD *)(v23 + 40) = v48;
      *((_DWORD *)v23 + 14) = v12;
    }
    return v9;
  }
  v24 = ((uint64_t)(v5 - (_QWORD)v6) >> 6) + 1;
  if (v24 >> 58)
    sub_20E867F44();
  v26 = v10 - (_QWORD)v6;
  if (v26 >> 5 > v24)
    v24 = v26 >> 5;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
    v27 = 0x3FFFFFFFFFFFFFFLL;
  else
    v27 = v24;
  if (v27)
  {
    if (v27 >> 58)
      sub_20E877A38();
    v28 = (char *)operator new(v27 << 6);
    v29 = &v28[64 * v8];
    v30 = &v28[64 * v27];
    if (v8 != v27)
      goto LABEL_31;
    goto LABEL_21;
  }
  v28 = 0;
  v29 = (char *)(v8 << 6);
  v30 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v34 = 1;
      else
        v34 = v7 >> 5;
      if (v34 >> 58)
        sub_20E877A38();
      v35 = (char *)operator new(v34 << 6);
      v29 = &v35[64 * (v34 >> 2)];
      v30 = &v35[64 * v34];
      if (v28)
      {
        v36 = &v35[64 * v34];
        operator delete(v28);
        v30 = v36;
      }
    }
    else
    {
      v33 = v8 + 2;
      if (v8 >= -1)
        v33 = v8 + 1;
      v29 -= 64 * (v33 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v29 = *a3;
  v37 = *((_QWORD *)a3 + 3);
  *((_QWORD *)v29 + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)v29 + 3) = v37;
  *((_QWORD *)v29 + 4) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v29 + 40) = *(__int128 *)((char *)a3 + 40);
  *((_DWORD *)v29 + 14) = *((_DWORD *)a3 + 14);
  v38 = v29 + 64;
  v39 = *a1;
  v40 = v29;
  if (*a1 != (char *)v9)
  {
    v41 = 0;
    do
    {
      v42 = &v29[v41];
      v43 = *(_OWORD *)(v9 + v41 - 64);
      *((_QWORD *)v42 - 6) = *(_QWORD *)(v9 + v41 - 48);
      *((_OWORD *)v42 - 4) = v43;
      *((_QWORD *)v42 - 5) = *(_QWORD *)(v9 + v41 - 40);
      *((_QWORD *)v42 - 4) = *(_QWORD *)(v9 + v41 - 32);
      *(_OWORD *)(v42 - 24) = *(_OWORD *)(v9 + v41 - 24);
      *((_DWORD *)v42 - 2) = *(_DWORD *)(v9 + v41 - 8);
      v41 -= 64;
    }
    while ((char *)(v9 + v41) != v39);
    v40 = &v29[v41];
  }
  for (i = a1[1]; (char *)v9 != i; v9 += 64)
  {
    v45 = *(_OWORD *)v9;
    *((_QWORD *)v38 + 2) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v38 = v45;
    *((_QWORD *)v38 + 3) = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v38 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(v9 + 40);
    *((_DWORD *)v38 + 14) = *(_DWORD *)(v9 + 56);
    v38 += 64;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v30;
  if (v46)
    operator delete(v46);
  return (unint64_t)v29;
}

void sub_20FCED31C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FCED334(std::mutex *a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20FCED5C0(a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 528))
      *(_BYTE *)(a2 + 528) = 0;
    v4 = *(void **)(a2 + 536);
    *(_QWORD *)(a2 + 544) = v4;
    *(_DWORD *)(a2 + 560) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FCED3A8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05230;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FCED41C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05230;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FCED494(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20FCED5C0(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 528))
      *(_BYTE *)(v2 + 528) = 0;
    v5 = *(void **)(v2 + 536);
    *(_QWORD *)(v2 + 544) = v5;
    *(_DWORD *)(v2 + 560) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C4097628474);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FCED550(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdL"
                     "b1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializ"
                     "erIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_dele"
                     "teIS9_EEEESF_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3"
                                "DWithCovIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_2"
                                "3PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_1"
                                "0unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20FCED5C0(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_44;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_44;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_BYTE *)(v28 + 528))
              *(_BYTE *)(v28 + 528) = 0;
            v30 = *(void **)(v28 + 536);
            *(_QWORD *)(v28 + 544) = v30;
            *(_DWORD *)(v28 + 560) = 0;
            if (v30)
              operator delete(v30);
            v31 = *(std::__shared_weak_count **)(v28 + 8);
            if (v31)
              std::__shared_weak_count::__release_weak(v31);
            MEMORY[0x212BC6398](v28, 0x10E2C4097628474);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20FCED824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F2E25B4((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20FCED844(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCED868(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 528))
      *(_BYTE *)(v1 + 528) = 0;
    v2 = *(void **)(v1 + 536);
    *(_QWORD *)(v1 + 544) = v2;
    *(_DWORD *)(v1 + 560) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20FCED8D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb"
                     "1EEEE27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCo"
                                "vIdLb1EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FCED944(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v6;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a3 + 24);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v18 + 8 * v3) = v14;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_20FCEDC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCEDC80(uint64_t a1)
{
  size_t prime;
  unint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 1000;
  prime = std::__next_prime(0x3E8uLL);
  v3 = prime;
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_2;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (v3 <= v5)
      v3 = v5;
    if (v3 < *(_QWORD *)&v4)
LABEL_2:
      sub_20E8D2B3C(a1, v3);
  }
  return a1;
}

void sub_20FCEDD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E90DC(v1);
  _Unwind_Resume(a1);
}

void sub_20FCEDD68(uint64_t *a1, uint64_t **a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v4;
  int8x8_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v60;
  unint64_t v61;
  unint64_t *p_shared_weak_owners;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t **v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  _OWORD *v92;
  uint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  __int16 *v98;
  __int128 v99;
  __int128 v100;
  __int16 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int16 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  int8x8_t v138;
  unint64_t v139;
  uint8x8_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t **v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t *v162;
  unsigned int v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  std::runtime_error *exception;
  int v173;
  unint64_t *v174;
  uint64_t **v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  __int16 v179;
  __int16 v180;
  char v181;
  char v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int16 v187;
  __int16 v188;
  char v189;
  char v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  _BYTE v200[24];
  __int128 v201;
  int v202;
  uint64_t v203;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v203 = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 1;
  v176 = a2 + 1;
  v9 = *(uint64_t **)(a4 + 8);
  v174 = (unint64_t *)(a4 + 8);
  v10 = *(_DWORD *)(a4 + 16);
  v11 = v9 == (uint64_t *)-1 && v10 == -1;
  v12 = !v11;
  if (v11)
    goto LABEL_20;
  v13 = (uint64_t)*v8;
  if (!*v8)
    goto LABEL_20;
  v14 = a2 + 1;
  do
  {
    v15 = *(_QWORD *)(v13 + 32);
    if (v15 < (unint64_t)v9)
    {
      v13 += 8;
    }
    else if ((uint64_t *)v15 == v9)
    {
      if (*(_DWORD *)(v13 + 40) < v10)
        v13 += 8;
      else
        v14 = (uint64_t **)v13;
    }
    else
    {
      v14 = (uint64_t **)v13;
    }
    v13 = *(_QWORD *)v13;
  }
  while (v13);
  if (v14 == v176 || (v16 = v14[4], v9 < v16) || v9 == v16 && v10 < *((_DWORD *)v14 + 10))
  {
LABEL_20:
    v17 = a3[6];
    if (v17)
    {
      v18 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
      v19 = (uint8x8_t)vcnt_s8(v17);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        v20 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
        if (*(_QWORD *)&v17 <= v18)
          v20 = v18 % *(_QWORD *)&v17;
      }
      else
      {
        v20 = (v17.i32[0] - 1) & v18;
      }
      v21 = *(uint64_t ***)(*(_QWORD *)&a3[5] + 8 * v20);
      if (v21)
      {
        v22 = *v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            v23 = *(_QWORD *)&v17 - 1;
            while (1)
            {
              v25 = v22[1];
              if (v25 == v18)
              {
                if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
                  goto LABEL_213;
              }
              else if ((v25 & v23) != v20)
              {
                goto LABEL_40;
              }
              v22 = (uint64_t *)*v22;
              if (!v22)
                goto LABEL_40;
            }
          }
          do
          {
            v24 = v22[1];
            if (v24 == v18)
            {
              if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
              {
LABEL_213:
                v142 = v22[3];
                v143 = v22[4];
                if (v143)
                {
                  v144 = (unint64_t *)(v143 + 8);
                  do
                    v145 = __ldxr(v144);
                  while (__stxr(v145 + 1, v144));
                }
                if (!*(_BYTE *)(v142 + 192))
                {
                  v146 = *(_QWORD *)(a4 + 32);
                  if (v146)
                  {
                    v192 = *(_OWORD *)(v146 + 32);
                    v194 = *(_QWORD *)(v146 + 48);
                    v188 = *(_WORD *)(v146 + 56);
                    v190 = *(_BYTE *)(v146 + 58);
                    v196 = *(_OWORD *)(v146 + 64);
                    v198 = *(_QWORD *)(v146 + 80);
                    v186 = *(_QWORD *)(v146 + 104);
                    v184 = *(_OWORD *)(v146 + 88);
                    v147 = *(_OWORD *)(v146 + 112);
                    v148 = *(_OWORD *)(v146 + 128);
                    *(_DWORD *)&v200[16] = *(_DWORD *)(v146 + 144);
                    v199 = v147;
                    *(_OWORD *)v200 = v148;
                    v182 = *(_BYTE *)(v146 + 150);
                    v180 = *(_WORD *)(v146 + 148);
                    v149 = *(_OWORD *)(v146 + 8);
                    *(_QWORD *)(v142 + 64) = *(_QWORD *)(v146 + 24);
                    *(_OWORD *)(v142 + 48) = v149;
                    *(_OWORD *)(v142 + 72) = v192;
                    *(_QWORD *)(v142 + 88) = v194;
                    *(_WORD *)(v142 + 96) = v188;
                    *(_BYTE *)(v142 + 98) = v190;
                    *(_OWORD *)(v142 + 104) = v196;
                    *(_QWORD *)(v142 + 120) = v198;
                    *(_QWORD *)(v142 + 144) = v186;
                    *(_OWORD *)(v142 + 128) = v184;
                    *(_QWORD *)(v142 + 40) = &off_24C9FC600;
                    v150 = v199;
                    v151 = *(_OWORD *)v200;
                    *(_DWORD *)(v142 + 184) = *(_DWORD *)&v200[16];
                    *(_OWORD *)(v142 + 168) = v151;
                    *(_OWORD *)(v142 + 152) = v150;
                    *(_BYTE *)(v142 + 190) = v182;
                    *(_WORD *)(v142 + 188) = v180;
                    *(_BYTE *)(v142 + 192) = 1;
                  }
                }
                *a1 = v142;
                a1[1] = v143;
                return;
              }
            }
            else
            {
              if (v24 >= *(_QWORD *)&v17)
                v24 %= *(_QWORD *)&v17;
              if (v24 != v20)
                break;
            }
            v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
      }
    }
LABEL_40:
    v26 = a2[9];
    if (v26)
    {
      v173 = v12;
      v27 = v26[6];
      v28 = v26[7];
      *(_QWORD *)&v199 = v27;
      *((_QWORD *)&v199 + 1) = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v26[2];
      if (v26[1] == v31)
      {
        v56 = v26[4];
        if (v56 >= v26[5])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v26[4] = v56 + 1;
        v35 = operator new();
        *(_BYTE *)(v35 + 40) = 0;
        *(_BYTE *)(v35 + 192) = 0;
        *(_OWORD *)v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_DWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 208) = 0;
        *(_QWORD *)(v35 + 216) = 0;
        *(_QWORD *)(v35 + 200) = 0;
        *(_DWORD *)(v35 + 224) = 0;
        if (!v28)
        {
LABEL_82:
          v42 = (std::__shared_weak_count *)operator new();
          v42->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA052D0;
          v42->__shared_weak_owners_ = 0;
          v42[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
          v42[1].__shared_owners_ = v27;
          v42[1].__shared_weak_owners_ = v28;
          if (v35)
          {
            v60 = *(std::__shared_weak_count **)(v35 + 8);
            if (v60)
            {
              if (v60->__shared_owners_ != -1)
                goto LABEL_96;
              do
                v61 = __ldxr(p_shared_owners);
              while (__stxr(v61 + 1, p_shared_owners));
              p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
              do
                v63 = __ldxr(p_shared_weak_owners);
              while (__stxr(v63 + 1, p_shared_weak_owners));
              *(_QWORD *)v35 = v35;
              *(_QWORD *)(v35 + 8) = v42;
              std::__shared_weak_count::__release_weak(v60);
            }
            else
            {
              do
                v64 = __ldxr(p_shared_owners);
              while (__stxr(v64 + 1, p_shared_owners));
              v65 = (unint64_t *)&v42->__shared_weak_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
              *(_QWORD *)v35 = v35;
              *(_QWORD *)(v35 + 8) = v42;
            }
            do
              v67 = __ldaxr(p_shared_owners);
            while (__stlxr(v67 - 1, p_shared_owners));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
LABEL_96:
          if (*((_QWORD *)&v199 + 1))
          {
            v68 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v199 + 1) + 16))(*((_QWORD *)&v199 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v199 + 1));
            }
          }
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = 0;
          *(_DWORD *)(v35 + 32) = 0;
          if (*(_BYTE *)(v35 + 192))
            *(_BYTE *)(v35 + 192) = 0;
          *(_QWORD *)(v35 + 208) = *(_QWORD *)(v35 + 200);
          *(_DWORD *)(v35 + 224) = 0;
          v177 = v35;
          v178 = v42;
          *(_QWORD *)(v35 + 16) = v6 + 3;
          if (!v173)
          {
LABEL_104:
            v70 = (uint64_t)v6[1];
            v71 = v6[2];
            if (v71)
            {
              if (v70)
              {
                v72 = v6[1];
                do
                {
                  v73 = v72;
                  v72 = (uint64_t *)v72[1];
                }
                while (v72);
              }
              else
              {
                v74 = v8;
                do
                {
                  v73 = v74[2];
                  v11 = *v73 == (_QWORD)v74;
                  v74 = (uint64_t **)v73;
                }
                while (v11);
              }
              v75 = *((unsigned int *)v73 + 10);
              if ((unint64_t)v71 >= v75)
                LODWORD(v71) = v75;
              else
                LODWORD(v71) = 0;
            }
            v55 = (unint64_t)v5[2];
            v76 = v71;
            if (v70)
            {
              do
              {
                v77 = (uint64_t)v8;
                do
                {
                  v78 = *(_QWORD *)(v70 + 32);
                  if (v78 < v55)
                  {
                    v70 += 8;
                  }
                  else if (v78 == v55)
                  {
                    if (*(_DWORD *)(v70 + 40) < v76)
                      v70 += 8;
                    else
                      v77 = v70;
                  }
                  else
                  {
                    v77 = v70;
                  }
                  v70 = *(_QWORD *)v70;
                }
                while (v70);
                if ((uint64_t **)v77 == v176)
                  break;
                v79 = *(_QWORD *)(v77 + 32);
                if (v79 > v55 || v79 == v55 && *(_DWORD *)(v77 + 40) > v76)
                  break;
                v80 = *(_QWORD *)(v77 + 48);
                v81 = *(std::__shared_weak_count **)(v77 + 56);
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                  do
                    v84 = __ldaxr(v82);
                  while (__stlxr(v84 - 1, v82));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                if (!v80)
                  break;
                ++v76;
                v70 = (uint64_t)*v8;
              }
              while (*v8);
            }
            *(_QWORD *)(v35 + 24) = v55;
            *(_DWORD *)(v35 + 32) = v76;
LABEL_137:
            v85 = *(_QWORD *)(v35 + 32);
            *(_QWORD *)&v199 = v55;
            *((_QWORD *)&v199 + 1) = v85;
            *(_QWORD *)v200 = v35;
            *(_QWORD *)&v200[8] = v42;
            v86 = (unint64_t *)&v42->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
            v88 = (uint64_t)*v8;
            v89 = (uint64_t)v8;
            if (!*v8)
            {
LABEL_150:
              v92 = operator new(0x40uLL);
              v92[2] = v199;
              *((_QWORD *)v92 + 6) = v35;
              *((_QWORD *)v92 + 7) = v42;
              *(_QWORD *)v200 = 0;
              *(_QWORD *)&v200[8] = 0;
              *(_QWORD *)v92 = 0;
              *((_QWORD *)v92 + 1) = 0;
              *((_QWORD *)v92 + 2) = v89;
              *v8 = (uint64_t *)v92;
              v93 = (uint64_t *)**a2;
              if (v93)
              {
                *a2 = v93;
                v92 = *v8;
              }
              sub_20E868578(a2[1], (uint64_t *)v92);
              a2[2] = (uint64_t *)((char *)a2[2] + 1);
              v42 = *(std::__shared_weak_count **)&v200[8];
              if (*(_QWORD *)&v200[8])
              {
LABEL_153:
                v94 = (unint64_t *)&v42->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              v96 = *(_QWORD *)(v4 + 32);
              v97 = (uint64_t *)v177;
              if (v96)
              {
                v98 = (__int16 *)(v96 + 148);
                if (*(_BYTE *)(v177 + 192))
                {
                  v99 = *(_OWORD *)(v96 + 8);
                  *(_QWORD *)(v177 + 64) = *(_QWORD *)(v96 + 24);
                  *(_OWORD *)(v177 + 48) = v99;
                  v100 = *(_OWORD *)(v96 + 32);
                  *(_DWORD *)(v177 + 88) = *(_DWORD *)(v96 + 48);
                  *(_OWORD *)(v177 + 72) = v100;
                  v101 = *(_WORD *)(v96 + 56);
                  *(_BYTE *)(v177 + 98) = *(_BYTE *)(v96 + 58);
                  *(_WORD *)(v177 + 96) = v101;
                  v102 = *(_OWORD *)(v96 + 64);
                  *(_QWORD *)(v177 + 120) = *(_QWORD *)(v96 + 80);
                  *(_OWORD *)(v177 + 104) = v102;
                  v103 = *(_OWORD *)(v96 + 88);
                  *(_QWORD *)(v177 + 144) = *(_QWORD *)(v96 + 104);
                  *(_OWORD *)(v177 + 128) = v103;
                  v104 = *(_OWORD *)(v96 + 112);
                  v105 = *(_OWORD *)(v96 + 128);
                  *(_DWORD *)(v177 + 184) = *(_DWORD *)(v96 + 144);
                  *(_OWORD *)(v177 + 168) = v105;
                  *(_OWORD *)(v177 + 152) = v104;
                  v106 = *v98;
                  *(_BYTE *)(v177 + 190) = *((_BYTE *)v98 + 2);
                  *(_WORD *)(v177 + 188) = v106;
                  goto LABEL_162;
                }
                v191 = *(_OWORD *)(v96 + 32);
                v193 = *(_QWORD *)(v96 + 48);
                v187 = *(_WORD *)(v96 + 56);
                v189 = *(_BYTE *)(v96 + 58);
                v195 = *(_OWORD *)(v96 + 64);
                v197 = *(_QWORD *)(v96 + 80);
                v185 = *(_QWORD *)(v96 + 104);
                v183 = *(_OWORD *)(v96 + 88);
                v107 = *(_OWORD *)(v96 + 112);
                v108 = *(_OWORD *)(v96 + 128);
                *(_DWORD *)&v200[16] = *(_DWORD *)(v96 + 144);
                v199 = v107;
                *(_OWORD *)v200 = v108;
                v181 = *(_BYTE *)(v96 + 150);
                v179 = *v98;
                goto LABEL_161;
              }
LABEL_162:
              v112 = *(_QWORD *)(v4 + 24);
              v199 = *(_OWORD *)v5[2].i8;
              *(int8x8_t *)v200 = v5[4];
              *(_OWORD *)&v200[8] = *(_OWORD *)v112;
              v201 = *(_OWORD *)(v112 + 16);
              v202 = *(_DWORD *)(v112 + 32);
              v113 = v97[25];
              v114 = v97[26];
              if (v114 != v113)
              {
                v115 = (v114 - v113) >> 6;
                while (1)
                {
                  v116 = v115 >> 1;
                  v117 = v113 + (v115 >> 1 << 6);
                  v118 = *(_DWORD *)(v117 + 16);
                  v119 = v118 >= *(_DWORD *)v200;
                  if (v118 != *(_DWORD *)v200)
                    goto LABEL_170;
                  if (*(_QWORD *)v117 >= (unint64_t)v199)
                    break;
LABEL_164:
                  v113 = v117 + 64;
                  v116 = v115 + ~v116;
LABEL_165:
                  v115 = v116;
                  if (!v116)
                    goto LABEL_173;
                }
                if (*(_QWORD *)v117 != (_QWORD)v199)
                  goto LABEL_165;
                v119 = *(_DWORD *)(v117 + 8) >= DWORD2(v199);
LABEL_170:
                if (v119)
                  goto LABEL_165;
                goto LABEL_164;
              }
LABEL_173:
              if ((v113 == v114
                 || *(_DWORD *)(v113 + 16) != v5[4].i32[0]
                 || *(_QWORD *)v113 != *(_QWORD *)&v5[2]
                 || *(_DWORD *)(v113 + 8) != v5[3].i32[0])
                && v97[26] != sub_20FCEFA44((char **)v97 + 25, (char *)v113, &v199))
              {
                v120 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4);
                v121 = v120;
                if (v178)
                {
                  v122 = (unint64_t *)&v178->__shared_owners_;
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                  v121 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4);
                  do
                    v124 = __ldxr(v122);
                  while (__stxr(v124 + 1, v122));
                }
                LODWORD(v199) = v120;
                *((_QWORD *)&v199 + 1) = v97;
                *(_QWORD *)v200 = v178;
                *(_DWORD *)&v200[8] = v121;
                v125 = sub_20FCF03F8((uint64_t)&v5[5], v120, (uint64_t)&v199);
                v126 = *(std::__shared_weak_count **)v200;
                if (*(_QWORD *)v200)
                {
                  v127 = (unint64_t *)(*(_QWORD *)v200 + 8);
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                if (!v178)
                  goto LABEL_192;
                v129 = (unint64_t *)&v178->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                  if ((v125 & 1) == 0)
                    goto LABEL_193;
                }
                else
                {
LABEL_192:
                  if ((v125 & 1) == 0)
                    goto LABEL_193;
                }
                v131 = v178;
                *v7 = v177;
                v7[1] = (uint64_t)v178;
                if (!v178)
                  return;
                v132 = (unint64_t *)&v178->__shared_owners_;
                do
                  v133 = __ldxr(v132);
                while (__stxr(v133 + 1, v132));
                goto LABEL_200;
              }
LABEL_193:
              *v7 = 0;
              v7[1] = 0;
              v131 = v178;
              goto LABEL_194;
            }
            while (1)
            {
              v89 = v88;
              v90 = *(_QWORD *)(v88 + 32);
              if (v55 < v90)
                goto LABEL_141;
              if (v55 != v90)
              {
                if (v90 >= v55)
                  goto LABEL_153;
                goto LABEL_148;
              }
              v91 = *(_DWORD *)(v89 + 40);
              if (v91 > v85)
              {
LABEL_141:
                v88 = *(_QWORD *)v89;
                v8 = (uint64_t **)v89;
                if (!*(_QWORD *)v89)
                  goto LABEL_150;
              }
              else
              {
                if (v91 >= v85)
                  goto LABEL_153;
LABEL_148:
                v88 = *(_QWORD *)(v89 + 8);
                if (!v88)
                {
                  v8 = (uint64_t **)(v89 + 8);
                  goto LABEL_150;
                }
              }
            }
          }
LABEL_77:
          v55 = *v174;
          *(_DWORD *)(v35 + 32) = *((_DWORD *)v174 + 2);
          *(_QWORD *)(v35 + 24) = v55;
          goto LABEL_137;
        }
      }
      else
      {
        v35 = *(_QWORD *)(v31 - 8);
        *(_QWORD *)(v31 - 8) = 0;
        v36 = v26[2];
        v39 = *(_QWORD *)(v36 - 8);
        v38 = (_QWORD *)(v36 - 8);
        v37 = v39;
        *v38 = 0;
        if (v39)
        {
          if (*(_BYTE *)(v37 + 192))
            *(_BYTE *)(v37 + 192) = 0;
          v40 = *(void **)(v37 + 200);
          *(_QWORD *)(v37 + 208) = v40;
          *(_DWORD *)(v37 + 224) = 0;
          if (v40)
            operator delete(v40);
          v41 = *(std::__shared_weak_count **)(v37 + 8);
          if (v41)
            std::__shared_weak_count::__release_weak(v41);
          MEMORY[0x212BC6398](v37, 0x10E2C405C03E5D2);
        }
        v26[2] = (uint64_t)v38;
        v7 = a1;
        v4 = a4;
        v5 = a3;
        v6 = a2;
        if (!v28)
          goto LABEL_82;
      }
      v57 = (unint64_t *)(v28 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      goto LABEL_82;
    }
    v35 = operator new();
    *(_BYTE *)(v35 + 40) = 0;
    *(_BYTE *)(v35 + 192) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_DWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 208) = 0;
    *(_QWORD *)(v35 + 216) = 0;
    *(_QWORD *)(v35 + 200) = 0;
    *(_DWORD *)(v35 + 224) = 0;
    v42 = (std::__shared_weak_count *)operator new();
    v42->__shared_owners_ = 0;
    v43 = (unint64_t *)&v42->__shared_owners_;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05320;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
    *(_QWORD *)&v199 = 0;
    v44 = *(std::__shared_weak_count **)(v35 + 8);
    if (v44)
    {
      if (v44->__shared_owners_ != -1)
        goto LABEL_68;
      do
        v45 = __ldxr(v43);
      while (__stxr(v45 + 1, v43));
      v46 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      *(_QWORD *)v35 = v35;
      *(_QWORD *)(v35 + 8) = v42;
      std::__shared_weak_count::__release_weak(v44);
    }
    else
    {
      do
        v48 = __ldxr(v43);
      while (__stxr(v48 + 1, v43));
      v49 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      *(_QWORD *)v35 = v35;
      *(_QWORD *)(v35 + 8) = v42;
    }
    do
      v51 = __ldaxr(v43);
    while (__stlxr(v51 - 1, v43));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
LABEL_68:
    v52 = v199;
    if ((_QWORD)v199)
    {
      if (*(_BYTE *)(v199 + 192))
        *(_BYTE *)(v199 + 192) = 0;
      v53 = *(void **)(v52 + 200);
      *(_QWORD *)(v52 + 208) = v53;
      *(_DWORD *)(v52 + 224) = 0;
      if (v53)
        operator delete(v53);
      v54 = *(std::__shared_weak_count **)(v52 + 8);
      if (v54)
        std::__shared_weak_count::__release_weak(v54);
      MEMORY[0x212BC6398](v52, 0x10E2C405C03E5D2);
    }
    v177 = v35;
    v178 = v42;
    *(_QWORD *)(v35 + 16) = v6 + 3;
    if (!v12)
      goto LABEL_104;
    goto LABEL_77;
  }
  v97 = v14[6];
  v131 = (std::__shared_weak_count *)v14[7];
  if (v131)
  {
    v136 = (unint64_t *)&v131->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  v177 = (uint64_t)v97;
  v178 = v131;
  v138 = a3[6];
  if (!*(_QWORD *)&v138)
    goto LABEL_237;
  v139 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
  v140 = (uint8x8_t)vcnt_s8(v138);
  v140.i16[0] = vaddlv_u8(v140);
  if (v140.u32[0] > 1uLL)
  {
    v141 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4);
    if (*(_QWORD *)&v138 <= v139)
      v141 = v139 % *(_QWORD *)&v138;
  }
  else
  {
    v141 = (v138.i32[0] - 1) & v139;
  }
  v152 = *(uint64_t ***)(*(_QWORD *)&a3[5] + 8 * v141);
  if (!v152 || (v153 = *v152) == 0)
  {
LABEL_237:
    if (!*((_BYTE *)v97 + 192))
    {
      v96 = *(_QWORD *)(a4 + 32);
      if (v96)
      {
        v191 = *(_OWORD *)(v96 + 32);
        v193 = *(_QWORD *)(v96 + 48);
        v187 = *(_WORD *)(v96 + 56);
        v189 = *(_BYTE *)(v96 + 58);
        v195 = *(_OWORD *)(v96 + 64);
        v197 = *(_QWORD *)(v96 + 80);
        v185 = *(_QWORD *)(v96 + 104);
        v183 = *(_OWORD *)(v96 + 88);
        v157 = *(_OWORD *)(v96 + 112);
        v158 = *(_OWORD *)(v96 + 128);
        *(_DWORD *)&v200[16] = *(_DWORD *)(v96 + 144);
        v199 = v157;
        *(_OWORD *)v200 = v158;
        v181 = *(_BYTE *)(v96 + 150);
        v179 = *(_WORD *)(v96 + 148);
LABEL_161:
        v109 = *(_OWORD *)(v96 + 8);
        v97[8] = *(_QWORD *)(v96 + 24);
        *((_OWORD *)v97 + 3) = v109;
        *(_OWORD *)(v97 + 9) = v191;
        v97[11] = v193;
        *((_WORD *)v97 + 48) = v187;
        *((_BYTE *)v97 + 98) = v189;
        *(_OWORD *)(v97 + 13) = v195;
        v97[15] = v197;
        v97[18] = v185;
        *((_OWORD *)v97 + 8) = v183;
        v97[5] = (uint64_t)&off_24C9FC600;
        v110 = v199;
        v111 = *(_OWORD *)v200;
        *((_DWORD *)v97 + 46) = *(_DWORD *)&v200[16];
        *(_OWORD *)(v97 + 21) = v111;
        *(_OWORD *)(v97 + 19) = v110;
        *((_BYTE *)v97 + 190) = v181;
        *((_WORD *)v97 + 94) = v179;
        *((_BYTE *)v97 + 192) = 1;
        goto LABEL_162;
      }
    }
    goto LABEL_162;
  }
  if (v140.u32[0] < 2uLL)
  {
    v154 = *(_QWORD *)&v138 - 1;
    while (1)
    {
      v156 = v153[1];
      if (v156 == v139)
      {
        if (*((_DWORD *)v153 + 4) == (_DWORD)v139)
          goto LABEL_240;
      }
      else if ((v156 & v154) != v141)
      {
        goto LABEL_237;
      }
      v153 = (uint64_t *)*v153;
      if (!v153)
        goto LABEL_237;
    }
  }
  while (1)
  {
    v155 = v153[1];
    if (v155 == v139)
      break;
    if (v155 >= *(_QWORD *)&v138)
      v155 %= *(_QWORD *)&v138;
    if (v155 != v141)
      goto LABEL_237;
LABEL_227:
    v153 = (uint64_t *)*v153;
    if (!v153)
      goto LABEL_237;
  }
  if (*((_DWORD *)v153 + 4) != (_DWORD)v139)
    goto LABEL_227;
LABEL_240:
  v159 = v97[3];
  v160 = *((_DWORD *)v97 + 8);
  v161 = v153[3];
  v162 = *(uint64_t **)(v161 + 24);
  v163 = *(_DWORD *)(v161 + 32);
  if ((uint64_t *)v159 == v162 && v160 == v163)
  {
    *a1 = (uint64_t)v97;
    a1[1] = (uint64_t)v131;
    return;
  }
  v165 = (uint64_t)*v8;
  if (!*v8)
    goto LABEL_270;
  v166 = (uint64_t)(a2 + 1);
  v167 = (uint64_t)*v8;
  do
  {
    v168 = *(_QWORD *)(v167 + 32);
    if (v168 < v159)
    {
      v167 += 8;
    }
    else if (v168 == v159)
    {
      if (*(_DWORD *)(v167 + 40) < v160)
        v167 += 8;
      else
        v166 = v167;
    }
    else
    {
      v166 = v167;
    }
    v167 = *(_QWORD *)v167;
  }
  while (v167);
  if ((uint64_t **)v166 == v176)
    goto LABEL_270;
  v169 = *(_QWORD *)(v166 + 32);
  if (v159 < v169 || v159 == v169 && *(_DWORD *)(v166 + 40) > v160)
    goto LABEL_270;
  do
  {
    v170 = *(_QWORD *)(v165 + 32);
    if (v170 < (unint64_t)v162)
    {
      v165 += 8;
    }
    else if ((uint64_t *)v170 == v162)
    {
      if (*(_DWORD *)(v165 + 40) < v163)
        v165 += 8;
      else
        v8 = (uint64_t **)v165;
    }
    else
    {
      v8 = (uint64_t **)v165;
    }
    v165 = *(_QWORD *)v165;
  }
  while (v165);
  if (v8 == v176 || (v171 = v8[4], v162 < v171) || v162 == v171 && *((_DWORD *)v8 + 10) > v163)
  {
LABEL_270:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    sub_20FCEF378(a1, a2, v166, (uint64_t *)v8);
  }
LABEL_194:
  if (v131)
  {
LABEL_200:
    v134 = (unint64_t *)&v131->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
}

void sub_20FCEEE20()
{
  __break(1u);
}

void sub_20FCEEE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&a27);
  sub_20F28B680(&a23);
  JUMPOUT(0x20FCEEEB0);
}

void sub_20FCEEEBC(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20FCEEEE8);
}

void sub_20FCEEECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20F28AC44((uint64_t)&a31);
  JUMPOUT(0x20FCEEEE0);
}

int8x8_t *sub_20FCEEEF0(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  int8x8_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  unint64_t v12;
  int8x8_t v13;
  int8x8_t **v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t **v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t v28;
  size_t v29;
  uint8x8_t v30;
  uint64_t v31;
  size_t v32;
  __int128 v34;

  v5 = (int8x8_t *)sub_20E9DF85C((_QWORD *)a1, a2);
  if (v5)
    return v5;
  v34 = *(_OWORD *)a2;
  v6 = a2[2];
  v7 = a2[1];
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v9 <= v8)
        v2 = v8 % v9;
    }
    else
    {
      v2 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v5 = (int8x8_t *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v5[1];
            if (*(_QWORD *)&v13 == v8)
            {
              if (v5[4].i32[0] == (_DWORD)v6 && *(_QWORD *)&v5[2] == (_QWORD)v34 && v5[3].i32[0] == v7)
                goto LABEL_67;
            }
            else if ((*(_QWORD *)&v13 & (v9 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v5 = (int8x8_t *)*v5;
            if (!v5)
              goto LABEL_28;
          }
        }
        do
        {
          v12 = (unint64_t)v5[1];
          if (v12 == v8)
          {
            if (v5[4].i32[0] == (_DWORD)v6 && *(_QWORD *)&v5[2] == (_QWORD)v34 && v5[3].i32[0] == v7)
              goto LABEL_67;
          }
          else
          {
            if (v12 >= v9)
              v12 %= v9;
            if (v12 != v2)
              break;
          }
          v5 = (int8x8_t *)*v5;
        }
        while (v5);
      }
    }
  }
LABEL_28:
  v5 = (int8x8_t *)operator new(0x50uLL);
  v14 = (int8x8_t **)(a1 + 16);
  *v5 = 0;
  v5[1] = (int8x8_t)v8;
  *(_OWORD *)v5[2].i8 = *(_OWORD *)a2;
  v5[4] = (int8x8_t)a2[2];
  v5[5] = 0;
  v5[7] = 0;
  v5[8] = 0;
  v5[6] = 0;
  v5[9].i32[0] = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v9)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v2 = v8 % v9;
      else
        v2 = v8;
      v24 = *(_QWORD *)a1;
      v25 = *(int8x8_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
        goto LABEL_54;
      goto LABEL_59;
    }
    v2 = ((_DWORD)v9 - 1) & v8;
  }
  v24 = *(_QWORD *)a1;
  v25 = *(int8x8_t ***)(*(_QWORD *)a1 + 8 * v2);
  if (v25)
  {
LABEL_54:
    *v5 = (int8x8_t)*v25;
LABEL_65:
    *v25 = v5;
    goto LABEL_66;
  }
LABEL_59:
  *v5 = (int8x8_t)*v14;
  *v14 = v5;
  *(_QWORD *)(v24 + 8 * v2) = v14;
  if (*v5)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (int8x8_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
LABEL_67:
  v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)v5[9].i32);
  if (v27 == 1)
  {
    v27 = 2;
  }
  else if ((v27 & (v27 - 1)) != 0)
  {
    v27 = std::__next_prime(v27);
  }
  v28 = v5[6];
  if (v27 > *(_QWORD *)&v28)
    goto LABEL_72;
  if (v27 >= *(_QWORD *)&v28)
    return v5;
  v29 = vcvtps_u32_f32((float)(unint64_t)v5[8] / *(float *)v5[9].i32);
  if (*(_QWORD *)&v28 >= 3uLL)
  {
    v30 = (uint8x8_t)vcnt_s8(v28);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] <= 1uLL)
    {
      v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2)
        v29 = v31;
      if (v27 <= v29)
        v27 = v29;
      if (v27 >= *(_QWORD *)&v28)
        return v5;
LABEL_72:
      sub_20E8D2B3C((uint64_t)&v5[5], v27);
      return v5;
    }
  }
  v32 = std::__next_prime(v29);
  if (v27 <= v32)
    v27 = v32;
  if (v27 < *(_QWORD *)&v28)
    goto LABEL_72;
  return v5;
}

void sub_20FCEF338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EE6C9B0(v2 - 88);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCEF35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCEF378(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  char **v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int16 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int16 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  BOOL v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t **v90;
  _QWORD *v91;
  __int16 v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  __int16 v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  _BYTE v103[24];
  __int128 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 48);
  v8 = *(uint64_t **)(v7 + 200);
  v9 = *(uint64_t **)(v7 + 208);
  v10 = a4[6];
  v12 = *(_QWORD *)(v10 + 200);
  v11 = *(_QWORD *)(v10 + 208);
  if (v8 == v9)
  {
    v13 = v11 - v12;
LABEL_21:
    if (v12 == v11)
      goto LABEL_87;
    v88 = v13;
    v89 = v8;
    v91 = a1;
    v90 = a2;
    v24 = a2 + 3;
    while (1)
    {
      v25 = *(_QWORD *)(a3 + 48);
      v26 = *(_QWORD *)(v25 + 200);
      v27 = *(_QWORD *)(v25 + 208);
      v28 = *(_QWORD *)v12;
      v29 = *(_DWORD *)(v12 + 8);
      v30 = *(_DWORD *)(v12 + 16);
      if (v27 != v26)
      {
        v31 = (v27 - v26) >> 6;
        while (1)
        {
          v32 = v31 >> 1;
          v33 = v26 + (v31 >> 1 << 6);
          v34 = *(_DWORD *)(v33 + 16);
          v35 = v34 >= v30;
          if (v34 != v30)
            goto LABEL_33;
          if (*(_QWORD *)v33 >= v28)
            break;
LABEL_27:
          v26 = v33 + 64;
          v32 = v31 + ~v32;
LABEL_28:
          v31 = v32;
          if (!v32)
            goto LABEL_36;
        }
        if (*(_QWORD *)v33 != v28)
          goto LABEL_28;
        v35 = *(_DWORD *)(v33 + 8) >= v29;
LABEL_33:
        if (v35)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_36:
      if (v26 == v27 || *(_DWORD *)(v26 + 16) != v30 || *(_QWORD *)v26 != v28 || *(_DWORD *)(v26 + 8) != v29)
        break;
      sub_20EE6BF60(v24, (uint64_t *)v12, *(_DWORD *)(v12 + 28));
LABEL_24:
      v12 += 64;
      if (v12 == v11)
      {
        a1 = v91;
        v10 = a4[6];
        v8 = v89;
        a2 = v90;
        v13 = v88;
        goto LABEL_87;
      }
    }
    v36 = sub_20E9DF85C(v24, (uint64_t *)v12);
    v37 = (int8x8_t)v36[6];
    if (v37)
    {
      v38 = *(unsigned int *)(v12 + 28);
      v39 = (uint8x8_t)vcnt_s8(v37);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        v40 = *(unsigned int *)(v12 + 28);
        if (*(_QWORD *)&v37 <= v38)
          v40 = v38 % *(_QWORD *)&v37;
      }
      else
      {
        v40 = (v37.i32[0] - 1) & v38;
      }
      v41 = *(uint64_t ***)(v36[5] + 8 * v40);
      if (v41)
      {
        v42 = *v41;
        if (v42)
        {
          if (v39.u32[0] < 2uLL)
          {
            v43 = *(_QWORD *)&v37 - 1;
            while (1)
            {
              v45 = v42[1];
              if (v45 == v38)
              {
                if (*((_DWORD *)v42 + 4) == (_DWORD)v38)
                  goto LABEL_62;
              }
              else if ((v45 & v43) != v40)
              {
                goto LABEL_61;
              }
              v42 = (uint64_t *)*v42;
              if (!v42)
                goto LABEL_61;
            }
          }
          do
          {
            v44 = v42[1];
            if (v44 == v38)
            {
              if (*((_DWORD *)v42 + 4) == (_DWORD)v38)
                goto LABEL_62;
            }
            else
            {
              if (v44 >= *(_QWORD *)&v37)
                v44 %= *(_QWORD *)&v37;
              if (v44 != v40)
                break;
            }
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
      }
    }
LABEL_61:
    v46 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 890, (uint64_t)"fitT != kfit->second.end()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v42 = 0;
    if (v46)
      abort();
LABEL_62:
    v48 = *(_QWORD *)(a3 + 48);
    v47 = *(_QWORD *)(a3 + 56);
    if (v47)
    {
      v49 = (unint64_t *)(v47 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = (std::__shared_weak_count *)v42[4];
    v42[3] = v48;
    v42[4] = v47;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(_QWORD *)(a3 + 48);
    v102 = *(_OWORD *)v12;
    *(_QWORD *)v103 = *(_QWORD *)(v12 + 16);
    *(_OWORD *)&v103[8] = *(_OWORD *)(v12 + 24);
    v104 = *(_OWORD *)(v12 + 40);
    v105 = *(_DWORD *)(v12 + 56);
    v56 = *(_QWORD *)(v54 + 200);
    v57 = *(_QWORD *)(v54 + 208);
    v55 = (char **)(v54 + 200);
    if (v57 == v56)
    {
LABEL_81:
      if (v56 == v57
        || *(_DWORD *)(v56 + 16) != *(_DWORD *)(v12 + 16)
        || *(_QWORD *)v56 != *(_QWORD *)v12
        || *(_DWORD *)(v56 + 8) != *(_DWORD *)(v12 + 8))
      {
        sub_20FCEFA44(v55, (char *)v56, &v102);
      }
      goto LABEL_24;
    }
    v58 = (v57 - v56) >> 6;
    while (1)
    {
      v59 = v58 >> 1;
      v60 = v56 + (v58 >> 1 << 6);
      v61 = *(_DWORD *)(v60 + 16);
      v62 = v61 >= *(_DWORD *)v103;
      if (v61 != *(_DWORD *)v103)
        goto LABEL_78;
      if (*(_QWORD *)v60 >= (unint64_t)v102)
        break;
LABEL_72:
      v56 = v60 + 64;
      v59 = v58 + ~v59;
LABEL_73:
      v58 = v59;
      if (!v59)
        goto LABEL_81;
    }
    if (*(_QWORD *)v60 != (_QWORD)v102)
      goto LABEL_73;
    v62 = *(_DWORD *)(v60 + 8) >= DWORD2(v102);
LABEL_78:
    if (v62)
      goto LABEL_73;
    goto LABEL_72;
  }
  v13 = v11 - v12;
  if (v11 != v12)
  {
    v14 = v8;
    while (1)
    {
      v15 = *v14;
      v16 = *((_DWORD *)v14 + 2);
      v17 = *(_QWORD *)(v10 + 200);
      v18 = v13 >> 6;
      v19 = *((_DWORD *)v14 + 4);
      do
      {
        v20 = v18 >> 1;
        v21 = v17 + (v18 >> 1 << 6);
        v22 = *(_DWORD *)(v21 + 16);
        v23 = v22 >= v19;
        if (v22 != v19)
          goto LABEL_12;
        if (*(_QWORD *)v21 < v15)
          goto LABEL_6;
        if (*(_QWORD *)v21 == v15)
        {
          v23 = *(_DWORD *)(v21 + 8) >= v16;
LABEL_12:
          if (!v23)
          {
LABEL_6:
            v17 = v21 + 64;
            v20 = v18 + ~v20;
          }
        }
        v18 = v20;
      }
      while (v20);
      if (v17 != v11 && *(_DWORD *)(v17 + 16) == v19 && *(_QWORD *)v17 == v15 && *(_DWORD *)(v17 + 8) == v16)
      {
        *a1 = 0;
        a1[1] = 0;
        return;
      }
      v14 += 8;
      if (v14 == v9)
        goto LABEL_21;
    }
  }
LABEL_87:
  if (*(_BYTE *)(v10 + 192))
  {
    v63 = *(_QWORD *)(a3 + 48);
    if (v13 <= (unint64_t)((char *)v9 - (char *)v8))
    {
      if (*(_BYTE *)(v63 + 192))
        goto LABEL_93;
    }
    else if (*(_BYTE *)(v63 + 192))
    {
      v64 = *(_OWORD *)(v10 + 48);
      *(_QWORD *)(v63 + 64) = *(_QWORD *)(v10 + 64);
      *(_OWORD *)(v63 + 48) = v64;
      v65 = *(_OWORD *)(v10 + 72);
      *(_DWORD *)(v63 + 88) = *(_DWORD *)(v10 + 88);
      *(_OWORD *)(v63 + 72) = v65;
      v66 = *(_WORD *)(v10 + 96);
      *(_BYTE *)(v63 + 98) = *(_BYTE *)(v10 + 98);
      *(_WORD *)(v63 + 96) = v66;
      v67 = *(_OWORD *)(v10 + 104);
      *(_QWORD *)(v63 + 120) = *(_QWORD *)(v10 + 120);
      *(_OWORD *)(v63 + 104) = v67;
      v68 = *(_OWORD *)(v10 + 128);
      *(_QWORD *)(v63 + 144) = *(_QWORD *)(v10 + 144);
      *(_OWORD *)(v63 + 128) = v68;
      v69 = *(_OWORD *)(v10 + 152);
      v70 = *(_OWORD *)(v10 + 168);
      *(_DWORD *)(v63 + 184) = *(_DWORD *)(v10 + 184);
      *(_OWORD *)(v63 + 168) = v70;
      *(_OWORD *)(v63 + 152) = v69;
      v71 = *(_WORD *)(v10 + 188);
      *(_BYTE *)(v63 + 190) = *(_BYTE *)(v10 + 190);
      *(_WORD *)(v63 + 188) = v71;
      goto LABEL_93;
    }
    v98 = *(_OWORD *)(v10 + 72);
    v99 = *(_QWORD *)(v10 + 88);
    v96 = *(_WORD *)(v10 + 96);
    v97 = *(_BYTE *)(v10 + 98);
    v100 = *(_OWORD *)(v10 + 104);
    v101 = *(_QWORD *)(v10 + 120);
    v95 = *(_QWORD *)(v10 + 144);
    v94 = *(_OWORD *)(v10 + 128);
    v72 = *(_OWORD *)(v10 + 152);
    v73 = *(_OWORD *)(v10 + 168);
    *(_DWORD *)&v103[16] = *(_DWORD *)(v10 + 184);
    v102 = v72;
    *(_OWORD *)v103 = v73;
    v93 = *(_BYTE *)(v10 + 190);
    v92 = *(_WORD *)(v10 + 188);
    v74 = *(_OWORD *)(v10 + 48);
    *(_QWORD *)(v63 + 64) = *(_QWORD *)(v10 + 64);
    *(_OWORD *)(v63 + 48) = v74;
    *(_OWORD *)(v63 + 72) = v98;
    *(_QWORD *)(v63 + 88) = v99;
    *(_WORD *)(v63 + 96) = v96;
    *(_BYTE *)(v63 + 98) = v97;
    *(_OWORD *)(v63 + 104) = v100;
    *(_QWORD *)(v63 + 120) = v101;
    *(_QWORD *)(v63 + 144) = v95;
    *(_OWORD *)(v63 + 128) = v94;
    *(_QWORD *)(v63 + 40) = &off_24C9FC600;
    v75 = v102;
    v76 = *(_OWORD *)v103;
    *(_DWORD *)(v63 + 184) = *(_DWORD *)&v103[16];
    *(_OWORD *)(v63 + 168) = v76;
    *(_OWORD *)(v63 + 152) = v75;
    *(_BYTE *)(v63 + 190) = v93;
    *(_WORD *)(v63 + 188) = v92;
    *(_BYTE *)(v63 + 192) = 1;
  }
LABEL_93:
  v77 = (uint64_t *)a4[1];
  if (v77)
  {
    do
    {
      v78 = v77;
      v77 = (uint64_t *)*v77;
    }
    while (v77);
  }
  else
  {
    v79 = a4;
    do
    {
      v78 = (uint64_t *)v79[2];
      v80 = *v78 == (_QWORD)v79;
      v79 = v78;
    }
    while (!v80);
  }
  if (*a2 == a4)
    *a2 = v78;
  v81 = a2[1];
  a2[2] = (uint64_t *)((char *)a2[2] - 1);
  sub_20E8D2134(v81, a4);
  v82 = (std::__shared_weak_count *)a4[7];
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  operator delete(a4);
  v85 = *(_QWORD *)(a3 + 56);
  *a1 = *(_QWORD *)(a3 + 48);
  a1[1] = v85;
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
}

unint64_t sub_20FCEFA44(char **a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *i;
  __int128 v45;
  char *v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 6;
  v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFC0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      v31 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v31;
      v32 = &v6[64 * v8];
      *((_QWORD *)v32 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)v32 + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)(v32 + 40) = *(__int128 *)((char *)a3 + 40);
      *((_DWORD *)v32 + 14) = *((_DWORD *)a3 + 14);
      a1[1] = (char *)(v9 + 64);
    }
    else
    {
      v50 = *((_QWORD *)a3 + 2);
      v11 = *(__int128 *)((char *)a3 + 24);
      v48 = *(__int128 *)((char *)a3 + 40);
      v49 = *a3;
      v12 = *((_DWORD *)a3 + 14);
      v13 = v9 + 64;
      v14 = v5 - 64;
      v15 = a1[1];
      if (v5 >= 0x40)
      {
        do
        {
          v16 = *(_OWORD *)v14;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v14 + 24);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)(v15 + 40) = *(_OWORD *)(v14 + 40);
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v14 + 56);
          v15 += 64;
          v14 += 64;
        }
        while (v14 < v5);
      }
      a1[1] = v15;
      if (v5 != v13)
      {
        v17 = 0;
        v18 = (uint64_t)(v5 - v13) >> 6 << 6;
        v19 = &v6[64 * v8 + v18];
        v20 = -v18;
        do
        {
          v21 = v5 + v17;
          v22 = *(_OWORD *)&v19[v17 - 64];
          *(_DWORD *)(v21 - 48) = *(_DWORD *)&v19[v17 - 48];
          *(_OWORD *)(v21 - 64) = v22;
          *(_QWORD *)(v21 - 40) = *(_QWORD *)&v19[v17 - 40];
          *(_QWORD *)(v21 - 32) = *(_QWORD *)&v19[v17 - 32];
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v17 - 24];
          *(_DWORD *)(v21 - 8) = *(_DWORD *)&v19[v17 - 8];
          v17 -= 64;
        }
        while (v20 != v17);
      }
      *(_OWORD *)v9 = v49;
      *(_DWORD *)(v9 + 16) = v50;
      v23 = &v6[64 * v8];
      *(_OWORD *)(v23 + 24) = v11;
      *(_OWORD *)(v23 + 40) = v48;
      *((_DWORD *)v23 + 14) = v12;
    }
    return v9;
  }
  v24 = ((uint64_t)(v5 - (_QWORD)v6) >> 6) + 1;
  if (v24 >> 58)
    sub_20E867F44();
  v26 = v10 - (_QWORD)v6;
  if (v26 >> 5 > v24)
    v24 = v26 >> 5;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
    v27 = 0x3FFFFFFFFFFFFFFLL;
  else
    v27 = v24;
  if (v27)
  {
    if (v27 >> 58)
      sub_20E877A38();
    v28 = (char *)operator new(v27 << 6);
    v29 = &v28[64 * v8];
    v30 = &v28[64 * v27];
    if (v8 != v27)
      goto LABEL_31;
    goto LABEL_21;
  }
  v28 = 0;
  v29 = (char *)(v8 << 6);
  v30 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v34 = 1;
      else
        v34 = v7 >> 5;
      if (v34 >> 58)
        sub_20E877A38();
      v35 = (char *)operator new(v34 << 6);
      v29 = &v35[64 * (v34 >> 2)];
      v30 = &v35[64 * v34];
      if (v28)
      {
        v36 = &v35[64 * v34];
        operator delete(v28);
        v30 = v36;
      }
    }
    else
    {
      v33 = v8 + 2;
      if (v8 >= -1)
        v33 = v8 + 1;
      v29 -= 64 * (v33 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v29 = *a3;
  v37 = *((_QWORD *)a3 + 3);
  *((_QWORD *)v29 + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)v29 + 3) = v37;
  *((_QWORD *)v29 + 4) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v29 + 40) = *(__int128 *)((char *)a3 + 40);
  *((_DWORD *)v29 + 14) = *((_DWORD *)a3 + 14);
  v38 = v29 + 64;
  v39 = *a1;
  v40 = v29;
  if (*a1 != (char *)v9)
  {
    v41 = 0;
    do
    {
      v42 = &v29[v41];
      v43 = *(_OWORD *)(v9 + v41 - 64);
      *((_QWORD *)v42 - 6) = *(_QWORD *)(v9 + v41 - 48);
      *((_OWORD *)v42 - 4) = v43;
      *((_QWORD *)v42 - 5) = *(_QWORD *)(v9 + v41 - 40);
      *((_QWORD *)v42 - 4) = *(_QWORD *)(v9 + v41 - 32);
      *(_OWORD *)(v42 - 24) = *(_OWORD *)(v9 + v41 - 24);
      *((_DWORD *)v42 - 2) = *(_DWORD *)(v9 + v41 - 8);
      v41 -= 64;
    }
    while ((char *)(v9 + v41) != v39);
    v40 = &v29[v41];
  }
  for (i = a1[1]; (char *)v9 != i; v9 += 64)
  {
    v45 = *(_OWORD *)v9;
    *((_QWORD *)v38 + 2) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v38 = v45;
    *((_QWORD *)v38 + 3) = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v38 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(v9 + 40);
    *((_DWORD *)v38 + 14) = *(_DWORD *)(v9 + 56);
    v38 += 64;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v30;
  if (v46)
    operator delete(v46);
  return (unint64_t)v29;
}

void sub_20FCEFDD0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FCEFDE8(std::mutex *a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20FCF0074(a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 192))
      *(_BYTE *)(a2 + 192) = 0;
    v4 = *(void **)(a2 + 200);
    *(_QWORD *)(a2 + 208) = v4;
    *(_DWORD *)(a2 + 224) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FCEFE5C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA052D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FCEFED0(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA052D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FCEFF48(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20FCF0074(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 192))
      *(_BYTE *)(v2 + 192) = 0;
    v5 = *(void **)(v2 + 200);
    *(_QWORD *)(v2 + 208) = v5;
    *(_DWORD *)(v2 + 224) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C405C03E5D2);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FCF0004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdL"
                     "b0EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializ"
                     "erIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_dele"
                     "teIS9_EEEESF_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3"
                                "DWithCovIdLb0EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_2"
                                "3PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_1"
                                "0unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb0EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb0EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20FCF0074(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_44;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_44;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_BYTE *)(v28 + 192))
              *(_BYTE *)(v28 + 192) = 0;
            v30 = *(void **)(v28 + 200);
            *(_QWORD *)(v28 + 208) = v30;
            *(_DWORD *)(v28 + 224) = 0;
            if (v30)
              operator delete(v30);
            v31 = *(std::__shared_weak_count **)(v28 + 8);
            if (v31)
              std::__shared_weak_count::__release_weak(v31);
            MEMORY[0x212BC6398](v28, 0x10E2C405C03E5D2);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20FCF02D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F28B680((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20FCF02F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCF031C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 192))
      *(_BYTE *)(v1 + 192) = 0;
    v2 = *(void **)(v1 + 200);
    *(_QWORD *)(v1 + 208) = v2;
    *(_DWORD *)(v1 + 224) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20FCF0388(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb"
                     "1EEEE27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCo"
                                "vIdLb0EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FCF03F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v6;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a3 + 24);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v18 + 8 * v3) = v14;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_20FCF0720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCF0734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  void **v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 8)
      || (v7 = *(_QWORD *)a1, (v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 8))) == 0))
    {
      sub_20EE6CA64();
    }
    v9 = v8;
    v48 = v8;
    v10 = *(_DWORD *)(a3 + 4);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v49 = v8;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = sub_20E9DF85C((_QWORD *)v4, (uint64_t *)a2);
    if (v13)
    {
      LODWORD(v50) = v10;
      v51 = v7;
      v52 = v9;
      v53 = v10;
      sub_20FCF03F8((uint64_t)(v13 + 5), v10, (uint64_t)&v50);
      v14 = v52;
      if (!v52)
      {
LABEL_98:
        v46 = (unint64_t *)&v48->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        return;
      }
      v15 = (unint64_t *)&v52->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_96:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_98;
    }
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 8);
    v19 = v18 ^ __ROR4__(v17, 13);
    v20 = *(_QWORD *)(v4 + 8);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v3 = v19;
        if (v20 <= v19)
          v3 = v19 % v20;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
      }
      v22 = *(void ***)(*(_QWORD *)v4 + 8 * v3);
      if (v22)
      {
        v23 = (char *)*v22;
        if (*v22)
        {
          v24 = *(_QWORD *)a2;
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v26 = *((_QWORD *)v23 + 1);
              if (v26 == v19)
              {
                if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                  goto LABEL_77;
              }
              else if ((v26 & (v20 - 1)) != v3)
              {
                goto LABEL_37;
              }
              v23 = *(char **)v23;
              if (!v23)
                goto LABEL_37;
            }
          }
          do
          {
            v25 = *((_QWORD *)v23 + 1);
            if (v25 == v19)
            {
              if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                goto LABEL_77;
            }
            else
            {
              if (v25 >= v20)
                v25 %= v20;
              if (v25 != v3)
                break;
            }
            v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
LABEL_37:
    v23 = (char *)operator new(0x50uLL);
    v27 = (_QWORD *)(v4 + 16);
    v50 = v23;
    v51 = v4 + 16;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v19;
    *((_OWORD *)v23 + 1) = *(_OWORD *)a2;
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_DWORD *)v23 + 18) = 1065353216;
    LOBYTE(v52) = 1;
    v28 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
    v29 = *(float *)(v4 + 32);
    if (v20 && (float)(v29 * (float)v20) >= v28)
    {
      v30 = *(_QWORD *)v4;
      v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
      if (v31)
      {
LABEL_40:
        *(_QWORD *)v23 = *v31;
        goto LABEL_75;
      }
    }
    else
    {
      v32 = 1;
      if (v20 >= 3)
        v32 = (v20 & (v20 - 1)) != 0;
      v33 = v32 | (2 * v20);
      v34 = vcvtps_u32_f32(v28 / v29);
      if (v33 <= v34)
        prime = v34;
      else
        prime = v33;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v20 = *(_QWORD *)(v4 + 8);
      }
      if (prime > v20)
        goto LABEL_51;
      if (prime < v20)
      {
        v36 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 24) / *(float *)(v4 + 32));
        if (v20 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (prime <= v36)
          prime = v36;
        if (prime < v20)
LABEL_51:
          sub_20E8D2B3C(v4, prime);
      }
      v20 = *(_QWORD *)(v4 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v20 <= v19)
          v3 = v19 % v20;
        else
          v3 = v19;
        v30 = *(_QWORD *)v4;
        v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
        if (v31)
          goto LABEL_40;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
        v30 = *(_QWORD *)v4;
        v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
        if (v31)
          goto LABEL_40;
      }
    }
    *(_QWORD *)v23 = *v27;
    *v27 = v23;
    *(_QWORD *)(v30 + 8 * v3) = v27;
    if (!*(_QWORD *)v23)
      goto LABEL_76;
    v39 = *(_QWORD *)(*(_QWORD *)v23 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v39 >= v20)
        v39 %= v20;
    }
    else
    {
      v39 &= v20 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)v4 + 8 * v39);
LABEL_75:
    *v31 = v23;
LABEL_76:
    ++*(_QWORD *)(v4 + 24);
LABEL_77:
    v40 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 40) / *((float *)v23 + 18));
    if (v40 == 1)
    {
      v40 = 2;
    }
    else if ((v40 & (v40 - 1)) != 0)
    {
      v40 = std::__next_prime(v40);
    }
    v41 = *(int8x8_t *)(v23 + 48);
    if (v40 > *(_QWORD *)&v41)
      goto LABEL_82;
    if (v40 < *(_QWORD *)&v41)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 8) / *((float *)v23 + 18));
      if (*(_QWORD *)&v41 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (v40 <= v42)
        v40 = v42;
      if (v40 < *(_QWORD *)&v41)
      {
LABEL_82:
        sub_20E8D2B3C((uint64_t)(v23 + 40), v40);
        v9 = v49;
      }
    }
    LODWORD(v50) = v10;
    v51 = v7;
    v52 = v9;
    v53 = v10;
    sub_20FCF03F8((uint64_t)(v23 + 40), v10, (uint64_t)&v50);
    v14 = v52;
    if (!v52)
      goto LABEL_98;
    v45 = (unint64_t *)&v52->__shared_owners_;
    do
      v16 = __ldaxr(v45);
    while (__stlxr(v16 - 1, v45));
    goto LABEL_96;
  }
}

void sub_20FCF0CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_20EE6C9B0((uint64_t)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FCF0D40(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned int a4, _OWORD **a5, _QWORD **a6)
{
  uint64_t v10;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v10 = 0;
  result = *a2;
  _X10 = **a2;
  __asm { PRFM            #4, [X10] }
  v17 = (0x9DDFEA08EB382D69 * a4 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * a4 + 0x376ADF16980614E5) >> 32);
  v18 = result[3];
  for (i = (v17 >> 7) ^ 0x13701D; ; i = v10 + v20)
  {
    v20 = i & v18;
    v21 = *(_QWORD *)(_X10 + (i & v18));
    v22 = ((v21 ^ (0x101010101010101 * (v17 & 0x7F))) - 0x101010101010101) & ~(v21 ^ (0x101010101010101
                                                                                        * (v17 & 0x7F))) & 0x8080808080808080;
    if (v22)
      break;
LABEL_8:
    if ((v21 & (~v21 << 6) & 0x8080808080808080) != 0)
    {
      result = (uint64_t *)sub_20F346A98(result, v17);
      v23 = (unint64_t)result;
      v29 = (*a2)[1] + 32 * (_QWORD)result;
      v30 = *a6;
      *(_OWORD *)v29 = **a5;
      v31 = v30[1];
      *(_QWORD *)(v29 + 16) = *v30;
      *(_QWORD *)(v29 + 24) = v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v28 = 1;
      goto LABEL_15;
    }
    v10 += 8;
  }
  while (1)
  {
    v23 = (v20 + (__clz(__rbit64(v22)) >> 3)) & v18;
    v24 = result[1] + 32 * v23;
    v25 = *(_QWORD *)v24;
    v26 = *(_DWORD *)(v24 + 8);
    if (v25 == a3 && v26 == a4)
      break;
    v22 &= v22 - 1;
    if (!v22)
      goto LABEL_8;
  }
  v28 = 0;
LABEL_15:
  v34 = **a2 + v23;
  v35 = (*a2)[1] + 32 * v23;
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v28;
  return result;
}

uint64_t sub_20FCF0EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  unint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v47;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  v47 = (void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 > 0x555555555555555)
      sub_20E92CED8();
    v8 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = &v8[48 * v7];
    do
    {
      v10 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v8 < v10)
      {
        *(_DWORD *)v8 = *(_DWORD *)(v5 + 4);
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v5 + 24);
        *((_QWORD *)v8 + 5) = *(_QWORD *)(v5 + 40);
        v9 = v8 + 48;
        *(_QWORD *)(a1 + 40) = v8 + 48;
      }
      else
      {
        v11 = (char *)*v47;
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v47) >> 4);
        v13 = v12 + 1;
        if (v12 + 1 > 0x555555555555555)
          sub_20E92CED8();
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v11) >> 4);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x2AAAAAAAAAAAAAALL)
          v15 = 0x555555555555555;
        else
          v15 = v13;
        if (v15 > 0x555555555555555)
          sub_20E877A38();
        v16 = (char *)operator new(48 * v15);
        v17 = &v16[48 * v12];
        v18 = &v16[48 * v15];
        *(_DWORD *)v17 = *(_DWORD *)(v5 + 4);
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v5 + 24);
        *((_QWORD *)v17 + 5) = *(_QWORD *)(v5 + 40);
        v9 = v17 + 48;
        if (v8 == v11)
        {
          *(_QWORD *)(a1 + 32) = v17;
          *(_QWORD *)(a1 + 40) = v9;
          v11 = v8;
          *(_QWORD *)(a1 + 48) = v18;
        }
        else
        {
          do
          {
            v19 = *((_OWORD *)v8 - 3);
            v20 = *((_OWORD *)v8 - 1);
            *((_OWORD *)v17 - 2) = *((_OWORD *)v8 - 2);
            *((_OWORD *)v17 - 1) = v20;
            *((_OWORD *)v17 - 3) = v19;
            v17 -= 48;
            v8 -= 48;
          }
          while (v8 != v11);
          *(_QWORD *)(a1 + 32) = v17;
          *(_QWORD *)(a1 + 40) = v9;
          *(_QWORD *)(a1 + 48) = v18;
          if (!v11)
            goto LABEL_5;
        }
        operator delete(v11);
      }
LABEL_5:
      *(_QWORD *)(a1 + 40) = v9;
      v5 += 48;
      v8 = v9;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v21 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 72) = 0;
  v23 = *(char **)(a2 + 72);
  v22 = *(char **)(a2 + 80);
  v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0)
      sub_20E92CED8();
    v25 = operator new(v22 - v23);
    *(_QWORD *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 72) = &v25[4 * (v24 >> 6)];
    do
    {
      v30 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v25 < v30)
      {
        v26 = *(_OWORD *)v23;
        v27 = *((_OWORD *)v23 + 1);
        v28 = *((_OWORD *)v23 + 3);
        v25[2] = *((_OWORD *)v23 + 2);
        v25[3] = v28;
        *v25 = v26;
        v25[1] = v27;
        v29 = v25 + 4;
        *(_QWORD *)(a1 + 64) = v25 + 4;
      }
      else
      {
        v31 = (_OWORD *)*v21;
        v32 = ((uint64_t)v25 - *v21) >> 6;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 58)
          sub_20E92CED8();
        v34 = v30 - (_QWORD)v31;
        if (v34 >> 5 > v33)
          v33 = v34 >> 5;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFC0)
          v35 = 0x3FFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 58)
            sub_20E877A38();
          v36 = (char *)operator new(v35 << 6);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[64 * v32];
        v38 = *(_OWORD *)v23;
        v39 = *((_OWORD *)v23 + 1);
        v40 = *((_OWORD *)v23 + 3);
        v41 = &v36[64 * v35];
        *((_OWORD *)v37 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v37 + 3) = v40;
        *(_OWORD *)v37 = v38;
        *((_OWORD *)v37 + 1) = v39;
        v29 = v37 + 64;
        if (v25 == v31)
        {
          *(_QWORD *)(a1 + 56) = v37;
          *(_QWORD *)(a1 + 64) = v29;
          *(_QWORD *)(a1 + 72) = v41;
        }
        else
        {
          do
          {
            v42 = *(v25 - 4);
            v43 = *(v25 - 3);
            v44 = *(v25 - 1);
            *((_OWORD *)v37 - 2) = *(v25 - 2);
            *((_OWORD *)v37 - 1) = v44;
            *((_OWORD *)v37 - 4) = v42;
            *((_OWORD *)v37 - 3) = v43;
            v37 -= 64;
            v25 -= 4;
          }
          while (v25 != v31);
          v25 = *(_OWORD **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v37;
          *(_QWORD *)(a1 + 64) = v29;
          *(_QWORD *)(a1 + 72) = v41;
          if (!v25)
            goto LABEL_24;
        }
        operator delete(v25);
      }
LABEL_24:
      *(_QWORD *)(a1 + 64) = v29;
      v23 += 64;
      v25 = v29;
    }
    while (v23 != v22);
  }
  sub_20EB4453C(a1 + 80, (uint64_t *)(a2 + 96));
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_20FCF1234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 64) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 40) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF1280(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void **v35;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
  memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  v12 = *((_QWORD *)a2 + 94);
  v13 = *((_QWORD *)a2 + 93);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    v35 = (void **)(a1 + 744);
    v15 = 0x6DB6DB6DB6DB6DB7 * (v14 >> 3);
    if (v15 > 0x492492492492492)
      sub_20E92CED8();
    v16 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 744) = v16;
    *(_QWORD *)(a1 + 752) = v16;
    *(_QWORD *)(a1 + 760) = &v16[56 * v15];
    do
    {
      v20 = *(_QWORD *)(a1 + 760);
      if ((unint64_t)v16 < v20)
      {
        *(_QWORD *)v16 = *(_QWORD *)v13;
        v17 = *(_QWORD *)(v13 + 24);
        *(_OWORD *)(v16 + 8) = *(_OWORD *)(v13 + 8);
        *((_QWORD *)v16 + 3) = v17;
        v18 = *(_QWORD *)(v13 + 48);
        *((_OWORD *)v16 + 2) = *(_OWORD *)(v13 + 32);
        *((_QWORD *)v16 + 6) = v18;
        v19 = v16 + 56;
        *(_QWORD *)(a1 + 752) = v16 + 56;
      }
      else
      {
        v21 = (char *)*v35;
        v22 = 0x6DB6DB6DB6DB6DB7 * ((v16 - (_BYTE *)*v35) >> 3);
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) > 0x492492492492492)
          sub_20E92CED8();
        v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (_QWORD)v21) >> 3);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x249249249249249)
          v25 = 0x492492492492492;
        else
          v25 = v23;
        if (v25 > 0x492492492492492)
          sub_20E877A38();
        v26 = (char *)operator new(56 * v25);
        v27 = &v26[56 * v22];
        v28 = &v26[56 * v25];
        *(_QWORD *)v27 = *(_QWORD *)v13;
        v29 = *(_QWORD *)(v13 + 24);
        *(_OWORD *)(v27 + 8) = *(_OWORD *)(v13 + 8);
        *((_QWORD *)v27 + 3) = v29;
        v30 = *(_QWORD *)(v13 + 48);
        *((_OWORD *)v27 + 2) = *(_OWORD *)(v13 + 32);
        *((_QWORD *)v27 + 6) = v30;
        v19 = v27 + 56;
        if (v16 == v21)
        {
          *(_QWORD *)(a1 + 744) = v27;
          *(_QWORD *)(a1 + 752) = v19;
          v21 = v16;
          *(_QWORD *)(a1 + 760) = v28;
        }
        else
        {
          do
          {
            v31 = *(_OWORD *)(v16 - 56);
            v32 = *(_OWORD *)(v16 - 40);
            v33 = *(_OWORD *)(v16 - 24);
            *((_QWORD *)v27 - 1) = *((_QWORD *)v16 - 1);
            *(_OWORD *)(v27 - 24) = v33;
            *(_OWORD *)(v27 - 40) = v32;
            *(_OWORD *)(v27 - 56) = v31;
            v27 -= 56;
            v16 -= 56;
          }
          while (v16 != v21);
          *(_QWORD *)(a1 + 744) = v27;
          *(_QWORD *)(a1 + 752) = v19;
          *(_QWORD *)(a1 + 760) = v28;
          if (!v21)
            goto LABEL_5;
        }
        operator delete(v21);
      }
LABEL_5:
      *(_QWORD *)(a1 + 752) = v19;
      v13 += 56;
      v16 = v19;
    }
    while (v13 != v12);
  }
  *(_QWORD *)(a1 + 768) = *((_QWORD *)a2 + 96);
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = *((_QWORD *)a2 + 97);
  *(_DWORD *)(a1 + 792) = *((_DWORD *)a2 + 196);
  return a1;
}

void sub_20FCF153C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 752) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF1564(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t result;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  BOOL v15;
  BOOL v16;
  double v17;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  double v39;
  double v41;
  int v42;
  double v43;
  int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v58;
  double v59;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  int v68;
  BOOL v69;
  float64x2_t v70;
  double v71;
  double v73;
  int v74;
  double v75;
  int v76;
  double v77;
  float64x2_t v78;
  double v79;
  double v80;
  float64x2_t v81;
  char v82;
  char *v83;

  v6 = *(_DWORD *)(a1 + 992);
  if (v6 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BBDAE, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_151;
    }
    v6 = *(_DWORD *)(a1 + 992);
    if (v6 <= 7)
    {
LABEL_3:
      if (v6 <= 3)
      {
        if (v6 > 1)
        {
          if (v6 != 2)
            goto LABEL_100;
          v13 = a2[1].f64[0];
          if (v13 <= 0.00000001)
            return 0;
          v14 = vmulq_n_f64(*a2, 1.0 / v13);
          v15 = v14.f64[0] < *(double *)(a1 + 216) || v14.f64[0] > *(double *)(a1 + 224);
          v16 = v15 || v14.f64[1] < *(double *)(a1 + 232);
          if (v16 || v14.f64[1] > *(double *)(a1 + 240))
            return 0;
        }
        else
        {
          if (!v6)
            goto LABEL_152;
          if (a2[1].f64[0] < 0.00000001)
            return 0;
        }
        goto LABEL_23;
      }
      if (v6 < 6)
      {
LABEL_61:
        if (v6 != 5)
          goto LABEL_100;
        v32 = a2->f64[0];
        v31 = a2->f64[1];
        v33 = a2[1].f64[0];
        v34 = v32 * v32 + v31 * v31;
        if (v34 >= 0.00000001)
        {
          v48 = sqrt(v34);
          if (v48 <= v33)
          {
            v80 = v48 / v33 * 0.785398163 - v48 / v33 * (v48 / v33 + -1.0) * (v48 / v33 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v48 <= -v33)
            {
              v51 = v48 / v33 * 0.785398163 - v48 / v33 * (-1.0 - v48 / v33) * (v48 / v33 * -0.0663008339 + 0.244711287);
              v52 = 3.14159265;
            }
            else
            {
              v49 = v33 / v48;
              v50 = fabs(v49);
              v51 = v49 * (v50 + -1.0) * (v50 * 0.0663008339 + 0.244711287) + v49 * -0.785398163;
              v52 = 1.57079633;
            }
            v80 = v51 + v52;
          }
          v81 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v80 * v80)), v80 * v80);
          v35 = (v80 + v80 * (v81.f64[0] + vmuld_lane_f64(v80 * v80 * (v80 * v80), v81, 1))) / v48;
          goto LABEL_148;
        }
        if (v33 != 0.0)
        {
          v35 = 1.0 / v33;
LABEL_148:
          v59 = v31 * v35;
          *(double *)a3 = v32 * v35;
          goto LABEL_149;
        }
LABEL_68:
        result = 0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        return result;
      }
      if (v6 == 6)
        sub_20EB420A4();
      v7 = *(_QWORD *)(a1 + 472);
      v8 = *(unsigned int *)(v7 + 104);
      if ((_DWORD)v8 != -1)
      {
LABEL_18:
        v9 = atan2(sqrt(a2->f64[0] * a2->f64[0] + a2->f64[1] * a2->f64[1]), a2[1].f64[0]);
        v83 = &v82;
        if (v9 > ((double (*)(char **, uint64_t))off_24C9C4FE8[v8])(&v83, v7 + 88))
          return 0;
        goto LABEL_23;
      }
LABEL_14:
      sub_20E877AB8();
    }
  }
  else if (v6 <= 7)
  {
    goto LABEL_3;
  }
  if (v6 <= 0xB)
  {
    if (v6 > 9)
    {
      if (v6 == 10)
        return sub_20EB24288((float64x2_t *)a3, (uint64_t)a2, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      v7 = *(_QWORD *)(a1 + 664);
      v8 = *(unsigned int *)(v7 + 104);
      if ((_DWORD)v8 != -1)
        goto LABEL_18;
    }
    else
    {
      if (v6 != 9)
        goto LABEL_53;
      v7 = *(_QWORD *)(a1 + 496);
      v8 = *(unsigned int *)(v7 + 104);
      if ((_DWORD)v8 != -1)
        goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (v6 > 0xD)
  {
    if (v6 == 14)
      return sub_20EB247C0((float64x2_t *)a3, (uint64_t)a2, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
    v7 = *(_QWORD *)(a1 + 888);
    v8 = *(unsigned int *)(v7 + 104);
    if ((_DWORD)v8 != -1)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (v6 != 13)
    goto LABEL_68;
  if (a2[1].f64[0] < 0.00000001)
    return 0;
LABEL_23:
  v6 = *(_DWORD *)(a1 + 992);
  if (v6 != -1)
  {
    if (v6 <= 7)
      goto LABEL_25;
    goto LABEL_49;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BBDAE, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_151:
    abort();
  }
  v6 = *(_DWORD *)(a1 + 992);
  if (v6 > 7)
  {
LABEL_49:
    if (v6 <= 0xB)
    {
      if (v6 <= 9)
      {
        if (v6 == 9)
          return sub_20EB3641C(a1, (float64x2_t *)a3, a2);
LABEL_53:
        v17 = a2[1].f64[0];
        _Q0 = *a2;
        _D1 = a2->f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v24 = sqrt(_D6);
        v25 = fabs(v17);
        v26 = fabs(v24);
        v27 = v25 / v26;
        if (v25 >= v26)
          v27 = v26 / v25;
        if (v27 <= 0.414213562)
        {
          v29 = 1;
          v30 = 2;
          v28 = v27;
          if (_D6 < 0.00000001)
            goto LABEL_131;
        }
        else
        {
          v28 = (v26 - v25) / (v25 + v26);
          if (v25 >= v26)
            v28 = -v28;
          v29 = -1;
          v30 = 1;
          if (_D6 < 0.00000001)
            goto LABEL_131;
        }
        if (v25 < v26)
          v29 = -v29;
        else
          v30 = v27 > 0.414213562;
        v36 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v28 * v28), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v28 * v28), (float64x2_t)xmmword_210315370), v28 * v28 * (v28 * v28))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v28 * v28), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v28 * v28), (float64x2_t)xmmword_210315380), v28 * v28 * (v28 * v28))), v28 * v28 * (v28 * v28) * (v28 * v28 * (v28 * v28))));
        v37 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1);
        _ZF = v24 == INFINITY && v25 == INFINITY;
        v39 = v28 + v28 * vdivq_f64(v36, v37).f64[0];
        if (_ZF)
          v39 = 0.785398163;
        if (v24 == 0.0 && v17 == 0.0)
          v41 = 0.0;
        else
          v41 = v39;
        if (a2[1].f64[0] < 0.0)
        {
          v30 = 4 - v30;
          v29 = -v29;
        }
        if (v24 >= 0.0)
          v42 = v30;
        else
          v42 = -v30;
        v43 = (double)v42;
        if (v24 >= 0.0)
          v44 = v29;
        else
          v44 = -v29;
        v45 = v43 * 3.061617e-17 + v43 * 0.785398163 + v41 * (double)v44;
        v46 = v45
            * (v45
             * v45
             * (*(double *)(a1 + 168)
              + v45
              * v45
              * (*(double *)(a1 + 176)
               + v45
               * v45
               * (*(double *)(a1 + 184)
                + v45
                * v45
                * (*(double *)(a1 + 192)
                 + v45
                 * v45
                 * (*(double *)(a1 + 200) + v45 * v45 * (*(double *)(a1 + 208) + v45 * v45 * *(double *)(a1 + 216)))))))
             + 1.0);
        v47 = 1.0 / v24;
        goto LABEL_129;
      }
      if (v6 != 10)
        return sub_20EB3A2E4(a1, (float64x2_t *)a3, a2);
      return sub_20EB24288((float64x2_t *)a3, (uint64_t)a2, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
    }
    if (v6 <= 0xD)
    {
      if (v6 == 13)
        return sub_20EB438A4((double *)a1, (float64x2_t *)a3, a2);
      goto LABEL_68;
    }
    if (v6 != 14)
      return sub_20EB3E39C(a1, (float64x2_t *)a3, a2);
    return sub_20EB247C0((float64x2_t *)a3, (uint64_t)a2, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
  }
LABEL_25:
  if (v6 > 3)
  {
    if (v6 > 5)
    {
      if (v6 == 6)
        return sub_20EB41EEC((float64x2_t *)a1, (float64x2_t *)a3, a2);
      else
        return sub_20EB31FFC(a1, (float64x2_t *)a3, a2);
    }
    goto LABEL_61;
  }
  if (v6 <= 1)
  {
    if (v6)
    {
      v11 = a2[1].f64[0];
      if (v11 >= 0.00000001)
      {
        v12 = vmulq_n_f64(*a2, 1.0 / v11);
LABEL_133:
        *(float64x2_t *)a3 = v12;
        return 1;
      }
      return 0;
    }
LABEL_152:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BBDAE, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (v6 != 2)
  {
LABEL_100:
    v17 = a2[1].f64[0];
    _Q0 = *a2;
    _D1 = a2->f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v62 = sqrt(_D6);
    v63 = fabs(v17);
    v64 = fabs(v62);
    v65 = v63 / v64;
    if (v63 >= v64)
      v65 = v64 / v63;
    if (v65 <= 0.414213562)
    {
      v67 = 1;
      v68 = 2;
      v66 = v65;
      if (_D6 >= 0.00000001)
      {
LABEL_106:
        if (v63 < v64)
          v67 = -v67;
        else
          v68 = v65 > 0.414213562;
        v69 = v62 == INFINITY && v63 == INFINITY;
        v70 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v66 * v66), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v66 * v66), (float64x2_t)xmmword_210315370), v66 * v66 * (v66 * v66))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v66 * v66), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v66 * v66), (float64x2_t)xmmword_210315380), v66 * v66 * (v66 * v66))), v66 * v66 * (v66 * v66) * (v66 * v66 * (v66 * v66))));
        v71 = v66 + v66 * vdivq_f64(v70, (float64x2_t)vdupq_laneq_s64((int64x2_t)v70, 1)).f64[0];
        if (v69)
          v71 = 0.785398163;
        if (v62 == 0.0 && v17 == 0.0)
          v73 = 0.0;
        else
          v73 = v71;
        if (a2[1].f64[0] < 0.0)
        {
          v68 = 4 - v68;
          v67 = -v67;
        }
        if (v62 >= 0.0)
          v74 = v68;
        else
          v74 = -v68;
        v75 = (double)v74;
        if (v62 >= 0.0)
          v76 = v67;
        else
          v76 = -v67;
        v77 = v75 * 3.061617e-17 + v75 * 0.785398163 + v73 * (double)v76;
        v78 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v77 * v77)), v77 * v77);
        v46 = v77 + v77 * (v78.f64[0] + vmuld_lane_f64(v77 * v77 * (v77 * v77), v78, 1));
        v47 = 1.0 / v62;
LABEL_129:
        v79 = v47 * v46;
LABEL_132:
        v12 = vmulq_n_f64(_Q0, v79);
        goto LABEL_133;
      }
    }
    else
    {
      v66 = (v64 - v63) / (v63 + v64);
      if (v63 >= v64)
        v66 = -v66;
      v67 = -1;
      v68 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_106;
    }
LABEL_131:
    v79 = 1.0 / v17;
    goto LABEL_132;
  }
  if (*(_DWORD *)(a1 + 212))
  {
    v53 = a2[1].f64[0];
    if (v53 < 0.00000001)
      return 0;
    v54 = 1.0 / v53;
    _Q3 = vmulq_n_f64(*a2, v54);
    _D0 = vmuld_lane_f64(v54, *a2, 1);
    __asm { FMLA            D2, D0, V3.D[1] }
    v58 = vmulq_n_f64(_Q3, *(double *)(a1 + 168) * _D2+ 1.0+ _D2 * (*(double *)(a1 + 176) * _D2)+ _D2 * (_D2 * (*(double *)(a1 + 184) * _D2)));
    *(float64x2_t *)a3 = v58;
    *(double *)a3 = (_D2 + (_Q3.f64[0] + _Q3.f64[0]) * _Q3.f64[0]) * *(double *)(a1 + 200)
                  + vmuld_lane_f64((*(double *)(a1 + 192) + *(double *)(a1 + 192)) * _Q3.f64[0], _Q3, 1)
                  + v58.f64[0];
    v59 = v58.f64[1]
        + (_D2 + vmuld_lane_f64(_Q3.f64[1] + _Q3.f64[1], _Q3, 1)) * *(double *)(a1 + 192)
        + vmuld_lane_f64((*(double *)(a1 + 200) + *(double *)(a1 + 200)) * _Q3.f64[0], _Q3, 1);
LABEL_149:
    *(double *)(a3 + 8) = v59;
    return 1;
  }
  return sub_20EB14380((float64x2_t *)a3, a2, (double *)(a1 + 168));
}

void sub_20FCF1FBC()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCF1FD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v24;
  void *__p[2];
  uint64_t v26;

  v3 = *(_QWORD **)(a2 + 24);
  v24 = (_QWORD *)(a2 + 32);
  if (v3 != (_QWORD *)(a2 + 32))
  {
    v4 = result;
    do
    {
      v5 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[7] + 40))(v3[7]);
      v6 = *v5;
      v7 = v5[1];
      v8 = *(_QWORD **)(v4 + 8);
      v9 = v3[7];
      v10 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      sub_20FD092A4(v10, v11, v12, 0, 0, "", 0);
      if (v26 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v26 >= 0)
        v14 = HIBYTE(v26);
      else
        v14 = (uint64_t)__p[1];
      v15 = sub_20E86A980(v8, (uint64_t)v13, v14);
      sub_20E86A980(v15, (uint64_t)"\n", 1);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      while (v6 != v7)
      {
        if (*(char *)(v6 + 31) < 0)
        {
          sub_20E860C04(__p, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
        }
        else
        {
          v16 = *(_OWORD *)(v6 + 8);
          v26 = *(_QWORD *)(v6 + 24);
          *(_OWORD *)__p = v16;
        }
        if (v26 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if (v26 >= 0)
          v18 = HIBYTE(v26);
        else
          v18 = (uint64_t)__p[1];
        v19 = sub_20E86A980(*(_QWORD **)(v4 + 8), (uint64_t)v17, v18);
        sub_20E86A980(v19, (uint64_t)"\n", 1);
        if (SHIBYTE(v26) < 0)
          operator delete(__p[0]);
        v6 += 32;
      }
      result = std::ostream::flush();
      v20 = (_QWORD *)v3[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v3[2];
          v22 = *v21 == (_QWORD)v3;
          v3 = v21;
        }
        while (!v22);
      }
      v3 = v21;
    }
    while (v21 != v24);
  }
  *a3 = 0;
  a3[24] = 0;
  a3[32] = 0;
  a3[152] = 0;
  return result;
}

void sub_20FCF21CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF21EC()
{
  return 0;
}

void sub_20FCF21F4(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "{unknown destination}");
}

uint64_t sub_20FCF221C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  void *v13;
  size_t v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  char v23;
  __int128 v24;
  void *v25;
  size_t v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;

  v4 = a1 + 24;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  v6 = a1 + 72;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = a1 + 96;
  v8 = a1 + 120;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 4);
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 152), (void *)a2[3], a2[4]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_QWORD *)(a1 + 168) = a2[5];
      *(_OWORD *)(a1 + 152) = v9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 175) = 0;
    *(_BYTE *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
  v10 = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 208) = a2[28];
  *(_OWORD *)(a1 + 192) = v10;
  if (*((_BYTE *)a2 + 200))
  {
    if (a2 + 7 != (_QWORD *)a1)
    {
      v11 = *((_BYTE *)a2 + 79);
      if (*(char *)(a1 + 23) < 0)
      {
        if (v11 >= 0)
          v13 = a2 + 7;
        else
          v13 = (void *)a2[7];
        if (v11 >= 0)
          v14 = *((unsigned __int8 *)a2 + 79);
        else
          v14 = a2[8];
        sub_20E867CBC((void **)a1, v13, v14);
      }
      else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)a1, (void *)a2[7], a2[8]);
      }
      else
      {
        v12 = *(_OWORD *)(a2 + 7);
        *(_QWORD *)(a1 + 16) = a2[9];
        *(_OWORD *)a1 = v12;
      }
    }
    if ((_QWORD *)v4 != a2 + 10)
    {
      v15 = *((_BYTE *)a2 + 103);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v15 >= 0)
          v17 = a2 + 10;
        else
          v17 = (void *)a2[10];
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)a2 + 103);
        else
          v18 = a2[11];
        sub_20E867CBC((void **)v4, v17, v18);
      }
      else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v4, (void *)a2[10], a2[11]);
      }
      else
      {
        v16 = *((_OWORD *)a2 + 5);
        *(_QWORD *)(v4 + 16) = a2[12];
        *(_OWORD *)v4 = v16;
      }
    }
    if ((_QWORD *)v5 != a2 + 13)
    {
      v19 = *((_BYTE *)a2 + 127);
      if (*(char *)(a1 + 71) < 0)
      {
        if (v19 >= 0)
          v21 = a2 + 13;
        else
          v21 = (void *)a2[13];
        if (v19 >= 0)
          v22 = *((unsigned __int8 *)a2 + 127);
        else
          v22 = a2[14];
        sub_20E867CBC((void **)v5, v21, v22);
      }
      else if ((*((_BYTE *)a2 + 127) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v5, (void *)a2[13], a2[14]);
      }
      else
      {
        v20 = *(_OWORD *)(a2 + 13);
        *(_QWORD *)(v5 + 16) = a2[15];
        *(_OWORD *)v5 = v20;
      }
    }
    if ((_QWORD *)v6 != a2 + 16)
    {
      v23 = *((_BYTE *)a2 + 151);
      if (*(char *)(a1 + 95) < 0)
      {
        if (v23 >= 0)
          v25 = a2 + 16;
        else
          v25 = (void *)a2[16];
        if (v23 >= 0)
          v26 = *((unsigned __int8 *)a2 + 151);
        else
          v26 = a2[17];
        sub_20E867CBC((void **)v6, v25, v26);
      }
      else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v6, (void *)a2[16], a2[17]);
      }
      else
      {
        v24 = *((_OWORD *)a2 + 8);
        *(_QWORD *)(v6 + 16) = a2[18];
        *(_OWORD *)v6 = v24;
      }
    }
    if ((_QWORD *)v7 != a2 + 19)
    {
      v27 = *((_BYTE *)a2 + 175);
      if (*(char *)(a1 + 119) < 0)
      {
        if (v27 >= 0)
          v29 = a2 + 19;
        else
          v29 = (void *)a2[19];
        if (v27 >= 0)
          v30 = *((unsigned __int8 *)a2 + 175);
        else
          v30 = a2[20];
        sub_20E867CBC((void **)v7, v29, v30);
      }
      else if ((*((_BYTE *)a2 + 175) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v7, (void *)a2[19], a2[20]);
      }
      else
      {
        v28 = *(_OWORD *)(a2 + 19);
        *(_QWORD *)(v7 + 16) = a2[21];
        *(_OWORD *)v7 = v28;
      }
    }
    if ((_QWORD *)v8 != a2 + 22)
    {
      v31 = *((_BYTE *)a2 + 199);
      if (*(char *)(a1 + 143) < 0)
      {
        if (v31 >= 0)
          v33 = a2 + 22;
        else
          v33 = (void *)a2[22];
        if (v31 >= 0)
          v34 = *((unsigned __int8 *)a2 + 199);
        else
          v34 = a2[23];
        sub_20E867CBC((void **)v8, v33, v34);
      }
      else if ((*((_BYTE *)a2 + 199) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v8, (void *)a2[22], a2[23]);
      }
      else
      {
        v32 = *((_OWORD *)a2 + 11);
        *(_QWORD *)(v8 + 16) = a2[24];
        *(_OWORD *)v8 = v32;
      }
    }
  }
  return a1;
}

void sub_20FCF251C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FCF25D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  void *v11;
  __int128 v12;
  int v13;
  int v14;
  void *v15[3];
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 119) < 0)
    v4 = *(_QWORD *)(a1 + 104);
  else
    v4 = *(unsigned __int8 *)(a1 + 119);
  if (v4)
  {
LABEL_21:
    v5 = 1;
    v6 = *(char *)(a1 + 175);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_28:
    v7 = *(_QWORD *)(a1 + 160);
    LOBYTE(__p[0]) = 0;
    v38 = 0;
    if (!v5)
      goto LABEL_55;
LABEL_29:
    sub_20E9E58A4((char *)v15, (__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a1 + 96), (__int128 *)(a1 + 120));
    if (!v38)
    {
      *(_OWORD *)__p = *(_OWORD *)v15;
      v11 = v15[2];
      memset(v15, 0, sizeof(v15));
      v12 = *(_OWORD *)v16;
      v16[0] = 0;
      v28 = v12;
      v27 = v11;
      v29 = v17;
      v16[1] = 0;
      v17 = 0;
      *(_OWORD *)v30 = *(_OWORD *)v18;
      v18[0] = 0;
      v18[1] = 0;
      v31 = v19;
      v33 = v21;
      v32 = *(_OWORD *)v20;
      v19 = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      *(_OWORD *)v34 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v23;
      v37 = v25;
      v36 = v24;
      v23 = 0;
      v24 = 0uLL;
      v25 = 0;
      v38 = 1;
      goto LABEL_52;
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v15;
    v27 = v15[2];
    HIBYTE(v15[2]) = 0;
    LOBYTE(v15[0]) = 0;
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v28 = *(_OWORD *)v16;
    v29 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    *(_OWORD *)v30 = *(_OWORD *)v18;
    v31 = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    v32 = *(_OWORD *)v20;
    v33 = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20[0]) = 0;
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    *(_OWORD *)v34 = *(_OWORD *)v22;
    v35 = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      v36 = v24;
      v37 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_42;
LABEL_52:
      if (SHIBYTE(v19) < 0)
      {
LABEL_43:
        operator delete(v18[0]);
        if (SHIBYTE(v17) < 0)
          goto LABEL_44;
        goto LABEL_54;
      }
LABEL_53:
      if (SHIBYTE(v17) < 0)
      {
LABEL_44:
        operator delete(v16[0]);
        if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_45;
      }
LABEL_54:
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
        goto LABEL_55;
LABEL_45:
      operator delete(v15[0]);
      v9 = *(_DWORD *)(a1 + 144);
      LODWORD(v15[0]) = v9;
      if (v7)
        goto LABEL_56;
      goto LABEL_46;
    }
    operator delete((void *)v36);
    v36 = v24;
    v37 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
LABEL_42:
    operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      goto LABEL_43;
    goto LABEL_53;
  }
  if (*(char *)(a1 + 143) < 0)
    v8 = *(_QWORD *)(a1 + 128);
  else
    v8 = *(unsigned __int8 *)(a1 + 143);
  v5 = v8 != 0;
  v6 = *(char *)(a1 + 175);
  if (v6 < 0)
    goto LABEL_28;
LABEL_22:
  v7 = v6;
  LOBYTE(__p[0]) = 0;
  v38 = 0;
  if (v5)
    goto LABEL_29;
LABEL_55:
  v9 = *(_DWORD *)(a1 + 144);
  LODWORD(v15[0]) = v9;
  if (v7)
  {
LABEL_56:
    if (*(char *)(a1 + 175) < 0)
    {
      sub_20E860C04(&v15[1], *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
      v9 = (int)v15[0];
    }
    else
    {
      *(_OWORD *)&v15[1] = *(_OWORD *)(a1 + 152);
      v16[0] = *(void **)(a1 + 168);
    }
    LOBYTE(v16[1]) = 1;
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v15[1];
    *(void **)(a2 + 40) = v16[0];
    v15[1] = 0;
    v15[2] = 0;
    v16[0] = 0;
    *(_BYTE *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 0;
    v10 = (char *)(a2 + 56);
    *(_BYTE *)(a2 + 200) = 0;
    if (v38)
      goto LABEL_60;
LABEL_47:
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
    *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
    if (!v38)
      return;
    goto LABEL_64;
  }
LABEL_46:
  LOBYTE(v15[1]) = 0;
  LOBYTE(v16[1]) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (char *)(a2 + 56);
  *(_BYTE *)(a2 + 200) = 0;
  if (!v38)
    goto LABEL_47;
LABEL_60:
  sub_20FCF4B4C(v10, (__int128 *)__p);
  *(_BYTE *)(a2 + 200) = 1;
  v13 = LOBYTE(v16[1]);
  v14 = SHIBYTE(v16[0]);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    if (v14 < 0)
      operator delete(v15[1]);
  }
  if (!v38)
    return;
LABEL_64:
  if (SHIBYTE(v37) < 0)
  {
    operator delete((void *)v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_68;
LABEL_74:
    operator delete(v30[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(__p[0]);
      return;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete((void *)v32);
  if (SHIBYTE(v31) < 0)
    goto LABEL_74;
LABEL_68:
  if ((SHIBYTE(v29) & 0x80000000) == 0)
    goto LABEL_69;
LABEL_75:
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_76;
}

void sub_20FCF2B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20FCF4D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FCF2B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20FCF4D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FCF2B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;

  sub_20FCF4D74(v31);
  if (*(_BYTE *)(v30 + 48) && *(char *)(v30 + 47) < 0)
    operator delete(*v32);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_20FCF4D74((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF2B98(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __int128 v13;

  v10 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a2 + 56))
  {
    v10 = *((unsigned __int8 *)a2 + 8);
    if (*((_BYTE *)a2 + 8))
      v7 = *a2;
    else
      v7 = 0;
    v2 = *((unsigned __int8 *)a2 + 24);
    if (*((_BYTE *)a2 + 24))
      v5 = a2[2];
    else
      v5 = 0;
    v3 = *((unsigned __int8 *)a2 + 48);
    v11 = (unint64_t)"size_limit" & 0xFF;
    if (*((_BYTE *)a2 + 48))
    {
      v8 = a2[4];
      v3 = v8 >> 8;
      v6 = *((_BYTE *)a2 + 40);
      v4 = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
      v4 = 0;
    }
    v12 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)a1 = "archiving_options";
  *(_QWORD *)(a1 + 8) = 17;
  *(_QWORD *)(a1 + 16) = v11 | (unint64_t)"size_limit" & 0xFFFFFFFFFFFFFF00;
  *(_QWORD *)(a1 + 24) = 10;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = "duration_limit";
  *(_QWORD *)(a1 + 56) = 14;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 80) = "time_point_limit";
  *(_QWORD *)(a1 + 88) = 16;
  *(_BYTE *)(a1 + 96) = v8;
  *(_DWORD *)(a1 + 97) = v3;
  *(_BYTE *)(a1 + 103) = BYTE6(v3);
  *(_WORD *)(a1 + 101) = WORD2(v3);
  *(_BYTE *)(a1 + 104) = v6;
  *(_BYTE *)(a1 + 112) = v4;
  *(_BYTE *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = "server_path";
  *(_QWORD *)(a1 + 136) = 11;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    if (*((char *)a2 + 87) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 144), (void *)a2[8], a2[9]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 4);
      *(_QWORD *)(a1 + 160) = a2[10];
      *(_OWORD *)(a1 + 144) = v13;
    }
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20FCF2CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 168))
  {
    if (*(char *)(v1 + 167) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20FCF2D18@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (!result[120])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    v10 = a2 + 64;
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 88) = 0;
    if (!result[168])
      return result;
    goto LABEL_13;
  }
  v4 = result[40];
  if (result[40])
    v5 = *((_QWORD *)result + 4);
  else
    v5 = 0;
  v6 = *((_QWORD *)result + 8);
  v7 = result[72];
  if (!result[72])
    v6 = 0;
  if (result[112])
  {
    v8 = *((_QWORD *)result + 12);
    v2 = result[104];
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v2;
  *(_BYTE *)(a2 + 48) = v9;
  *(_BYTE *)(a2 + 64) = 0;
  v10 = a2 + 64;
  *(_BYTE *)(a2 + 56) = 1;
  *(_BYTE *)(a2 + 88) = 0;
  if (result[168])
  {
LABEL_13:
    if ((char)result[167] < 0)
    {
      result = (unsigned __int8 *)sub_20E860C04((_BYTE *)v10, *((void **)result + 18), *((_QWORD *)result + 19));
    }
    else
    {
      *(_OWORD *)v10 = *((_OWORD *)result + 9);
      *(_QWORD *)(v10 + 16) = *((_QWORD *)result + 20);
    }
    *(_BYTE *)(a2 + 88) = 1;
  }
  return result;
}

void sub_20FCF2E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 88))
  {
    if (*(char *)(v1 + 87) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF2E48(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  int v5;
  int v6;
  _BYTE *v7;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04(&v9, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v9 = *a2;
      __p[0] = *((void **)a2 + 2);
    }
    v4 = v9;
    LODWORD(v18) = __p[0];
    *(_DWORD *)((char *)&v18 + 3) = *(_DWORD *)((char *)__p + 3);
    v5 = SHIBYTE(__p[0]);
    *(_QWORD *)a1 = "detail";
    *(_QWORD *)(a1 + 8) = 6;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (v5 < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 16), (void *)v4, *((unint64_t *)&v4 + 1));
      *(_BYTE *)(a1 + 40) = 1;
      operator delete((void *)v4);
      if (*((_BYTE *)a2 + 88))
        goto LABEL_9;
    }
    else
    {
      *(_OWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 32) = v18;
      *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)&v18 + 3);
      *(_BYTE *)(a1 + 39) = v5;
      *(_BYTE *)(a1 + 40) = 1;
      if (*((_BYTE *)a2 + 88))
        goto LABEL_9;
    }
LABEL_12:
    *(_QWORD *)(a1 + 48) = "location";
    *(_QWORD *)(a1 + 56) = 8;
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    return a1;
  }
  *(_QWORD *)a1 = "detail";
  *(_QWORD *)(a1 + 8) = 6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (!*((_BYTE *)a2 + 88))
    goto LABEL_12;
LABEL_9:
  *(_QWORD *)&v18 = "file";
  *((_QWORD *)&v18 + 1) = 4;
  if (*((char *)a2 + 55) < 0)
  {
    sub_20E860C04(&v19, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v19 = a2[2];
    v20 = *((_QWORD *)a2 + 6);
  }
  *(_QWORD *)&v21 = "line";
  *((_QWORD *)&v21 + 1) = 4;
  v22 = *((_QWORD *)a2 + 7);
  *(_QWORD *)&v23 = "function";
  *((_QWORD *)&v23 + 1) = 8;
  if (*((char *)a2 + 87) < 0)
  {
    sub_20E860C04(&v24, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v24 = a2[4];
    v25 = *((_QWORD *)a2 + 10);
  }
  v9 = v18;
  *(_OWORD *)__p = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v16 = v25;
  v14 = v23;
  *(_OWORD *)v15 = v24;
  v17 = 1;
  *(_QWORD *)(a1 + 48) = "location";
  *(_QWORD *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 64) = v9;
  v6 = SHIBYTE(v11);
  if (SHIBYTE(v11) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 80), __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 96) = v11;
  }
  *(_OWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  v7 = (_BYTE *)(a1 + 144);
  if (SHIBYTE(v16) < 0)
  {
    sub_20E860C04(v7, v15[0], (unint64_t)v15[1]);
    *(_BYTE *)(a1 + 168) = 1;
    operator delete(v15[0]);
    if ((v6 & 0x80000000) == 0)
      return a1;
    goto LABEL_22;
  }
  *(_OWORD *)v7 = *(_OWORD *)v15;
  *(_QWORD *)(a1 + 160) = v16;
  *(_BYTE *)(a1 + 168) = 1;
  if (v6 < 0)
LABEL_22:
    operator delete(__p[0]);
  return a1;
}

void sub_20FCF3130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void **v32;
  void **v33;
  _BYTE *v34;

  if (*(char *)(v31 + 103) < 0)
    operator delete(*v33);
  sub_20FCF31C0(v31 + 64);
  sub_20FCF31C0((uint64_t)&a9);
  if (*v34)
  {
    if (*(char *)(v31 + 39) < 0)
      operator delete(*v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF31C0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 104))
    return a1;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20FCF3220(uint64_t a1, int *a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  void *v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  void *__p[2];
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  v4 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 16))(*((_QWORD *)a2 + 1));
  *(_QWORD *)a1 = "category";
  *(_QWORD *)(a1 + 8) = 8;
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 39) = v5;
  v7 = (void *)(a1 + 16);
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  v10 = *a2;
  *(_QWORD *)(a1 + 40) = "code";
  *(_QWORD *)(a1 + 48) = 4;
  *(_QWORD *)(a1 + 56) = v10;
  if (*((_BYTE *)a2 + 112))
  {
    sub_20FCF2E48((uint64_t)&v27, (__int128 *)a2 + 1);
    v12 = v27;
    LOBYTE(v13) = 0;
    v15 = 0;
    if (v30)
    {
      v13 = *(_OWORD *)__p;
      v14 = v29;
      __p[1] = 0;
      v29 = 0;
      __p[0] = 0;
      v15 = 1;
    }
    v16 = v31;
    LOBYTE(v17) = 0;
    v25 = 0;
    if (v40)
    {
      v17 = v32;
      *(_OWORD *)v18 = v33;
      v19 = v34;
      v33 = 0uLL;
      v20 = v35;
      v21 = v36;
      v22 = v37;
      *(_OWORD *)v23 = v38;
      v24 = v39;
      v34 = 0;
      v38 = 0uLL;
      v39 = 0;
      v25 = 1;
    }
    v26 = 1;
    if (v30 && SHIBYTE(v29) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(v12) = 0;
    v26 = 0;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = "info";
  *(_QWORD *)(a1 + 72) = 4;
  *(_BYTE *)(a1 + 256) = 0;
  sub_20FCF5454(a1 + 80, (uint64_t)&v12);
  if (v26)
  {
    if (!v25)
      goto LABEL_22;
    if (SHIBYTE(v24) < 0)
    {
      operator delete(v23[0]);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
      {
LABEL_22:
        if (!v15)
          return a1;
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v18[0]);
    if (!v15)
      return a1;
LABEL_23:
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
  return a1;
}

void sub_20FCF3480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF34F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 176))
    return a1;
  if (*(_BYTE *)(a1 + 168))
  {
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 80));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 144));
    if (*(char *)(a1 + 103) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20FCF3580(uint64_t a1, char *a2, void **a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *__p;
  __int128 v35;
  unsigned __int8 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  unsigned __int8 v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  LOBYTE(v18) = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v25 = 0;
  sub_20FCF5828(a2 + 16, (uint64_t)&v18, (uint64_t)v26);
  sub_210234EE8((uint64_t)v26, a3, (uint64_t)&__p);
  v12 = v36;
  if (v36)
  {
    v13 = __p;
    v45[0] = v35;
    *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v35 + 7);
    v7 = HIBYTE(v35);
    v35 = 0uLL;
    __p = 0;
    v14 = v42;
    if (v42)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
    v14 = v42;
    if (v42)
    {
LABEL_3:
      v15 = v37;
      v44[0] = v38;
      *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)((char *)&v38 + 7);
      v9 = HIBYTE(v38);
      v37 = 0;
      v38 = 0uLL;
      v10 = v39;
      v8 = v40;
      v43[0] = v41;
      *(_QWORD *)((char *)v43 + 7) = *(_QWORD *)((char *)&v41 + 7);
      v11 = HIBYTE(v41);
      v40 = 0;
      v41 = 0uLL;
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      if (!v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v15 = 0;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v12)
  {
LABEL_4:
    v16 = v45[0];
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v45 + 7);
    *(_BYTE *)(a1 + 39) = v7;
    v45[0] = 0;
    *(_QWORD *)((char *)v45 + 7) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_5:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v14)
  {
    v17 = v44[0];
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a1 + 71) = v9;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v43[0];
    *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v43 + 7);
    *(_BYTE *)(a1 + 103) = v11;
    v43[0] = 0;
    *(_QWORD *)((char *)v43 + 7) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v42;
  }
  if (v14)
  {
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_33:
      operator delete(v37);
      if (!v36)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v40);
    if (SHIBYTE(v38) < 0)
      goto LABEL_33;
  }
LABEL_13:
  if (!v36)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
LABEL_16:
  if (!v33)
    goto LABEL_19;
  if ((v32 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_36:
    operator delete(v29);
    if (!v28)
      goto LABEL_22;
    goto LABEL_20;
  }
  operator delete(v31);
  if (v30 < 0)
    goto LABEL_36;
LABEL_19:
  if (!v28)
    goto LABEL_22;
LABEL_20:
  if (v27 < 0)
    operator delete(v26[0]);
LABEL_22:
  if (!v25)
    goto LABEL_25;
  if (v24 < 0)
  {
    operator delete(v23);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_25:
      if (!v20)
        return;
      goto LABEL_26;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v21);
  if (!v20)
    return;
LABEL_26:
  if (v19 < 0)
    operator delete(v18);
}

void sub_20FCF384C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20FCF5518((uint64_t)va1);
  sub_20FCF5518((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCF3868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FCF5518((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF387C(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  void *v6[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  void *v17[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  void *v22[2];
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 __p;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;

  *(_QWORD *)a1 = "output_paths";
  *(_QWORD *)(a1 + 8) = 12;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    sub_20E8ADB20((char *)(a1 + 16), *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 40) = 1;
  }
  if (*(_BYTE *)(a2 + 152))
  {
    sub_20FCF3220((uint64_t)&v27, (int *)(a2 + 32));
    v7 = v29;
    v5 = v27;
    *(_OWORD *)v6 = v28;
    v28 = 0uLL;
    v29 = 0;
    v8 = v30;
    v9 = v31;
    v10 = v32;
    LOBYTE(v11) = 0;
    v25 = 0;
    if (v47)
    {
      v11 = v33;
      LOBYTE(v12[0]) = 0;
      v14 = 0;
      if (v36)
      {
        *(_OWORD *)v12 = __p;
        v13 = v35;
        v35 = 0;
        __p = 0uLL;
        v14 = 1;
      }
      v15 = v37;
      LOBYTE(v16) = 0;
      v24 = 0;
      if (v46)
      {
        v16 = v38;
        v18 = v40;
        *(_OWORD *)v17 = v39;
        v39 = 0uLL;
        v19 = v41;
        v20 = v42;
        v21 = v43;
        *(_OWORD *)v22 = v44;
        v23 = v45;
        v40 = 0;
        v44 = 0uLL;
        v45 = 0;
        v24 = 1;
      }
      v25 = 1;
      v26 = 1;
      if (v36)
      {
        if (SHIBYTE(v35) < 0)
        {
          operator delete((void *)__p);
          if (SHIBYTE(v29) < 0)
            operator delete((void *)v28);
        }
      }
    }
    else
    {
      v26 = 1;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v26 = 0;
  }
  *(_QWORD *)(a1 + 48) = "error";
  *(_QWORD *)(a1 + 56) = 5;
  sub_20FCF559C((_BYTE *)(a1 + 64), (uint64_t)&v5);
  if (v26)
  {
    if (!v25)
      goto LABEL_23;
    if (!v24)
      goto LABEL_20;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_20:
        if (v14)
          goto LABEL_21;
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v17[0]);
    if (v14)
    {
LABEL_21:
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
    }
LABEL_23:
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
  }
  return a1;
}

void sub_20FCF3AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FCF3C14(v1);
  _Unwind_Resume(a1);
}

void sub_20FCF3AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;

  if (*(_BYTE *)(v1 + 40))
  {
    v4 = (void **)*v2;
    if (*v2)
    {
      v5 = *(void ***)(v1 + 24);
      v6 = *v2;
      if (v5 != v4)
      {
        do
        {
          if (*((char *)v5 - 1) < 0)
            operator delete(*(v5 - 3));
          v5 -= 3;
        }
        while (v5 != v4);
        v6 = *v2;
      }
      *(_QWORD *)(v1 + 24) = v4;
      operator delete(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FCF3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20FCF3B70((uint64_t)&a9);
  sub_20FCF3C14(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF3B70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 264))
    return a1;
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_11;
  if (*(_BYTE *)(a1 + 248))
  {
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 183) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 160));
      if (!*(_BYTE *)(a1 + 120))
        goto LABEL_11;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 224));
    if (*(char *)(a1 + 183) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_11;
LABEL_7:
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
LABEL_11:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20FCF3C14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20FCF3C8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  int v6;
  __int128 *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t **v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  int v23;
  uint64_t v24;
  int v25;
  void **v26;
  void **v27;
  void *v28;
  _BOOL4 v31;
  _QWORD *v32;
  const char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  std::string *v42;
  char v43;
  void *v44[2];
  uint64_t v45;
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  _BYTE __p[32];
  std::string *v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  void *v62;
  _BYTE v63[15];
  char v64;
  char v65;
  void *v66;
  _BYTE v67[15];
  char v68;
  uint64_t v69;
  void *v70;
  _BYTE v71[15];
  char v72;
  char v73;
  char v74;
  _BYTE *v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  char v85;
  char v86;
  _BYTE __dst[24];
  uint64_t v88;
  _BYTE v89[24];
  void *v90;
  void *v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  std::string v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 352))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 160) = 0;
    return;
  }
  LOBYTE(v37[0]) = 0;
  v39 = 0;
  v6 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v37[0] = 0;
    v37[1] = 0;
    v38 = 0;
    sub_20E8ADB20((char *)v37, *(__int128 **)(a1 + 32), *(__int128 **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
    v6 = 1;
    v39 = 1;
  }
  v7 = &v40;
  v8 = (void *)*(unsigned __int8 *)(a1 + 344);
  if (!*(_BYTE *)(a1 + 344))
  {
    LOBYTE(v40) = 0;
    v51 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v6)
      goto LABEL_98;
    goto LABEL_97;
  }
  if (!*(_BYTE *)(a1 + 336))
  {
    LOBYTE(v62) = 0;
    v74 = 0;
    goto LABEL_38;
  }
  __p[0] = 0;
  __p[24] = 0;
  if (!*(_BYTE *)(a1 + 200))
  {
    v9 = 0;
    v10 = *(unsigned __int8 *)(a1 + 328);
    if (*(_BYTE *)(a1 + 328))
      goto LABEL_20;
LABEL_14:
    v11 = 0;
    if (v9)
      goto LABEL_27;
LABEL_15:
    v12 = 0;
    if (v10)
      goto LABEL_28;
LABEL_16:
    v11 = 0;
    if (!v9)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (*(char *)(a1 + 199) < 0)
  {
    sub_20E860C04(__p, *(void **)(a1 + 176), *(_QWORD *)(a1 + 184));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 176);
    *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 192);
  }
  v9 = 1;
  __p[24] = 1;
  v10 = *(unsigned __int8 *)(a1 + 328);
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_14;
LABEL_20:
  if (*(char *)(a1 + 263) < 0)
  {
    sub_20E860C04(__dst, *(void **)(a1 + 240), *(_QWORD *)(a1 + 248));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 240);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 256);
  }
  v13 = *(_QWORD *)(a1 + 280);
  v88 = v13;
  if (*(char *)(a1 + 327) < 0)
  {
    sub_20E860C04(v89, *(void **)(a1 + 304), *(_QWORD *)(a1 + 312));
    v36 = v88;
  }
  else
  {
    v36 = v13;
    *(_OWORD *)v89 = *(_OWORD *)(a1 + 304);
    *(_QWORD *)&v89[16] = *(_QWORD *)(a1 + 320);
  }
  v11 = *(void **)__dst;
  v78[0] = *(void **)&__dst[8];
  *(void **)((char *)v78 + 7) = *(void **)&__dst[15];
  v2 = __dst[23];
  v8 = *(void **)v89;
  *(_QWORD *)&v97 = *(_QWORD *)&v89[8];
  *(_QWORD *)((char *)&v97 + 7) = *(_QWORD *)&v89[15];
  LOBYTE(v7) = v89[23];
  v9 = __p[24];
  if (!__p[24])
    goto LABEL_15;
LABEL_27:
  v12 = *(void **)__p;
  *(_QWORD *)__dst = *(_QWORD *)&__p[8];
  *(_QWORD *)&__dst[7] = *(_QWORD *)&__p[15];
  v3 = __p[23];
  memset(__p, 0, 24);
  if (!v10)
    goto LABEL_16;
LABEL_28:
  v100.__r_.__value_.__l.__data_ = (std::string::pointer)v78[0];
  *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v78 + 7);
  v76[0] = (void *)v97;
  *(void **)((char *)v76 + 7) = *(void **)((char *)&v97 + 7);
  if (!v9)
    goto LABEL_31;
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
  {
    v14 = v8;
    v15 = v2;
    operator delete(*(void **)__p);
    v2 = v15;
    v8 = v14;
    v65 = 0;
LABEL_32:
    v62 = v12;
    *(_QWORD *)v63 = *(_QWORD *)__dst;
    *(_QWORD *)&v63[7] = *(_QWORD *)&__dst[7];
    v64 = v3;
    *(_QWORD *)__dst = 0;
    *(_QWORD *)&__dst[7] = 0;
    v65 = 1;
    v12 = 0;
    v3 = 0;
    goto LABEL_33;
  }
LABEL_31:
  LOBYTE(v62) = 0;
  v65 = 0;
  if (v9)
    goto LABEL_32;
LABEL_33:
  LOBYTE(v66) = 0;
  v73 = 0;
  if (v10)
  {
    v66 = v11;
    *(_QWORD *)v67 = v100.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v67[7] = *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7);
    v68 = v2;
    v100.__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7) = 0;
    v69 = v36;
    v70 = v8;
    *(void **)v71 = v76[0];
    *(void **)&v71[7] = *(void **)((char *)v76 + 7);
    v72 = (char)v7;
    memset(v76, 0, 15);
    v73 = 1;
  }
  v74 = 1;
  if (v9 && v3 < 0)
    operator delete(v12);
LABEL_38:
  v16 = (uint64_t **)(a1 + 96);
  *(_QWORD *)__dst = &off_24CA05C28;
  v17 = *(unsigned __int8 *)(a1 + 119);
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a1 + 104);
  if (v17 == 8)
  {
    if (v18 >= 0)
      v19 = (uint64_t *)(a1 + 96);
    else
      v19 = *v16;
    v20 = *v19;
    std::error_category::~error_category((std::error_category *)__dst);
    if (v20 == 0x6E67642E64337663)
    {
      *(_QWORD *)__p = &off_24CA05C28;
      switch(*(_BYTE *)(a1 + 136))
      {
        case 0:
        case 1:
        case 2:
          goto LABEL_160;
        case 3:
          __dst[23] = 18;
          v21 = "internal exception";
          goto LABEL_128;
        case 4:
          v32 = operator new(0x20uLL);
          qmemcpy(v32, "diagnostics processing error", 28);
          v34 = (char *)v32 + 28;
          goto LABEL_159;
        case 5:
          v32 = operator new(0x20uLL);
          v33 = "diagnostics server error";
          goto LABEL_157;
        case 6:
          v32 = operator new(0x20uLL);
          v33 = "diagnostics client error";
LABEL_157:
          *(_OWORD *)v32 = *(_OWORD *)v33;
          v32[2] = *((_QWORD *)v33 + 2);
          v34 = v32 + 3;
LABEL_159:
          *v34 = 0;
          operator delete(v32);
LABEL_160:
          std::error_category::~error_category((std::error_category *)__p);
          goto LABEL_161;
        default:
          __dst[23] = 18;
          v21 = "unknown error code";
LABEL_128:
          *(_OWORD *)__dst = *(_OWORD *)v21;
          *(_WORD *)&__dst[16] = *((_WORD *)v21 + 8);
          v31 = *(_QWORD *)__dst != 0x206E776F6E6B6E75
             || *(_QWORD *)&__dst[8] != 0x6F6320726F727265
             || *(unsigned __int16 *)&__dst[16] != 25956;
          std::error_category::~error_category((std::error_category *)__p);
          if (!v31)
          {
            sub_20E89EFE4(v78, (__int128 *)&v62);
            sub_20EA5B348((uint64_t)__dst, 1u, (__int128 *)v78);
            if (v86)
            {
              if (v85)
              {
                if (v84 < 0)
                  operator delete(v83);
                if (v82 < 0)
                  operator delete(v81);
              }
              if (v80 && v79 < 0)
                operator delete(v78[0]);
            }
            v99 = 0;
            sub_20E991A58(&v97, "error of unknown error code ");
            std::to_string(&v100, *(_QWORD *)(a1 + 136));
            *(_QWORD *)__p = &v97;
            *(_QWORD *)&__p[8] = &v100;
            *(_QWORD *)&__p[16] = &v97;
            *(_QWORD *)&__p[24] = &v100;
            v53 = &v100;
            if (v99 == -1)
              sub_20E877AB8();
            v75 = __p;
            ((void (*)(_BYTE **, __int128 *))off_24CA053E0[v99])(&v75, &v97);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = &v97;
            *(_QWORD *)&__p[8] = ": ";
            *(_QWORD *)&__p[16] = &v97;
            *(_QWORD *)&__p[24] = ": ";
            v53 = (std::string *)": ";
            if (v99 == -1)
              sub_20E877AB8();
            v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, __int128 *))off_24CA053F8[v99])(&v100, &v97);
            if (v99 == -1)
              sub_20E877AB8();
            *(_QWORD *)__p = &v100;
            ((void (*)(void **__return_ptr, _BYTE *, __int128 *))off_24CA05410[v99])(v76, __p, &v97);
            if (v99 != -1)
              ((void (*)(_BYTE *, __int128 *))off_24CA053C8[v99])(__p, &v97);
            goto LABEL_67;
          }
LABEL_161:
          v35 = *(_QWORD *)(a1 + 136);
          sub_20E89EFE4(__dst, (__int128 *)&v62);
          sub_20EA5B348((uint64_t)__p, v35, (__int128 *)__dst);
          if (v93)
          {
            if (v92)
            {
              if (SHIBYTE(v91) < 0)
                operator delete(v90);
              if ((v89[23] & 0x80000000) != 0)
                operator delete(*(void **)v89);
            }
            if ((_BYTE)v88 && (__dst[23] & 0x80000000) != 0)
            {
              v22 = *(void **)__dst;
              goto LABEL_78;
            }
          }
          break;
      }
      goto LABEL_79;
    }
  }
  else
  {
    std::error_category::~error_category((std::error_category *)__dst);
  }
  sub_20E89EFE4(v78, (__int128 *)&v62);
  sub_20EA5B348((uint64_t)__dst, 1u, (__int128 *)v78);
  if (v86)
  {
    if (v85)
    {
      if (v84 < 0)
        operator delete(v83);
      if (v82 < 0)
        operator delete(v81);
    }
    if (v80 && v79 < 0)
      operator delete(v78[0]);
  }
  v99 = -1;
  if (*(char *)(a1 + 119) < 0)
  {
    sub_20E860C04(&v97, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    v97 = *(_OWORD *)v16;
    v98 = *(_QWORD *)(a1 + 112);
  }
  v99 = 1;
  *(_QWORD *)__p = &v97;
  *(_QWORD *)&__p[8] = " error of error code ";
  *(_QWORD *)&__p[16] = &v97;
  *(_QWORD *)&__p[24] = " error of error code ";
  v53 = (std::string *)" error of error code ";
  sub_20E9EC1B8((uint64_t *)&__p[16], (uint64_t)&v97);
  std::to_string(&v100, *(_QWORD *)(a1 + 136));
  *(_QWORD *)__p = &v97;
  *(_QWORD *)&__p[8] = &v100;
  *(_QWORD *)&__p[16] = &v97;
  *(_QWORD *)&__p[24] = &v100;
  v53 = &v100;
  if (v99 == -1)
    sub_20E877AB8();
  v75 = __p;
  ((void (*)(_BYTE **, __int128 *))off_24CA053E0[v99])(&v75, &v97);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  *(_QWORD *)__p = &v97;
  *(_QWORD *)&__p[8] = ": ";
  *(_QWORD *)&__p[16] = &v97;
  *(_QWORD *)&__p[24] = ": ";
  v53 = (std::string *)": ";
  if (v99 == -1)
    sub_20E877AB8();
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  ((void (*)(std::string *, __int128 *))off_24CA053F8[v99])(&v100, &v97);
  if (v99 == -1)
    sub_20E877AB8();
  *(_QWORD *)__p = &v100;
  ((void (*)(void **__return_ptr, _BYTE *, __int128 *))off_24CA05410[v99])(v76, __p, &v97);
  if (v99 != -1)
    ((void (*)(_BYTE *, __int128 *))off_24CA053C8[v99])(__p, &v97);
LABEL_67:
  sub_20FCF3580((uint64_t)__p, __dst, v76);
  if (v77 < 0)
    operator delete(v76[0]);
  if (v96)
  {
    if (v95)
    {
      if (v94 < 0)
        operator delete(v91);
      if (SHIBYTE(v90) < 0)
        operator delete(*(void **)&v89[16]);
    }
    if (v89[8] && (v89[7] & 0x80000000) != 0)
    {
      v22 = *(void **)&__dst[16];
LABEL_78:
      operator delete(v22);
    }
  }
LABEL_79:
  if (v74)
  {
    if (v73)
    {
      if (v72 < 0)
        operator delete(v70);
      if (v68 < 0)
        operator delete(v66);
    }
    if (v65 && v64 < 0)
      operator delete(v62);
  }
  v40 = *(_OWORD *)__p;
  LOBYTE(v41) = 0;
  v50 = 0;
  if (!v61)
  {
    v51 = 1;
    v25 = v39;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v25)
      goto LABEL_98;
LABEL_97:
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_QWORD *)(a2 + 16) = v38;
    v37[1] = 0;
    v38 = 0;
    v37[0] = 0;
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_98;
  }
  v43 = 0;
  if (v54)
  {
    v41 = *(_OWORD *)&__p[16];
    v42 = v53;
    *(_QWORD *)&__p[24] = 0;
    v53 = 0;
    *(_QWORD *)&__p[16] = 0;
    v43 = 1;
  }
  LOBYTE(v44[0]) = 0;
  v49 = 0;
  if (v60)
  {
    v45 = v56;
    *(_OWORD *)v44 = v55;
    v55 = 0uLL;
    v46 = v57;
    *(_OWORD *)v47 = v58;
    v48 = v59;
    v56 = 0;
    v58 = 0uLL;
    v59 = 0;
    v49 = 1;
  }
  v50 = 1;
  v51 = 1;
  if (v54 && SHIBYTE(v53) < 0)
    operator delete(*(void **)&__p[16]);
  v23 = v39;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v23)
    goto LABEL_97;
LABEL_98:
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  if (v51)
  {
    *(_OWORD *)(a2 + 32) = v40;
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 144) = 0;
    if (v50)
    {
      *(_BYTE *)(a2 + 72) = 0;
      if (v43)
      {
        *(_OWORD *)(a2 + 48) = v41;
        *(_QWORD *)(a2 + 64) = v42;
        v42 = 0;
        v41 = 0uLL;
        *(_BYTE *)(a2 + 72) = 1;
      }
      *(_BYTE *)(a2 + 80) = 0;
      *(_BYTE *)(a2 + 136) = 0;
      if (!v49)
      {
        *(_BYTE *)(a2 + 144) = 1;
        *(_BYTE *)(a2 + 152) = 1;
        *(_BYTE *)(a2 + 160) = 1;
        if (!v43)
          goto LABEL_117;
        goto LABEL_115;
      }
      v24 = v46;
      *(_QWORD *)(a2 + 96) = v45;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v44;
      v44[0] = 0;
      v44[1] = 0;
      *(_QWORD *)(a2 + 104) = v24;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)v47;
      *(_QWORD *)(a2 + 128) = v48;
      v45 = 0;
      v47[0] = 0;
      v47[1] = 0;
      v48 = 0;
      *(_BYTE *)(a2 + 136) = 1;
      *(_BYTE *)(a2 + 144) = 1;
      *(_BYTE *)(a2 + 152) = 1;
      *(_BYTE *)(a2 + 160) = 1;
      if (SHIBYTE(v48) < 0)
      {
        operator delete(v47[0]);
        if ((SHIBYTE(v45) & 0x80000000) == 0)
        {
LABEL_105:
          if (!v43)
            goto LABEL_117;
LABEL_115:
          if (SHIBYTE(v42) < 0)
            operator delete((void *)v41);
          goto LABEL_117;
        }
      }
      else if ((SHIBYTE(v45) & 0x80000000) == 0)
      {
        goto LABEL_105;
      }
      operator delete(v44[0]);
      if (v43)
        goto LABEL_115;
    }
    else
    {
      *(_BYTE *)(a2 + 152) = 1;
      *(_BYTE *)(a2 + 160) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 160) = 1;
  }
LABEL_117:
  if (v39)
  {
    v26 = (void **)v37[0];
    if (v37[0])
    {
      v27 = (void **)v37[1];
      v28 = v37[0];
      if (v37[1] != v37[0])
      {
        do
        {
          if (*((char *)v27 - 1) < 0)
            operator delete(*(v27 - 3));
          v27 -= 3;
        }
        while (v27 != v26);
        v28 = v37[0];
      }
      v37[1] = v26;
      operator delete(v28);
    }
  }
}

void sub_20FCF4884(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20FCF49C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  sub_20E877A60(v47 - 160);
  sub_20E89EF58(&STACK[0x220]);
  sub_20E89F09C(&a47);
  sub_20EB9B16C(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FCF4A0C(uint64_t *a1, _OWORD *a2)
{
  std::runtime_error *exception;
  std::string v6;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  sub_20EA94AF4(a1, (uint64_t)__p);
  sub_210232668((unsigned __int8 *)__p, (uint64_t)&v9);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *a2 = v9;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20FCF4AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

char *sub_20FCF4B4C(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20E860C04(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_20E860C04(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  v10 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_20E860C04(v10, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v10 = v11;
  }
  return __dst;
}

void sub_20FCF4CB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF4D74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 144))
    return a1;
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_13:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_13;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_14:
  operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20FCF4E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if ((sub_20FCF4F2C((uint64_t)&v20, a2, a3) & 1) == 0 || **(_DWORD **)(a2 + 48) != **(_DWORD **)(a3 + 48))
    return 0;
  v5 = *(unsigned __int8 **)(a2 + 56);
  v6 = *(unsigned __int8 ***)(a3 + 56);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a3 + 56);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      goto LABEL_19;
    return 0;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v13 = *(uint64_t **)(a2 + 64);
  v14 = *(uint64_t **)(a3 + 64);
  v16 = *v13;
  v15 = v13[1];
  v18 = *v14;
  v17 = v14[1];
  return v16 == v18 && v15 == v17;
}

uint64_t sub_20FCF4F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t result;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  char v27;

  if (!sub_20FCF509C((uint64_t)&v27, a2, a3))
    return 0;
  v5 = *(unsigned __int8 **)(a2 + 32);
  v6 = *(unsigned __int8 ***)(a3 + 32);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a3 + 32);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      return 0;
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v13 = *(unsigned __int8 **)(a2 + 40);
  v14 = *(unsigned __int8 ***)(a3 + 40);
  v15 = v13[23];
  if ((v15 & 0x80u) == 0)
    v16 = (unsigned __int8 *)v13[23];
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = v14[1];
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = *(unsigned __int8 **)(a3 + 40);
  else
    v19 = *v14;
  if ((v15 & 0x80) != 0)
    return memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)) == 0;
  if (!v13[23])
    return 1;
  v20 = v15 - 1;
  do
  {
    v22 = *v13++;
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_20FCF509C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t result;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  char v27;

  if (!sub_20FCF520C((uint64_t)&v27, (const void ***)a2, (unsigned __int8 **)a3))
    return 0;
  v5 = *(unsigned __int8 **)(a2 + 16);
  v6 = *(unsigned __int8 ***)(a3 + 16);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a3 + 16);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      return 0;
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v13 = *(unsigned __int8 **)(a2 + 24);
  v14 = *(unsigned __int8 ***)(a3 + 24);
  v15 = v13[23];
  if ((v15 & 0x80u) == 0)
    v16 = (unsigned __int8 *)v13[23];
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = v14[1];
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = *(unsigned __int8 **)(a3 + 24);
  else
    v19 = *v14;
  if ((v15 & 0x80) != 0)
    return memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)) == 0;
  if (!v13[23])
    return 1;
  v20 = v15 - 1;
  do
  {
    v22 = *v13++;
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_20FCF520C(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  const void **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  const void *v9;
  int v10;
  unsigned __int8 *v12;
  uint64_t result;
  const void **v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;

  v4 = *a2;
  v5 = *a3;
  v6 = *((unsigned __int8 *)*a2 + 23);
  v7 = (size_t)(*a2)[1];
  if ((v6 & 0x80u) == 0)
    v8 = (const void *)*((unsigned __int8 *)*a2 + 23);
  else
    v8 = (*a2)[1];
  v9 = (const void *)v5[23];
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = (const void *)*((_QWORD *)v5 + 1);
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v12 = v5;
  else
    v12 = *(unsigned __int8 **)v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7))
      return 0;
  }
  else if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v14 = a2[1];
  v15 = (unsigned __int8 **)a3[1];
  v16 = *((unsigned __int8 *)v14 + 23);
  if ((v16 & 0x80u) == 0)
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  else
    v17 = (unsigned __int8 *)v14[1];
  v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  v19 = (char)v18;
  if ((char)v18 < 0)
    v18 = v15[1];
  if (v17 != v18)
    return 0;
  if (v19 >= 0)
    v20 = a3[1];
  else
    v20 = *v15;
  if ((v16 & 0x80) != 0)
    return memcmp(*v14, v20, (size_t)v14[1]) == 0;
  if (!*((_BYTE *)v14 + 23))
    return 1;
  v21 = v16 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v14;
    v14 = (const void **)((char *)v14 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

uint64_t sub_20FCF535C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v4;
    }
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v6 = (_BYTE *)(a1 + 80);
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20E860C04(v6, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)v6 = v7;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_20FCF541C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
  {
    operator delete(*v2);
    sub_20FCF31C0(v1);
    _Unwind_Resume(a1);
  }
  sub_20FCF31C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF5454(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 176))
  {
    v3 = result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_BYTE *)(result + 16) = 0;
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      if (*(char *)(a2 + 39) < 0)
      {
        sub_20E860C04((_BYTE *)(result + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        v4 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(result + 16) = v4;
      }
      *(_BYTE *)(v3 + 40) = 1;
    }
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    result = sub_20FCF535C(v3 + 64, a2 + 64);
    *(_BYTE *)(v3 + 176) = 1;
  }
  return result;
}

void sub_20FCF54F0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 40))
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF5518(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_8;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_BYTE *sub_20FCF559C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[264] = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    sub_20FCF5648((uint64_t)a1, a2);
    a1[264] = 1;
  }
  return a1;
}

void sub_20FCF55DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 264))
  {
    if (*(_BYTE *)(v1 + 256))
    {
      if (*(_BYTE *)(v1 + 248))
      {
        if (*(char *)(v1 + 247) < 0)
          operator delete(*(void **)(v1 + 224));
        if (*(char *)(v1 + 183) < 0)
          operator delete(*(void **)(v1 + 160));
      }
      if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
        operator delete(*(void **)(v1 + 96));
    }
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF5648(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 256) = 0;
  sub_20FCF5454(a1 + 80, a2 + 80);
  return a1;
}

void sub_20FCF56D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 256))
  {
    if (*(_BYTE *)(v1 + 248))
    {
      if (*(char *)(v1 + 247) < 0)
        operator delete(*(void **)(v1 + 224));
      if (*(char *)(v1 + 183) < 0)
        operator delete(*(void **)(v1 + 160));
    }
    if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
      operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF573C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_13;
  if (!*(_BYTE *)(a1 + 320))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 312))
    goto LABEL_6;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
    {
LABEL_6:
      if (*(_BYTE *)(a1 + 184))
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 224));
  if (*(_BYTE *)(a1 + 184))
  {
LABEL_7:
    if (*(char *)(a1 + 183) < 0)
      operator delete(*(void **)(a1 + 160));
  }
LABEL_11:
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
LABEL_13:
  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

char *sub_20FCF5828@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = result[96];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v4)
  {
    v5 = result;
    if (result[24])
    {
      if (result[23] < 0)
      {
        sub_20E860C04((_BYTE *)a3, *(void **)result, *((_QWORD *)result + 1));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)result + 2);
      }
      *(_BYTE *)(a3 + 24) = 1;
    }
    return sub_20E89F128((char *)(a3 + 32), (__int128 *)v5 + 2);
  }
  else
  {
    if (*(_BYTE *)(a2 + 24))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v6 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a3 + 56) = v6;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(a3 + 88) = 1;
    }
  }
  return result;
}

void sub_20FCF5920(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCF5948(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::mutex *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;

  v4 = operator new();
  *(_QWORD *)v4 = 850045863;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      v7 = *v5;
      v8 = (std::__shared_weak_count *)v5[1];
      v22 = *v5;
      v23 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v21 = v8;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      else
      {
        v21 = 0;
      }
      v20 = v7;
      v12 = *(std::mutex **)a1;
      std::mutex::lock(*(std::mutex **)a1);
      v24 = v20;
      v25 = &v20;
      v26 = &v24;
      sub_20FCF7C04((uint64_t *)(a1 + 8), &v24, (uint64_t)&unk_2102DB95C, &v26, &v25);
      std::mutex::unlock(v12);
      v13 = v21;
      if (!v21)
        goto LABEL_15;
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v16 = v23;
        if (v23)
        {
LABEL_16:
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
LABEL_15:
        v16 = v23;
        if (v23)
          goto LABEL_16;
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_20FCF5B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  std::mutex **v12;
  uint64_t v13;
  std::mutex *v14;

  std::mutex::unlock(v14);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a12);
  sub_20F2828AC(v13);
  sub_20E8A669C(v12);
  _Unwind_Resume(a1);
}

void sub_20FCF5B3C(uint64_t a1@<X0>, char **a2@<X8>)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;

  v4 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  v5 = *(_QWORD *)(a1 + 32);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  if (!v5)
  {
    v7 = 0;
    v6 = 0;
    v8 = *(uint64_t **)(a1 + 24);
    if (v8)
      goto LABEL_7;
    goto LABEL_35;
  }
  if (v5 >> 60)
    sub_20E867F44();
  v6 = (char *)operator new(16 * v5);
  v7 = &v6[16 * v5];
  v28 = v6;
  v29 = v6;
  v30 = v7;
  v8 = *(uint64_t **)(a1 + 24);
  if (!v8)
  {
LABEL_35:
    v26 = v6;
    goto LABEL_36;
  }
  do
  {
LABEL_7:
    v9 = *(_OWORD *)(v8 + 3);
    v10 = v8[4];
    v11 = v6;
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v11 = v29;
    }
    if (v11 < v30)
    {
      *(_QWORD *)v11 = v9;
      *((_QWORD *)v11 + 1) = v10;
      v6 = v11 + 16;
      goto LABEL_6;
    }
    v14 = v28;
    v15 = (v11 - v28) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      sub_20E867F44();
    v27 = v9;
    v17 = v30 - v28;
    if ((v30 - v28) >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18 >> 60)
      sub_20E877A38();
    v19 = (char *)operator new(16 * v18);
    v20 = &v19[16 * v15];
    *(_OWORD *)v20 = v27;
    v6 = v20 + 16;
    if (v11 == v28)
    {
      v28 = v20;
      v30 = &v19[16 * v18];
      if (!v11)
        goto LABEL_6;
LABEL_32:
      operator delete(v11);
      goto LABEL_6;
    }
    v21 = v11;
    do
    {
      v22 = *((_OWORD *)v21 - 1);
      v21 -= 16;
      *((_OWORD *)v20 - 1) = v22;
      v20 -= 16;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
    }
    while (v21 != v28);
    v28 = v20;
    v30 = &v19[16 * v18];
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v11 -= 16;
    }
    while (v11 != v14);
    v11 = v14;
    if (v14)
      goto LABEL_32;
LABEL_6:
    v29 = v6;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  v26 = v28;
  v7 = v30;
LABEL_36:
  *a2 = v26;
  a2[1] = v6;
  a2[2] = v7;
  std::mutex::unlock(v4);
}

void sub_20FCF5D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  va_list va;

  va_start(va, a4);
  sub_20E8C3144((void **)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_20FCF5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  va_list va;

  va_start(va, a4);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20E8C3144((void **)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_20FCF5DC4(std::mutex **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7[5];
  char v8;

  v6 = *a1;
  std::mutex::lock(*a1);
  LOBYTE(v7[0]) = 0;
  v8 = 0;
  sub_20FCF5E40((uint64_t)a1, a2, v7, a3);
  std::mutex::unlock(v6);
}

void sub_20FCF5E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20F8827DC((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20FCF5E40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  _BYTE *v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t *v41;
  int64x2_t v42;
  void *__p[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 32) == 1)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(v6 + 24);
    if (*((_BYTE *)a3 + 40))
    {
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *a3;
      v10 = a3[1];
      v11 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v11 >> 47) ^ v11);
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      if ((v10 & (v10 - 1)) != 0)
      {
        v40 = v13;
        if (v13 >= v10)
          v40 = v13 % v10;
        v14 = *(_QWORD **)(v9 + 8 * v40);
        do
        {
          do
            v14 = (_QWORD *)*v14;
          while (v13 != v14[1]);
        }
        while (v14[2] != v8);
      }
      else
      {
        v14 = *(_QWORD **)(v9 + 8 * ((v10 - 1) & v13));
        do
        {
          do
            v14 = (_QWORD *)*v14;
          while (v13 != v14[1]);
        }
        while (v14[2] != v8);
      }
      v36 = vdupq_n_s64(1uLL);
      v36.i64[0] = v14[3];
    }
    else
    {
      v36 = 0uLL;
    }
    *(int64x2_t *)__p = v36;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v7 + 24))(v7, a2, __p);
    return;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v15 = *(_QWORD **)(a1 + 24);
  if (!v15)
  {
    v35 = 0;
    v34 = 0;
    goto LABEL_60;
  }
  v41 = a4;
  do
  {
    if (*((_BYTE *)a3 + 40))
    {
      v17 = v15[2];
      v18 = *a3;
      v19 = a3[1];
      v20 = 0x9DDFEA08EB382D69 * (((8 * v17) + 8) ^ HIDWORD(v17));
      v21 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v20 >> 47) ^ v20);
      v22 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
      if ((v19 & (v19 - 1)) != 0)
      {
        v25 = v22;
        if (v22 >= v19)
          v25 = v22 % v19;
        v23 = *(_QWORD **)(v18 + 8 * v25);
        do
        {
          do
            v23 = (_QWORD *)*v23;
          while (v22 != v23[1]);
        }
        while (v23[2] != v17);
      }
      else
      {
        v23 = *(_QWORD **)(v18 + 8 * ((v19 - 1) & v22));
        do
        {
          do
            v23 = (_QWORD *)*v23;
          while (v22 != v23[1]);
        }
        while (v23[2] != v17);
      }
      v24 = vdupq_n_s64(1uLL);
      v24.i64[0] = v23[3];
    }
    else
    {
      v24 = 0uLL;
    }
    v26 = v15[3];
    v42 = v24;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, int64x2_t *))(*(_QWORD *)v26 + 16))(__p, v26, a2, &v42);
    v27 = v59;
    if ((unint64_t)v59 >= v60)
    {
      v31 = sub_20FCF77F8((uint64_t *)&v58, (uint64_t)__p);
    }
    else
    {
      *v59 = 0;
      v27[24] = 0;
      if (v45)
      {
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_OWORD *)v27 = *(_OWORD *)__p;
        *((_QWORD *)v27 + 2) = v44;
        __p[0] = 0;
        __p[1] = 0;
        v44 = 0;
        v27[24] = 1;
      }
      v27[32] = 0;
      v27[152] = 0;
      if (v57)
      {
        *((_OWORD *)v27 + 2) = v46;
        v27[48] = 0;
        v27[144] = 0;
        if (v56)
        {
          v27[72] = 0;
          if (v49)
          {
            v28 = v47;
            *((_QWORD *)v27 + 8) = v48;
            *((_OWORD *)v27 + 3) = v28;
            v48 = 0;
            v47 = 0uLL;
            v27[72] = 1;
          }
          v27[80] = 0;
          v27[136] = 0;
          if (v55)
          {
            v29 = v50;
            *((_QWORD *)v27 + 12) = v51;
            *((_OWORD *)v27 + 5) = v29;
            v51 = 0;
            v50 = 0uLL;
            *((_QWORD *)v27 + 13) = v52;
            v30 = v53;
            *((_QWORD *)v27 + 16) = v54;
            *((_OWORD *)v27 + 7) = v30;
            v54 = 0;
            v53 = 0uLL;
            v27[136] = 1;
          }
          v27[144] = 1;
        }
        v27[152] = 1;
      }
      v31 = (uint64_t)(v27 + 160);
    }
    v59 = (_BYTE *)v31;
    if (v57 && v56)
    {
      if (!v55)
        goto LABEL_44;
      if (SHIBYTE(v54) < 0)
      {
        operator delete((void *)v53);
        if ((SHIBYTE(v51) & 0x80000000) == 0)
        {
LABEL_44:
          if (!v49)
            goto LABEL_47;
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(v51) & 0x80000000) == 0)
      {
        goto LABEL_44;
      }
      operator delete((void *)v50);
      if (!v49)
        goto LABEL_47;
LABEL_45:
      if (SHIBYTE(v48) < 0)
        operator delete((void *)v47);
    }
LABEL_47:
    if (v45)
    {
      v32 = (void **)__p[0];
      if (__p[0])
      {
        v33 = (void **)__p[1];
        v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v33 - 1) < 0)
              operator delete(*(v33 - 3));
            v33 -= 3;
          }
          while (v33 != v32);
          v16 = __p[0];
        }
        __p[1] = v32;
        operator delete(v16);
      }
    }
    v15 = (_QWORD *)*v15;
  }
  while (v15);
  v34 = (uint64_t)v58;
  v35 = v59;
  a4 = v41;
LABEL_60:
  sub_20FD09A10(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v35[-v34] >> 5), v34, a4);
  v37 = (uint64_t)v58;
  if (v58)
  {
    v38 = (uint64_t)v59;
    v39 = v58;
    if (v59 != v58)
    {
      do
        v38 = sub_20E8DDADC(v38 - 160);
      while (v38 != v37);
      v39 = v58;
    }
    v59 = (_BYTE *)v37;
    operator delete(v39);
  }
}

void sub_20FCF62C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FCF6EF8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20FCF62D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E8DDADC((uint64_t)va);
  sub_20FCF6EF8((void **)(v5 - 112));
  _Unwind_Resume(a1);
}

void sub_20FCF62F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FCF6EF8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20FCF6308(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::mutex *v8;
  void **v9;
  uint64_t (***v10)();
  uint64_t (***v11)();
  uint64_t (***v12)();
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  float v24;
  void **v25;
  uint64_t (***v26)();
  unint64_t v27;
  uint64_t (***v28)();
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t v39;
  size_t prime;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  float v54;
  _QWORD *v55;
  _QWORD *v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  BOOL v76;
  unint64_t v77;
  uint8x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  void *v82[2];
  void *v83[2];
  float v84;
  char v85;
  size_t __n[2];
  void *__p[2];
  int v88;
  float v89;
  void *v90[2];
  void *v91[2];
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t (**v95)();
  __int128 v96;
  uint64_t (***v97)();
  void **v98;
  uint64_t (**v99)();
  __int128 v100;
  uint64_t (***v101)();
  void **v102;
  uint64_t (**v103)();
  __int128 v104;
  uint64_t (***v105)();
  uint64_t v106;
  uint64_t (**v107)();
  __int128 v108;
  uint64_t (***v109)();
  void **v110;
  uint64_t (**v111)();
  __int128 v112;
  uint64_t (***v113)();
  void **v114;
  uint64_t (**v115)();
  __int128 v116;
  uint64_t (***v117)();
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v8 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  if (!*(_BYTE *)(a3 + 8))
  {
    LOBYTE(v82[0]) = 0;
    v85 = 0;
    goto LABEL_147;
  }
  v81 = a4;
  v93 = 0;
  v9 = *(void ***)(a1 + 24);
  v102 = v9;
  v103 = &off_24CA05438;
  *(_QWORD *)&v104 = a2;
  *((_QWORD *)&v104 + 1) = &v93;
  v105 = &v103;
  v106 = 0;
  v107 = &off_24CA05438;
  *(_QWORD *)&v108 = a2;
  *((_QWORD *)&v108 + 1) = &v93;
  v109 = &v107;
  v10 = &v99;
  v101 = &v99;
  v98 = v9;
  v99 = &off_24CA05438;
  v100 = v104;
  v11 = &v95;
  v97 = &v95;
  v94 = 0;
  v95 = &off_24CA05438;
  v96 = v108;
  *(_OWORD *)v90 = 0u;
  *(_OWORD *)v91 = 0u;
  v92 = 1065353216;
  v12 = &v115;
  v117 = &v115;
  v114 = v9;
  v115 = &off_24CA05438;
  v116 = v104;
  v13 = &v111;
  v113 = &v111;
  v110 = 0;
  v111 = &off_24CA05438;
  v112 = v108;
  if (!v9)
    goto LABEL_8;
  do
  {
    if (!v117)
      sub_20E86D37C();
    v14 = ((uint64_t (*)(uint64_t (***)(), void **))(*v117)[6])(v117, v9 + 2);
    sub_20FCF73D8((uint64_t)v90, v14, v14, v15);
    v9 = (void **)*v114;
    v114 = v9;
  }
  while (v9 != v110);
  if (v113 == &v111)
  {
LABEL_8:
    v16 = 4;
  }
  else
  {
    if (!v113)
      goto LABEL_10;
    v16 = 5;
    v13 = v113;
  }
  ((void (*)(uint64_t (***)()))(*v13)[v16])(v13);
LABEL_10:
  if (v117 == &v115)
  {
    v17 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_16;
    v17 = 5;
    v12 = v117;
  }
  ((void (*)(uint64_t (***)()))(*v12)[v17])(v12);
LABEL_16:
  if (v97 == &v95)
  {
    v18 = 4;
  }
  else
  {
    if (!v97)
      goto LABEL_21;
    v18 = 5;
    v11 = v97;
  }
  ((void (*)(uint64_t (***)()))(*v11)[v18])(v11);
LABEL_21:
  if (v101 == &v99)
  {
    v19 = 4;
  }
  else
  {
    if (!v101)
      goto LABEL_26;
    v19 = 5;
    v10 = v101;
  }
  ((void (*)(uint64_t (***)()))(*v10)[v19])(v10);
LABEL_26:
  v20 = v109;
  if (v109 == &v107)
  {
    v21 = 4;
    v20 = &v107;
  }
  else
  {
    if (!v109)
      goto LABEL_31;
    v21 = 5;
  }
  (*v20)[v21]();
LABEL_31:
  v22 = v105;
  if (v105 == &v103)
  {
    v23 = 4;
    v22 = &v103;
    goto LABEL_35;
  }
  if (v105)
  {
    v23 = 5;
LABEL_35:
    (*v22)[v23]();
  }
  if (v93)
    v24 = (float)*(unint64_t *)a3 / (float)v93;
  else
    v24 = 1.0;
  v89 = v24;
  v25 = (void **)v91[0];
  v102 = (void **)v91[0];
  v103 = &off_24CA054C8;
  v105 = &v103;
  v106 = 0;
  *(_QWORD *)&v104 = &v89;
  v107 = &off_24CA054C8;
  *(_QWORD *)&v108 = &v89;
  v109 = &v107;
  v26 = &v99;
  v98 = (void **)v91[0];
  v99 = &off_24CA054C8;
  v101 = &v99;
  *(_QWORD *)&v100 = &v89;
  v27 = (unint64_t)&v95;
  v94 = 0;
  v95 = &off_24CA054C8;
  v97 = &v95;
  *(_QWORD *)&v96 = &v89;
  *(_OWORD *)__n = 0u;
  *(_OWORD *)__p = 0u;
  *(float *)&v88 = 1.0;
  v28 = &v115;
  v114 = (void **)v91[0];
  v115 = &off_24CA054C8;
  v117 = &v115;
  *(_QWORD *)&v116 = &v89;
  v29 = &v111;
  v110 = 0;
  v111 = &off_24CA054C8;
  v113 = &v111;
  *(_QWORD *)&v112 = &v89;
  if (!v91[0])
    goto LABEL_45;
  do
  {
    if (!v117)
      sub_20E86D37C();
    v30 = ((uint64_t (*)(uint64_t (***)(), void **))(*v117)[6])(v117, v25 + 2);
    sub_20FCF73D8((uint64_t)__n, v30, v30, v31);
    v25 = (void **)*v114;
    v114 = v25;
  }
  while (v25 != v110);
  if (v113 == &v111)
  {
LABEL_45:
    v32 = 4;
  }
  else
  {
    if (!v113)
      goto LABEL_47;
    v32 = 5;
    v29 = v113;
  }
  ((void (*)(uint64_t (***)()))(*v29)[v32])(v29);
LABEL_47:
  if (v117 == &v115)
  {
    v33 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_52;
    v33 = 5;
    v28 = v117;
  }
  ((void (*)(uint64_t (***)()))(*v28)[v33])(v28);
LABEL_52:
  if (v97 == &v95)
  {
    v34 = 4;
  }
  else
  {
    if (!v97)
      goto LABEL_57;
    v34 = 5;
    v27 = (unint64_t)v97;
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v27 + 8 * v34))(v27);
LABEL_57:
  if (v101 == &v99)
  {
    v35 = 4;
  }
  else
  {
    if (!v101)
      goto LABEL_62;
    v35 = 5;
    v26 = v101;
  }
  ((void (*)(uint64_t (***)()))(*v26)[v35])(v26);
LABEL_62:
  v36 = v109;
  if (v109 == &v107)
  {
    v37 = 4;
    v36 = &v107;
  }
  else
  {
    if (!v109)
      goto LABEL_67;
    v37 = 5;
  }
  (*v36)[v37]();
LABEL_67:
  v38 = v105;
  if (v105 == &v103)
  {
    v39 = 4;
    v38 = &v103;
  }
  else
  {
    if (!v105)
      goto LABEL_72;
    v39 = 5;
  }
  (*v38)[v39]();
LABEL_72:
  *(_OWORD *)v82 = 0u;
  *(_OWORD *)v83 = 0u;
  v84 = *(float *)&v88;
  prime = __n[1];
  if (__n[1] != 1)
  {
    if ((__n[1] & (__n[1] - 1)) != 0)
    {
      prime = std::__next_prime(__n[1]);
      v75 = v82[1];
      v76 = (void *)prime >= v82[1];
      if ((void *)prime > v82[1])
        goto LABEL_74;
    }
    else
    {
      v75 = 0;
      v76 = 1;
      if (__n[1])
        goto LABEL_74;
    }
    if (v76)
      goto LABEL_75;
    v77 = vcvtps_u32_f32((float)(unint64_t)v83[1] / v84);
    if ((unint64_t)v75 < 3
      || (v78 = (uint8x8_t)vcnt_s8((int8x8_t)v75), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
    {
      v77 = std::__next_prime(v77);
    }
    else
    {
      v79 = 1 << -(char)__clz(v77 - 1);
      if (v77 >= 2)
        v77 = v79;
    }
    if (prime <= v77)
      prime = v77;
    if (prime >= (unint64_t)v75)
      goto LABEL_75;
    goto LABEL_74;
  }
  prime = 2;
LABEL_74:
  sub_20E8D2B3C((uint64_t)v82, prime);
LABEL_75:
  v80 = a2;
  v41 = __p[0];
  if (!__p[0])
  {
    v85 = 1;
    v68 = (void *)__n[0];
    __n[0] = 0;
    a2 = v80;
    if (v68)
      goto LABEL_141;
    goto LABEL_142;
  }
  v42 = (unint64_t)v82[1];
  do
  {
    v43 = v41[2];
    v44 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
    v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v44 >> 47) ^ v44);
    v46 = v45 ^ (v45 >> 47);
    v47 = 0x9DDFEA08EB382D69 * v46;
    if (v42)
    {
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        v27 = 0x9DDFEA08EB382D69 * v46;
        if (v47 >= v42)
          v27 = v47 % v42;
      }
      else
      {
        v27 = v47 & (v42 - 1);
      }
      v49 = (_QWORD *)*((_QWORD *)v82[0] + v27);
      if (v49)
      {
        v50 = (_QWORD *)*v49;
        if (v50)
        {
          if (v48.u32[0] < 2uLL)
          {
            while (1)
            {
              v52 = v50[1];
              if (v52 == v47)
              {
                if (v50[2] == v43)
                  goto LABEL_137;
              }
              else if ((v52 & (v42 - 1)) != v27)
              {
                goto LABEL_97;
              }
              v50 = (_QWORD *)*v50;
              if (!v50)
                goto LABEL_97;
            }
          }
          do
          {
            v51 = v50[1];
            if (v51 == v47)
            {
              if (v50[2] == v43)
                goto LABEL_137;
            }
            else
            {
              if (v51 >= v42)
                v51 %= v42;
              if (v51 != v27)
                break;
            }
            v50 = (_QWORD *)*v50;
          }
          while (v50);
        }
      }
    }
LABEL_97:
    v53 = operator new(0x20uLL);
    *v53 = 0;
    v53[1] = v47;
    *((_OWORD *)v53 + 1) = *((_OWORD *)v41 + 1);
    v54 = (float)((unint64_t)v83[1] + 1);
    if (v42 && (float)(v84 * (float)v42) >= v54)
    {
      v55 = v82[0];
      v56 = (_QWORD *)*((_QWORD *)v82[0] + v27);
      if (v56)
        goto LABEL_100;
    }
    else
    {
      v57 = (v42 & (v42 - 1)) != 0;
      if (v42 < 3)
        v57 = 1;
      v58 = v57 | (2 * v42);
      v59 = vcvtps_u32_f32(v54 / v84);
      if (v58 <= v59)
        v60 = v59;
      else
        v60 = v58;
      if (v60 == 1)
      {
        v60 = 2;
      }
      else if ((v60 & (v60 - 1)) != 0)
      {
        v60 = std::__next_prime(v60);
        v42 = (unint64_t)v82[1];
      }
      if (v60 > v42)
        goto LABEL_111;
      if (v60 < v42)
      {
        v61 = vcvtps_u32_f32((float)(unint64_t)v83[1] / v84);
        if (v42 < 3 || (v62 = (uint8x8_t)vcnt_s8((int8x8_t)v42), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
        {
          v61 = std::__next_prime(v61);
        }
        else
        {
          v63 = 1 << -(char)__clz(v61 - 1);
          if (v61 >= 2)
            v61 = v63;
        }
        if (v60 <= v61)
          v60 = v61;
        if (v60 < v42)
LABEL_111:
          sub_20E8D2B3C((uint64_t)v82, v60);
      }
      v42 = (unint64_t)v82[1];
      v64 = (unint64_t)v82[1] - 1;
      if (((unint64_t)v82[1] & ((unint64_t)v82[1] - 1)) != 0)
      {
        if ((void *)v47 >= v82[1])
        {
          v27 = v47 % (unint64_t)v82[1];
          v55 = v82[0];
          v56 = (_QWORD *)*((_QWORD *)v82[0] + v47 % (unint64_t)v82[1]);
          if (v56)
          {
LABEL_100:
            *v53 = *v56;
LABEL_135:
            *v56 = v53;
            goto LABEL_136;
          }
        }
        else
        {
          v27 = v47;
          v55 = v82[0];
          v56 = (_QWORD *)*((_QWORD *)v82[0] + v47);
          if (v56)
            goto LABEL_100;
        }
      }
      else
      {
        v27 = v64 & v47;
        v55 = v82[0];
        v56 = (_QWORD *)*((_QWORD *)v82[0] + (v64 & v47));
        if (v56)
          goto LABEL_100;
      }
    }
    *v53 = v83[0];
    v83[0] = v53;
    v55[v27] = v83;
    if (*v53)
    {
      v65 = *(_QWORD *)(*v53 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v65 >= v42)
          v65 %= v42;
      }
      else
      {
        v65 &= v42 - 1;
      }
      v56 = (char *)v82[0] + 8 * v65;
      goto LABEL_135;
    }
LABEL_136:
    ++v83[1];
LABEL_137:
    v41 = (_QWORD *)*v41;
  }
  while (v41);
  v66 = __p[0];
  v85 = 1;
  if (__p[0])
  {
    do
    {
      v67 = (_QWORD *)*v66;
      operator delete(v66);
      v66 = v67;
    }
    while (v67);
  }
  v68 = (void *)__n[0];
  __n[0] = 0;
  a2 = v80;
  if (v68)
LABEL_141:
    operator delete(v68);
LABEL_142:
  v69 = v91[0];
  if (v91[0])
  {
    do
    {
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
  v71 = v90[0];
  v90[0] = 0;
  if (v71)
    operator delete(v71);
  a4 = v81;
LABEL_147:
  sub_20FCF5E40(a1, a2, (uint64_t *)v82, a4);
  if (v85)
  {
    v72 = v83[0];
    if (v83[0])
    {
      do
      {
        v73 = (_QWORD *)*v72;
        operator delete(v72);
        v72 = v73;
      }
      while (v73);
    }
    v74 = v82[0];
    v82[0] = 0;
    if (v74)
      operator delete(v74);
  }
  std::mutex::unlock(v8);
}

void sub_20FCF6C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::mutex *v25;

  sub_20E8C25A8((uint64_t)&a13);
  sub_20E8C25A8((uint64_t)&a19);
  sub_20E8C25A8((uint64_t)&a25);
  std::mutex::unlock(v25);
  _Unwind_Resume(a1);
}

void sub_20FCF6CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41,uint64_t a42)
{
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v48 = *(_QWORD **)(v46 - 152);
  if (v48 == v45)
  {
    v49 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v49 = 5;
    v45 = *(_QWORD **)(v46 - 152);
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v49))(v45);
LABEL_6:
  v50 = *(_QWORD **)(v46 - 112);
  if (v50 == v44)
  {
    v51 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_11;
    v51 = 5;
    v44 = *(_QWORD **)(v46 - 112);
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v51))(v44);
LABEL_11:
  v52 = __p;
  if (__p)
  {
    do
    {
      v53 = (_QWORD *)*v52;
      operator delete(v52);
      v52 = v53;
    }
    while (v53);
  }
  if (a19)
    operator delete(a19);
  if (a36 == v43)
  {
    v54 = 4;
  }
  else
  {
    if (!a36)
      goto LABEL_20;
    v54 = 5;
    v43 = a36;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v54))(v43);
LABEL_20:
  if (a41 == v42)
  {
    v55 = 4;
  }
  else
  {
    if (!a41)
      goto LABEL_25;
    v55 = 5;
    v42 = a41;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v55))(v42);
LABEL_25:
  sub_20F27A82C(&a42);
  sub_20E8C25A8((uint64_t)&a25);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void **sub_20FCF6EF8(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E8DDADC(v3 - 160);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20FCF6F50(_QWORD *a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string::size_type v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  char *i;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type size;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string v24;
  char *v25;
  char *v26;
  void *__p;
  std::string::size_type v28;
  unsigned __int8 v29;

  v4 = *(std::mutex **)a2;
  std::mutex::lock(*(std::mutex **)a2);
  v5 = *(_QWORD *)(a2 + 32);
  std::mutex::unlock(v4);
  if (!v5)
  {
    sub_20E86A980(a1, (uint64_t)"(no destinations)", 17);
    return a1;
  }
  sub_20E86A980(a1, (uint64_t)"{", 1);
  sub_20FCF5B3C(a2, &v25);
  v6 = v25;
  v7 = v26;
  v8 = (v25 - v26) >> 4;
  if (v8 >= -1)
    v9 = -1;
  else
    v9 = (v25 - v26) >> 4;
  v10 = 0;
  if (v25 != v26)
  {
    v11 = v25;
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v11 + 40))(&__p);
      if ((v29 & 0x80u) == 0)
        v12 = v29;
      else
        v12 = v28;
      if ((char)v29 < 0)
        operator delete(__p);
      v10 += v12;
      v11 += 16;
    }
    while (v11 != v7);
  }
  memset(&v24, 0, sizeof(v24));
  std::string::reserve(&v24, v10 + ~v9);
  if (v6 - v7 < 0)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v6 + 40))(&__p);
    if ((v29 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v29 & 0x80u) == 0)
      v14 = v29;
    else
      v14 = v28;
    std::string::append(&v24, p_p, v14);
    if (((char)v29 & 0x80000000) == 0)
    {
      if ((unint64_t)(v8 + 1) < 2)
        goto LABEL_36;
LABEL_25:
      for (i = v6 + 16; i != v7; i += 16)
      {
        std::string::append(&v24, ",", 1uLL);
        (*(void (**)(void **__return_ptr))(**(_QWORD **)i + 40))(&__p);
        if ((v29 & 0x80u) == 0)
          v16 = (const std::string::value_type *)&__p;
        else
          v16 = (const std::string::value_type *)__p;
        if ((v29 & 0x80u) == 0)
          v17 = v29;
        else
          v17 = v28;
        std::string::append(&v24, v16, v17);
        if ((char)v29 < 0)
          operator delete(__p);
      }
      goto LABEL_36;
    }
    operator delete(__p);
    if ((unint64_t)(v8 + 1) >= 2)
      goto LABEL_25;
  }
LABEL_36:
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v24;
  else
    v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  sub_20E86A980(a1, (uint64_t)v18, size);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  sub_20E86A980(a1, (uint64_t)"}", 1);
  if (v6)
  {
    if (v6 != v7)
    {
      do
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v6 = v25;
    }
    operator delete(v6);
  }
  return a1;
}

void sub_20FCF720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_20E8C3144(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_20E8C3144(&a16);
  _Unwind_Resume(a1);
}

void sub_20FCF7290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8C3144((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCF72A8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20FCF72BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA05438;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20FCF72F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA05438;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20FCF7314(uint64_t a1, _QWORD *a2)
{
  **(_QWORD **)(a1 + 16) += (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, *(_QWORD *)(a1 + 8));
  return *a2;
}

uint64_t sub_20FCF7360(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK"
                                "3$_0clEvEUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FCF73CC()
{
  return &unk_24CA054A8;
}

void sub_20FCF73D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = v9 ^ (v9 >> 47);
  v11 = 0x9DDFEA08EB382D69 * v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                return;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              return;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v11;
  v18[2] = a3;
  v18[3] = a4;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
    goto LABEL_50;
  v21 = 1;
  if (v12 >= 3)
    v21 = (v12 & (v12 - 1)) != 0;
  v22 = v21 | (2 * v12);
  v23 = vcvtps_u32_f32(v19 / v20);
  if (v22 <= v23)
    prime = v23;
  else
    prime = v22;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v12 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v12)
    goto LABEL_34;
  if (prime < v12)
  {
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime < v12)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v12 = *(_QWORD *)(a1 + 8);
  v28 = v12 - 1;
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12)
    {
      v4 = v11 % v12;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
      if (!v30)
        goto LABEL_53;
LABEL_51:
      *v18 = *v30;
LABEL_59:
      *v30 = v18;
      goto LABEL_60;
    }
    v4 = v11;
LABEL_50:
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v30)
      goto LABEL_53;
    goto LABEL_51;
  }
  v4 = v28 & v11;
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v11));
  if (v30)
    goto LABEL_51;
LABEL_53:
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v29 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12)
        v31 %= v12;
    }
    else
    {
      v31 &= v12 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FCF76E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FCF7700()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FCF7714(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA054C8;
  result[1] = v3;
  return result;
}

uint64_t sub_20FCF7748(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA054C8;
  a2[1] = v2;
  return result;
}

float sub_20FCF7764(uint64_t a1, uint64_t a2)
{
  return **(float **)(a1 + 8) * (float)*(unint64_t *)(a2 + 8);
}

uint64_t sub_20FCF7780(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK"
                                "3$_0clEvEUlRKT_E0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3dgn12Destinations15ProcessArchivedEONS1_5EventERKNS1_16ArchivingOptionsEENK3$_0clEvEUlRKT_E0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FCF77EC()
{
  return &unk_24CA05538;
}

uint64_t sub_20FCF77F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *i;
  char *v22;
  void *__p;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999)
    sub_20E867F44();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v4;
  v28 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x199999999999999)
      sub_20E877A38();
    v7 = (char *)operator new(160 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[160 * v3];
  __p = v7;
  v25 = v8;
  v27 = &v7[160 * v6];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = &v7[160 * v3];
  v9[32] = 0;
  v10 = v9 + 32;
  v10[120] = 0;
  v11 = v10 + 120;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 32);
    v12 = &v7[160 * v3];
    v12[144] = 0;
    v13 = v12 + 144;
    *(v13 - 96) = 0;
    if (*(_BYTE *)(a2 + 144))
    {
      v14 = &v7[160 * v3];
      v14[72] = 0;
      v15 = v14 + 72;
      if (*(_BYTE *)(a2 + 72))
      {
        *((_OWORD *)v13 - 6) = *(_OWORD *)(a2 + 48);
        *((_QWORD *)v13 - 10) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *v15 = 1;
      }
      v16 = &v7[160 * v3];
      v16[136] = 0;
      v17 = v16 + 136;
      *(v17 - 56) = 0;
      if (*(_BYTE *)(a2 + 136))
      {
        v18 = *(_QWORD *)(a2 + 104);
        *((_QWORD *)v17 - 5) = *(_QWORD *)(a2 + 96);
        *(_OWORD *)(v17 - 56) = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        v19 = &v7[160 * v3];
        *((_QWORD *)v19 + 13) = v18;
        *((_OWORD *)v19 + 7) = *(_OWORD *)(a2 + 112);
        *((_QWORD *)v19 + 16) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a2 + 112) = 0;
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 128) = 0;
        *v17 = 1;
      }
      *v13 = 1;
    }
    *v11 = 1;
  }
  v26 = v8 + 160;
  sub_20FCF7A40(a1, &__p);
  v20 = a1[1];
  v22 = v25;
  for (i = v26; v26 != v22; i = v26)
  {
    v26 = i - 160;
    sub_20E8DDADC((uint64_t)(i - 160));
  }
  if (__p)
    operator delete(__p);
  return v20;
}

void sub_20FCF7A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FCF7BB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FCF7A40(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_BYTE *)(v4 + v5 - 160) = 0;
      v7 = (_QWORD *)(v4 + v5 - 160);
      v8 = v2 + v5;
      *(_BYTE *)(v4 + v5 - 136) = 0;
      if (*(_BYTE *)(v2 + v5 - 136))
      {
        v9 = (_QWORD *)(v8 - 160);
        *v7 = 0;
        *(_QWORD *)(v4 + v5 - 152) = 0;
        *(_QWORD *)(v4 + v5 - 144) = 0;
        *(_OWORD *)v7 = *(_OWORD *)(v8 - 160);
        *(_QWORD *)(v6 - 144) = *(_QWORD *)(v8 - 144);
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        *(_BYTE *)(v6 - 136) = 1;
      }
      *(_BYTE *)(v6 - 128) = 0;
      *(_BYTE *)(v6 - 8) = 0;
      if (*(_BYTE *)(v8 - 8))
      {
        v10 = v2 + v5;
        *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
        v11 = v4 + v5;
        *(_BYTE *)(v4 + v5 - 112) = 0;
        *(_BYTE *)(v4 + v5 - 16) = 0;
        if (*(_BYTE *)(v2 + v5 - 16))
        {
          *(_BYTE *)(v11 - 88) = 0;
          if (*(_BYTE *)(v10 - 88))
          {
            v13 = *(_OWORD *)(v10 - 112);
            v12 = (_QWORD *)(v10 - 112);
            *(_QWORD *)(v4 + v5 - 96) = v12[2];
            *(_OWORD *)(v4 + v5 - 112) = v13;
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            *(_BYTE *)(v11 - 88) = 1;
          }
          v14 = v4 + v5;
          *(_BYTE *)(v4 + v5 - 80) = 0;
          *(_BYTE *)(v4 + v5 - 24) = 0;
          v15 = v2 + v5;
          if (*(_BYTE *)(v2 + v5 - 24))
          {
            v16 = *(_OWORD *)(v15 - 80);
            *(_QWORD *)(v4 + v5 - 64) = *(_QWORD *)(v15 - 64);
            *(_OWORD *)(v4 + v5 - 80) = v16;
            *(_QWORD *)(v15 - 72) = 0;
            *(_QWORD *)(v15 - 64) = 0;
            *(_QWORD *)(v15 - 80) = 0;
            *(_QWORD *)(v14 - 56) = *(_QWORD *)(v15 - 56);
            v17 = *(_OWORD *)(v15 - 48);
            *(_QWORD *)(v14 - 32) = *(_QWORD *)(v15 - 32);
            *(_OWORD *)(v14 - 48) = v17;
            *(_QWORD *)(v15 - 40) = 0;
            *(_QWORD *)(v15 - 32) = 0;
            *(_QWORD *)(v15 - 48) = 0;
            *(_BYTE *)(v14 - 24) = 1;
          }
          *(_BYTE *)(v11 - 16) = 1;
        }
        *(_BYTE *)(v6 - 8) = 1;
      }
      v5 -= 160;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v18 = *result;
  *result = v4;
  a2[1] = v18;
  v19 = result[1];
  result[1] = a2[2];
  a2[2] = v19;
  v20 = result[2];
  result[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20FCF7BB4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    sub_20E8DDADC(i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20FCF7C04(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD **a4, _QWORD **a5)
{
  unint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD **v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;

  v9 = *a2;
  v10 = HIDWORD(*a2);
  v11 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v10);
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  v13 = a1[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v5 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
      if (v12 >= v13)
        v5 = v12 % v13;
    }
    else
    {
      v5 = v12 & (v13 - 1);
    }
    v15 = *(_QWORD ***)(*a1 + 8 * v5);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (v16[2] == v9)
                return v16;
            }
            else if ((v18 & (v13 - 1)) != v5)
            {
              goto LABEL_23;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_23;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (v16[2] == v9)
              return v16;
          }
          else
          {
            if (v17 >= v13)
              v17 %= v13;
            if (v17 != v5)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_23:
  v19 = a1 + 2;
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v12;
  v20 = *a5;
  v16[2] = **a4;
  v16[3] = *v20;
  v21 = v20[1];
  v16[4] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (float)(unint64_t)(a1[3] + 1);
  v25 = *((float *)a1 + 8);
  if (!v13 || (float)(v25 * (float)v13) < v24)
  {
    v28 = 1;
    if (v13 >= 3)
      v28 = (v13 & (v13 - 1)) != 0;
    v29 = v28 | (2 * v13);
    v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v13 = a1[1];
    if (prime > v13)
    {
LABEL_40:
      if (prime >> 61)
        sub_20E877A38();
      v32 = operator new(8 * prime);
      v33 = (void *)*a1;
      *a1 = (uint64_t)v32;
      if (v33)
        operator delete(v33);
      v34 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v34++) = 0;
      while (prime != v34);
      v35 = (_QWORD *)*v19;
      if (!*v19)
        goto LABEL_72;
      v36 = v35[1];
      v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v38 = v36 & v37;
        *(_QWORD *)(*a1 + 8 * v38) = v19;
        for (i = (_QWORD *)*v35; *v35; i = (_QWORD *)*v35)
        {
          v40 = i[1] & v37;
          if (v40 == v38)
          {
            v35 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v40))
          {
            *v35 = *i;
            v41 = 8 * v40;
            *i = **(_QWORD **)(*a1 + v41);
            **(_QWORD **)(*a1 + v41) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v40) = v35;
            v35 = i;
            v38 = v40;
          }
        }
        goto LABEL_72;
      }
      if (v36 >= prime)
        v36 %= prime;
      *(_QWORD *)(*a1 + 8 * v36) = v19;
      v45 = (_QWORD *)*v35;
      if (!*v35)
      {
LABEL_72:
        v13 = prime;
        v48 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_73;
        goto LABEL_88;
      }
      while (1)
      {
        v47 = v45[1];
        if (v47 >= prime)
          v47 %= prime;
        if (v47 == v36)
          goto LABEL_66;
        if (*(_QWORD *)(*a1 + 8 * v47))
        {
          *v35 = *v45;
          v46 = 8 * v47;
          *v45 = **(_QWORD **)(*a1 + v46);
          **(_QWORD **)(*a1 + v46) = v45;
          v45 = v35;
LABEL_66:
          v35 = v45;
          v45 = (_QWORD *)*v45;
          if (!v45)
            goto LABEL_72;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v47) = v35;
          v35 = v45;
          v45 = (_QWORD *)*v45;
          v36 = v47;
          if (!v45)
            goto LABEL_72;
        }
      }
    }
    if (prime < v13)
    {
      v42 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < v13)
      {
        if (!prime)
        {
          v49 = (void *)*a1;
          *a1 = 0;
          if (v49)
            operator delete(v49);
          v13 = 0;
          a1[1] = 0;
          v48 = -1;
          goto LABEL_88;
        }
        goto LABEL_40;
      }
      v13 = a1[1];
    }
    v48 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
LABEL_73:
      if (v12 >= v13)
      {
        v5 = v12 % v13;
        v26 = *a1;
        v27 = *(_QWORD **)(*a1 + 8 * (v12 % v13));
        if (v27)
          goto LABEL_29;
      }
      else
      {
        v5 = v12;
        v26 = *a1;
        v27 = *(_QWORD **)(*a1 + 8 * v12);
        if (v27)
          goto LABEL_29;
      }
      goto LABEL_89;
    }
LABEL_88:
    v5 = v48 & v12;
    v26 = *a1;
    v27 = *(_QWORD **)(*a1 + 8 * (v48 & v12));
    if (v27)
      goto LABEL_29;
    goto LABEL_89;
  }
  v26 = *a1;
  v27 = *(_QWORD **)(*a1 + 8 * v5);
  if (v27)
  {
LABEL_29:
    *v16 = *v27;
LABEL_95:
    *v27 = v16;
    goto LABEL_96;
  }
LABEL_89:
  *v16 = *v19;
  *v19 = v16;
  *(_QWORD *)(v26 + 8 * v5) = v19;
  if (*v16)
  {
    v50 = *(_QWORD *)(*v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v50 >= v13)
        v50 %= v13;
    }
    else
    {
      v50 &= v13 - 1;
    }
    v27 = (_QWORD *)(*a1 + 8 * v50);
    goto LABEL_95;
  }
LABEL_96:
  ++a1[3];
  return v16;
}

void sub_20FCF812C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCF8140(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    return sub_20FCFBAC0(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20FCFBAC0(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20FCFBAC0(a1);
}

_QWORD *sub_20FCF81A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6D9C8))
    return &qword_254A6D9A0;
  sub_20FCFB524();
  __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A6D9C8);
  return &qword_254A6D9A0;
}

void sub_20FCF8228(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCF8240(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  *a1 = off_24CA05DF8;
  v6 = **a2;
  v7 = (std::__shared_weak_count *)(*a2)[1];
  v45 = v6;
  v46 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    a1[2] = v6;
    a1[1] = off_24CA05FC0;
    a1[3] = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    if (v6)
      goto LABEL_10;
  }
  else
  {
    a1[2] = v6;
    a1[1] = off_24CA05FC0;
    a1[3] = 0;
    if (v6)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Input.cpp", 39, (uint64_t)"diagnostics_clock", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = &off_24CA05558;
  a1[1] = &unk_24CA05598;
  v13 = operator new();
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)&v43 = v14;
  *(_QWORD *)v13 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24CA05600;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  v16 = *(_QWORD *)v13;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = off_24CA05FC0;
  *(_QWORD *)&v43 = 0;
  v17 = *(_QWORD **)(v16 + 232);
  *(_QWORD *)(v13 + 24) = v17[1];
  v18 = v17[2];
  *(_QWORD *)(v13 + 32) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)(v13 + 16) = &off_24CA05FF0;
  *(_QWORD *)(v13 + 40) = v17[3];
  v21 = v17[4];
  *(_QWORD *)(v13 + 48) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = operator new();
  *(_QWORD *)v24 = 850045863;
  v25 = a1 + 4;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_QWORD *)(v24 + 56) = 0;
  *(_QWORD *)(v13 + 56) = v24;
  *(_WORD *)(v13 + 119) = 0;
  *(_BYTE *)(v13 + 240) = 0;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_BYTE *)(v13 + 96) = 0;
  a1[4] = v13;
  v26 = *(_QWORD *)v13;
  v27 = operator new(0x28uLL);
  v27[3] = &off_24CA05380;
  v27[2] = 0;
  v28 = MEMORY[0x24BEDB310];
  *v27 = &off_24CA05650;
  v27[1] = 0;
  v27[4] = v28;
  *(_QWORD *)&v44 = v27 + 3;
  *((_QWORD *)&v44 + 1) = v27;
  v43 = 0uLL;
  sub_20FCFDBB8(v26, &v44);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_30;
  v32 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
    if (!*(_BYTE *)(a3 + 16))
      return a1;
  }
  else
  {
LABEL_30:
    if (!*(_BYTE *)(a3 + 16))
      return a1;
  }
  sub_20FCF86E0((uint64_t)a1, a3, &v43);
  v34 = (char *)operator new(0x28uLL);
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *(_QWORD *)v34 = &off_24CA056A0;
  *(_OWORD *)(v34 + 24) = v43;
  v43 = 0uLL;
  v35 = *v25;
  v36 = *(std::__shared_weak_count **)(*v25 + 88);
  *(_QWORD *)(v35 + 80) = v34 + 24;
  *(_QWORD *)(v35 + 88) = v34;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return a1;
}

void sub_20FCF861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t *v10;

  sub_20E86665C((uint64_t)&a9);
  sub_20FCFB1F4(v10);
  sub_20FD0D5D8(v9);
  _Unwind_Resume(a1);
}

void sub_20FCF8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  sub_20FD0D854(v10);
  sub_20E86665C(v11);
  sub_20EA5A0BC(&a9);
  MEMORY[0x212BC6398](v11, 0x10F2C409D2E2591);
  sub_20FD0D5D8(v9);
  _Unwind_Resume(a1);
}

void sub_20FCF86CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FD0D5D8(v1);
  _Unwind_Resume(a1);
}

std::mutex *sub_20FCF86E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string::size_type *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  char v31;
  size_t v32;
  void **p_dst;
  unint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  std::string::size_type v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  std::string::size_type *p_size;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  size_t v54;
  void *v55;
  _QWORD *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::string::size_type v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  const char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::string::size_type v107;
  uint64_t v108;
  int v109;
  _BYTE *v110;
  uint64_t v111;
  int *v112;
  int v113;
  int v114;
  BOOL v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::mutex *v128;
  uint64_t v129;
  uint64_t v130;
  std::string::size_type v131;
  std::string::size_type v132;
  uint64_t v133;
  std::string::size_type v134;
  uint64_t v135;
  std::string::size_type v136;
  std::mutex *v137;
  std::mutex *v138;
  std::mutex *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  std::string::size_type v148;
  std::string::size_type v149;
  std::string::size_type v150;
  std::string::size_type v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 v157;
  unint64_t v158;
  _QWORD *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  std::mutex *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *p_shared_weak_owners;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  std::mutex *v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t *v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  std::string::size_type v202;
  int v203;
  std::string::size_type v204;
  std::string *v205;
  unint64_t v206;
  unint64_t v207;
  const void *v208;
  uint64_t v209;
  uint64_t v210;
  std::string::size_type v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::string::size_type v215;
  int v216;
  std::string::size_type v217;
  std::string *v218;
  unint64_t v219;
  unint64_t v220;
  const void *v221;
  uint64_t v222;
  uint64_t v223;
  std::string::size_type v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  void **v228;
  uint64_t v229;
  __int128 *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::string *v234;
  std::string::size_type v235;
  char v236;
  size_t v237;
  __int128 *v238;
  unint64_t v239;
  const void *v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  std::string::size_type v244;
  uint64_t v245;
  size_t v246;
  const char *v247;
  unsigned __int8 v248;
  unsigned __int8 v249;
  const char *v250;
  size_t v251;
  std::string::size_type *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  NSObject *v256;
  uint64_t v257;
  uint64_t v258;
  size_t v259;
  void *v260;
  _QWORD *v261;
  size_t v262;
  size_t v263;
  void **v264;
  void *v265;
  int v266;
  std::string::size_type *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void **v271;
  char v272;
  _QWORD *v273;
  std::string::size_type v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  char *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::string::size_type v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  std::string::size_type v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  void **v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  const char *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::string::size_type v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  _QWORD *v324;
  void *v325;
  std::mutex *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  void *v335;
  std::mutex *result;
  uint64_t v337;
  _QWORD *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::runtime_error *exception;
  std::logic_error *v347;
  _QWORD *v348;
  _QWORD *v349;
  const char *v350;
  int v351;
  char *__s;
  std::mutex *v353;
  unint64_t v354;
  int v355;
  uint64_t v356;
  char *v357;
  std::__shared_weak_count *v358;
  char *v359;
  std::__shared_weak_count *v360;
  __int128 v361;
  std::string v362;
  __int128 v363;
  int v364;
  char *v365;
  std::__shared_weak_count *v366;
  std::string *v367;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v369;
  int v370;
  const char *v371;
  int v372;
  const char *v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  std::string v376;
  __int128 v377;
  const void *v378;
  __int128 v379;
  const void *v380;
  unint64_t v381;
  void *__p;
  char v383;
  unint64_t v384;
  int v385;
  _BYTE v386[160];
  __int128 v387;
  void *v388[2];
  char v389;
  char v390;
  void *v391;
  char v392;
  void *v393;
  char v394;
  char v395;
  char v396;
  char v397;
  __int128 v398;
  char v399[8];
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  __int128 v405;
  uint64_t v406;
  unint64_t v407;
  __int128 v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  char v412;
  char v413;
  uint64_t *v414[3];
  std::mutex *v415;
  void *v416;
  void *v417;
  std::string v418;
  char *v419;
  std::__shared_weak_count *v420;
  void **__dst;
  __int128 v422;
  uint64_t *v423;
  std::__shared_weak_count *v424;
  std::string *v425;
  std::string v426;
  __int128 v427;
  int64_t v428;
  std::string v429;
  __int128 v430;
  char *v431;
  const char *v432;
  unint64_t v433;
  const char *v434;
  uint64_t v435;
  __int128 *v436;
  uint64_t v437;
  _QWORD v438[4];

  v438[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(std::mutex **)(*(_QWORD *)(a1 + 32) + 56);
  std::mutex::lock(v6);
  v7 = *(_QWORD **)(a1 + 32);
  if (v7[10])
    goto LABEL_541;
  v8 = (std::__shared_weak_count *)v7[9];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      v11 = v7[8];
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v11)
      {
LABEL_541:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Diagnostics are already configured. Make sure to call Configure only once, or revert the previous configuration.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
    }
  }
  memset(v414, 0, sizeof(v414));
  sub_20FCF5948((uint64_t)&v415, v414);
  v14 = *(std::string::size_type **)(a1 + 32);
  v399[0] = 0;
  v413 = 0;
  v15 = operator new(0x20uLL);
  v16 = v15;
  v17 = *v14;
  v18 = (std::__shared_weak_count *)v14[1];
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_24CA056F0;
  v19 = v15 + 3;
  v376.__r_.__value_.__r.__words[0] = v17;
  v376.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_20FD2F128(v15 + 3, (uint64_t *)&v376);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)&v398 = v19;
  *((_QWORD *)&v398 + 1) = v16;
  (*(void (**)(__int128 *__return_ptr, _QWORD, std::mutex **, char *, _QWORD *))(**(_QWORD **)(a2 + 8) + 16))(&v387, *(_QWORD *)(a2 + 8), &v415, v399, v19);
  if (v397)
    goto LABEL_168;
  sub_20FCFB6D8(&v426);
  if (**(int **)(v426.__r_.__value_.__r.__words[0] + 56) <= 4)
  {
    v24 = *(unsigned __int8 *)(v426.__r_.__value_.__r.__words[0] + 72);
    v25 = sub_20E8C31DC((uint64_t)v426.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v26 = v25;
    if (v24 || v25)
    {
      v353 = v6;
      sub_20E863438((uint64_t)&v376);
      v27 = sub_20E86A980(&v376.__r_.__value_.__r.__words[2], (uint64_t)"Error during diagnostics configuration: ", 40);
      if (v397)
      {
        v349 = __cxa_allocate_exception(8uLL);
        *v349 = &off_24C9B4620;
        __cxa_throw(v349, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      v28 = v27;
      sub_2102341F0((uint64_t)&v387, &v429);
      if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v429;
      else
        v29 = (std::string *)v429.__r_.__value_.__r.__words[0];
      if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v429.__r_.__value_.__r.__words[2]);
      else
        size = v429.__r_.__value_.__l.__size_;
      sub_20E86A980(v28, (uint64_t)v29, size);
      if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v429.__r_.__value_.__l.__data_);
        v31 = v385;
        v354 = v26;
        if ((v385 & 0x10) == 0)
        {
LABEL_30:
          if ((v31 & 8) == 0)
          {
            v32 = 0;
            HIBYTE(v422) = 0;
            p_dst = (void **)&__dst;
            goto LABEL_43;
          }
          v35 = v378;
          v32 = *((_QWORD *)&v379 + 1) - (_QWORD)v378;
          if (*((_QWORD *)&v379 + 1) - (_QWORD)v378 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_87:
            sub_20E860B7C();
LABEL_36:
          if (v32 >= 0x17)
          {
            v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v36 = v32 | 7;
            v37 = v36 + 1;
            p_dst = (void **)operator new(v36 + 1);
            *((_QWORD *)&v422 + 1) = v37 | 0x8000000000000000;
            __dst = p_dst;
            *(_QWORD *)&v422 = v32;
          }
          else
          {
            HIBYTE(v422) = v32;
            p_dst = (void **)&__dst;
            if (!v32)
            {
LABEL_43:
              *((_BYTE *)p_dst + v32) = 0;
              v367 = &v426;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v369 = std::chrono::system_clock::now().__d_.__rep_;
              v370 = 4;
              v371 = "unknown file";
              v372 = 161;
              v374 = 0;
              v375 = 0;
              v373 = "unknown function";
              v38 = (void **)&__dst;
              if (v422 < 0)
                v38 = __dst;
              __s = (char *)v38;
              v39 = v367->__r_.__value_.__r.__words[0];
              v40 = (const char *)(v367->__r_.__value_.__r.__words[0] + 16);
              v351 = v24;
              v350 = v40;
              if (*(char *)(v367->__r_.__value_.__r.__words[0] + 39) < 0)
              {
                v40 = *(const char **)(v39 + 16);
                v41 = *(_QWORD *)(v39 + 24);
                v42 = a3;
                v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v44 & 1) != 0)
                  goto LABEL_49;
              }
              else
              {
                v41 = *(unsigned __int8 *)(v367->__r_.__value_.__r.__words[0] + 39);
                v42 = a3;
                v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v43 & 1) != 0)
                  goto LABEL_49;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v429);
                sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v429);
                if ((_BYTE)v430 && SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v429.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_49:
              if (byte_254A4A50F >= 0)
                v45 = (const char *)&xmmword_254A4A4F8;
              else
                v45 = (const char *)xmmword_254A4A4F8;
              if (byte_254A4A50F >= 0)
                v46 = byte_254A4A50F;
              else
                v46 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
              v429.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v45, v40);
              p_size = &v429.__r_.__value_.__l.__size_;
              if (v46 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v46 >= 0x17)
              {
                v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v46 | 7) != 0x17)
                  v48 = v46 | 7;
                v49 = v48 + 1;
                p_size = (std::string::size_type *)operator new(v48 + 1);
                v429.__r_.__value_.__r.__words[2] = v46;
                *(_QWORD *)&v430 = v49 | 0x8000000000000000;
                v429.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              }
              else
              {
                BYTE7(v430) = v46;
                if (!v46)
                {
LABEL_63:
                  *((_BYTE *)p_size + v46) = 0;
                  BYTE8(v430) = 1;
                  v50 = (char *)&v431;
                  if (v41 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v6 = v353;
                  a3 = v42;
                  if (v41 >= 0x17)
                  {
                    v51 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v41 | 7) != 0x17)
                      v51 = v41 | 7;
                    v52 = v51 + 1;
                    v50 = (char *)operator new(v51 + 1);
                    v432 = (const char *)v41;
                    v433 = v52 | 0x8000000000000000;
                    v431 = v50;
                  }
                  else
                  {
                    HIBYTE(v433) = v41;
                    if (!v41)
                    {
LABEL_71:
                      v50[v41] = 0;
                      LOBYTE(v434) = 1;
                      v53 = v429.__r_.__value_.__r.__words[0];
                      if (SHIBYTE(v433) < 0)
                        operator delete(v431);
                      if (BYTE8(v430) && SBYTE7(v430) < 0)
                        operator delete((void *)v429.__r_.__value_.__l.__size_);
                      if (v429.__r_.__value_.__r.__words[0])
                        os_release(v429.__r_.__value_.__l.__data_);
                      if (!v354 || !*(_QWORD *)(v354 + 24))
                      {
                        os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
                        LODWORD(v429.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)v429.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                        v60 = (void *)_os_log_send_and_compose_impl();
                        if (v60)
                          free(v60);
                        goto LABEL_151;
                      }
                      v54 = _os_log_pack_size();
                      v55 = operator new(v54, (std::align_val_t)8uLL);
                      v56 = (_QWORD *)operator new();
                      *v56 = &off_24C9ABB80;
                      v56[1] = 0;
                      v56[2] = 0;
                      v56[3] = v55;
                      v362.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                      v362.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
                      v363 = 0uLL;
                      v362.__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
                      v57 = strlen(__s);
                      if (v57 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v58 = v57;
                      if (v57 >= 0x17)
                      {
                        v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v57 | 7) != 0x17)
                          v61 = v57 | 7;
                        v62 = v61 + 1;
                        v59 = (std::string *)operator new(v61 + 1);
                        v418.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                        v418.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                        v418.__r_.__value_.__l.__size_ = v58;
                      }
                      else
                      {
                        *((_BYTE *)&v418.__r_.__value_.__s + 23) = v57;
                        v59 = &v418;
                        if (!v57)
                        {
LABEL_92:
                          v59->__r_.__value_.__s.__data_[v58] = 0;
                          *(_QWORD *)&v427 = v418.__r_.__value_.__l.__size_;
                          v63 = v418.__r_.__value_.__r.__words[0];
                          *(_QWORD *)((char *)&v427 + 7) = *(std::string::size_type *)((char *)&v418.__r_.__value_.__r.__words[1]
                                                                                     + 7);
                          v64 = HIBYTE(v418.__r_.__value_.__r.__words[2]);
                          v65 = operator new(0x38uLL);
                          v65[1] = 0;
                          v65[2] = 0;
                          v65[3] = off_24C9ABC20;
                          *v65 = &off_24C9ABBD0;
                          v66 = v427;
                          v65[4] = v63;
                          v65[5] = v66;
                          *(_QWORD *)((char *)v65 + 47) = *(_QWORD *)((char *)&v427 + 7);
                          *((_BYTE *)v65 + 55) = v64;
                          *(_QWORD *)&v427 = 0;
                          *(_QWORD *)((char *)&v427 + 7) = 0;
                          v67 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
                          *(_QWORD *)&v363 = v65 + 3;
                          *((_QWORD *)&v363 + 1) = v65;
                          if (v67)
                          {
                            v68 = (unint64_t *)&v67->__shared_owners_;
                            do
                              v69 = __ldaxr(v68);
                            while (__stlxr(v69 - 1, v68));
                            if (!v69)
                            {
                              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                              std::__shared_weak_count::__release_weak(v67);
                            }
                          }
                          v429 = v362;
                          if (v362.__r_.__value_.__r.__words[2])
                          {
                            v70 = (unint64_t *)(v362.__r_.__value_.__r.__words[2] + 8);
                            do
                              v71 = __ldxr(v70);
                            while (__stxr(v71 + 1, v70));
                          }
                          v430 = v363;
                          if (*((_QWORD *)&v363 + 1))
                          {
                            v72 = (unint64_t *)(*((_QWORD *)&v363 + 1) + 8);
                            do
                              v73 = __ldxr(v72);
                            while (__stxr(v73 + 1, v72));
                            v431 = (char *)v363;
                            do
                              v74 = __ldaxr(v72);
                            while (__stlxr(v74 - 1, v72));
                            if (!v74)
                            {
                              (*(void (**)(_QWORD))(**((_QWORD **)&v363 + 1) + 16))(*((_QWORD *)&v363 + 1));
                              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v363 + 1));
                            }
                          }
                          else
                          {
                            v431 = (char *)v363;
                          }
                          if (v362.__r_.__value_.__r.__words[2])
                          {
                            v75 = (unint64_t *)(v362.__r_.__value_.__r.__words[2] + 8);
                            do
                              v76 = __ldaxr(v75);
                            while (__stlxr(v76 - 1, v75));
                            if (!v76)
                            {
                              (*(void (**)(std::string::size_type))(*(_QWORD *)v362.__r_.__value_.__r.__words[2]
                                                                             + 16))(v362.__r_.__value_.__r.__words[2]);
                              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v362.__r_.__value_.__r.__words[2]);
                            }
                          }
                          v77 = v429.__r_.__value_.__r.__words[0];
                          if (v431[31] >= 0)
                            v78 = v431 + 8;
                          else
                            v78 = (char *)*((_QWORD *)v431 + 1);
                          v79 = _os_log_pack_fill();
                          *(_DWORD *)v79 = 136315138;
                          *(_QWORD *)(v79 + 4) = v78;
                          v80 = operator new();
                          v81 = *(unsigned __int8 *)(v39 + 39);
                          v82 = v350;
                          if ((v81 & 0x80u) != 0)
                          {
                            v82 = *(const char **)(v39 + 16);
                            v81 = *(_QWORD *)(v39 + 24);
                          }
                          *(_QWORD *)v80 = v77;
                          *(_OWORD *)(v80 + 8) = *(_OWORD *)&v429.__r_.__value_.__r.__words[1];
                          *(_OWORD *)&v429.__r_.__value_.__r.__words[1] = 0uLL;
                          *(_OWORD *)(v80 + 24) = v430;
                          v430 = 0uLL;
                          *(_QWORD *)(v80 + 40) = v82;
                          *(_QWORD *)(v80 + 48) = v81;
                          *(_BYTE *)(v80 + 56) = 16;
                          v418.__r_.__value_.__r.__words[0] = 0;
                          v362.__r_.__value_.__r.__words[0] = v80;
                          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v354 + 24) + 40))(*(_QWORD *)(v354 + 24), &v362);
                          v83 = v362.__r_.__value_.__r.__words[0];
                          v362.__r_.__value_.__r.__words[0] = 0;
                          if (v83)
                          {
                            v84 = *(std::__shared_weak_count **)(v83 + 32);
                            if (v84)
                            {
                              v85 = (unint64_t *)&v84->__shared_owners_;
                              do
                                v86 = __ldaxr(v85);
                              while (__stlxr(v86 - 1, v85));
                              if (!v86)
                              {
                                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                                std::__shared_weak_count::__release_weak(v84);
                              }
                            }
                            v87 = *(std::__shared_weak_count **)(v83 + 16);
                            if (v87)
                            {
                              v88 = (unint64_t *)&v87->__shared_owners_;
                              do
                                v89 = __ldaxr(v88);
                              while (__stlxr(v89 - 1, v88));
                              if (!v89)
                              {
                                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                std::__shared_weak_count::__release_weak(v87);
                              }
                            }
                            MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
                            v90 = v418.__r_.__value_.__r.__words[0];
                            v418.__r_.__value_.__r.__words[0] = 0;
                            if (v90)
                            {
                              v91 = *(std::__shared_weak_count **)(v90 + 32);
                              if (v91)
                              {
                                v92 = (unint64_t *)&v91->__shared_owners_;
                                do
                                  v93 = __ldaxr(v92);
                                while (__stlxr(v93 - 1, v92));
                                if (!v93)
                                {
                                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                                  std::__shared_weak_count::__release_weak(v91);
                                }
                              }
                              v94 = *(std::__shared_weak_count **)(v90 + 16);
                              if (v94)
                              {
                                v95 = (unint64_t *)&v94->__shared_owners_;
                                do
                                  v96 = __ldaxr(v95);
                                while (__stlxr(v96 - 1, v95));
                                if (!v96)
                                {
                                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                                  std::__shared_weak_count::__release_weak(v94);
                                }
                              }
                              MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
                            }
                          }
                          v97 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
                          if (*((_QWORD *)&v430 + 1))
                          {
                            v98 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
                            do
                              v99 = __ldaxr(v98);
                            while (__stlxr(v99 - 1, v98));
                            if (!v99)
                            {
                              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                              std::__shared_weak_count::__release_weak(v97);
                            }
                          }
                          v100 = (std::__shared_weak_count *)v429.__r_.__value_.__r.__words[2];
                          if (v429.__r_.__value_.__r.__words[2])
                          {
                            v101 = (unint64_t *)(v429.__r_.__value_.__r.__words[2] + 8);
                            do
                              v102 = __ldaxr(v101);
                            while (__stlxr(v102 - 1, v101));
                            if (!v102)
                            {
                              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                              std::__shared_weak_count::__release_weak(v100);
                            }
                          }
LABEL_151:
                          if (v351)
                          {
                            v103 = (const char *)&__dst;
                            if (v422 < 0)
                              v103 = (const char *)__dst;
                            sub_20E8C003C((uint64_t)&v367, "%s", v103);
                            sub_20E863570((uint64_t)&v367);
                          }
                          sub_20E863570((uint64_t)&v367);
                          v104 = v375;
                          if (v375)
                          {
                            v105 = (unint64_t *)&v375->__shared_owners_;
                            do
                              v106 = __ldaxr(v105);
                            while (__stlxr(v106 - 1, v105));
                            if (!v106)
                            {
                              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                              std::__shared_weak_count::__release_weak(v104);
                            }
                          }
                          if (SHIBYTE(v422) < 0)
                            operator delete(__dst);
                          v376.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                          v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(std::string::size_type *)((char *)v376.__r_.__value_.__r.__words
                                                    + *(_QWORD *)(v376.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                          v376.__r_.__value_.__r.__words[2] = v107;
                          *(_QWORD *)&v377 = MEMORY[0x24BEDB848] + 16;
                          if (v383 < 0)
                            operator delete(__p);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v386);
                          goto LABEL_165;
                        }
                      }
                      memcpy(v59, __s, v58);
                      goto LABEL_92;
                    }
                  }
                  memmove(v50, v40, v41);
                  goto LABEL_71;
                }
              }
              memmove(p_size, v45, v46);
              goto LABEL_63;
            }
          }
          memmove(p_dst, v35, v32);
          goto LABEL_43;
        }
      }
      else
      {
        v31 = v385;
        v354 = v26;
        if ((v385 & 0x10) == 0)
          goto LABEL_30;
      }
      v34 = v384;
      if (v384 < v381)
      {
        v384 = v381;
        v34 = v381;
      }
      v35 = v380;
      v32 = v34 - (_QWORD)v380;
      if (v34 - (unint64_t)v380 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_87;
      goto LABEL_36;
    }
  }
LABEL_165:
  if (v397)
  {
    v348 = __cxa_allocate_exception(8uLL);
    *v348 = &off_24C9B4620;
    __cxa_throw(v348, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v108 = *(_QWORD *)(a1 + 32);
  v109 = *(unsigned __int8 *)(v108 + 240);
  *(_OWORD *)(v108 + 120) = v387;
  v110 = (_BYTE *)(v108 + 136);
  if (!v109)
  {
    sub_20E89EFE4(v110, (__int128 *)v388);
    *(_BYTE *)(v108 + 240) = 1;
    v365 = 0;
    v366 = 0;
    if (!v413)
      goto LABEL_188;
    goto LABEL_169;
  }
  sub_20FCFBD40((uint64_t)v110, (__int128 *)v388);
LABEL_168:
  v365 = 0;
  v366 = 0;
  if (!v413)
    goto LABEL_188;
LABEL_169:
  v111 = HIBYTE(v401);
  if (v401 < 0)
    v111 = *((_QWORD *)&v400 + 1);
  if (v111 != 7
    || (v401 >= 0 ? (v112 = (int *)&v400) : (v112 = (int *)v400),
        (v113 = *v112, v114 = *(int *)((char *)v112 + 3), v113 == 1634100548) ? (v115 = v114 == 1953264993) : (v115 = 0),
        !v115))
  {
    v347 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20FCFB7CC(&v376, (uint64_t *)&v400);
    std::logic_error::logic_error(v347, &v376);
    v347->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v347, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v116 = (char *)operator new(0x108uLL);
  *((_QWORD *)v116 + 1) = 0;
  *((_QWORD *)v116 + 2) = 0;
  *(_QWORD *)v116 = &off_24CA05740;
  *((_QWORD *)v116 + 3) = off_24C9BFEC0;
  *((_OWORD *)v116 + 2) = v400;
  v117 = v401;
  v400 = 0uLL;
  v401 = 0;
  v118 = v402;
  v119 = v404;
  *((_QWORD *)v116 + 6) = v117;
  *((_QWORD *)v116 + 7) = v118;
  *((_OWORD *)v116 + 4) = v403;
  *((_QWORD *)v116 + 10) = v119;
  v403 = 0uLL;
  v120 = v405;
  v404 = 0;
  *(_QWORD *)&v405 = 0;
  *(_OWORD *)(v116 + 88) = v120;
  v121 = v406;
  *((_QWORD *)&v405 + 1) = 0;
  v406 = 0;
  *((_QWORD *)v116 + 13) = v121;
  v122 = atomic_load(&v407);
  v116[144] = 0;
  *((_QWORD *)v116 + 14) = v122;
  *(_OWORD *)(v116 + 120) = v408;
  v123 = v409;
  v409 = 0;
  *((_QWORD *)v116 + 17) = v123;
  v116[168] = 0;
  if (v412)
  {
    *((_OWORD *)v116 + 9) = v410;
    *((_QWORD *)v116 + 20) = v411;
    v411 = 0;
    v410 = 0uLL;
    v116[168] = 1;
  }
  *((_QWORD *)v116 + 22) = 0;
  *((_QWORD *)v116 + 23) = 0;
  v116[192] = 1;
  v116[200] = 0;
  v116[224] = 0;
  v116[232] = 0;
  v116[256] = 0;
  *((_QWORD *)v116 + 3) = &off_24CA06AA8;
  v124 = v366;
  v365 = v116 + 24;
  v366 = (std::__shared_weak_count *)v116;
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
LABEL_188:
  v127 = *(_QWORD *)v398;
  v128 = **(std::mutex ***)v398;
  std::mutex::lock(v128);
  if (*(_BYTE *)(v127 + 32))
  {
    std::mutex::unlock(v128);
  }
  else
  {
    v129 = *(_QWORD *)(v127 + 40);
    std::mutex::unlock(v128);
    if (!v129)
    {
      v194 = (std::__shared_weak_count *)*((_QWORD *)&v398 + 1);
      v398 = 0uLL;
      if (v194)
      {
        v195 = (unint64_t *)&v194->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
    }
  }
  v130 = **(_QWORD **)(a1 + 32);
  v131 = *(_QWORD *)(v130 + 240);
  v133 = v130 + 248;
  v132 = *(_QWORD *)(v130 + 248);
  *(_QWORD *)(v130 + 248) = 0;
  *(_QWORD *)(v130 + 240) = 0;
  v362.__r_.__value_.__r.__words[0] = v131;
  v362.__r_.__value_.__l.__size_ = v132;
  v134 = *(_QWORD *)(v130 + 256);
  v135 = *(_QWORD *)(v130 + 264);
  *(_QWORD *)(v130 + 256) = 0;
  v362.__r_.__value_.__r.__words[2] = v134;
  *(_QWORD *)&v363 = v135;
  *((_QWORD *)&v363 + 1) = *(_QWORD *)(v130 + 272);
  v364 = *(_DWORD *)(v130 + 280);
  if (*((_QWORD *)&v363 + 1))
  {
    v136 = *(_QWORD *)(v135 + 8);
    if ((v134 & (v134 - 1)) != 0)
    {
      if (v136 >= v134)
        v136 %= v134;
    }
    else
    {
      v136 &= v134 - 1;
    }
    *(_QWORD *)(v132 + 8 * v136) = &v363;
    *(_QWORD *)(v130 + 264) = 0;
    *(_QWORD *)(v130 + 272) = 0;
    v138 = *(std::mutex **)(v130 + 240);
    v139 = v415;
    v415 = 0;
    *(_QWORD *)(v130 + 240) = v139;
    if (v138)
    {
      std::mutex::~mutex(v138);
      MEMORY[0x212BC6398](v140, 0x1000C40FA0F61DDLL);
    }
  }
  else
  {
    v137 = v415;
    v415 = 0;
    *(_QWORD *)(v130 + 240) = v137;
  }
  sub_20FD03248(v133, (uint64_t *)&v416);
  if (v365)
  {
    v141 = **(_QWORD **)(a1 + 32);
    v359 = v365;
    v360 = v366;
    if (v366)
    {
      v142 = (unint64_t *)&v366->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    sub_20FCFD2E8(v141, &v359);
    v144 = v360;
    if (v360)
    {
      v145 = (unint64_t *)&v360->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
  }
  else
  {
    v361 = 0uLL;
  }
  v147 = *(uint64_t **)(a1 + 32);
  v148 = v362.__r_.__value_.__l.__size_;
  v149 = v362.__r_.__value_.__r.__words[0];
  memset(&v362, 0, sizeof(v362));
  v376.__r_.__value_.__r.__words[0] = v149;
  *(_OWORD *)&v376.__r_.__value_.__r.__words[1] = __PAIR128__(v362.__r_.__value_.__r.__words[2], v148);
  v377 = v363;
  LODWORD(v378) = v364;
  if (*((_QWORD *)&v363 + 1))
  {
    v150 = *(_QWORD *)(v363 + 8);
    if ((v362.__r_.__value_.__r.__words[2] & (v362.__r_.__value_.__r.__words[2] - 1)) != 0)
    {
      v151 = v150 % v362.__r_.__value_.__r.__words[2];
      if (v150 < v362.__r_.__value_.__r.__words[2])
        v151 = *(_QWORD *)(v363 + 8);
    }
    else
    {
      v151 = v150 & (v362.__r_.__value_.__r.__words[2] - 1);
    }
    *(_QWORD *)(v148 + 8 * v151) = &v377;
    v363 = 0uLL;
  }
  v379 = v361;
  v361 = 0uLL;
  v152 = (char *)operator new(0x78uLL);
  *((_QWORD *)v152 + 1) = 0;
  *((_QWORD *)v152 + 2) = 0;
  *(_QWORD *)v152 = &off_24CA05790;
  v153 = *v147;
  v154 = v147[1];
  if (v154)
  {
    v155 = (unint64_t *)(v154 + 8);
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }
  v157 = v398;
  v398 = 0uLL;
  v158 = v376.__r_.__value_.__r.__words[2];
  v159 = (_QWORD *)v377;
  *((_QWORD *)v152 + 8) = v377;
  *((_QWORD *)v152 + 3) = v153;
  *((_QWORD *)v152 + 4) = v154;
  v160 = v376.__r_.__value_.__l.__size_;
  v161 = v376.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v376.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v152 + 40) = __PAIR128__(v160, v161);
  *((_QWORD *)v152 + 7) = v158;
  v376.__r_.__value_.__r.__words[2] = 0;
  v162 = *((_QWORD *)&v377 + 1);
  *((_QWORD *)v152 + 9) = *((_QWORD *)&v377 + 1);
  *((_DWORD *)v152 + 20) = (_DWORD)v378;
  if (v162)
  {
    v163 = v159[1];
    if ((v158 & (v158 - 1)) != 0)
    {
      if (v163 >= v158)
        v163 %= v158;
    }
    else
    {
      v163 &= v158 - 1;
    }
    v159 = 0;
    *(_QWORD *)(v160 + 8 * v163) = v152 + 64;
    v377 = 0uLL;
  }
  *(_OWORD *)(v152 + 88) = v379;
  v379 = 0uLL;
  *(_OWORD *)(v152 + 104) = v157;
  v357 = v152 + 24;
  v358 = (std::__shared_weak_count *)v152;
  while (v159)
  {
    v190 = v159;
    v159 = (_QWORD *)*v159;
    v191 = (std::__shared_weak_count *)v190[4];
    if (v191)
    {
      v192 = (unint64_t *)&v191->__shared_owners_;
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    operator delete(v190);
  }
  v164 = (void *)v376.__r_.__value_.__l.__size_;
  v376.__r_.__value_.__l.__size_ = 0;
  if (v164)
    operator delete(v164);
  v165 = (std::mutex *)v376.__r_.__value_.__r.__words[0];
  v376.__r_.__value_.__r.__words[0] = 0;
  if (v165)
  {
    std::mutex::~mutex(v165);
    MEMORY[0x212BC6398](v166, 0x1000C40FA0F61DDLL);
  }
  v167 = *(_QWORD *)(a1 + 32);
  v168 = v357;
  v169 = v358;
  if (v358)
  {
    p_shared_weak_owners = (unint64_t *)&v358->__shared_weak_owners_;
    do
      v171 = __ldxr(p_shared_weak_owners);
    while (__stxr(v171 + 1, p_shared_weak_owners));
  }
  v172 = *(std::__shared_weak_count **)(v167 + 72);
  *(_QWORD *)(v167 + 64) = v357;
  *(_QWORD *)(v167 + 72) = v169;
  if (v172)
    std::__shared_weak_count::__release_weak(v172);
  if (v169)
  {
    v173 = (unint64_t *)&v169->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  *a3 = v168;
  a3[1] = v169;
  std::mutex::unlock(v6);
  sub_20FCFB6D8(&v356);
  if (**(int **)(v356 + 56) <= 3)
  {
    v175 = *(unsigned __int8 *)(v356 + 72);
    v176 = sub_20E8C31DC(v356, "OSLogSurrogateAppender", 1, 0);
    v177 = v176;
    if (v175 || v176 != 0)
    {
      sub_20E863438((uint64_t)&v376);
      v179 = *(std::mutex **)(*(_QWORD *)(a1 + 32) + 56);
      std::mutex::lock(v179);
      v180 = *(_QWORD **)(a1 + 32);
      v181 = (uint64_t *)v180[10];
      if (v181)
      {
        v182 = *v181;
        v183 = (std::__shared_weak_count *)v181[1];
        if (v183)
        {
          v184 = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        if (v182)
          goto LABEL_247;
      }
      else
      {
        v197 = (std::__shared_weak_count *)v180[9];
        if (v197)
        {
          v183 = std::__shared_weak_count::lock(v197);
          if (v183)
          {
            v182 = v180[8];
            if (v182)
            {
LABEL_247:
              v187 = *(uint64_t **)(v182 + 80);
              v186 = *(std::__shared_weak_count **)(v182 + 88);
              v423 = v187;
              v424 = v186;
              if (v186)
              {
                v188 = (unint64_t *)&v186->__shared_owners_;
                do
                  v189 = __ldxr(v188);
                while (__stxr(v189 + 1, v188));
              }
LABEL_268:
              if (v183)
              {
                v198 = (unint64_t *)&v183->__shared_owners_;
                do
                  v199 = __ldaxr(v198);
                while (__stlxr(v199 - 1, v198));
                if (!v199)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
              v355 = v175;
              std::mutex::unlock(v179);
              v200 = v423;
              v201 = (uint64_t *)MEMORY[0x24BEDB7F0];
              if (!v423)
              {
                HIBYTE(v422) = 4;
                strcpy((char *)&__dst, "none");
                goto LABEL_298;
              }
              v370 = 0;
              v202 = operator new();
              *(_QWORD *)(v202 + 272) = 0;
              *(_OWORD *)(v202 + 240) = 0u;
              *(_OWORD *)(v202 + 256) = 0u;
              *(_OWORD *)(v202 + 208) = 0u;
              *(_OWORD *)(v202 + 224) = 0u;
              *(_OWORD *)(v202 + 176) = 0u;
              *(_OWORD *)(v202 + 192) = 0u;
              *(_OWORD *)(v202 + 144) = 0u;
              *(_OWORD *)(v202 + 160) = 0u;
              *(_OWORD *)(v202 + 112) = 0u;
              *(_OWORD *)(v202 + 128) = 0u;
              *(_OWORD *)(v202 + 80) = 0u;
              *(_OWORD *)(v202 + 96) = 0u;
              *(_OWORD *)(v202 + 48) = 0u;
              *(_OWORD *)(v202 + 64) = 0u;
              *(_OWORD *)(v202 + 16) = 0u;
              *(_OWORD *)(v202 + 32) = 0u;
              *(_OWORD *)v202 = 0u;
              sub_20E863438(v202);
              v429.__r_.__value_.__r.__words[0] = v202;
              sub_20FD2EEEC(*v200, (_QWORD *)(v202 + 16));
              v203 = *(_DWORD *)(v202 + 120);
              if ((v203 & 0x10) != 0)
              {
                v206 = *(_QWORD *)(v202 + 112);
                v207 = *(_QWORD *)(v202 + 72);
                if (v206 < v207)
                {
                  *(_QWORD *)(v202 + 112) = v207;
                  v206 = v207;
                }
                v208 = *(const void **)(v202 + 64);
                v204 = v206 - (_QWORD)v208;
                if (v206 - (unint64_t)v208 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_424;
              }
              else
              {
                if ((v203 & 8) == 0)
                {
                  v204 = 0;
                  *((_BYTE *)&v418.__r_.__value_.__s + 23) = 0;
                  v205 = &v418;
                  goto LABEL_288;
                }
                v208 = *(const void **)(v202 + 40);
                v204 = *(_QWORD *)(v202 + 56) - (_QWORD)v208;
                if (v204 > 0x7FFFFFFFFFFFFFF7)
LABEL_424:
                  sub_20E860B7C();
              }
              if (v204 >= 0x17)
              {
                v209 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v204 | 7) != 0x17)
                  v209 = v204 | 7;
                v210 = v209 + 1;
                v205 = (std::string *)operator new(v209 + 1);
                v418.__r_.__value_.__r.__words[2] = v210 | 0x8000000000000000;
                v418.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
                v418.__r_.__value_.__l.__size_ = v204;
                v201 = (uint64_t *)MEMORY[0x24BEDB7F0];
              }
              else
              {
                *((_BYTE *)&v418.__r_.__value_.__s + 23) = v204;
                v205 = &v418;
                if (!v204)
                  goto LABEL_288;
              }
              memmove(v205, v208, v204);
LABEL_288:
              v205->__r_.__value_.__s.__data_[v204] = 0;
              v211 = v429.__r_.__value_.__r.__words[0];
              if (v429.__r_.__value_.__r.__words[0])
              {
                v212 = *v201;
                *(_QWORD *)v429.__r_.__value_.__l.__data_ = *v201;
                v213 = v201[9];
                *(_QWORD *)(v211 + *(_QWORD *)(v212 - 24)) = v201[8];
                *(_QWORD *)(v211 + 24) = MEMORY[0x24BEDB848] + 16;
                *(_QWORD *)(v211 + 16) = v213;
                if (*(char *)(v211 + 111) < 0)
                  operator delete(*(void **)(v211 + 88));
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x212BC6290](v211 + 128);
                MEMORY[0x212BC6398](v211, 0x10B2C40EED050F3);
              }
              v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367;
              v429.__r_.__value_.__l.__size_ = (std::string::size_type)&v418;
              v429.__r_.__value_.__r.__words[2] = (std::string::size_type)&v367;
              *(_QWORD *)&v430 = &v418;
              *((_QWORD *)&v430 + 1) = &v418;
              if (v370 == -1)
                sub_20E877AB8();
              *(_QWORD *)&v427 = &v429;
              ((void (*)(__int128 *, std::string **))off_24CA057D0[v370])(&v427, &v367);
              if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v418.__r_.__value_.__l.__data_);
              if (v370 == -1)
                sub_20E877AB8();
              v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v418;
              ((void (*)(void ***__return_ptr, std::string *, std::string **))off_24CA05800[v370])(&__dst, &v429, &v367);
              if (v370 != -1)
                ((void (*)(std::string *, std::string **))off_24CA057E8[v370])(&v429, &v367);
LABEL_298:
              v214 = **(_QWORD **)(a1 + 32);
              v370 = 0;
              v215 = operator new();
              *(_QWORD *)(v215 + 272) = 0;
              *(_OWORD *)(v215 + 240) = 0u;
              *(_OWORD *)(v215 + 256) = 0u;
              *(_OWORD *)(v215 + 208) = 0u;
              *(_OWORD *)(v215 + 224) = 0u;
              *(_OWORD *)(v215 + 176) = 0u;
              *(_OWORD *)(v215 + 192) = 0u;
              *(_OWORD *)(v215 + 144) = 0u;
              *(_OWORD *)(v215 + 160) = 0u;
              *(_OWORD *)(v215 + 112) = 0u;
              *(_OWORD *)(v215 + 128) = 0u;
              *(_OWORD *)(v215 + 80) = 0u;
              *(_OWORD *)(v215 + 96) = 0u;
              *(_OWORD *)(v215 + 48) = 0u;
              *(_OWORD *)(v215 + 64) = 0u;
              *(_OWORD *)(v215 + 16) = 0u;
              *(_OWORD *)(v215 + 32) = 0u;
              *(_OWORD *)v215 = 0u;
              sub_20E863438(v215);
              v429.__r_.__value_.__r.__words[0] = v215;
              sub_20FCF6F50((_QWORD *)(v215 + 16), v214 + 240);
              v216 = *(_DWORD *)(v215 + 120);
              if ((v216 & 0x10) != 0)
              {
                v219 = *(_QWORD *)(v215 + 112);
                v220 = *(_QWORD *)(v215 + 72);
                if (v219 < v220)
                {
                  *(_QWORD *)(v215 + 112) = v220;
                  v219 = v220;
                }
                v221 = *(const void **)(v215 + 64);
                v217 = v219 - (_QWORD)v221;
                if (v219 - (unint64_t)v221 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_401;
              }
              else
              {
                if ((v216 & 8) == 0)
                {
                  v217 = 0;
                  *((_BYTE *)&v418.__r_.__value_.__s + 23) = 0;
                  v218 = &v418;
                  goto LABEL_311;
                }
                v268 = *(_QWORD *)(v215 + 56);
                v221 = *(const void **)(v215 + 40);
                v217 = v268 - (_QWORD)v221;
                if ((unint64_t)(v268 - (_QWORD)v221) > 0x7FFFFFFFFFFFFFF7)
LABEL_401:
                  sub_20E860B7C();
              }
              if (v217 >= 0x17)
              {
                v222 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v217 | 7) != 0x17)
                  v222 = v217 | 7;
                v223 = v222 + 1;
                v218 = (std::string *)operator new(v222 + 1);
                v418.__r_.__value_.__r.__words[2] = v223 | 0x8000000000000000;
                v418.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
                v418.__r_.__value_.__l.__size_ = v217;
              }
              else
              {
                *((_BYTE *)&v418.__r_.__value_.__s + 23) = v217;
                v218 = &v418;
                if (!v217)
                {
LABEL_311:
                  v218->__r_.__value_.__s.__data_[v217] = 0;
                  v224 = v429.__r_.__value_.__r.__words[0];
                  if (v429.__r_.__value_.__r.__words[0])
                  {
                    v225 = *v201;
                    *(_QWORD *)v429.__r_.__value_.__l.__data_ = *v201;
                    v226 = v201[9];
                    *(_QWORD *)(v224 + *(_QWORD *)(v225 - 24)) = v201[8];
                    *(_QWORD *)(v224 + 24) = MEMORY[0x24BEDB848] + 16;
                    *(_QWORD *)(v224 + 16) = v226;
                    if (*(char *)(v224 + 111) < 0)
                      operator delete(*(void **)(v224 + 88));
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v224 + 128);
                    MEMORY[0x212BC6398](v224, 0x10B2C40EED050F3);
                  }
                  v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367;
                  v429.__r_.__value_.__l.__size_ = (std::string::size_type)&v418;
                  v429.__r_.__value_.__r.__words[2] = (std::string::size_type)&v367;
                  *(_QWORD *)&v430 = &v418;
                  *((_QWORD *)&v430 + 1) = &v418;
                  if (v370 == -1)
                    sub_20E877AB8();
                  v425 = &v429;
                  ((void (*)(std::string **, std::string **))off_24CA057D0[v370])(&v425, &v367);
                  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v418.__r_.__value_.__l.__data_);
                  if (v370 == -1)
                    sub_20E877AB8();
                  v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v418;
                  ((void (*)(__int128 *__return_ptr, std::string *, std::string **))off_24CA05800[v370])(&v427, &v429, &v367);
                  if (v370 != -1)
                    ((void (*)(std::string *, std::string **))off_24CA057E8[v370])(&v429, &v367);
                  v429.__r_.__value_.__r.__words[0] = (std::string::size_type)"Diagnostics Configuration: ";
                  v429.__r_.__value_.__l.__size_ = 27;
                  v429.__r_.__value_.__r.__words[2] = (std::string::size_type)"triggers: ";
                  *(_QWORD *)&v430 = 10;
                  v227 = (char *)HIBYTE(v422);
                  v228 = (void **)&__dst;
                  if (v422 < 0)
                  {
                    v228 = __dst;
                    v227 = (char *)v422;
                  }
                  *((_QWORD *)&v430 + 1) = v228;
                  v431 = v227;
                  v432 = ", ";
                  v433 = 2;
                  v434 = "destinations: ";
                  v435 = 14;
                  v229 = HIBYTE(v428);
                  v230 = &v427;
                  if (v428 < 0)
                  {
                    v229 = *((_QWORD *)&v427 + 1);
                    v230 = (__int128 *)v427;
                  }
                  v436 = v230;
                  v437 = v229;
                  sub_20E8778D4((uint64_t)&v429, (uint64_t)v438, 0, 0, &v426);
                  if (SHIBYTE(v428) < 0)
                  {
                    operator delete((void *)v427);
                    if ((SHIBYTE(v422) & 0x80000000) == 0)
                    {
LABEL_327:
                      v231 = v424;
                      if (!v424)
                        goto LABEL_335;
                      goto LABEL_331;
                    }
                  }
                  else if ((SHIBYTE(v422) & 0x80000000) == 0)
                  {
                    goto LABEL_327;
                  }
                  operator delete(__dst);
                  v231 = v424;
                  if (!v424)
                    goto LABEL_335;
LABEL_331:
                  v232 = (unint64_t *)&v231->__shared_owners_;
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
LABEL_335:
                  if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v234 = &v426;
                  else
                    v234 = (std::string *)v426.__r_.__value_.__r.__words[0];
                  if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v235 = HIBYTE(v426.__r_.__value_.__r.__words[2]);
                  else
                    v235 = v426.__r_.__value_.__l.__size_;
                  sub_20E86A980(&v376.__r_.__value_.__r.__words[2], (uint64_t)v234, v235);
                  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v426.__r_.__value_.__l.__data_);
                    v236 = v385;
                    if ((v385 & 0x10) == 0)
                    {
LABEL_343:
                      if ((v236 & 8) == 0)
                      {
                        v237 = 0;
                        HIBYTE(v428) = 0;
                        v238 = &v427;
                        goto LABEL_356;
                      }
                      v240 = v378;
                      v237 = *((_QWORD *)&v379 + 1) - (_QWORD)v378;
                      if (*((_QWORD *)&v379 + 1) - (_QWORD)v378 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_403:
                        sub_20E860B7C();
LABEL_349:
                      if (v237 >= 0x17)
                      {
                        v241 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v237 | 7) != 0x17)
                          v241 = v237 | 7;
                        v242 = v241 + 1;
                        v238 = (__int128 *)operator new(v241 + 1);
                        *((_QWORD *)&v427 + 1) = v237;
                        v428 = v242 | 0x8000000000000000;
                        *(_QWORD *)&v427 = v238;
                      }
                      else
                      {
                        HIBYTE(v428) = v237;
                        v238 = &v427;
                        if (!v237)
                        {
LABEL_356:
                          *((_BYTE *)v238 + v237) = 0;
                          v367 = (std::string *)&v356;
                          rep = std::chrono::steady_clock::now().__d_.__rep_;
                          v369 = std::chrono::system_clock::now().__d_.__rep_;
                          v370 = 3;
                          v371 = "unknown file";
                          v372 = 196;
                          v374 = 0;
                          v375 = 0;
                          v373 = "unknown function";
                          if (v428 >= 0)
                            v243 = (const char *)&v427;
                          else
                            v243 = (const char *)v427;
                          v244 = v367->__r_.__value_.__r.__words[0];
                          v245 = v367->__r_.__value_.__r.__words[0] + 16;
                          if (*(char *)(v367->__r_.__value_.__r.__words[0] + 39) < 0)
                          {
                            v247 = *(const char **)(v244 + 16);
                            v246 = *(_QWORD *)(v244 + 24);
                            v249 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                            if ((v249 & 1) != 0)
                              goto LABEL_363;
                          }
                          else
                          {
                            v246 = *(unsigned __int8 *)(v367->__r_.__value_.__r.__words[0] + 39);
                            v247 = (const char *)(v367->__r_.__value_.__r.__words[0] + 16);
                            v248 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                            if ((v248 & 1) != 0)
                              goto LABEL_363;
                          }
                          if (__cxa_guard_acquire(&qword_254A4A510))
                          {
                            sub_20E9E46F8((uint64_t)&v429);
                            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v429);
                            if ((_BYTE)v430 && SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v429.__r_.__value_.__l.__data_);
                            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A4A510);
                          }
LABEL_363:
                          if (byte_254A4A50F >= 0)
                            v250 = (const char *)&xmmword_254A4A4F8;
                          else
                            v250 = (const char *)xmmword_254A4A4F8;
                          if (byte_254A4A50F >= 0)
                            v251 = byte_254A4A50F;
                          else
                            v251 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                          v429.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v250, v247);
                          v252 = &v429.__r_.__value_.__l.__size_;
                          if (v251 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v251 >= 0x17)
                          {
                            v253 = (v251 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v251 | 7) != 0x17)
                              v253 = v251 | 7;
                            v254 = v253 + 1;
                            v252 = (std::string::size_type *)operator new(v253 + 1);
                            v429.__r_.__value_.__r.__words[2] = v251;
                            *(_QWORD *)&v430 = v254 | 0x8000000000000000;
                            v429.__r_.__value_.__l.__size_ = (std::string::size_type)v252;
                          }
                          else
                          {
                            BYTE7(v430) = v251;
                            if (!v251)
                            {
LABEL_377:
                              *((_BYTE *)v252 + v251) = 0;
                              BYTE8(v430) = 1;
                              v255 = (char *)&v431;
                              if (v246 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              if (v246 >= 0x17)
                              {
                                v257 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v246 | 7) != 0x17)
                                  v257 = v246 | 7;
                                v258 = v257 + 1;
                                v255 = (char *)operator new(v257 + 1);
                                v432 = (const char *)v246;
                                v433 = v258 | 0x8000000000000000;
                                v431 = v255;
                              }
                              else
                              {
                                HIBYTE(v433) = v246;
                                if (!v246)
                                {
                                  LOBYTE(v431) = 0;
                                  LOBYTE(v434) = 1;
                                  v256 = v429.__r_.__value_.__r.__words[0];
                                  if ((SHIBYTE(v433) & 0x80000000) == 0)
                                    goto LABEL_381;
                                  goto LABEL_387;
                                }
                              }
                              memmove(v255, v247, v246);
                              v255[v246] = 0;
                              LOBYTE(v434) = 1;
                              v256 = v429.__r_.__value_.__r.__words[0];
                              if ((SHIBYTE(v433) & 0x80000000) == 0)
                              {
LABEL_381:
                                if (!BYTE8(v430))
                                  goto LABEL_390;
                                goto LABEL_388;
                              }
LABEL_387:
                              operator delete(v431);
                              if (!BYTE8(v430))
                                goto LABEL_390;
LABEL_388:
                              if (SBYTE7(v430) < 0)
                                operator delete((void *)v429.__r_.__value_.__l.__size_);
LABEL_390:
                              if (v429.__r_.__value_.__r.__words[0])
                                os_release(v429.__r_.__value_.__l.__data_);
                              if (!v177 || !*(_QWORD *)(v177 + 24))
                              {
                                os_log_type_enabled(v256, OS_LOG_TYPE_INFO);
                                LODWORD(v429.__r_.__value_.__l.__data_) = 136315138;
                                *(std::string::size_type *)((char *)v429.__r_.__value_.__r.__words + 4) = (std::string::size_type)v243;
                                v265 = (void *)_os_log_send_and_compose_impl();
                                v266 = v355;
                                v267 = (std::string::size_type *)MEMORY[0x24BEDB7F0];
                                if (v265)
                                  free(v265);
                                goto LABEL_472;
                              }
                              v259 = _os_log_pack_size();
                              v260 = operator new(v259, (std::align_val_t)8uLL);
                              v261 = (_QWORD *)operator new();
                              *v261 = &off_24C9ABB80;
                              v261[1] = 0;
                              v261[2] = 0;
                              v261[3] = v260;
                              v418.__r_.__value_.__r.__words[0] = (std::string::size_type)v260;
                              v418.__r_.__value_.__l.__size_ = (std::string::size_type)v260;
                              v420 = 0;
                              v418.__r_.__value_.__r.__words[2] = (std::string::size_type)v261;
                              v419 = 0;
                              v262 = strlen(v243);
                              if (v262 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              v263 = v262;
                              if (v262 >= 0x17)
                              {
                                v269 = (v262 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v262 | 7) != 0x17)
                                  v269 = v262 | 7;
                                v270 = v269 + 1;
                                v264 = (void **)operator new(v269 + 1);
                                *((_QWORD *)&v422 + 1) = v270 | 0x8000000000000000;
                                __dst = v264;
                                *(_QWORD *)&v422 = v263;
                              }
                              else
                              {
                                HIBYTE(v422) = v262;
                                v264 = (void **)&__dst;
                                if (!v262)
                                {
LABEL_408:
                                  *((_BYTE *)v264 + v263) = 0;
                                  v271 = __dst;
                                  v426.__r_.__value_.__r.__words[0] = v422;
                                  *(std::string::size_type *)((char *)v426.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v422 + 7);
                                  v272 = HIBYTE(v422);
                                  v273 = operator new(0x38uLL);
                                  v273[1] = 0;
                                  v273[2] = 0;
                                  v273[3] = off_24C9ABC20;
                                  *v273 = &off_24C9ABBD0;
                                  v274 = v426.__r_.__value_.__r.__words[0];
                                  v273[4] = v271;
                                  v273[5] = v274;
                                  *(_QWORD *)((char *)v273 + 47) = *(std::string::size_type *)((char *)v426.__r_.__value_.__r.__words
                                                                                             + 7);
                                  *((_BYTE *)v273 + 55) = v272;
                                  v426.__r_.__value_.__r.__words[0] = 0;
                                  *(std::string::size_type *)((char *)v426.__r_.__value_.__r.__words + 7) = 0;
                                  v275 = v420;
                                  v419 = (char *)(v273 + 3);
                                  v420 = (std::__shared_weak_count *)v273;
                                  if (v275)
                                  {
                                    v276 = (unint64_t *)&v275->__shared_owners_;
                                    do
                                      v277 = __ldaxr(v276);
                                    while (__stlxr(v277 - 1, v276));
                                    if (!v277)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                                      std::__shared_weak_count::__release_weak(v275);
                                    }
                                  }
                                  v429 = v418;
                                  v278 = v419;
                                  if (v418.__r_.__value_.__r.__words[2])
                                  {
                                    v279 = (unint64_t *)(v418.__r_.__value_.__r.__words[2] + 8);
                                    do
                                      v280 = __ldxr(v279);
                                    while (__stxr(v280 + 1, v279));
                                  }
                                  v281 = v420;
                                  *(_QWORD *)&v430 = v278;
                                  *((_QWORD *)&v430 + 1) = v420;
                                  if (v420)
                                  {
                                    v282 = (unint64_t *)&v420->__shared_owners_;
                                    do
                                      v283 = __ldxr(v282);
                                    while (__stxr(v283 + 1, v282));
                                    v431 = v278;
                                    do
                                      v284 = __ldaxr(v282);
                                    while (__stlxr(v284 - 1, v282));
                                    if (!v284)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                                      std::__shared_weak_count::__release_weak(v281);
                                    }
                                  }
                                  else
                                  {
                                    v431 = v278;
                                  }
                                  v285 = (std::__shared_weak_count *)v418.__r_.__value_.__r.__words[2];
                                  if (v418.__r_.__value_.__r.__words[2])
                                  {
                                    v286 = (unint64_t *)(v418.__r_.__value_.__r.__words[2] + 8);
                                    do
                                      v287 = __ldaxr(v286);
                                    while (__stlxr(v287 - 1, v286));
                                    if (!v287)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                                      std::__shared_weak_count::__release_weak(v285);
                                    }
                                  }
                                  v288 = v429.__r_.__value_.__r.__words[0];
                                  if (v431[31] >= 0)
                                    v289 = v431 + 8;
                                  else
                                    v289 = (char *)*((_QWORD *)v431 + 1);
                                  v290 = _os_log_pack_fill();
                                  *(_DWORD *)v290 = 136315138;
                                  *(_QWORD *)(v290 + 4) = v289;
                                  v291 = operator new();
                                  v292 = *(unsigned __int8 *)(v244 + 39);
                                  if ((v292 & 0x80u) == 0)
                                    v293 = v245;
                                  else
                                    v293 = *(_QWORD *)(v244 + 16);
                                  if ((v292 & 0x80u) != 0)
                                    v292 = *(_QWORD *)(v244 + 24);
                                  *(_QWORD *)v291 = v288;
                                  *(_OWORD *)(v291 + 8) = *(_OWORD *)&v429.__r_.__value_.__r.__words[1];
                                  *(_OWORD *)&v429.__r_.__value_.__r.__words[1] = 0uLL;
                                  *(_OWORD *)(v291 + 24) = v430;
                                  v430 = 0uLL;
                                  *(_QWORD *)(v291 + 40) = v293;
                                  *(_QWORD *)(v291 + 48) = v292;
                                  *(_BYTE *)(v291 + 56) = 1;
                                  __dst = 0;
                                  v418.__r_.__value_.__r.__words[0] = v291;
                                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v177 + 24) + 40))(*(_QWORD *)(v177 + 24), &v418);
                                  v294 = v418.__r_.__value_.__r.__words[0];
                                  v418.__r_.__value_.__r.__words[0] = 0;
                                  v266 = v355;
                                  v267 = (std::string::size_type *)MEMORY[0x24BEDB7F0];
                                  if (v294)
                                  {
                                    v295 = *(std::__shared_weak_count **)(v294 + 32);
                                    if (v295)
                                    {
                                      v296 = (unint64_t *)&v295->__shared_owners_;
                                      do
                                        v297 = __ldaxr(v296);
                                      while (__stlxr(v297 - 1, v296));
                                      if (!v297)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                                        std::__shared_weak_count::__release_weak(v295);
                                      }
                                    }
                                    v298 = *(std::__shared_weak_count **)(v294 + 16);
                                    if (v298)
                                    {
                                      v299 = (unint64_t *)&v298->__shared_owners_;
                                      do
                                        v300 = __ldaxr(v299);
                                      while (__stlxr(v300 - 1, v299));
                                      if (!v300)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                                        std::__shared_weak_count::__release_weak(v298);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v294, 0x10F0C40B62ED6C6);
                                    v301 = __dst;
                                    __dst = 0;
                                    if (v301)
                                    {
                                      v302 = (std::__shared_weak_count *)v301[4];
                                      if (v302)
                                      {
                                        v303 = (unint64_t *)&v302->__shared_owners_;
                                        do
                                          v304 = __ldaxr(v303);
                                        while (__stlxr(v304 - 1, v303));
                                        if (!v304)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                                          std::__shared_weak_count::__release_weak(v302);
                                        }
                                      }
                                      v305 = (std::__shared_weak_count *)v301[2];
                                      if (v305)
                                      {
                                        v306 = (unint64_t *)&v305->__shared_owners_;
                                        do
                                          v307 = __ldaxr(v306);
                                        while (__stlxr(v307 - 1, v306));
                                        if (!v307)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                                          std::__shared_weak_count::__release_weak(v305);
                                        }
                                      }
                                      MEMORY[0x212BC6398](v301, 0x10F0C40B62ED6C6);
                                    }
                                  }
                                  v308 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
                                  if (*((_QWORD *)&v430 + 1))
                                  {
                                    v309 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
                                    do
                                      v310 = __ldaxr(v309);
                                    while (__stlxr(v310 - 1, v309));
                                    if (!v310)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                                      std::__shared_weak_count::__release_weak(v308);
                                    }
                                  }
                                  v311 = (std::__shared_weak_count *)v429.__r_.__value_.__r.__words[2];
                                  if (v429.__r_.__value_.__r.__words[2])
                                  {
                                    v312 = (unint64_t *)(v429.__r_.__value_.__r.__words[2] + 8);
                                    do
                                      v313 = __ldaxr(v312);
                                    while (__stlxr(v313 - 1, v312));
                                    if (!v313)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                                      std::__shared_weak_count::__release_weak(v311);
                                    }
                                  }
LABEL_472:
                                  if (v266)
                                  {
                                    v314 = (const char *)&v427;
                                    if (v428 < 0)
                                      v314 = (const char *)v427;
                                    sub_20E8C003C((uint64_t)&v367, "%s", v314);
                                    sub_20E863570((uint64_t)&v367);
                                  }
                                  sub_20E863570((uint64_t)&v367);
                                  v315 = v375;
                                  if (v375)
                                  {
                                    v316 = (unint64_t *)&v375->__shared_owners_;
                                    do
                                      v317 = __ldaxr(v316);
                                    while (__stlxr(v317 - 1, v316));
                                    if (!v317)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                                      std::__shared_weak_count::__release_weak(v315);
                                    }
                                  }
                                  if (SHIBYTE(v428) < 0)
                                    operator delete((void *)v427);
                                  v376.__r_.__value_.__r.__words[0] = *v267;
                                  v318 = v267[9];
                                  *(std::string::size_type *)((char *)v376.__r_.__value_.__r.__words
                                                            + *(_QWORD *)(v376.__r_.__value_.__r.__words[0] - 24)) = v267[8];
                                  v376.__r_.__value_.__r.__words[2] = v318;
                                  *(_QWORD *)&v377 = MEMORY[0x24BEDB848] + 16;
                                  if (v383 < 0)
                                    operator delete(__p);
                                  std::streambuf::~streambuf();
                                  std::iostream::~basic_iostream();
                                  MEMORY[0x212BC6290](v386);
                                  v169 = v358;
                                  goto LABEL_486;
                                }
                              }
                              memcpy(v264, v243, v263);
                              goto LABEL_408;
                            }
                          }
                          memmove(v252, v250, v251);
                          goto LABEL_377;
                        }
                      }
                      memmove(v238, v240, v237);
                      goto LABEL_356;
                    }
                  }
                  else
                  {
                    v236 = v385;
                    if ((v385 & 0x10) == 0)
                      goto LABEL_343;
                  }
                  v239 = v384;
                  if (v384 < v381)
                  {
                    v384 = v381;
                    v239 = v381;
                  }
                  v240 = v380;
                  v237 = v239 - (_QWORD)v380;
                  if (v239 - (unint64_t)v380 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_403;
                  goto LABEL_349;
                }
              }
              memmove(v218, v221, v217);
              goto LABEL_311;
            }
          }
        }
        else
        {
          v183 = 0;
        }
      }
      v424 = 0;
      v423 = 0;
      goto LABEL_268;
    }
  }
LABEL_486:
  if (v169)
  {
    v319 = (unint64_t *)&v169->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v321 = (std::__shared_weak_count *)*((_QWORD *)&v361 + 1);
  if (*((_QWORD *)&v361 + 1))
  {
    v322 = (unint64_t *)(*((_QWORD *)&v361 + 1) + 8);
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = (_QWORD *)v363;
  while (v324)
  {
    v338 = v324;
    v324 = (_QWORD *)*v324;
    v339 = (std::__shared_weak_count *)v338[4];
    if (v339)
    {
      v340 = (unint64_t *)&v339->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }
    operator delete(v338);
  }
  v325 = (void *)v362.__r_.__value_.__l.__size_;
  v362.__r_.__value_.__l.__size_ = 0;
  if (v325)
    operator delete(v325);
  v326 = (std::mutex *)v362.__r_.__value_.__r.__words[0];
  v362.__r_.__value_.__r.__words[0] = 0;
  if (v326)
  {
    std::mutex::~mutex(v326);
    MEMORY[0x212BC6398](v327, 0x1000C40FA0F61DDLL);
  }
  v328 = v366;
  if (!v366)
    goto LABEL_505;
  v329 = (unint64_t *)&v366->__shared_owners_;
  do
    v330 = __ldaxr(v329);
  while (__stlxr(v330 - 1, v329));
  if (!v330)
  {
    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
    std::__shared_weak_count::__release_weak(v328);
    if (v397)
      goto LABEL_506;
  }
  else
  {
LABEL_505:
    if (v397)
      goto LABEL_506;
  }
  if (v396)
  {
    if (v395)
    {
      if (v394 < 0)
        operator delete(v393);
      if (v392 < 0)
        operator delete(v391);
    }
    if (v390 && v389 < 0)
      operator delete(v388[0]);
  }
LABEL_506:
  v331 = (std::__shared_weak_count *)*((_QWORD *)&v398 + 1);
  if (*((_QWORD *)&v398 + 1))
  {
    v332 = (unint64_t *)(*((_QWORD *)&v398 + 1) + 8);
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
  if (v413)
    sub_20FD2D580((uint64_t)v399);
  v334 = v417;
  if (v417)
  {
    do
    {
      v342 = v334;
      v334 = (_QWORD *)*v334;
      v343 = (std::__shared_weak_count *)v342[4];
      if (v343)
      {
        v344 = (unint64_t *)&v343->__shared_owners_;
        do
          v345 = __ldaxr(v344);
        while (__stlxr(v345 - 1, v344));
        if (!v345)
        {
          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
          std::__shared_weak_count::__release_weak(v343);
        }
      }
      operator delete(v342);
    }
    while (v334);
  }
  v335 = v416;
  v416 = 0;
  if (v335)
    operator delete(v335);
  result = v415;
  v415 = 0;
  if (result)
  {
    std::mutex::~mutex(result);
    return (std::mutex *)MEMORY[0x212BC6398](v337, 0x1000C40FA0F61DDLL);
  }
  return result;
}

void sub_20FCFACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  if (*(_BYTE *)(v43 - 184) && *(char *)(v43 - 185) < 0)
    operator delete(*(void **)(v43 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a34);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  sub_20E863784((uint64_t)&a43);
  sub_20E89ED1C((uint64_t)&STACK[0x230]);
  sub_20E86665C((uint64_t)&STACK[0x2B0]);
  if (LOBYTE(STACK[0x3B0]))
    sub_20FD2D580((uint64_t)&STACK[0x2C0]);
  sub_20FCFBAC0((uint64_t)&STACK[0x3D0]);
  std::mutex::unlock(a16);
  _Unwind_Resume(a1);
}

void sub_20FCFB148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20FCF8140((uint64_t)&a43);
  JUMPOUT(0x20FCFB0F4);
}

void sub_20FCFB170()
{
  JUMPOUT(0x20FCFB114);
}

void sub_20FCFB180(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;

  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v20);
  JUMPOUT(0x20FCFB11CLL);
}

void sub_20FCFB1D0()
{
  JUMPOUT(0x20FCFB11CLL);
}

void sub_20FCFB1E0()
{
  sub_20E8C3144((void **)&STACK[0x3B8]);
  JUMPOUT(0x20FCFB138);
}

uint64_t *sub_20FCFB1F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FCFBB74(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C409D2E2591);
  }
  return a1;
}

_QWORD *sub_20FCFB238(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24CA05558;
  a1[1] = &unk_24CA05598;
  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = a1[4];
      a1[4] = 0;
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
  {
LABEL_6:
    v7 = sub_20FCFBB74(v6);
    MEMORY[0x212BC6398](v7, 0x10F2C409D2E2591);
  }
LABEL_7:
  a1[1] = off_24CA05FC0;
  v8 = (std::__shared_weak_count *)a1[3];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20FCFB330(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(a1 - 1) = &off_24CA05558;
  *a1 = &unk_24CA05598;
  v2 = a1[3];
  v3 = *(std::__shared_weak_count **)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = a1[3];
    a1[3] = 0;
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
  {
LABEL_6:
    v7 = sub_20FCFBB74(v6);
    MEMORY[0x212BC6398](v7, 0x10F2C409D2E2591);
  }
LABEL_7:
  *a1 = off_24CA05FC0;
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FCFB424(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24CA05558;
  a1[1] = &unk_24CA05598;
  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = a1[4];
    a1[4] = 0;
    if (!v6)
    {
LABEL_7:
      a1[1] = off_24CA05FC0;
      v8 = (std::__shared_weak_count *)a1[3];
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v6 = a1[4];
    a1[4] = 0;
    if (!v6)
      goto LABEL_7;
  }
  v7 = sub_20FCFBB74(v6);
  MEMORY[0x212BC6398](v7, 0x10F2C409D2E2591);
  goto LABEL_7;
}

void sub_20FCFB51C(uint64_t a1)
{
  sub_20FCFB424((_QWORD *)(a1 - 8));
}

uint64_t *sub_20FCFB524()
{
  uint64_t *v0;
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t *result;
  _BYTE v4[24];
  uint64_t *v5[2];
  _QWORD *v6;
  _QWORD *v7;

  v0 = (uint64_t *)operator new();
  v1 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v2 = (_QWORD *)operator new();
  *v2 = &off_24CA1F808;
  v6 = 0;
  v7 = v2;
  sub_20FCFC940((uint64_t)v0, &v7, (uint64_t)&off_254A5A4B8, 0, 0, &v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v5[0] = v0;
  v5[1] = 0;
  v4[0] = 0;
  v4[16] = 0;
  sub_20FCF8240(&qword_254A6D9A0, v5, (uint64_t)v4);
  result = v5[0];
  if (v5[0])
  {
    sub_20FCFD0A8((uint64_t)v5[0]);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FCFB668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_20EA5A0BC((uint64_t *)va);
  sub_20EA5A0BC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20FCFB684(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 32);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(v2 - 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  MEMORY[0x212BC6398](v1, 0x10E2C403A98C974);
  _Unwind_Resume(a1);
}

void sub_20FCFB6D8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C130);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C130))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.kit.dgn");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C128);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C130);
  }
  *a1 = qword_254A6C128;
}

void sub_20FCFB774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C130);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C130);
  _Unwind_Resume(a1);
}

void sub_20FCFB7CC(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[6];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid configuration. Custom default storage name must be 'Default' but '";
  v4[1] = 74;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = "' was given.";
  v4[5] = 12;
  sub_20E8778D4((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_20FCFB86C(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v4 = **(_QWORD **)(a1 + 32);
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = 1;
  v5 = atomic_load((unsigned __int8 *)&qword_254A6D9D0);
  if ((v5 & 1) == 0)
  {
    v9 = a3;
    v10 = v4;
    v8 = a4;
    v6 = __cxa_guard_acquire(&qword_254A6D9D0);
    a4 = v8;
    a3 = v9;
    v7 = v6;
    v4 = v10;
    if (v7)
    {
      __cxa_guard_release(&qword_254A6D9D0);
      a3 = v9;
      v4 = v10;
      a4 = v8;
    }
  }
  sub_20FCFDCB0(v4, (uint64_t)&v11, a3, (uint64_t)&off_254A54FD0, a4);
}

void sub_20FCFB904(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
  {
    sub_20FCFC100(v4, a2);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Input.h", 192, (uint64_t)"engine_channel_", 15, (uint64_t)"Input was moved from", 20, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FCFC100(*(_QWORD *)(v3 + 40), a2);
  }
}

void sub_20FCFB97C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
  {
    sub_20FCFC100(v4, a2);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Input.h", 192, (uint64_t)"engine_channel_", 15, (uint64_t)"Input was moved from", 20, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FCFC100(*(_QWORD *)(v3 + 40), a2);
  }
}

uint64_t sub_20FCFB9F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = **(_QWORD **)(a1 + 32);
  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_20FCFD704(v4, &v7, a3, a4);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_20FCFBA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCFBA70@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 48);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20FCFBA98@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 48);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20FCFBAC0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::mutex *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)(a1 + 24);
  while (v2)
  {
    v6 = v2;
    v2 = (_QWORD *)*v2;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(std::mutex **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    std::mutex::~mutex(v4);
    MEMORY[0x212BC6398]();
  }
  return a1;
}

uint64_t sub_20FCFBB74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::mutex *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  if (!*(_BYTE *)(a1 + 240) || !*(_BYTE *)(a1 + 232))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_6;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    operator delete(*(void **)(a1 + 168));
    if (!*(_BYTE *)(a1 + 160))
      goto LABEL_11;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    goto LABEL_10;
LABEL_6:
  if (!*(_BYTE *)(a1 + 160))
    goto LABEL_11;
LABEL_7:
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
LABEL_11:
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v2 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v2)
      goto LABEL_19;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v2)
      goto LABEL_19;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_19:
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = *(std::mutex **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v6)
  {
    std::mutex::~mutex(v6);
    MEMORY[0x212BC6398]();
  }
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 16) = off_24CA05FC0;
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v13)
    return a1;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_20FCFBD40(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(unsigned __int8 *)(a1 + 96) == *((unsigned __int8 *)a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      sub_20E869118(a1, a2);
      sub_20FCFBE78(a1 + 32, (char *)a2 + 32);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_8;
    if (*(char *)(a1 + 87) < 0)
    {
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(_BYTE *)(a1 + 24))
          goto LABEL_9;
        goto LABEL_16;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 32));
    if (*(_BYTE *)(a1 + 24))
    {
LABEL_9:
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
    }
LABEL_16:
    *(_BYTE *)(a1 + 96) = 0;
    return;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  sub_20E89F128((char *)(a1 + 32), a2 + 2);
  *(_BYTE *)(a1 + 96) = 1;
}

void sub_20FCFBE50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FCFBE78(uint64_t a1, char *a2)
{
  char *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  size_t v8;
  void **v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;

  v2 = a2;
  if (*(unsigned __int8 *)(a1 + 56) != a2[56])
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
      {
        operator delete(*(void **)(a1 + 32));
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
          goto LABEL_10;
      }
      else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_10:
        *(_BYTE *)(a1 + 56) = 0;
        return;
      }
      operator delete(*(void **)a1);
      goto LABEL_10;
    }
    if (a2[23] < 0)
    {
      sub_20E860C04((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
      *(_QWORD *)(a1 + 24) = *((_QWORD *)v2 + 3);
      v6 = a1 + 32;
      if ((v2[55] & 0x80000000) == 0)
        goto LABEL_14;
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v6 = a1 + 32;
      if ((a2[55] & 0x80000000) == 0)
      {
LABEL_14:
        v7 = *((_OWORD *)v2 + 2);
        *(_QWORD *)(v6 + 16) = *((_QWORD *)v2 + 6);
        *(_OWORD *)v6 = v7;
        *(_BYTE *)(a1 + 56) = 1;
        return;
      }
    }
    sub_20E860C04((_BYTE *)v6, *((void **)v2 + 4), *((_QWORD *)v2 + 5));
    *(_BYTE *)(a1 + 56) = 1;
    return;
  }
  if ((char *)a1 != a2 && *(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (a2[23] >= 0)
      {
        v8 = a2[23];
      }
      else
      {
        a2 = *(char **)a2;
        v8 = *((_QWORD *)v2 + 1);
      }
      sub_20E867CBC((void **)a1, a2, v8);
    }
    else if (a2[23] < 0)
    {
      sub_20E867BF8((_QWORD *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
    }
    *(_QWORD *)(a1 + 24) = *((_QWORD *)v2 + 3);
    v9 = (void **)(a1 + 32);
    v10 = v2[55];
    if (*(char *)(a1 + 55) < 0)
    {
      if (v10 >= 0)
        v12 = v2 + 32;
      else
        v12 = (void *)*((_QWORD *)v2 + 4);
      if (v10 >= 0)
        v13 = v2[55];
      else
        v13 = *((_QWORD *)v2 + 5);
      sub_20E867CBC(v9, v12, v13);
    }
    else if (v2[55] < 0)
    {
      sub_20E867BF8(v9, *((void **)v2 + 4), *((_QWORD *)v2 + 5));
    }
    else
    {
      v11 = *((_OWORD *)v2 + 2);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)v2 + 6);
      *(_OWORD *)v9 = v11;
    }
  }
}

void sub_20FCFC034(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20FCFC050(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[120] = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    sub_20E89EFE4(a1 + 16, (__int128 *)(a2 + 16));
    a1[120] = 1;
  }
  return a1;
}

void sub_20FCFC0A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 120) && *(_BYTE *)(v1 + 112))
  {
    if (*(_BYTE *)(v1 + 104))
    {
      if (*(char *)(v1 + 103) < 0)
        operator delete(*(void **)(v1 + 80));
      if (*(char *)(v1 + 71) < 0)
        operator delete(*(void **)(v1 + 48));
    }
    if (*(_BYTE *)(v1 + 40))
    {
      if (*(char *)(v1 + 39) < 0)
        operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FCFC100(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  timespec __rqtp;

  v4 = (unsigned __int8 *)(a1 + 32);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        nanosleep(&__rqtp, 0);
      }
      ++v6;
      do
        v7 = __ldaxr(v4);
      while (__stxr(1u, v4));
    }
    while (v7);
  }
  v9 = *(uint64_t **)(a1 + 16);
  v8 = *(unsigned int **)(a1 + 24);
  if (v8)
  {
    v10 = v8 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  atomic_store(0, v4);
  if (!v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Channel.h", 219, (uint64_t)"active_storage", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v12 = *v9;
  v13 = *(unsigned __int8 *)(v12 + 104);
  if (*(_BYTE *)(v12 + 104))
  {
    v14 = 0;
  }
  else
  {
    v14 = *(std::mutex **)(v12 + 112);
    std::mutex::lock(v14);
  }
  v15 = *(_QWORD *)(v12 + 72);
  v16 = *(_QWORD *)(v12 + 40);
  v17 = *a2;
  *a2 = 0;
  v18 = *(_QWORD *)(v16 + 8 * v15);
  *(_QWORD *)(v16 + 8 * v15) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v15 = *(_QWORD *)(v12 + 72);
  }
  v19 = *(_QWORD *)(v12 + 40);
  v20 = (*(_QWORD *)(v12 + 48) - v19) >> 3;
  v21 = v15 + 1;
  if (v21 >= v20)
    v22 = (*(_QWORD *)(v12 + 48) - v19) >> 3;
  else
    v22 = 0;
  *(_QWORD *)(v12 + 72) = v21 - v22;
  v23 = *(_QWORD *)(v12 + 80);
  if (v23 == v20)
  {
    v24 = *(_QWORD *)(v12 + 64) + 1;
    if (v24 < v20)
      v20 = 0;
    *(_QWORD *)(v12 + 64) = v24 - v20;
    *(_BYTE *)(v12 + 168) = 1;
    if (!v13)
    {
LABEL_31:
      std::mutex::unlock(v14);
      if (!v8)
        return;
      goto LABEL_32;
    }
  }
  else
  {
    *(_QWORD *)(v12 + 80) = v23 + 1;
    *(_BYTE *)(v12 + 168) = 1;
    if (!v13)
      goto LABEL_31;
  }
  if (!v8)
    return;
LABEL_32:
  v25 = v8 + 2;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    v28 = v8 + 3;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
  }
}

void sub_20FCFC314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FCFC32C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCFC32C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_20FCFC3AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCFC3D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20FCFD0A8(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20FCFC404(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3dgn6EngineEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn6EngineEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3dgn6EngineEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn6EngineEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FCFC474(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCFC484(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FCFC4BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA056A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCFC4CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA056A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FCFC4FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20FCFC558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA056F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCFC568(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA056F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FCFC598(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    sub_20FD2F310(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FCFC5D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCFC5E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FCFC618(uint64_t a1)
{
  return sub_20FD2D580(a1 + 24);
}

void sub_20FCFC624(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FCFC634(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FCFC664(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  std::mutex *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  _QWORD *v12;
  void *v13;
  std::mutex *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::mutex *v39;
  void *__p;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;

  v2 = a1[3];
  v3 = a1 + 5;
  v4 = *(std::mutex **)(v2 + 240);
  v6 = v2 + 248;
  v5 = *(void **)(v2 + 248);
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  v39 = v4;
  __p = v5;
  v7 = *(_QWORD *)(v2 + 256);
  v8 = *(_QWORD **)(v2 + 264);
  *(_QWORD *)(v2 + 256) = 0;
  v41 = v7;
  v42 = v8;
  v43 = *(_QWORD *)(v2 + 272);
  v44 = *(_DWORD *)(v2 + 280);
  if (v43)
  {
    v9 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v9 >= v7)
        v9 %= v7;
    }
    else
    {
      v9 &= v7 - 1;
    }
    *((_QWORD *)v5 + v9) = &v42;
    *(_QWORD *)(v2 + 264) = 0;
    *(_QWORD *)(v2 + 272) = 0;
  }
  v10 = *v3;
  *v3 = 0;
  v11 = *(std::mutex **)(v2 + 240);
  *(_QWORD *)(v2 + 240) = v10;
  if (v11)
  {
    std::mutex::~mutex(v11);
    MEMORY[0x212BC6398]();
  }
  sub_20FD03248(v6, a1 + 6);
  v12 = v42;
  if (v42)
  {
    do
    {
      v32 = v12;
      v12 = (_QWORD *)*v12;
      v33 = (std::__shared_weak_count *)v32[4];
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      operator delete(v32);
    }
    while (v12);
  }
  v13 = __p;
  __p = 0;
  if (v13)
    operator delete(v13);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    std::mutex::~mutex(v14);
    MEMORY[0x212BC6398]();
  }
  if (a1[11])
  {
    v15 = a1[3];
    v16 = (std::__shared_weak_count *)a1[12];
    v36 = a1[11];
    v37 = v16;
    a1[11] = 0;
    a1[12] = 0;
    sub_20FCFD2E8(v15, &v36);
    v17 = v38;
    if (v38)
    {
      v18 = (unint64_t *)&v38->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v37;
    if (v37)
    {
      v21 = (unint64_t *)&v37->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = (std::__shared_weak_count *)a1[14];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)a1[12];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_20FCFBAC0((uint64_t)v3);
  v29 = (std::__shared_weak_count *)a1[4];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

uint64_t sub_20FCFC940(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 __p;
  __int16 v49;
  void *v50[2];
  char v51;
  uint64_t (**v52)(uint64_t);
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  void (**v66)();
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t *v71[4];
  uint64_t v72;
  _QWORD *v73;

  v11 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v11 = (_QWORD *)operator new();
    *v11 = &off_24CA1F808;
  }
  *(_QWORD *)a1 = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24CA05A70;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  v13 = *a6;
  if (*a6)
  {
    *a6 = 0;
  }
  else
  {
    v14 = *(_QWORD *)a1;
    v13 = (_QWORD *)operator new();
    sub_20FD2DF9C(v13, v14, 5uLL);
  }
  *(_QWORD *)(a1 + 40) = v13;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24CA05AC0;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v13;
  *(_QWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 850045863;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 850045863;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 232) = 0;
  v16 = (_QWORD **)(a1 + 232);
  memset(v71, 0, 24);
  sub_20FCF5948(a1 + 240, v71);
  v17 = operator new();
  *(_BYTE *)v17 = 0;
  *(_BYTE *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_BYTE *)(v17 + 32) = 0;
  *(_BYTE *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = a1;
  *(_QWORD *)(a1 + 288) = v17;
  v51 = 7;
  strcpy((char *)v50, "Default");
  *(_QWORD *)&__p = 0x6D25203A5425;
  v49 = 262;
  sub_20EA5C440((uint64_t)&v52, (__int128 *)v50, 0x20uLL, 0, 0, &__p);
  v52 = &off_24CA06AA8;
  v18 = operator new();
  *(_QWORD *)v18 = off_24C9BFEC0;
  *(_OWORD *)(v18 + 8) = v53;
  v53 = 0uLL;
  v19 = v55;
  *(_QWORD *)(v18 + 24) = v54;
  *(_QWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 40) = v56;
  *(_QWORD *)(v18 + 56) = v57;
  v54 = 0;
  v56 = 0uLL;
  v20 = v58;
  v57 = 0;
  *(_QWORD *)&v58 = 0;
  *(_OWORD *)(v18 + 64) = v20;
  v21 = v59;
  *((_QWORD *)&v58 + 1) = 0;
  v59 = 0;
  *(_QWORD *)(v18 + 80) = v21;
  v22 = atomic_load(&v60);
  *(_BYTE *)(v18 + 120) = 0;
  *(_QWORD *)(v18 + 88) = v22;
  *(_OWORD *)(v18 + 96) = v61;
  v23 = v62;
  v62 = 0;
  *(_QWORD *)(v18 + 112) = v23;
  *(_BYTE *)(v18 + 144) = 0;
  if (v65)
  {
    *(_OWORD *)(v18 + 120) = v63;
    *(_QWORD *)(v18 + 136) = v64;
    v64 = 0;
    v63 = 0uLL;
    *(_BYTE *)(v18 + 144) = 1;
  }
  *(_QWORD *)(v18 + 152) = 0;
  *(_QWORD *)(v18 + 160) = 0;
  *(_BYTE *)(v18 + 168) = 1;
  *(_BYTE *)(v18 + 176) = 0;
  *(_BYTE *)(v18 + 200) = 0;
  *(_BYTE *)(v18 + 208) = 0;
  *(_BYTE *)(v18 + 232) = 0;
  *(_QWORD *)v18 = &off_24CA06AA8;
  v71[3] = 0;
  v72 = v18;
  sub_20FCFD704(a1, &v72, (void (*)(uint64_t, uint64_t *))sub_20FD04F80, (uint64_t)&v73);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v24 = v73;
  v26 = v73[1];
  v25 = (std::__shared_weak_count *)v73[2];
  v67 = v26;
  v68 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v30 = v24[3];
  v29 = (std::__shared_weak_count *)v24[4];
  v66 = (void (**)())&off_24CA05FF0;
  v69 = v30;
  v70 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v73 = 0;
  (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  v33 = (_QWORD *)operator new();
  v67 = 0;
  v68 = 0;
  *v33 = &off_24CA05FF0;
  v33[1] = v26;
  v33[2] = v25;
  v33[3] = v30;
  v33[4] = v29;
  v69 = 0;
  v70 = 0;
  v34 = *v16;
  *v16 = v33;
  if (v34)
  {
    v35 = (std::__shared_weak_count *)v34[4];
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    *v34 = off_24CA05FC0;
    v38 = (std::__shared_weak_count *)v34[2];
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    MEMORY[0x212BC6398](v34, 0xE1C406427F484);
    v41 = v70;
    if (v70)
    {
      v42 = (unint64_t *)&v70->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  v66 = off_24CA05FC0;
  v44 = v68;
  if (v68)
  {
    v45 = (unint64_t *)&v68->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_20FD2D580((uint64_t)&v52);
  if (HIBYTE(v49) && (char)v49 < 0)
    operator delete((void *)__p);
  if (v51 < 0)
    operator delete(v50[0]);
  return a1;
}

void sub_20FCFCE68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x1081C40468F112ELL);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20FCFCE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20FCFCEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  std::mutex *v24;
  _QWORD **v25;
  std::mutex *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  sub_20FD0D854((_QWORD *)(v28 - 176));
  sub_20FD2D580((uint64_t)&a23);
  if (a16 && a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  v30 = *(_QWORD *)(v23 + 288);
  *(_QWORD *)(v23 + 288) = 0;
  if (v30)
    sub_20FD03170(v30);
  sub_20FCFBAC0(v27);
  sub_20FCFCFE0(v25);
  sub_20FD04F28(*(char **)(v23 + 216));
  std::mutex::~mutex(v26);
  std::mutex::~mutex(v24);
  if (*(_BYTE *)(v23 + 72))
  {
    v31 = *(_QWORD *)(v23 + 64);
    *(_QWORD *)(v23 + 64) = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  sub_20E86665C(a9);
  sub_20E86665C(v23);
  _Unwind_Resume(a1);
}

void sub_20FCFCF90()
{
  uint64_t v0;

  sub_20E8C3144((void **)(v0 - 136));
  JUMPOUT(0x20FCFCF38);
}

void sub_20FCFCFA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20FCFCFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_20FCFCFE0(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *v2 = off_24CA05FC0;
    v6 = (std::__shared_weak_count *)v2[2];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x212BC6398](v2, 0xE1C406427F484);
  }
  return a1;
}

uint64_t sub_20FCFD0A8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = *(_QWORD **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *v2 = off_24CA05FC0;
    v6 = (std::__shared_weak_count *)v2[2];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x212BC6398](v2, 0xE1C406427F484);
  }
  v9 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v9)
    sub_20FD03170(v9);
  sub_20FCFBAC0(a1 + 240);
  v10 = *(_QWORD **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *v10 = off_24CA05FC0;
    v14 = (std::__shared_weak_count *)v10[2];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    MEMORY[0x212BC6398](v10, 0xE1C406427F484);
  }
  sub_20FD04F28(*(char **)(a1 + 216));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_BYTE *)(a1 + 72))
  {
    v17 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = *(std::__shared_weak_count **)(a1 + 48);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v21 = *(std::__shared_weak_count **)(a1 + 8);
      if (v21)
        goto LABEL_35;
      return a1;
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v21)
    return a1;
LABEL_35:
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20FCFD2E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  std::mutex *v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::logic_error *v20;
  uint64_t *v21;
  std::logic_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string __p;

  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20FCFD5A4();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 8);
  if (v5 != 7
    || (v6 >= 0 ? (v7 = (int *)v4) : (v7 = *(int **)v4),
        (v8 = *v7, v9 = *(int *)((char *)v7 + 3), v8 == 1634100548) ? (v10 = v9 == 1953264993) : (v10 = 0),
        !v10))
  {
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v21 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    sub_20FCFD664(&__p, v21);
    std::logic_error::logic_error(v20, &__p);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v20, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v11 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Default");
  v12 = sub_20E8D4B64(a1 + 208, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v12[7] + 32))(v12[7]);
  v13 = v12[7];
  v14 = (std::__shared_weak_count *)a2[1];
  v23 = *a2;
  v24 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 40))(v13, &v23);
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::mutex::unlock(v11);
}

void sub_20FCFD508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) != 0)
      goto LABEL_6;
  }
  else if (v18)
  {
LABEL_6:
    __cxa_free_exception(v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCFD5A4()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_20EA8A320(v1, "SwapDefaultStorage was given nullptr");
  if (v2 == -1)
    sub_20E877AB8();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24CA05878[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24CA05818[v2])(&v4, v1);
  return result;
}

void sub_20FCFD63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FCFD650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FCFD664(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[6];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Default storage name must be 'Default' but '";
  v4[1] = 44;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = "' was given";
  v4[5] = 11;
  sub_20E8778D4((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_20FCFD704(uint64_t a1@<X0>, _QWORD *a2@<X1>, void (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  int v26;
  const void *v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  unint64_t v36;
  size_t v37;
  int v38;
  int v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::logic_error *exception;
  void *v45;
  _QWORD **v46;
  std::string __p;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string __dst;
  std::mutex *v55;
  char v56;

  v55 = (std::mutex *)(a1 + 144);
  v56 = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *a2;
  v11 = *(std::__shared_weak_count **)(a1 + 48);
  v52 = *(_QWORD *)(a1 + 40);
  v53 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 88))(v10, &v52);
  v14 = v53;
  if (v53)
  {
    v15 = (unint64_t *)&v53->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (uint64_t **)sub_20E8D4B64(a1 + 208, (const void **)&__dst.__r_.__value_.__l.__data_);
  if ((uint64_t **)(a1 + 216) != v17)
  {
    sub_20FD03090((uint64_t)&v55);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20FD030D0(&__p, (uint64_t *)&__dst);
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v18 = *a2;
  *a2 = 0;
  v51 = v18;
  a3(a1, &v51);
  v19 = v51;
  v51 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 24))(&v49);
  v20 = v49;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  v48 = v20;
  v21 = (uint64_t *)operator new(0x40uLL);
  v22 = v21;
  *((_OWORD *)v21 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v23 = __p.__r_.__value_.__r.__words[2];
  v46 = (_QWORD **)(a1 + 208);
  memset(&__p, 0, sizeof(__p));
  v21[6] = v23;
  v21[7] = v20;
  v24 = *v17;
  if (!*v17)
  {
    v29 = v17;
    v30 = v17;
LABEL_46:
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v30;
    *v29 = v22;
    v40 = (_QWORD *)**v46;
    if (v40)
    {
      *v46 = v40;
      v22 = *v29;
    }
    sub_20E868578(*v17, v22);
    ++*(_QWORD *)(a1 + 224);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
LABEL_49:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  v25 = *((_BYTE *)v21 + 55);
  v26 = v25;
  v45 = (void *)v21[4];
  if (v25 >= 0)
    v27 = v21 + 4;
  else
    v27 = (const void *)v21[4];
  if (v25 >= 0)
    v28 = *((unsigned __int8 *)v21 + 55);
  else
    v28 = v21[5];
  while (1)
  {
    while (1)
    {
      v30 = (uint64_t **)v24;
      v33 = v24[4];
      v31 = v24 + 4;
      v32 = (uint64_t *)v33;
      v34 = *((char *)v31 + 23);
      v35 = v34 >= 0 ? v31 : v32;
      v36 = v34 >= 0 ? *((unsigned __int8 *)v31 + 23) : v31[1];
      v37 = v36 >= v28 ? v28 : v36;
      v38 = memcmp(v27, v35, v37);
      if (v38)
        break;
      if (v28 >= v36)
        goto LABEL_39;
LABEL_25:
      v24 = *v30;
      v29 = v30;
      if (!*v30)
        goto LABEL_46;
    }
    if (v38 < 0)
      goto LABEL_25;
LABEL_39:
    v39 = memcmp(v35, v27, v37);
    if (!v39)
      break;
    if ((v39 & 0x80000000) == 0)
      goto LABEL_61;
LABEL_43:
    v24 = v30[1];
    if (!v24)
    {
      v29 = v30 + 1;
      goto LABEL_46;
    }
  }
  if (v36 < v28)
    goto LABEL_43;
LABEL_61:
  if (v26 < 0)
  {
    operator delete(v45);
    operator delete(v22);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  operator delete(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_49;
LABEL_50:
  v41 = v50;
  if (!v50)
    goto LABEL_54;
  v42 = (unint64_t *)&v50->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_55:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_54:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_55;
  }
  if (v56)
    std::mutex::unlock(v55);
}

void sub_20FCFDACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0)
      {
        operator delete(a24);
        if (!*(_BYTE *)(v31 - 88))
LABEL_8:
          _Unwind_Resume(a1);
      }
      else if (!*(_BYTE *)(v31 - 88))
      {
        goto LABEL_8;
      }
      std::mutex::unlock(*(std::mutex **)(v31 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t sub_20FCFDBB8(uint64_t a1, __int128 *a2)
{
  std::mutex *v3;
  char v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t *v13;

  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::mutex **)(a1 + 240);
  std::mutex::lock(v3);
  v13 = &v11;
  v11 = v10;
  v12 = &v10;
  sub_20FCF7C04((uint64_t *)(a1 + 248), &v11, (uint64_t)&unk_2102DB95C, &v13, (_QWORD **)&v12);
  v5 = v4;
  std::mutex::unlock(v3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return v5 & 1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return v5 & 1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v5 & 1;
}

void sub_20FCFDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FCFDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FCFDCB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  void **v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t *v15;
  size_t *v16;
  size_t *v17;
  int v18;
  size_t *v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  _BYTE *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *ptr;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  void **v53;
  void *v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _BYTE *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  _QWORD *v65;
  unint64_t v66;
  size_t v67;
  int v68;
  int v69;
  _OWORD *v70;
  uint64_t v71;
  std::mutex *v72;
  unint64_t *v73;
  unint64_t v74;
  void **v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__assoc_sub_state *v95;
  uint64_t v96;
  int v97;
  __n128 v98;
  void **v99;
  void **v100;
  void *v101;
  unint64_t v102;
  void **v103;
  void **v104;
  void *v105;
  std::mutex *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  __n128 *v120;
  uint64_t v121;
  _QWORD *v122;
  void *v123;
  char ptr_high;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  void **v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  __n128 v133;
  void **v134;
  void **v135;
  void *v136;
  void *v137;
  std::exception_ptr *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  __n128 v142;
  void **v143;
  void **v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void **v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const void **v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void **v166;
  void **v167;
  void *v168;
  std::exception_ptr v169;
  unint64_t v171;
  uint64_t v172;
  std::mutex *v174;
  uint64_t v176;
  std::mutex *v177;
  void **v178;
  _BYTE v179[25];
  _BYTE v180[47];
  _BYTE v181[32];
  unint64_t v182;
  void *v183[2];
  uint64_t v184;
  char v185;
  char v186;
  char v187;
  void *v188[2];
  uint64_t v189;
  unsigned __int8 v190;
  __n128 v191;
  __n128 v192;
  void *v193;
  char v194;
  void *v195[2];
  uint64_t v196;
  uint64_t v197;
  void *v198[2];
  uint64_t v199;
  char v200;
  char v201;
  char v202;
  char v203;
  __int128 v204;
  _QWORD v205[2];
  char v206;
  _BYTE v207[7];
  uint64_t *v208;
  uint64_t v209[2];
  _QWORD v210[3];
  __int128 v211;
  __int128 v212;
  char v213;
  char v214;
  void *v215;
  char v216;
  void *v217;
  char v218;
  char v219;
  char v220;
  char v221;
  _BYTE __p[32];
  __n128 v223;
  __n128 v224;
  void *v225;
  char v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  void *v230[2];
  uint64_t v231;
  char v232;
  char v233;
  char v234;
  void *v235;
  void **v236;
  char v237;
  void *v238;
  char v239;
  char v240;
  void *v241;
  char v242;
  void *v243;
  char v244;
  char v245;
  char v246;
  char v247;
  std::exception_ptr v248[5];

  v248[2] = *(std::exception_ptr *)MEMORY[0x24BDAC8D0];
  LOBYTE(v211) = 0;
  v221 = 0;
  v210[0] = a1;
  v210[1] = a3;
  v210[2] = &v211;
  v171 = sub_20FCFFA24(v210);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v174 = (std::mutex *)(a1 + 80);
  v172 = a5;
  v177 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  v188[1] = 0;
  v189 = 0;
  v178 = &v188[1];
  v188[0] = &v188[1];
  v7 = *(_QWORD **)(a1 + 208);
  v176 = a1;
  v8 = (_QWORD *)(a1 + 216);
  if (v7 != (_QWORD *)(a1 + 216))
  {
    do
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v7[7] + 32))(__p);
      v9 = v188[1];
      v10 = v178;
      v11 = v178;
      if (v188[1])
      {
        v12 = *((char *)v7 + 55);
        if (v12 >= 0)
          v13 = v7 + 4;
        else
          v13 = (const void *)v7[4];
        if (v12 >= 0)
          v14 = *((unsigned __int8 *)v7 + 55);
        else
          v14 = v7[5];
        while (1)
        {
          v10 = (void **)v9;
          v17 = (size_t *)v9[4];
          v15 = v9 + 4;
          v16 = v17;
          v18 = *((char *)v15 + 23);
          if (v18 >= 0)
            v19 = v15;
          else
            v19 = v16;
          if (v18 >= 0)
            v20 = *((unsigned __int8 *)v15 + 23);
          else
            v20 = v15[1];
          if (v20 >= v14)
            v21 = v14;
          else
            v21 = v20;
          v22 = memcmp(v13, v19, v21);
          if (v22)
          {
            if (v22 < 0)
              goto LABEL_11;
LABEL_25:
            v23 = memcmp(v19, v13, v21);
            if (v23)
            {
              if ((v23 & 0x80000000) == 0)
                goto LABEL_38;
            }
            else if (v20 >= v14)
            {
LABEL_38:
              v24 = v10;
              v28 = *(_QWORD *)__p;
              v29 = *(_QWORD *)&__p[8];
              if (*(_QWORD *)&__p[8])
                goto LABEL_39;
              goto LABEL_41;
            }
            v9 = v10[1];
            if (!v9)
            {
              v11 = v10 + 1;
              break;
            }
          }
          else
          {
            if (v14 >= v20)
              goto LABEL_25;
LABEL_11:
            v9 = *v10;
            v11 = v10;
            if (!*v10)
              break;
          }
        }
      }
      v24 = operator new(0x48uLL);
      v25 = v24 + 4;
      if (*((char *)v7 + 55) < 0)
      {
        sub_20E860C04(v25, (void *)v7[4], v7[5]);
      }
      else
      {
        v26 = *((_OWORD *)v7 + 2);
        v24[6] = v7[6];
        *(_OWORD *)v25 = v26;
      }
      v24[7] = 0;
      v24[8] = 0;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v10;
      *v11 = v24;
      v27 = v24;
      if (*(_QWORD *)v188[0])
      {
        v188[0] = *(void **)v188[0];
        v27 = (uint64_t *)*v11;
      }
      sub_20E868578((uint64_t *)v188[1], v27);
      ++v189;
      v28 = *(_QWORD *)__p;
      v29 = *(_QWORD *)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
LABEL_39:
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
LABEL_41:
      v32 = (std::__shared_weak_count *)v24[8];
      v24[7] = v28;
      v24[8] = v29;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)__p + 56))(&v204);
      v35 = (void *)v204;
      *(_QWORD *)v179 = v204;
      if ((_QWORD)v204)
      {
        v36 = (unint64_t *)operator new();
        v37 = v204;
        *v36 = (unint64_t)&off_24CA058B8;
        v36[1] = 0;
        v36[2] = 0;
        v36[3] = v37;
      }
      else
      {
        v36 = 0;
      }
      *(_QWORD *)&v179[8] = v36;
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v35 + 64))(v35, v7[7]);
      v38 = v7[7];
      v248[0].__ptr_ = v35;
      v248[1].__ptr_ = v36;
      if (v36)
      {
        v39 = v36 + 1;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v38 + 40))(v38, v248);
      ptr = (std::__shared_weak_count *)v248[1].__ptr_;
      if (!v248[1].__ptr_)
        goto LABEL_56;
      v42 = (unint64_t *)((char *)v248[1].__ptr_ + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))ptr->__on_zero_shared)(ptr);
        std::__shared_weak_count::__release_weak(ptr);
        v44 = *(std::__shared_weak_count **)&v179[8];
        if (!*(_QWORD *)&v179[8])
          goto LABEL_62;
      }
      else
      {
LABEL_56:
        v44 = *(std::__shared_weak_count **)&v179[8];
        if (!*(_QWORD *)&v179[8])
          goto LABEL_62;
      }
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
LABEL_62:
      v47 = *(std::__shared_weak_count **)&__p[8];
      if (!*(_QWORD *)&__p[8])
        goto LABEL_66;
      v48 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v50 = (_QWORD *)v7[1];
        if (!v50)
        {
          do
          {
LABEL_70:
            v51 = (_QWORD *)v7[2];
            v52 = *v51 == (_QWORD)v7;
            v7 = v51;
          }
          while (!v52);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_66:
        v50 = (_QWORD *)v7[1];
        if (!v50)
          goto LABEL_70;
      }
      do
      {
        v51 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
LABEL_3:
      v7 = v51;
    }
    while (v51 != v8);
  }
  std::mutex::unlock(v177);
  *(_QWORD *)&v179[8] = 0;
  *(_QWORD *)&v179[16] = 0;
  *(_QWORD *)v179 = &v179[8];
  v53 = (void **)v188[0];
  if (v188[0] != v178)
  {
    v177 = (std::mutex *)&__p[24];
    do
    {
      if (*((char *)v53 + 55) < 0)
      {
        sub_20E860C04(__p, v53[4], (unint64_t)v53[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v53 + 2);
        *(_QWORD *)&__p[16] = v53[6];
      }
      v54 = v53[7];
      v55 = (std::__shared_weak_count *)v53[8];
      *(_QWORD *)&__p[24] = v54;
      v223.n128_u64[0] = (unint64_t)v55;
      v53[7] = 0;
      v53[8] = 0;
      v56 = *(_QWORD **)&v179[8];
      v57 = &v179[8];
      v58 = &v179[8];
      if (!*(_QWORD *)&v179[8])
        goto LABEL_106;
      if (__p[23] >= 0)
        v59 = __p;
      else
        v59 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v60 = __p[23];
      else
        v60 = *(_QWORD *)&__p[8];
      do
      {
        while (1)
        {
          v58 = v56;
          v63 = (_QWORD *)v56[4];
          v61 = v56 + 4;
          v62 = v63;
          v64 = *((char *)v61 + 23);
          v65 = v64 >= 0 ? v61 : v62;
          v66 = v64 >= 0 ? *((unsigned __int8 *)v61 + 23) : v61[1];
          v67 = v66 >= v60 ? v60 : v66;
          v68 = memcmp(v59, v65, v67);
          if (v68)
            break;
          if (v60 >= v66)
            goto LABEL_100;
LABEL_86:
          v56 = (_QWORD *)*v58;
          v57 = v58;
          if (!*v58)
            goto LABEL_106;
        }
        if (v68 < 0)
          goto LABEL_86;
LABEL_100:
        v69 = memcmp(v65, v59, v67);
        if (v69)
        {
          if ((v69 & 0x80000000) == 0)
            goto LABEL_109;
        }
        else if (v66 >= v60)
        {
          goto LABEL_109;
        }
        v56 = (_QWORD *)v58[1];
      }
      while (v56);
      v57 = v58 + 1;
LABEL_106:
      v70 = operator new(0x48uLL);
      v70[2] = *(_OWORD *)__p;
      v71 = *(_QWORD *)&__p[16];
      memset(__p, 0, 24);
      *((_QWORD *)v70 + 6) = v71;
      *((_QWORD *)v70 + 7) = v54;
      *((_QWORD *)v70 + 8) = v55;
      v72 = v177;
      v177->__m_.__sig = 0;
      *(_QWORD *)v72->__m_.__opaque = 0;
      *(_QWORD *)v70 = 0;
      *((_QWORD *)v70 + 1) = 0;
      *((_QWORD *)v70 + 2) = v58;
      *v57 = v70;
      if (**(_QWORD **)v179)
      {
        *(_QWORD *)v179 = **(_QWORD **)v179;
        v70 = (_OWORD *)*v57;
      }
      sub_20E868578(*(uint64_t **)&v179[8], (uint64_t *)v70);
      ++*(_QWORD *)&v179[16];
      v55 = (std::__shared_weak_count *)v223.n128_u64[0];
      if (!v55)
        goto LABEL_113;
LABEL_109:
      v73 = (unint64_t *)&v55->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        if ((__p[23] & 0x80000000) != 0)
          goto LABEL_117;
LABEL_114:
        v75 = (void **)v53[1];
        if (!v75)
          goto LABEL_120;
        do
        {
LABEL_118:
          v76 = v75;
          v75 = (void **)*v75;
        }
        while (v75);
      }
      else
      {
LABEL_113:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_114;
LABEL_117:
        operator delete(*(void **)__p);
        v75 = (void **)v53[1];
        if (v75)
          goto LABEL_118;
        do
        {
LABEL_120:
          v76 = (void **)v53[2];
          v52 = *v76 == v53;
          v53 = v76;
        }
        while (!v52);
      }
      v53 = v76;
    }
    while (v76 != v178);
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v77 = *(_QWORD *)a2;
    v78 = *(_QWORD *)(a2 + 8);
    v79 = *(_BYTE *)(a2 + 16);
    LODWORD(v248[0].__ptr_) = *(_DWORD *)(a2 + 17);
    *(_DWORD *)((char *)&v248[0].__ptr_ + 3) = *(_DWORD *)(a2 + 20);
  }
  else
  {
    v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    v79 = 1;
  }
  v81 = *(uint64_t **)v179;
  v80 = *(_QWORD *)&v179[8];
  *(_QWORD *)__p = *(_QWORD *)v179;
  *(_QWORD *)&__p[8] = *(_QWORD *)&v179[8];
  v82 = *(_QWORD *)&v179[16];
  *(_QWORD *)&__p[16] = *(_QWORD *)&v179[16];
  if (*(_QWORD *)&v179[16])
  {
    *(_QWORD *)(*(_QWORD *)&v179[8] + 16) = &__p[8];
    *(_QWORD *)v179 = &v179[8];
    *(_QWORD *)&v179[8] = 0;
    *(_QWORD *)&v179[16] = 0;
    v82 = *(_QWORD *)&__p[16];
  }
  else
  {
    *(_QWORD *)__p = &__p[8];
    v81 = (uint64_t *)&__p[8];
  }
  v205[0] = v77;
  v205[1] = v78;
  v206 = v79;
  *(_DWORD *)v207 = v248[0].__ptr_;
  *(_DWORD *)&v207[3] = *(_DWORD *)((char *)&v248[0].__ptr_ + 3);
  v208 = v81;
  v209[0] = v80;
  v209[1] = v82;
  if (v82)
  {
    *(_QWORD *)(v80 + 16) = v209;
    *(_QWORD *)__p = &__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v80 = 0;
  }
  else
  {
    v208 = v209;
  }
  sub_20E8D1F68((uint64_t)__p, v80);
  sub_20E8D1F68((uint64_t)v179, *(uint64_t *)&v179[8]);
  sub_20FD04308((uint64_t)v188[1]);
  std::mutex::unlock(v174);
  v83 = *(_QWORD *)(v176 + 288);
  v84 = *(_QWORD *)(v83 + 24);
  if (v84 && !*(_BYTE *)(v83 + 16))
  {
    sub_210218568("Diagnostics Engine Server", 0, 2u, 0, 0, 0, (uint64_t *)v188);
    v85 = v188[0];
    *(void **)&__p[8] = v188[0];
    *(_QWORD *)__p = &off_24CA1E2F8;
    v86 = (_QWORD *)operator new();
    *v86 = &off_24CA1E2F8;
    v86[1] = v85;
    if (*(_BYTE *)(v83 + 16))
    {
      v87 = *(_QWORD *)(v83 + 8);
      *(_QWORD *)(v83 + 8) = 0;
      if (v87)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
        v88 = *(_QWORD *)(v83 + 8);
        *(_QWORD *)(v83 + 8) = 0;
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      }
    }
    *(_QWORD *)v83 = &off_24C9B1898;
    *(_QWORD *)(v83 + 8) = v86;
    *(_BYTE *)(v83 + 16) = 1;
    v84 = *(_QWORD *)(v83 + 24);
  }
  *(_QWORD *)&v204 = v83 + 24;
  *((_QWORD *)&v204 + 1) = v205;
  LOBYTE(v188[0]) = 0;
  v203 = 0;
  v89 = (unint64_t *)a3;
  if (*(_BYTE *)(a3 + 56))
  {
    if (v84 && v171)
    {
      v90 = *(_QWORD *)(*(_QWORD *)(v176 + 288) + 64);
      if (*(_QWORD *)(v90 + 224) >= 2uLL)
      {
        v102 = *(_QWORD *)a3;
LABEL_194:
        v109 = v102 / (v171 + 1);
        v110 = v109 * v171;
        goto LABEL_272;
      }
      std::mutex::lock((std::mutex *)(v90 + 144));
      sub_20FD0D9DC(*(_QWORD *)(*(_QWORD *)(v90 + 232) + 24), __p);
      std::mutex::unlock((std::mutex *)(v90 + 144));
      v91 = *(_QWORD *)__p;
      if (*(_BYTE *)(*(_QWORD *)__p + 104))
      {
        v92 = *(_QWORD *)(*(_QWORD *)__p + 80);
        v93 = *(std::__shared_weak_count **)&__p[8];
        v89 = (unint64_t *)a3;
        if (!*(_QWORD *)&__p[8])
          goto LABEL_193;
      }
      else
      {
        v106 = *(std::mutex **)(*(_QWORD *)__p + 112);
        std::mutex::lock(v106);
        v92 = *(_QWORD *)(v91 + 80);
        std::mutex::unlock(v106);
        v93 = *(std::__shared_weak_count **)&__p[8];
        v89 = (unint64_t *)a3;
        if (!*(_QWORD *)&__p[8])
          goto LABEL_193;
      }
      v107 = (unint64_t *)&v93->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v102 = *v89;
        if (v92 >= 0x21)
          goto LABEL_194;
        goto LABEL_269;
      }
LABEL_193:
      v102 = *v89;
      if (v92 >= 0x21)
        goto LABEL_194;
LABEL_269:
      v109 = v102 / (v171 + 1);
      if (v109 >= 0x19000)
        v109 = 102400;
      v110 = v102 - v109;
LABEL_272:
      v123 = (void *)v89[2];
      v122 = v89 + 2;
      *(void **)((char *)&v248[0].__ptr_ + 7) = v123;
      HIBYTE(v248[1].__ptr_) = *((_BYTE *)v122 + 8);
      ptr_high = HIBYTE(v248[1].__ptr_);
      *(_OWORD *)&__p[7] = *((_OWORD *)v122 + 1);
      __p[23] = *((_BYTE *)v122 + 32);
      if (HIBYTE(v248[1].__ptr_))
      {
        v125 = *v122 / 2;
        ptr_high = 1;
      }
      else
      {
        v125 = 0;
      }
      v96 = v172;
      *(_QWORD *)v179 = v109;
      v179[8] = 1;
      *(_OWORD *)&v179[9] = *(_OWORD *)&v248[0].__ptr_;
      *(_OWORD *)v180 = *(_OWORD *)__p;
      *(_QWORD *)&v180[16] = *(_QWORD *)&__p[16];
      *(_QWORD *)&v180[31] = v110;
      v180[39] = 1;
      *(_QWORD *)v181 = v125;
      v181[8] = ptr_high;
      v181[16] = 0;
      LOBYTE(v182) = 0;
      v126 = *(_QWORD *)(v176 + 288);
      *(_OWORD *)__p = *(_OWORD *)&v180[31];
      *(_OWORD *)&__p[16] = *(_OWORD *)v181;
      v223 = *(__n128 *)&v181[16];
      v224.n128_u64[0] = v182;
      v224.n128_u8[8] = 1;
      LOBYTE(v225) = 0;
      BYTE8(v227) = 0;
      sub_20FD02A0C((uint64_t *)v248, v126, &v204, (uint64_t)__p);
      v95 = (std::__assoc_sub_state *)v248[0].__ptr_;
      if (BYTE8(v227) && SBYTE7(v227) < 0)
        operator delete(v225);
      sub_20FCF6308(v176 + 240, (uint64_t)v205, (uint64_t)v179, (uint64_t *)__p);
      if (v203)
      {
        if (v202 && v201)
        {
          if (v200)
          {
            if (SHIBYTE(v199) < 0)
              operator delete(v198[0]);
            if (SHIBYTE(v196) < 0)
              operator delete(v195[0]);
          }
          if (v194 && SHIBYTE(v193) < 0)
            operator delete((void *)v192.n128_u64[0]);
        }
        if (v190)
        {
          v127 = (void **)v188[0];
          if (v188[0])
          {
            v128 = (void **)v188[1];
            v129 = v188[0];
            if (v188[1] != v188[0])
            {
              do
              {
                if (*((char *)v128 - 1) < 0)
                  operator delete(*(v128 - 3));
                v128 -= 3;
              }
              while (v128 != v127);
              v129 = v188[0];
            }
            v188[1] = v127;
            operator delete(v129);
          }
        }
      }
      LOBYTE(v188[0]) = 0;
      v190 = 0;
      if (__p[24])
      {
        *(_OWORD *)v188 = *(_OWORD *)__p;
        v189 = *(_QWORD *)&__p[16];
        memset(__p, 0, 24);
        v190 = 1;
      }
      v191.n128_u8[0] = 0;
      v202 = 0;
      if (v234)
      {
        v191 = v223;
        v192.n128_u8[0] = 0;
        v201 = 0;
        if (!v233)
        {
          v202 = 1;
          v203 = 1;
          if (!__p[24])
            goto LABEL_320;
          goto LABEL_312;
        }
        v194 = 0;
        if (v226)
        {
          v192 = v224;
          v193 = v225;
          v225 = 0;
          v224 = 0uLL;
          v194 = 1;
        }
        LOBYTE(v195[0]) = 0;
        v200 = 0;
        if (v232)
        {
          v196 = v228;
          *(_OWORD *)v195 = v227;
          v227 = 0uLL;
          v197 = v229;
          *(_OWORD *)v198 = *(_OWORD *)v230;
          v199 = v231;
          v228 = 0;
          v230[0] = 0;
          v230[1] = 0;
          v231 = 0;
          v200 = 1;
        }
        v201 = 1;
        v202 = 1;
        v203 = 1;
        if (v226 && SHIBYTE(v225) < 0)
        {
          operator delete((void *)v224.n128_u64[0]);
          if (!__p[24])
            goto LABEL_320;
          goto LABEL_312;
        }
      }
      else
      {
        v203 = 1;
      }
      if (!__p[24])
        goto LABEL_320;
LABEL_312:
      v130 = *(_QWORD *)__p;
      if (*(_QWORD *)__p)
      {
        v131 = *(_QWORD *)&__p[8];
        v132 = *(void **)__p;
        if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
        {
          do
          {
            if (*(char *)(v131 - 1) < 0)
              operator delete(*(void **)(v131 - 24));
            v131 -= 24;
          }
          while (v131 != v130);
          v132 = *(void **)__p;
        }
        *(_QWORD *)&__p[8] = v130;
        operator delete(v132);
      }
LABEL_320:
      if (v221)
      {
        v97 = 1;
        goto LABEL_322;
      }
      goto LABEL_339;
    }
    sub_20FCF6308(v176 + 240, (uint64_t)v205, a3, (uint64_t *)__p);
    v96 = v172;
    if (v203)
    {
      if (v202 && v201)
      {
        if (v200)
        {
          if (SHIBYTE(v199) < 0)
            operator delete(v198[0]);
          if (SHIBYTE(v196) < 0)
            operator delete(v195[0]);
        }
        if (v194 && SHIBYTE(v193) < 0)
          operator delete((void *)v192.n128_u64[0]);
      }
      if (v190)
      {
        v99 = (void **)v188[0];
        if (v188[0])
        {
          v100 = (void **)v188[1];
          v101 = v188[0];
          if (v188[1] != v188[0])
          {
            do
            {
              if (*((char *)v100 - 1) < 0)
                operator delete(*(v100 - 3));
              v100 -= 3;
            }
            while (v100 != v99);
            v101 = v188[0];
          }
          v188[1] = v99;
          operator delete(v101);
        }
      }
    }
    LOBYTE(v188[0]) = 0;
    v190 = 0;
    if (__p[24])
    {
      v98 = *(__n128 *)__p;
      *(_OWORD *)v188 = *(_OWORD *)__p;
      v189 = *(_QWORD *)&__p[16];
      memset(__p, 0, 24);
      v190 = 1;
    }
    v191.n128_u8[0] = 0;
    v202 = 0;
    if (v234)
    {
      v98 = v223;
      v191 = v223;
      v192.n128_u8[0] = 0;
      v201 = 0;
      if (!v233)
      {
        v202 = 1;
        v203 = 1;
        if (!__p[24])
          goto LABEL_248;
        goto LABEL_240;
      }
      v194 = 0;
      if (v226)
      {
        v98 = v224;
        v192 = v224;
        v193 = v225;
        v225 = 0;
        v224 = 0uLL;
        v194 = 1;
      }
      LOBYTE(v195[0]) = 0;
      v200 = 0;
      if (v232)
      {
        v196 = v228;
        *(_OWORD *)v195 = v227;
        v227 = 0uLL;
        v197 = v229;
        v98 = *(__n128 *)v230;
        *(_OWORD *)v198 = *(_OWORD *)v230;
        v199 = v231;
        v228 = 0;
        v230[0] = 0;
        v230[1] = 0;
        v231 = 0;
        v200 = 1;
      }
      v201 = 1;
      v202 = 1;
      v203 = 1;
      if (v226 && SHIBYTE(v225) < 0)
      {
        operator delete((void *)v224.n128_u64[0]);
        if (!__p[24])
          goto LABEL_248;
        goto LABEL_240;
      }
    }
    else
    {
      v203 = 1;
    }
    if (!__p[24])
      goto LABEL_248;
LABEL_240:
    v114 = *(_QWORD *)__p;
    if (*(_QWORD *)__p)
    {
      v115 = *(_QWORD *)&__p[8];
      v116 = *(void **)__p;
      if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
      {
        do
        {
          if (*(char *)(v115 - 1) < 0)
            operator delete(*(void **)(v115 - 24));
          v115 -= 24;
        }
        while (v115 != v114);
        v116 = *(void **)__p;
      }
      *(_QWORD *)&__p[8] = v114;
      operator delete(v116);
    }
LABEL_248:
    if (v221)
    {
      v97 = 0;
      v95 = 0;
      goto LABEL_322;
    }
    goto LABEL_250;
  }
  if (v84)
  {
    v94 = *(_QWORD *)(v176 + 288);
    __p[0] = 0;
    v224.n128_u8[8] = 0;
    LOBYTE(v225) = 0;
    BYTE8(v227) = 0;
    sub_20FD02A0C((uint64_t *)v179, v94, &v204, (uint64_t)__p);
    v95 = *(std::__assoc_sub_state **)v179;
    v96 = v172;
    if (BYTE8(v227) && SBYTE7(v227) < 0)
      operator delete(v225);
    v97 = 1;
  }
  else
  {
    v95 = 0;
    v97 = 0;
    v96 = v172;
  }
  sub_20FCF5DC4((std::mutex **)(v176 + 240), (uint64_t)v205, (uint64_t *)__p);
  if (v203)
  {
    if (v202 && v201)
    {
      if (v200)
      {
        if (SHIBYTE(v199) < 0)
          operator delete(v198[0]);
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
      }
      if (v194 && SHIBYTE(v193) < 0)
        operator delete((void *)v192.n128_u64[0]);
    }
    if (v190)
    {
      v103 = (void **)v188[0];
      if (v188[0])
      {
        v104 = (void **)v188[1];
        v105 = v188[0];
        if (v188[1] != v188[0])
        {
          do
          {
            if (*((char *)v104 - 1) < 0)
              operator delete(*(v104 - 3));
            v104 -= 3;
          }
          while (v104 != v103);
          v105 = v188[0];
        }
        v188[1] = v103;
        operator delete(v105);
      }
    }
  }
  LOBYTE(v188[0]) = 0;
  v190 = 0;
  if (__p[24])
  {
    v98 = *(__n128 *)__p;
    *(_OWORD *)v188 = *(_OWORD *)__p;
    v189 = *(_QWORD *)&__p[16];
    memset(__p, 0, 24);
    v190 = 1;
  }
  v191.n128_u8[0] = 0;
  v202 = 0;
  if (v234)
  {
    v98 = v223;
    v191 = v223;
    v192.n128_u8[0] = 0;
    v201 = 0;
    if (!v233)
    {
      v202 = 1;
      v203 = 1;
      if (!__p[24])
        goto LABEL_219;
      goto LABEL_211;
    }
    v194 = 0;
    if (v226)
    {
      v98 = v224;
      v192 = v224;
      v193 = v225;
      v225 = 0;
      v224 = 0uLL;
      v194 = 1;
    }
    LOBYTE(v195[0]) = 0;
    v200 = 0;
    if (v232)
    {
      v196 = v228;
      *(_OWORD *)v195 = v227;
      v227 = 0uLL;
      v197 = v229;
      v98 = *(__n128 *)v230;
      *(_OWORD *)v198 = *(_OWORD *)v230;
      v199 = v231;
      v228 = 0;
      v230[0] = 0;
      v230[1] = 0;
      v231 = 0;
      v200 = 1;
    }
    v201 = 1;
    v202 = 1;
    v203 = 1;
    if (v226 && SHIBYTE(v225) < 0)
    {
      operator delete((void *)v224.n128_u64[0]);
      if (!__p[24])
        goto LABEL_219;
      goto LABEL_211;
    }
  }
  else
  {
    v203 = 1;
  }
  if (!__p[24])
    goto LABEL_219;
LABEL_211:
  v111 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v112 = *(_QWORD *)&__p[8];
    v113 = *(void **)__p;
    if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
    {
      do
      {
        if (*(char *)(v112 - 1) < 0)
          operator delete(*(void **)(v112 - 24));
        v112 -= 24;
      }
      while (v112 != v111);
      v113 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v111;
    operator delete(v113);
  }
LABEL_219:
  if (v221)
  {
LABEL_322:
    v179[0] = 0;
    v179[24] = 0;
    *(_OWORD *)&v180[7] = v211;
    sub_20E89EFE4(&v180[23], &v212);
    v187 = 1;
    sub_20FD02DAC((uint64_t)__p, (uint64_t)v188);
    sub_20FD02DAC((uint64_t)&v235, (uint64_t)v179);
    sub_20FD09A10(2, (uint64_t)__p, (uint64_t *)v96);
    if (v247 && v246)
    {
      if (v245)
      {
        if (v244 < 0)
          operator delete(v243);
        if (v242 < 0)
          operator delete(v241);
      }
      if (v240 && v239 < 0)
        operator delete(v238);
    }
    if (v237)
    {
      v134 = (void **)v235;
      if (v235)
      {
        v135 = v236;
        v136 = v235;
        if (v236 != v235)
        {
          do
          {
            if (*((char *)v135 - 1) < 0)
              operator delete(*(v135 - 3));
            v135 -= 3;
          }
          while (v135 != v134);
          v136 = v235;
        }
        v236 = v134;
        operator delete(v136);
      }
    }
    if (v234 && v233)
    {
      if (v232)
      {
        if (SHIBYTE(v231) < 0)
          operator delete(v230[0]);
        if (SHIBYTE(v228) < 0)
          operator delete((void *)v227);
      }
      if (v226 && SHIBYTE(v225) < 0)
        operator delete((void *)v224.n128_u64[0]);
    }
    if (__p[24])
    {
      v146 = *(_QWORD *)__p;
      if (*(_QWORD *)__p)
      {
        v147 = *(_QWORD *)&__p[8];
        v148 = *(void **)__p;
        if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
        {
          do
          {
            if (*(char *)(v147 - 1) < 0)
              operator delete(*(void **)(v147 - 24));
            v147 -= 24;
          }
          while (v147 != v146);
          v148 = *(void **)__p;
        }
        *(_QWORD *)&__p[8] = v146;
        operator delete(v148);
      }
    }
    if (*(_BYTE *)(v96 + 24))
    {
      v149 = *(const void ***)(v96 + 8);
      v150 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - *(_QWORD *)v96) >> 3));
      if (v149 == *(const void ***)v96)
        v151 = 0;
      else
        v151 = v150;
      v133.n128_f64[0] = sub_20FD0A93C(*(_QWORD *)v96, v149, (uint64_t)__p, v151, 1, v133);
    }
    if (!v187 || !v186)
      goto LABEL_407;
    if (v185)
    {
      if ((SHIBYTE(v184) & 0x80000000) == 0)
      {
        if ((v181[31] & 0x80000000) == 0)
          goto LABEL_404;
LABEL_425:
        operator delete(*(void **)&v181[8]);
        if (v181[0])
        {
LABEL_405:
          if ((v180[46] & 0x80000000) != 0)
            operator delete(*(void **)&v180[23]);
        }
LABEL_407:
        if (v179[24])
        {
          v152 = *(_QWORD *)v179;
          if (*(_QWORD *)v179)
          {
            v153 = *(_QWORD *)&v179[8];
            v154 = *(void **)v179;
            if (*(_QWORD *)&v179[8] != *(_QWORD *)v179)
            {
              do
              {
                if (*(char *)(v153 - 1) < 0)
                  operator delete(*(void **)(v153 - 24));
                v153 -= 24;
              }
              while (v153 != v152);
              v154 = *(void **)v179;
            }
            *(_QWORD *)&v179[8] = v152;
            operator delete(v154);
          }
        }
        if (v97)
        {
          if (v95)
          {
            v155 = (unint64_t *)&v95->__shared_owners_;
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
              ((void (*)(std::__assoc_sub_state *, __n128))v95->__on_zero_shared)(v95, v133);
          }
        }
        goto LABEL_472;
      }
      operator delete(v183[0]);
      if ((v181[31] & 0x80000000) != 0)
        goto LABEL_425;
    }
LABEL_404:
    if (v181[0])
      goto LABEL_405;
    goto LABEL_407;
  }
  if (!v84)
  {
LABEL_250:
    if (v190)
    {
      v117 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v188[1] - (char *)v188[0]) >> 3));
      if (v188[1] == v188[0])
        v118 = 0;
      else
        v118 = v117;
      sub_20FD0A93C((uint64_t)v188[0], (const void **)v188[1], (uint64_t)__p, v118, 1, v98);
      v119 = v190;
      *(_BYTE *)v96 = 0;
      *(_BYTE *)(v96 + 24) = 0;
      if (v119)
      {
        *(_OWORD *)v96 = *(_OWORD *)v188;
        *(_QWORD *)(v96 + 16) = v189;
        v188[1] = 0;
        v189 = 0;
        v188[0] = 0;
        *(_BYTE *)(v96 + 24) = 1;
      }
      *(_BYTE *)(v96 + 32) = 0;
      v120 = (__n128 *)(v96 + 32);
      *(_BYTE *)(v96 + 152) = 0;
      if (!v202)
        goto LABEL_472;
    }
    else
    {
      *(_BYTE *)v96 = 0;
      *(_BYTE *)(v96 + 24) = 0;
      *(_BYTE *)(v96 + 32) = 0;
      v120 = (__n128 *)(v96 + 32);
      *(_BYTE *)(v96 + 152) = 0;
      if (!v202)
        goto LABEL_472;
    }
    *v120 = v191;
    *(_BYTE *)(v96 + 48) = 0;
    *(_BYTE *)(v96 + 144) = 0;
    if (v201)
    {
      *(_BYTE *)(v96 + 72) = 0;
      if (v194)
      {
        *(__n128 *)(v96 + 48) = v192;
        *(_QWORD *)(v96 + 64) = v193;
        v193 = 0;
        v192 = 0uLL;
        *(_BYTE *)(v96 + 72) = 1;
      }
      *(_BYTE *)(v96 + 80) = 0;
      *(_BYTE *)(v96 + 136) = 0;
      if (v200)
      {
        v121 = v197;
        *(_QWORD *)(v96 + 96) = v196;
        *(_OWORD *)(v96 + 80) = *(_OWORD *)v195;
        v195[0] = 0;
        v195[1] = 0;
        *(_QWORD *)(v96 + 104) = v121;
        *(_OWORD *)(v96 + 112) = *(_OWORD *)v198;
        *(_QWORD *)(v96 + 128) = v199;
        v196 = 0;
        v198[0] = 0;
        v198[1] = 0;
        v199 = 0;
        *(_BYTE *)(v96 + 136) = 1;
      }
      *(_BYTE *)(v96 + 144) = 1;
    }
    *(_BYTE *)(v96 + 152) = 1;
    goto LABEL_472;
  }
LABEL_339:
  *(_QWORD *)__p = &v95->__mut_;
  __p[8] = 1;
  std::mutex::lock(&v95->__mut_);
  std::__assoc_sub_state::__sub_wait(v95, (std::unique_lock<std::mutex> *)__p);
  v137 = v95->__exception_.__ptr_;
  v248[0].__ptr_ = 0;
  std::exception_ptr::~exception_ptr(v248);
  if (v137)
  {
    v169.__ptr_ = std::exception_ptr::exception_ptr(v138, &v95->__exception_);
    std::rethrow_exception(v169);
    __break(1u);
    return;
  }
  v179[0] = 0;
  v179[24] = 0;
  if (LOBYTE(v95[1].__mut_.__m_.__sig))
  {
    *(std::__shared_count *)v179 = v95[1].std::__shared_count;
    *(_QWORD *)&v179[16] = v95[1].__exception_.__ptr_;
    v95[1].__shared_owners_ = 0;
    v95[1].__exception_.__ptr_ = 0;
    v95[1].__vftable = 0;
    v179[24] = 1;
  }
  v180[7] = 0;
  v187 = 0;
  if (LOBYTE(v95[2].__shared_owners_))
  {
    *(_OWORD *)&v180[7] = *(_OWORD *)v95[1].__mut_.__m_.__opaque;
    v180[23] = 0;
    v186 = 0;
    if (LOBYTE(v95[2].__vftable))
    {
      v181[0] = 0;
      if (v95[1].__mut_.__m_.__opaque[40])
      {
        *(_OWORD *)&v180[23] = *(_OWORD *)&v95[1].__mut_.__m_.__opaque[16];
        *(_QWORD *)&v180[39] = *(_QWORD *)&v95[1].__mut_.__m_.__opaque[32];
        *(_QWORD *)&v95[1].__mut_.__m_.__opaque[24] = 0;
        *(_QWORD *)&v95[1].__mut_.__m_.__opaque[32] = 0;
        *(_QWORD *)&v95[1].__mut_.__m_.__opaque[16] = 0;
        v181[0] = 1;
      }
      v181[8] = 0;
      v185 = 0;
      if (LOBYTE(v95[1].__state_))
      {
        v139 = *(_QWORD *)&v95[1].__cv_.__cv_.__opaque[8];
        *(_QWORD *)&v181[24] = *(_QWORD *)v95[1].__cv_.__cv_.__opaque;
        *(_OWORD *)&v181[8] = *(_OWORD *)&v95[1].__mut_.__m_.__opaque[48];
        v95[1].__cv_.__cv_.__sig = 0;
        *(_QWORD *)v95[1].__cv_.__cv_.__opaque = 0;
        *(_QWORD *)&v95[1].__mut_.__m_.__opaque[48] = 0;
        v182 = v139;
        *(_OWORD *)v183 = *(_OWORD *)&v95[1].__cv_.__cv_.__opaque[16];
        v184 = *(_QWORD *)&v95[1].__cv_.__cv_.__opaque[32];
        *(_QWORD *)&v95[1].__cv_.__cv_.__opaque[16] = 0;
        *(_QWORD *)&v95[1].__cv_.__cv_.__opaque[24] = 0;
        *(_QWORD *)&v95[1].__cv_.__cv_.__opaque[32] = 0;
        v185 = 1;
      }
      v186 = 1;
    }
    v187 = 1;
  }
  if (__p[8])
    std::mutex::unlock(*(std::mutex **)__p);
  v140 = (unint64_t *)&v95->__shared_owners_;
  do
    v141 = __ldaxr(v140);
  while (__stlxr(v141 - 1, v140));
  if (!v141)
    ((void (*)(std::__assoc_sub_state *))v95->__on_zero_shared)(v95);
  sub_20FD02DAC((uint64_t)__p, (uint64_t)v188);
  sub_20FD02DAC((uint64_t)&v235, (uint64_t)v179);
  sub_20FD09A10(2, (uint64_t)__p, (uint64_t *)v96);
  if (v247 && v246)
  {
    if (v245)
    {
      if (v244 < 0)
        operator delete(v243);
      if (v242 < 0)
        operator delete(v241);
    }
    if (v240 && v239 < 0)
      operator delete(v238);
  }
  if (v237)
  {
    v143 = (void **)v235;
    if (v235)
    {
      v144 = v236;
      v145 = v235;
      if (v236 != v235)
      {
        do
        {
          if (*((char *)v144 - 1) < 0)
            operator delete(*(v144 - 3));
          v144 -= 3;
        }
        while (v144 != v143);
        v145 = v235;
      }
      v236 = v143;
      operator delete(v145);
    }
  }
  if (v234 && v233)
  {
    if (v232)
    {
      if (SHIBYTE(v231) < 0)
        operator delete(v230[0]);
      if (SHIBYTE(v228) < 0)
        operator delete((void *)v227);
    }
    if (v226 && SHIBYTE(v225) < 0)
      operator delete((void *)v224.n128_u64[0]);
  }
  if (__p[24])
  {
    v157 = *(_QWORD *)__p;
    if (*(_QWORD *)__p)
    {
      v158 = *(_QWORD *)&__p[8];
      v159 = *(void **)__p;
      if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
      {
        do
        {
          if (*(char *)(v158 - 1) < 0)
            operator delete(*(void **)(v158 - 24));
          v158 -= 24;
        }
        while (v158 != v157);
        v159 = *(void **)__p;
      }
      *(_QWORD *)&__p[8] = v157;
      operator delete(v159);
    }
  }
  if (*(_BYTE *)(v96 + 24))
  {
    v160 = *(const void ***)(v96 + 8);
    v161 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v160 - *(_QWORD *)v96) >> 3));
    if (v160 == *(const void ***)v96)
      v162 = 0;
    else
      v162 = v161;
    sub_20FD0A93C(*(_QWORD *)v96, v160, (uint64_t)__p, v162, 1, v142);
  }
  if (v187 && v186)
  {
    if (v185)
    {
      if (SHIBYTE(v184) < 0)
        operator delete(v183[0]);
      if ((v181[31] & 0x80000000) != 0)
        operator delete(*(void **)&v181[8]);
    }
    if (v181[0] && (v180[46] & 0x80000000) != 0)
      operator delete(*(void **)&v180[23]);
  }
  if (v179[24])
  {
    v163 = *(_QWORD *)v179;
    if (*(_QWORD *)v179)
    {
      v164 = *(_QWORD *)&v179[8];
      v165 = *(void **)v179;
      if (*(_QWORD *)&v179[8] != *(_QWORD *)v179)
      {
        do
        {
          if (*(char *)(v164 - 1) < 0)
            operator delete(*(void **)(v164 - 24));
          v164 -= 24;
        }
        while (v164 != v163);
        v165 = *(void **)v179;
      }
      *(_QWORD *)&v179[8] = v163;
      operator delete(v165);
    }
  }
LABEL_472:
  if (v203)
  {
    if (v202 && v201)
    {
      if (v200)
      {
        if (SHIBYTE(v199) < 0)
          operator delete(v198[0]);
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
      }
      if (v194 && SHIBYTE(v193) < 0)
        operator delete((void *)v192.n128_u64[0]);
    }
    if (v190)
    {
      v166 = (void **)v188[0];
      if (v188[0])
      {
        v167 = (void **)v188[1];
        v168 = v188[0];
        if (v188[1] != v188[0])
        {
          do
          {
            if (*((char *)v167 - 1) < 0)
              operator delete(*(v167 - 3));
            v167 -= 3;
          }
          while (v167 != v166);
          v168 = v188[0];
        }
        v188[1] = v166;
        operator delete(v168);
      }
    }
  }
  sub_20E8D1F68((uint64_t)&v208, v209[0]);
  if (v221 && v220)
  {
    if (!v219)
      goto LABEL_497;
    if (v218 < 0)
    {
      operator delete(v217);
      if ((v216 & 0x80000000) == 0)
      {
LABEL_497:
        if (!v214)
          return;
LABEL_498:
        if (v213 < 0)
          operator delete((void *)v212);
        return;
      }
    }
    else if ((v216 & 0x80000000) == 0)
    {
      goto LABEL_497;
    }
    operator delete(v215);
    if (!v214)
      return;
    goto LABEL_498;
  }
}

void sub_20FCFF740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  char a71;
  uint64_t v71;

  sub_20E86665C((uint64_t)&STACK[0x270]);
  if (a59)
    sub_20E8DDADC((uint64_t)&a39);
  sub_20E8D1F68(v71, a66);
  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  std::mutex::unlock(a14);
  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;

  operator delete(v71);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20FD04308(a40);
  std::mutex::unlock(a17);
  std::mutex::unlock(a14);
  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a60)
    (*(void (**)(uint64_t))(*(_QWORD *)a60 + 8))(a60);
  sub_20E86665C(&STACK[0x270]);
  sub_20FD04308(a40);
  std::mutex::unlock(a17);
  std::mutex::unlock(a14);
  sub_20FD02EC8(&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFF990()
{
  sub_20E8CADF8((uint64_t)&STACK[0x270]);
  JUMPOUT(0x20FCFF99CLL);
}

void sub_20FCFF9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  sub_20E86665C((uint64_t)&a19);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20FD04308(a40);
  std::mutex::unlock(a17);
  std::mutex::unlock(a14);
  sub_20FD02EC8((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20FCFFA1C()
{
  JUMPOUT(0x20FCFF9F4);
}

unint64_t sub_20FCFFA24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  std::string *v6;
  const std::__fs::filesystem::path *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t data_low;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  void *v51;
  uint64_t (***v52)();
  uint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  int v56;
  __int128 *v57;
  void *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string *p_object;
  std::string::size_type size;
  int v66;
  std::string::size_type v67;
  _BYTE *p_dst;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string *v74;
  std::string *v75;
  uint64_t v76;
  std::string *v77;
  uint64_t v78;
  std::string *v79;
  std::string::size_type v80;
  char v81;
  std::string::size_type v82;
  _BYTE *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string *v89;
  std::string *v90;
  uint64_t v91;
  std::string *v92;
  uint64_t v93;
  std::string *v94;
  std::string::size_type v95;
  char v96;
  std::string::size_type v97;
  _BYTE *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::string *v112;
  std::string::size_type v113;
  char v114;
  std::string::size_type v115;
  _BYTE *v116;
  _BYTE *v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  std::string *v121;
  uint64_t v122;
  const char *v123;
  size_t v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  const char *v127;
  size_t v128;
  std::string::size_type *p_size;
  unint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  size_t v139;
  void *v140;
  _QWORD *v141;
  size_t v142;
  std::string::size_type v143;
  _BYTE *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::string::size_type v149;
  char v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *p_shared_owners;
  unint64_t v155;
  void *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::string::size_type v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  __int128 v173;
  std::string::size_type v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::string::size_type v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::string *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  _BYTE *v200;
  const void **v201;
  const void *v202;
  uint64_t v203;
  uint64_t v204;
  std::string *v205;
  uint64_t v206;
  const char *v207;
  size_t v208;
  unsigned __int8 v209;
  const char *v210;
  size_t v211;
  std::string::size_type *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  size_t v222;
  void *v223;
  _QWORD *v224;
  size_t v225;
  std::string::size_type v226;
  _BYTE *v227;
  void *v228;
  _BYTE *v229;
  const void **v230;
  uint64_t v231;
  uint64_t v232;
  std::string::size_type v233;
  char v234;
  _QWORD *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  const void *v247;
  uint64_t v248;
  uint64_t v249;
  std::string *v250;
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  const char *v254;
  unsigned __int8 v255;
  const char *v256;
  size_t v257;
  std::string::size_type *v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  const char *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  NSObject *v268;
  size_t v269;
  void *v270;
  _QWORD *v271;
  size_t v272;
  std::string::size_type v273;
  _BYTE *v274;
  void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::string::size_type v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  __int128 v286;
  std::string::size_type v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::string::size_type v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::string *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  std::string::size_type v314;
  char v315;
  _QWORD *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::string::size_type v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  std::string::size_type v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::string::size_type v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::string *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  unint64_t v366;
  unint64_t v367;
  const char *v368;
  std::string v369;
  int v370;
  const char *v371;
  int v372;
  const char *v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  std::string v376;
  void *__p[2];
  __int128 v378;
  uint64_t v379;
  const void *v380;
  void *v381[2];
  const void *v382;
  _BYTE *v383;
  void *v384[2];
  uint64_t v385;
  char v386;
  char v387;
  _BYTE *v388;
  int v389;
  _BYTE v390[160];
  uint64_t v391;
  std::string v392;
  std::string v393;
  std::string v394;
  std::string object;
  __int128 v396;
  void *v397;
  void *v398;
  unint64_t v399;
  char v400;
  char v401;
  void *v402;
  char v403;
  char v404;
  char v405;
  char v406;
  _QWORD v407[2];
  std::string __dst;
  char *v409;
  std::__shared_weak_count *v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(*a1 + 288);
  v4 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v1 + 88))
  {
    if (!v4)
      goto LABEL_23;
    v6 = (std::string *)(v1 + 64);
    v7 = *(const std::__fs::filesystem::path **)(v4 + 8);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v378 = 0;
    v8 = *(unsigned __int8 *)(v1 + 87);
    v10 = *(std::string **)(v1 + 64);
    v9 = *(_QWORD *)(v1 + 72);
    if ((v8 & 0x80u) == 0)
      v11 = v6;
    else
      v11 = v10;
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    sub_20E8A9678((std::string *)__p, v11, (std::string *)((char *)v11 + v9));
    if ((SBYTE7(v378) & 0x80u) == 0)
      v12.__data_ = (const std::string_view::value_type *)__p;
    else
      v12.__data_ = (const std::string_view::value_type *)__p[0];
    if ((SBYTE7(v378) & 0x80u) == 0)
      v12.__size_ = BYTE7(v378);
    else
      v12.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__p[1];
    v13 = std::__fs::filesystem::path::__compare(v7, v12);
    v14 = v13;
    if (SBYTE7(v378) < 0)
    {
      operator delete(__p[0]);
      if (v14)
        goto LABEL_16;
    }
    else if (v13)
    {
LABEL_16:
      v15 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v15)
      {
        sub_20FD205B8((uint64_t *)(v15 + 8), 0);
        MEMORY[0x212BC6398](v15, 0xA1C40BD48D6D6);
        if (*(_QWORD *)(v3 + 24))
          goto LABEL_106;
      }
LABEL_23:
      v16 = *(_QWORD *)(v2 + 288);
      if (*(_BYTE *)(v16 + 56))
      {
        __p[0] = 0;
        LOBYTE(v389) = 1;
        if (*(_BYTE *)(v2 + 72))
        {
LABEL_25:
          v17 = a1[1];
          memset(&v393, 0, sizeof(v393));
          v20 = *(std::string **)(v17 + 64);
          v18 = v17 + 64;
          v19 = v20;
          v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) == 0)
            v22 = (std::string *)v18;
          else
            v22 = v19;
          v23 = *(_QWORD *)(v18 + 8);
          if ((v21 & 0x80u) == 0)
            v23 = v21;
          sub_20E8A9678(&v393, v22, (std::string *)((char *)v22 + v23));
          v24 = *(_QWORD *)(v2 + 16);
          __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v2 + 288) + 32);
          sub_20E893368((unsigned int *)&v369, (uint64_t *)&__dst);
          data_low = LODWORD(v369.__r_.__value_.__l.__data_);
          v25 = HIDWORD(v369.__r_.__value_.__r.__words[0]);
          v27 = v369.__r_.__value_.__r.__words[1];
          v28 = HIDWORD(v369.__r_.__value_.__r.__words[1]);
          v29 = *(_QWORD *)(v2 + 24);
          v30 = *(_QWORD *)(v2 + 32);
          v31 = *(_QWORD *)(v2 + 64);
          if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
            sub_20E860C04(&v369, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
          else
            v369 = v393;
          __dst.__r_.__value_.__r.__words[0] = (data_low | ((unint64_t)v25 << 32) | ((unint64_t)BYTE1(v25) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v25) << 56) | ((unint64_t)(HIWORD(v25) & 0xF | 0x40) << 48);
          __dst.__r_.__value_.__l.__size_ = ((unint64_t)v28 << 32) | ((unint64_t)BYTE1(v28) << 40) | v27 & 0xFFFFFF00 | (v28 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v28) << 48) | v27 & 0x3F | 0x80;
          __dst.__r_.__value_.__s.__data_[16] = 1;
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(&object, v31, &v369, v24, &__dst, v29, v30);
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v369.__r_.__value_.__l.__data_);
          sub_20FD0337C((uint64_t *)__p, (__int128 *)&object);
          if (v406)
          {
            v50 = object.__r_.__value_.__r.__words[0];
            object.__r_.__value_.__r.__words[0] = 0;
            if (v50)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v50 + 8))(v50);
          }
          else if (v405)
          {
            if (v404)
            {
              if (v403 < 0)
                operator delete(v402);
              if (v401 < 0)
                operator delete(v398);
            }
            if ((_BYTE)v397 && SHIBYTE(v396) < 0)
              operator delete((void *)object.__r_.__value_.__r.__words[2]);
          }
          if ((SHIBYTE(v393.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if ((_BYTE)v389)
              goto LABEL_63;
LABEL_101:
            v55 = a1[2];
            v56 = *(unsigned __int8 *)(v55 + 120);
            *(_OWORD *)v55 = *(_OWORD *)__p;
            v57 = (__int128 *)(v55 + 16);
            if (!v56)
            {
              *(_BYTE *)(v55 + 16) = 0;
              *(_BYTE *)(v55 + 112) = 0;
              if ((_BYTE)v388)
              {
                *(_BYTE *)(v55 + 40) = 0;
                if ((_BYTE)v380)
                {
                  v99 = v378;
                  *(_QWORD *)(v55 + 32) = v379;
                  *v57 = v99;
                  v379 = 0;
                  v378 = 0uLL;
                  *(_BYTE *)(v55 + 40) = 1;
                }
                *(_BYTE *)(v55 + 48) = 0;
                *(_BYTE *)(v55 + 104) = 0;
                if (v386)
                {
                  v100 = *(_OWORD *)v381;
                  *(_QWORD *)(v55 + 64) = v382;
                  *(_OWORD *)(v55 + 48) = v100;
                  v381[0] = 0;
                  v381[1] = 0;
                  *(_QWORD *)(v55 + 72) = v383;
                  v101 = *(_OWORD *)v384;
                  *(_QWORD *)(v55 + 96) = v385;
                  *(_OWORD *)(v55 + 80) = v101;
                  v382 = 0;
                  v384[0] = 0;
                  v384[1] = 0;
                  v385 = 0;
                  *(_BYTE *)(v55 + 104) = 1;
                }
                *(_BYTE *)(v55 + 112) = 1;
              }
              *(_BYTE *)(v55 + 120) = 1;
              if ((_BYTE)v389)
                goto LABEL_104;
              goto LABEL_74;
            }
            sub_20FD03AA4((uint64_t)v57, &v378);
            goto LABEL_103;
          }
          operator delete(v393.__r_.__value_.__l.__data_);
          if (!(_BYTE)v389)
            goto LABEL_101;
LABEL_63:
          v51 = __p[0];
          if (*(uint64_t (***)())__p[0] == &off_24CA06A20)
          {
            __p[0] = 0;
            v53 = *(_QWORD *)(v3 + 24);
            *(_QWORD *)(v3 + 24) = v51;
            if (!v53)
              goto LABEL_103;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Engine.cpp", 278, (uint64_t)"dynamic_cast<dgn::Server*>(&**ex_server_ptr)", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v52 = (uint64_t (***)())__p[0];
            __p[0] = 0;
            if (!v52 || *v52 != &off_24CA06A20)
              v52 = 0;
            v53 = *(_QWORD *)(v3 + 24);
            *(_QWORD *)(v3 + 24) = v52;
            if (!v53)
            {
LABEL_103:
              if ((_BYTE)v389)
              {
LABEL_104:
                v58 = __p[0];
                __p[0] = 0;
                if (v58)
                  (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
                goto LABEL_106;
              }
LABEL_74:
              if ((_BYTE)v388)
              {
                if (v386)
                {
                  if (SHIBYTE(v385) < 0)
                    operator delete(v384[0]);
                  if (SHIBYTE(v382) < 0)
                    operator delete(v381[0]);
                }
                if ((_BYTE)v380 && SHIBYTE(v379) < 0)
                  operator delete((void *)v378);
              }
LABEL_106:
              if (*(_BYTE *)(a1[2] + 120))
              {
                sub_20FD039B0(&v391);
                if (**(int **)(v391 + 56) > 5)
                  return 0;
                v59 = *(unsigned __int8 *)(v391 + 72);
                v60 = sub_20E8C31DC(v391, "OSLogSurrogateAppender", 1, 0);
                v61 = v60;
                if (!v59 && !v60)
                  return 0;
                sub_20E863438((uint64_t)__p);
                v62 = a1[2];
                v370 = 0;
                v63 = operator new();
                *(_QWORD *)(v63 + 272) = 0;
                *(_OWORD *)(v63 + 240) = 0u;
                *(_OWORD *)(v63 + 256) = 0u;
                *(_OWORD *)(v63 + 208) = 0u;
                *(_OWORD *)(v63 + 224) = 0u;
                *(_OWORD *)(v63 + 176) = 0u;
                *(_OWORD *)(v63 + 192) = 0u;
                *(_OWORD *)(v63 + 144) = 0u;
                *(_OWORD *)(v63 + 160) = 0u;
                *(_OWORD *)(v63 + 112) = 0u;
                *(_OWORD *)(v63 + 128) = 0u;
                *(_OWORD *)(v63 + 80) = 0u;
                *(_OWORD *)(v63 + 96) = 0u;
                *(_OWORD *)(v63 + 48) = 0u;
                *(_OWORD *)(v63 + 64) = 0u;
                *(_OWORD *)(v63 + 16) = 0u;
                *(_OWORD *)(v63 + 32) = 0u;
                *(_OWORD *)v63 = 0u;
                sub_20E863438(v63);
                v376.__r_.__value_.__r.__words[0] = v63;
                sub_2102341F0(v62, &object);
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_object = &object;
                else
                  p_object = (std::string *)object.__r_.__value_.__r.__words[0];
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(object.__r_.__value_.__r.__words[2]);
                else
                  size = object.__r_.__value_.__l.__size_;
                sub_20E86A980((_QWORD *)(v63 + 16), (uint64_t)p_object, size);
                if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(object.__r_.__value_.__l.__data_);
                  v66 = *(_DWORD *)(v63 + 120);
                  if ((v66 & 0x10) == 0)
                  {
LABEL_118:
                    if ((v66 & 8) == 0)
                    {
                      v67 = 0;
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                      p_dst = &__dst;
                      goto LABEL_190;
                    }
                    v104 = *(const void **)(v63 + 40);
                    v67 = *(_QWORD *)(v63 + 56) - (_QWORD)v104;
                    if (v67 > 0x7FFFFFFFFFFFFFF7)
LABEL_266:
                      sub_20E860B7C();
LABEL_183:
                    if (v67 >= 0x17)
                    {
                      v105 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17)
                        v105 = v67 | 7;
                      v106 = v105 + 1;
                      p_dst = operator new(v105 + 1);
                      __dst.__r_.__value_.__l.__size_ = v67;
                      __dst.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v67;
                      p_dst = &__dst;
                      if (!v67)
                      {
LABEL_190:
                        p_dst[v67] = 0;
                        v107 = v376.__r_.__value_.__r.__words[0];
                        v108 = MEMORY[0x24BEDB7F0];
                        v109 = MEMORY[0x24BEDB848];
                        if (v376.__r_.__value_.__r.__words[0])
                        {
                          v110 = *MEMORY[0x24BEDB7F0];
                          *(_QWORD *)v376.__r_.__value_.__l.__data_ = *MEMORY[0x24BEDB7F0];
                          v111 = *(_QWORD *)(v108 + 72);
                          *(_QWORD *)(v107 + *(_QWORD *)(v110 - 24)) = *(_QWORD *)(v108 + 64);
                          *(_QWORD *)(v107 + 24) = v109 + 16;
                          *(_QWORD *)(v107 + 16) = v111;
                          if (*(char *)(v107 + 111) < 0)
                            operator delete(*(void **)(v107 + 88));
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v107 + 128);
                          MEMORY[0x212BC6398](v107, 0x10B2C40EED050F3);
                        }
                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
                        object.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
                        object.__r_.__value_.__r.__words[2] = (std::string::size_type)&v369;
                        *(_QWORD *)&v396 = &__dst;
                        *((_QWORD *)&v396 + 1) = &__dst;
                        if (v370 == -1)
                          sub_20E877AB8();
                        v376.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
                        ((void (*)(std::string *, std::string *))off_24CA05830[v370])(&v376, &v369);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        if (v370 == -1)
                          sub_20E877AB8();
                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                        ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24CA05878[v370])(&v394, &object, &v369);
                        if (v370 != -1)
                          ((void (*)(std::string *, std::string *))off_24CA05818[v370])(&object, &v369);
                        if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v112 = &v394;
                        else
                          v112 = (std::string *)v394.__r_.__value_.__r.__words[0];
                        if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v113 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
                        else
                          v113 = v394.__r_.__value_.__l.__size_;
                        sub_20E86A980(&v378, (uint64_t)v112, v113);
                        if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v394.__r_.__value_.__l.__data_);
                          v114 = v389;
                          if ((v389 & 0x10) == 0)
                          {
LABEL_208:
                            if ((v114 & 8) == 0)
                            {
                              v115 = 0;
                              *((_BYTE *)&v376.__r_.__value_.__s + 23) = 0;
                              v116 = &v376;
                              goto LABEL_221;
                            }
                            v118 = v380;
                            v115 = (char *)v381[1] - (char *)v380;
                            if ((void *)((char *)v381[1] - (char *)v380) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_268:
                              sub_20E860B7C();
LABEL_214:
                            if (v115 >= 0x17)
                            {
                              v119 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v115 | 7) != 0x17)
                                v119 = v115 | 7;
                              v120 = v119 + 1;
                              v116 = operator new(v119 + 1);
                              v376.__r_.__value_.__l.__size_ = v115;
                              v376.__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
                              v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                            }
                            else
                            {
                              *((_BYTE *)&v376.__r_.__value_.__s + 23) = v115;
                              v116 = &v376;
                              if (!v115)
                              {
LABEL_221:
                                v116[v115] = 0;
                                v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
                                v369.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                                v369.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                                v370 = 5;
                                v371 = "unknown file";
                                v372 = 296;
                                v374 = 0;
                                v375 = 0;
                                v373 = "unknown function";
                                if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v121 = &v376;
                                else
                                  v121 = (std::string *)v376.__r_.__value_.__r.__words[0];
                                v122 = *(_QWORD *)v369.__r_.__value_.__l.__data_;
                                v123 = (const char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 16);
                                v364 = *(_QWORD *)v369.__r_.__value_.__l.__data_;
                                v368 = v123;
                                if (*(char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39) < 0)
                                {
                                  v123 = *(const char **)(v122 + 16);
                                  v124 = *(_QWORD *)(v122 + 24);
                                  v126 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                  if ((v126 & 1) != 0)
                                    goto LABEL_228;
                                }
                                else
                                {
                                  v124 = *(unsigned __int8 *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39);
                                  v125 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                  if ((v125 & 1) != 0)
                                    goto LABEL_228;
                                }
                                if (__cxa_guard_acquire(&qword_254A4A510))
                                {
                                  sub_20E9E46F8((uint64_t)&object);
                                  sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                                  if ((_BYTE)v396 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(object.__r_.__value_.__l.__data_);
                                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A4A510);
                                }
LABEL_228:
                                if (byte_254A4A50F >= 0)
                                  v127 = (const char *)&xmmword_254A4A4F8;
                                else
                                  v127 = (const char *)xmmword_254A4A4F8;
                                if (byte_254A4A50F >= 0)
                                  v128 = byte_254A4A50F;
                                else
                                  v128 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                                object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v127, v123);
                                p_size = &object.__r_.__value_.__l.__size_;
                                if (v128 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                if (v128 >= 0x17)
                                {
                                  v130 = v61;
                                  v131 = v59;
                                  v132 = v108;
                                  v133 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v128 | 7) != 0x17)
                                    v133 = v128 | 7;
                                  v134 = v133 + 1;
                                  p_size = (std::string::size_type *)operator new(v133 + 1);
                                  *(_QWORD *)&v396 = v134 | 0x8000000000000000;
                                  object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                                  object.__r_.__value_.__r.__words[2] = v128;
                                  v108 = v132;
                                  v59 = v131;
                                  v61 = v130;
                                }
                                else
                                {
                                  BYTE7(v396) = v128;
                                  if (!v128)
                                  {
LABEL_242:
                                    *((_BYTE *)p_size + v128) = 0;
                                    BYTE8(v396) = 1;
                                    v135 = &v397;
                                    if (v124 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v124 >= 0x17)
                                    {
                                      v136 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v124 | 7) != 0x17)
                                        v136 = v124 | 7;
                                      v137 = v136 + 1;
                                      v135 = operator new(v136 + 1);
                                      v399 = v137 | 0x8000000000000000;
                                      v397 = v135;
                                      v398 = (void *)v124;
                                    }
                                    else
                                    {
                                      HIBYTE(v399) = v124;
                                      if (!v124)
                                      {
LABEL_250:
                                        *((_BYTE *)v135 + v124) = 0;
                                        v400 = 1;
                                        v138 = object.__r_.__value_.__r.__words[0];
                                        if (SHIBYTE(v399) < 0)
                                          operator delete(v397);
                                        if (BYTE8(v396) && SBYTE7(v396) < 0)
                                          operator delete((void *)object.__r_.__value_.__l.__size_);
                                        if (object.__r_.__value_.__r.__words[0])
                                          os_release(object.__r_.__value_.__l.__data_);
                                        if (!v61 || !*(_QWORD *)(v61 + 24))
                                        {
                                          os_log_type_enabled(v138, OS_LOG_TYPE_ERROR);
                                          LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                                          *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v121;
                                          v145 = (void *)_os_log_send_and_compose_impl();
                                          v146 = MEMORY[0x24BEDB848];
                                          if (v145)
                                            free(v145);
                                          goto LABEL_333;
                                        }
                                        v139 = _os_log_pack_size();
                                        v140 = operator new(v139, (std::align_val_t)8uLL);
                                        v141 = (_QWORD *)operator new();
                                        *v141 = &off_24C9ABB80;
                                        v141[1] = 0;
                                        v141[2] = 0;
                                        v141[3] = v140;
                                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
                                        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
                                        v409 = 0;
                                        v410 = 0;
                                        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v141;
                                        v142 = strlen((const char *)v121);
                                        if (v142 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        v143 = v142;
                                        if (v142 >= 0x17)
                                        {
                                          v147 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v142 | 7) != 0x17)
                                            v147 = v142 | 7;
                                          v148 = v147 + 1;
                                          v144 = operator new(v147 + 1);
                                          v394.__r_.__value_.__l.__size_ = v143;
                                          v394.__r_.__value_.__r.__words[2] = v148 | 0x8000000000000000;
                                          v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
                                        }
                                        else
                                        {
                                          *((_BYTE *)&v394.__r_.__value_.__s + 23) = v142;
                                          v144 = &v394;
                                          if (!v142)
                                          {
LABEL_273:
                                            v144[v143] = 0;
                                            v407[0] = v394.__r_.__value_.__l.__size_;
                                            v149 = v394.__r_.__value_.__r.__words[0];
                                            *(_QWORD *)((char *)v407 + 7) = *(std::string::size_type *)((char *)&v394.__r_.__value_.__r.__words[1] + 7);
                                            v150 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
                                            v151 = operator new(0x38uLL);
                                            v151[1] = 0;
                                            v151[2] = 0;
                                            v151[3] = off_24C9ABC20;
                                            *v151 = &off_24C9ABBD0;
                                            v152 = v407[0];
                                            v151[4] = v149;
                                            v151[5] = v152;
                                            *(_QWORD *)((char *)v151 + 47) = *(_QWORD *)((char *)v407 + 7);
                                            *((_BYTE *)v151 + 55) = v150;
                                            memset(v407, 0, 15);
                                            v153 = v410;
                                            v409 = (char *)(v151 + 3);
                                            v410 = (std::__shared_weak_count *)v151;
                                            if (v153)
                                            {
                                              p_shared_owners = (unint64_t *)&v153->__shared_owners_;
                                              do
                                                v155 = __ldaxr(p_shared_owners);
                                              while (__stlxr(v155 - 1, p_shared_owners));
                                              if (!v155)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                                                std::__shared_weak_count::__release_weak(v153);
                                              }
                                            }
                                            object = __dst;
                                            v156 = v409;
                                            if (__dst.__r_.__value_.__r.__words[2])
                                            {
                                              v157 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                              do
                                                v158 = __ldxr(v157);
                                              while (__stxr(v158 + 1, v157));
                                            }
                                            v159 = v410;
                                            *(_QWORD *)&v396 = v156;
                                            *((_QWORD *)&v396 + 1) = v410;
                                            if (v410)
                                            {
                                              v160 = (unint64_t *)&v410->__shared_owners_;
                                              do
                                                v161 = __ldxr(v160);
                                              while (__stxr(v161 + 1, v160));
                                              v397 = v156;
                                              do
                                                v162 = __ldaxr(v160);
                                              while (__stlxr(v162 - 1, v160));
                                              if (!v162)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                                                std::__shared_weak_count::__release_weak(v159);
                                              }
                                            }
                                            else
                                            {
                                              v397 = v156;
                                            }
                                            v163 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                                            if (__dst.__r_.__value_.__r.__words[2])
                                            {
                                              v164 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                              do
                                                v165 = __ldaxr(v164);
                                              while (__stlxr(v165 - 1, v164));
                                              if (!v165)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                                std::__shared_weak_count::__release_weak(v163);
                                              }
                                            }
                                            v166 = object.__r_.__value_.__r.__words[0];
                                            if (*((char *)v397 + 31) >= 0)
                                              v167 = (char *)v397 + 8;
                                            else
                                              v167 = (char *)*((_QWORD *)v397 + 1);
                                            v168 = _os_log_pack_fill();
                                            *(_DWORD *)v168 = 136315138;
                                            *(_QWORD *)(v168 + 4) = v167;
                                            v169 = operator new();
                                            v170 = *(unsigned __int8 *)(v364 + 39);
                                            v171 = *(const char **)(v364 + 16);
                                            v172 = *(_QWORD *)(v364 + 24);
                                            v173 = v396;
                                            *(_OWORD *)(v169 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                            if ((v170 & 0x80u) != 0)
                                              v170 = v172;
                                            else
                                              v171 = v368;
                                            *(_QWORD *)v169 = v166;
                                            *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                            *(_OWORD *)(v169 + 24) = v173;
                                            v396 = 0uLL;
                                            *(_QWORD *)(v169 + 40) = v171;
                                            *(_QWORD *)(v169 + 48) = v170;
                                            *(_BYTE *)(v169 + 56) = 16;
                                            v394.__r_.__value_.__r.__words[0] = 0;
                                            __dst.__r_.__value_.__r.__words[0] = v169;
                                            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v61 + 24)
                                                                                          + 40))(*(_QWORD *)(v61 + 24), &__dst);
                                            v174 = __dst.__r_.__value_.__r.__words[0];
                                            __dst.__r_.__value_.__r.__words[0] = 0;
                                            v146 = MEMORY[0x24BEDB848];
                                            if (v174)
                                            {
                                              v175 = *(std::__shared_weak_count **)(v174 + 32);
                                              if (v175)
                                              {
                                                v176 = (unint64_t *)&v175->__shared_owners_;
                                                do
                                                  v177 = __ldaxr(v176);
                                                while (__stlxr(v177 - 1, v176));
                                                if (!v177)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                                  std::__shared_weak_count::__release_weak(v175);
                                                }
                                              }
                                              v178 = *(std::__shared_weak_count **)(v174 + 16);
                                              if (v178)
                                              {
                                                v179 = (unint64_t *)&v178->__shared_owners_;
                                                do
                                                  v180 = __ldaxr(v179);
                                                while (__stlxr(v180 - 1, v179));
                                                if (!v180)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                                  std::__shared_weak_count::__release_weak(v178);
                                                }
                                              }
                                              MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
                                              v181 = v394.__r_.__value_.__r.__words[0];
                                              v394.__r_.__value_.__r.__words[0] = 0;
                                              if (v181)
                                              {
                                                v182 = *(std::__shared_weak_count **)(v181 + 32);
                                                if (v182)
                                                {
                                                  v183 = (unint64_t *)&v182->__shared_owners_;
                                                  do
                                                    v184 = __ldaxr(v183);
                                                  while (__stlxr(v184 - 1, v183));
                                                  if (!v184)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                                    std::__shared_weak_count::__release_weak(v182);
                                                  }
                                                }
                                                v185 = *(std::__shared_weak_count **)(v181 + 16);
                                                if (v185)
                                                {
                                                  v186 = (unint64_t *)&v185->__shared_owners_;
                                                  do
                                                    v187 = __ldaxr(v186);
                                                  while (__stlxr(v187 - 1, v186));
                                                  if (!v187)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                                                    std::__shared_weak_count::__release_weak(v185);
                                                  }
                                                }
                                                MEMORY[0x212BC6398](v181, 0x10F0C40B62ED6C6);
                                              }
                                            }
                                            v188 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
                                            if (*((_QWORD *)&v396 + 1))
                                            {
                                              v189 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
                                              do
                                                v190 = __ldaxr(v189);
                                              while (__stlxr(v190 - 1, v189));
                                              if (!v190)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                                                std::__shared_weak_count::__release_weak(v188);
                                              }
                                            }
                                            v191 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                            if (object.__r_.__value_.__r.__words[2])
                                            {
                                              v192 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                              do
                                                v193 = __ldaxr(v192);
                                              while (__stlxr(v193 - 1, v192));
                                              if (!v193)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                                                std::__shared_weak_count::__release_weak(v191);
                                              }
                                            }
LABEL_333:
                                            if (v59)
                                            {
                                              v194 = &v376;
                                              if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                v194 = (std::string *)v376.__r_.__value_.__r.__words[0];
                                              sub_20E8C003C((uint64_t)&v369, "%s", (const char *)v194);
                                              sub_20E863570((uint64_t)&v369);
                                            }
                                            sub_20E863570((uint64_t)&v369);
                                            v195 = v375;
                                            if (v375)
                                            {
                                              v196 = (unint64_t *)&v375->__shared_owners_;
                                              do
                                                v197 = __ldaxr(v196);
                                              while (__stlxr(v197 - 1, v196));
                                              if (!v197)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                                                std::__shared_weak_count::__release_weak(v195);
                                              }
                                            }
                                            if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v376.__r_.__value_.__l.__data_);
                                            __p[0] = *(void **)v108;
                                            v198 = *(_QWORD *)(v108 + 72);
                                            *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v108 + 64);
                                            *(_QWORD *)&v378 = v198;
                                            *((_QWORD *)&v378 + 1) = v146 + 16;
                                            if (v387 < 0)
                                              operator delete(v384[1]);
LABEL_346:
                                            std::streambuf::~streambuf();
                                            std::iostream::~basic_iostream();
                                            MEMORY[0x212BC6290](v390);
                                            return 0;
                                          }
                                        }
                                        memcpy(v144, v121, v143);
                                        goto LABEL_273;
                                      }
                                    }
                                    memmove(v135, v123, v124);
                                    goto LABEL_250;
                                  }
                                }
                                memmove(p_size, v127, v128);
                                goto LABEL_242;
                              }
                            }
                            memmove(v116, v118, v115);
                            goto LABEL_221;
                          }
                        }
                        else
                        {
                          v114 = v389;
                          if ((v389 & 0x10) == 0)
                            goto LABEL_208;
                        }
                        v117 = v388;
                        if (v388 < v383)
                        {
                          v388 = v383;
                          v117 = v383;
                        }
                        v118 = v382;
                        v115 = v117 - (_BYTE *)v382;
                        if ((unint64_t)(v117 - (_BYTE *)v382) > 0x7FFFFFFFFFFFFFF7)
                          goto LABEL_268;
                        goto LABEL_214;
                      }
                    }
                    memmove(p_dst, v104, v67);
                    goto LABEL_190;
                  }
                }
                else
                {
                  v66 = *(_DWORD *)(v63 + 120);
                  if ((v66 & 0x10) == 0)
                    goto LABEL_118;
                }
                v102 = *(_QWORD *)(v63 + 112);
                v103 = *(_QWORD *)(v63 + 72);
                if (v102 < v103)
                {
                  *(_QWORD *)(v63 + 112) = v103;
                  v102 = v103;
                }
                v104 = *(const void **)(v63 + 64);
                v67 = v102 - (_QWORD)v104;
                if (v102 - (unint64_t)v104 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_266;
                goto LABEL_183;
              }
              v4 = sub_20FD10040(*(__int128 **)(*(_QWORD *)(v3 + 24) + 8));
              if (v4)
              {
                sub_20FD039B0(&v391);
                if (**(int **)(v391 + 56) > 3)
                  return v4;
                v69 = *(unsigned __int8 *)(v391 + 72);
                v70 = sub_20E8C31DC(v391, "OSLogSurrogateAppender", 1, 0);
                v71 = v70;
                if (!v69 && !v70)
                  return v4;
                sub_20E863438((uint64_t)__p);
                v72 = a1[1];
                memset(&v376, 0, sizeof(v376));
                v75 = *(std::string **)(v72 + 64);
                v73 = v72 + 64;
                v74 = v75;
                v76 = *(unsigned __int8 *)(v73 + 23);
                if ((v76 & 0x80u) == 0)
                  v77 = (std::string *)v73;
                else
                  v77 = v74;
                v78 = *(_QWORD *)(v73 + 8);
                if ((v76 & 0x80u) == 0)
                  v78 = v76;
                sub_20E8A9678(&v376, v77, (std::string *)((char *)v77 + v78));
                v370 = 0;
                sub_20EA7C8FC(&v369, "Running diagnostics of ");
                std::to_string(&__dst, v4);
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)&v369;
                *(_QWORD *)&v396 = &__dst;
                *((_QWORD *)&v396 + 1) = &__dst;
                if (v370 == -1)
                  sub_20E877AB8();
                v407[0] = &object;
                ((void (*)(_QWORD *, std::string *))off_24CA05830[v370])(v407, &v369);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)" clients at ";
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)&v369;
                *(_QWORD *)&v396 = " clients at ";
                *((_QWORD *)&v396 + 1) = " clients at ";
                if (v370 == -1)
                  sub_20E877AB8();
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
                ((void (*)(std::string *, std::string *))off_24CA05848[v370])(&__dst, &v369);
                sub_20EB04FEC((uint64_t)v407, (uint64_t)&v369, (uint64_t)&v376);
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)".";
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)&v369;
                *(_QWORD *)&v396 = ".";
                *((_QWORD *)&v396 + 1) = ".";
                if (v370 == -1)
                  sub_20E877AB8();
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
                ((void (*)(std::string *, std::string *))off_24CA05860[v370])(&__dst, &v369);
                if (v370 == -1)
                  sub_20E877AB8();
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24CA05878[v370])(&v394, &object, &v369);
                if (v370 != -1)
                  ((void (*)(std::string *, std::string *))off_24CA05818[v370])(&object, &v369);
                if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v79 = &v394;
                else
                  v79 = (std::string *)v394.__r_.__value_.__r.__words[0];
                if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v80 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
                else
                  v80 = v394.__r_.__value_.__l.__size_;
                sub_20E86A980(&v378, (uint64_t)v79, v80);
                if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v394.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_145:
                    v81 = v389;
                    v366 = v71;
                    if ((v389 & 0x10) == 0)
                    {
LABEL_146:
                      if ((v81 & 8) == 0)
                      {
                        v82 = 0;
                        *((_BYTE *)&v376.__r_.__value_.__s + 23) = 0;
                        v83 = &v376;
                        goto LABEL_363;
                      }
                      v201 = &v380;
                      v200 = v381[1];
LABEL_355:
                      v202 = *v201;
                      v82 = v200 - (_BYTE *)*v201;
                      if (v82 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v82 >= 0x17)
                      {
                        v203 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v82 | 7) != 0x17)
                          v203 = v82 | 7;
                        v204 = v203 + 1;
                        v83 = operator new(v203 + 1);
                        v376.__r_.__value_.__l.__size_ = v82;
                        v376.__r_.__value_.__r.__words[2] = v204 | 0x8000000000000000;
                        v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
                      }
                      else
                      {
                        *((_BYTE *)&v376.__r_.__value_.__s + 23) = (_BYTE)v200 - *(_BYTE *)v201;
                        v83 = &v376;
                        if (!v82)
                        {
LABEL_363:
                          v83[v82] = 0;
                          v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
                          v369.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                          v369.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                          v370 = 3;
                          v371 = "unknown file";
                          v372 = 287;
                          v374 = 0;
                          v375 = 0;
                          v373 = "unknown function";
                          if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v205 = &v376;
                          else
                            v205 = (std::string *)v376.__r_.__value_.__r.__words[0];
                          v206 = *(_QWORD *)v369.__r_.__value_.__l.__data_;
                          v207 = (const char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 16);
                          v365 = v207;
                          if (*(char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39) < 0)
                          {
                            v207 = *(const char **)(v206 + 16);
                            v208 = *(_QWORD *)(v206 + 24);
                          }
                          else
                          {
                            v208 = *(unsigned __int8 *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39);
                          }
                          v209 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v209 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                          {
                            sub_20E9E46F8((uint64_t)&object);
                            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                            if ((_BYTE)v396 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(object.__r_.__value_.__l.__data_);
                            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A4A510);
                          }
                          if (byte_254A4A50F >= 0)
                            v210 = (const char *)&xmmword_254A4A4F8;
                          else
                            v210 = (const char *)xmmword_254A4A4F8;
                          if (byte_254A4A50F >= 0)
                            v211 = byte_254A4A50F;
                          else
                            v211 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                          object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v210, v207);
                          v212 = &object.__r_.__value_.__l.__size_;
                          if (v211 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v211 >= 0x17)
                          {
                            v213 = v69;
                            v214 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v211 | 7) != 0x17)
                              v214 = v211 | 7;
                            v215 = v214 + 1;
                            v212 = (std::string::size_type *)operator new(v214 + 1);
                            *(_QWORD *)&v396 = v215 | 0x8000000000000000;
                            object.__r_.__value_.__l.__size_ = (std::string::size_type)v212;
                            object.__r_.__value_.__r.__words[2] = v211;
                            v69 = v213;
                          }
                          else
                          {
                            BYTE7(v396) = v211;
                            if (!v211)
                            {
LABEL_384:
                              *((_BYTE *)v212 + v211) = 0;
                              BYTE8(v396) = 1;
                              v216 = &v397;
                              if (v208 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              v217 = (const char *)v205;
                              if (v208 >= 0x17)
                              {
                                v219 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v208 | 7) != 0x17)
                                  v219 = v208 | 7;
                                v220 = v219 + 1;
                                v218 = v366;
                                v216 = operator new(v219 + 1);
                                v399 = v220 | 0x8000000000000000;
                                v397 = v216;
                                v398 = (void *)v208;
                              }
                              else
                              {
                                HIBYTE(v399) = v208;
                                v218 = v366;
                                if (!v208)
                                {
LABEL_392:
                                  *((_BYTE *)v216 + v208) = 0;
                                  v400 = 1;
                                  v221 = object.__r_.__value_.__r.__words[0];
                                  if (SHIBYTE(v399) < 0)
                                    operator delete(v397);
                                  if (BYTE8(v396) && SBYTE7(v396) < 0)
                                    operator delete((void *)object.__r_.__value_.__l.__size_);
                                  if (object.__r_.__value_.__r.__words[0])
                                    os_release(object.__r_.__value_.__l.__data_);
                                  if (!v218 || !*(_QWORD *)(v218 + 24))
                                  {
                                    os_log_type_enabled(v221, OS_LOG_TYPE_INFO);
                                    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v217;
                                    v228 = (void *)_os_log_send_and_compose_impl();
                                    if (v228)
                                      free(v228);
                                    goto LABEL_529;
                                  }
                                  v222 = _os_log_pack_size();
                                  v223 = operator new(v222, (std::align_val_t)8uLL);
                                  v224 = (_QWORD *)operator new();
                                  *v224 = &off_24C9ABB80;
                                  v224[1] = 0;
                                  v224[2] = 0;
                                  v224[3] = v223;
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
                                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v223;
                                  v409 = 0;
                                  v410 = 0;
                                  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v224;
                                  v225 = strlen(v217);
                                  if (v225 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  v226 = v225;
                                  if (v225 >= 0x17)
                                  {
                                    v231 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v225 | 7) != 0x17)
                                      v231 = v225 | 7;
                                    v232 = v231 + 1;
                                    v227 = operator new(v231 + 1);
                                    v394.__r_.__value_.__l.__size_ = v226;
                                    v394.__r_.__value_.__r.__words[2] = v232 | 0x8000000000000000;
                                    v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v227;
                                  }
                                  else
                                  {
                                    *((_BYTE *)&v394.__r_.__value_.__s + 23) = v225;
                                    v227 = &v394;
                                    if (!v225)
                                    {
LABEL_416:
                                      v227[v226] = 0;
                                      v407[0] = v394.__r_.__value_.__l.__size_;
                                      v233 = v394.__r_.__value_.__r.__words[0];
                                      *(_QWORD *)((char *)v407 + 7) = *(std::string::size_type *)((char *)&v394.__r_.__value_.__r.__words[1]
                                                                                                + 7);
                                      v234 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
                                      v235 = operator new(0x38uLL);
                                      v235[1] = 0;
                                      v235[2] = 0;
                                      v235[3] = off_24C9ABC20;
                                      *v235 = &off_24C9ABBD0;
                                      v236 = v407[0];
                                      v235[4] = v233;
                                      v235[5] = v236;
                                      *(_QWORD *)((char *)v235 + 47) = *(_QWORD *)((char *)v407 + 7);
                                      *((_BYTE *)v235 + 55) = v234;
                                      memset(v407, 0, 15);
                                      v237 = v410;
                                      v409 = (char *)(v235 + 3);
                                      v410 = (std::__shared_weak_count *)v235;
                                      if (v237)
                                      {
                                        v238 = (unint64_t *)&v237->__shared_owners_;
                                        do
                                          v239 = __ldaxr(v238);
                                        while (__stlxr(v239 - 1, v238));
                                        if (!v239)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                                          std::__shared_weak_count::__release_weak(v237);
                                        }
                                      }
                                      object = __dst;
                                      v240 = v409;
                                      if (__dst.__r_.__value_.__r.__words[2])
                                      {
                                        v241 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                        do
                                          v242 = __ldxr(v241);
                                        while (__stxr(v242 + 1, v241));
                                      }
                                      v243 = v410;
                                      *(_QWORD *)&v396 = v240;
                                      *((_QWORD *)&v396 + 1) = v410;
                                      if (v410)
                                      {
                                        v244 = (unint64_t *)&v410->__shared_owners_;
                                        do
                                          v245 = __ldxr(v244);
                                        while (__stxr(v245 + 1, v244));
                                        v397 = v240;
                                        do
                                          v246 = __ldaxr(v244);
                                        while (__stlxr(v246 - 1, v244));
                                        if (!v246)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                          std::__shared_weak_count::__release_weak(v243);
                                        }
                                      }
                                      else
                                      {
                                        v397 = v240;
                                      }
                                      v276 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                                      if (__dst.__r_.__value_.__r.__words[2])
                                      {
                                        v277 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                        do
                                          v278 = __ldaxr(v277);
                                        while (__stlxr(v278 - 1, v277));
                                        if (!v278)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                                          std::__shared_weak_count::__release_weak(v276);
                                        }
                                      }
                                      v279 = object.__r_.__value_.__r.__words[0];
                                      if (*((char *)v397 + 31) >= 0)
                                        v280 = (char *)v397 + 8;
                                      else
                                        v280 = (char *)*((_QWORD *)v397 + 1);
                                      v281 = _os_log_pack_fill();
                                      *(_DWORD *)v281 = 136315138;
                                      *(_QWORD *)(v281 + 4) = v280;
                                      v282 = operator new();
                                      v283 = *(unsigned __int8 *)(v206 + 39);
                                      v284 = *(const char **)(v206 + 16);
                                      v285 = *(_QWORD *)(v206 + 24);
                                      v286 = v396;
                                      *(_OWORD *)(v282 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                      if ((v283 & 0x80u) != 0)
                                        v283 = v285;
                                      else
                                        v284 = v365;
                                      *(_QWORD *)v282 = v279;
                                      *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                      *(_OWORD *)(v282 + 24) = v286;
                                      v396 = 0uLL;
                                      *(_QWORD *)(v282 + 40) = v284;
                                      *(_QWORD *)(v282 + 48) = v283;
                                      *(_BYTE *)(v282 + 56) = 1;
                                      v394.__r_.__value_.__r.__words[0] = 0;
                                      __dst.__r_.__value_.__r.__words[0] = v282;
                                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v218 + 24) + 40))(*(_QWORD *)(v218 + 24), &__dst);
                                      v287 = __dst.__r_.__value_.__r.__words[0];
                                      __dst.__r_.__value_.__r.__words[0] = 0;
                                      if (v287)
                                      {
                                        v288 = *(std::__shared_weak_count **)(v287 + 32);
                                        if (v288)
                                        {
                                          v289 = (unint64_t *)&v288->__shared_owners_;
                                          do
                                            v290 = __ldaxr(v289);
                                          while (__stlxr(v290 - 1, v289));
                                          if (!v290)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                                            std::__shared_weak_count::__release_weak(v288);
                                          }
                                        }
                                        v291 = *(std::__shared_weak_count **)(v287 + 16);
                                        if (v291)
                                        {
                                          v292 = (unint64_t *)&v291->__shared_owners_;
                                          do
                                            v293 = __ldaxr(v292);
                                          while (__stlxr(v293 - 1, v292));
                                          if (!v293)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                                            std::__shared_weak_count::__release_weak(v291);
                                          }
                                        }
                                        MEMORY[0x212BC6398](v287, 0x10F0C40B62ED6C6);
                                        v294 = v394.__r_.__value_.__r.__words[0];
                                        v394.__r_.__value_.__r.__words[0] = 0;
                                        if (v294)
                                        {
                                          v295 = *(std::__shared_weak_count **)(v294 + 32);
                                          if (v295)
                                          {
                                            v296 = (unint64_t *)&v295->__shared_owners_;
                                            do
                                              v297 = __ldaxr(v296);
                                            while (__stlxr(v297 - 1, v296));
                                            if (!v297)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                                              std::__shared_weak_count::__release_weak(v295);
                                            }
                                          }
                                          v298 = *(std::__shared_weak_count **)(v294 + 16);
                                          if (v298)
                                          {
                                            v299 = (unint64_t *)&v298->__shared_owners_;
                                            do
                                              v300 = __ldaxr(v299);
                                            while (__stlxr(v300 - 1, v299));
                                            if (!v300)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                                              std::__shared_weak_count::__release_weak(v298);
                                            }
                                          }
                                          MEMORY[0x212BC6398](v294, 0x10F0C40B62ED6C6);
                                        }
                                      }
                                      v301 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
                                      if (*((_QWORD *)&v396 + 1))
                                      {
                                        v302 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
                                        do
                                          v303 = __ldaxr(v302);
                                        while (__stlxr(v303 - 1, v302));
                                        if (!v303)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                                          std::__shared_weak_count::__release_weak(v301);
                                        }
                                      }
                                      v304 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                      if (object.__r_.__value_.__r.__words[2])
                                      {
                                        v305 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                        do
                                          v306 = __ldaxr(v305);
                                        while (__stlxr(v306 - 1, v305));
                                        if (!v306)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                                          std::__shared_weak_count::__release_weak(v304);
                                        }
                                      }
LABEL_529:
                                      if (v69)
                                      {
                                        v307 = &v376;
                                        if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                          v307 = (std::string *)v376.__r_.__value_.__r.__words[0];
                                        sub_20E8C003C((uint64_t)&v369, "%s", (const char *)v307);
                                        sub_20E863570((uint64_t)&v369);
                                      }
                                      sub_20E863570((uint64_t)&v369);
                                      v308 = v375;
                                      if (v375)
                                      {
                                        v309 = (unint64_t *)&v375->__shared_owners_;
                                        do
                                          v310 = __ldaxr(v309);
                                        while (__stlxr(v310 - 1, v309));
                                        if (!v310)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                                          std::__shared_weak_count::__release_weak(v308);
                                        }
                                      }
                                      if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v376.__r_.__value_.__l.__data_);
                                      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                                      v311 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                                      *(_QWORD *)&v378 = v311;
                                      *((_QWORD *)&v378 + 1) = MEMORY[0x24BEDB848] + 16;
                                      if (v387 < 0)
                                        operator delete(v384[1]);
                                      std::streambuf::~streambuf();
                                      std::iostream::~basic_iostream();
                                      MEMORY[0x212BC6290](v390);
                                      return v4;
                                    }
                                  }
                                  memcpy(v227, v217, v226);
                                  goto LABEL_416;
                                }
                              }
                              memmove(v216, v207, v208);
                              goto LABEL_392;
                            }
                          }
                          memmove(v212, v210, v211);
                          goto LABEL_384;
                        }
                      }
                      memmove(v83, v202, v82);
                      goto LABEL_363;
                    }
LABEL_351:
                    v200 = v388;
                    if (v388 < v383)
                    {
                      v388 = v383;
                      v200 = v383;
                    }
                    v201 = &v382;
                    goto LABEL_355;
                  }
                }
                else if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_145;
                }
                operator delete(v376.__r_.__value_.__l.__data_);
                v81 = v389;
                v366 = v71;
                if ((v389 & 0x10) == 0)
                  goto LABEL_146;
                goto LABEL_351;
              }
              sub_20FD039B0(&v391);
              if (**(int **)(v391 + 56) > 3)
                return 0;
              v84 = *(unsigned __int8 *)(v391 + 72);
              v85 = sub_20E8C31DC(v391, "OSLogSurrogateAppender", 1, 0);
              v86 = v85;
              if (!v84 && !v85)
                return 0;
              sub_20E863438((uint64_t)__p);
              v87 = a1[1];
              memset(&v394, 0, sizeof(v394));
              v90 = *(std::string **)(v87 + 64);
              v88 = v87 + 64;
              v89 = v90;
              v91 = *(unsigned __int8 *)(v88 + 23);
              if ((v91 & 0x80u) == 0)
                v92 = (std::string *)v88;
              else
                v92 = v89;
              v93 = *(_QWORD *)(v88 + 8);
              if ((v91 & 0x80u) == 0)
                v93 = v91;
              sub_20E8A9678(&v394, v92, (std::string *)((char *)v92 + v93));
              v370 = 0;
              sub_20E9E6784(&v369, "Diagnostics server at ");
              sub_20EB04FEC((uint64_t)v407, (uint64_t)&v369, (uint64_t)&v394);
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
              object.__r_.__value_.__l.__size_ = (std::string::size_type)" has 0 clients. Running diagnostics locally only.";
              object.__r_.__value_.__r.__words[2] = (std::string::size_type)&v369;
              *(_QWORD *)&v396 = " has 0 clients. Running diagnostics locally only.";
              *((_QWORD *)&v396 + 1) = " has 0 clients. Running diagnostics locally only.";
              if (v370 == -1)
                sub_20E877AB8();
              v376.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
              ((void (*)(std::string *, std::string *))off_24CA05890[v370])(&v376, &v369);
              if (v370 == -1)
                sub_20E877AB8();
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
              ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24CA05878[v370])(&__dst, &object, &v369);
              if (v370 != -1)
                ((void (*)(std::string *, std::string *))off_24CA05818[v370])(&object, &v369);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = &__dst;
              else
                v94 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v95 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              else
                v95 = __dst.__r_.__value_.__l.__size_;
              sub_20E86A980(&v378, (uint64_t)v94, v95);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v394.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_168:
                  v96 = v389;
                  v367 = v86;
                  if ((v389 & 0x10) == 0)
                  {
LABEL_169:
                    if ((v96 & 8) == 0)
                    {
                      v97 = 0;
                      *((_BYTE *)&v376.__r_.__value_.__s + 23) = 0;
                      v98 = &v376;
                      goto LABEL_440;
                    }
                    v230 = &v380;
                    v229 = v381[1];
LABEL_432:
                    v247 = *v230;
                    v97 = v229 - (_BYTE *)*v230;
                    if (v97 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v97 >= 0x17)
                    {
                      v248 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v97 | 7) != 0x17)
                        v248 = v97 | 7;
                      v249 = v248 + 1;
                      v98 = operator new(v248 + 1);
                      v376.__r_.__value_.__l.__size_ = v97;
                      v376.__r_.__value_.__r.__words[2] = v249 | 0x8000000000000000;
                      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
                    }
                    else
                    {
                      *((_BYTE *)&v376.__r_.__value_.__s + 23) = (_BYTE)v229 - *(_BYTE *)v230;
                      v98 = &v376;
                      if (!v97)
                      {
LABEL_440:
                        v98[v97] = 0;
                        v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
                        v369.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                        v369.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                        v370 = 3;
                        v371 = "unknown file";
                        v372 = 292;
                        v374 = 0;
                        v375 = 0;
                        v373 = "unknown function";
                        if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v250 = &v376;
                        else
                          v250 = (std::string *)v376.__r_.__value_.__r.__words[0];
                        v251 = *(_QWORD *)v369.__r_.__value_.__l.__data_;
                        v252 = *(_QWORD *)v369.__r_.__value_.__l.__data_ + 16;
                        if (*(char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39) < 0)
                        {
                          v254 = *(const char **)(v251 + 16);
                          v253 = *(_QWORD *)(v251 + 24);
                        }
                        else
                        {
                          v253 = *(unsigned __int8 *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 39);
                          v254 = (const char *)(*(_QWORD *)v369.__r_.__value_.__l.__data_ + 16);
                        }
                        v255 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                        if ((v255 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                        {
                          sub_20E9E46F8((uint64_t)&object);
                          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                          if ((_BYTE)v396 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(object.__r_.__value_.__l.__data_);
                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A4A510);
                        }
                        if (byte_254A4A50F >= 0)
                          v256 = (const char *)&xmmword_254A4A4F8;
                        else
                          v256 = (const char *)xmmword_254A4A4F8;
                        if (byte_254A4A50F >= 0)
                          v257 = byte_254A4A50F;
                        else
                          v257 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v256, v254);
                        v258 = &object.__r_.__value_.__l.__size_;
                        if (v257 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v257 >= 0x17)
                        {
                          v259 = v252;
                          v260 = v84;
                          v261 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v257 | 7) != 0x17)
                            v261 = v257 | 7;
                          v262 = v261 + 1;
                          v258 = (std::string::size_type *)operator new(v261 + 1);
                          *(_QWORD *)&v396 = v262 | 0x8000000000000000;
                          object.__r_.__value_.__l.__size_ = (std::string::size_type)v258;
                          object.__r_.__value_.__r.__words[2] = v257;
                          v84 = v260;
                          v252 = v259;
                        }
                        else
                        {
                          BYTE7(v396) = v257;
                          if (!v257)
                          {
LABEL_461:
                            *((_BYTE *)v258 + v257) = 0;
                            BYTE8(v396) = 1;
                            v263 = &v397;
                            if (v253 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            v264 = (const char *)v250;
                            if (v253 >= 0x17)
                            {
                              v266 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v253 | 7) != 0x17)
                                v266 = v253 | 7;
                              v267 = v266 + 1;
                              v265 = v367;
                              v263 = operator new(v266 + 1);
                              v399 = v267 | 0x8000000000000000;
                              v397 = v263;
                              v398 = (void *)v253;
                            }
                            else
                            {
                              HIBYTE(v399) = v253;
                              v265 = v367;
                              if (!v253)
                              {
LABEL_469:
                                *((_BYTE *)v263 + v253) = 0;
                                v400 = 1;
                                v268 = object.__r_.__value_.__r.__words[0];
                                if (SHIBYTE(v399) < 0)
                                  operator delete(v397);
                                if (BYTE8(v396) && SBYTE7(v396) < 0)
                                  operator delete((void *)object.__r_.__value_.__l.__size_);
                                if (object.__r_.__value_.__r.__words[0])
                                  os_release(object.__r_.__value_.__l.__data_);
                                if (!v265 || !*(_QWORD *)(v265 + 24))
                                {
                                  os_log_type_enabled(v268, OS_LOG_TYPE_INFO);
                                  LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                                  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v264;
                                  v275 = (void *)_os_log_send_and_compose_impl();
                                  if (v275)
                                    free(v275);
                                  goto LABEL_607;
                                }
                                v269 = _os_log_pack_size();
                                v270 = operator new(v269, (std::align_val_t)8uLL);
                                v271 = (_QWORD *)operator new();
                                *v271 = &off_24C9ABB80;
                                v271[1] = 0;
                                v271[2] = 0;
                                v271[3] = v270;
                                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v270;
                                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v270;
                                v409 = 0;
                                v410 = 0;
                                __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v271;
                                v272 = strlen(v264);
                                if (v272 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                v273 = v272;
                                if (v272 >= 0x17)
                                {
                                  v312 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v272 | 7) != 0x17)
                                    v312 = v272 | 7;
                                  v313 = v312 + 1;
                                  v274 = operator new(v312 + 1);
                                  v394.__r_.__value_.__l.__size_ = v273;
                                  v394.__r_.__value_.__r.__words[2] = v313 | 0x8000000000000000;
                                  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
                                }
                                else
                                {
                                  *((_BYTE *)&v394.__r_.__value_.__s + 23) = v272;
                                  v274 = &v394;
                                  if (!v272)
                                  {
LABEL_547:
                                    v274[v273] = 0;
                                    v407[0] = v394.__r_.__value_.__l.__size_;
                                    v314 = v394.__r_.__value_.__r.__words[0];
                                    *(_QWORD *)((char *)v407 + 7) = *(std::string::size_type *)((char *)&v394.__r_.__value_.__r.__words[1]
                                                                                              + 7);
                                    v315 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
                                    v316 = operator new(0x38uLL);
                                    v316[1] = 0;
                                    v316[2] = 0;
                                    v316[3] = off_24C9ABC20;
                                    *v316 = &off_24C9ABBD0;
                                    v317 = v407[0];
                                    v316[4] = v314;
                                    v316[5] = v317;
                                    *(_QWORD *)((char *)v316 + 47) = *(_QWORD *)((char *)v407 + 7);
                                    *((_BYTE *)v316 + 55) = v315;
                                    memset(v407, 0, 15);
                                    v318 = v410;
                                    v409 = (char *)(v316 + 3);
                                    v410 = (std::__shared_weak_count *)v316;
                                    if (v318)
                                    {
                                      v319 = (unint64_t *)&v318->__shared_owners_;
                                      do
                                        v320 = __ldaxr(v319);
                                      while (__stlxr(v320 - 1, v319));
                                      if (!v320)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                                        std::__shared_weak_count::__release_weak(v318);
                                      }
                                    }
                                    object = __dst;
                                    v321 = v409;
                                    if (__dst.__r_.__value_.__r.__words[2])
                                    {
                                      v322 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                      do
                                        v323 = __ldxr(v322);
                                      while (__stxr(v323 + 1, v322));
                                    }
                                    v324 = v410;
                                    *(_QWORD *)&v396 = v321;
                                    *((_QWORD *)&v396 + 1) = v410;
                                    if (v410)
                                    {
                                      v325 = (unint64_t *)&v410->__shared_owners_;
                                      do
                                        v326 = __ldxr(v325);
                                      while (__stxr(v326 + 1, v325));
                                      v397 = v321;
                                      do
                                        v327 = __ldaxr(v325);
                                      while (__stlxr(v327 - 1, v325));
                                      if (!v327)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                                        std::__shared_weak_count::__release_weak(v324);
                                      }
                                    }
                                    else
                                    {
                                      v397 = v321;
                                    }
                                    v328 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                                    if (__dst.__r_.__value_.__r.__words[2])
                                    {
                                      v329 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                                      do
                                        v330 = __ldaxr(v329);
                                      while (__stlxr(v330 - 1, v329));
                                      if (!v330)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                                        std::__shared_weak_count::__release_weak(v328);
                                      }
                                    }
                                    v331 = object.__r_.__value_.__r.__words[0];
                                    if (*((char *)v397 + 31) >= 0)
                                      v332 = (char *)v397 + 8;
                                    else
                                      v332 = (char *)*((_QWORD *)v397 + 1);
                                    v333 = _os_log_pack_fill();
                                    *(_DWORD *)v333 = 136315138;
                                    *(_QWORD *)(v333 + 4) = v332;
                                    v334 = operator new();
                                    v335 = *(unsigned __int8 *)(v251 + 39);
                                    v336 = *(_QWORD *)(v251 + 16);
                                    v337 = *(_QWORD *)(v251 + 24);
                                    v338 = v396;
                                    *(_OWORD *)(v334 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                    if ((v335 & 0x80u) != 0)
                                      v335 = v337;
                                    else
                                      v336 = v252;
                                    *(_QWORD *)v334 = v331;
                                    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                    *(_OWORD *)(v334 + 24) = v338;
                                    v396 = 0uLL;
                                    *(_QWORD *)(v334 + 40) = v336;
                                    *(_QWORD *)(v334 + 48) = v335;
                                    *(_BYTE *)(v334 + 56) = 1;
                                    v394.__r_.__value_.__r.__words[0] = 0;
                                    __dst.__r_.__value_.__r.__words[0] = v334;
                                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v265 + 24) + 40))(*(_QWORD *)(v265 + 24), &__dst);
                                    v339 = __dst.__r_.__value_.__r.__words[0];
                                    __dst.__r_.__value_.__r.__words[0] = 0;
                                    if (v339)
                                    {
                                      v340 = *(std::__shared_weak_count **)(v339 + 32);
                                      if (v340)
                                      {
                                        v341 = (unint64_t *)&v340->__shared_owners_;
                                        do
                                          v342 = __ldaxr(v341);
                                        while (__stlxr(v342 - 1, v341));
                                        if (!v342)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                                          std::__shared_weak_count::__release_weak(v340);
                                        }
                                      }
                                      v343 = *(std::__shared_weak_count **)(v339 + 16);
                                      if (v343)
                                      {
                                        v344 = (unint64_t *)&v343->__shared_owners_;
                                        do
                                          v345 = __ldaxr(v344);
                                        while (__stlxr(v345 - 1, v344));
                                        if (!v345)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                                          std::__shared_weak_count::__release_weak(v343);
                                        }
                                      }
                                      MEMORY[0x212BC6398](v339, 0x10F0C40B62ED6C6);
                                      v346 = v394.__r_.__value_.__r.__words[0];
                                      v394.__r_.__value_.__r.__words[0] = 0;
                                      if (v346)
                                      {
                                        v347 = *(std::__shared_weak_count **)(v346 + 32);
                                        if (v347)
                                        {
                                          v348 = (unint64_t *)&v347->__shared_owners_;
                                          do
                                            v349 = __ldaxr(v348);
                                          while (__stlxr(v349 - 1, v348));
                                          if (!v349)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                                            std::__shared_weak_count::__release_weak(v347);
                                          }
                                        }
                                        v350 = *(std::__shared_weak_count **)(v346 + 16);
                                        if (v350)
                                        {
                                          v351 = (unint64_t *)&v350->__shared_owners_;
                                          do
                                            v352 = __ldaxr(v351);
                                          while (__stlxr(v352 - 1, v351));
                                          if (!v352)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                                            std::__shared_weak_count::__release_weak(v350);
                                          }
                                        }
                                        MEMORY[0x212BC6398](v346, 0x10F0C40B62ED6C6);
                                      }
                                    }
                                    v353 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
                                    if (*((_QWORD *)&v396 + 1))
                                    {
                                      v354 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
                                      do
                                        v355 = __ldaxr(v354);
                                      while (__stlxr(v355 - 1, v354));
                                      if (!v355)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                                        std::__shared_weak_count::__release_weak(v353);
                                      }
                                    }
                                    v356 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                    if (object.__r_.__value_.__r.__words[2])
                                    {
                                      v357 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                      do
                                        v358 = __ldaxr(v357);
                                      while (__stlxr(v358 - 1, v357));
                                      if (!v358)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                                        std::__shared_weak_count::__release_weak(v356);
                                      }
                                    }
LABEL_607:
                                    if (v84)
                                    {
                                      v359 = &v376;
                                      if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v359 = (std::string *)v376.__r_.__value_.__r.__words[0];
                                      sub_20E8C003C((uint64_t)&v369, "%s", (const char *)v359);
                                      sub_20E863570((uint64_t)&v369);
                                    }
                                    sub_20E863570((uint64_t)&v369);
                                    v360 = v375;
                                    if (v375)
                                    {
                                      v361 = (unint64_t *)&v375->__shared_owners_;
                                      do
                                        v362 = __ldaxr(v361);
                                      while (__stlxr(v362 - 1, v361));
                                      if (!v362)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                                        std::__shared_weak_count::__release_weak(v360);
                                      }
                                    }
                                    if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v376.__r_.__value_.__l.__data_);
                                    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                                    v363 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0]
                                                                                                 + 64);
                                    *(_QWORD *)&v378 = v363;
                                    *((_QWORD *)&v378 + 1) = MEMORY[0x24BEDB848] + 16;
                                    if (v387 < 0)
                                      operator delete(v384[1]);
                                    goto LABEL_346;
                                  }
                                }
                                memcpy(v274, v264, v273);
                                goto LABEL_547;
                              }
                            }
                            memmove(v263, v254, v253);
                            goto LABEL_469;
                          }
                        }
                        memmove(v258, v256, v257);
                        goto LABEL_461;
                      }
                    }
                    memmove(v98, v247, v97);
                    goto LABEL_440;
                  }
LABEL_409:
                  v229 = v388;
                  if (v388 < v383)
                  {
                    v388 = v383;
                    v229 = v383;
                  }
                  v230 = &v382;
                  goto LABEL_432;
                }
              }
              else if ((SHIBYTE(v394.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_168;
              }
              operator delete(v394.__r_.__value_.__l.__data_);
              v96 = v389;
              v367 = v86;
              if ((v389 & 0x10) == 0)
                goto LABEL_169;
              goto LABEL_409;
            }
          }
          sub_20FD205B8((uint64_t *)(v53 + 8), 0);
          MEMORY[0x212BC6398](v53, 0xA1C40BD48D6D6);
          if ((_BYTE)v389)
            goto LABEL_104;
          goto LABEL_74;
        }
      }
      else
      {
        sub_20E8965F4();
        if (*(_BYTE *)(v16 + 56))
        {
          v32 = *(std::__shared_weak_count **)(v16 + 40);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        *(_OWORD *)(v16 + 32) = *(_OWORD *)__p;
        *(_BYTE *)(v16 + 56) = 1;
        __p[0] = 0;
        LOBYTE(v389) = 1;
        if (*(_BYTE *)(v2 + 72))
          goto LABEL_25;
      }
      v35 = operator new();
      *(_QWORD *)v35 = &off_24CA05F60;
      v36 = a1[1];
      memset(&v392, 0, sizeof(v392));
      v39 = *(std::string **)(v36 + 64);
      v37 = v36 + 64;
      v38 = v39;
      v40 = *(unsigned __int8 *)(v37 + 23);
      if ((v40 & 0x80u) == 0)
        v41 = (std::string *)v37;
      else
        v41 = v38;
      v42 = *(_QWORD *)(v37 + 8);
      if ((v40 & 0x80u) == 0)
        v42 = v40;
      sub_20E8A9678(&v392, v41, (std::string *)((char *)v41 + v42));
      v43 = *(_QWORD *)(v2 + 16);
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v2 + 288) + 32);
      sub_20E893368((unsigned int *)&v369, (uint64_t *)&__dst);
      v45 = LODWORD(v369.__r_.__value_.__l.__data_);
      v44 = HIDWORD(v369.__r_.__value_.__r.__words[0]);
      v46 = v369.__r_.__value_.__r.__words[1];
      v47 = HIDWORD(v369.__r_.__value_.__r.__words[1]);
      v48 = *(_QWORD *)(v2 + 24);
      v49 = *(_QWORD *)(v2 + 32);
      if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v369, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
      else
        v369 = v392;
      __dst.__r_.__value_.__r.__words[0] = (v45 | ((unint64_t)v44 << 32) | ((unint64_t)BYTE1(v44) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v44) << 56) | ((unint64_t)(HIWORD(v44) & 0xF | 0x40) << 48);
      __dst.__r_.__value_.__l.__size_ = ((unint64_t)v47 << 32) | ((unint64_t)BYTE1(v47) << 40) | v46 & 0xFFFFFF00 | (v47 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v47) << 48) | v46 & 0x3F | 0x80;
      __dst.__r_.__value_.__s.__data_[16] = 1;
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(&object, v35, &v369, v43, &__dst, v48, v49);
      if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v369.__r_.__value_.__l.__data_);
      sub_20FD0337C((uint64_t *)__p, (__int128 *)&object);
      if (v406)
      {
        v54 = object.__r_.__value_.__r.__words[0];
        object.__r_.__value_.__r.__words[0] = 0;
        if (v54)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v54 + 8))(v54);
      }
      else if (v405)
      {
        if (v404)
        {
          if (v403 < 0)
            operator delete(v402);
          if (v401 < 0)
            operator delete(v398);
        }
        if ((_BYTE)v397 && SHIBYTE(v396) < 0)
          operator delete((void *)object.__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v392.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (!(_BYTE)v389)
        goto LABEL_101;
      goto LABEL_63;
    }
    if (*(_QWORD *)(v3 + 24))
      goto LABEL_106;
    goto LABEL_23;
  }
  *(_QWORD *)(v3 + 24) = 0;
  if (v4)
  {
    sub_20FD205B8((uint64_t *)(v4 + 8), 0);
    MEMORY[0x212BC6398](v4, 0xA1C40BD48D6D6);
    return 0;
  }
  return v4;
}

void sub_20FD02530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (LOBYTE(STACK[0x208]) && SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(a22);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20FD0293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t a72;

  sub_20FD03904(&a72);
  if (a70 < 0)
  {
    operator delete(__p);
    sub_20FD03904(&a25);
    _Unwind_Resume(a1);
  }
  sub_20FD03904(&a25);
  _Unwind_Resume(a1);
}

void sub_20FD029E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FD02A04);
}

_QWORD *sub_20FD02A0C(uint64_t *a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  _QWORD *result;
  uint64_t v22;
  char v23;
  _OWORD *v24;
  _BYTE v25[15];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24CA05908;
  v9 = operator new();
  v8[3] = v9;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *(_QWORD *)(v9 + 24) = 850045863;
  *(_QWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 1018212795;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 124) = 0u;
  *(_QWORD *)v9 = &off_24CA05958;
  *a1 = v9;
  std::mutex::lock((std::mutex *)(v9 + 24));
  v11 = *(_DWORD *)(v9 + 136);
  if ((v11 & 2) != 0)
    sub_20E96CE78(1u);
  v24 = a3;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  *(_DWORD *)(v9 + 136) = v11 | 2;
  std::mutex::unlock((std::mutex *)(v9 + 24));
  v13 = *(unsigned __int8 *)(a4 + 88);
  if (*(_BYTE *)(a4 + 88))
  {
    v14 = *(_QWORD *)(a4 + 64);
    *(_QWORD *)v25 = *(_QWORD *)(a4 + 72);
    *(_QWORD *)&v25[7] = *(_QWORD *)(a4 + 79);
    v23 = *(_BYTE *)(a4 + 87);
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 80) = 0;
    *(_QWORD *)(a4 + 64) = 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = (char *)operator new(0x78uLL);
  v16 = v15;
  v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v15 + 40) = v17;
  v18 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_24CA059A0;
  *(_OWORD *)(v15 + 72) = v18;
  v15[88] = 0;
  v15[112] = 0;
  if (v13)
  {
    v19 = *(_QWORD *)v25;
    *((_QWORD *)v15 + 11) = v14;
    *((_QWORD *)v15 + 12) = v19;
    *(_QWORD *)(v15 + 103) = *(_QWORD *)&v25[7];
    v15[111] = v23;
    v15[112] = 1;
  }
  v26 = 0;
  v20 = (char *)operator new(0x38uLL);
  *(_QWORD *)v20 = &off_24CA059F0;
  *((_QWORD *)v20 + 1) = v8 + 3;
  *((_QWORD *)v20 + 2) = v8;
  *(_OWORD *)(v20 + 24) = *v24;
  *((_QWORD *)v20 + 5) = v16 + 24;
  *((_QWORD *)v20 + 6) = v16;
  v26 = v20;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 40))(a2, v25);
  result = v26;
  if (v26 == v25)
  {
    v22 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

void sub_20FD02C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  char *v20;
  uint64_t v21;
  unint64_t v22;

  v20 = a16;
  if (a16 == v16)
  {
    v21 = 4;
    v20 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  do
LABEL_6:
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD02DAC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_20E8ADB20((char *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
  sub_20FCFC050((_BYTE *)(a1 + 32), a2 + 32);
  return a1;
}

void sub_20FD02E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void ***)v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(void ***)(v1 + 8);
      v5 = *(void ***)v1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = *(void ***)v1;
      }
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD02EC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20FD02F5C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  void *__p[2];
  char v14;

  v4 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
  v5 = (uint64_t **)(a1 + 208);
  v6 = sub_20E8D4B64(a1 + 208, (const void **)__p);
  v7 = v6;
  v8 = (uint64_t *)v6[1];
  if (v8)
  {
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    v10 = v6;
    do
    {
      v9 = (uint64_t *)v10[2];
      v11 = *v9 == (_QWORD)v10;
      v10 = v9;
    }
    while (!v11);
  }
  if (*v5 == v6)
    *v5 = v9;
  v12 = *(uint64_t **)(a1 + 216);
  --*(_QWORD *)(a1 + 224);
  sub_20E8D2134(v12, v7);
  if (*((char *)v7 + 55) < 0)
  {
    operator delete((void *)v7[4]);
    operator delete(v7);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_13:
    operator delete(__p[0]);
    goto LABEL_11;
  }
  operator delete(v7);
  if (v14 < 0)
    goto LABEL_13;
LABEL_11:
  std::mutex::unlock(v4);
}

void sub_20FD03058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(v15);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_20FD03090(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_20FD030D0();
  }
}

void sub_20FD030D0(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[6];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Diagnostics storage with ID '";
  v4[1] = 29;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = "' already exists in diagnostics engine. Give storages a unique name.";
  v4[5] = 68;
  sub_20E8778D4((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_20FD03170(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    sub_20FD205B8((uint64_t *)(v5 + 8), 0);
    MEMORY[0x212BC6398](v5, 0xA1C40BD48D6D6);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FD03248(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t *sub_20FD0337C(uint64_t *a1, __int128 *a2)
{
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  int v18;
  void **v19;
  int v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  char v26;
  int v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  void *__p[3];
  char v32;
  void *v33[3];
  void *v34;
  void *v35[3];
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  char v42;
  __int128 v43;
  void *v44;
  void *v45;
  void *v46[2];
  void *v47;
  char v48;
  char v49;
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[5];

  v52[2] = *MEMORY[0x24BDAC8D0];
  v38 = *((_BYTE *)a2 + 120);
  v10 = v38;
  if (!v38)
  {
    v29 = *a2;
    LOBYTE(__p[0]) = 0;
    v37 = 0;
    if (*((_BYTE *)a2 + 112))
    {
      v32 = 0;
      v13 = *((unsigned __int8 *)a2 + 40);
      if (*((_BYTE *)a2 + 40))
      {
        *(_OWORD *)__p = a2[1];
        v2 = (void *)*((_QWORD *)a2 + 4);
        __p[2] = v2;
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v32 = 1;
      }
      LOBYTE(v33[0]) = 0;
      v36 = 0;
      v14 = *((unsigned __int8 *)a2 + 104);
      if (*((_BYTE *)a2 + 104))
      {
        *(_OWORD *)v33 = a2[3];
        v2 = (void *)*((_QWORD *)a2 + 9);
        v33[2] = *((void **)a2 + 8);
        *((_QWORD *)a2 + 7) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 6) = 0;
        v34 = v2;
        *(_OWORD *)v35 = a2[5];
        v35[2] = *((void **)a2 + 12);
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 11) = 0;
        *((_QWORD *)a2 + 12) = 0;
        v36 = 1;
        v37 = 1;
        v15 = a1 + 15;
        if (*((_BYTE *)a1 + 120))
        {
LABEL_10:
          v16 = *a1;
          *(_OWORD *)a1 = v29;
          *((_BYTE *)a1 + 16) = 0;
          *((_BYTE *)a1 + 40) = 0;
          if (v13)
          {
            *((_OWORD *)a1 + 1) = *(_OWORD *)__p;
            a1[4] = (uint64_t)__p[2];
            memset(__p, 0, sizeof(__p));
            *((_BYTE *)a1 + 40) = 1;
          }
          *((_BYTE *)a1 + 48) = 0;
          *((_BYTE *)a1 + 104) = 0;
          if (v14)
          {
            *((_OWORD *)a1 + 3) = *(_OWORD *)v33;
            a1[8] = (uint64_t)v33[2];
            memset(v33, 0, sizeof(v33));
            a1[9] = (uint64_t)v2;
            *((_OWORD *)a1 + 5) = *(_OWORD *)v35;
            a1[12] = (uint64_t)v35[2];
            memset(v35, 0, sizeof(v35));
            *((_BYTE *)a1 + 104) = 1;
          }
          v17 = 1;
          *((_BYTE *)a1 + 112) = 1;
          if (v13 && SHIBYTE(__p[2]) < 0)
          {
            operator delete(__p[0]);
            v17 = *v15;
          }
LABEL_24:
          *(_QWORD *)&v30 = v16;
          v38 = v17;
          *v15 = 0;
          if (!v17)
            goto LABEL_62;
          goto LABEL_48;
        }
      }
      else
      {
        v37 = 1;
        v15 = a1 + 15;
        if (*((_BYTE *)a1 + 120))
          goto LABEL_10;
      }
      v39 = *a2;
      LOBYTE(v40) = 0;
      v42 = 0;
      if (v13)
      {
        v40 = *(_OWORD *)__p;
        v41 = __p[2];
        memset(__p, 0, sizeof(__p));
        v42 = 1;
      }
      LOBYTE(v43) = 0;
      v48 = 0;
      if (v14)
      {
        v43 = *(_OWORD *)v33;
        v44 = v33[2];
        memset(v33, 0, sizeof(v33));
        v45 = v2;
        *(_OWORD *)v46 = *(_OWORD *)v35;
        v47 = v35[2];
        memset(v35, 0, sizeof(v35));
        v48 = 1;
      }
      v49 = 1;
    }
    else
    {
      v15 = a1 + 15;
      if (*((_BYTE *)a1 + 120))
      {
        v16 = *a1;
        *(_OWORD *)a1 = v29;
        *((_BYTE *)a1 + 16) = 0;
        *((_BYTE *)a1 + 112) = 0;
        v17 = 1;
        goto LABEL_24;
      }
      v39 = *a2;
      LOBYTE(v40) = 0;
      v49 = 0;
    }
    v30 = *(_OWORD *)a1;
    sub_20FD03AA4((uint64_t)__p, (__int128 *)a1 + 1);
    *(_OWORD *)a1 = v39;
    sub_20FD03AA4((uint64_t)(a1 + 2), &v40);
    if (v49)
    {
      if (v48)
      {
        if (SHIBYTE(v47) < 0)
          operator delete(v46[0]);
        if (SHIBYTE(v44) < 0)
          operator delete((void *)v43);
      }
      if (v42 && SHIBYTE(v41) < 0)
        operator delete((void *)v40);
    }
    if (!v38)
      goto LABEL_62;
    goto LABEL_48;
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (*((_BYTE *)a1 + 120))
  {
    v12 = *a1;
    *a1 = v11;
    if (!v12)
      return a1;
    goto LABEL_49;
  }
  v39 = *(_OWORD *)a1;
  v18 = *((unsigned __int8 *)a1 + 112);
  if (!*((_BYTE *)a1 + 112))
  {
    v22 = 0;
    v21 = 0;
    v23 = 0;
    goto LABEL_37;
  }
  v19 = (void **)(a1 + 2);
  v20 = *((unsigned __int8 *)a1 + 40);
  if (*((_BYTE *)a1 + 40))
  {
    v21 = (void *)a1[2];
    v52[0] = a1[3];
    *(_QWORD *)((char *)v52 + 7) = *(uint64_t *)((char *)a1 + 31);
    v3 = *((_BYTE *)a1 + 39);
    a1[3] = 0;
    a1[4] = 0;
    *v19 = 0;
    v22 = 1;
    if (*((_BYTE *)a1 + 104))
      goto LABEL_20;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    if (*((_BYTE *)a1 + 104))
    {
LABEL_20:
      v5 = (void *)a1[6];
      v51[0] = a1[7];
      *(_QWORD *)((char *)v51 + 7) = *(uint64_t *)((char *)a1 + 63);
      v8 = *((_BYTE *)a1 + 71);
      a1[7] = 0;
      a1[8] = 0;
      a1[6] = 0;
      v6 = (void *)a1[9];
      v4 = (void *)a1[10];
      v50[0] = a1[11];
      *(_QWORD *)((char *)v50 + 7) = *(uint64_t *)((char *)a1 + 95);
      v7 = *((_BYTE *)a1 + 103);
      a1[11] = 0;
      a1[12] = 0;
      v23 = 1;
      a1[10] = 0;
      if (!v20)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v23 = 0;
  v5 = 0;
  if (!v20)
    goto LABEL_37;
LABEL_35:
  if (*((char *)a1 + 39) < 0)
  {
    v28 = v21;
    v26 = v3;
    v27 = v23;
    operator delete(*v19);
    v3 = v26;
    v23 = v27;
    v21 = v28;
  }
LABEL_37:
  *a1 = v11;
  *(_QWORD *)&v30 = v39;
  LOBYTE(__p[0]) = 0;
  v37 = 0;
  if (!v18)
  {
    v24 = *((unsigned __int8 *)a1 + 120);
    v38 = *((_BYTE *)a1 + 120);
    *((_BYTE *)a1 + 120) = v10;
    goto LABEL_47;
  }
  v32 = 0;
  if (v22)
  {
    __p[0] = v21;
    __p[1] = (void *)v52[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v52 + 7);
    HIBYTE(__p[2]) = v3;
    v32 = 1;
    v21 = 0;
    v3 = 0;
  }
  LOBYTE(v33[0]) = 0;
  v36 = 0;
  if (v23)
  {
    v33[0] = v5;
    v33[1] = (void *)v51[0];
    *(void **)((char *)&v33[1] + 7) = *(void **)((char *)v51 + 7);
    HIBYTE(v33[2]) = v8;
    v34 = v6;
    v35[0] = v4;
    v35[1] = (void *)v50[0];
    *(void **)((char *)&v35[1] + 7) = *(void **)((char *)v50 + 7);
    HIBYTE(v35[2]) = v7;
    v36 = 1;
  }
  v37 = 1;
  v24 = *((unsigned __int8 *)a1 + 120);
  v38 = *((_BYTE *)a1 + 120);
  *((_BYTE *)a1 + 120) = v10;
  if (!v22 || (v3 & 0x80) == 0)
  {
LABEL_47:
    if (!v24)
      goto LABEL_62;
    goto LABEL_48;
  }
  operator delete(v21);
  if (!v24)
  {
LABEL_62:
    if (v37)
    {
      if (v36)
      {
        if (SHIBYTE(v35[2]) < 0)
          operator delete(v35[0]);
        if (SHIBYTE(v33[2]) < 0)
          operator delete(v33[0]);
      }
      if (v32 && SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    return a1;
  }
LABEL_48:
  v12 = v30;
  if ((_QWORD)v30)
LABEL_49:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_20FD038F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD03904(uint64_t *a1)
{
  uint64_t v2;

  if (*((_BYTE *)a1 + 120))
  {
    v2 = *a1;
    *a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return a1;
  }
  if (!*((_BYTE *)a1 + 112))
    return a1;
  if (!*((_BYTE *)a1 + 104))
    goto LABEL_9;
  if (*((char *)a1 + 103) < 0)
  {
    operator delete((void *)a1[10]);
    if (*((char *)a1 + 71) < 0)
      goto LABEL_13;
LABEL_9:
    if (*((_BYTE *)a1 + 40))
      goto LABEL_10;
    return a1;
  }
  if ((*((char *)a1 + 71) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_13:
  operator delete((void *)a1[6]);
  if (!*((_BYTE *)a1 + 40))
    return a1;
LABEL_10:
  if ((*((char *)a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete((void *)a1[2]);
  return a1;
}

void sub_20FD039B0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C140);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C140))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.kit.dgn");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C138);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C140);
  }
  *a1 = qword_254A6C138;
}

void sub_20FD03A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C140);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C140);
  _Unwind_Resume(a1);
}

void sub_20FD03AA4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 96) != *((unsigned __int8 *)a2 + 96))
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (*((_BYTE *)a2 + 24))
      {
        v6 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v6;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a1 + 24) = 1;
      }
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      v5 = 1;
      if (*((_BYTE *)a2 + 88))
      {
        v7 = a2[2];
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = v7;
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 6) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        v8 = a2[4];
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 64) = v8;
        *((_QWORD *)a2 + 9) = 0;
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_12;
    if (*(char *)(a1 + 87) < 0)
    {
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_12:
        v5 = *(_BYTE *)(a1 + 24);
        if (v5)
        {
LABEL_13:
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v5 = 0;
        }
LABEL_16:
        *(_BYTE *)(a1 + 96) = v5;
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 24);
    if (v5)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
    {
      if (*(_BYTE *)(a1 + 24))
      {
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v4 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v4;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      v9 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v9;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    sub_20FD03C64(a1 + 32, a2 + 2);
  }
}

void sub_20FD03C64(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 56) != *((unsigned __int8 *)a2 + 56))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v7;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v8 = a2[2];
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = v8;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      return;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + 56) = 0;
      return;
    }
    operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v5 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v5);
    v6 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 55) = 0;
    *((_BYTE *)a2 + 32) = 0;
  }
}

_DWORD *sub_20FD03DA0(_DWORD ***a1)
{
  return sub_20E921800(**a1, (char *)(*a1)[1]);
}

void sub_20FD03DAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA05818[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FD03F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FD03FA8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FD04238(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FD04250(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20FD0425C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD04280(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20FD04298(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3dgn8IStorageEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn8IStorageEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3dgn8IStorageEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn8IStorageEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD04308(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20FD04308(*(_QWORD *)a1);
    sub_20FD04308(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void sub_20FD043A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FD043B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD043E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v6;
  std::logic_error *exception;
  std::logic_error *v8;
  std::logic_error v9[2];

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    if ((*(_BYTE *)(result + 136) & 1) == 0)
    {
      v9[0].__vftable = 0;
      v3 = *(_QWORD *)(result + 16);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)v9);
      result = *(_QWORD *)(a1 + 24);
      if (!v3 && *(uint64_t *)(result + 8) >= 1)
      {
        v6 = std::future_category();
        MEMORY[0x212BC5AF8](v9, 4, v6);
        exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
        v8 = std::logic_error::logic_error(exception, v9);
        v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
        v8[1] = v9[1];
        __cxa_throw(v8, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
      }
    }
    v4 = (unint64_t *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20FD044C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__assoc_sub_state *a9, std::logic_error a10)
{
  uint64_t v10;
  std::exception_ptr v11;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v11.__ptr_ = (void *)(v10 - 24);
  std::__assoc_sub_state::set_exception(a9, v11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 - 24));
  std::logic_error::~logic_error(&a10);
  JUMPOUT(0x20FD04428);
}

void sub_20FD04504(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20FD04550(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD045B0(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    sub_20E8DDADC((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20FD045E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA059A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FD045F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA059A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD04628(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
  }
}

_QWORD *sub_20FD04648(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24CA059F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20FD04700(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24CA059F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x212BC6398);
}

char *sub_20FD047B8(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24CA059F0;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20FD04830(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24CA059F0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20FD04888(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20FD04924(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (v5)
        goto LABEL_6;
LABEL_9:
      operator delete(__p);
      return;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_20FD049D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8[2];
  uint64_t v9;
  char v10;
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  std::exception_ptr v23;

  v1 = *(uint64_t **)(a1 + 8);
  sub_20FD10404(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 8), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v8);
  v2 = *v1;
  if (!*v1)
    sub_20E96CE78(3u);
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v23.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v23), v3))
  {
    sub_20E96CE78(2u);
  }
  *(_BYTE *)(v2 + 144) = 0;
  *(_BYTE *)(v2 + 168) = 0;
  if (v10)
  {
    *(_OWORD *)(v2 + 144) = *(_OWORD *)v8;
    *(_QWORD *)(v2 + 160) = v9;
    v8[1] = 0;
    v9 = 0;
    v8[0] = 0;
    *(_BYTE *)(v2 + 168) = 1;
  }
  *(_BYTE *)(v2 + 176) = 0;
  *(_BYTE *)(v2 + 296) = 0;
  if (v22)
  {
    *(_OWORD *)(v2 + 176) = v11;
    *(_BYTE *)(v2 + 192) = 0;
    *(_BYTE *)(v2 + 288) = 0;
    if (v21)
    {
      *(_BYTE *)(v2 + 216) = 0;
      if (v14)
      {
        *(_OWORD *)(v2 + 192) = *(_OWORD *)__p;
        *(_QWORD *)(v2 + 208) = v13;
        __p[1] = 0;
        v13 = 0;
        __p[0] = 0;
        *(_BYTE *)(v2 + 216) = 1;
      }
      *(_BYTE *)(v2 + 224) = 0;
      *(_BYTE *)(v2 + 280) = 0;
      if (v20)
      {
        v4 = v17;
        *(_QWORD *)(v2 + 240) = v16;
        *(_OWORD *)(v2 + 224) = *(_OWORD *)v15;
        v15[0] = 0;
        v15[1] = 0;
        *(_QWORD *)(v2 + 248) = v4;
        *(_OWORD *)(v2 + 256) = *(_OWORD *)v18;
        *(_QWORD *)(v2 + 272) = v19;
        v16 = 0;
        v18[0] = 0;
        v18[1] = 0;
        v19 = 0;
        *(_BYTE *)(v2 + 280) = 1;
      }
      *(_BYTE *)(v2 + 288) = 1;
    }
    *(_BYTE *)(v2 + 296) = 1;
  }
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  if (v22 && v21)
  {
    if (!v20)
      goto LABEL_19;
    if (SHIBYTE(v19) < 0)
    {
      operator delete(v18[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_19:
        if (!v14)
          goto LABEL_22;
        goto LABEL_20;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v15[0]);
    if (!v14)
      goto LABEL_22;
LABEL_20:
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
LABEL_22:
  if (v10)
  {
    v5 = (void **)v8[0];
    if (v8[0])
    {
      v6 = (void **)v8[1];
      v7 = v8[0];
      if (v8[1] != v8[0])
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = v8[0];
      }
      v8[1] = v5;
      operator delete(v7);
    }
  }
}

void sub_20FD04C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  std::__assoc_sub_state **v45;
  std::__assoc_sub_state *v46;
  std::exception_ptr v47;

  __cxa_begin_catch(a1);
  v45 = *(std::__assoc_sub_state ***)(v43 + 8);
  std::current_exception();
  v46 = *v45;
  if (v46)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&a9, (const std::exception_ptr *)(v44 - 40));
    v47.__ptr_ = &a9;
    std::__assoc_sub_state::set_exception(v46, v47);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v44 - 40));
    __cxa_end_catch();
    JUMPOUT(0x20FD04BD4);
  }
  sub_20E96CE78(3u);
}

void sub_20FD04D38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  sub_20E860DA4(a1);
}

uint64_t sub_20FD04D50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_3kit3dgn10RunResultsERZNS5_6Engine3RunEN"
                     "St3__18optionalINS5_9EventInfoEEERKNS5_10RunOptionsERKNS4_4time6IClockEE3$_0NS1_11IWorkQueueTINS8_8"
                     "functionIFvvEEEEEJSC_EEENS8_6futureIT_EERT1_OT0_DpOT2_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_3kit3dgn10RunResultsERZNS5_6E"
                                "ngine3RunENSt3__18optionalINS5_9EventInfoEEERKNS5_10RunOptionsERKNS4_4time6IClockEE3$_0N"
                                "S1_11IWorkQueueTINS8_8functionIFvvEEEEEJSC_EEENS8_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_3kit3dgn10RunResultsERZNS5_6Engine3RunENSt3__18optionalINS5_9EventInfoEEERKNS5_10RunOptionsERKNS4_4time6IClockEE3$_0NS1_11IWorkQueueTINS8_8functionIFvvEEEEEJSC_EEENS8_6futureIT_EERT1_OT0_DpOT2_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_3kit3dgn10RunResultsERZNS5_6Engine3RunENSt3__18optionalINS5_9EventInfoEEERKNS5_10RunOptionsERKNS4_4time6IClockEE3$_0NS1_11IWorkQueueTINS8_8functionIFvvEEEEEJSC_EEENS8_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FD04DBC()
{
  return &unk_24CA05A50;
}

void sub_20FD04DCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD04DF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20FD04E08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit4time6IClockEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit4time6IClockEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit4time6IClockEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit4time6IClockEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD04E7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD04EA0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20FD04EB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3dgn14ITimeConverterEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3dgn14ITimeConverterEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3dgn14ITimeConverterEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3dgn14ITimeConverterEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD04F28(char *a1)
{
  if (a1)
  {
    sub_20FD04F28(*(_QWORD *)a1);
    sub_20FD04F28(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_20FD04F80@<X0>(uint64_t *a1@<X0>, uint64_t (****a2)(uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t (***v7)(uint64_t);
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (***v26)(uint64_t);
  std::__shared_weak_count *v27;
  uint64_t v28[7];
  std::__shared_weak_count_vtbl *v29;

  v26 = *a2;
  if (v26)
  {
    v6 = (std::__shared_weak_count *)operator new();
    v7 = *a2;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA058B8;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  }
  else
  {
    v6 = 0;
  }
  v27 = v6;
  *a2 = 0;
  sub_20FD061A0((unint64_t)v28, a1, &v26);
  v8 = operator new();
  sub_20FD05404(v8, (uint64_t)v28);
  v29 = (std::__shared_weak_count_vtbl *)v8;
  sub_20FD06820((uint64_t)v28);
  v9 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)a1[1];
  v24 = *a1;
  v25 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v29;
  v29 = 0;
  v23 = v15;
  sub_20FD051F4(&v24, &v23, v28);
  *a3 = v28[0];
  v28[0] = 0;
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    v17 = sub_20FD06820((uint64_t)v16);
    MEMORY[0x212BC6398](v17, 0x10E1C4001DD1314);
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  result = (uint64_t)v29;
  if (v29)
  {
    v22 = sub_20FD06820((uint64_t)v29);
    return MEMORY[0x212BC6398](v22, 0x10E1C4001DD1314);
  }
  return result;
}

void sub_20FD05138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20FD053C0((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  sub_20FD053C0((uint64_t *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_20FD0515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  MEMORY[0x212BC6398](v5, 0x10E1C4001DD1314);
  sub_20FD06820((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD05198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD051AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FD2D580(v2);
    MEMORY[0x212BC6398](v3, 0x10B3C40AB4A3A93);
  }
  return a1;
}

void sub_20FD051F4(uint64_t *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;
  void (**v19)();
  __int128 v20;
  __int128 v21;

  v5 = a1[1];
  v17 = *a1;
  v18 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v16[0] = *a2;
  if (v16[0])
  {
    v8 = (std::__shared_weak_count *)operator new();
    v9 = *a2;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05BB0;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = v9;
  }
  else
  {
    v8 = 0;
  }
  v16[1] = v8;
  *a2 = 0;
  sub_20FD0D654(&v19, &v17, (uint64_t)v16);
  v10 = operator new();
  *(_OWORD *)(v10 + 8) = v20;
  *(_QWORD *)v10 = &off_24CA05FF0;
  *(_OWORD *)(v10 + 24) = v21;
  *((_QWORD *)&v20 + 1) = 0;
  v21 = 0uLL;
  *a3 = v10;
  v19 = off_24CA05FC0;
  *(_QWORD *)&v20 = 0;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FD0536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD05380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_20FD0D854((uint64_t *)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FD053A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD053C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FD06820(v2);
    MEMORY[0x212BC6398](v3, 0x10E1C4001DD1314);
  }
  return a1;
}

uint64_t sub_20FD05404(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  timespec __rqtp;

  *(_QWORD *)a1 = &off_24CA05B10;
  v4 = *(_QWORD **)(a2 + 8);
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *v4;
  v5 = v4[1];
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (unsigned __int8 *)(a2 + 32);
  do
    v9 = __ldaxr(v8);
  while (__stxr(1u, v8));
  if (v9)
  {
    v10 = 0;
    do
    {
      if (v10)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        nanosleep(&__rqtp, 0);
      }
      ++v10;
      do
        v11 = __ldaxr(v8);
      while (__stxr(1u, v8));
    }
    while (v11);
  }
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v14 = (unsigned int *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  atomic_store(0, v8);
  v16 = (unsigned __int8 *)(a1 + 32);
  do
    v17 = __ldaxr(v16);
  while (__stxr(1u, v16));
  if (v17)
  {
    v18 = 0;
    do
    {
      if (v18)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        nanosleep(&__rqtp, 0);
      }
      ++v18;
      do
        v19 = __ldaxr(v16);
      while (__stxr(1u, v16));
    }
    while (v19);
  }
  v20 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v12;
  atomic_store(0, (unsigned __int8 *)(a1 + 32));
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
      v24 = v20 + 3;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  do
    v27 = __ldaxr(v8);
  while (__stxr(1u, v8));
  if (v27)
  {
    v28 = 0;
    do
    {
      if (v28)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        nanosleep(&__rqtp, 0);
      }
      ++v28;
      do
        v29 = __ldaxr(v8);
      while (__stxr(1u, v8));
    }
    while (v29);
  }
  v30 = *(unsigned int **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  atomic_store(0, (unsigned __int8 *)(a2 + 32));
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
      v34 = v30 + 3;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
    }
  }
  return a1;
}

uint64_t sub_20FD05690(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_20FD0570C(uint64_t a1)
{
  sub_20FD06820(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD05730@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  timespec __rqtp;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 32);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        result = nanosleep(&__rqtp, 0);
      }
      ++v6;
      do
        v7 = __ldaxr(v4);
      while (__stxr(1u, v4));
    }
    while (v7);
  }
  v8 = *(uint64_t **)(v2 + 16);
  v9 = *(unsigned int **)(v2 + 24);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  atomic_store(0, v4);
  v12 = *v8;
  if (*(char *)(v12 + 31) < 0)
  {
    result = (uint64_t)sub_20E860C04((_BYTE *)a2, *(void **)(v12 + 8), *(_QWORD *)(v12 + 16));
  }
  else
  {
    v13 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v12 + 24);
    *(_OWORD *)a2 = v13;
  }
  if (v9)
  {
    v14 = v9 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v17 = v9 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  return result;
}

void sub_20FD05864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FCFC32C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD05880@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  timespec __rqtp;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 32);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        result = nanosleep(&__rqtp, 0);
      }
      ++v6;
      do
        v7 = __ldaxr(v4);
      while (__stxr(1u, v4));
    }
    while (v7);
  }
  v8 = *(uint64_t **)(v2 + 16);
  v9 = *(unsigned int **)(v2 + 24);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  atomic_store(0, v4);
  v13 = *v8;
  v12 = v8[1];
  *a2 = v13;
  a2[1] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v9)
  {
    v16 = v9 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v19 = v9 + 3;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  return result;
}

uint64_t sub_20FD059AC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  timespec __rqtp;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 32);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        result = nanosleep(&__rqtp, 0);
      }
      ++v6;
      do
        v7 = __ldaxr(v4);
      while (__stxr(1u, v4));
    }
    while (v7);
  }
  v8 = *(uint64_t **)(v2 + 16);
  v9 = *(unsigned int **)(v2 + 24);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  atomic_store(0, v4);
  v13 = *v8;
  v12 = v8[1];
  *a2 = v13;
  a2[1] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v9)
  {
    v16 = v9 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v19 = v9 + 3;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  return result;
}

void sub_20FD05AD8(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t (***v23)(uint64_t);
  std::__shared_weak_count *v24;
  timespec __rqtp;

  if (*a2 && *(uint64_t (***)(uint64_t))*a2 == &off_24CA06AA8)
  {
    v18 = a2[1];
    v23 = (uint64_t (***)(uint64_t))*a2;
    v24 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Channel.h", 200, (uint64_t)"casted", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v21 = a1;
  sub_20FD05CD8((uint64_t *)&v23, &v21, &v22);
  v3 = (unsigned __int8 *)(a1 + 32);
  do
    v4 = __ldaxr(v3);
  while (__stxr(1u, v3));
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v5)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        nanosleep(&__rqtp, 0);
      }
      ++v5;
      do
        v6 = __ldaxr(v3);
      while (__stxr(1u, v3));
    }
    while (v6);
  }
  v7 = *(unsigned int **)(a1 + 24);
  v8 = v22;
  *(_QWORD *)&v22 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v22 + 1) = v7;
  *(_OWORD *)(a1 + 16) = v8;
  atomic_store(0, (unsigned __int8 *)(a1 + 32));
  if (v7)
  {
    v9 = v7 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      v12 = v7 + 3;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
    }
  }
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FD05CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD05CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD05CD8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  result = operator new();
  v7 = (unsigned int *)result;
  *(_QWORD *)(result + 8) = 0x100000001;
  v8 = (unsigned int *)(result + 8);
  *(_QWORD *)result = &off_24CA05B50;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  v9 = *a1;
  v10 = a1[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *a2;
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v10;
  *(_QWORD *)(result + 48) = v13;
  if (!v9)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Channel.h", 276, (uint64_t)"this->storage", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  *((_BYTE *)v7 + 24) = 1;
  v14 = v7 + 3;
  *a3 = v7 + 8;
  a3[1] = v7;
  do
    v15 = __ldxr(v8);
  while (__stxr(v15 + 1, v8));
  do
  {
    v16 = __ldaxr(v8);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v8));
  if (!v17)
  {
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    do
    {
      v18 = __ldaxr(v14);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v14));
    if (!v19)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
  }
  return result;
}

void sub_20FD05E2C()
{
  __break(1u);
}

void sub_20FD05E94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20FD05EA8(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24CA05B50;
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 88);
    if (atomic_load(v2))
    {
      v4 = atomic_load(v2);
      if (*(_QWORD *)(a1 + 48) != v4
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 358, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    atomic_store(0, v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_20FD05F7C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24CA05B50;
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 88);
    if (atomic_load(v2))
    {
      v4 = atomic_load(v2);
      if (*(_QWORD *)(a1 + 48) != v4
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 358, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    atomic_store(0, v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FD06060(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 88);
    if (atomic_load(v2))
    {
      v4 = atomic_load(v2);
      if (*(_QWORD *)(a1 + 48) != v4
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 358, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    atomic_store(0, v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
}

uint64_t sub_20FD06124(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost6detail13sp_ms_deleterIN4cv3d3kit3dgn7ChannelINS4_7StorageEE13ActiveStorageEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost6detail13sp_ms_deleterIN4cv3d3kit3dgn7ChannelINS4_7StorageEE13ActiveStorageEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost6detail13sp_ms_deleterIN4cv3d3kit3dgn7ChannelINS4_7StorageEE13ActiveStorageEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost6detail13sp_ms_deleterIN4cv3d3kit3dgn7ChannelINS4_7StorageEE13ActiveStorageEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FD06190()
{
  return 0;
}

uint64_t sub_20FD06198(uint64_t a1)
{
  return a1 + 24;
}

unint64_t sub_20FD061A0(unint64_t a1, _QWORD *a2, uint64_t (****a3)(uint64_t))
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  unsigned int *v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type size;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v41;
  std::logic_error *exception;
  __int128 *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string v49;
  std::string __rqtp;
  __int128 v51;
  uint64_t (***v52)(uint64_t);
  std::__shared_weak_count *v53;

  *(_QWORD *)a1 = &off_24CA05B10;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (!*a3 || **a3 != &off_24CA06AA8)
  {
    v52 = 0;
    v53 = 0;
    goto LABEL_55;
  }
  v41 = (std::__shared_weak_count *)a3[1];
  v52 = *a3;
  v53 = v41;
  *a3 = 0;
  a3[1] = 0;
  if (!v52)
  {
LABEL_55:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&v49, "Given storage is of incompatible type for this channel, must be ");
    v43 = sub_20FD06624();
    v44 = *((char *)v43 + 23);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)v43;
    else
      v45 = *(const std::string::value_type **)v43;
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)v43 + 23);
    else
      v46 = *((_QWORD *)v43 + 1);
    v47 = std::string::append(&v49, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __rqtp.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__rqtp.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__rqtp);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v49.__r_.__value_.__r.__words[0] = a1;
  sub_20FD05CD8((uint64_t *)&v52, (uint64_t *)&v49, &v51);
  v7 = (unsigned __int8 *)(a1 + 32);
  do
    v8 = __ldaxr(v7);
  while (__stxr(1u, v7));
  if (v8)
  {
    v9 = 0;
    do
    {
      if (v9)
      {
        *(_OWORD *)&__rqtp.__r_.__value_.__l.__data_ = xmmword_2102DBC80;
        nanosleep((const timespec *)&__rqtp, 0);
      }
      ++v9;
      do
        v10 = __ldaxr(v7);
      while (__stxr(1u, v7));
    }
    while (v10);
  }
  v11 = *(unsigned int **)(a1 + 24);
  v12 = v51;
  *(_QWORD *)&v51 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v51 + 1) = v11;
  *(_OWORD *)(a1 + 16) = v12;
  atomic_store(0, (unsigned __int8 *)(a1 + 32));
  if (v11)
  {
    v13 = v11 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      v16 = v11 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
    }
  }
  do
    v19 = __ldaxr(v7);
  while (__stxr(1u, v7));
  if (v19)
  {
    v20 = 0;
    do
    {
      if (v20)
      {
        *(_OWORD *)&__rqtp.__r_.__value_.__l.__data_ = xmmword_2102DBC80;
        nanosleep((const timespec *)&__rqtp, 0);
      }
      ++v20;
      do
        v21 = __ldaxr(v7);
      while (__stxr(1u, v7));
    }
    while (v21);
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  v49.__r_.__value_.__r.__words[0] = v22;
  v49.__r_.__value_.__l.__size_ = v23;
  if (v23)
  {
    v24 = (unsigned int *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  atomic_store(0, v7);
  v26 = atomic_load((unint64_t *)(*(_QWORD *)v22 + 88));
  if (v26
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Channel.h", 150, (uint64_t)"!loaded->storage->Active()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v27 = (unint64_t *)(*(_QWORD *)v49.__r_.__value_.__l.__data_ + 88), (v28 = atomic_load(v27)) != 0)&& (v29 = atomic_load(v27), v29 != a1)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 348, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  atomic_store(a1, v27);
  size = v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v31 = (unsigned int *)(v49.__r_.__value_.__l.__size_ + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
      v34 = (unsigned int *)(size + 12);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 24))(size);
    }
  }
  v37 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return a1;
}

void sub_20FD06584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      sub_20E86665C(v27 - 88);
      sub_20E86665C(v24);
      sub_20FD05690(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

__int128 *sub_20FD06624()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54FF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54FF0))
    return &xmmword_254A54FD8;
  v2 = (char *)sub_20FD06700();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A54FD8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A54FE8 = *((_QWORD *)v2 + 2);
    xmmword_254A54FD8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A54FD8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54FF0);
  return &xmmword_254A54FD8;
}

void sub_20FD066E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54FF0);
  _Unwind_Resume(a1);
}

void *sub_20FD06700()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55010);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55010))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::Storage]", qword_254A54FF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A54FF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55010);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55030);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55030))
    return &unk_254A55018;
  sub_21023CD84((uint64_t)qword_254A54FF8, (uint64_t)&unk_254A55018);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55018, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55030);
  return &unk_254A55018;
}

void sub_20FD067F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55030);
  _Unwind_Resume(a1);
}

void sub_20FD06808(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55010);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD06820(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  sub_20FD068E8(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(unsigned int **)(a1 + 24);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int **)(a1 + 24);
    if (!v5)
      return a1;
  }
  v6 = v5 + 2;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v9 = v5 + 3;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
  }
  return a1;
}

void sub_20FD068E8(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  timespec __rqtp;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    sub_20FD02F5C(v2, a1);
    *(_QWORD *)(a1 + 8) = 0;
    v3 = (unsigned __int8 *)(a1 + 32);
    do
      v4 = __ldaxr(v3);
    while (__stxr(1u, v3));
    if (v4)
    {
      v5 = 0;
      do
      {
        if (v5)
        {
          __rqtp = (timespec)xmmword_2102DBC80;
          nanosleep(&__rqtp, 0);
        }
        ++v5;
        do
          v6 = __ldaxr(v3);
        while (__stxr(1u, v3));
      }
      while (v6);
    }
    v7 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    atomic_store(0, (unsigned __int8 *)(a1 + 32));
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
        v11 = v7 + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
      }
    }
  }
}

void sub_20FD069F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD06A14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20FD06820(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20FD06A48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3dgn7ChannelINS3_7StorageEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn7ChannelINS3_7StorageEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3dgn7ChannelINS3_7StorageEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn7ChannelINS3_7StorageEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

__n128 sub_20FD06ABC@<Q0>(char a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 *v7;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 16;
      result.n128_u64[0] = *(_QWORD *)"invalid argument";
      strcpy((char *)a2, "invalid argument");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"internal exception";
      strcpy((char *)a2, "internal exception");
      break;
    case 4:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_2102DB470;
      strcpy(v4, "diagnostics processing error");
      result.n128_u64[0] = *(_QWORD *)"processing error";
      break;
    case 5:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2102DBFB0;
      v7 = (__n128 *)"diagnostics server error";
      goto LABEL_10;
    case 6:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2102DBFB0;
      v7 = (__n128 *)"diagnostics client error";
LABEL_10:
      *(_OWORD *)(a2 + 8) = v6;
      result = *v7;
      *(__n128 *)v5 = *v7;
      v5[2] = v7[1].n128_u64[0];
      *((_BYTE *)v5 + 24) = 0;
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_20FD06C78(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x212BC6398);
}

const char *sub_20FD06C9C()
{
  return "cv3d.dgn";
}

uint64_t sub_20FD06CA8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20FD06CE8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20FD06D28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int *v9;
  std::string *v10;
  __int128 v11;
  std::string::size_type size;
  std::__fs::filesystem::path *v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string *v18;
  std::mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  BOOL v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  std::__fs::filesystem::path::__string_view v41;
  _BYTE *v42;
  std::basic_string_view<_CharT, _Traits>::size_type v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  __int128 v45;
  int64x2_t v46;
  int8x16_t v47;
  std::__fs::filesystem::path::__string_view v48;
  std::string *v49;
  std::basic_string_view<_CharT, _Traits>::size_type v50;
  std::basic_string_view<_CharT, _Traits>::size_type v51;
  std::string::size_type v52;
  int v53;
  std::string::size_type v54;
  __int128 *v55;
  uint64_t v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  BOOL v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  _OWORD *v74;
  __int128 *v75;
  unint64_t v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  void *v82;
  std::string::size_type v83;
  std::string *v84;
  std::__fs::filesystem::path::__string_view v85;
  std::string *v86;
  std::basic_string_view<_CharT, _Traits>::size_type v87;
  std::basic_string_view<_CharT, _Traits>::size_type v88;
  std::string::size_type v89;
  void *v90;
  int v91;
  std::string::size_type v92;
  __int128 *v93;
  void *v94;
  int v95;
  void *v96;
  int v97;
  _QWORD *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(_QWORD);
  uint64_t **v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t i;
  uint64_t v113;
  unint64_t j;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _BOOL4 v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::string *v140;
  unint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  int v157;
  uint64_t v158;
  char *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  void *v171;
  uint64_t v172;
  std::string::size_type v173;
  int v174;
  int v175;
  BOOL v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  std::__fs::filesystem::path v180;
  char v181;
  void *v182;
  char v183;
  void *v184;
  char v185;
  char v186;
  char v187;
  std::__fs::filesystem::path v188;
  char v189;
  void *v190;
  char v191;
  void *v192;
  char v193;
  char v194;
  char v195;
  uint64_t (**v196)();
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t (**v199)();
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__fs::filesystem::path v203;
  void *v204;
  char *v205;
  unint64_t v206;
  std::__fs::filesystem::path v207;
  __int128 v208;
  _BYTE v209[7];
  unsigned __int8 v210;
  std::string v211;
  _DWORD v212[2];
  __int128 v213;
  _BYTE v214[7];
  unsigned __int8 v215;
  std::string __p;
  std::__fs::filesystem::path v217;
  _DWORD v218[2];
  char *v219;
  _BYTE __dst[32];
  std::string *v221;
  std::string::size_type v222;
  void *v223[2];
  uint64_t v224;
  uint64_t v225;
  void *v226[2];
  uint64_t v227;
  char v228;
  char v229;
  void *__src[2];
  __int128 v231;
  std::string *v232;
  std::string::size_type v233;
  void *v234[2];
  uint64_t v235;
  uint64_t v236;
  void *v237[2];
  uint64_t v238;
  char v239;
  char v240;
  char v241;
  std::string pn;
  int v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  v204 = 0;
  v205 = 0;
  v206 = 0;
  __src[0] = "diagnostics_";
  __src[1] = (void *)12;
  v9 = sub_20E87C634();
  if (*((_BYTE *)v9 + 32))
  {
    if (*((char *)v9 + 31) < 0)
      sub_20E860C04(&v217, *((void **)v9 + 1), *((_QWORD *)v9 + 2));
    else
      v217 = *(std::__fs::filesystem::path *)(v9 + 2);
  }
  else
  {
    sub_20E8A9280(v9);
    v10 = std::string::insert((std::string *)__dst, 0, "process_", 8uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v217.__pn_.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__pn_.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  size = HIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]);
  v13 = &v217;
  if ((v217.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v217.__pn_.__r_.__value_.__l.__size_;
    v13 = (std::__fs::filesystem::path *)v217.__pn_.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)&v231 = v13;
  *((_QWORD *)&v231 + 1) = size;
  LODWORD(size) = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    sub_210237040("%020llu", (std::string *)__dst, *(_QWORD *)a2);
    v14 = std::string::insert((std::string *)__dst, 0, "_", 1uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    LODWORD(size) = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
  }
  size = size;
  p_p = &__p;
  if ((size & 0x80u) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v232 = p_p;
  v233 = size;
  v234[0] = ".txt";
  v234[1] = (void *)4;
  sub_20E8778D4((uint64_t)__src, (uint64_t)&v235, "", 0, &pn);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_21:
    operator delete(v217.__pn_.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_22;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
LABEL_18:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
LABEL_19:
    *(_OWORD *)__src = *(_OWORD *)(a1 + 8);
    *(_QWORD *)&v231 = *(_QWORD *)(a1 + 24);
    goto LABEL_23;
  }
LABEL_22:
  sub_20E860C04(__src, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
LABEL_23:
  memset(__dst, 0, 24);
  v17 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &pn;
  else
    v18 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = pn.__r_.__value_.__l.__size_;
  sub_20E8A9678((std::string *)__dst, v18, (std::string *)((char *)v18 + v17));
  if (SBYTE7(v231) < 0)
  {
    sub_20E860C04(&v203, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)&v203.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)__src;
    v203.__pn_.__r_.__value_.__r.__words[2] = v231;
  }
  sub_20E8A944C((uint64_t)&v203, (std::__fs::filesystem::path *)__dst);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((SBYTE7(v231) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_41;
    }
  }
  else if ((SBYTE7(v231) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__src[0]);
  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    LOBYTE(__src[0]) = 0;
    v241 = 0;
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_35;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(pn.__r_.__value_.__l.__data_);
  LOBYTE(__src[0]) = 0;
  v241 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
LABEL_35:
    v19 = *(std::mutex **)(a1 + 48);
    v20 = operator new();
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = 1;
    std::mutex::lock(v19);
    v202 = v20;
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_36;
    goto LABEL_43;
  }
LABEL_42:
  v202 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
LABEL_36:
    sub_210224144(&v203, 0x30u, *(_QWORD *)(a1 + 40), &v199);
    v172 = a4;
    if (*(_BYTE *)(a3 + 8))
      goto LABEL_37;
LABEL_44:
    v23 = 0;
    v24 = *(_QWORD **)(a2 + 24);
    v177 = (_QWORD *)(a2 + 32);
    v178 = a2;
    if (v24 == (_QWORD *)(a2 + 32))
      goto LABEL_380;
    goto LABEL_45;
  }
LABEL_43:
  v200 = 0;
  v201 = 0;
  v199 = &off_24CA1F288;
  v172 = a4;
  if (!*(_BYTE *)(a3 + 8))
    goto LABEL_44;
LABEL_37:
  v21 = sub_20FD08BFC(a2);
  v23 = COERCE_UNSIGNED_INT((float)*(unint64_t *)a3 / (float)(unint64_t)(v21 + v22)) | 0x100000000;
  v24 = *(_QWORD **)(a2 + 24);
  v177 = (_QWORD *)(a2 + 32);
  v178 = a2;
  if (v24 == (_QWORD *)(a2 + 32))
    goto LABEL_380;
LABEL_45:
  v25 = *(float *)&v23;
  v26 = (v23 & 0x100000000) == 0;
  if (v25 > 1.0)
    v26 = 1;
  v176 = v26;
  v179 = a1;
  while (2)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v196 = &off_24CA1F288;
      v197 = v200;
      v198 = v201;
      if (v201)
      {
        p_shared_owners = (unint64_t *)&v201->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      goto LABEL_192;
    }
    v29 = *((unsigned __int8 *)v24 + 55);
    if ((v29 & 0x80u) != 0)
      v29 = v24[5];
    if (!v29)
    {
      if (SHIBYTE(v203.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20E860C04(&v207, v203.__pn_.__r_.__value_.__l.__data_, v203.__pn_.__r_.__value_.__l.__size_);
        goto LABEL_186;
      }
      v207 = v203;
      goto LABEL_187;
    }
    v30 = atomic_load((unsigned __int8 *)&qword_254A6C148);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C148))
    {
      sub_20E8610C0(&xmmword_254A6C158, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C158, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C148);
    }
    v31 = atomic_load((unsigned __int8 *)&qword_254A6C150);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C150))
    {
      if (byte_254A6C16F < 0)
      {
        sub_20E860C04(&qword_254A6C170, (void *)xmmword_254A6C158, *((unint64_t *)&xmmword_254A6C158 + 1));
      }
      else
      {
        *(_OWORD *)&qword_254A6C170 = xmmword_254A6C158;
        unk_254A6C180 = unk_254A6C168;
      }
      __cxa_atexit((void (*)(void *))sub_20FD08FAC, &qword_254A6C170, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C150);
    }
    v32 = *((char *)v24 + 55);
    if (v32 >= 0)
      v33 = (char *)(v24 + 4);
    else
      v33 = (char *)v24[4];
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)v24 + 55);
    else
      v34 = v24[5];
    if (byte_254A6C16F >= 0)
      v35 = &xmmword_254A6C158;
    else
      v35 = (__int128 *)xmmword_254A6C158;
    if (byte_254A6C16F >= 0)
      v36 = byte_254A6C16F;
    else
      v36 = *((_QWORD *)&xmmword_254A6C158 + 1);
    if (v34)
    {
      v37 = v33;
      if (v36)
      {
        while (memchr(v35, *v37, v36))
        {
          ++v37;
          if (!--v34)
            goto LABEL_75;
        }
      }
      v38 = v37 - v33;
    }
    else
    {
LABEL_75:
      v38 = -1;
    }
    v41 = std::__fs::filesystem::path::__parent_path(&v203);
    if (v41.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v41.__size_ >= 0x17)
    {
      v43 = (v41.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41.__size_ | 7) != 0x17)
        v43 = v41.__size_ | 7;
      v44 = v43 + 1;
      v42 = operator new(v43 + 1);
      *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
      *(_QWORD *)__dst = v42;
      *(_QWORD *)&__dst[8] = v41.__size_;
      goto LABEL_88;
    }
    __dst[23] = v41.__size_;
    v42 = __dst;
    if (v41.__size_)
LABEL_88:
      memmove(v42, v41.__data_, v41.__size_);
    v42[v41.__size_] = 0;
    v45 = *(_OWORD *)__dst;
    v218[0] = *(_DWORD *)&__dst[16];
    *(_DWORD *)((char *)v218 + 3) = *(_DWORD *)&__dst[19];
    v175 = __dst[23];
    v48 = std::__fs::filesystem::path::__stem(&v203);
    if (v48.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v48.__size_ >= 0x17)
    {
      v50 = (v48.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48.__size_ | 7) != 0x17)
        v50 = v48.__size_ | 7;
      v51 = v50 + 1;
      v49 = (std::string *)operator new(v50 + 1);
      pn.__r_.__value_.__l.__size_ = v48.__size_;
      pn.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    }
    else
    {
      *((_BYTE *)&pn.__r_.__value_.__s + 23) = v48.__size_;
      v49 = &pn;
      if (!v48.__size_)
        goto LABEL_97;
    }
    memmove(v49, v48.__data_, v48.__size_);
LABEL_97:
    v49->__r_.__value_.__s.__data_[v48.__size_] = 0;
    v52 = pn.__r_.__value_.__l.__size_;
    v212[0] = pn.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v212 + 3) = *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3);
    v53 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
    v173 = pn.__r_.__value_.__r.__words[0];
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v213, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
      v54 = v215;
      v52 = *((_QWORD *)&v213 + 1);
      v55 = (__int128 *)v213;
    }
    else
    {
      v54 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
      v213 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
      *(_DWORD *)v214 = v212[0];
      *(_DWORD *)&v214[3] = *(_DWORD *)((char *)v212 + 3);
      v215 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
      v55 = (__int128 *)pn.__r_.__value_.__r.__words[0];
    }
    if ((v54 & 0x80u) != 0)
      v54 = v52;
    else
      v55 = &v213;
    *(_QWORD *)__dst = v55;
    *(_QWORD *)&__dst[8] = v54;
    *(_QWORD *)&__dst[16] = "_";
    *(_QWORD *)&__dst[24] = 1;
    v174 = v53;
    if (v38 == -1)
    {
      if (*((char *)v24 + 55) < 0)
        sub_20E860C04(&v211, (void *)v24[4], v24[5]);
      else
        v211 = *(std::string *)(v24 + 4);
      goto LABEL_159;
    }
    v56 = *((unsigned __int8 *)v24 + 55);
    v57 = (char)v56;
    v58 = (char *)v24[4];
    if ((v56 & 0x80u) != 0)
      v56 = v24[5];
    memset(&pn, 0, sizeof(pn));
    v59 = 0;
    if (!v56)
    {
      v79 = 0;
      goto LABEL_149;
    }
    if (v57 >= 0)
      v60 = (char *)(v24 + 4);
    else
      v60 = v58;
    *(_QWORD *)&v208 = v60;
    v219 = v60;
    v61 = &v60[v56];
    do
    {
      if (v60 == v61)
        goto LABEL_111;
      v63 = byte_254A6C187;
      if (byte_254A6C187 >= 0)
        v64 = &qword_254A6C170;
      else
        v64 = (uint64_t *)qword_254A6C170;
      if (byte_254A6C187 < 0)
        v63 = *(_QWORD *)algn_254A6C178;
      if (!v63)
      {
LABEL_111:
        v219 = v60;
        goto LABEL_112;
      }
      v65 = v60;
      do
      {
        v66 = v63;
        v67 = v64;
        while (*(unsigned __int8 *)v67 != *v65)
        {
          v67 = (uint64_t *)((char *)v67 + 1);
          if (!--v66)
            goto LABEL_127;
        }
        ++v65;
      }
      while (v65 != v61);
      v65 = v61;
LABEL_127:
      v219 = v65;
      v68 = v65 - v60;
      if (v65 != v60)
      {
        if ((unint64_t)v59 >= pn.__r_.__value_.__r.__words[2])
        {
          v59 = sub_20E9E5318((void **)&pn.__r_.__value_.__l.__data_, (uint64_t *)&v208, &v219);
LABEL_144:
          pn.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
          v60 = v219;
          goto LABEL_112;
        }
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v68 > 0x16)
        {
          v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v70 = v68 | 7;
          v71 = v70 + 1;
          v69 = (char *)operator new(v70 + 1);
          *((_QWORD *)v59 + 1) = v68;
          *((_QWORD *)v59 + 2) = v71 | 0x8000000000000000;
          *(_QWORD *)v59 = v69;
          if (v68 >= 0x20 && (unint64_t)(v69 - v60) >= 0x20)
          {
            v72 = &v60[v68 & 0xFFFFFFFFFFFFFFE0];
            v73 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
            v74 = v69 + 16;
            v75 = (__int128 *)(v60 + 16);
            v76 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v77 = *v75;
              *(v74 - 1) = *(v75 - 1);
              *v74 = v77;
              v74 += 2;
              v75 += 2;
              v76 -= 32;
            }
            while (v76);
            if (v68 == (v68 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_143;
            goto LABEL_142;
          }
        }
        else
        {
          v59[23] = v68;
          v69 = v59;
        }
        v72 = v60;
        v73 = v69;
        do
        {
LABEL_142:
          v78 = *v72++;
          *v73++ = v78;
        }
        while (v72 != v65);
LABEL_143:
        *v73 = 0;
        v59 += 24;
        goto LABEL_144;
      }
LABEL_112:
      *(_QWORD *)&v208 = v60 + 1;
      v62 = v60++ == v61;
    }
    while (!v62);
    v79 = pn.__r_.__value_.__r.__words[0];
LABEL_149:
    sub_20E878290(v79, (uint64_t)v59, "_", 1uLL, &v211, v46, v47);
    v80 = pn.__r_.__value_.__r.__words[0];
    if (pn.__r_.__value_.__r.__words[0])
    {
      v81 = pn.__r_.__value_.__l.__size_;
      v82 = (void *)pn.__r_.__value_.__r.__words[0];
      if (pn.__r_.__value_.__l.__size_ != pn.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v81 - 1) < 0)
            operator delete(*(void **)(v81 - 24));
          v81 -= 24;
        }
        while (v81 != v80);
        v82 = (void *)pn.__r_.__value_.__r.__words[0];
      }
      pn.__r_.__value_.__l.__size_ = v80;
      operator delete(v82);
    }
LABEL_159:
    v83 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
    v84 = &v211;
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v83 = v211.__r_.__value_.__l.__size_;
      v84 = (std::string *)v211.__r_.__value_.__r.__words[0];
    }
    v221 = v84;
    v222 = v83;
    v85 = std::__fs::filesystem::path::__extension(&v203);
    if (v85.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v85.__size_ >= 0x17)
    {
      v87 = (v85.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v85.__size_ | 7) != 0x17)
        v87 = v85.__size_ | 7;
      v88 = v87 + 1;
      v86 = (std::string *)operator new(v87 + 1);
      pn.__r_.__value_.__l.__size_ = v85.__size_;
      pn.__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
      a1 = v179;
LABEL_168:
      memmove(v86, v85.__data_, v85.__size_);
      goto LABEL_169;
    }
    *((_BYTE *)&pn.__r_.__value_.__s + 23) = v85.__size_;
    v86 = &pn;
    a1 = v179;
    if (v85.__size_)
      goto LABEL_168;
LABEL_169:
    v86->__r_.__value_.__s.__data_[v85.__size_] = 0;
    v89 = pn.__r_.__value_.__l.__size_;
    v90 = (void *)pn.__r_.__value_.__r.__words[0];
    LODWORD(v219) = pn.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v219 + 3) = *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3);
    v91 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      v94 = (void *)v45;
      v95 = v175;
      sub_20E860C04(&v208, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
      v92 = v210;
      v89 = *((_QWORD *)&v208 + 1);
      v93 = (__int128 *)v208;
    }
    else
    {
      v92 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
      v208 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
      *(_DWORD *)v209 = (_DWORD)v219;
      *(_DWORD *)&v209[3] = *(_DWORD *)((char *)&v219 + 3);
      v210 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
      v93 = (__int128 *)pn.__r_.__value_.__r.__words[0];
      v94 = (void *)v45;
      v95 = v175;
    }
    if ((v92 & 0x80u) != 0)
      v92 = v89;
    else
      v93 = &v208;
    v223[0] = v93;
    v223[1] = (void *)v92;
    sub_20E8778D4((uint64_t)__dst, (uint64_t)&v224, "", 0, &__p);
    v217.__pn_ = __p;
    memset(&__p, 0, sizeof(__p));
    if (v95 < 0)
    {
      sub_20E860C04(&v207, v94, *((unint64_t *)&v45 + 1));
    }
    else
    {
      v207.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
      v207.__pn_.__r_.__value_.__l.__size_ = *((_QWORD *)&v45 + 1);
      LODWORD(v207.__pn_.__r_.__value_.__r.__words[2]) = v218[0];
      *(_DWORD *)((char *)&v207.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v218 + 3);
      *((_BYTE *)&v207.__pn_.__r_.__value_.__s + 23) = v95;
    }
    sub_20E8A944C((uint64_t)&v207, &v217);
    if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v217.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_249;
LABEL_180:
      if (((char)v210 & 0x80000000) == 0)
        goto LABEL_181;
LABEL_250:
      operator delete((void *)v208);
      if (v91 < 0)
        goto LABEL_251;
LABEL_182:
      if ((SHIBYTE(v211.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_183;
LABEL_252:
      operator delete(v211.__r_.__value_.__l.__data_);
      v96 = (void *)v173;
      v97 = v174;
      if ((char)v215 < 0)
        goto LABEL_253;
LABEL_184:
      if ((v97 & 0x80000000) == 0)
        goto LABEL_185;
LABEL_254:
      operator delete(v96);
      if (v95 < 0)
        goto LABEL_255;
LABEL_186:
      if ((SHIBYTE(v207.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_187;
LABEL_78:
      sub_20E860C04(__dst, v207.__pn_.__r_.__value_.__l.__data_, v207.__pn_.__r_.__value_.__l.__size_);
      v39 = v205;
      if ((unint64_t)v205 < v206)
        goto LABEL_79;
LABEL_188:
      v205 = sub_20E8780F0(&v204, (uint64_t)__dst);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    else
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_180;
LABEL_249:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((char)v210 < 0)
        goto LABEL_250;
LABEL_181:
      if ((v91 & 0x80000000) == 0)
        goto LABEL_182;
LABEL_251:
      operator delete(v90);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_252;
LABEL_183:
      v96 = (void *)v173;
      v97 = v174;
      if (((char)v215 & 0x80000000) == 0)
        goto LABEL_184;
LABEL_253:
      operator delete((void *)v213);
      if (v97 < 0)
        goto LABEL_254;
LABEL_185:
      if ((v95 & 0x80000000) == 0)
        goto LABEL_186;
LABEL_255:
      operator delete(v94);
      if (SHIBYTE(v207.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_78;
LABEL_187:
      *(std::__fs::filesystem::path *)__dst = v207;
      v39 = v205;
      if ((unint64_t)v205 >= v206)
        goto LABEL_188;
LABEL_79:
      v40 = *(_OWORD *)__dst;
      *((_QWORD *)v39 + 2) = *(_QWORD *)&__dst[16];
      *(_OWORD *)v39 = v40;
      v205 = v39 + 24;
    }
    sub_210224144(&v207, 0x30u, *(_QWORD *)(a1 + 40), &v196);
    if (SHIBYTE(v207.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__pn_.__r_.__value_.__l.__data_);
LABEL_192:
    v98 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 16))(v197);
    if (!*(_DWORD *)((char *)v98 + *(_QWORD *)(*v98 - 24) + 32))
    {
      v99 = *(unsigned __int8 *)(v178 + 16);
      v100 = *(_QWORD *)v178;
      if (*(_BYTE *)(v178 + 16))
        v4 = *(_QWORD *)v178;
      else
        v4 &= 0xFFFFFFFFFFFFFF00;
      v101 = v24[7];
      v102 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v101 + 40);
      if (v176)
      {
        v103 = (uint64_t **)v102(v24[7]);
        v105 = *v103;
        v104 = v103[1];
        if (v99)
        {
          v106 = *v103;
          if (v105 != v104)
          {
            while (*v106 <= v4)
            {
              v106 += 4;
              if (v106 == v104)
                goto LABEL_201;
            }
          }
        }
        else
        {
LABEL_201:
          v106 = v103[1];
        }
        goto LABEL_267;
      }
      v107 = (uint64_t *)v102(v24[7]);
      v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
      v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101);
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101);
      v111 = 1;
      if (v110 >= 0xA)
      {
        for (i = 10; i <= v110; i *= 10)
          ++v111;
      }
      v113 = 1;
      if (v109 >= 0xA)
      {
        for (j = 10; j <= v109; j *= 10)
          ++v113;
      }
      if (v99)
      {
        v115 = 5;
        if (v100 >= 0xA)
        {
          v116 = 10;
          do
          {
            v116 *= 10;
            ++v115;
          }
          while (v116 <= v4);
        }
      }
      else
      {
        v115 = 0;
      }
      v117 = *(unsigned __int8 *)(v108 + 23);
      if ((v117 & 0x80u) != 0)
        v117 = *(_QWORD *)(v108 + 8);
      v118 = 27;
      if (v109 != 1)
        v118 = 28;
      if (v110)
        ++v118;
      v120 = *v107;
      v119 = (uint64_t *)v107[1];
      v121 = 0;
      if (v99)
      {
        if ((uint64_t *)*v107 != v119)
        {
          v122 = (uint64_t *)(v120 + 16);
          while (1)
          {
            v124 = v122 - 2;
            if (*(v122 - 2) > v4)
              break;
            if (*((char *)v122 + 15) < 0)
            {
              v123 = *v122;
              v122 += 4;
              v121 += v123 + 1;
              if (v124 + 4 == v119)
                break;
            }
            else
            {
              v121 += *((unsigned __int8 *)v122 + 15) + 1;
              v122 += 4;
              if (v124 + 4 == v119)
                break;
            }
          }
        }
      }
      else if ((uint64_t *)*v107 != v119)
      {
        do
        {
          while (*(char *)(v120 + 31) < 0)
          {
            v121 += *(_QWORD *)(v120 + 16) + 1;
            v120 += 32;
            if ((uint64_t *)v120 == v119)
              goto LABEL_233;
          }
          v121 += *(unsigned __int8 *)(v120 + 31) + 1;
          v120 += 32;
        }
        while ((uint64_t *)v120 != v119);
      }
LABEL_233:
      v125 = v118 + v117 + v111 + v113 + v115 + v121;
      v126 = vcvtas_u32_f32(v25 * (float)v125);
      v127 = v121 - (v125 - v126);
      if (v121 >= v125 - v126)
      {
        v128 = 1;
      }
      else
      {
        v127 = v126;
        v128 = v125 == v126;
      }
      if (v125 == v126)
        v129 = v121;
      else
        v129 = v127;
      v130 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 40))(v101);
      v105 = (uint64_t *)*v130;
      if (v129 >= v121)
      {
        v106 = (uint64_t *)v130[1];
        if (v128)
          goto LABEL_267;
      }
      else
      {
        v106 = (uint64_t *)v130[1];
        v131 = ((char *)v106 - (char *)v105) >> 5;
        if (v99)
        {
          v132 = 4 * v131;
          while (v132 * 8)
          {
            v133 = v105[v132 - 4];
            v132 -= 4;
            if (v133 > v4)
            {
              v134 = (uint64_t)&v105[v132 + 4];
              goto LABEL_258;
            }
          }
          v134 = *v130;
        }
        else
        {
          v134 = (uint64_t)v105 + (((char *)v106 - (char *)v105) & 0xFFFFFFFFFFFFFFE0);
        }
LABEL_258:
        v135 = 0;
        v136 = 0;
        while (1)
        {
          v137 = v136;
          if ((uint64_t *)v134 == v105)
            break;
          if (*(char *)(v134 - 1) < 0)
          {
            v135 += *(_QWORD *)(v134 - 16) + 1;
            ++v136;
            v134 -= 32;
            if (v135 > v129)
              break;
          }
          else
          {
            v135 += *(unsigned __int8 *)(v134 - 1) + 1;
            ++v136;
            v134 -= 32;
            if (v135 > v129)
              break;
          }
        }
        if (v131 >= v137)
          v138 = v137;
        else
          v138 = ((char *)v106 - (char *)v105) >> 5;
        v105 += 4 * (v131 - v138);
        if (v128)
        {
LABEL_267:
          v139 = v24[7];
          v140 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 16))(v139);
          v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139);
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139);
          sub_20FD092A4(v140, v141, ((char *)v106 - (char *)v105) >> 5, v4, v99, "\n", 1uLL);
          if (__dst[23] >= 0)
            v142 = __dst;
          else
            v142 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v143 = __dst[23];
          else
            v143 = *(_QWORD *)&__dst[8];
          sub_20E86A980(v98, (uint64_t)v142, v143);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
      }
      while (v105 != v106)
      {
        v144 = *((char *)v105 + 31);
        if (v144 >= 0)
          v145 = (uint64_t)(v105 + 1);
        else
          v145 = v105[1];
        if (v144 >= 0)
          v146 = *((unsigned __int8 *)v105 + 31);
        else
          v146 = v105[2];
        v147 = sub_20E86A980(v98, v145, v146);
        sub_20E86A980(v147, (uint64_t)"\n", 1);
        v105 += 4;
      }
      if (!*(_DWORD *)((char *)v98 + *(_QWORD *)(*v98 - 24) + 32))
      {
        v148 = v198;
        a1 = v179;
        if (!v198)
          goto LABEL_288;
        v149 = (unint64_t *)&v198->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
          v151 = (_QWORD *)v24[1];
          if (v151)
            goto LABEL_289;
        }
        else
        {
LABEL_288:
          v151 = (_QWORD *)v24[1];
          if (v151)
          {
            do
            {
LABEL_289:
              v152 = v151;
              v151 = (_QWORD *)*v151;
            }
            while (v151);
            goto LABEL_48;
          }
        }
        do
        {
          v152 = (_QWORD *)v24[2];
          v62 = *v152 == (_QWORD)v24;
          v24 = v152;
        }
        while (!v62);
LABEL_48:
        v24 = v152;
        if (v152 == v177)
          goto LABEL_380;
        continue;
      }
      v243 = 0;
      sub_20EA7719C(&pn, "failed to write to diagnostics output file: ");
      a1 = v179;
      sub_20FD08FEC((uint64_t)&pn);
      if (v243 == -1)
        sub_20E877AB8();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
      ((void (*)(std::__fs::filesystem::path *__return_ptr, std::string *, std::string *))off_24CA05D00[v243])(&v217, &__p, &pn);
      if (v243 != -1)
        ((void (*)(std::string *, std::string *))off_24CA05CE8[v243])(&__p, &pn);
      if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v180, v217.__pn_.__r_.__value_.__l.__data_, v217.__pn_.__r_.__value_.__l.__size_);
      else
        v180 = v217;
      v181 = 1;
      LOBYTE(v182) = 0;
      v186 = 0;
      v187 = 1;
      sub_20EA5B348((uint64_t)__dst, 4u, (__int128 *)&v180);
      *(_OWORD *)__src = *(_OWORD *)__dst;
      if (v241)
      {
        sub_20FD03AA4((uint64_t)&v231, (__int128 *)&__dst[16]);
        if (!v229)
          goto LABEL_365;
LABEL_357:
        if (v228)
        {
          if (SHIBYTE(v227) < 0)
            operator delete(v226[0]);
          if (SHIBYTE(v224) < 0)
            operator delete(v223[0]);
        }
        if ((_BYTE)v222 && SHIBYTE(v221) < 0)
          operator delete(*(void **)&__dst[16]);
      }
      else
      {
        LOBYTE(v231) = 0;
        v240 = 0;
        if (v229)
        {
          LOBYTE(v233) = 0;
          if ((_BYTE)v222)
          {
            v231 = *(_OWORD *)&__dst[16];
            v232 = v221;
            *(_QWORD *)&__dst[24] = 0;
            v221 = 0;
            *(_QWORD *)&__dst[16] = 0;
            LOBYTE(v233) = 1;
          }
          LOBYTE(v234[0]) = 0;
          v239 = 0;
          if (v228)
          {
            v235 = v224;
            *(_OWORD *)v234 = *(_OWORD *)v223;
            v223[0] = 0;
            v223[1] = 0;
            v236 = v225;
            *(_OWORD *)v237 = *(_OWORD *)v226;
            v238 = v227;
            v224 = 0;
            v226[0] = 0;
            v226[1] = 0;
            v227 = 0;
            v239 = 1;
          }
          v240 = 1;
        }
        v241 = 1;
        if (v229)
          goto LABEL_357;
      }
LABEL_365:
      if (v187)
      {
        if (v186)
        {
          if (v185 < 0)
            operator delete(v184);
          if (v183 < 0)
            operator delete(v182);
        }
        if (v181 && SHIBYTE(v180.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v180.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__pn_.__r_.__value_.__l.__data_);
      v153 = v198;
      if (v198)
      {
        v156 = (unint64_t *)&v198->__shared_owners_;
        do
          v155 = __ldaxr(v156);
        while (__stlxr(v155 - 1, v156));
        goto LABEL_379;
      }
      goto LABEL_380;
    }
    break;
  }
  v243 = 0;
  sub_20EAA4AA0(&pn, "failed to open diagnostics output file: ");
  sub_20FD08FEC((uint64_t)&pn);
  if (v243 == -1)
    sub_20E877AB8();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
  ((void (*)(std::__fs::filesystem::path *__return_ptr, std::string *, std::string *))off_24CA05D00[v243])(&v217, &__p, &pn);
  if (v243 != -1)
    ((void (*)(std::string *, std::string *))off_24CA05CE8[v243])(&__p, &pn);
  if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v188, v217.__pn_.__r_.__value_.__l.__data_, v217.__pn_.__r_.__value_.__l.__size_);
  else
    v188 = v217;
  v189 = 1;
  LOBYTE(v190) = 0;
  v194 = 0;
  v195 = 1;
  sub_20EA5B348((uint64_t)__dst, 4u, (__int128 *)&v188);
  *(_OWORD *)__src = *(_OWORD *)__dst;
  if (!v241)
  {
    LOBYTE(v231) = 0;
    v240 = 0;
    if (v229)
    {
      LOBYTE(v233) = 0;
      if ((_BYTE)v222)
      {
        v231 = *(_OWORD *)&__dst[16];
        v232 = v221;
        *(_QWORD *)&__dst[24] = 0;
        v221 = 0;
        *(_QWORD *)&__dst[16] = 0;
        LOBYTE(v233) = 1;
      }
      LOBYTE(v234[0]) = 0;
      v239 = 0;
      if (v228)
      {
        v235 = v224;
        *(_OWORD *)v234 = *(_OWORD *)v223;
        v223[0] = 0;
        v223[1] = 0;
        v236 = v225;
        *(_OWORD *)v237 = *(_OWORD *)v226;
        v238 = v227;
        v224 = 0;
        v226[0] = 0;
        v226[1] = 0;
        v227 = 0;
        v239 = 1;
      }
      v240 = 1;
    }
    v241 = 1;
    if (!v229)
      goto LABEL_331;
    goto LABEL_323;
  }
  sub_20FD03AA4((uint64_t)&v231, (__int128 *)&__dst[16]);
  if (v229)
  {
LABEL_323:
    if (v228)
    {
      if (SHIBYTE(v227) < 0)
        operator delete(v226[0]);
      if (SHIBYTE(v224) < 0)
        operator delete(v223[0]);
    }
    if ((_BYTE)v222 && SHIBYTE(v221) < 0)
      operator delete(*(void **)&__dst[16]);
  }
LABEL_331:
  if (v195)
  {
    if (v194)
    {
      if (v193 < 0)
        operator delete(v192);
      if (v191 < 0)
        operator delete(v190);
    }
    if (v189 && SHIBYTE(v188.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v188.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__pn_.__r_.__value_.__l.__data_);
  v153 = v198;
  if (v198)
  {
    v154 = (unint64_t *)&v198->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
LABEL_379:
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
      v157 = *(unsigned __int8 *)(a1 + 32);
      if (!*(_BYTE *)(a1 + 32))
        goto LABEL_386;
LABEL_381:
      v158 = v172;
      if (SHIBYTE(v203.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&pn, v203.__pn_.__r_.__value_.__l.__data_, v203.__pn_.__r_.__value_.__l.__size_);
      else
        pn = v203.__pn_;
      sub_20E877C80(__dst, (uint64_t)&pn, 1uLL);
      *(_OWORD *)v172 = *(_OWORD *)__dst;
      *(_QWORD *)(v172 + 16) = *(_QWORD *)&__dst[16];
      memset(__dst, 0, 24);
LABEL_388:
      *(_BYTE *)(v158 + 32) = 0;
      v160 = (_OWORD *)(v158 + 32);
      *(_BYTE *)(v158 + 24) = 1;
      *(_BYTE *)(v158 + 152) = 0;
      if (!v241)
        goto LABEL_396;
LABEL_389:
      *v160 = *(_OWORD *)__src;
      *(_BYTE *)(v158 + 48) = 0;
      *(_BYTE *)(v158 + 144) = 0;
      if (v240)
      {
        *(_BYTE *)(v158 + 72) = 0;
        if ((_BYTE)v233)
        {
          *(_OWORD *)(v158 + 48) = v231;
          *(_QWORD *)(v158 + 64) = v232;
          v232 = 0;
          v231 = 0uLL;
          *(_BYTE *)(v158 + 72) = 1;
        }
        *(_BYTE *)(v158 + 80) = 0;
        *(_BYTE *)(v158 + 136) = 0;
        if (v239)
        {
          v161 = v236;
          *(_QWORD *)(v158 + 96) = v235;
          *(_OWORD *)(v158 + 80) = *(_OWORD *)v234;
          v234[0] = 0;
          v234[1] = 0;
          *(_QWORD *)(v158 + 104) = v161;
          *(_OWORD *)(v158 + 112) = *(_OWORD *)v237;
          *(_QWORD *)(v158 + 128) = v238;
          v235 = 0;
          v237[0] = 0;
          v237[1] = 0;
          v238 = 0;
          *(_BYTE *)(v158 + 136) = 1;
        }
        *(_BYTE *)(v158 + 144) = 1;
      }
      *(_BYTE *)(v158 + 152) = 1;
      goto LABEL_396;
    }
  }
LABEL_380:
  v157 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
    goto LABEL_381;
LABEL_386:
  v159 = v205;
  v158 = v172;
  if (v204 != v205)
  {
    *(_QWORD *)v172 = v204;
    *(_QWORD *)(v172 + 8) = v159;
    *(_QWORD *)(v172 + 16) = v206;
    v205 = 0;
    v206 = 0;
    v204 = 0;
    goto LABEL_388;
  }
  *(_BYTE *)v172 = 0;
  *(_BYTE *)(v172 + 32) = 0;
  v160 = (_OWORD *)(v172 + 32);
  *(_BYTE *)(v172 + 24) = 0;
  *(_BYTE *)(v172 + 152) = 0;
  if (v241)
    goto LABEL_389;
LABEL_396:
  if (v157)
  {
    v162 = *(_QWORD *)__dst;
    if (*(_QWORD *)__dst)
    {
      v163 = *(_QWORD *)&__dst[8];
      v164 = *(void **)__dst;
      if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      {
        do
        {
          if (*(char *)(v163 - 1) < 0)
            operator delete(*(void **)(v163 - 24));
          v163 -= 24;
        }
        while (v163 != v162);
        v164 = *(void **)__dst;
      }
      *(_QWORD *)&__dst[8] = v162;
      operator delete(v164);
    }
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  v165 = v201;
  if (v201)
  {
    v166 = (unint64_t *)&v201->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v202;
  if (v202)
  {
    if (*(_BYTE *)(v202 + 8))
      std::mutex::unlock(*(std::mutex **)v202);
    MEMORY[0x212BC6398](v168, 0x1020C405F07FB98);
  }
  if (!v241 || !v240)
    goto LABEL_424;
  if (!v239)
    goto LABEL_421;
  if ((SHIBYTE(v238) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v235) & 0x80000000) == 0)
      goto LABEL_421;
LABEL_438:
    operator delete(v234[0]);
    if (!(_BYTE)v233)
      goto LABEL_424;
LABEL_422:
    if (SHIBYTE(v232) < 0)
      operator delete((void *)v231);
    goto LABEL_424;
  }
  operator delete(v237[0]);
  if (SHIBYTE(v235) < 0)
    goto LABEL_438;
LABEL_421:
  if ((_BYTE)v233)
    goto LABEL_422;
LABEL_424:
  if (SHIBYTE(v203.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v203.__pn_.__r_.__value_.__l.__data_);
  v169 = (char *)v204;
  if (v204)
  {
    v170 = v205;
    v171 = v204;
    if (v205 != v204)
    {
      do
      {
        if (*(v170 - 1) < 0)
          operator delete(*((void **)v170 - 3));
        v170 -= 24;
      }
      while (v170 != v169);
      v171 = v204;
    }
    v205 = v169;
    operator delete(v171);
  }
}

void sub_20FD0878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;

  __cxa_guard_abort(&qword_254A6C150);
  sub_21022EBB8((uint64_t)&a55);
  sub_20FD08B8C(&a58);
  sub_20FD02EC8((uint64_t)&STACK[0x300]);
  if (a64 < 0)
    operator delete(__p);
  sub_20E89FB98(&a65);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD08B8C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 8))
      std::mutex::unlock(*(std::mutex **)v2);
    MEMORY[0x212BC6398](v2, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t sub_20FD08BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_20FD08BFC(a2);
  return v2 + v3;
}

uint64_t sub_20FD08BFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  unint64_t v17;
  uint64_t v18;
  unint64_t k;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v32;

  v2 = *(_QWORD **)(a1 + 24);
  v32 = (_QWORD *)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 32))
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v2[7];
    v6 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v1 = *(_QWORD *)a1 >> 8;
      v7 = *(_QWORD *)a1;
    }
    else
    {
      v7 = 0;
    }
    v8 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 40))(v2[7]);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v12 = 1;
    if (v11 >= 0xA)
    {
      for (i = 10; i <= v11; i *= 10)
        ++v12;
    }
    v14 = *(unsigned __int8 *)(v9 + 23);
    v15 = 1;
    if (v10 >= 0xA)
    {
      for (j = 10; j <= v10; j *= 10)
        ++v15;
    }
    v17 = v7 | (v1 << 8);
    if (v6)
    {
      v18 = 5;
      if (v17 >= 0xA)
      {
        for (k = 10; k <= v17; k *= 10)
          ++v18;
      }
    }
    else
    {
      v18 = 0;
    }
    v20 = v11 != 0;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v9 + 8);
    v21 = 27;
    if (v10 != 1)
      v21 = 28;
    v23 = *v8;
    v22 = v8[1];
    v24 = 0;
    if (v6)
    {
      if (*v8 != v22)
      {
        v25 = v23 + 16;
        do
        {
          v27 = v25 - 16;
          if (*(_QWORD *)(v25 - 16) > (int64_t)v17)
            break;
          v26 = *(char *)(v25 + 15) < 0 ? *(_QWORD *)v25 : *(unsigned __int8 *)(v25 + 15);
          v24 += v26 + 1;
          v25 += 32;
        }
        while (v27 + 32 != v22);
      }
    }
    else if (*v8 != v22)
    {
      do
      {
        while ((*(char *)(v23 + 31) & 0x80000000) == 0)
        {
          v24 += *(unsigned __int8 *)(v23 + 31) + 1;
          v23 += 32;
          if (v23 == v22)
            goto LABEL_36;
        }
        v24 += *(_QWORD *)(v23 + 16) + 1;
        v23 += 32;
      }
      while (v23 != v22);
    }
LABEL_36:
    v28 = (_QWORD *)v2[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v2[2];
        v30 = *v29 == (_QWORD)v2;
        v2 = v29;
      }
      while (!v30);
    }
    v3 += v21 + v20 + v14 + v12 + v15 + v18;
    v4 += v24;
    v2 = v29;
  }
  while (v29 != v32);
  return v3;
}

uint64_t sub_20FD08E74(uint64_t a1)
{
  uint64_t result;
  _DWORD v3[6];
  int v4;
  _QWORD v5[5];
  _QWORD *v6;
  char v7;

  v4 = 0;
  sub_20E9F5D10(v3, "FileDestination{output_path = ");
  sub_20EB04FEC((uint64_t)&v7, (uint64_t)v3, a1 + 8);
  v5[0] = v3;
  v5[1] = "}";
  v5[2] = v3;
  v5[3] = "}";
  v5[4] = "}";
  if (v4 == -1)
    sub_20E877AB8();
  v6 = v5;
  ((void (*)(_QWORD **, _DWORD *))off_24CA05D18[v4])(&v6, v3);
  if (v4 == -1)
    sub_20E877AB8();
  v5[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA05D00[v4])(v5, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA05CE8[v4])(v5, v3);
  return result;
}

void sub_20FD08F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA05CE8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD08FAC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 23) < 0)
  {
    operator delete(*(void **)result);
    return v1;
  }
  return result;
}

void sub_20FD08FEC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  _QWORD v18[5];
  _QWORD *v19;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_QWORD *)(v2 + 272) = 0;
  sub_20E863438(v2);
  v18[0] = v2;
  std::ostream::operator<<();
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v17) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v17 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v17) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v18[0];
  if (v18[0])
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v18[0] = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v11 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v11 + 16) = v14;
    if (*(char *)(v11 + 111) < 0)
      operator delete(*(void **)(v11 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v11 + 128);
    MEMORY[0x212BC6398](v11, 0x10B2C40EED050F3);
  }
  v18[0] = a1;
  v18[1] = __dst;
  v18[2] = a1;
  v18[3] = __dst;
  v18[4] = __dst;
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    sub_20E877AB8();
  v19 = v18;
  ((void (*)(_QWORD **, uint64_t))off_24CA05CD0[v15])(&v19, a1);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
}

void sub_20FD09244(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD09268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD09284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD09298(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_20FD092A4(std::string *a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5, const void *a6, size_t a7)
{
  char v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  size_t v23;
  int64_t v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  _DWORD v32[6];
  int v33;
  std::string v34;
  std::string **v35;
  std::string *v36;
  std::string *v37;
  _DWORD *v38;
  std::string *v39;
  std::string *v40;

  if (a2 == 1)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    BYTE1(v30[0]) = 0;
    v14 = 115;
    v13 = 1;
  }
  v31 = v13;
  LOBYTE(v30[0]) = v14;
  if (a5)
  {
    v33 = 0;
    sub_20EA8ADC0(v32, " t<=");
    std::to_string(&v34, a4);
    v36 = (std::string *)v32;
    v37 = &v34;
    v38 = v32;
    v39 = &v34;
    v40 = &v34;
    if (v33 == -1)
      sub_20E877AB8();
    __p[0] = &v36;
    ((void (*)(void **, _DWORD *))off_24CA05D58[v33])(__p, v32);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (v33 == -1)
      sub_20E877AB8();
    v36 = &v34;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24CA05D70[v33])(v28, &v36, v32);
    if (v33 != -1)
      ((void (*)(std::string **, _DWORD *))off_24CA05D40[v33])(&v36, v32);
    if (a3)
    {
LABEL_12:
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = 1;
      LOWORD(v25.__r_.__value_.__l.__data_) = 58;
      if (a7 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_13;
LABEL_51:
      sub_20E860B7C();
    }
  }
  else
  {
    v29 = 0;
    LOBYTE(v28[0]) = 0;
    if (a3)
      goto LABEL_12;
  }
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  if (a7 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_51;
LABEL_13:
  if (a7 >= 0x17)
  {
    v16 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v16 = a7 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    v23 = a7;
    v24 = v17 | 0x8000000000000000;
    v22 = v15;
    goto LABEL_19;
  }
  HIBYTE(v24) = a7;
  v15 = &v22;
  if (a7)
LABEL_19:
    memmove(v15, a6, a7);
  *((_BYTE *)v15 + a7) = 0;
  if (v24 >= 0)
    v18 = (const std::string::value_type *)&v22;
  else
    v18 = (const std::string::value_type *)v22;
  if (v24 >= 0)
    v19 = HIBYTE(v24);
  else
    v19 = v23;
  v20 = std::string::append(&v25, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v27 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v33 = 0;
  sub_20E89FDB0(v32, "'");
  v36 = (std::string *)v32;
  v37 = a1;
  v38 = v32;
  v39 = a1;
  v40 = a1;
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DA0[v33])(&v34, v32);
  v36 = (std::string *)v32;
  v37 = (std::string *)"' diagnostics (";
  v38 = v32;
  v39 = (std::string *)"' diagnostics (";
  v40 = (std::string *)"' diagnostics (";
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DB8[v33])(&v34, v32);
  std::to_string(&v34, a3);
  v36 = (std::string *)v32;
  v37 = &v34;
  v38 = v32;
  v39 = &v34;
  v40 = &v34;
  if (v33 == -1)
    sub_20E877AB8();
  v35 = &v36;
  ((void (*)(std::string ***, _DWORD *))off_24CA05D58[v33])(&v35, v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v36 = (std::string *)v32;
  v37 = (std::string *)"/";
  v38 = v32;
  v39 = (std::string *)"/";
  v40 = (std::string *)"/";
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05D88[v33])(&v34, v32);
  std::to_string(&v34, a2);
  v36 = (std::string *)v32;
  v37 = &v34;
  v38 = v32;
  v39 = &v34;
  v40 = &v34;
  if (v33 == -1)
    sub_20E877AB8();
  v35 = &v36;
  ((void (*)(std::string ***, _DWORD *))off_24CA05D58[v33])(&v35, v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v36 = (std::string *)v32;
  v37 = (std::string *)" message";
  v38 = v32;
  v39 = (std::string *)" message";
  v40 = (std::string *)" message";
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DD0[v33])(&v34, v32);
  v36 = (std::string *)v32;
  v37 = (std::string *)v30;
  v38 = v32;
  v39 = (std::string *)v30;
  v40 = (std::string *)v30;
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DA0[v33])(&v34, v32);
  v36 = (std::string *)v32;
  v37 = (std::string *)v28;
  v38 = v32;
  v39 = (std::string *)v28;
  v40 = (std::string *)v28;
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DA0[v33])(&v34, v32);
  v36 = (std::string *)v32;
  v37 = (std::string *)")";
  v38 = v32;
  v39 = (std::string *)")";
  v40 = (std::string *)")";
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05D88[v33])(&v34, v32);
  v36 = (std::string *)v32;
  v37 = (std::string *)__p;
  v38 = v32;
  v39 = (std::string *)__p;
  v40 = (std::string *)__p;
  if (v33 == -1)
    sub_20E877AB8();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  ((void (*)(std::string *, _DWORD *))off_24CA05DA0[v33])(&v34, v32);
  if (v33 == -1)
    sub_20E877AB8();
  v36 = &v34;
  ((void (*)(std::string **, _DWORD *))off_24CA05D70[v33])(&v36, v32);
  if (v33 != -1)
    ((void (*)(std::string **, _DWORD *))off_24CA05D40[v33])(&v36, v32);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v22);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_47:
    if ((v31 & 0x80000000) == 0)
      return;
LABEL_56:
    operator delete(v30[0]);
    return;
  }
LABEL_55:
  operator delete(v28[0]);
  if (v31 < 0)
    goto LABEL_56;
}

void sub_20FD098BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_20E877A60((uint64_t)&a40);
  if ((a39 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FD09A10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t j;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 *v36;
  BOOL v37;
  __int128 *v38;
  unint64_t i;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  _OWORD *v46;
  char *v47;
  char *v48;
  __int128 *v49;
  size_t v50;
  char v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  _BYTE *v74;
  __int128 *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::string::size_type size;
  std::string *v83;
  std::string::size_type v84;
  uint64_t k;
  std::string *v86;
  std::string::size_type v87;
  int v88;
  __int128 *v89;
  int v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  unint64_t *v94;
  void *v96[2];
  uint64_t v97;
  void *__dst[2];
  uint64_t v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  char v105;
  char v106;
  __int128 v107;
  __int128 v108;
  unint64_t *v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 __p;
  uint64_t v115;
  char v116;
  unsigned __int8 v117;
  char *v118;
  char *v119;
  unint64_t v120;
  std::string v121;
  _BYTE v122[24];
  int v123;
  std::string v124;
  std::string *v125;
  std::string v126;
  std::string *v127;
  std::string *v128;

  v3 = (char *)a3;
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 24) = 0;
  *((_BYTE *)a3 + 32) = 0;
  v92 = a3 + 4;
  *((_BYTE *)a3 + 152) = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  if (!a1)
  {
    v70 = 0;
    v71 = 0;
    v72 = 0;
    goto LABEL_116;
  }
  v4 = a2;
  j = a2 + 160 * a1;
  v94 = (unint64_t *)(a3 + 2);
  v93 = j;
  do
  {
    if (!*(_BYTE *)(v4 + 24))
      goto LABEL_62;
    if (!v3[24])
    {
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      sub_20E8ADB20(v3, *(__int128 **)v4, *(__int128 **)(v4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3));
      v3 = (char *)a3;
      *((_BYTE *)a3 + 24) = 1;
      goto LABEL_62;
    }
    v7 = *(__int128 **)v4;
    v6 = *(__int128 **)(v4 + 8);
    v8 = (uint64_t)v6 - *(_QWORD *)v4;
    if (v8 < 1)
      goto LABEL_62;
    v9 = v8 / 24;
    v10 = *(_QWORD *)v3;
    v11 = *((_QWORD *)v3 + 1);
    v12 = (uint64_t)(v11 - *(_QWORD *)v3) / 24;
    v13 = (__int128 *)(v10 + 24 * v12);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v94 - v11) >> 3)) < v9)
    {
      if ((unint64_t)(v12 + v9) > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v94 - v10) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v12 + v9)
        v15 = v12 + v9;
      if (v14 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v109 = v94;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v25 = &v17[24 * v12];
      *(_QWORD *)&v107 = v17;
      *((_QWORD *)&v107 + 1) = v25;
      *(_QWORD *)&v108 = v25;
      *((_QWORD *)&v108 + 1) = &v17[24 * v16];
      v26 = 24 * v9;
      v27 = &v25[24 * v9];
      j = v93;
      do
      {
        if (*((char *)v7 + 23) < 0)
        {
          sub_20E860C04(v25, *(void **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v28 = *v7;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v7 + 2);
          *(_OWORD *)v25 = v28;
        }
        v25 += 24;
        v7 = (__int128 *)((char *)v7 + 24);
        v26 -= 24;
      }
      while (v26);
      v29 = *((_QWORD *)&v107 + 1);
      v3 = (char *)a3;
      v30 = (__int128 *)*a3;
      if ((__int128 *)*a3 == v13)
      {
        v32 = *((_QWORD *)&v107 + 1);
        v34 = (__int128 *)a3[1];
        if (v34 == v13)
          goto LABEL_43;
      }
      else
      {
        v31 = v13;
        do
        {
          v32 = v29 - 24;
          v33 = *(__int128 *)((char *)v31 - 24);
          *(_QWORD *)(v29 - 8) = *((_QWORD *)v31 - 1);
          *(_OWORD *)(v29 - 24) = v33;
          *((_QWORD *)v31 - 2) = 0;
          *((_QWORD *)v31 - 1) = 0;
          *((_QWORD *)v31 - 3) = 0;
          v29 -= 24;
          v31 = (__int128 *)((char *)v31 - 24);
        }
        while (v31 != v30);
        v34 = (__int128 *)a3[1];
        if (v34 == v13)
          goto LABEL_43;
      }
      do
      {
        v35 = *v13;
        *((_QWORD *)v27 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v27 = v35;
        v27 += 24;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *(_QWORD *)v13 = 0;
        v13 = (__int128 *)((char *)v13 + 24);
      }
      while (v13 != v34);
      v13 = (__int128 *)a3[1];
LABEL_43:
      v36 = (__int128 *)*a3;
      *a3 = v32;
      a3[1] = (uint64_t)v27;
      a3[2] = *((_QWORD *)&v108 + 1);
      while (v13 != v36)
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 = (__int128 *)((char *)v13 - 24);
      }
      if (v36)
        operator delete(v36);
      goto LABEL_62;
    }
    v18 = v11 - (_QWORD)v13;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 3)) >= v9)
    {
      v19 = (__int128 *)((char *)v7 + 24 * v9);
      v24 = v11;
      v3 = (char *)a3;
    }
    else
    {
      v19 = (__int128 *)((char *)v7 + 8 * ((uint64_t)(v11 - (_QWORD)v13) >> 3));
      if (v19 == v6)
      {
        v24 = v11;
        a3[1] = v11;
        v37 = v18 < 1;
        v3 = (char *)a3;
        if (v37)
          goto LABEL_62;
      }
      else
      {
        v20 = 0;
        do
        {
          v22 = v11 + v20;
          v23 = (char *)v19 + v20;
          if (*((char *)v19 + v20 + 23) < 0)
          {
            sub_20E860C04((_BYTE *)v22, *(void **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            v21 = *(_OWORD *)v23;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v22 = v21;
          }
          v20 += 24;
        }
        while ((__int128 *)((char *)v19 + v20) != v6);
        v24 = v11 + v20;
        j = v93;
        a3[1] = v24;
        v37 = v18 < 1;
        v3 = (char *)a3;
        if (v37)
          goto LABEL_62;
      }
    }
    v38 = (__int128 *)(v24 - 24 * v9);
    for (i = v24; (unint64_t)v38 < v11; v38 = (__int128 *)((char *)v38 + 24))
    {
      v40 = *v38;
      *(_QWORD *)(i + 16) = *((_QWORD *)v38 + 2);
      *(_OWORD *)i = v40;
      i += 24;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = 0;
      *(_QWORD *)v38 = 0;
    }
    v41 = (uint64_t)v13 + 24 * v9;
    *((_QWORD *)v3 + 1) = i;
    if (v24 != v41)
    {
      v42 = v24 - 24;
      v43 = 8 * ((uint64_t)(v24 - v41) >> 3);
      do
      {
        if (*(char *)(v42 + 23) < 0)
          operator delete(*(void **)v42);
        v44 = (__int128 *)((char *)v13 + v43 - 24);
        v45 = *v44;
        *(_QWORD *)(v42 + 16) = *(_QWORD *)((char *)v13 + v43 - 8);
        *(_OWORD *)v42 = v45;
        v42 -= 24;
        *((_BYTE *)v13 + v43 - 1) = 0;
        *(_BYTE *)v44 = 0;
        v43 -= 24;
      }
      while (v43);
    }
    v3 = (char *)a3;
    for (j = v93; v7 != v19; v13 = (__int128 *)((char *)v13 + 24))
    {
      if (v7 != v13)
      {
        v51 = *((_BYTE *)v7 + 23);
        if (*((char *)v13 + 23) < 0)
        {
          if (v51 >= 0)
            v49 = v7;
          else
            v49 = *(__int128 **)v7;
          if (v51 >= 0)
            v50 = *((unsigned __int8 *)v7 + 23);
          else
            v50 = *((_QWORD *)v7 + 1);
          sub_20E867CBC((void **)v13, v49, v50);
        }
        else if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
        {
          sub_20E867BF8(v13, *(void **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v52 = *v7;
          *((_QWORD *)v13 + 2) = *((_QWORD *)v7 + 2);
          *v13 = v52;
        }
      }
      v7 = (__int128 *)((char *)v7 + 24);
    }
LABEL_62:
    if (*(_BYTE *)(v4 + 152))
    {
      v46 = (_OWORD *)(v4 + 32);
      v47 = v119;
      if ((unint64_t)v119 < v120)
      {
        *(_OWORD *)v119 = *v46;
        sub_20E89EFE4(v47 + 16, (__int128 *)(v4 + 48));
        v48 = v47 + 120;
        v3 = (char *)a3;
        goto LABEL_5;
      }
      v53 = 0xEEEEEEEEEEEEEEEFLL * ((v119 - v118) >> 3) + 1;
      if (v53 > 0x222222222222222)
        sub_20E867F44();
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v120 - (_QWORD)v118) >> 3) > v53)
        v53 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v120 - (_QWORD)v118) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v120 - (_QWORD)v118) >> 3) >= 0x111111111111111)
        v54 = 0x222222222222222;
      else
        v54 = v53;
      v109 = &v120;
      if (v54)
      {
        if (v54 > 0x222222222222222)
          sub_20E877A38();
        v55 = (char *)operator new(120 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[8 * ((v119 - v118) >> 3)];
      *(_QWORD *)&v107 = v55;
      *((_QWORD *)&v107 + 1) = v56;
      *(_QWORD *)&v108 = v56;
      *((_QWORD *)&v108 + 1) = &v55[120 * v54];
      *(_OWORD *)v56 = *v46;
      sub_20E89EFE4(v56 + 16, (__int128 *)(v4 + 48));
      v57 = *((_QWORD *)&v107 + 1);
      v48 = (char *)(v108 + 120);
      v58 = v118;
      v59 = v119;
      v3 = (char *)a3;
      if (v119 != v118)
      {
        v60 = 0;
        do
        {
          v61 = v57 + v60;
          v62 = &v59[v60];
          *(_OWORD *)(v61 - 120) = *(_OWORD *)&v59[v60 - 120];
          *(_BYTE *)(v57 + v60 - 104) = 0;
          *(_BYTE *)(v61 - 8) = 0;
          if (v59[v60 - 8])
          {
            *(_BYTE *)(v61 - 80) = 0;
            if (*(v62 - 80))
            {
              v64 = *(_OWORD *)(v62 - 104);
              v63 = v62 - 104;
              *(_QWORD *)(v57 + v60 - 88) = *((_QWORD *)v63 + 2);
              *(_OWORD *)(v57 + v60 - 104) = v64;
              *((_QWORD *)v63 + 1) = 0;
              *((_QWORD *)v63 + 2) = 0;
              *(_QWORD *)v63 = 0;
              *(_BYTE *)(v61 - 80) = 1;
            }
            v65 = v57 + v60;
            *(_BYTE *)(v57 + v60 - 72) = 0;
            *(_BYTE *)(v57 + v60 - 16) = 0;
            v66 = &v59[v60];
            if (v59[v60 - 16])
            {
              v67 = *(_OWORD *)(v66 - 72);
              *(_QWORD *)(v57 + v60 - 56) = *((_QWORD *)v66 - 7);
              *(_OWORD *)(v57 + v60 - 72) = v67;
              *((_QWORD *)v66 - 8) = 0;
              *((_QWORD *)v66 - 7) = 0;
              *((_QWORD *)v66 - 9) = 0;
              *(_QWORD *)(v65 - 48) = *((_QWORD *)v66 - 6);
              v68 = *(_OWORD *)(v66 - 40);
              *(_QWORD *)(v65 - 24) = *((_QWORD *)v66 - 3);
              *(_OWORD *)(v65 - 40) = v68;
              *((_QWORD *)v66 - 4) = 0;
              *((_QWORD *)v66 - 3) = 0;
              *((_QWORD *)v66 - 5) = 0;
              *(_BYTE *)(v65 - 16) = 1;
            }
            *(_BYTE *)(v61 - 8) = 1;
          }
          v60 -= 120;
        }
        while (&v59[v60] != v58);
        v59 = v118;
        v69 = v119;
        v118 = (char *)(v57 + v60);
        v119 = v48;
        v120 = *((_QWORD *)&v108 + 1);
        while (2)
        {
          if (v69 == (_OWORD *)v59)
          {
            v3 = (char *)a3;
            if (v59)
              goto LABEL_4;
            goto LABEL_5;
          }
          if (!*((_BYTE *)v69 - 8))
            goto LABEL_98;
          if (!*((_BYTE *)v69 - 16))
            goto LABEL_104;
          if (*((char *)v69 - 17) < 0)
          {
            operator delete(*((void **)v69 - 5));
            if (*((char *)v69 - 49) < 0)
              goto LABEL_108;
LABEL_104:
            if (!*((_BYTE *)v69 - 80))
            {
LABEL_98:
              v69 = (_OWORD *)((char *)v69 - 120);
              continue;
            }
          }
          else
          {
            if ((*((char *)v69 - 49) & 0x80000000) == 0)
              goto LABEL_104;
LABEL_108:
            operator delete(*((void **)v69 - 9));
            if (!*((_BYTE *)v69 - 80))
              goto LABEL_98;
          }
          break;
        }
        if (*((char *)v69 - 81) < 0)
          operator delete(*((void **)v69 - 13));
        goto LABEL_98;
      }
      v118 = (char *)*((_QWORD *)&v107 + 1);
      v119 = (char *)(v108 + 120);
      v120 = *((_QWORD *)&v108 + 1);
      if (v59)
LABEL_4:
        operator delete(v59);
LABEL_5:
      v119 = v48;
    }
    v4 += 160;
  }
  while (v4 != j);
  v70 = (uint64_t)v118;
  v71 = v119;
  v72 = v119 - v118;
  if (v119 - v118 == 120)
  {
    v73 = v3[152];
    *v92 = *(_OWORD *)v118;
    v74 = v3 + 48;
    v75 = (__int128 *)(v70 + 16);
    if (v73)
    {
      sub_20FCFBD40((uint64_t)v74, v75);
    }
    else
    {
      sub_20E89EFE4(v74, v75);
      v3[152] = 1;
    }
    goto LABEL_193;
  }
LABEL_116:
  v76 = 0xEEEEEEEEEEEEEEEFLL * (v72 >> 3);
  if (v76 < 2)
    goto LABEL_193;
  v77 = (v70 - (uint64_t)v71) >> 3;
  v78 = 0x1111111111111111 * v77;
  if (0x1111111111111111 * v77 <= 1)
    v79 = 1;
  else
    v79 = 0x1111111111111111 * v77;
  v80 = 0;
  if ((char *)v70 != v71)
  {
    v81 = v70;
    do
    {
      sub_2102341F0(v81, &v126);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      else
        size = v126.__r_.__value_.__l.__size_;
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      v80 += size;
      v81 += 120;
    }
    while ((char *)v81 != v71);
  }
  memset(&v121, 0, sizeof(v121));
  std::string::reserve(&v121, v79 - 1 + v80);
  if (v70 - (_QWORD)v71 < 0)
  {
    sub_2102341F0(v70, &v126);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &v126;
    else
      v83 = (std::string *)v126.__r_.__value_.__r.__words[0];
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    else
      v84 = v126.__r_.__value_.__l.__size_;
    std::string::append(&v121, (const std::string::value_type *)v83, v84);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v126.__r_.__value_.__l.__data_);
      if (v78 < 2)
        goto LABEL_151;
    }
    else if (v78 < 2)
    {
      goto LABEL_151;
    }
    for (k = v70 + 120; (char *)k != v71; k += 120)
    {
      std::string::append(&v121, "\n", 1uLL);
      sub_2102341F0(k, &v126);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &v126;
      else
        v86 = (std::string *)v126.__r_.__value_.__r.__words[0];
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      else
        v87 = v126.__r_.__value_.__l.__size_;
      std::string::append(&v121, (const std::string::value_type *)v86, v87);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
    }
  }
LABEL_151:
  v123 = 0;
  std::to_string(&v124, v76);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
  v126.__r_.__value_.__r.__words[2] = (std::string::size_type)v122;
  v127 = &v124;
  v128 = &v124;
  if (v123 == -1)
    sub_20E877AB8();
  v125 = &v126;
  ((void (*)(std::string **, _BYTE *))off_24CA05E28[v123])(&v125, v122);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)" errors:\n";
  v126.__r_.__value_.__r.__words[2] = (std::string::size_type)v122;
  v127 = (std::string *)" errors:\n";
  v128 = (std::string *)" errors:\n";
  if (v123 == -1)
    sub_20E877AB8();
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  ((void (*)(std::string *, _BYTE *))off_24CA05E58[v123])(&v124, v122);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)&v121;
  v126.__r_.__value_.__r.__words[2] = (std::string::size_type)v122;
  v127 = &v121;
  v128 = &v121;
  if (v123 == -1)
    sub_20E877AB8();
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  ((void (*)(std::string *, _BYTE *))off_24CA05E70[v123])(&v124, v122);
  if (v123 == -1)
    sub_20E877AB8();
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
  ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24CA05E88[v123])(v96, &v126, v122);
  if (v123 != -1)
    ((void (*)(std::string *, _BYTE *))off_24CA05E40[v123])(&v126, v122);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      goto LABEL_163;
LABEL_161:
    *(_OWORD *)__dst = *(_OWORD *)v96;
    v99 = v97;
  }
  else
  {
    if ((SHIBYTE(v97) & 0x80000000) == 0)
      goto LABEL_161;
LABEL_163:
    sub_20E860C04(__dst, v96[0], (unint64_t)v96[1]);
  }
  v100 = 1;
  LOBYTE(v101) = 0;
  v105 = 0;
  v106 = 1;
  sub_20EA5B348((uint64_t)&v107, 4u, (__int128 *)__dst);
  v88 = *((unsigned __int8 *)a3 + 152);
  *v92 = v107;
  v89 = (__int128 *)(a3 + 6);
  if (!v88)
  {
    *((_BYTE *)a3 + 48) = 0;
    *((_BYTE *)a3 + 144) = 0;
    v90 = v117;
    if (v117)
    {
      *((_BYTE *)a3 + 72) = 0;
      if (v110)
      {
        *v89 = v108;
        a3[8] = (uint64_t)v109;
        v109 = 0;
        v108 = 0uLL;
        *((_BYTE *)a3 + 72) = 1;
      }
      *((_BYTE *)a3 + 80) = 0;
      *((_BYTE *)a3 + 136) = 0;
      if (v116)
      {
        v91 = v113;
        a3[12] = v112;
        *((_OWORD *)a3 + 5) = v111;
        v111 = 0uLL;
        a3[13] = v91;
        *((_OWORD *)a3 + 7) = __p;
        a3[16] = v115;
        v112 = 0;
        __p = 0uLL;
        v115 = 0;
        *((_BYTE *)a3 + 136) = 1;
      }
      *((_BYTE *)a3 + 144) = 1;
    }
    *((_BYTE *)a3 + 152) = 1;
    if (!v90)
      goto LABEL_182;
    goto LABEL_174;
  }
  sub_20FD03AA4((uint64_t)v89, &v108);
  if (v117)
  {
LABEL_174:
    if (v116)
    {
      if (SHIBYTE(v115) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v112) < 0)
        operator delete((void *)v111);
    }
    if (v110 && SHIBYTE(v109) < 0)
      operator delete((void *)v108);
  }
LABEL_182:
  if (v106)
  {
    if (v105)
    {
      if (v104 < 0)
        operator delete(v103);
      if (v102 < 0)
        operator delete(v101);
    }
    if (v100 && SHIBYTE(v99) < 0)
      operator delete(__dst[0]);
  }
  if (SHIBYTE(v97) < 0)
    operator delete(v96[0]);
LABEL_193:
  *(_QWORD *)&v107 = &v118;
  sub_20FD0A860((void ***)&v107);
}

void sub_20FD0A64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  if (a19 < 0)
    operator delete(__p);
  *(_QWORD *)(v36 - 200) = v36 - 248;
  sub_20FD0A860((void ***)(v36 - 200));
  sub_20E8DDADC(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD0A7B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    if (!*(_BYTE *)(i - 8))
      continue;
    if (*(_BYTE *)(i - 16))
    {
      if (*(char *)(i - 17) < 0)
      {
        operator delete(*(void **)(i - 40));
        if (*(char *)(i - 49) < 0)
        {
LABEL_12:
          operator delete(*(void **)(i - 72));
          if (!*(_BYTE *)(i - 80))
            continue;
          goto LABEL_9;
        }
      }
      else if (*(char *)(i - 49) < 0)
      {
        goto LABEL_12;
      }
    }
    if (!*(_BYTE *)(i - 80))
      continue;
LABEL_9:
    if (*(char *)(i - 81) < 0)
      operator delete(*(void **)(i - 104));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FD0A860(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      if (!*((_BYTE *)v4 - 8))
        goto LABEL_4;
      if (!*((_BYTE *)v4 - 16))
        break;
      if (*((char *)v4 - 17) < 0)
      {
        operator delete(*(v4 - 5));
        if ((*((char *)v4 - 49) & 0x80000000) == 0)
          break;
      }
      else if ((*((char *)v4 - 49) & 0x80000000) == 0)
      {
        break;
      }
      operator delete(*(v4 - 9));
      if (*((_BYTE *)v4 - 80))
      {
LABEL_10:
        if (*((char *)v4 - 81) < 0)
          operator delete(*(v4 - 13));
      }
LABEL_4:
      v4 -= 15;
      if (v4 == v2)
      {
        v6 = **a1;
        v1[1] = v2;
        operator delete(v6);
        return;
      }
    }
    if (*((_BYTE *)v4 - 80))
      goto LABEL_10;
    goto LABEL_4;
  }
}

double sub_20FD0A93C(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unint64_t j;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  uint64_t v26;
  __n128 v27;
  __n128 *v28;
  size_t v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __n128 v50;
  __int128 v51;
  __n128 v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  const void *v57;
  unint64_t v58;
  size_t v59;
  int v60;
  const void **v61;
  const void *v62;
  const void **v63;
  unint64_t v64;
  size_t v65;
  int v66;
  __n128 *v67;
  __n128 v68;
  __n128 v69;
  BOOL v70;
  __n128 v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void **v75;
  const void *v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  int v81;
  const void *v82;
  size_t v83;
  size_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  size_t v90;
  int v91;
  const void **k;
  const void **v93;
  const void **v94;
  size_t v95;
  size_t v96;
  int v97;
  __n128 v98;
  __int128 v99;
  __n128 v100;
  __n128 *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  const void *v105;
  unint64_t v106;
  size_t v107;
  int v108;
  const void **v109;
  const void *v110;
  const void **v111;
  const void *v112;
  size_t v113;
  int v114;
  __n128 *v115;
  __n128 v116;
  __n128 *v117;
  __n128 *v118;
  __n128 *v119;
  int v120;
  __n128 *v121;
  size_t v122;
  int v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  int64_t v132;
  __n128 *v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 *v138;
  int v139;
  const void *v140;
  unint64_t v141;
  int v142;
  const void *v143;
  unint64_t v144;
  size_t v145;
  int v146;
  uint64_t v147;
  int v148;
  __n128 *v149;
  size_t v150;
  int v151;
  const void *v152;
  size_t v153;
  size_t v154;
  int v155;
  __n128 v156;
  __n128 v157;
  __n128 *v158;
  size_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  const void *v164;
  size_t v165;
  int v166;
  const void *v167;
  size_t v168;
  size_t v169;
  int v170;
  int v171;
  __n128 *v172;
  size_t v173;
  size_t v174;
  int v175;
  BOOL v176;
  __n128 *v177;
  __n128 *v178;
  int v179;
  const void *v180;
  size_t v181;
  int v182;
  __n128 *v183;
  size_t v184;
  size_t v185;
  int v186;
  __n128 v187;
  __n128 *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  const void *v193;
  unint64_t v194;
  size_t v195;
  int v196;
  int64_t v197;
  unint64_t v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __n128 *v204;
  int v205;
  const void *v206;
  unint64_t v207;
  int v208;
  const void *v209;
  unint64_t v210;
  size_t v211;
  int v212;
  const void *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  const void *v219;
  size_t v220;
  int v221;
  __n128 *v222;
  size_t v223;
  size_t v224;
  int v225;
  __n128 v226;
  __n128 *v227;
  size_t v228;
  __n128 v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  int v233;
  const void *v234;
  size_t v235;
  size_t v236;
  int v237;
  const void *v238;
  const void **v239;
  int v240;
  const void *v241;
  size_t v242;
  int v243;
  const void *v244;
  size_t v245;
  size_t v246;
  int v247;
  __n128 v248;
  __n128 *v249;
  size_t v250;
  uint64_t i;
  int v252;
  const void *v253;
  size_t v254;
  size_t v255;
  int v256;
  __n128 v257;
  __n128 v258;
  const void **v261;
  unint64_t v262;
  const void **v263;
  __n128 *__s1a;
  void *__s1b;
  void *__s1c;
  const void **__s2;
  __n128 *__s2a;
  unsigned __int8 __s2b;
  const void **v271;
  const void **v272;
  __n128 v273;
  int64_t v274;
  __n128 v275;
  uint64_t v276;
  uint64_t v277;

  v277 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  __s2 = a2 - 3;
  v271 = a2;
  v261 = a2 - 9;
  v263 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v10 = (uint64_t)a2 - j;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a6.n128_f64[0];
      case 2uLL:
        v119 = (__n128 *)*(a2 - 3);
        v118 = (__n128 *)(a2 - 3);
        v117 = v119;
        v120 = v118[1].n128_i8[7];
        if (v120 >= 0)
          v121 = v118;
        else
          v121 = v117;
        if (v120 >= 0)
          v122 = v118[1].n128_u8[7];
        else
          v122 = v118->n128_u64[1];
        v123 = *(char *)(a1 + 23);
        if (v123 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v123 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v122)
          v126 = v122;
        else
          v126 = v125;
        v127 = memcmp(v121, v124, v126);
        if (v127)
        {
          if ((v127 & 0x80000000) == 0)
            return a6.n128_f64[0];
        }
        else if (v122 >= v125)
        {
          return a6.n128_f64[0];
        }
        v257 = *(__n128 *)a1;
        v274 = *(_QWORD *)(a1 + 16);
        v273 = v257;
        v258 = *v118;
        *(_QWORD *)(a1 + 16) = v118[1].n128_u64[0];
        *(__n128 *)a1 = v258;
        a6 = v273;
        v118[1].n128_u64[0] = v274;
        *v118 = a6;
        return a6.n128_f64[0];
      case 3uLL:
        a6.n128_u64[0] = sub_20FD0BA48((const void **)a1, (const void **)(a1 + 24), __s2).n128_u64[0];
        return a6.n128_f64[0];
      case 4uLL:
        a6.n128_u64[0] = sub_20FD0BF94(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), __s2).n128_u64[0];
        return a6.n128_f64[0];
      case 5uLL:
        a6.n128_u64[0] = sub_20FD0C13C(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), __s2).n128_u64[0];
        return a6.n128_f64[0];
      default:
        if (v10 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return a6.n128_f64[0];
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return a6.n128_f64[0];
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v178 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v179 = v178[2].n128_i8[15];
              if (v179 >= 0)
                v180 = v128;
              else
                v180 = (const void *)v178[1].n128_u64[1];
              if (v179 >= 0)
                v181 = v178[2].n128_u8[15];
              else
                v181 = v178[2].n128_u64[0];
              v182 = v178[1].n128_i8[7];
              if (v182 >= 0)
                v183 = v178;
              else
                v183 = (__n128 *)v178->n128_u64[0];
              if (v182 >= 0)
                v184 = v178[1].n128_u8[7];
              else
                v184 = v178->n128_u64[1];
              if (v184 >= v181)
                v185 = v181;
              else
                v185 = v184;
              v186 = memcmp(v180, v183, v185);
              if (v186)
              {
                if ((v186 & 0x80000000) == 0)
                  goto LABEL_346;
              }
              else if (v181 >= v184)
              {
                goto LABEL_346;
              }
              v187 = *(__n128 *)v130;
              v274 = *(_QWORD *)(v130 + 16);
              v273 = v187;
              if (v274 >= 0)
                v188 = &v273;
              else
                v188 = (__n128 *)v187.n128_u64[0];
              if (v274 >= 0)
                v189 = HIBYTE(v274);
              else
                v189 = v187.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v178[1].n128_u64[0];
              *(__n128 *)v130 = *v178;
              v178[1].n128_u8[7] = 0;
              v178->n128_u8[0] = 0;
              v177 = (__n128 *)a1;
              if (v178 == (__n128 *)a1)
                goto LABEL_345;
              v190 = v129;
              while (1)
              {
                v191 = a1 + v190;
                v192 = *(char *)(a1 + v190 - 1);
                v193 = v192 >= 0 ? (const void *)(a1 + v190 - 24) : *(const void **)(a1 + v190 - 24);
                v194 = v192 >= 0 ? *(unsigned __int8 *)(a1 + v190 - 1) : *(_QWORD *)(a1 + v190 - 16);
                v195 = v194 >= v189 ? v189 : v194;
                v196 = memcmp(v188, v193, v195);
                if (!v196)
                  break;
                if ((v196 & 0x80000000) == 0)
                {
                  v177 = (__n128 *)(a1 + v190);
                  goto LABEL_344;
                }
LABEL_375:
                v178 = (__n128 *)((char *)v178 - 24);
                *(_OWORD *)v191 = *(_OWORD *)(a1 + v190 - 24);
                *(_QWORD *)(v191 + 16) = *(_QWORD *)(a1 + v190 - 8);
                *(_BYTE *)(v191 - 1) = 0;
                *(_BYTE *)(v191 - 24) = 0;
                v190 -= 24;
                if (!v190)
                {
                  v177 = (__n128 *)a1;
                  goto LABEL_344;
                }
              }
              if (v189 < v194)
                goto LABEL_375;
              v177 = v178;
LABEL_344:
              a2 = v271;
LABEL_345:
              a6 = v273;
              v177[1].n128_u64[0] = v274;
              *v177 = a6;
LABEL_346:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == a2)
                return a6.n128_f64[0];
            }
          }
          if ((const void **)a1 == a2)
            return a6.n128_f64[0];
          v238 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return a6.n128_f64[0];
LABEL_468:
          v239 = (const void **)a1;
          a1 = (uint64_t)v238;
          v240 = *((char *)v239 + 47);
          if (v240 >= 0)
            v241 = v238;
          else
            v241 = v239[3];
          if (v240 >= 0)
            v242 = *((unsigned __int8 *)v239 + 47);
          else
            v242 = (size_t)v239[4];
          v243 = *((char *)v239 + 23);
          if (v243 >= 0)
            v244 = v239;
          else
            v244 = *v239;
          if (v243 >= 0)
            v245 = *((unsigned __int8 *)v239 + 23);
          else
            v245 = (size_t)v239[1];
          if (v245 >= v242)
            v246 = v242;
          else
            v246 = v245;
          v247 = memcmp(v241, v244, v246);
          if (v247)
          {
            if ((v247 & 0x80000000) == 0)
              goto LABEL_467;
          }
          else if (v242 >= v245)
          {
            goto LABEL_467;
          }
          v248 = *(__n128 *)a1;
          v274 = *(_QWORD *)(a1 + 16);
          v273 = v248;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v274 >= 0)
            v249 = &v273;
          else
            v249 = (__n128 *)v273.n128_u64[0];
          if (v274 >= 0)
            v250 = HIBYTE(v274);
          else
            v250 = v273.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v252 = *(char *)(i - 25);
            if (v252 >= 0)
              v253 = (const void *)(i - 48);
            else
              v253 = *(const void **)(i - 48);
            if (v252 >= 0)
              v254 = *(unsigned __int8 *)(i - 25);
            else
              v254 = *(_QWORD *)(i - 40);
            if (v254 >= v250)
              v255 = v250;
            else
              v255 = v254;
            v256 = memcmp(v249, v253, v255);
            if (v256)
            {
              if ((v256 & 0x80000000) == 0)
              {
LABEL_466:
                a6 = v273;
                *(_QWORD *)(i - 8) = v274;
                *(__n128 *)(i - 24) = a6;
LABEL_467:
                v238 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return a6.n128_f64[0];
                goto LABEL_468;
              }
            }
            else if (v250 >= v254)
            {
              goto LABEL_466;
            }
          }
        }
        if (!a4)
        {
          if ((const void **)a1 == a2)
            return a6.n128_f64[0];
          v131 = (v11 - 2) >> 1;
          v132 = v131;
          v262 = v10;
          while (1)
          {
            v134 = v132;
            if (v131 < v132)
              goto LABEL_260;
            v135 = (2 * v132) | 1;
            v136 = a1 + 24 * v135;
            v137 = 2 * v132 + 2;
            __s1b = (void *)v132;
            if (v137 >= (uint64_t)v11)
              goto LABEL_280;
            v138 = (__n128 *)(v136 + 24);
            v139 = *(char *)(v136 + 23);
            v140 = v139 >= 0 ? (const void *)(a1 + 24 * v135) : *(const void **)v136;
            v141 = v139 >= 0 ? *(unsigned __int8 *)(v136 + 23) : *(_QWORD *)(v136 + 8);
            v142 = *(char *)(v136 + 47);
            v143 = v142 >= 0 ? (const void *)(v136 + 24) : *(const void **)(v136 + 24);
            v144 = v142 >= 0 ? *(unsigned __int8 *)(v136 + 47) : *(_QWORD *)(v136 + 32);
            v145 = v144 >= v141 ? v141 : v144;
            v146 = memcmp(v140, v143, v145);
            if (v146)
              break;
            v176 = v141 >= v144;
            a2 = v271;
            v134 = (int64_t)__s1b;
            if (v176)
              goto LABEL_280;
LABEL_281:
            v147 = a1 + 24 * v134;
            v148 = v138[1].n128_i8[7];
            if (v148 >= 0)
              v149 = v138;
            else
              v149 = (__n128 *)v138->n128_u64[0];
            if (v148 >= 0)
              v150 = v138[1].n128_u8[7];
            else
              v150 = v138->n128_u64[1];
            v151 = *(char *)(v147 + 23);
            if (v151 >= 0)
              v152 = (const void *)(a1 + 24 * v134);
            else
              v152 = *(const void **)v147;
            if (v151 >= 0)
              v153 = *(unsigned __int8 *)(v147 + 23);
            else
              v153 = *(_QWORD *)(v147 + 8);
            if (v153 >= v150)
              v154 = v150;
            else
              v154 = v153;
            v155 = memcmp(v149, v152, v154);
            if (v155)
            {
              v134 = (int64_t)__s1b;
              if ((v155 & 0x80000000) == 0)
                goto LABEL_300;
            }
            else
            {
              v134 = (int64_t)__s1b;
              if (v150 >= v153)
              {
LABEL_300:
                v156 = *(__n128 *)v147;
                v274 = *(_QWORD *)(v147 + 16);
                v273 = v156;
                *(_QWORD *)(v147 + 8) = 0;
                *(_QWORD *)(v147 + 16) = 0;
                *(_QWORD *)v147 = 0;
                v157 = *v138;
                *(_QWORD *)(v147 + 16) = v138[1].n128_u64[0];
                *(__n128 *)v147 = v157;
                v138[1].n128_u8[7] = 0;
                v138->n128_u8[0] = 0;
                if (v131 < v137)
                {
LABEL_258:
                  v133 = v138;
LABEL_259:
                  a6 = v273;
                  v133[1].n128_u64[0] = v274;
                  *v133 = a6;
                  v134 = (int64_t)__s1b;
                  goto LABEL_260;
                }
                v158 = &v273;
                if (v274 < 0)
                  v158 = (__n128 *)v273.n128_u64[0];
                __s2a = v158;
                if (v274 >= 0)
                  v159 = HIBYTE(v274);
                else
                  v159 = v273.n128_u64[1];
                while (2)
                {
                  v161 = (2 * v137) | 1;
                  v162 = a1 + 24 * v161;
                  v137 = 2 * v137 + 2;
                  if (v137 < (uint64_t)v11)
                  {
                    v133 = (__n128 *)(v162 + 24);
                    v163 = *(char *)(v162 + 23);
                    if (v163 >= 0)
                      v164 = (const void *)(a1 + 24 * v161);
                    else
                      v164 = *(const void **)v162;
                    if (v163 >= 0)
                      v165 = *(unsigned __int8 *)(v162 + 23);
                    else
                      v165 = *(_QWORD *)(v162 + 8);
                    v166 = *(char *)(v162 + 47);
                    if (v166 >= 0)
                      v167 = (const void *)(v162 + 24);
                    else
                      v167 = *(const void **)(v162 + 24);
                    if (v166 >= 0)
                      v168 = *(unsigned __int8 *)(v162 + 47);
                    else
                      v168 = *(_QWORD *)(v162 + 32);
                    if (v168 >= v165)
                      v169 = v165;
                    else
                      v169 = v168;
                    v170 = memcmp(v164, v167, v169);
                    if (v170)
                    {
                      a2 = v271;
                      v131 = (v11 - 2) >> 1;
                      if ((v170 & 0x80000000) == 0)
                        break;
LABEL_327:
                      v171 = v133[1].n128_i8[7];
                      if (v171 >= 0)
                        v172 = v133;
                      else
                        v172 = (__n128 *)v133->n128_u64[0];
                      if (v171 >= 0)
                        v173 = v133[1].n128_u8[7];
                      else
                        v173 = v133->n128_u64[1];
                      if (v159 >= v173)
                        v174 = v173;
                      else
                        v174 = v159;
                      v175 = memcmp(v172, __s2a, v174);
                      if (v175)
                      {
                        if (v175 < 0)
                          goto LABEL_258;
                      }
                      else if (v173 < v159)
                      {
                        goto LABEL_258;
                      }
                      v160 = *v133;
                      v138[1].n128_u64[0] = v133[1].n128_u64[0];
                      *v138 = v160;
                      v133[1].n128_u8[7] = 0;
                      v133->n128_u8[0] = 0;
                      v138 = v133;
                      if (v131 < v137)
                        goto LABEL_259;
                      continue;
                    }
                    v176 = v165 >= v168;
                    a2 = v271;
                    v131 = (v11 - 2) >> 1;
                    if (!v176)
                      goto LABEL_327;
                  }
                  break;
                }
                v133 = (__n128 *)(a1 + 24 * v161);
                v137 = v161;
                goto LABEL_327;
              }
            }
LABEL_260:
            v132 = v134 - 1;
            if (!v134)
            {
              v197 = v262 / 0x18;
LABEL_393:
              if (v197 < 2)
                goto LABEL_391;
              v272 = a2;
              v200 = 0;
              __s1c = *(void **)a1;
              v275.n128_u64[0] = *(_QWORD *)(a1 + 8);
              *(unint64_t *)((char *)v275.n128_u64 + 7) = *(_QWORD *)(a1 + 15);
              __s2b = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v201 = a1;
              while (1)
              {
                v202 = v201 + 24 * v200 + 24;
                v203 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v197)
                  goto LABEL_414;
                v204 = (__n128 *)(v202 + 24);
                v205 = *(char *)(v202 + 23);
                v206 = v205 >= 0 ? (const void *)v202 : *(const void **)v202;
                v207 = v205 >= 0 ? *(unsigned __int8 *)(v202 + 23) : *(_QWORD *)(v202 + 8);
                v208 = *(char *)(v202 + 47);
                v209 = v208 >= 0 ? (const void *)(v202 + 24) : *(const void **)(v202 + 24);
                v210 = v208 >= 0 ? *(unsigned __int8 *)(v202 + 47) : *(_QWORD *)(v202 + 32);
                v211 = v210 >= v207 ? v207 : v210;
                v212 = memcmp(v206, v209, v211);
                if (!v212)
                  break;
                if ((v212 & 0x80000000) == 0)
                  goto LABEL_414;
LABEL_415:
                if (*(char *)(v201 + 23) < 0)
                  operator delete(*(void **)v201);
                a6 = *v204;
                *(_QWORD *)(v201 + 16) = v204[1].n128_u64[0];
                *(__n128 *)v201 = a6;
                v204[1].n128_u8[7] = 0;
                v204->n128_u8[0] = 0;
                v201 = (uint64_t)v204;
                if (v200 > (uint64_t)((unint64_t)(v197 - 2) >> 1))
                {
                  if (v204 == (__n128 *)(a2 - 3))
                  {
                    v204->n128_u64[0] = (unint64_t)__s1c;
                    v198 = *(unint64_t *)((char *)v275.n128_u64 + 7);
                    v204->n128_u64[1] = v275.n128_u64[0];
                    *(unint64_t *)((char *)&v204->n128_u64[1] + 7) = v198;
                    v204[1].n128_u8[7] = __s2b;
                  }
                  else
                  {
                    a6 = *(__n128 *)(a2 - 3);
                    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                    *v204 = a6;
                    *(a2 - 3) = __s1c;
                    v213 = (const void *)v275.n128_u64[0];
                    *(const void **)((char *)a2 - 9) = *(const void **)((char *)v275.n128_u64 + 7);
                    *(a2 - 2) = v213;
                    *((_BYTE *)a2 - 1) = __s2b;
                    v214 = (uint64_t)&v204[1].n128_i64[1] - a1;
                    if (v214 >= 25)
                    {
                      v215 = v214 / 0x18uLL - 2;
                      v216 = v215 >> 1;
                      v217 = a1 + 24 * (v215 >> 1);
                      v218 = *(char *)(v217 + 23);
                      if (v218 >= 0)
                        v219 = (const void *)(a1 + 24 * (v215 >> 1));
                      else
                        v219 = *(const void **)v217;
                      if (v218 >= 0)
                        v220 = *(unsigned __int8 *)(v217 + 23);
                      else
                        v220 = *(_QWORD *)(v217 + 8);
                      v221 = v204[1].n128_i8[7];
                      if (v221 >= 0)
                        v222 = v204;
                      else
                        v222 = (__n128 *)v204->n128_u64[0];
                      if (v221 >= 0)
                        v223 = v204[1].n128_u8[7];
                      else
                        v223 = v204->n128_u64[1];
                      if (v223 >= v220)
                        v224 = v220;
                      else
                        v224 = v223;
                      v225 = memcmp(v219, v222, v224);
                      if (v225)
                      {
                        if (v225 < 0)
                        {
LABEL_440:
                          v226 = *v204;
                          v274 = v204[1].n128_i64[0];
                          v273 = v226;
                          v204->n128_u64[1] = 0;
                          v204[1].n128_u64[0] = 0;
                          v204->n128_u64[0] = 0;
                          if (v274 >= 0)
                            v227 = &v273;
                          else
                            v227 = (__n128 *)v273.n128_u64[0];
                          if (v274 >= 0)
                            v228 = HIBYTE(v274);
                          else
                            v228 = v273.n128_u64[1];
                          v229 = *(__n128 *)v217;
                          v204[1].n128_u64[0] = *(_QWORD *)(v217 + 16);
                          *v204 = v229;
                          *(_BYTE *)(v217 + 23) = 0;
                          *(_BYTE *)v217 = 0;
                          if (v215 >= 2)
                          {
                            while (1)
                            {
                              v231 = v216 - 1;
                              v216 = (v216 - 1) >> 1;
                              v232 = a1 + 24 * v216;
                              v233 = *(char *)(v232 + 23);
                              if (v233 >= 0)
                                v234 = (const void *)(a1 + 24 * v216);
                              else
                                v234 = *(const void **)v232;
                              if (v233 >= 0)
                                v235 = *(unsigned __int8 *)(v232 + 23);
                              else
                                v235 = *(_QWORD *)(v232 + 8);
                              if (v228 >= v235)
                                v236 = v235;
                              else
                                v236 = v228;
                              v237 = memcmp(v234, v227, v236);
                              if (v237)
                              {
                                if ((v237 & 0x80000000) == 0)
                                  break;
                              }
                              else if (v235 >= v228)
                              {
                                break;
                              }
                              v230 = *(_OWORD *)v232;
                              *(_QWORD *)(v217 + 16) = *(_QWORD *)(v232 + 16);
                              *(_OWORD *)v217 = v230;
                              *(_BYTE *)(v232 + 23) = 0;
                              *(_BYTE *)v232 = 0;
                              v217 = a1 + 24 * v216;
                              if (v231 <= 1)
                                goto LABEL_462;
                            }
                          }
                          v232 = v217;
LABEL_462:
                          a6 = v273;
                          *(_QWORD *)(v232 + 16) = v274;
                          *(__n128 *)v232 = a6;
                          a2 = v272;
                        }
                      }
                      else if (v220 < v223)
                      {
                        goto LABEL_440;
                      }
                    }
                  }
LABEL_391:
                  a2 -= 3;
                  if ((unint64_t)v197-- <= 2)
                    return a6.n128_f64[0];
                  goto LABEL_393;
                }
              }
              if (v207 < v210)
                goto LABEL_415;
LABEL_414:
              v204 = (__n128 *)v202;
              v200 = v203;
              goto LABEL_415;
            }
          }
          a2 = v271;
          v134 = (int64_t)__s1b;
          if (v146 < 0)
            goto LABEL_281;
LABEL_280:
          v138 = (__n128 *)(a1 + 24 * v135);
          v137 = v135;
          goto LABEL_281;
        }
        v12 = v11 >> 1;
        v13 = a1 + 24 * (v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_20FD0BA48((const void **)v13, (const void **)a1, __s2);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          sub_20FD0BA48((const void **)a1, (const void **)v13, __s2);
          v14 = 24 * v12;
          sub_20FD0BA48((const void **)(a1 + 24), (const void **)(v14 + a1 - 24), v263);
          sub_20FD0BA48((const void **)(a1 + 48), (const void **)(a1 + 24 + v14), v261);
          sub_20FD0BA48((const void **)(v14 + a1 - 24), (const void **)v13, (const void **)(a1 + 24 + v14));
          v15 = *(__n128 *)a1;
          v274 = *(_QWORD *)(a1 + 16);
          v273 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v16;
          v17 = v273;
          *(_QWORD *)(v13 + 16) = v274;
          *(__n128 *)v13 = v17;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_27;
        }
        v18 = *(char *)(a1 - 1);
        if (v18 >= 0)
          v19 = (const void *)(a1 - 24);
        else
          v19 = *(const void **)(a1 - 24);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a1 - 1);
        else
          v20 = *(_QWORD *)(a1 - 16);
        v21 = *(char *)(a1 + 23);
        if (v21 >= 0)
          v22 = (const void *)a1;
        else
          v22 = *(const void **)a1;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(a1 + 23);
        else
          v23 = *(_QWORD *)(a1 + 8);
        if (v23 >= v20)
          v24 = v20;
        else
          v24 = v23;
        v25 = memcmp(v19, v22, v24);
        if (v25)
        {
          if (v25 < 0)
            goto LABEL_27;
LABEL_124:
          v71 = *(__n128 *)a1;
          v276 = *(_QWORD *)(a1 + 16);
          v275 = v71;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v276 >= 0)
            v72 = &v275;
          else
            v72 = (__n128 *)v275.n128_u64[0];
          if (v276 >= 0)
            v73 = HIBYTE(v276);
          else
            v73 = v275.n128_u64[1];
          v74 = *((unsigned __int8 *)a2 - 1);
          v75 = (const void **)*(a2 - 3);
          v76 = *(a2 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = __s2;
          else
            v77 = v75;
          if ((v74 & 0x80u) == 0)
            v78 = v74;
          else
            v78 = (size_t)v76;
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          __s1a = v72;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 >= v78)
          {
LABEL_141:
            for (j = a1 + 24; j < (unint64_t)v271; j += 24)
            {
              v81 = *(char *)(j + 23);
              if (v81 >= 0)
                v82 = (const void *)j;
              else
                v82 = *(const void **)j;
              if (v81 >= 0)
                v83 = *(unsigned __int8 *)(j + 23);
              else
                v83 = *(_QWORD *)(j + 8);
              if (v83 >= v73)
                v84 = v73;
              else
                v84 = v83;
              v85 = memcmp(__s1a, v82, v84);
              if (v85)
              {
                if (v85 < 0)
                  goto LABEL_171;
              }
              else if (v73 < v83)
              {
                goto LABEL_171;
              }
            }
            goto LABEL_171;
          }
          v86 = a1 + 24;
          do
          {
            while (1)
            {
              j = v86;
              v87 = *(unsigned __int8 *)(v86 + 23);
              v88 = (v87 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
              v89 = (v87 & 0x80u) == 0 ? v87 : *(_QWORD *)(j + 8);
              v90 = v89 >= v73 ? v73 : v89;
              v91 = memcmp(__s1a, v88, v90);
              v86 = j + 24;
              if (v91)
                break;
              if (v73 < v89)
                goto LABEL_171;
            }
          }
          while ((v91 & 0x80000000) == 0);
LABEL_171:
          k = v271;
          if (j < (unint64_t)v271)
          {
            for (k = __s2; ; v76 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v94 = k;
              else
                v94 = v75;
              if ((v74 & 0x80u) == 0)
                v95 = v74;
              else
                v95 = (size_t)v76;
              if (v95 >= v73)
                v96 = v73;
              else
                v96 = v95;
              v97 = memcmp(__s1a, v94, v96);
              if (v97)
              {
                if ((v97 & 0x80000000) == 0)
                  break;
              }
              else if (v73 >= v95)
              {
                break;
              }
              v93 = (const void **)*(k - 3);
              k -= 3;
              v75 = v93;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
LABEL_219:
          while (j < (unint64_t)k)
          {
            v98 = *(__n128 *)j;
            v274 = *(_QWORD *)(j + 16);
            v273 = v98;
            v99 = *(_OWORD *)k;
            *(_QWORD *)(j + 16) = k[2];
            *(_OWORD *)j = v99;
            v100 = v273;
            k[2] = (const void *)v274;
            *(__n128 *)k = v100;
            if (v276 >= 0)
              v101 = &v275;
            else
              v101 = (__n128 *)v275.n128_u64[0];
            if (v276 >= 0)
              v102 = HIBYTE(v276);
            else
              v102 = v275.n128_u64[1];
            v103 = j + 24;
            do
            {
              while (1)
              {
                j = v103;
                v104 = *(unsigned __int8 *)(v103 + 23);
                v105 = (v104 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v106 = (v104 & 0x80u) == 0 ? v104 : *(_QWORD *)(j + 8);
                v107 = v106 >= v102 ? v102 : v106;
                v108 = memcmp(v101, v105, v107);
                v103 = j + 24;
                if (v108)
                  break;
                if (v102 < v106)
                  goto LABEL_206;
              }
            }
            while ((v108 & 0x80000000) == 0);
LABEL_206:
            v109 = k - 3;
            do
            {
              while (1)
              {
                k = v109;
                v110 = (const void *)*((unsigned __int8 *)v109 + 23);
                v111 = (char)v110 >= 0 ? k : (const void **)*k;
                v112 = (char)v110 >= 0 ? v110 : k[1];
                v113 = (unint64_t)v112 >= v102 ? v102 : (size_t)v112;
                v114 = memcmp(v101, v111, v113);
                v109 = k - 3;
                if (v114)
                  break;
                if (v102 >= (unint64_t)v112)
                  goto LABEL_219;
              }
            }
            while (v114 < 0);
          }
          v115 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v271;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            a2 = v271;
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v116 = *v115;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v116;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
          }
          a5 = 0;
          a6 = v275;
          *(_QWORD *)(j - 8) = v276;
          *v115 = a6;
          continue;
        }
        if (v20 >= v23)
          goto LABEL_124;
LABEL_27:
        v26 = 0;
        v27 = *(__n128 *)a1;
        v276 = *(_QWORD *)(a1 + 16);
        v275 = v27;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v276 >= 0)
          v28 = &v275;
        else
          v28 = (__n128 *)v275.n128_u64[0];
        if (v276 >= 0)
          v29 = HIBYTE(v276);
        else
          v29 = v275.n128_u64[1];
        while (2)
        {
          v30 = *(char *)(a1 + v26 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v26 + 24);
          else
            v31 = *(const void **)(a1 + v26 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v26 + 47);
          else
            v32 = *(_QWORD *)(a1 + v26 + 32);
          if (v29 >= v32)
            v33 = v32;
          else
            v33 = v29;
          v34 = memcmp(v31, v28, v33);
          if (!v34)
          {
            if (v32 >= v29)
              goto LABEL_46;
LABEL_34:
            v26 += 24;
            continue;
          }
          break;
        }
        if (v34 < 0)
          goto LABEL_34;
LABEL_46:
        v35 = a1 + v26 + 24;
        v36 = __s2;
        if (v26)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v29 >= v46 ? v46 : v29;
              v48 = memcmp(v45, v28, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 < v29)
                goto LABEL_77;
            }
          }
          while ((v48 & 0x80000000) == 0);
        }
        else
        {
          v37 = v271;
          if (v35 < (unint64_t)v271)
          {
            v38 = __s2;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v29 >= v41 ? v41 : v29;
                v43 = memcmp(v40, v28, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || v43 < 0)
                  goto LABEL_77;
              }
            }
            while (v35 < (unint64_t)v37 && v41 >= v29);
          }
        }
LABEL_77:
        j = v35;
        if (v35 < (unint64_t)v37)
        {
          v49 = v37;
          do
          {
            v50 = *(__n128 *)j;
            v274 = *(_QWORD *)(j + 16);
            v273 = v50;
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            v52 = v273;
            v49[2] = (const void *)v274;
            *(__n128 *)v49 = v52;
            if (v276 >= 0)
              v53 = &v275;
            else
              v53 = (__n128 *)v275.n128_u64[0];
            if (v276 >= 0)
              v54 = HIBYTE(v276);
            else
              v54 = v275.n128_u64[1];
            v55 = j + 24;
            do
            {
              while (1)
              {
                j = v55;
                v56 = *(unsigned __int8 *)(v55 + 23);
                v57 = (v56 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v58 = (v56 & 0x80u) == 0 ? v56 : *(_QWORD *)(j + 8);
                v59 = v54 >= v58 ? v58 : v54;
                v60 = memcmp(v57, v53, v59);
                v55 = j + 24;
                if (v60)
                  break;
                if (v58 >= v54)
                  goto LABEL_99;
              }
            }
            while (v60 < 0);
LABEL_99:
            v61 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v61;
                v62 = (const void *)*((unsigned __int8 *)v61 + 23);
                v63 = (char)v62 >= 0 ? v49 : (const void **)*v49;
                v64 = (unint64_t)((char)v62 >= 0 ? v62 : v49[1]);
                v65 = v54 >= v64 ? v64 : v54;
                v66 = memcmp(v63, v53, v65);
                v61 = v49 - 3;
                if (v66)
                  break;
                if (v64 < v54)
                  goto LABEL_79;
              }
            }
            while ((v66 & 0x80000000) == 0);
LABEL_79:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v67 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v271;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v271;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v68 = *v67;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v68;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v69 = v275;
        *(_QWORD *)(j - 8) = v276;
        *v67 = v69;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          sub_20FD0A93C(a1, j - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v70 = sub_20FD0BCB0(a1, (const void **)(j - 24));
        if (!sub_20FD0BCB0(j, a2))
        {
          if (v70)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v70)
          goto LABEL_2;
        return a6.n128_f64[0];
    }
  }
}

__n128 sub_20FD0BA48(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  __n128 result;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  const void *v25;
  __n128 v26;
  const void *v27;
  int v28;
  const void *v29;
  size_t v30;
  int v31;
  const void *v32;
  size_t v33;
  size_t v34;
  int v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  int v39;
  const void *v40;
  size_t v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  int v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 >= v11)
      goto LABEL_18;
LABEL_31:
    v20 = *((char *)a3 + 23);
    if (v20 >= 0)
      v21 = a3;
    else
      v21 = *a3;
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)a3 + 23);
    else
      v22 = (size_t)a3[1];
    if (v8 >= v22)
      v23 = v22;
    else
      v23 = v8;
    v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        v25 = a1[2];
        v26 = *(__n128 *)a1;
        v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        v28 = *((char *)a3 + 23);
        if (v28 >= 0)
          v29 = a3;
        else
          v29 = *a3;
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)a3 + 23);
        else
          v30 = (size_t)a3[1];
        v31 = *((char *)a2 + 23);
        if (v31 >= 0)
          v32 = a2;
        else
          v32 = *a2;
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)a2 + 23);
        else
          v33 = (size_t)a2[1];
        if (v33 >= v30)
          v34 = v30;
        else
          v34 = v33;
        v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            return result;
        }
        else if (v30 >= v33)
        {
          return result;
        }
        v47 = a2[2];
        result = *(__n128 *)a2;
        v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
LABEL_83:
        *(__n128 *)a3 = result;
        a3[2] = v47;
        return result;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    v47 = a1[2];
    result = *(__n128 *)a1;
    v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
    goto LABEL_83;
  }
  if (v13 < 0)
    goto LABEL_31;
LABEL_18:
  v14 = *((char *)a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v8 >= v16)
    v17 = v16;
  else
    v17 = v8;
  v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v8)
  {
    return result;
  }
  v36 = a2[2];
  v37 = *(_OWORD *)a2;
  v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  v42 = *((char *)a1 + 23);
  if (v42 >= 0)
    v43 = a1;
  else
    v43 = *a1;
  if (v42 >= 0)
    v44 = *((unsigned __int8 *)a1 + 23);
  else
    v44 = (size_t)a1[1];
  if (v44 >= v41)
    v45 = v41;
  else
    v45 = v44;
  v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if (v46 < 0)
      goto LABEL_85;
  }
  else if (v41 < v44)
  {
LABEL_85:
    v50 = a1[2];
    result = *(__n128 *)a1;
    v51 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v51;
    *(__n128 *)a2 = result;
    a2[2] = v50;
  }
  return result;
}

BOOL sub_20FD0BCB0(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  int v34;
  const void *v35;
  unint64_t v36;
  size_t v37;
  int v38;
  const void *v39;
  __int128 v40;
  const void *v41;
  const void **v42;
  __int128 v43;
  const void *v44;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      v39 = *(const void **)(a1 + 16);
      v40 = *(_OWORD *)a1;
      v41 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v41;
      *(_OWORD *)v6 = v40;
      v6[2] = v39;
      return 1;
    case 3uLL:
      sub_20FD0BA48((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_20FD0BF94(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_20FD0C13C(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
      return 1;
    default:
      v15 = (const void **)(a1 + 48);
      sub_20FD0BA48((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v16 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v42 = v2;
      break;
  }
  while (2)
  {
    v21 = *((char *)v16 + 23);
    if (v21 >= 0)
      v22 = v16;
    else
      v22 = *v16;
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v16 + 23);
    else
      v23 = (size_t)v16[1];
    v24 = *((char *)v15 + 23);
    if (v24 >= 0)
      v25 = v15;
    else
      v25 = *v15;
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)v15 + 23);
    else
      v26 = (size_t)v15[1];
    if (v26 >= v23)
      v27 = v23;
    else
      v27 = v26;
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    v43 = *(_OWORD *)v16;
    v44 = v16[2];
    *(_OWORD *)v16 = *(_OWORD *)v15;
    v16[2] = v15[2];
    *((_BYTE *)v15 + 23) = 0;
    *(_BYTE *)v15 = 0;
    v19 = a1;
    if (v15 == (const void **)a1)
      goto LABEL_24;
    v29 = v17;
    while (1)
    {
      v30 = a1 + v29;
      v31 = (_OWORD *)(a1 + v29 + 24);
      v32 = SHIBYTE(v44) >= 0 ? &v43 : (__int128 *)v43;
      v33 = SHIBYTE(v44) >= 0 ? HIBYTE(v44) : *((_QWORD *)&v43 + 1);
      v34 = *(char *)(v30 + 47);
      v35 = v34 >= 0 ? (const void *)(a1 + v29 + 24) : *(const void **)(a1 + v29 + 24);
      v36 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 47) : *(_QWORD *)(v30 + 32);
      v37 = v36 >= v33 ? v33 : v36;
      v38 = memcmp(v32, v35, v37);
      if (!v38)
        break;
      if ((v38 & 0x80000000) == 0)
      {
        v19 = (uint64_t)v15;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 3;
      *(_OWORD *)(v30 + 48) = *v31;
      *(_QWORD *)(v30 + 64) = *(_QWORD *)(a1 + v29 + 40);
      *(_BYTE *)(v30 + 47) = 0;
      *(_BYTE *)v31 = 0;
      v29 -= 24;
      if (v29 == -48)
      {
        v19 = a1;
        goto LABEL_23;
      }
    }
    if (v33 < v36)
      goto LABEL_48;
    v19 = a1 + v29 + 48;
LABEL_23:
    v2 = v42;
LABEL_24:
    v20 = v43;
    *(_QWORD *)(v19 + 16) = v44;
    *(_OWORD *)v19 = v20;
    if (++v18 == 8)
      return v16 + 3 == v2;
LABEL_25:
    v15 = v16;
    v17 += 24;
    v16 += 3;
    if (v16 != v2)
      continue;
    return 1;
  }
}

__n128 sub_20FD0BF94(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  __n128 result;
  const void *v17;
  __int128 v18;
  const void *v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  sub_20FD0BA48((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return result;
  }
  else if (v10 >= v13)
  {
    return result;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = *((char *)a3 + 23);
  if (v20 >= 0)
    v21 = a3;
  else
    v21 = *(const void **)a3;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a3 + 23);
  else
    v22 = *((_QWORD *)a3 + 1);
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = a2;
  else
    v24 = *(const void **)a2;
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)a2 + 23);
  else
    v25 = *((_QWORD *)a2 + 1);
  if (v25 >= v22)
    v26 = v22;
  else
    v26 = v25;
  v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v25)
  {
    return result;
  }
  v28 = *((_QWORD *)a2 + 2);
  v29 = *a2;
  v30 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v30;
  *a3 = v29;
  *((_QWORD *)a3 + 2) = v28;
  v31 = *((char *)a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(const void **)a2;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 23);
  else
    v33 = *((_QWORD *)a2 + 1);
  v34 = *(char *)(a1 + 23);
  if (v34 >= 0)
    v35 = (const void *)a1;
  else
    v35 = *(const void **)a1;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a1 + 23);
  else
    v36 = *(_QWORD *)(a1 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if (v38 < 0)
      goto LABEL_58;
  }
  else if (v33 < v36)
  {
LABEL_58:
    v39 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v40 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v40;
    *a2 = (__int128)result;
    *((_QWORD *)a2 + 2) = v39;
  }
  return result;
}

__n128 sub_20FD0C13C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  __int128 v20;
  const void *v21;
  int v22;
  __int128 *v23;
  size_t v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  const void *v45;
  size_t v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  sub_20FD0BF94(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v15)
  {
    return result;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *(__int128 **)a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = *((_QWORD *)a4 + 1);
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const void *)a3;
  else
    v26 = *(const void **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  if (v27 >= v24)
    v28 = v24;
  else
    v28 = v27;
  v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0)
      return result;
  }
  else if (v24 >= v27)
  {
    return result;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(_OWORD *)a3;
  v32 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v32;
  *a4 = v31;
  *((_QWORD *)a4 + 2) = v30;
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = (const void *)a3;
  else
    v34 = *(const void **)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = *(char *)(a2 + 23);
  if (v36 >= 0)
    v37 = (const void *)a2;
  else
    v37 = *(const void **)a2;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a2 + 23);
  else
    v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v35)
    v39 = v35;
  else
    v39 = v38;
  v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0)
      return result;
  }
  else if (v35 >= v38)
  {
    return result;
  }
  v41 = *(_QWORD *)(a2 + 16);
  v42 = *(_OWORD *)a2;
  v43 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(_QWORD *)(a3 + 16) = v41;
  v44 = *(char *)(a2 + 23);
  if (v44 >= 0)
    v45 = (const void *)a2;
  else
    v45 = *(const void **)a2;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a2 + 23);
  else
    v46 = *(_QWORD *)(a2 + 8);
  v47 = *(char *)(a1 + 23);
  if (v47 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v46)
    v50 = v46;
  else
    v50 = v49;
  v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0)
      return result;
  }
  else if (v46 >= v49)
  {
    return result;
  }
  v52 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v53 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 16) = v52;
  return result;
}

_QWORD *sub_20FD0C34C(_QWORD *a1, char *a2, uint64_t *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = (_BYTE *)operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a3[1];
  v15 = *a3;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20FD0CB24(v6, a2, (uint64_t)&v15);
  *a1 = v7;
  v11 = v16;
  if (!v16)
    return a1;
  v12 = (unint64_t *)&v16->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20FD0C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  MEMORY[0x212BC6398](v10, 0x10F2C4024D7300FLL);
  _Unwind_Resume(a1);
}

void sub_20FD0C480(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  size_t v12;
  std::string::size_type v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  const __CFAllocator *v20;
  unint64_t i;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  CFAbsoluteTime v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count_vtbl *StringWithDate;
  size_t size;
  std::string *v30;
  _BYTE *v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string *v39;
  std::string::size_type v40;
  unint64_t v41;
  unint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  std::string::size_type v47;
  unint64_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string v58;
  std::string v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  CFDateRef date;
  std::__shared_weak_count *v63;

  if (!*(_BYTE *)(*(_QWORD *)a1 + 24))
  {
    v13 = operator new();
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 208) = 0u;
    *(_OWORD *)(v13 + 224) = 0u;
    *(_OWORD *)(v13 + 240) = 0u;
    *(_OWORD *)(v13 + 256) = 0u;
    *(_QWORD *)(v13 + 272) = 0;
    sub_20E863438(v13);
    v59.__r_.__value_.__r.__words[0] = v13;
    std::ostream::operator<<();
    sub_20E86A980((_QWORD *)(v13 + 16), (uint64_t)": ", 2);
    v14 = *(char *)(a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a3 + 23);
    else
      v16 = *(_QWORD *)(a3 + 8);
    sub_20E86A980((_QWORD *)(v13 + 16), v15, v16);
    v17 = *(_DWORD *)(v13 + 120);
    if ((v17 & 0x10) != 0)
    {
      v48 = *(_QWORD *)(v13 + 112);
      v49 = *(_QWORD *)(v13 + 72);
      if (v48 < v49)
      {
        *(_QWORD *)(v13 + 112) = v49;
        v48 = v49;
      }
      v50 = *(const void **)(v13 + 64);
      v18 = v48 - (_QWORD)v50;
      if (v48 - (unint64_t)v50 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_95;
    }
    else
    {
      if ((v17 & 8) == 0)
      {
        v18 = 0;
        a4[23] = 0;
        goto LABEL_89;
      }
      v50 = *(const void **)(v13 + 40);
      v18 = *(_QWORD *)(v13 + 56) - (_QWORD)v50;
      if (v18 > 0x7FFFFFFFFFFFFFF7)
LABEL_95:
        sub_20E860B7C();
    }
    if (v18 >= 0x17)
    {
      v51 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v51 = v18 | 7;
      v52 = v51 + 1;
      v53 = operator new(v51 + 1);
      *((_QWORD *)a4 + 1) = v18;
      *((_QWORD *)a4 + 2) = v52 | 0x8000000000000000;
      *(_QWORD *)a4 = v53;
      a4 = v53;
    }
    else
    {
      a4[23] = v18;
      if (!v18)
      {
LABEL_89:
        a4[v18] = 0;
        v47 = v59.__r_.__value_.__r.__words[0];
        if (!v59.__r_.__value_.__r.__words[0])
          return;
        goto LABEL_90;
      }
    }
    memmove(a4, v50, v18);
    goto LABEL_89;
  }
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_QWORD *)(v8 + 272) = 0;
  sub_20E863438(v8);
  v57 = v8;
  v9 = *(_QWORD **)a1;
  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
  {
    v9 = (_QWORD *)*v9;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v10 < 2)
    {
LABEL_4:
      v11 = *(_DWORD *)(v8 + 120);
      if ((v11 & 0x10) == 0)
        goto LABEL_5;
LABEL_65:
      v41 = *(_QWORD *)(v8 + 112);
      v42 = *(_QWORD *)(v8 + 72);
      if (v41 < v42)
      {
        *(_QWORD *)(v8 + 112) = v42;
        v41 = v42;
      }
      v43 = *(const void **)(v8 + 64);
      v12 = v41 - (_QWORD)v43;
      if (v41 - (unint64_t)v43 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_84;
      goto LABEL_68;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
    if (v10 < 2)
      goto LABEL_4;
  }
  v19 = 0;
  v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  for (i = 1; i < v10; i += 2)
  {
    if (*((_BYTE *)v9 + v19) == 37)
    {
      v25 = *((char *)v9 + i);
      if (v25 > 108)
      {
        if (v25 == 109)
        {
          v22 = *(char *)(a3 + 23);
          if (v22 >= 0)
            v23 = a3;
          else
            v23 = *(_QWORD *)a3;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(a3 + 23);
          else
            v24 = *(_QWORD *)(a3 + 8);
          sub_20E86A980((_QWORD *)(v8 + 16), v23, v24);
        }
        else if (v25 == 116)
        {
          std::ostream::operator<<();
        }
      }
      else if (v25 == 37)
      {
        sub_20E86A980((_QWORD *)(v8 + 16), (uint64_t)"%", 1);
      }
      else if (v25 == 84)
      {
        v26 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), a2);
        v27 = (std::__shared_weak_count_vtbl *)CFDateCreate(v20, v26);
        sub_20EA5EB24((std::__shared_weak_count_vtbl **)&date, v27, 0);
        StringWithDate = (std::__shared_weak_count_vtbl *)CFDateFormatterCreateStringWithDate(v20, *(CFDateFormatterRef *)(*(_QWORD *)a1 + 48), date);
        sub_20E8F3E5C(&v60, StringWithDate, 0);
        sub_20EA5E5C4((CFIndex)v60, &v59);
        v58 = v59;
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v58;
          else
            v30 = (std::string *)v58.__r_.__value_.__r.__words[0];
          v31 = memchr(v30, 46, size);
          if (v31)
            v32 = v31 - (_BYTE *)v30;
          else
            v32 = -1;
        }
        else
        {
          v32 = -1;
        }
        std::string::replace(&v58, v32, 1uLL, 1uLL, 44);
        v33 = v61;
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = v63;
        if (v63)
        {
          v37 = (unint64_t *)&v63->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v8 = v57;
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v58;
        else
          v39 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        else
          v40 = v58.__r_.__value_.__l.__size_;
        sub_20E86A980((_QWORD *)(v57 + 16), (uint64_t)v39, v40);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v59.__r_.__value_.__s.__data_[0] = *((_BYTE *)v9 + v19);
      sub_20E86A980((_QWORD *)(v8 + 16), (uint64_t)&v59, 1);
      i = v19;
    }
    v19 = i + 1;
  }
  v8 = v57;
  v11 = *(_DWORD *)(v57 + 120);
  if ((v11 & 0x10) != 0)
    goto LABEL_65;
LABEL_5:
  if ((v11 & 8) == 0)
  {
    v12 = 0;
    a4[23] = 0;
    goto LABEL_75;
  }
  v43 = *(const void **)(v8 + 40);
  v12 = *(_QWORD *)(v8 + 56) - (_QWORD)v43;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_84:
    sub_20E860B7C();
LABEL_68:
  if (v12 >= 0x17)
  {
    v44 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v44 = v12 | 7;
    v45 = v44 + 1;
    v46 = operator new(v44 + 1);
    *((_QWORD *)a4 + 1) = v12;
    *((_QWORD *)a4 + 2) = v45 | 0x8000000000000000;
    *(_QWORD *)a4 = v46;
    a4 = v46;
    goto LABEL_74;
  }
  a4[23] = v12;
  if (v12)
LABEL_74:
    memmove(a4, v43, v12);
LABEL_75:
  a4[v12] = 0;
  v47 = v57;
  if (!v57)
    return;
LABEL_90:
  v54 = MEMORY[0x24BEDB7F0];
  v55 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v47 = *MEMORY[0x24BEDB7F0];
  v56 = *(_QWORD *)(v54 + 72);
  *(_QWORD *)(v47 + *(_QWORD *)(v55 - 24)) = *(_QWORD *)(v54 + 64);
  *(_QWORD *)(v47 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v47 + 16) = v56;
  if (*(char *)(v47 + 111) < 0)
    operator delete(*(void **)(v47 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v47 + 128);
  MEMORY[0x212BC6398](v47, 0x10B2C40EED050F3);
}

void sub_20FD0CA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD0CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20FD0DE48(&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FD0CB14);
}

void sub_20FD0CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a24);
  sub_20FD0DE48(&a10);
  _Unwind_Resume(a1);
}

void sub_20FD0CB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20FD0CB24(_BYTE *__dst, char *a2, uint64_t a3)
{
  __int128 v6;
  int v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  CFDateFormatterRef ISO8601Formatter;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  *__dst = 0;
  __dst[24] = 0;
  if (a2[24])
  {
    if (a2[23] < 0)
    {
      sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v6;
    }
    __dst[24] = 1;
  }
  *((_OWORD *)__dst + 2) = 0u;
  *((_OWORD *)__dst + 3) = 0u;
  if (!a2[24]
    || ((v7 = a2[23], v8 = v7 < 0, v7 >= 0) ? (v9 = a2) : (v9 = *(char **)a2),
        !v8 ? (v10 = a2[23]) : (v10 = *((_QWORD *)a2 + 1)),
        (v11 = v10 - 2, v10 < 2) || &v9[v10 - 1] == v9))
  {
LABEL_20:
    v13 = *(_QWORD **)a3;
    goto LABEL_21;
  }
  v12 = v9 + 1;
  if (*(v12 - 1) != 37)
    goto LABEL_17;
LABEL_16:
  if (*v12 != 84)
  {
LABEL_17:
    while (v11)
    {
      --v11;
      if (*v12++ == 37)
        goto LABEL_16;
    }
    goto LABEL_20;
  }
  v13 = *(_QWORD **)a3;
  if (v11 != -2)
  {
    if (v13)
    {
      v21 = *(_QWORD **)(a3 + 8);
      if (v21)
      {
        v22 = v21 + 1;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      v24 = atomic_load((unsigned __int8 *)&qword_254A6D9D0);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9D0))
      {
        __cxa_atexit((void (*)(void *))nullsub_1020, &off_254A54FD0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9D0);
      }
      v13 = (_QWORD *)operator new();
      sub_20FD2DF9C(v13, (uint64_t)&off_254A54FD0, 5uLL);
      v21 = (_QWORD *)operator new();
      *v21 = &off_24CA05EC0;
      v21[1] = 0;
      v21[2] = 0;
      v21[3] = v13;
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)__dst + 5);
    *((_QWORD *)__dst + 4) = v13;
    *((_QWORD *)__dst + 5) = v21;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    ISO8601Formatter = CFDateFormatterCreateISO8601Formatter(0, 0xBB3uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    v31 = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA05F10;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = (std::__shared_weak_count_vtbl *)ISO8601Formatter;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)__dst + 7);
    *((_QWORD *)__dst + 6) = ISO8601Formatter;
    *((_QWORD *)__dst + 7) = v30;
    if (!v17)
      return __dst;
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (v35)
      return __dst;
    goto LABEL_52;
  }
LABEL_21:
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
  {
    *((_QWORD *)__dst + 4) = v13;
    *((_QWORD *)__dst + 5) = 0;
    return __dst;
  }
  v15 = (unint64_t *)(v14 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (std::__shared_weak_count *)*((_QWORD *)__dst + 5);
  *((_QWORD *)__dst + 4) = v13;
  *((_QWORD *)__dst + 5) = v14;
  if (!v17)
    return __dst;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return __dst;
LABEL_52:
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return __dst;
}

void sub_20FD0CE60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_20E86665C(v3);
  sub_20E86665C(v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_20FD0CF04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD0CF28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20FD0CF40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3dgn14ITimeConverterEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn14ITimeConverterEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3dgn14ITimeConverterEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn14ITimeConverterEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD0CFB4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD0CFD8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20FD0CFF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP17__CFDateFormatterEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP17__CFDateFormatterEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP17__CFDateFormatterEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP17__CFDateFormatterEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20FD0D068(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 40);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*(_BYTE *)(v2 + 24))
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FD0D138()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD0D14C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v11;
  void *v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  unsigned __int8 v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  unsigned __int8 v38;
  char v39;
  char v40;
  __int128 v41;
  char v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  __int128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(v25, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)a1;
    v26 = *(_QWORD *)(a1 + 16);
  }
  v41 = *(_OWORD *)a3;
  v42 = *(_BYTE *)(a3 + 16);
  if (SHIBYTE(v26) < 0)
  {
    sub_20E860C04(__p, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v25;
    v28 = v26;
  }
  v46 = v41;
  v47 = v42;
  sub_20FD1AA60((uint64_t)__p, a2, &v46, a4, a5, (uint64_t)&v29);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__p[0]);
    if (v40)
      goto LABEL_9;
  }
  else if (v40)
  {
LABEL_9:
    v16 = (_QWORD *)operator new();
    v17 = *((_QWORD *)&v29 + 1);
    *((_QWORD *)&v29 + 1) = 0;
    *v16 = &off_24CA06A20;
    v16[1] = v17;
    *(_QWORD *)a6 = v16;
    *(_BYTE *)(a6 + 120) = 1;
    goto LABEL_10;
  }
  if (!v39)
  {
    *(_OWORD *)a6 = v29;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    *(_BYTE *)(a6 + 120) = 0;
    goto LABEL_10;
  }
  v19 = v32;
  if (v32)
  {
    v20 = v30;
    v45[0] = v31;
    *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v31 + 7);
    v11 = HIBYTE(v31);
    v31 = 0uLL;
    v30 = 0;
    v21 = v38;
    if (v38)
      goto LABEL_21;
LABEL_44:
    v22 = 0;
    *(_OWORD *)a6 = v29;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    *(_BYTE *)(a6 + 40) = 0;
    if (!v19)
      goto LABEL_23;
    goto LABEL_22;
  }
  v20 = 0;
  v21 = v38;
  if (!v38)
    goto LABEL_44;
LABEL_21:
  v22 = v33;
  v44[0] = v34;
  *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)((char *)&v34 + 7);
  v13 = HIBYTE(v34);
  v33 = 0;
  v34 = 0uLL;
  v14 = v35;
  v12 = v36;
  v43[0] = v37;
  *(_QWORD *)((char *)v43 + 7) = *(_QWORD *)((char *)&v37 + 7);
  v15 = HIBYTE(v37);
  v36 = 0;
  v37 = 0uLL;
  *(_OWORD *)a6 = v29;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 112) = 0;
  *(_BYTE *)(a6 + 40) = 0;
  if (v19)
  {
LABEL_22:
    v23 = v45[0];
    *(_QWORD *)(a6 + 16) = v20;
    *(_QWORD *)(a6 + 24) = v23;
    *(_QWORD *)(a6 + 31) = *(_QWORD *)((char *)v45 + 7);
    *(_BYTE *)(a6 + 39) = v11;
    v45[0] = 0;
    *(_QWORD *)((char *)v45 + 7) = 0;
    *(_BYTE *)(a6 + 40) = 1;
    v20 = 0;
    v11 = 0;
  }
LABEL_23:
  *(_BYTE *)(a6 + 48) = 0;
  *(_BYTE *)(a6 + 104) = 0;
  if (v21)
  {
    v24 = v44[0];
    *(_QWORD *)(a6 + 48) = v22;
    *(_QWORD *)(a6 + 56) = v24;
    *(_QWORD *)(a6 + 63) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a6 + 71) = v13;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_QWORD *)(a6 + 72) = v14;
    *(_QWORD *)(a6 + 80) = v12;
    *(_QWORD *)(a6 + 88) = v43[0];
    *(_QWORD *)(a6 + 95) = *(_QWORD *)((char *)v43 + 7);
    *(_BYTE *)(a6 + 103) = v15;
    v43[0] = 0;
    *(_QWORD *)((char *)v43 + 7) = 0;
    *(_BYTE *)(a6 + 104) = 1;
  }
  *(_BYTE *)(a6 + 112) = 1;
  *(_BYTE *)(a6 + 120) = 0;
  if (v19 && v11 < 0)
    operator delete(v20);
LABEL_10:
  if (v40)
  {
    v18 = *((_QWORD *)&v29 + 1);
    *((_QWORD *)&v29 + 1) = 0;
    if (!v18)
      goto LABEL_37;
    sub_20FD0FEE8(v18);
    sub_20FCF4D74(v18 + 104);
    if (*(_BYTE *)(v18 + 96) && *(char *)(v18 + 95) < 0)
    {
      operator delete(*(void **)(v18 + 72));
      if ((*(char *)(v18 + 23) & 0x80000000) == 0)
        goto LABEL_16;
    }
    else if ((*(char *)(v18 + 23) & 0x80000000) == 0)
    {
LABEL_16:
      MEMORY[0x212BC6398](v18, 0x1032C40AA77330FLL);
      goto LABEL_37;
    }
    operator delete(*(void **)v18);
    goto LABEL_16;
  }
  if (v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(v36);
      if (SHIBYTE(v34) < 0)
        operator delete(v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete(v30);
  }
LABEL_37:
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
}

void sub_20FD0D4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD0D538(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    sub_20FD205B8((uint64_t *)(a1 + 8), 0);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_20FD0D5D8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24CA05FC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20FD0D654(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *a1 = off_24CA05FC0;
    a1[1] = v5;
    a1[2] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    if (v5)
      goto LABEL_10;
  }
  else
  {
    *a1 = off_24CA05FC0;
    a1[1] = v5;
    a1[2] = 0;
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Input.cpp", 39, (uint64_t)"diagnostics_clock", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!v6)
    goto LABEL_14;
LABEL_10:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    *a1 = &off_24CA05FF0;
    v12 = a1 + 3;
    v13 = *(const void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_22;
  }
  else
  {
LABEL_14:
    *a1 = &off_24CA05FF0;
    v12 = a1 + 3;
    v13 = *(const void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_22;
  }
  v14 = __dynamic_cast(v13, (const struct __class_type_info *)&unk_24CA05360, (const struct __class_type_info *)&unk_24CA05C00, 0);
  if (v14)
  {
    v15 = *(_QWORD *)(a3 + 8);
    a1[3] = v14;
    a1[4] = v15;
    if (!v15)
      return a1;
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    if (*v12)
      return a1;
    goto LABEL_23;
  }
LABEL_22:
  *v12 = 0;
  v12[1] = 0;
LABEL_23:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Input.cpp", 52, (uint64_t)"engine_channel_", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20FD0D81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD0D838(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20E86665C(v2);
  sub_20FD0D5D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD0D854(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *a1 = off_24CA05FC0;
      v5 = (std::__shared_weak_count *)a1[2];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  *a1 = off_24CA05FC0;
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20FD0D918(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *a1 = off_24CA05FC0;
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    *a1 = off_24CA05FC0;
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD0D9DC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  timespec __rqtp;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 32);
  do
    v5 = __ldaxr(v4);
  while (__stxr(1u, v4));
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        __rqtp = (timespec)xmmword_2102DBC80;
        result = nanosleep(&__rqtp, 0);
      }
      ++v6;
      do
        v7 = __ldaxr(v4);
      while (__stxr(1u, v4));
    }
    while (v7);
  }
  v8 = *(uint64_t **)(v2 + 16);
  v9 = *(unsigned int **)(v2 + 24);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  atomic_store(0, v4);
  v13 = *v8;
  v12 = v8[1];
  *a2 = v13;
  a2[1] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v9)
  {
    v16 = v9 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v19 = v9 + 3;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  return result;
}

void sub_20FD0DB08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    sub_20FCFC100(v4, a2);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Input.h", 192, (uint64_t)"engine_channel_", 15, (uint64_t)"Input was moved from", 20, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FCFC100(*(_QWORD *)(a1 + 24), a2);
  }
}

uint64_t sub_20FD0DB80@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20FD0DBA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E8BFE38(v5 + 16, *a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA06038[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FD0DDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD0DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD0DE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD0DE48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x24BEDB7F0];
    v4 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v2 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v2 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v2 + 16) = v5;
    if (*(char *)(v2 + 111) < 0)
      operator delete(*(void **)(v2 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v2 + 128);
    MEMORY[0x212BC6398](v2, 0x10B2C40EED050F3);
  }
  return a1;
}

uint64_t sub_20FD0DEF4(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = a1 + 24;
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24)) = v11;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v12, (void *)(a1 + 24));
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  v16 = *a2;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_20E8B469C(v8);
  return a1;
}

void sub_20FD0E024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FD0E078(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  unsigned __int8 v6;
  int *v7;
  int v8;
  __int128 v9;
  __n128 result;
  uint64_t (**v11)();

  v6 = atomic_load((unsigned __int8 *)&qword_254A6D8F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D8F8))
  {
    v11 = &off_24C9B6C08;
    sub_20E9E557C((uint64_t)&v11, byte_254A6D868);
    __cxa_atexit((void (*)(void *))sub_20E9E5F54, byte_254A6D868, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D8F8);
  }
  *(_OWORD *)a1 = *a2;
  v7 = sub_20E87C634();
  v8 = *v7;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)v7 + 32))
  {
    if (*((char *)v7 + 31) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *((void **)v7 + 1), *((_QWORD *)v7 + 2));
    }
    else
    {
      v9 = *(_OWORD *)(v7 + 2);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)v7 + 3);
      *(_OWORD *)(a1 + 24) = v9;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  sub_20FCF4B4C((char *)(a1 + 56), (__int128 *)byte_254A6D868);
  *(_BYTE *)(a1 + 200) = 1;
  result = *a3;
  *(__n128 *)(a1 + 208) = *a3;
  *(_QWORD *)(a1 + 224) = a3[1].n128_u64[0];
  return result;
}

void sub_20FD0E198(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D8F8);
  _Unwind_Resume(a1);
}

void sub_20FD0E1B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD0E1D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 232))(*(_QWORD *)(a1 + 24), a1);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 8))
      std::mutex::unlock(*(std::mutex **)v2);
    MEMORY[0x212BC6398](v2, 0x1020C405F07FB98);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8))
        std::mutex::unlock(*(std::mutex **)v3);
      MEMORY[0x212BC6398](v3, 0x1020C405F07FB98);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FD0E298(uint64_t a1, uint64_t a2, std::mutex *a3, char a4)
{
  uint64_t v7;
  std::string *v8;
  void *v9;
  char v10;
  uint64_t v11;
  std::string v13;
  void *__p;
  _BYTE v15[15];
  char v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v7 = operator new();
    *(_QWORD *)v7 = a3;
    *(_BYTE *)(v7 + 8) = 1;
    std::mutex::lock(a3);
    v17 = v7;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v13 = *(std::string *)a1;
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v17 = 0;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&v13, *(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_6:
  v8 = std::string::append(&v13, ".lock", 5uLL);
  v9 = (void *)v8->__r_.__value_.__r.__words[0];
  v18[0] = v8->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v18 + 7);
  __p = v9;
  *(_QWORD *)v15 = v18[0];
  v16 = v10;
  v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 176))(a2, &__p);
  if ((v16 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_11:
    operator delete(v13.__r_.__value_.__l.__data_);
    if (!v7)
      return v11;
    goto LABEL_12;
  }
  operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
LABEL_8:
  if (!v7)
    return v11;
LABEL_12:
  if (*(_BYTE *)(v7 + 8))
    std::mutex::unlock(*(std::mutex **)v7);
  MEMORY[0x212BC6398](v7, 0x1020C405F07FB98);
  return v11;
}

void sub_20FD0E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20FD08B8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FD0E43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void sub_20FD0E460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      sub_20FD08B8C(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  sub_20FD08B8C(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD0E4BC(uint64_t a1, uint64_t a2, uint64_t a3, std::mutex *a4, char a5)
{
  std::string *v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _BOOL4 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string v29;
  std::__fs::filesystem::path v30;
  __int128 v31;
  void *__p[2];
  unsigned __int8 v33;
  char v34;
  std::string __dst;
  const char *v36;
  const char *v37;
  std::string *p_dst;
  _BYTE v39[15];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    sub_20E860C04(&v29, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    __dst = v29;
  v10 = std::string::append(&__dst, ".lock", 5uLL);
  v11 = v10->__r_.__value_.__r.__words[0];
  *(_QWORD *)v39 = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)&v39[7] = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v30.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v39[7];
  v30.__pn_.__r_.__value_.__r.__words[0] = v11;
  v30.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v39;
  *((_BYTE *)&v30.__pn_.__r_.__value_.__s + 23) = v12;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    *(_QWORD *)&v31 = a3;
    if (a5)
      goto LABEL_9;
  }
  else
  {
    *(_QWORD *)&v31 = a3;
    if (a5)
    {
LABEL_9:
      v13 = operator new();
      *(_QWORD *)v13 = a4;
      *(_BYTE *)(v13 + 8) = 1;
      std::mutex::lock(a4);
      v14 = v31;
      goto LABEL_12;
    }
  }
  v13 = 0;
  v14 = a3;
LABEL_12:
  *((_QWORD *)&v31 + 1) = v13;
  if (((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v14 + 176))(v14, &v30) & 1) != 0)
  {
    v40 = 0;
    sub_20E9ECA4C(v39, "lock file ");
    sub_20EB04FEC((uint64_t)&v34, (uint64_t)v39, (uint64_t)&v30);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)" already exists";
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
    v36 = " already exists";
    v37 = " already exists";
    if (v40 == -1)
      sub_20E877AB8();
    p_dst = &__dst;
    ((void (*)(std::string **, _BYTE *))off_24CA06218[v40])(&p_dst, v39);
    if (v40 == -1)
      sub_20E877AB8();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_dst;
    ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24CA061E8[v40])(__p, &__dst, v39);
    if (v40 != -1)
      ((void (*)(std::string *, _BYTE *))off_24CA06188[v40])(&__dst, v39);
    if ((v33 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v16 = v33;
    else
      v16 = (uint64_t)__p[1];
    v17 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/ServerClient.cpp", 164, (uint64_t)"!filesystem_->exists(lock_file_path_)", 37, (uint64_t)v15, v16, (void (*)(void **))sub_21023DDB0);
    if ((char)v33 < 0)
      operator delete(__p[0]);
    if (v17)
      abort();
  }
  sub_210224144(&v30, 0x30u, v31, &__dst);
  v18 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
  if (__dst.__r_.__value_.__r.__words[2])
  {
    v19 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
LABEL_31:
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_32:
  sub_210224144((const std::__fs::filesystem::path *)a2, 0x30u, a3, &__dst);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v30.__pn_.__r_.__value_.__l + 2);
  v21 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a1 + 40) = &off_24CA1F288;
  *(_QWORD *)(a1 + 48) = v21;
  *(_OWORD *)a1 = *(_OWORD *)&v30.__pn_.__r_.__value_.__l.__data_;
  memset(&v30, 0, sizeof(v30));
  v22 = v31;
  *((_QWORD *)&v31 + 1) = 0;
  *(_OWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2])
    {
      v26 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  return sub_20FD0E1D8((uint64_t)&v30);
}

void sub_20FD0E87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD0E954(uint64_t a1, uint64_t a2)
{
  std::chrono::steady_clock::time_point v4;
  int v5;
  std::chrono::nanoseconds __ns;
  void *__p[2];
  uint64_t v9;

  v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_3;
LABEL_2:
  *(_OWORD *)__p = *(_OWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v5 = sub_20FD0E298((uint64_t)__p, a2, 0, 0);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
    if ((v5 & 1) == 0 || std::chrono::steady_clock::now().__d_.__rep_ - v4.__d_.__rep_ >= 0)
      return v5 ^ 1u;
    __ns.__rep_ = 10000;
    std::this_thread::sleep_for (&__ns);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_2;
LABEL_3:
    sub_20E860C04(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
}

void sub_20FD0EA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD0EA30(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  std::__fs::filesystem::path v5;
  std::__fs::filesystem::path __p;

  sub_20FD0EB50((uint64_t)&v5, "server_info_", a3);
  __p = v5;
  memset(&v5, 0, sizeof(v5));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  sub_20E8A944C(a1, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_20FD0EAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD0EB50(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t result;
  char v5;
  _DWORD v6[6];
  int v7;
  _QWORD v8[5];
  _QWORD *v9;

  v7 = 0;
  sub_20EAA20C4(v6, a2);
  sub_20EE1E7C4((uint64_t)&v5, (uint64_t)v6, a3);
  v8[0] = v6;
  v8[1] = ".json";
  v8[2] = v6;
  v8[3] = ".json";
  v8[4] = ".json";
  if (v7 == -1)
    sub_20E877AB8();
  v9 = v8;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06230[v7])(&v9, v6);
  if (v7 == -1)
    sub_20E877AB8();
  v8[0] = &v9;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA061E8[v7])(v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA06188[v7])(v8, v6);
  return result;
}

void sub_20FD0EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EC98(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  std::__fs::filesystem::path v5;
  std::__fs::filesystem::path __p;

  sub_20FD0EB50((uint64_t)&v5, "client_info_", a3);
  __p = v5;
  memset(&v5, 0, sizeof(v5));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  sub_20E8A944C(a1, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_20FD0ED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FD0EDB8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  std::__fs::filesystem::path v6;
  std::__fs::filesystem::path __p;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v10 = 0;
  sub_20E9737A0(v9, "client_");
  sub_20EE1E7C4((uint64_t)&v8, (uint64_t)v9, a3);
  v11[0] = v9;
  v11[1] = "_alive";
  v11[2] = v9;
  v11[3] = "_alive";
  v11[4] = "_alive";
  if (v10 == -1)
    sub_20E877AB8();
  v12 = v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06248[v10])(&v12, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v11[0] = &v12;
  ((void (*)(std::__fs::filesystem::path *__return_ptr, _QWORD *, _DWORD *))off_24CA061E8[v10])(&v6, v11, v9);
  if (v10 != -1)
    ((void (*)(_QWORD *, _DWORD *))off_24CA06188[v10])(v11, v9);
  __p = v6;
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  sub_20E8A944C(a1, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_20FD0EF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FD0EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD0EFF8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unint64_t a5)
{
  std::__fs::filesystem::path v10;
  std::__fs::filesystem::path __p;
  char v12;
  char v13;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20E8F6670(v14, "client_response_from_");
  sub_20EE1E7C4((uint64_t)&v13, (uint64_t)v14, a3);
  v18 = (std::string *)v14;
  v19 = (std::string *)"_to_";
  v20 = v14;
  v21 = (std::string *)"_to_";
  v22 = (std::string *)"_to_";
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24CA06278[v15])(&v16, v14);
  sub_20EE1E7C4((uint64_t)&v12, (uint64_t)v14, a4);
  v18 = (std::string *)v14;
  v19 = (std::string *)"_n_";
  v20 = v14;
  v21 = (std::string *)"_n_";
  v22 = (std::string *)"_n_";
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24CA06260[v15])(&v16, v14);
  std::to_string(&v16, a5);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24CA061B8[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = (std::string *)".json";
  v20 = v14;
  v21 = (std::string *)".json";
  v22 = (std::string *)".json";
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24CA06230[v15])(&v16, v14);
  if (v15 == -1)
    sub_20E877AB8();
  v18 = &v16;
  ((void (*)(std::__fs::filesystem::path *__return_ptr, std::string **, _DWORD *))off_24CA061E8[v15])(&v10, &v18, v14);
  if (v15 != -1)
    ((void (*)(std::string **, _DWORD *))off_24CA06188[v15])(&v18, v14);
  __p = v10;
  memset(&v10, 0, sizeof(v10));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  sub_20E8A944C(a1, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void sub_20FD0F2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FD0F308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_20E877A60((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD0F35C(uint64_t a1)
{
  sub_20FCF4D74(a1 + 56);
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20FD0F3AC(uint64_t a1)
{
  void *__p[2];
  char v3;

  sub_20FD0EA30((uint64_t)__p, a1, (unsigned __int8 *)(a1 + 32));
  if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), __p) & 1) == 0)
    sub_20FD18D9C((uint64_t)__p, (__int128 *)(a1 + 48), *(std::mutex **)(a1 + 280), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 24));
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20FD0F42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD0F448(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  int v8;
  std::__fs::filesystem::path *v9;
  std::__fs::filesystem::path *v10;
  void *v11;
  __int128 v12;
  unint64_t v13;
  int v14;
  void **v15;
  void **v16;
  _OWORD *v19;
  void **v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  std::string::size_type v27;
  std::__fs::filesystem::path *v28;
  std::__fs::filesystem::path *p_s1;
  __int128 v30;
  char *v36;
  int v37;
  int v38;
  __int128 v40;
  int v41;
  std::string::size_type v42;
  _OWORD *v43;
  std::__fs::filesystem::path *v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  int v50;
  std::string::size_type v51;
  _DWORD *v52;
  std::__fs::filesystem::path *v53;
  __int128 v54;
  __int128 v55;
  int v56;
  std::string::size_type v57;
  _OWORD *v58;
  std::__fs::filesystem::path *v59;
  int v60;
  __int128 v61;
  int v62;
  std::string::size_type v63;
  _OWORD *v64;
  std::__fs::filesystem::path *v65;
  int v66;
  __int128 v67;
  std::__fs::filesystem::path *v68;
  std::string::size_type size;
  unsigned __int8 *v70;
  std::__fs::filesystem::path::__string_view v71;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v73;
  std::basic_string_view<_CharT, _Traits>::size_type v74;
  int v75;
  std::__fs::filesystem::path::__string_view v76;
  void **v77;
  void **p_data;
  void *v79;
  std::__fs::filesystem::path v80;
  void *__p[2];
  int64_t v82;
  std::__fs::filesystem::path __s1;
  unsigned __int8 v84;
  void *v85;
  std::__fs::filesystem::path *v86;
  std::__fs::filesystem::path v87;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v89;
  int v90;

  sub_210224D90(a1, 0x24u, "*", 1uLL, a2, (uint64_t)&v85);
  v8 = a4[16];
  if (a4[16])
  {
    v90 = 0;
    sub_20EE1E7C4((uint64_t)&__dst, (uint64_t)&v89, a4);
    if (v90 == -1)
      sub_20E877AB8();
    v87.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    ((void (*)(std::__fs::filesystem::path *__return_ptr, std::__fs::filesystem::path *, std::__fs::filesystem::path *))off_24CA061E8[v90])(&__dst, &v87, &v89);
    if (v90 != -1)
      ((void (*)(std::__fs::filesystem::path *, std::__fs::filesystem::path *))off_24CA06188[v90])(&v87, &v89);
    __s1 = __dst;
    v8 = 1;
    v84 = 1;
    v9 = (std::__fs::filesystem::path *)v85;
    v10 = v86;
    if (v85 == v86)
      goto LABEL_165;
    while (1)
    {
LABEL_13:
      if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20E860C04(__p, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        v12 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
        v82 = v9->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v12;
      }
      v13 = HIBYTE(v82);
      v14 = SHIBYTE(v82);
      if (v82 < 0)
        v13 = (unint64_t)__p[1];
      if (v13 < 0xC)
      {
        if (v13 < 7)
          goto LABEL_11;
        v15 = (void **)__p[0];
        if (v82 >= 0)
          v15 = __p;
        goto LABEL_75;
      }
      v16 = (void **)__p[0];
      v15 = __p;
      if (v82 < 0)
        v15 = (void **)__p[0];
      if (*v15 != (void *)0x695F726576726573 || *((_DWORD *)v15 + 2) != 1601136238)
      {
        if (*v15 == (void *)0x695F746E65696C63 && *((_DWORD *)v15 + 2) == 1601136238)
        {
          if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20E860C04(&v87, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
          }
          else
          {
            v30 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
            v87.__pn_.__r_.__value_.__r.__words[2] = v9->__pn_.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v87.__pn_.__r_.__value_.__l.__data_ = v30;
          }
          v41 = SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]);
          v42 = v87.__pn_.__r_.__value_.__r.__words[0];
          v43 = operator new(0x28uLL);
          v44 = &v87;
          if (v41 < 0)
            v44 = (std::__fs::filesystem::path *)v42;
          __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102E0950;
          v45 = HIDWORD(v44[1].__pn_.__r_.__value_.__r.__words[2]);
          v46 = *(_OWORD *)((char *)v44[1].__pn_.__r_.__value_.__r.__words + 4);
          *v43 = *(_OWORD *)((char *)&v44->__pn_.__r_.__value_.__r.__words[1] + 4);
          v43[1] = v46;
          *((_DWORD *)v43 + 8) = v45;
          *((_BYTE *)v43 + 36) = 0;
          v47 = sub_210232A1C((unsigned __int8 *)&__dst);
        }
        else if (v13 >= 0x15)
        {
          if (*v15 != (void *)0x725F746E65696C63
            || v15[1] != (void *)0x5F65736E6F707365
            || *(void **)((char *)v15 + 13) != (void *)0x5F6D6F72665F6573)
          {
            goto LABEL_68;
          }
          if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20E860C04(&v87, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
          }
          else
          {
            v49 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
            v87.__pn_.__r_.__value_.__r.__words[2] = v9->__pn_.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v87.__pn_.__r_.__value_.__l.__data_ = v49;
          }
          v62 = SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]);
          v63 = v87.__pn_.__r_.__value_.__r.__words[0];
          v64 = operator new(0x28uLL);
          v65 = &v87;
          if (v62 < 0)
            v65 = (std::__fs::filesystem::path *)v63;
          __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102E0950;
          v66 = *(_DWORD *)((char *)v65[2].__pn_.__r_.__value_.__r.__words + 5);
          v67 = *(_OWORD *)((char *)&v65[1].__pn_.__r_.__value_.__r.__words[1] + 5);
          *v64 = *(_OWORD *)((char *)&v65->__pn_.__r_.__value_.__r.__words[2] + 5);
          v64[1] = v67;
          *((_DWORD *)v64 + 8) = v66;
          *((_BYTE *)v64 + 36) = 0;
          v47 = sub_210232A1C((unsigned __int8 *)&__dst);
        }
        else
        {
          if (v13 < 0x12)
            goto LABEL_75;
LABEL_68:
          if (*v15 == (void *)0x6D5F726576726573
            && v15[1] == (void *)0x745F656761737365
            && *((_WORD *)v15 + 8) == 24431)
          {
            if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_20E860C04(&v87, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
            }
            else
            {
              v48 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
              v87.__pn_.__r_.__value_.__r.__words[2] = v9->__pn_.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v87.__pn_.__r_.__value_.__l.__data_ = v48;
            }
            v56 = SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]);
            v57 = v87.__pn_.__r_.__value_.__r.__words[0];
            v58 = operator new(0x28uLL);
            v59 = &v87;
            if (v56 < 0)
              v59 = (std::__fs::filesystem::path *)v57;
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
            *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102E0950;
            v60 = *(_DWORD *)&v59[2].__pn_.__r_.__value_.__s.__data_[2];
            v61 = *(_OWORD *)((char *)&v59[1].__pn_.__r_.__value_.__r.__words[1] + 2);
            *v58 = *(_OWORD *)((char *)&v59->__pn_.__r_.__value_.__r.__words[2] + 2);
            v58[1] = v61;
            *((_DWORD *)v58 + 8) = v60;
            *((_BYTE *)v58 + 36) = 0;
            v47 = sub_210232A1C((unsigned __int8 *)&__dst);
          }
          else
          {
LABEL_75:
            if (*(_DWORD *)v15 != 1701407843 || *(_DWORD *)((char *)v15 + 3) != 1601465957)
              goto LABEL_11;
            v36 = (char *)v15 + v13;
            v37 = *(_DWORD *)(v36 - 5);
            v38 = *(v36 - 1);
            if (v37 != 1986620513 || v38 != 101)
              goto LABEL_11;
            if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_20E860C04(&v87, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
            }
            else
            {
              v40 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
              v87.__pn_.__r_.__value_.__r.__words[2] = v9->__pn_.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v87.__pn_.__r_.__value_.__l.__data_ = v40;
            }
            v50 = SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]);
            v51 = v87.__pn_.__r_.__value_.__r.__words[0];
            v52 = operator new(0x28uLL);
            v53 = &v87;
            if (v50 < 0)
              v53 = (std::__fs::filesystem::path *)v51;
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
            *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102E0950;
            v54 = *(_OWORD *)((char *)v53->__pn_.__r_.__value_.__r.__words + 7);
            v55 = *(_OWORD *)((char *)&v53->__pn_.__r_.__value_.__r.__words[2] + 7);
            v52[8] = *(_DWORD *)((char *)&v53[1].__pn_.__r_.__value_.__r.__words[1] + 7);
            *(_OWORD *)v52 = v54;
            *((_OWORD *)v52 + 1) = v55;
            *((_BYTE *)v52 + 36) = 0;
            v47 = sub_210232A1C((unsigned __int8 *)&__dst);
          }
        }
        if (v47)
        {
          v89 = __dst;
          LOBYTE(v90) = 1;
          if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_111:
            operator delete(v87.__pn_.__r_.__value_.__l.__data_);
            if (!(_BYTE)v90)
              goto LABEL_11;
            goto LABEL_116;
          }
        }
        else
        {
          v89.__pn_.__r_.__value_.__s.__data_[0] = 0;
          LOBYTE(v90) = 0;
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_111;
          }
          else if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_111;
          }
        }
        if (!(_BYTE)v90)
          goto LABEL_11;
LABEL_116:
        if ((v89.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v89;
        else
          v68 = (std::__fs::filesystem::path *)v89.__pn_.__r_.__value_.__r.__words[0];
        if ((v89.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]);
        else
          size = v89.__pn_.__r_.__value_.__l.__size_;
        if (!sub_20FD1A73C(a1, (std::string::size_type)v68, size, a2, *a3))
        {
          if (*(char *)(a1 + 23) < 0)
            sub_20E860C04(&v87, *(void **)a1, *(_QWORD *)(a1 + 8));
          else
            v87 = *(std::__fs::filesystem::path *)a1;
          sub_20E8A944C((uint64_t)&v87, v9);
          v70 = a4;
          (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 232))(a2, &v87);
          v71 = std::__fs::filesystem::path::__parent_path(&v87);
          if (v71.__size_ >= 0x7FFFFFFFFFFFFFF8)
            sub_20E860B7C();
          if (v71.__size_ >= 0x17)
          {
            v73 = (v71.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v71.__size_ | 7) != 0x17)
              v73 = v71.__size_ | 7;
            v74 = v73 + 1;
            p_dst = (std::__fs::filesystem::path *)operator new(v73 + 1);
            __dst.__pn_.__r_.__value_.__l.__size_ = v71.__size_;
            __dst.__pn_.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v71.__size_;
            p_dst = &__dst;
            if (!v71.__size_)
            {
LABEL_136:
              p_dst->__pn_.__r_.__value_.__s.__data_[v71.__size_] = 0;
              v80 = __dst;
              v75 = *(char *)(a1 + 23);
              if (v75 >= 0)
                v76.__data_ = (const std::string_view::value_type *)a1;
              else
                v76.__data_ = *(const std::string_view::value_type **)a1;
              if (v75 >= 0)
                v76.__size_ = *(unsigned __int8 *)(a1 + 23);
              else
                v76.__size_ = *(_QWORD *)(a1 + 8);
              a4 = v70;
              if (std::__fs::filesystem::path::__compare(&v80, v76)
                && (*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 320))(a2, &v80))
              {
                (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 232))(a2, &v80);
              }
              if (SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v80.__pn_.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_147;
              }
              else if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_147;
              }
              operator delete(v87.__pn_.__r_.__value_.__l.__data_);
              if (!(_BYTE)v90)
                goto LABEL_11;
LABEL_148:
              if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_11;
              v11 = (void *)v89.__pn_.__r_.__value_.__r.__words[0];
              goto LABEL_10;
            }
          }
          memmove(p_dst, v71.__data_, v71.__size_);
          goto LABEL_136;
        }
LABEL_147:
        if (!(_BYTE)v90)
          goto LABEL_11;
        goto LABEL_148;
      }
      if (!a4[16])
        goto LABEL_11;
      v19 = operator new(0x28uLL);
      v20 = __p;
      if (v14 < 0)
        v20 = v16;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102E0950;
      v21 = *((_DWORD *)v20 + 11);
      v22 = *(_OWORD *)((char *)v20 + 28);
      *v19 = *(_OWORD *)((char *)v20 + 12);
      v19[1] = v22;
      *((_DWORD *)v19 + 8) = v21;
      *((_BYTE *)v19 + 36) = 0;
      if ((sub_210232A1C((unsigned __int8 *)&__dst) & 1) == 0)
      {
        if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_11;
        v11 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
        goto LABEL_10;
      }
      v89 = __dst;
      LOBYTE(v90) = 1;
      if (!v84)
        goto LABEL_154;
      v23 = HIBYTE(__s1.__pn_.__r_.__value_.__r.__words[2]);
      if ((__s1.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(__s1.__pn_.__r_.__value_.__r.__words[2]);
      else
        v24 = __s1.__pn_.__r_.__value_.__l.__size_;
      v25 = HIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]);
      v26 = SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]);
      if ((v89.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = v89.__pn_.__r_.__value_.__l.__size_;
      if (v24 != v25)
        goto LABEL_154;
      v27 = v89.__pn_.__r_.__value_.__r.__words[0];
      if ((v89.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v89;
      else
        v28 = (std::__fs::filesystem::path *)v89.__pn_.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__s1.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__pn_.__r_.__value_.__l.__data_, v28, __s1.__pn_.__r_.__value_.__l.__size_))
          goto LABEL_154;
      }
      else if (*((_BYTE *)&__s1.__pn_.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        while (p_s1->__pn_.__r_.__value_.__s.__data_[0] == v28->__pn_.__r_.__value_.__s.__data_[0])
        {
          p_s1 = (std::__fs::filesystem::path *)((char *)p_s1 + 1);
          v28 = (std::__fs::filesystem::path *)((char *)v28 + 1);
          if (!--v23)
          {
            if ((v89.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              goto LABEL_11;
            goto LABEL_161;
          }
        }
LABEL_154:
        if (*(char *)(a1 + 23) < 0)
          sub_20E860C04(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
        else
          __dst = *(std::__fs::filesystem::path *)a1;
        sub_20E8A944C((uint64_t)&__dst, v9);
        (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 232))(a2, &__dst);
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&v89.__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_11;
        }
        else if ((*((_BYTE *)&v89.__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          goto LABEL_11;
        }
LABEL_161:
        v27 = v89.__pn_.__r_.__value_.__r.__words[0];
        goto LABEL_9;
      }
      if ((v26 & 0x80000000) == 0)
        goto LABEL_11;
LABEL_9:
      v11 = (void *)v27;
LABEL_10:
      operator delete(v11);
LABEL_11:
      if (SHIBYTE(v82) < 0)
      {
        operator delete(__p[0]);
        if (++v9 == v10)
        {
LABEL_164:
          v8 = v84;
          goto LABEL_165;
        }
      }
      else if (++v9 == v10)
      {
        goto LABEL_164;
      }
    }
  }
  __s1.__pn_.__r_.__value_.__s.__data_[0] = 0;
  v84 = 0;
  v9 = (std::__fs::filesystem::path *)v85;
  v10 = v86;
  if (v85 != v86)
    goto LABEL_13;
LABEL_165:
  if (v8 && SHIBYTE(__s1.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__pn_.__r_.__value_.__l.__data_);
  v77 = (void **)v85;
  if (v85)
  {
    p_data = (void **)&v86->__pn_.__r_.__value_.__l.__data_;
    v79 = v85;
    if (v86 != v85)
    {
      do
      {
        if (*((char *)p_data - 1) < 0)
          operator delete(*(p_data - 3));
        p_data -= 3;
      }
      while (p_data != v77);
      v79 = v85;
    }
    v86 = (std::__fs::filesystem::path *)v77;
    operator delete(v79);
  }
}

void sub_20FD0FD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (a23 < 0)
    operator delete(__p);
  if (a31)
  {
    if (a30 < 0)
      operator delete(a25);
  }
  sub_20E8F74DC(&a33);
  _Unwind_Resume(a1);
}

void sub_20FD0FEE8(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 288))
  {
    v2 = *(std::mutex **)(a1 + 280);
    v3 = operator new();
    *(_QWORD *)v3 = v2;
    *(_BYTE *)(v3 + 8) = 1;
    std::mutex::lock(v2);
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  sub_20FD0EA30((uint64_t)__p, a1, (unsigned __int8 *)(a1 + 32));
  if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), __p))
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 232))(*(_QWORD *)(a1 + 24), __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8))
      std::mutex::unlock(*(std::mutex **)v3);
    MEMORY[0x212BC6398](v3, 0x1020C405F07FB98);
  }
}

void sub_20FD0FFD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  MEMORY[0x212BC6398](v21, 0x1020C405F07FB98);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t sub_20FD10040(__int128 *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  std::__fs::filesystem::path *v5;
  uint64_t v6;
  uint64_t v7;
  std::__fs::filesystem::path::__string_view v8;
  uint64_t (***p_dst)();
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  uint64_t (**v12)();
  int v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  _DWORD *p_p;
  uint64_t v19;
  int v20;
  uint64_t i;
  uint64_t v23;
  int v25;
  void *__p;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  _BYTE v28[7];
  unsigned __int8 v29;
  int64x2_t v30;
  uint64_t (**__dst)();
  std::basic_string_view<_CharT, _Traits>::size_type size;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[2];
  void *v36[2];
  uint64_t v37;
  uint64_t v38;

  if (*((_BYTE *)a1 + 288))
  {
    v2 = (std::mutex *)*((_QWORD *)a1 + 35);
    v3 = operator new();
    *(_QWORD *)v3 = v2;
    *(_BYTE *)(v3 + 8) = 1;
    std::mutex::lock(v2);
  }
  else
  {
    v3 = 0;
  }
  v38 = v3;
  v4 = *((_QWORD *)a1 + 3);
  __dst = off_24CA1EF00;
  size = v4;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v33, *(void **)a1, *((_QWORD *)a1 + 1));
    v4 = size;
  }
  else
  {
    v33 = *a1;
    v34 = *((_QWORD *)a1 + 2);
  }
  v35[0] = off_24CA1EF00;
  v35[1] = v4;
  *(_OWORD *)v36 = v33;
  v37 = v34;
  sub_21022370C(&v30, (uint64_t)v35, v4, 1);
  v6 = v30.i64[1];
  v5 = (std::__fs::filesystem::path *)v30.i64[0];
  if (v30.i64[0] == v30.i64[1])
  {
    v7 = 0;
    if (v30.i64[0])
      goto LABEL_42;
LABEL_51:
    v35[0] = off_24CA1EF00;
    if (SHIBYTE(v37) < 0)
      goto LABEL_48;
LABEL_52:
    v23 = v38;
    if (v38)
      goto LABEL_53;
    return v7;
  }
  v7 = 0;
  do
  {
    if (v5[1].__pn_.__r_.__value_.__s.__data_[8] != 1)
      goto LABEL_10;
    v8 = std::__fs::filesystem::path::__filename(v5);
    if (v8.__size_ >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v8.__size_ >= 0x17)
    {
      v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8.__size_ | 7) != 0x17)
        v10 = v8.__size_ | 7;
      v11 = v10 + 1;
      p_dst = (uint64_t (***)())operator new(v10 + 1);
      size = v8.__size_;
      *(_QWORD *)&v33 = v11 | 0x8000000000000000;
      __dst = (uint64_t (**)())p_dst;
LABEL_19:
      memmove(p_dst, v8.__data_, v8.__size_);
      goto LABEL_20;
    }
    BYTE7(v33) = v8.__size_;
    p_dst = &__dst;
    if (v8.__size_)
      goto LABEL_19;
LABEL_20:
    *((_BYTE *)p_dst + v8.__size_) = 0;
    v12 = __dst;
    v25 = v33;
    HIBYTE(v25) = BYTE3(v33);
    v13 = SBYTE7(v33);
    if (SBYTE7(v33) < 0)
    {
      sub_20E860C04(&__p, __dst, size);
      v17 = v29;
      v15 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v17 = v27;
      if (v17 >= 0xC)
      {
LABEL_29:
        p_p = __p;
        if (v15 >= 0)
          p_p = &__p;
        v19 = *(_QWORD *)p_p;
        v20 = p_p[2];
        v16 = v19 == 0x695F746E65696C63 && v20 == 1601136238;
        if ((v15 & 0x80000000) == 0)
          goto LABEL_39;
LABEL_38:
        operator delete(__p);
        goto LABEL_39;
      }
    }
    else
    {
      v14 = BYTE7(v33);
      __p = __dst;
      v27 = size;
      *(_DWORD *)v28 = v25;
      *(_DWORD *)&v28[3] = *(_DWORD *)((char *)&v33 + 3);
      v29 = BYTE7(v33);
      v15 = SBYTE7(v33);
      if (SBYTE7(v33) < 0)
        v14 = size;
      if (v14 >= 0xC)
        goto LABEL_29;
    }
    v16 = 0;
    if (v15 < 0)
      goto LABEL_38;
LABEL_39:
    if (v13 < 0)
      operator delete(v12);
    v7 += v16;
LABEL_10:
    v5 = (std::__fs::filesystem::path *)((char *)v5 + 40);
  }
  while (v5 != (std::__fs::filesystem::path *)v6);
  v5 = (std::__fs::filesystem::path *)v30.i64[0];
  if (!v30.i64[0])
    goto LABEL_51;
LABEL_42:
  for (i = v30.i64[1]; (std::__fs::filesystem::path *)i != v5; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  operator delete(v5);
  v35[0] = off_24CA1EF00;
  if ((SHIBYTE(v37) & 0x80000000) == 0)
    goto LABEL_52;
LABEL_48:
  operator delete(v36[0]);
  v23 = v38;
  if (!v38)
    return v7;
LABEL_53:
  if (*(_BYTE *)(v23 + 8))
    std::mutex::unlock(*(std::mutex **)v23);
  MEMORY[0x212BC6398](v23, 0x1020C405F07FB98);
  return v7;
}

void sub_20FD10378(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FD08B8C((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_20FD1038C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void sub_20FD103B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  sub_20FD08B8C((uint64_t *)(v29 - 96));
  _Unwind_Resume(a1);
}

void sub_20FD10404(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::__fs::filesystem::path *v12;
  std::__fs::filesystem::path::__string_view v13;
  _BYTE *v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  void *v17;
  std::__fs::filesystem::path::__string_view v18;
  _BYTE *v19;
  std::basic_string_view<_CharT, _Traits>::size_type v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  void *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  _BYTE *v28;
  uint64_t v29;
  std::__fs::filesystem::path::__string_view v30;
  _BYTE *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  void *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  __int128 *v38;
  char *v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  size_t v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  __int128 v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  const void **v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  size_t v93;
  const char *v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  size_t v105;
  void *v106;
  _QWORD *v107;
  size_t v108;
  std::string::size_type v109;
  void *v110;
  void *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  std::string::size_type v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::string::size_type v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  const char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string::size_type i;
  unsigned __int8 *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char v169;
  char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  unsigned __int8 *v177;
  int v178;
  std::__shared_weak_count *v179;
  unsigned __int8 *v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  int v189;
  uint64_t v190;
  uint64_t *v191;
  _QWORD *v192;
  _BYTE *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t **v201;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t **v206;
  uint64_t *v207;
  uint64_t **v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t **v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  _OWORD *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  std::mutex *v234;
  uint64_t v235;
  std::chrono::steady_clock::time_point v236;
  char v237;
  std::mutex *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  std::__fs::filesystem::path::__string_view v245;
  _BYTE *v246;
  std::basic_string_view<_CharT, _Traits>::size_type v247;
  std::basic_string_view<_CharT, _Traits>::size_type v248;
  void *v249;
  uint64_t v250;
  int v251;
  _BYTE *v252;
  void **v254;
  void **v255;
  void **v257;
  void **v258;
  void *v259;
  char *v260;
  char *v261;
  uint64_t **v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned __int8 *v267;
  uint64_t *v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  char v274;
  size_t v275;
  _BYTE *v276;
  uint64_t v277;
  _OWORD *v278;
  char v279;
  char v280;
  uint64_t **v281;
  unsigned int v282;
  uint64_t **v283;
  uint64_t *v284;
  unsigned __int8 *v285;
  uint64_t **v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  unsigned __int8 *v290;
  BOOL v291;
  unsigned __int8 *v292;
  unsigned int v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  uint64_t *v309;
  uint64_t v310;
  std::string::size_type v311;
  std::string::size_type v312;
  void *v313;
  uint64_t v314;
  const void **v315;
  const void *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  const char *v321;
  size_t v322;
  unsigned __int8 v323;
  unsigned __int8 v324;
  const char *v325;
  size_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  NSObject *v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  void *v335;
  _QWORD *v336;
  int v337;
  size_t v338;
  std::string::size_type v339;
  std::string *v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  std::string::size_type v344;
  char v345;
  _QWORD *v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  void *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  const char *v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::string::size_type v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  const char *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  _OWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  char *v408;
  char *v409;
  char *v410;
  uint64_t v411;
  char *v412;
  __int128 v413;
  uint64_t v414;
  char *v415;
  __int128 v416;
  __int128 v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  _OWORD *v421;
  __n128 v422;
  const void **v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  char *v429;
  char *v430;
  void *v431;
  unint64_t v432;
  void **v433;
  void **v434;
  uint64_t v435;
  char *v436;
  __int128 v437;
  char *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  char *v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  __int128 v446;
  char *v447;
  void **v448;
  char *v449;
  std::string::size_type v450;
  void **v451;
  uint64_t *v452;
  uint64_t **v453;
  void **v454;
  int64_t v455;
  const char *v456;
  int64x2_t v457;
  int8x16_t v458;
  uint64_t v459;
  __int128 v460;
  __int128 *v461;
  void **v462;
  void **v463;
  const std::string::value_type *v464;
  std::string::size_type v465;
  std::string *v466;
  __int128 v467;
  uint64_t v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  _QWORD *v476;
  _QWORD *exception;
  uint64_t v478;
  uint64_t v479;
  const char *__src;
  int v481;
  char *__s;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  std::chrono::steady_clock::time_point v495;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v496;
  int v497;
  uint64_t v498;
  char *v499;
  char *v500;
  uint64_t v501;
  __int128 *v502;
  char v503;
  unint64_t v504;
  unsigned __int8 *v505;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  std::__fs::filesystem::path v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t *v514;
  unint64_t v515;
  void *v516[2];
  uint64_t v517;
  char v518;
  void *v519;
  char v520;
  void *v521;
  char v522;
  char v523;
  char v524;
  uint64_t (**v525)();
  char *v526;
  std::__shared_weak_count *v527;
  _BYTE v528[7];
  _BYTE v529[7];
  _BYTE v530[7];
  unint64_t v531;
  __int128 v532;
  std::string::size_type v533;
  char v534;
  void *v535;
  char v536;
  void *v537;
  char v538;
  char v539;
  char v540;
  void *v541;
  char *v542;
  char *v543;
  _BYTE v544[24];
  std::string v545;
  const char *v546;
  float v547;
  char v548;
  int **v549;
  __int128 v550;
  unint64_t v551;
  _BYTE v552[32];
  _BYTE *v553;
  uint64_t v554;
  __int128 v555;
  std::__fs::filesystem::path v556;
  __int128 v557;
  uint64_t v558;
  __int128 v559;
  std::string v560;
  unsigned __int8 *v561;
  _BYTE v562[48];
  void *v563[3];
  void *v564;
  __int128 v565;
  uint64_t v566;
  __int128 v567;
  uint64_t v568;
  __int128 v569;
  uint64_t v570;
  char v571;
  __int128 v572;
  uint64_t v573;
  char v574;
  __int128 __p;
  void *v576;
  _BYTE object[40];
  void *v578[7];
  void *v579[4];
  __int128 v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  __int128 v584;
  uint64_t v585;
  char v586;
  __int128 v587;
  uint64_t v588;
  char v589;
  _BYTE __dst[80];
  __int128 v591;
  _OWORD v592[2];
  __int128 v593;
  uint64_t v594;
  __int128 v595;
  uint64_t v596;
  __int128 v597;
  uint64_t v598;
  char v599;
  __int128 v600;
  uint64_t v601;
  char v602;
  char v603;
  void *v604;
  char v605;
  char v606;
  char v607;
  _BYTE v608[32];
  std::__shared_weak_count *v609;
  char v610;
  __int128 v611;
  void *v612;
  void *v613;
  __int128 v614;
  void *v615;
  char v616;
  char v617;
  __int128 v618;
  __int128 v619;
  char *v620;
  int v621;
  char *v622;
  std::__shared_weak_count *v623;
  std::__shared_weak_count *v624;
  void *v625;
  char v626;
  char v627;
  char v628;
  char v629;
  char v630;
  char v631;
  uint64_t v632;

  v632 = *MEMORY[0x24BDAC8D0];
  sub_20FD0F3AC(a1);
  if (*(_BYTE *)(a1 + 288))
  {
    v7 = *(std::mutex **)(a1 + 280);
    v8 = operator new();
    *(_QWORD *)v8 = v7;
    *(_BYTE *)(v8 + 8) = 1;
    std::mutex::lock(v7);
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)&v550 = v8;
  v9 = *(_QWORD *)(a1 + 24);
  v543 = 0;
  v541 = 0;
  v542 = 0;
  *(_QWORD *)__dst = off_24CA1EF00;
  *(_QWORD *)&__dst[8] = v9;
  v508 = a1;
  v507 = v9;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(&__dst[16], *(void **)a1, *(_QWORD *)(a1 + 8));
    v10 = *(_QWORD *)&__dst[8];
  }
  else
  {
    *(_OWORD *)&__dst[16] = *(_OWORD *)a1;
    *(_QWORD *)&__dst[32] = *(_QWORD *)(a1 + 16);
    v10 = v9;
  }
  v494 = a3;
  v498 = a4;
  *(_QWORD *)v552 = off_24CA1EF00;
  *(_QWORD *)&v552[8] = v10;
  *(_OWORD *)&v552[16] = *(_OWORD *)&__dst[16];
  v553 = *(_BYTE **)&__dst[32];
  sub_21022370C((int64x2_t *)&v545, (uint64_t)v552, v10, 1);
  size = v545.__r_.__value_.__l.__size_;
  v12 = (std::__fs::filesystem::path *)v545.__r_.__value_.__r.__words[0];
  if (v545.__r_.__value_.__r.__words[0] != v545.__r_.__value_.__l.__size_)
  {
    v502 = &v565;
    v501 = (uint64_t)&v567;
    v499 = (char *)&v569;
    v487 = MEMORY[0x24BEDB848] + 16;
    v485 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v486 = *MEMORY[0x24BEDB7F0];
    v484 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    while (1)
    {
      if (v12[1].__pn_.__r_.__value_.__s.__data_[8] != 1)
        goto LABEL_10;
      v13 = std::__fs::filesystem::path::__filename(v12);
      if (v13.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13.__size_ >= 0x17)
        break;
      __dst[23] = v13.__size_;
      v14 = __dst;
      if (v13.__size_)
        goto LABEL_19;
LABEL_20:
      v14[v13.__size_] = 0;
      v17 = *(void **)__dst;
      *(_DWORD *)object = *(_DWORD *)&__dst[16];
      *(_DWORD *)&object[3] = *(_DWORD *)&__dst[19];
      if ((__dst[23] & 0x80000000) != 0)
      {
        sub_20E860C04(v544, *(void **)__dst, *(unint64_t *)&__dst[8]);
        operator delete(v17);
      }
      else
      {
        *(_OWORD *)v544 = *(_OWORD *)__dst;
        *(_DWORD *)&v544[16] = *(_DWORD *)object;
        *(_DWORD *)&v544[19] = *(_DWORD *)&object[3];
        v544[23] = __dst[23];
      }
      v18 = std::__fs::filesystem::path::__extension(v12);
      if (v18.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v18.__size_ >= 0x17)
      {
        v20 = (v18.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18.__size_ | 7) != 0x17)
          v20 = v18.__size_ | 7;
        v21 = v20 + 1;
        v19 = operator new(v20 + 1);
        *(_QWORD *)&__dst[16] = v21 | 0x8000000000000000;
        *(_QWORD *)__dst = v19;
        *(_QWORD *)&__dst[8] = v18.__size_;
      }
      else
      {
        __dst[23] = v18.__size_;
        v19 = __dst;
        if (!v18.__size_)
          goto LABEL_31;
      }
      memmove(v19, v18.__data_, v18.__size_);
LABEL_31:
      v19[v18.__size_] = 0;
      v22 = *(void **)__dst;
      *(_DWORD *)object = *(_DWORD *)&__dst[16];
      *(_DWORD *)&object[3] = *(_DWORD *)&__dst[19];
      if ((__dst[23] & 0x80000000) != 0)
      {
        sub_20E860C04(&__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
        operator delete(v22);
      }
      else
      {
        __p = *(_OWORD *)__dst;
        LODWORD(v576) = *(_DWORD *)object;
        *(_DWORD *)((char *)&v576 + 3) = *(_DWORD *)&object[3];
        HIBYTE(v576) = __dst[23];
      }
      if (v544[23] >= 0)
        v23 = v544[23];
      else
        v23 = *(_QWORD *)&v544[8];
      if (v23 >= 0xC)
      {
        v24 = v544;
        if (v544[23] < 0)
          v24 = *(_BYTE **)v544;
        v25 = *(_QWORD *)v24;
        v26 = *((_DWORD *)v24 + 2);
        v27 = v25 == 0x695F746E65696C63 && v26 == 1601136238;
        if (v27)
        {
          v28 = v544[23] >= 0 ? v544 : *(_BYTE **)v544;
          v29 = SHIBYTE(v576) >= 0 ? HIBYTE(v576) : *((_QWORD *)&__p + 1);
          if ((sub_20FD0E954((uint64_t)v12, v507) & 1) != 0
            && sub_20FD1A73C(v508, (std::string::size_type)(v28 + 12), v23 - v29 - 12, v507, 10000000000))
          {
            v30 = std::__fs::filesystem::path::__extension(v12);
            if (v30.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30.__size_ >= 0x17)
            {
              v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30.__size_ | 7) != 0x17)
                v32 = v30.__size_ | 7;
              v33 = v32 + 1;
              v31 = operator new(v32 + 1);
              *(_QWORD *)&__dst[16] = v33 | 0x8000000000000000;
              *(_QWORD *)__dst = v31;
              *(_QWORD *)&__dst[8] = v30.__size_;
            }
            else
            {
              __dst[23] = v30.__size_;
              v31 = __dst;
              if (!v30.__size_)
              {
LABEL_61:
                v31[v30.__size_] = 0;
                v34 = *(void **)__dst;
                *(_DWORD *)object = *(_DWORD *)&__dst[16];
                *(_DWORD *)&object[3] = *(_DWORD *)&__dst[19];
                if ((__dst[23] & 0x80000000) != 0)
                {
                  sub_20E860C04(&v555, *(void **)__dst, *(unint64_t *)&__dst[8]);
                  operator delete(v34);
                  v35 = v556.__pn_.__r_.__value_.__s.__data_[7];
                  v36 = v556.__pn_.__r_.__value_.__s.__data_[7];
                  if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                    v35 = *((_QWORD *)&v555 + 1);
                  if (v35 == 5)
                    goto LABEL_83;
LABEL_65:
                  if (v35 != 12)
                  {
                    v37 = v36 < 0;
                    v38 = &v555;
                    if (v37)
                      v38 = (__int128 *)v555;
                    goto LABEL_99;
                  }
                  v37 = v36 < 0;
                  v38 = &v555;
                  if (v37)
                    v38 = (__int128 *)v555;
                  if (*(_QWORD *)v38 != 0x6567617373656D2ELL || *((_DWORD *)v38 + 2) != 1801675120)
                    goto LABEL_99;
                  *(_QWORD *)&v557 = v12;
                  __dst[0] = 0;
                  v603 = 0;
                  v510.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06490;
                  v510.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
                  v510.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&v557;
                  sub_210235BBC((uint64_t)&v510, (uint64_t)&v618);
                  if (v631)
                  {
                    v589 = v602;
                    *(_OWORD *)object = *(_OWORD *)__dst;
                    if (v602)
                    {
                      *(_DWORD *)&object[16] = *(_DWORD *)&__dst[16];
                      object[24] = 0;
                      LOBYTE(v578[1]) = 0;
                      if (__dst[48])
                      {
                        *(_OWORD *)&object[24] = *(_OWORD *)&__dst[24];
                        v578[0] = *(void **)&__dst[40];
                        memset(&__dst[24], 0, 24);
                        LOBYTE(v578[1]) = 1;
                      }
                      LOBYTE(v578[2]) = 0;
                      v586 = 0;
                      if (v599)
                      {
                        *(_OWORD *)&v578[2] = *(_OWORD *)&__dst[56];
                        v578[4] = *(void **)&__dst[72];
                        memset(&__dst[56], 0, 24);
                        *(_OWORD *)&v578[5] = v591;
                        v579[0] = *(void **)&v592[0];
                        v591 = 0uLL;
                        memset(v592, 0, sizeof(v592));
                        v579[3] = *((void **)&v592[1] + 1);
                        *(_OWORD *)&v579[1] = *(_OWORD *)((char *)v592 + 8);
                        v581 = v594;
                        v580 = v593;
                        v593 = 0uLL;
                        v594 = 0;
                        v583 = v596;
                        v582 = v595;
                        v595 = 0uLL;
                        v596 = 0;
                        v585 = v598;
                        v584 = v597;
                        v597 = 0uLL;
                        v598 = 0;
                        v586 = 1;
                      }
                      v587 = v600;
                      v588 = v601;
                    }
                    else
                    {
                      object[16] = 0;
                      LOBYTE(v579[2]) = 0;
                      if (LOBYTE(v592[1]))
                      {
                        LOBYTE(v578[0]) = 0;
                        if (__dst[40])
                        {
                          *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                          *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                          memset(&__dst[16], 0, 24);
                          LOBYTE(v578[0]) = 1;
                        }
                        LOBYTE(v578[1]) = 0;
                        LOBYTE(v579[1]) = 0;
                        if (BYTE8(v592[0]))
                        {
                          *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                          *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                          memset(&__dst[48], 0, 24);
                          *(_OWORD *)&v578[5] = v591;
                          v579[0] = *(void **)&v592[0];
                          v591 = 0uLL;
                          *(_QWORD *)&v592[0] = 0;
                          LOBYTE(v579[1]) = 1;
                        }
                        LOBYTE(v579[2]) = 1;
                      }
                    }
                  }
                  else
                  {
                    *(_OWORD *)v608 = v618;
                    sub_20E89EFE4(&v608[16], &v619);
                    *(_OWORD *)object = *(_OWORD *)v608;
                    object[16] = 0;
                    LOBYTE(v579[2]) = 0;
                    if (v617)
                    {
                      LOBYTE(v578[0]) = 0;
                      if (v610)
                      {
                        *(_OWORD *)&object[16] = *(_OWORD *)&v608[16];
                        *(_QWORD *)&object[32] = v609;
                        *(_QWORD *)&v608[24] = 0;
                        v609 = 0;
                        *(_QWORD *)&v608[16] = 0;
                        LOBYTE(v578[0]) = 1;
                      }
                      LOBYTE(v578[1]) = 0;
                      LOBYTE(v579[1]) = 0;
                      if (v616)
                      {
                        *(_OWORD *)&v578[1] = v611;
                        v578[3] = v612;
                        v612 = 0;
                        v611 = 0uLL;
                        v578[4] = v613;
                        *(_OWORD *)&v578[5] = v614;
                        v579[0] = v615;
                        v614 = 0uLL;
                        v615 = 0;
                        LOBYTE(v579[1]) = 1;
                      }
                      LOBYTE(v579[2]) = 1;
                      v589 = 0;
                      if (v610 && SHIBYTE(v609) < 0)
                        operator delete(*(void **)&v608[16]);
                    }
                    else
                    {
                      v589 = 0;
                    }
                    if (!v631 && v630)
                    {
                      if (v629)
                      {
                        if (v628 < 0)
                          operator delete(v625);
                        if (SHIBYTE(v624) < 0)
                          operator delete(v622);
                      }
                      if ((_BYTE)v621 && SHIBYTE(v620) < 0)
                        operator delete((void *)v619);
                    }
                  }
                  if (v603)
                    sub_20FD20510((uint64_t)__dst);
                  if (v589)
                    goto LABEL_313;
                  sub_2102341F0((uint64_t)object, &v510.__pn_);
                  sub_20FD20BF4((uint64_t)v608, (uint64_t)v12, (const char *)&v510);
                  if ((v608[23] & 0x80000000) == 0)
                  {
                    v618 = *(_OWORD *)v608;
                    *(_QWORD *)&v619 = *(_QWORD *)&v608[16];
LABEL_321:
                    BYTE8(v619) = 1;
                    LOBYTE(v620) = 0;
                    v626 = 0;
                    v627 = 1;
                    sub_20FD20A78((uint64_t)__dst, 5u, &v618);
                    v559 = *(_OWORD *)__dst;
                    v560.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v563[2]) = 0;
                    if (LOBYTE(v592[1]))
                    {
                      LOBYTE(v561) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
                        v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v561) = 1;
                      }
                      v562[0] = 0;
                      LOBYTE(v563[1]) = 0;
                      if (BYTE8(v592[0]))
                      {
                        *(_OWORD *)v562 = *(_OWORD *)&__dst[48];
                        *(_OWORD *)&v562[16] = *(_OWORD *)&__dst[64];
                        *(_OWORD *)&v562[32] = v591;
                        v563[0] = *(void **)&v592[0];
                        LOBYTE(v563[1]) = 1;
                      }
                      LOBYTE(v563[2]) = 1;
                      v574 = 0;
                      if (__dst[40] && (__dst[39] & 0x80000000) != 0)
                        operator delete(*(void **)&__dst[16]);
                    }
                    else
                    {
                      v574 = 0;
                    }
                    if (v627)
                    {
                      if (v626)
                      {
                        if (SHIBYTE(v625) < 0)
                          operator delete(v624);
                        if (SHIBYTE(v622) < 0)
                          operator delete(v620);
                      }
                      if (BYTE8(v619) && SBYTE7(v619) < 0)
                        operator delete((void *)v618);
                    }
                    if ((v608[23] & 0x80000000) != 0)
                      operator delete(*(void **)v608);
                    if (SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v510.__pn_.__r_.__value_.__l.__data_);
                    goto LABEL_343;
                  }
                }
                else
                {
                  v35 = __dst[23];
                  v555 = *(_OWORD *)__dst;
                  LODWORD(v556.__pn_.__r_.__value_.__l.__data_) = *(_DWORD *)object;
                  *(_DWORD *)((char *)v556.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)&object[3];
                  v556.__pn_.__r_.__value_.__s.__data_[7] = __dst[23];
                  v36 = __dst[23];
                  if (__dst[23] < 0)
                    v35 = *(_QWORD *)&__dst[8];
                  if (v35 != 5)
                    goto LABEL_65;
LABEL_83:
                  v37 = v36 < 0;
                  v38 = &v555;
                  if (v37)
                    v38 = (__int128 *)v555;
                  if (*(_DWORD *)v38 != 1869834798 || *((_BYTE *)v38 + 4) != 110)
                  {
LABEL_99:
                    *(_QWORD *)object = "unknown server/client file extension ";
                    *(_QWORD *)&object[8] = 37;
                    *(_QWORD *)&object[16] = v38;
                    *(_QWORD *)&object[24] = v35;
                    sub_20E8778D4((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)&v618);
                    if (SBYTE7(v619) < 0)
                    {
                      sub_20E860C04(object, (void *)v618, *((unint64_t *)&v618 + 1));
                    }
                    else
                    {
                      *(_OWORD *)object = v618;
                      *(_QWORD *)&object[16] = v619;
                    }
                    object[24] = 1;
                    object[32] = 0;
                    LOBYTE(v578[6]) = 0;
                    LOBYTE(v579[0]) = 1;
                    sub_20FD20A78((uint64_t)__dst, 5u, (__int128 *)object);
                    v559 = *(_OWORD *)__dst;
                    v560.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v563[2]) = 0;
                    if (LOBYTE(v592[1]))
                    {
                      LOBYTE(v561) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
                        v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v561) = 1;
                      }
                      v562[0] = 0;
                      LOBYTE(v563[1]) = 0;
                      if (BYTE8(v592[0]))
                      {
                        *(_OWORD *)v562 = *(_OWORD *)&__dst[48];
                        *(_OWORD *)&v562[16] = *(_OWORD *)&__dst[64];
                        *(_OWORD *)&v562[32] = v591;
                        v563[0] = *(void **)&v592[0];
                        LOBYTE(v563[1]) = 1;
                      }
                      LOBYTE(v563[2]) = 1;
                      v574 = 0;
                      if (__dst[40] && (__dst[39] & 0x80000000) != 0)
                        operator delete(*(void **)&__dst[16]);
                      if (!LOBYTE(v579[0]))
                      {
LABEL_121:
                        if ((SBYTE7(v619) & 0x80000000) == 0)
                        {
                          if ((v556.__pn_.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
                            goto LABEL_123;
LABEL_140:
                          operator delete((void *)v555);
                          if (!v574)
                          {
LABEL_141:
                            sub_20FD18B84(&v513);
                            if (*(int *)v513[7] > 5)
                              goto LABEL_176;
                            v56 = *((unsigned __int8 *)v513 + 72);
                            v57 = sub_20E8C31DC((uint64_t)v513, "OSLogSurrogateAppender", 1, 0);
                            v58 = v57;
                            if (!v56 && !v57)
                              goto LABEL_176;
                            sub_20E863438((uint64_t)__dst);
                            if (v574)
                            {
                              exception = __cxa_allocate_exception(8uLL);
                              *exception = &off_24C9B4620;
                              __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
                            }
                            sub_2102341F0((uint64_t)&v559, (std::string *)object);
                            if (object[23] >= 0)
                              v59 = object;
                            else
                              v59 = *(_BYTE **)object;
                            if (object[23] >= 0)
                              v60 = object[23];
                            else
                              v60 = *(_QWORD *)&object[8];
                            sub_20E86A980(&__dst[16], (uint64_t)v59, v60);
                            if ((object[23] & 0x80000000) != 0)
                              operator delete(*(void **)object);
                            v483 = v58;
                            v481 = v56;
                            if ((BYTE8(v592[1]) & 0x10) != 0)
                            {
                              v86 = *(_QWORD *)&v592[1];
                              v87 = (const void **)&__dst[64];
                              if (*(_QWORD *)&v592[1] < *(_QWORD *)&__dst[72])
                              {
                                *(_QWORD *)&v592[1] = *(_QWORD *)&__dst[72];
                                v86 = *(_QWORD *)&__dst[72];
                                v87 = (const void **)&__dst[64];
                              }
                            }
                            else
                            {
                              if ((BYTE8(v592[1]) & 8) == 0)
                              {
                                v61 = 0;
                                v556.__pn_.__r_.__value_.__s.__data_[7] = 0;
                                v62 = &v555;
                                goto LABEL_221;
                              }
                              v86 = *(_QWORD *)&__dst[56];
                              v87 = (const void **)&__dst[40];
                            }
                            v88 = *v87;
                            v61 = v86 - (_QWORD)*v87;
                            if (v61 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v61 >= 0x17)
                            {
                              v89 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v61 | 7) != 0x17)
                                v89 = v61 | 7;
                              v90 = v89 + 1;
                              v62 = operator new(v89 + 1);
                              v556.__pn_.__r_.__value_.__r.__words[0] = v90 | 0x8000000000000000;
                              *(_QWORD *)&v555 = v62;
                              *((_QWORD *)&v555 + 1) = v61;
                            }
                            else
                            {
                              v556.__pn_.__r_.__value_.__s.__data_[7] = v86 - *(_BYTE *)v87;
                              v62 = &v555;
                              if (!v61)
                              {
LABEL_221:
                                v62[v61] = 0;
                                *(_QWORD *)&v618 = &v513;
                                *((std::chrono::steady_clock::time_point *)&v618 + 1) = std::chrono::steady_clock::now();
                                *(std::chrono::system_clock::time_point *)&v619 = std::chrono::system_clock::now();
                                DWORD2(v619) = 5;
                                v620 = "unknown file";
                                v621 = 574;
                                v622 = "unknown function";
                                v623 = 0;
                                v624 = 0;
                                v91 = (char *)&v555;
                                if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                                  v91 = (char *)v555;
                                __s = v91;
                                v92 = *(_QWORD *)v618;
                                if (*(char *)(*(_QWORD *)v618 + 39) < 0)
                                {
                                  v94 = *(const char **)(v92 + 16);
                                  v93 = *(_QWORD *)(v92 + 24);
                                }
                                else
                                {
                                  v93 = *(unsigned __int8 *)(*(_QWORD *)v618 + 39);
                                  v94 = (const char *)(v92 + 16);
                                }
                                v478 = v92 + 16;
                                v479 = *(_QWORD *)v618;
                                v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                {
                                  sub_20E9E46F8((uint64_t)v608);
                                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v608);
                                  if (v608[24] && (v608[23] & 0x80000000) != 0)
                                    operator delete(*(void **)v608);
                                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A4A510);
                                }
                                if (byte_254A4A4F8[23] >= 0)
                                  v96 = byte_254A4A4F8;
                                else
                                  v96 = *(const char **)byte_254A4A4F8;
                                if (byte_254A4A4F8[23] >= 0)
                                  v97 = byte_254A4A4F8[23];
                                else
                                  v97 = *(_QWORD *)&byte_254A4A4F8[8];
                                *(_QWORD *)object = os_log_create(v96, v94);
                                if (v97 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                __src = v94;
                                if (v97 >= 0x17)
                                {
                                  v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v97 | 7) != 0x17)
                                    v99 = v97 | 7;
                                  v100 = v99 + 1;
                                  v98 = operator new(v99 + 1);
                                  *(_QWORD *)&object[24] = v100 | 0x8000000000000000;
                                  *(_QWORD *)&object[8] = v98;
                                  *(_QWORD *)&object[16] = v97;
                                }
                                else
                                {
                                  object[31] = v97;
                                  v98 = &object[8];
                                  if (!v97)
                                  {
LABEL_241:
                                    v98[v97] = 0;
                                    object[32] = 1;
                                    if (v93 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v93 >= 0x17)
                                    {
                                      v102 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v93 | 7) != 0x17)
                                        v102 = v93 | 7;
                                      v103 = v102 + 1;
                                      v101 = operator new(v102 + 1);
                                      v578[2] = (void *)(v103 | 0x8000000000000000);
                                      v578[0] = v101;
                                      v578[1] = (void *)v93;
                                    }
                                    else
                                    {
                                      HIBYTE(v578[2]) = v93;
                                      v101 = v578;
                                      if (!v93)
                                      {
LABEL_249:
                                        *((_BYTE *)v101 + v93) = 0;
                                        LOBYTE(v578[3]) = 1;
                                        v104 = *(NSObject **)object;
                                        if (SHIBYTE(v578[2]) < 0)
                                          operator delete(v578[0]);
                                        if (object[32] && (object[31] & 0x80000000) != 0)
                                          operator delete(*(void **)&object[8]);
                                        if (*(_QWORD *)object)
                                          os_release(*(void **)object);
                                        if (v483 && *(_QWORD *)(v483 + 24))
                                        {
                                          v105 = _os_log_pack_size();
                                          v106 = operator new(v105, (std::align_val_t)8uLL);
                                          v107 = (_QWORD *)operator new();
                                          *v107 = &off_24C9ABB80;
                                          v107[1] = 0;
                                          v107[2] = 0;
                                          v107[3] = v106;
                                          *(_QWORD *)v608 = v106;
                                          *(_QWORD *)&v608[8] = v106;
                                          *(_QWORD *)&v608[16] = v107;
                                          *(_QWORD *)&v608[24] = 0;
                                          v609 = 0;
                                          v108 = strlen(__s);
                                          if (v108 > 0x7FFFFFFFFFFFFFF7)
                                            sub_20E860B7C();
                                          v109 = v108;
                                          if (v108 >= 0x17)
                                          {
                                            v113 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
                                            if ((v108 | 7) != 0x17)
                                              v113 = v108 | 7;
                                            v114 = v113 + 1;
                                            v110 = operator new(v113 + 1);
                                            v510.__pn_.__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
                                            v510.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
                                            v510.__pn_.__r_.__value_.__l.__size_ = v109;
                                          }
                                          else
                                          {
                                            *((_BYTE *)&v510.__pn_.__r_.__value_.__s + 23) = v108;
                                            v110 = &v510;
                                            if (!v108)
                                              goto LABEL_268;
                                          }
                                          memcpy(v110, __s, v109);
LABEL_268:
                                          *((_BYTE *)v110 + v109) = 0;
                                          *(_QWORD *)&v557 = v510.__pn_.__r_.__value_.__l.__size_;
                                          v115 = v510.__pn_.__r_.__value_.__r.__words[0];
                                          *(_QWORD *)((char *)&v557 + 7) = *(std::string::size_type *)((char *)&v510.__pn_.__r_.__value_.__r.__words[1] + 7);
                                          v116 = HIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]);
                                          v117 = operator new(0x38uLL);
                                          v117[1] = 0;
                                          v117[2] = 0;
                                          v117[3] = off_24C9ABC20;
                                          *v117 = &off_24C9ABBD0;
                                          v118 = v557;
                                          v117[4] = v115;
                                          v117[5] = v118;
                                          *(_QWORD *)((char *)v117 + 47) = *(_QWORD *)((char *)&v557 + 7);
                                          *((_BYTE *)v117 + 55) = v116;
                                          *(_QWORD *)&v557 = 0;
                                          *(_QWORD *)((char *)&v557 + 7) = 0;
                                          v119 = v609;
                                          *(_QWORD *)&v608[24] = v117 + 3;
                                          v609 = (std::__shared_weak_count *)v117;
                                          if (v119)
                                          {
                                            p_shared_owners = (unint64_t *)&v119->__shared_owners_;
                                            do
                                              v121 = __ldaxr(p_shared_owners);
                                            while (__stlxr(v121 - 1, p_shared_owners));
                                            if (!v121)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                                              std::__shared_weak_count::__release_weak(v119);
                                            }
                                          }
                                          *(_OWORD *)object = *(_OWORD *)v608;
                                          v122 = *(void **)&v608[24];
                                          *(_QWORD *)&object[16] = *(_QWORD *)&v608[16];
                                          if (*(_QWORD *)&v608[16])
                                          {
                                            v123 = (unint64_t *)(*(_QWORD *)&v608[16] + 8);
                                            do
                                              v124 = __ldxr(v123);
                                            while (__stxr(v124 + 1, v123));
                                          }
                                          v125 = v609;
                                          *(_QWORD *)&object[24] = v122;
                                          *(_QWORD *)&object[32] = v609;
                                          if (v609)
                                          {
                                            v126 = (unint64_t *)&v609->__shared_owners_;
                                            do
                                              v127 = __ldxr(v126);
                                            while (__stxr(v127 + 1, v126));
                                            v578[0] = v122;
                                            do
                                              v128 = __ldaxr(v126);
                                            while (__stlxr(v128 - 1, v126));
                                            if (!v128)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                                              std::__shared_weak_count::__release_weak(v125);
                                            }
                                          }
                                          else
                                          {
                                            v578[0] = v122;
                                          }
                                          v129 = *(std::__shared_weak_count **)&v608[16];
                                          if (*(_QWORD *)&v608[16])
                                          {
                                            v130 = (unint64_t *)(*(_QWORD *)&v608[16] + 8);
                                            do
                                              v131 = __ldaxr(v130);
                                            while (__stlxr(v131 - 1, v130));
                                            if (!v131)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                                              std::__shared_weak_count::__release_weak(v129);
                                            }
                                          }
                                          v132 = *(_QWORD *)object;
                                          if (*((char *)v578[0] + 31) >= 0)
                                            v133 = (char *)v578[0] + 8;
                                          else
                                            v133 = (char *)*((_QWORD *)v578[0] + 1);
                                          v134 = _os_log_pack_fill();
                                          *(_DWORD *)v134 = 136315138;
                                          *(_QWORD *)(v134 + 4) = v133;
                                          v135 = operator new();
                                          v136 = *(unsigned __int8 *)(v479 + 39);
                                          v137 = v478;
                                          if ((v136 & 0x80u) != 0)
                                          {
                                            v137 = *(_QWORD *)(v479 + 16);
                                            v136 = *(_QWORD *)(v479 + 24);
                                          }
                                          *(_QWORD *)v135 = v132;
                                          *(_OWORD *)(v135 + 8) = *(_OWORD *)&object[8];
                                          *(_QWORD *)&object[8] = 0;
                                          *(_QWORD *)&object[16] = 0;
                                          *(_OWORD *)(v135 + 24) = *(_OWORD *)&object[24];
                                          *(_QWORD *)&object[24] = 0;
                                          *(_QWORD *)&object[32] = 0;
                                          *(_QWORD *)(v135 + 40) = v137;
                                          *(_QWORD *)(v135 + 48) = v136;
                                          *(_BYTE *)(v135 + 56) = 16;
                                          v510.__pn_.__r_.__value_.__r.__words[0] = 0;
                                          *(_QWORD *)v608 = v135;
                                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v483 + 24) + 40))(*(_QWORD *)(v483 + 24), v608);
                                          v138 = *(_QWORD *)v608;
                                          *(_QWORD *)v608 = 0;
                                          if (v138)
                                          {
                                            v139 = *(std::__shared_weak_count **)(v138 + 32);
                                            if (v139)
                                            {
                                              v140 = (unint64_t *)&v139->__shared_owners_;
                                              do
                                                v141 = __ldaxr(v140);
                                              while (__stlxr(v141 - 1, v140));
                                              if (!v141)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                                                std::__shared_weak_count::__release_weak(v139);
                                              }
                                            }
                                            v142 = *(std::__shared_weak_count **)(v138 + 16);
                                            if (v142)
                                            {
                                              v143 = (unint64_t *)&v142->__shared_owners_;
                                              do
                                                v144 = __ldaxr(v143);
                                              while (__stlxr(v144 - 1, v143));
                                              if (!v144)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                                                std::__shared_weak_count::__release_weak(v142);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
                                            v145 = v510.__pn_.__r_.__value_.__r.__words[0];
                                            v510.__pn_.__r_.__value_.__r.__words[0] = 0;
                                            if (v145)
                                            {
                                              v146 = *(std::__shared_weak_count **)(v145 + 32);
                                              if (v146)
                                              {
                                                v147 = (unint64_t *)&v146->__shared_owners_;
                                                do
                                                  v148 = __ldaxr(v147);
                                                while (__stlxr(v148 - 1, v147));
                                                if (!v148)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                                  std::__shared_weak_count::__release_weak(v146);
                                                }
                                              }
                                              v149 = *(std::__shared_weak_count **)(v145 + 16);
                                              if (v149)
                                              {
                                                v150 = (unint64_t *)&v149->__shared_owners_;
                                                do
                                                  v151 = __ldaxr(v150);
                                                while (__stlxr(v151 - 1, v150));
                                                if (!v151)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                                                  std::__shared_weak_count::__release_weak(v149);
                                                }
                                              }
                                              MEMORY[0x212BC6398](v145, 0x10F0C40B62ED6C6);
                                            }
                                          }
                                          v152 = *(std::__shared_weak_count **)&object[32];
                                          v112 = v481;
                                          if (*(_QWORD *)&object[32])
                                          {
                                            v153 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                            do
                                              v154 = __ldaxr(v153);
                                            while (__stlxr(v154 - 1, v153));
                                            if (!v154)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                                              std::__shared_weak_count::__release_weak(v152);
                                            }
                                          }
                                          v155 = *(std::__shared_weak_count **)&object[16];
                                          if (*(_QWORD *)&object[16])
                                          {
                                            v156 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                            do
                                              v157 = __ldaxr(v156);
                                            while (__stlxr(v157 - 1, v156));
                                            if (!v157)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                                              std::__shared_weak_count::__release_weak(v155);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
                                          *(_DWORD *)object = 136315138;
                                          *(_QWORD *)&object[4] = __s;
                                          v111 = (void *)_os_log_send_and_compose_impl();
                                          v112 = v481;
                                          if (v111)
                                            free(v111);
                                        }
                                        if (v112)
                                        {
                                          v158 = (const char *)&v555;
                                          if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                                            v158 = (const char *)v555;
                                          sub_20E8C003C((uint64_t)&v618, "%s", v158);
                                          sub_20E863570((uint64_t)&v618);
                                        }
                                        sub_20E863570((uint64_t)&v618);
                                        v159 = v624;
                                        if (v624)
                                        {
                                          v160 = (unint64_t *)&v624->__shared_owners_;
                                          do
                                            v161 = __ldaxr(v160);
                                          while (__stlxr(v161 - 1, v160));
                                          if (!v161)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                                            std::__shared_weak_count::__release_weak(v159);
                                          }
                                        }
                                        if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                                          operator delete((void *)v555);
                                        *(_QWORD *)__dst = v486;
                                        *(_QWORD *)&__dst[*(_QWORD *)(v486 - 24)] = v485;
                                        *(_QWORD *)&__dst[16] = v484;
                                        *(_QWORD *)&__dst[24] = v487;
                                        if (SHIBYTE(v592[0]) < 0)
                                          operator delete(*((void **)&v591 + 1));
                                        std::streambuf::~streambuf();
                                        std::iostream::~basic_iostream();
                                        MEMORY[0x212BC6290](&v593);
LABEL_176:
                                        sub_20FD20510((uint64_t)&v559);
                                        goto LABEL_177;
                                      }
                                    }
                                    memmove(v101, __src, v93);
                                    goto LABEL_249;
                                  }
                                }
                                memmove(v98, v96, v97);
                                goto LABEL_241;
                              }
                            }
                            memmove(v62, v88, v61);
                            goto LABEL_221;
                          }
LABEL_124:
                          v41 = v542;
                          if (v542 < v543)
                          {
                            *(_OWORD *)v542 = v559;
                            *((_DWORD *)v41 + 4) = v560.__r_.__value_.__l.__data_;
                            v41[24] = 0;
                            v41[48] = 0;
                            if (v562[0])
                            {
                              v42 = *(_OWORD *)&v560.__r_.__value_.__r.__words[1];
                              *((_QWORD *)v41 + 5) = v561;
                              *(_OWORD *)(v41 + 24) = v42;
                              v560.__r_.__value_.__r.__words[2] = 0;
                              v561 = 0;
                              v560.__r_.__value_.__l.__size_ = 0;
                              v41[48] = 1;
                            }
                            v41[56] = 0;
                            v41[200] = 0;
                            if (v571)
                            {
                              v43 = *(_OWORD *)&v562[8];
                              *((_QWORD *)v41 + 9) = *(_QWORD *)&v562[24];
                              *(_OWORD *)(v41 + 56) = v43;
                              memset(&v562[8], 0, 24);
                              v44 = v563[0];
                              *((_OWORD *)v41 + 5) = *(_OWORD *)&v562[32];
                              *((_QWORD *)v41 + 12) = v44;
                              *(_QWORD *)&v562[40] = 0;
                              v563[0] = 0;
                              *(_QWORD *)&v562[32] = 0;
                              v45 = *(_OWORD *)&v563[1];
                              *((_QWORD *)v41 + 15) = v564;
                              *(_OWORD *)(v41 + 104) = v45;
                              v563[2] = 0;
                              v564 = 0;
                              v563[1] = 0;
                              v46 = v565;
                              *((_QWORD *)v41 + 18) = v566;
                              *((_OWORD *)v41 + 8) = v46;
                              v565 = 0uLL;
                              v566 = 0;
                              v47 = v567;
                              *((_QWORD *)v41 + 21) = v568;
                              *(_OWORD *)(v41 + 152) = v47;
                              v567 = 0uLL;
                              v568 = 0;
                              v48 = v569;
                              *((_QWORD *)v41 + 24) = v570;
                              *((_OWORD *)v41 + 11) = v48;
                              v569 = 0uLL;
                              v570 = 0;
                              v41[200] = 1;
                            }
                            v49 = v572;
                            *((_QWORD *)v41 + 28) = v573;
                            *((_OWORD *)v41 + 13) = v49;
                            v50 = v41 + 232;
                            goto LABEL_175;
                          }
                          v51 = (char *)v541;
                          v52 = 0x34F72C234F72C235 * ((v542 - (_BYTE *)v541) >> 3);
                          v53 = v52 + 1;
                          if ((unint64_t)(v52 + 1) > 0x11A7B9611A7B961)
                            sub_20E867F44();
                          if (0x69EE58469EE5846ALL * ((v543 - (_BYTE *)v541) >> 3) > v53)
                            v53 = 0x69EE58469EE5846ALL * ((v543 - (_BYTE *)v541) >> 3);
                          if ((unint64_t)(0x34F72C234F72C235 * ((v543 - (_BYTE *)v541) >> 3)) >= 0x8D3DCB08D3DCB0)
                            v54 = 0x11A7B9611A7B961;
                          else
                            v54 = v53;
                          if (v54)
                          {
                            if (v54 > 0x11A7B9611A7B961)
                              sub_20E877A38();
                            v55 = (char *)operator new(232 * v54);
                          }
                          else
                          {
                            v55 = 0;
                          }
                          v63 = &v55[232 * v52];
                          *(_OWORD *)v63 = v559;
                          *((_DWORD *)v63 + 4) = v560.__r_.__value_.__l.__data_;
                          v63[24] = 0;
                          v63[48] = 0;
                          if (v562[0])
                          {
                            *(_OWORD *)(v63 + 24) = *(_OWORD *)&v560.__r_.__value_.__r.__words[1];
                            *((_QWORD *)v63 + 5) = v561;
                            v560.__r_.__value_.__r.__words[2] = 0;
                            v561 = 0;
                            v560.__r_.__value_.__l.__size_ = 0;
                            v63[48] = 1;
                          }
                          v64 = &v55[232 * v52];
                          v64[56] = 0;
                          v65 = v64 + 56;
                          v65[144] = 0;
                          v66 = v65 + 144;
                          if (v571)
                          {
                            *(_OWORD *)v65 = *(_OWORD *)&v562[8];
                            *((_QWORD *)v65 + 2) = *(_QWORD *)&v562[24];
                            memset(&v562[8], 0, 24);
                            v67 = &v55[232 * v52];
                            *((_OWORD *)v67 + 5) = *(_OWORD *)&v562[32];
                            *((void **)v67 + 12) = v563[0];
                            *(_QWORD *)&v562[32] = 0;
                            *(_QWORD *)&v562[40] = 0;
                            v563[0] = 0;
                            *((_QWORD *)v67 + 15) = v564;
                            *(_OWORD *)(v67 + 104) = *(_OWORD *)&v563[1];
                            v563[2] = 0;
                            v564 = 0;
                            v563[1] = 0;
                            v68 = v565;
                            *((_QWORD *)v67 + 18) = v566;
                            *((_OWORD *)v67 + 8) = v68;
                            v565 = 0uLL;
                            v566 = 0;
                            v69 = v567;
                            *((_QWORD *)v67 + 21) = v568;
                            *(_OWORD *)(v67 + 152) = v69;
                            v567 = 0uLL;
                            v568 = 0;
                            v70 = v569;
                            *((_QWORD *)v67 + 24) = v570;
                            *((_OWORD *)v67 + 11) = v70;
                            v569 = 0uLL;
                            v570 = 0;
                            *v66 = 1;
                          }
                          v71 = &v55[232 * v52];
                          *((_OWORD *)v71 + 13) = v572;
                          *((_QWORD *)v71 + 28) = v573;
                          v50 = v63 + 232;
                          if (v41 == v51)
                          {
                            v541 = v63;
                            v542 = v63 + 232;
                            v543 = &v55[232 * v54];
                            if (v41)
                              goto LABEL_174;
                          }
                          else
                          {
                            v72 = 0;
                            do
                            {
                              v75 = &v63[v72];
                              v76 = &v41[v72];
                              *(_OWORD *)(v75 - 232) = *(_OWORD *)&v41[v72 - 232];
                              *((_DWORD *)v75 - 54) = *(_DWORD *)&v41[v72 - 216];
                              v63[v72 - 208] = 0;
                              *(v75 - 184) = 0;
                              if (v41[v72 - 184])
                              {
                                v77 = *((_OWORD *)v76 - 13);
                                *(_QWORD *)&v63[v72 - 192] = *((_QWORD *)v76 - 24);
                                *(_OWORD *)&v63[v72 - 208] = v77;
                                *((_QWORD *)v76 - 25) = 0;
                                *((_QWORD *)v76 - 24) = 0;
                                *((_QWORD *)v76 - 26) = 0;
                                *(v75 - 184) = 1;
                              }
                              *(v75 - 176) = 0;
                              *(v75 - 32) = 0;
                              if (*(v76 - 32))
                              {
                                v78 = &v41[v72];
                                v79 = *(_OWORD *)&v41[v72 - 176];
                                *((_QWORD *)v75 - 20) = *(_QWORD *)&v41[v72 - 160];
                                *((_OWORD *)v75 - 11) = v79;
                                *((_QWORD *)v78 - 21) = 0;
                                *((_QWORD *)v78 - 20) = 0;
                                *((_QWORD *)v78 - 22) = 0;
                                v80 = &v63[v72];
                                v81 = *(_OWORD *)&v41[v72 - 152];
                                *((_QWORD *)v80 - 17) = *(_QWORD *)&v41[v72 - 136];
                                *(_OWORD *)(v80 - 152) = v81;
                                *((_QWORD *)v78 - 18) = 0;
                                *((_QWORD *)v78 - 17) = 0;
                                *((_QWORD *)v78 - 19) = 0;
                                v82 = *(_OWORD *)&v41[v72 - 128];
                                *((_QWORD *)v80 - 14) = *(_QWORD *)&v41[v72 - 112];
                                *((_OWORD *)v80 - 8) = v82;
                                *((_QWORD *)v78 - 15) = 0;
                                *((_QWORD *)v78 - 14) = 0;
                                *((_QWORD *)v78 - 16) = 0;
                                v83 = *(_OWORD *)&v41[v72 - 104];
                                *((_QWORD *)v80 - 11) = *(_QWORD *)&v41[v72 - 88];
                                *(_OWORD *)(v80 - 104) = v83;
                                *((_QWORD *)v78 - 13) = 0;
                                *((_QWORD *)v78 - 12) = 0;
                                *((_QWORD *)v78 - 11) = 0;
                                v84 = *(_OWORD *)&v41[v72 - 80];
                                *((_QWORD *)v80 - 8) = *(_QWORD *)&v41[v72 - 64];
                                *((_OWORD *)v80 - 5) = v84;
                                *((_QWORD *)v78 - 10) = 0;
                                *((_QWORD *)v78 - 9) = 0;
                                *((_QWORD *)v78 - 8) = 0;
                                v85 = *(_OWORD *)&v41[v72 - 56];
                                *((_QWORD *)v80 - 5) = *(_QWORD *)&v41[v72 - 40];
                                *(_OWORD *)(v80 - 56) = v85;
                                *((_QWORD *)v78 - 7) = 0;
                                *((_QWORD *)v78 - 6) = 0;
                                *((_QWORD *)v78 - 5) = 0;
                                *(v75 - 32) = 1;
                              }
                              v73 = &v63[v72];
                              v74 = *(_OWORD *)&v41[v72 - 24];
                              *((_QWORD *)v73 - 1) = *(_QWORD *)&v41[v72 - 8];
                              *(_OWORD *)(v73 - 24) = v74;
                              v72 -= 232;
                            }
                            while (&v41[v72] != v51);
                            v541 = &v63[v72];
                            v542 = v63 + 232;
                            v543 = &v55[232 * v54];
                            do
                            {
                              sub_20FCF4D74((uint64_t)(v41 - 176));
                              if (*(v41 - 184) && *(v41 - 185) < 0)
                                operator delete(*((void **)v41 - 26));
                              v41 -= 232;
                            }
                            while (v41 != v51);
                            v41 = v51;
                            if (!v51)
                              goto LABEL_175;
LABEL_174:
                            operator delete(v41);
                          }
LABEL_175:
                          v542 = v50;
                          goto LABEL_176;
                        }
                        operator delete((void *)v618);
                        if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                          goto LABEL_140;
LABEL_123:
                        if (!v574)
                          goto LABEL_141;
                        goto LABEL_124;
                      }
                    }
                    else
                    {
                      v574 = 0;
                      if (!LOBYTE(v579[0]))
                        goto LABEL_121;
                    }
                    if (LOBYTE(v578[6]))
                    {
                      if (SHIBYTE(v578[5]) < 0)
                        operator delete(v578[3]);
                      if (SHIBYTE(v578[1]) < 0)
                        operator delete(*(void **)&object[32]);
                    }
                    if (object[24] && (object[23] & 0x80000000) != 0)
                      operator delete(*(void **)object);
                    goto LABEL_121;
                  }
                  *(_QWORD *)&v557 = v12;
                  __dst[0] = 0;
                  v603 = 0;
                  v510.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA062A0;
                  v510.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
                  v510.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&v557;
                  sub_210235BBC((uint64_t)&v510, (uint64_t)&v618);
                  if (v631)
                  {
                    v589 = v602;
                    *(_OWORD *)object = *(_OWORD *)__dst;
                    if (v602)
                    {
                      *(_DWORD *)&object[16] = *(_DWORD *)&__dst[16];
                      object[24] = 0;
                      LOBYTE(v578[1]) = 0;
                      if (__dst[48])
                      {
                        *(_OWORD *)&object[24] = *(_OWORD *)&__dst[24];
                        v578[0] = *(void **)&__dst[40];
                        memset(&__dst[24], 0, 24);
                        LOBYTE(v578[1]) = 1;
                      }
                      LOBYTE(v578[2]) = 0;
                      v586 = 0;
                      if (v599)
                      {
                        *(_OWORD *)&v578[2] = *(_OWORD *)&__dst[56];
                        v578[4] = *(void **)&__dst[72];
                        memset(&__dst[56], 0, 24);
                        *(_OWORD *)&v578[5] = v591;
                        v579[0] = *(void **)&v592[0];
                        v591 = 0uLL;
                        memset(v592, 0, sizeof(v592));
                        v579[3] = *((void **)&v592[1] + 1);
                        *(_OWORD *)&v579[1] = *(_OWORD *)((char *)v592 + 8);
                        v581 = v594;
                        v580 = v593;
                        v593 = 0uLL;
                        v594 = 0;
                        v583 = v596;
                        v582 = v595;
                        v595 = 0uLL;
                        v596 = 0;
                        v585 = v598;
                        v584 = v597;
                        v597 = 0uLL;
                        v598 = 0;
                        v586 = 1;
                      }
                      v587 = v600;
                      v588 = v601;
                    }
                    else
                    {
                      object[16] = 0;
                      LOBYTE(v579[2]) = 0;
                      if (LOBYTE(v592[1]))
                      {
                        LOBYTE(v578[0]) = 0;
                        if (__dst[40])
                        {
                          *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                          *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                          memset(&__dst[16], 0, 24);
                          LOBYTE(v578[0]) = 1;
                        }
                        LOBYTE(v578[1]) = 0;
                        LOBYTE(v579[1]) = 0;
                        if (BYTE8(v592[0]))
                        {
                          *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                          *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                          memset(&__dst[48], 0, 24);
                          *(_OWORD *)&v578[5] = v591;
                          v579[0] = *(void **)&v592[0];
                          v591 = 0uLL;
                          *(_QWORD *)&v592[0] = 0;
                          LOBYTE(v579[1]) = 1;
                        }
                        LOBYTE(v579[2]) = 1;
                      }
                    }
                  }
                  else
                  {
                    *(_OWORD *)v608 = v618;
                    sub_20E89EFE4(&v608[16], &v619);
                    *(_OWORD *)object = *(_OWORD *)v608;
                    object[16] = 0;
                    LOBYTE(v579[2]) = 0;
                    if (v617)
                    {
                      LOBYTE(v578[0]) = 0;
                      if (v610)
                      {
                        *(_OWORD *)&object[16] = *(_OWORD *)&v608[16];
                        *(_QWORD *)&object[32] = v609;
                        *(_QWORD *)&v608[24] = 0;
                        v609 = 0;
                        *(_QWORD *)&v608[16] = 0;
                        LOBYTE(v578[0]) = 1;
                      }
                      LOBYTE(v578[1]) = 0;
                      LOBYTE(v579[1]) = 0;
                      if (v616)
                      {
                        *(_OWORD *)&v578[1] = v611;
                        v578[3] = v612;
                        v612 = 0;
                        v611 = 0uLL;
                        v578[4] = v613;
                        *(_OWORD *)&v578[5] = v614;
                        v579[0] = v615;
                        v614 = 0uLL;
                        v615 = 0;
                        LOBYTE(v579[1]) = 1;
                      }
                      LOBYTE(v579[2]) = 1;
                      v589 = 0;
                      if (v610 && SHIBYTE(v609) < 0)
                        operator delete(*(void **)&v608[16]);
                    }
                    else
                    {
                      v589 = 0;
                    }
                    if (!v631 && v630)
                    {
                      if (v629)
                      {
                        if (v628 < 0)
                          operator delete(v625);
                        if (SHIBYTE(v624) < 0)
                          operator delete(v622);
                      }
                      if ((_BYTE)v621 && SHIBYTE(v620) < 0)
                        operator delete((void *)v619);
                    }
                  }
                  if (v603)
                    sub_20FD20510((uint64_t)__dst);
                  if (v589)
                  {
LABEL_313:
                    v559 = *(_OWORD *)object;
                    LODWORD(v560.__r_.__value_.__l.__data_) = *(_DWORD *)&object[16];
                    v560.__r_.__value_.__s.__data_[8] = 0;
                    v562[0] = 0;
                    if (LOBYTE(v578[1]))
                    {
                      *(_OWORD *)&v560.__r_.__value_.__r.__words[1] = *(_OWORD *)&object[24];
                      v561 = (unsigned __int8 *)v578[0];
                      *(_QWORD *)&object[32] = 0;
                      v578[0] = 0;
                      *(_QWORD *)&object[24] = 0;
                      v562[0] = 1;
                    }
                    v562[8] = 0;
                    v571 = 0;
                    if (v586)
                    {
                      *(_OWORD *)&v562[8] = *(_OWORD *)&v578[2];
                      *(void **)&v562[24] = v578[4];
                      memset(&v578[2], 0, 40);
                      *(_OWORD *)&v562[32] = *(_OWORD *)&v578[5];
                      v563[0] = v579[0];
                      memset(v579, 0, sizeof(v579));
                      v564 = v579[3];
                      *(_OWORD *)&v563[1] = *(_OWORD *)&v579[1];
                      v566 = v581;
                      v565 = v580;
                      v580 = 0uLL;
                      v581 = 0;
                      v568 = v583;
                      v567 = v582;
                      v582 = 0uLL;
                      v583 = 0;
                      v570 = v585;
                      v569 = v584;
                      v584 = 0uLL;
                      v585 = 0;
                      v571 = 1;
                    }
                    v572 = v587;
                    v573 = v588;
                    v574 = 1;
LABEL_343:
                    sub_20FD20510((uint64_t)object);
                    if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                      goto LABEL_140;
                    goto LABEL_123;
                  }
                  sub_2102341F0((uint64_t)object, &v510.__pn_);
                  sub_20FD20BF4((uint64_t)v608, (uint64_t)v12, (const char *)&v510);
                  if ((v608[23] & 0x80000000) == 0)
                  {
                    v618 = *(_OWORD *)v608;
                    *(_QWORD *)&v619 = *(_QWORD *)&v608[16];
                    goto LABEL_321;
                  }
                }
                sub_20E860C04(&v618, *(void **)v608, *(unint64_t *)&v608[8]);
                goto LABEL_321;
              }
            }
            memmove(v31, v30.__data_, v30.__size_);
            goto LABEL_61;
          }
        }
      }
LABEL_177:
      if (SHIBYTE(v576) < 0)
      {
        operator delete((void *)__p);
        if ((v544[23] & 0x80000000) != 0)
          goto LABEL_179;
      }
      else if ((v544[23] & 0x80000000) != 0)
      {
LABEL_179:
        operator delete(*(void **)v544);
      }
LABEL_10:
      v12 = (std::__fs::filesystem::path *)((char *)v12 + 40);
      if (v12 == (std::__fs::filesystem::path *)size)
      {
        v12 = (std::__fs::filesystem::path *)v545.__r_.__value_.__r.__words[0];
        goto LABEL_409;
      }
    }
    v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13.__size_ | 7) != 0x17)
      v15 = v13.__size_ | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&__dst[16] = v16 | 0x8000000000000000;
    *(_QWORD *)__dst = v14;
    *(_QWORD *)&__dst[8] = v13.__size_;
LABEL_19:
    memmove(v14, v13.__data_, v13.__size_);
    goto LABEL_20;
  }
LABEL_409:
  if (v12)
  {
    for (i = v545.__r_.__value_.__l.__size_; (std::__fs::filesystem::path *)i != v12; i -= 40)
    {
      if (*(char *)(i - 17) < 0)
        operator delete(*(void **)(i - 40));
    }
    operator delete(v12);
  }
  *(_QWORD *)v552 = off_24CA1EF00;
  if (SHIBYTE(v553) < 0)
    operator delete(*(void **)&v552[16]);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 8))
      std::mutex::unlock(*(std::mutex **)v8);
    MEMORY[0x212BC6398](v8, 0x1020C405F07FB98);
  }
  v163 = (unsigned __int8 *)v541;
  v505 = (unsigned __int8 *)v542;
  if (v541 == v542)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    *(_DWORD *)&object[24] = 0;
    sub_20E8F8738(object, "no diagnostics client located at ");
    sub_20EB04FEC((uint64_t)&v618, (uint64_t)object, v508);
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v618 = v608;
    ((void (*)(__int128 *__return_ptr, __int128 *, _BYTE *))off_24CA061E8[*(unsigned int *)&object[24]])(&v559, &v618, object);
    if (*(_DWORD *)&object[24] != -1)
      ((void (*)(__int128 *, _BYTE *))off_24CA06188[*(unsigned int *)&object[24]])(&v618, object);
    if (v560.__r_.__value_.__s.__data_[7] < 0)
    {
      sub_20E860C04(&v532, (void *)v559, *((unint64_t *)&v559 + 1));
    }
    else
    {
      v532 = v559;
      v533 = v560.__r_.__value_.__r.__words[0];
    }
    v534 = 1;
    LOBYTE(v535) = 0;
    v539 = 0;
    v540 = 1;
    sub_20EA5B348((uint64_t)__dst, 5u, &v532);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)__dst;
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 144) = 0;
    if (LOBYTE(v592[1]))
    {
      *(_BYTE *)(a4 + 72) = 0;
      v221 = __dst[40];
      if (__dst[40])
      {
        *(_OWORD *)(a4 + 48) = *(_OWORD *)&__dst[16];
        *(_QWORD *)(a4 + 64) = *(_QWORD *)&__dst[32];
        memset(&__dst[16], 0, 24);
        *(_BYTE *)(a4 + 72) = 1;
      }
      *(_BYTE *)(a4 + 80) = 0;
      *(_BYTE *)(a4 + 136) = 0;
      if (BYTE8(v592[0]))
      {
        v222 = *(_QWORD *)&__dst[72];
        *(_QWORD *)(a4 + 96) = *(_QWORD *)&__dst[64];
        *(_OWORD *)(a4 + 80) = *(_OWORD *)&__dst[48];
        *(_OWORD *)&__dst[48] = 0uLL;
        *(_QWORD *)(a4 + 104) = v222;
        *(_OWORD *)(a4 + 112) = v591;
        *(_QWORD *)(a4 + 128) = *(_QWORD *)&v592[0];
        *(_QWORD *)&__dst[64] = 0;
        v591 = 0uLL;
        *(_QWORD *)&v592[0] = 0;
        *(_BYTE *)(a4 + 136) = 1;
      }
      *(_BYTE *)(a4 + 144) = 1;
      *(_BYTE *)(a4 + 152) = 1;
      if (v221 && (__dst[39] & 0x80000000) != 0)
        operator delete(*(void **)&__dst[16]);
      if (!v540)
        goto LABEL_685;
    }
    else
    {
      *(_BYTE *)(a4 + 152) = 1;
      if (!v540)
      {
LABEL_685:
        if (v560.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v559);
        goto LABEL_1477;
      }
    }
    if (v539)
    {
      if (v538 < 0)
        operator delete(v537);
      if (v536 < 0)
        operator delete(v535);
    }
    if (v534 && SHIBYTE(v533) < 0)
      operator delete((void *)v532);
    goto LABEL_685;
  }
  v164 = *(_QWORD *)(v508 + 296);
  *(_QWORD *)(v508 + 296) = v164 + 1;
  v531 = v164;
  if (!*(_BYTE *)(v494 + 56))
  {
    v503 = 0;
    v504 = 0;
    goto LABEL_436;
  }
  if (!*(_BYTE *)(v494 + 8))
  {
    LOBYTE(v502) = 0;
    v166 = 0;
    v165 = 0;
    if (*(_BYTE *)(v494 + 24))
      goto LABEL_426;
LABEL_434:
    LOBYTE(v499) = 0;
    v501 = 0;
    goto LABEL_435;
  }
  v165 = (*(_QWORD *)v494 / (unint64_t)(0x34F72C234F72C235 * ((v505 - v163) >> 3))) & 0xFFFFFFFFFFFFFF00;
  v166 = (*(_QWORD *)v494 / (unint64_t)(0x34F72C234F72C235 * ((v505 - v163) >> 3)));
  LOBYTE(v502) = 1;
  if (!*(_BYTE *)(v494 + 24))
    goto LABEL_434;
LABEL_426:
  v501 = *(_QWORD *)(v494 + 16) / 2;
  LOBYTE(v499) = 1;
LABEL_435:
  *(_OWORD *)&__dst[7] = *(_OWORD *)(v494 + 32);
  __dst[23] = *(_BYTE *)(v494 + 48);
  __p = *(_OWORD *)__dst;
  v576 = *(void **)&__dst[16];
  v504 = v165 | v166;
  v503 = 1;
  do
  {
LABEL_436:
    *(_DWORD *)&__dst[24] = 0;
    sub_20EE1E7C4((uint64_t)object, (uint64_t)__dst, v163);
    if (*(_DWORD *)&__dst[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)object = &v559;
    ((void (*)(__int128 *__return_ptr, _BYTE *, _BYTE *))off_24CA061E8[*(unsigned int *)&__dst[24]])(&v555, object, __dst);
    if (*(_DWORD *)&__dst[24] != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24CA06188[*(unsigned int *)&__dst[24]])(object, __dst);
    v167 = v531;
    *(_DWORD *)&object[24] = 0;
    sub_20E8ECA30(object, "server_message_to_");
    sub_20EE1E7C4((uint64_t)&v510, (uint64_t)object, v163);
    *(_QWORD *)__dst = object;
    *(_QWORD *)&__dst[8] = "_from_";
    *(_QWORD *)&__dst[16] = object;
    *(_QWORD *)&__dst[24] = "_from_";
    *(_QWORD *)&__dst[32] = "_from_";
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v559 = __dst;
    ((void (*)(__int128 *, _BYTE *))off_24CA06248[*(unsigned int *)&object[24]])(&v559, object);
    sub_20EE1E7C4((uint64_t)v544, (uint64_t)object, (unsigned __int8 *)(v508 + 32));
    *(_QWORD *)__dst = object;
    *(_QWORD *)&__dst[8] = "_n_";
    *(_QWORD *)&__dst[16] = object;
    *(_QWORD *)&__dst[24] = "_n_";
    *(_QWORD *)&__dst[32] = "_n_";
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v559 = __dst;
    ((void (*)(__int128 *, _BYTE *))off_24CA06260[*(unsigned int *)&object[24]])(&v559, object);
    std::to_string((std::string *)&v559, v167);
    *(_QWORD *)__dst = object;
    *(_QWORD *)&__dst[8] = &v559;
    *(_QWORD *)&__dst[16] = object;
    *(_QWORD *)&__dst[24] = &v559;
    *(_QWORD *)&__dst[32] = &v559;
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)v552 = __dst;
    ((void (*)(_BYTE *, _BYTE *))off_24CA061B8[*(unsigned int *)&object[24]])(v552, object);
    if (v560.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v559);
    *(_QWORD *)__dst = object;
    *(_QWORD *)&__dst[8] = ".json";
    *(_QWORD *)&__dst[16] = object;
    *(_QWORD *)&__dst[24] = ".json";
    *(_QWORD *)&__dst[32] = ".json";
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v559 = __dst;
    ((void (*)(__int128 *, _BYTE *))off_24CA06230[*(unsigned int *)&object[24]])(&v559, object);
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)__dst = &v559;
    ((void (*)(_BYTE *__return_ptr, _BYTE *, _BYTE *))off_24CA061E8[*(unsigned int *)&object[24]])(v608, __dst, object);
    if (*(_DWORD *)&object[24] != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24CA06188[*(unsigned int *)&object[24]])(__dst, object);
    v618 = *(_OWORD *)v608;
    *(_QWORD *)&v619 = *(_QWORD *)&v608[16];
    memset(v608, 0, 24);
    if (*(char *)(v508 + 23) < 0)
      sub_20E860C04(&v545, *(void **)v508, *(_QWORD *)(v508 + 8));
    else
      v545 = *(std::string *)v508;
    sub_20E8A944C((uint64_t)&v545, (std::__fs::filesystem::path *)&v618);
    if (SBYTE7(v619) < 0)
    {
      operator delete((void *)v618);
      if ((v608[23] & 0x80000000) == 0)
        goto LABEL_453;
    }
    else if ((v608[23] & 0x80000000) == 0)
    {
      goto LABEL_453;
    }
    operator delete(*(void **)v608);
LABEL_453:
    *(_OWORD *)&object[8] = *(_OWORD *)a2;
    *(_QWORD *)&object[24] = *(_QWORD *)(a2 + 16);
    *(_DWORD *)((char *)v578 + 1) = *(_DWORD *)v530;
    HIDWORD(v578[0]) = *(_DWORD *)&v530[3];
    *(_OWORD *)((char *)&v578[2] + 1) = __p;
    *(void **)((char *)&v578[4] + 1) = v576;
    HIDWORD(v578[5]) = *(_DWORD *)&v529[3];
    *(_DWORD *)((char *)&v578[5] + 1) = *(_DWORD *)v529;
    *(_DWORD *)((char *)&v578[6] + 1) = *(_DWORD *)v528;
    HIDWORD(v578[6]) = *(_DWORD *)&v528[3];
    *(_QWORD *)object = v531;
    *(_QWORD *)&object[32] = v504;
    LOBYTE(v578[0]) = (_BYTE)v502;
    v578[1] = (void *)v501;
    LOBYTE(v578[2]) = (_BYTE)v499;
    LOBYTE(v578[6]) = v503;
    LOBYTE(v579[0]) = 0;
    LOBYTE(v579[3]) = 0;
    LOBYTE(v580) = 1;
    sub_20FD0E4BC((uint64_t)&v618, (uint64_t)&v545, *(_QWORD *)(v508 + 24), *(std::mutex **)(v508 + 280), *(_QWORD *)(v508 + 288));
    v170 = v622;
    if (!v622)
    {
      *(_BYTE *)v498 = 0;
      *(_BYTE *)(v498 + 24) = 0;
      *(_DWORD *)&v608[24] = 0;
      sub_20E878B5C(v608, "failed to open server message file ");
      sub_20EB04FEC((uint64_t)v544, (uint64_t)v608, (uint64_t)&v545);
      *(_QWORD *)&v559 = v608;
      *((_QWORD *)&v559 + 1) = " for writing";
      v560.__r_.__value_.__r.__words[0] = (std::string::size_type)v608;
      v560.__r_.__value_.__l.__size_ = (std::string::size_type)" for writing";
      v560.__r_.__value_.__r.__words[2] = (std::string::size_type)" for writing";
      if (*(_DWORD *)&v608[24] == -1)
        sub_20E877AB8();
      v510.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
      ((void (*)(std::__fs::filesystem::path *, _BYTE *))off_24CA061D0[*(unsigned int *)&v608[24]])(&v510, v608);
      if (*(_DWORD *)&v608[24] == -1)
        sub_20E877AB8();
      *(_QWORD *)&v559 = &v510;
      ((void (*)(_BYTE *__return_ptr, __int128 *, _BYTE *))off_24CA061E8[*(unsigned int *)&v608[24]])(v552, &v559, v608);
      if (*(_DWORD *)&v608[24] != -1)
        ((void (*)(__int128 *, _BYTE *))off_24CA06188[*(unsigned int *)&v608[24]])(&v559, v608);
      if ((v552[23] & 0x80000000) != 0)
      {
        sub_20E860C04(v516, *(void **)v552, *(unint64_t *)&v552[8]);
      }
      else
      {
        *(_OWORD *)v516 = *(_OWORD *)v552;
        v517 = *(_QWORD *)&v552[16];
      }
      v518 = 1;
      LOBYTE(v519) = 0;
      v523 = 0;
      v524 = 1;
      sub_20EA5B348((uint64_t)__dst, 5u, (__int128 *)v516);
      *(_OWORD *)(v498 + 32) = *(_OWORD *)__dst;
      *(_BYTE *)(v498 + 48) = 0;
      *(_BYTE *)(v498 + 144) = 0;
      if (LOBYTE(v592[1]))
      {
        *(_BYTE *)(v498 + 72) = 0;
        v178 = __dst[40];
        if (__dst[40])
        {
          *(_OWORD *)(v498 + 48) = *(_OWORD *)&__dst[16];
          *(_QWORD *)(v498 + 64) = *(_QWORD *)&__dst[32];
          memset(&__dst[16], 0, 24);
          *(_BYTE *)(v498 + 72) = 1;
        }
        *(_BYTE *)(v498 + 80) = 0;
        *(_BYTE *)(v498 + 136) = 0;
        if (BYTE8(v592[0]))
        {
          *(_OWORD *)(v498 + 80) = *(_OWORD *)&__dst[48];
          *(_QWORD *)(v498 + 96) = *(_QWORD *)&__dst[64];
          memset(&__dst[48], 0, 24);
          *(_QWORD *)(v498 + 104) = *(_QWORD *)&__dst[72];
          *(_OWORD *)(v498 + 112) = v591;
          *(_QWORD *)(v498 + 128) = *(_QWORD *)&v592[0];
          v591 = 0uLL;
          *(_QWORD *)&v592[0] = 0;
          *(_BYTE *)(v498 + 136) = 1;
        }
        *(_BYTE *)(v498 + 144) = 1;
        *(_BYTE *)(v498 + 152) = 1;
        if (v178 && (__dst[39] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[16]);
        if (!v524)
          goto LABEL_498;
      }
      else
      {
        *(_BYTE *)(v498 + 152) = 1;
        if (!v524)
          goto LABEL_498;
      }
      if (!v523)
        goto LABEL_495;
      if (v522 < 0)
      {
        operator delete(v521);
        if ((v520 & 0x80000000) == 0)
        {
LABEL_495:
          if (v518)
            goto LABEL_496;
          goto LABEL_498;
        }
      }
      else if ((v520 & 0x80000000) == 0)
      {
        goto LABEL_495;
      }
      operator delete(v519);
      if (v518)
      {
LABEL_496:
        if (SHIBYTE(v517) < 0)
          operator delete(v516[0]);
      }
LABEL_498:
      if ((v552[23] & 0x80000000) == 0)
        goto LABEL_559;
      operator delete(*(void **)v552);
      v179 = v623;
      if (!v623)
        goto LABEL_564;
      goto LABEL_560;
    }
    v525 = &off_24CA1F288;
    v526 = v622;
    v171 = v623;
    v527 = v623;
    if (v623)
    {
      v172 = (unint64_t *)&v623->__shared_owners_;
      do
      {
        v173 = __ldxr(v172);
        v168 = v173 + 1;
      }
      while (__stxr(v168, v172));
    }
    *(_QWORD *)__dst = "message_id";
    *(_QWORD *)&__dst[8] = 10;
    *(_QWORD *)&__dst[16] = *(_QWORD *)object;
    *(_QWORD *)&__dst[24] = "export_diagnostics_command";
    *(_QWORD *)&__dst[32] = 26;
    __dst[40] = 0;
    v607 = 0;
    if ((_BYTE)v580)
    {
      *(_QWORD *)&__dst[40] = "event_info";
      *(_QWORD *)&__dst[48] = 10;
      v174 = object[24];
      if (object[24])
      {
        v175 = object[8];
        v168 = *(_QWORD *)&object[8] >> 8;
        v174 = 1;
        v169 = object[16];
      }
      else
      {
        v175 = 0;
      }
      *(_QWORD *)&__dst[56] = "cause_time";
      *(_QWORD *)&__dst[64] = 10;
      __dst[72] = v175;
      *(_DWORD *)&__dst[73] = v168;
      __dst[79] = BYTE6(v168);
      *(_WORD *)&__dst[77] = WORD2(v168);
      LOBYTE(v591) = v169;
      BYTE8(v591) = v174;
      *(_QWORD *)&v592[0] = "run_options";
      *((_QWORD *)&v592[0] + 1) = 11;
      sub_20FCF2B98((uint64_t)&v592[1], (uint64_t *)&object[32]);
      v607 = 1;
    }
    *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = xmmword_2103BE4C0;
    v510.__pn_.__r_.__value_.__s.__data_[16] = 1;
    *((_QWORD *)&v559 + 1) = 0x300000000;
    v176 = operator new();
    *(_BYTE *)v176 = 0;
    *(_QWORD *)(v176 + 8) = 0;
    v560.__r_.__value_.__l.__size_ = (std::string::size_type)sub_210204328;
    v560.__r_.__value_.__s.__data_[16] = 1;
    v562[40] = 0;
    LOBYTE(v563[0]) = 0;
    BYTE4(v563[0]) = 0;
    memset(v562, 0, 25);
    v561 = (unsigned __int8 *)v176;
    v560.__r_.__value_.__r.__words[0] = v176;
    *(_QWORD *)&v559 = &off_24CA06790;
    sub_2101FA8A4((uint64_t)&v559);
    *(_QWORD *)v608 = "version";
    *(_QWORD *)&v608[8] = 7;
    *(_DWORD *)&v608[16] = 1;
    if (*v561 <= 1u)
    {
      *(_QWORD *)&v562[24] = "version";
      *(_QWORD *)&v562[32] = 7;
      if (!v562[40])
        v562[40] = 1;
    }
    sub_2101FB154((uint64_t)&v559, &v608[16]);
    sub_2101FA8A4((uint64_t)&v559);
    v177 = v561;
    if (*v561 > 1u)
    {
      if (!v562[40] || *(_QWORD *)&v562[32] != 7)
        goto LABEL_506;
    }
    else
    {
      *(_OWORD *)&v562[24] = *(_OWORD *)__dst;
      if (v562[40])
      {
        if (*(_QWORD *)&__dst[8] != 7)
          goto LABEL_506;
      }
      else
      {
        v562[40] = 1;
        if (*(_QWORD *)&__dst[8] != 7)
          goto LABEL_506;
      }
    }
    if (**(_DWORD **)&v562[24] != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)&v562[24] + 3) != *(_DWORD *)"sion")
    {
LABEL_506:
      v608[0] = 6;
      *(_QWORD *)&v608[8] = *(_QWORD *)&__dst[16];
      v181 = (unsigned __int8 *)sub_2101FA67C((uint64_t)&v559);
      v182 = *v181;
      *v181 = v608[0];
      v608[0] = v182;
      v183 = *((_QWORD *)v181 + 1);
      *((_QWORD *)v181 + 1) = *(_QWORD *)&v608[8];
      *(_QWORD *)&v608[8] = v183;
      sub_20EB911C0((uint64_t *)&v608[8], v182);
      v177 = v561;
    }
    if (*v177 > 1u || (*(_OWORD *)&v562[24] = *(_OWORD *)&__dst[24], v562[40]))
    {
      if (v607)
        goto LABEL_510;
    }
    else
    {
      v562[40] = 1;
      if (v607)
      {
LABEL_510:
        v184 = DWORD2(v559);
        sub_2101FA8A4((uint64_t)&v559);
        *(_QWORD *)v608 = "version";
        *(_QWORD *)&v608[8] = 7;
        *(_DWORD *)&v608[16] = 1;
        if (*v561 <= 1u)
        {
          *(_QWORD *)&v562[24] = "version";
          *(_QWORD *)&v562[32] = 7;
          if (!v562[40])
            v562[40] = 1;
        }
        sub_2101FB154((uint64_t)&v559, &v608[16]);
        if (v184 < 1)
        {
          sub_2101FA8A4((uint64_t)&v559);
          if (*v561 <= 1u)
          {
            *(_OWORD *)&v562[24] = *(_OWORD *)&__dst[40];
            if (!v562[40])
              v562[40] = 1;
          }
          *(_QWORD *)v608 = *((_QWORD *)&v559 + 1);
          sub_20FD29E5C((int *)v608, (uint64_t)&v559, (uint64_t)&__dst[56]);
          if (*v561 <= 1u)
          {
            *(_OWORD *)&v562[24] = v592[0];
            if (!v562[40])
              v562[40] = 1;
          }
        }
        else
        {
          if (v184 == 2)
          {
            *(_QWORD *)v608 = "min_version";
            *(_QWORD *)&v608[8] = 11;
            *(_DWORD *)&v608[16] = 1;
            if (*v561 <= 1u)
            {
              *(_QWORD *)&v562[24] = "min_version";
              *(_QWORD *)&v562[32] = 11;
              if (!v562[40])
                v562[40] = 1;
            }
            sub_2101FB154((uint64_t)&v559, &v608[16]);
          }
          sub_2101FA8A4((uint64_t)&v559);
          if (*v561 <= 1u)
          {
            *(_OWORD *)&v562[24] = *(_OWORD *)&__dst[40];
            if (!v562[40])
              v562[40] = 1;
          }
          *(_QWORD *)v608 = *((_QWORD *)&v559 + 1);
          sub_20FD29E5C((int *)v608, (uint64_t)&v559, (uint64_t)&__dst[56]);
          if (*v561 <= 1u)
          {
            *(_OWORD *)&v562[24] = v592[0];
            if (!v562[40])
              v562[40] = 1;
          }
        }
        *(_QWORD *)v608 = *((_QWORD *)&v559 + 1);
        sub_20FD2A854(v608, (uint64_t)&v559, (const char *)&v592[1]);
        v185 = *(_QWORD *)&v562[8] - 8;
        v561 = *(unsigned __int8 **)(*(_QWORD *)&v562[8] - 8);
        *(_QWORD *)&v562[8] -= 8;
        if (v562[40])
          v562[40] = 0;
        v561 = *(unsigned __int8 **)(v185 - 8);
        *(_QWORD *)&v562[8] = v185 - 8;
        v187 = *(unsigned __int8 **)(v185 - 16);
        v186 = v185 - 16;
        v561 = v187;
        *(_QWORD *)&v562[8] = v186;
        goto LABEL_538;
      }
    }
    v608[0] = 0;
    *(_QWORD *)&v608[8] = 0;
    v188 = (unsigned __int8 *)sub_2101FA67C((uint64_t)&v559);
    v189 = *v188;
    *v188 = v608[0];
    v608[0] = v189;
    v190 = *((_QWORD *)v188 + 1);
    *((_QWORD *)v188 + 1) = *(_QWORD *)&v608[8];
    *(_QWORD *)&v608[8] = v190;
    sub_20EB911C0((uint64_t *)&v608[8], v189);
    v186 = *(_QWORD *)&v562[8] - 8;
    v561 = *(unsigned __int8 **)(*(_QWORD *)&v562[8] - 8);
    *(_QWORD *)&v562[8] -= 8;
    if (v562[40])
      v562[40] = 0;
LABEL_538:
    v561 = *(unsigned __int8 **)(v186 - 8);
    *(_QWORD *)&v562[8] = v186 - 8;
    sub_2101F7620((unsigned __int8 *)v560.__r_.__value_.__l.__data_, (uint64_t)&v510, v552);
    *(_QWORD *)&v559 = &off_24CA1DB50;
    if (*(_QWORD *)v562)
    {
      *(_QWORD *)&v562[8] = *(_QWORD *)v562;
      operator delete(*(void **)v562);
    }
    v191 = (uint64_t *)v560.__r_.__value_.__r.__words[0];
    v560.__r_.__value_.__r.__words[0] = 0;
    if (v191)
      ((void (*)(uint64_t *))v560.__r_.__value_.__l.__size_)(v191);
    v192 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v170 + 16))(v170);
    if (v552[23] >= 0)
      v193 = v552;
    else
      v193 = *(_BYTE **)v552;
    if (v552[23] >= 0)
      v194 = v552[23];
    else
      v194 = *(_QWORD *)&v552[8];
    sub_20E86A980(v192, (uint64_t)v193, v194);
    if ((v552[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v552);
      if (v607)
      {
LABEL_552:
        if (v606 && v605 < 0)
          operator delete(v604);
      }
    }
    else if (v607)
    {
      goto LABEL_552;
    }
    if (!v171)
      goto LABEL_559;
    v195 = (unint64_t *)&v171->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (v196)
    {
LABEL_559:
      v179 = v623;
      if (!v623)
        goto LABEL_564;
      goto LABEL_560;
    }
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
    v179 = v623;
    if (!v623)
      goto LABEL_564;
LABEL_560:
    v197 = (unint64_t *)&v179->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
LABEL_564:
    sub_20FD0E1D8((uint64_t)&v618);
    if ((_BYTE)v580 && LOBYTE(v579[3]) && SHIBYTE(v579[2]) < 0)
      operator delete(v579[0]);
    if (SHIBYTE(v545.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v545.__r_.__value_.__l.__data_);
      if ((v556.__pn_.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
      {
LABEL_570:
        if (!v170)
          goto LABEL_1477;
        goto LABEL_574;
      }
    }
    else if ((v556.__pn_.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
    {
      goto LABEL_570;
    }
    operator delete((void *)v555);
    if (!v170)
      goto LABEL_1477;
LABEL_574:
    v163 += 232;
  }
  while (v163 != v505);
  v558 = 0;
  *((_QWORD *)&v557 + 1) = 0;
  *(_QWORD *)&v557 = (char *)&v557 + 8;
  *(_QWORD *)__dst = v541;
  *(_QWORD *)&__dst[8] = &off_24CA06108;
  *(_QWORD *)&__dst[16] = v508;
  *(_QWORD *)&__dst[24] = &v531;
  *(_QWORD *)&__dst[32] = &__dst[8];
  *(_QWORD *)&__dst[40] = v542;
  *(_QWORD *)&__dst[48] = &off_24CA06108;
  *(_QWORD *)&__dst[56] = v508;
  *(_QWORD *)&__dst[72] = &__dst[48];
  *(_QWORD *)&__dst[64] = &v531;
  v199 = &v608[8];
  v609 = (std::__shared_weak_count *)&v608[8];
  *(_QWORD *)v608 = v541;
  *(_QWORD *)&v608[8] = &off_24CA06108;
  *(_OWORD *)&v608[16] = *(_OWORD *)&__dst[16];
  v200 = &v552[8];
  v553 = &v552[8];
  *(_QWORD *)v552 = v542;
  *(_QWORD *)&v552[8] = &off_24CA06108;
  *(_OWORD *)&v552[16] = *(_OWORD *)&__dst[56];
  v201 = &v514;
  v515 = 0;
  v514 = 0;
  v513 = (uint64_t *)&v514;
  v202 = (_QWORD *)&v559 + 1;
  v560.__r_.__value_.__r.__words[2] = (std::string::size_type)&v559 + 8;
  *(_QWORD *)&v559 = v541;
  *((_QWORD *)&v559 + 1) = &off_24CA06108;
  *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
  v203 = (char *)&v618 + 8;
  v620 = (char *)&v618 + 8;
  *(_QWORD *)&v618 = v542;
  *((_QWORD *)&v618 + 1) = &off_24CA06108;
  v619 = *(_OWORD *)&__dst[56];
  if (v541 == v542)
    goto LABEL_660;
  while (2)
  {
    if (!v560.__r_.__value_.__r.__words[2])
      sub_20E86D37C();
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v560.__r_.__value_.__r.__words[2] + 48))(object);
    v205 = v514;
    v206 = &v514;
    if (v513 == (uint64_t *)&v514)
      goto LABEL_608;
    v207 = v514;
    v208 = &v514;
    if (v514)
    {
      do
      {
        v206 = (uint64_t **)v207;
        v207 = (uint64_t *)v207[1];
      }
      while (v207);
    }
    else
    {
      do
      {
        v206 = (uint64_t **)v208[2];
        v27 = *v206 == (uint64_t *)v208;
        v208 = v206;
      }
      while (v27);
    }
    v209 = *((unsigned __int8 *)v206 + 32);
    v210 = object[0];
    if (v209 != object[0])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 33);
    v210 = object[1];
    if (v209 != object[1])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 34);
    v210 = object[2];
    if (v209 != object[2])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 35);
    v210 = object[3];
    if (v209 != object[3])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 36);
    v210 = object[4];
    if (v209 != object[4])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 37);
    v210 = object[5];
    if (v209 != object[5])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 38);
    v210 = object[6];
    if (v209 != object[6])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 39);
    v210 = object[7];
    if (v209 != object[7])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 40);
    v210 = object[8];
    if (v209 != object[8])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 41);
    v210 = object[9];
    if (v209 != object[9])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 42);
    v210 = object[10];
    if (v209 != object[10])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 43);
    v210 = object[11];
    if (v209 != object[11])
      goto LABEL_607;
    v209 = *((unsigned __int8 *)v206 + 44);
    v210 = object[12];
    if (v209 != object[12]
      || (v209 = *((unsigned __int8 *)v206 + 45), v210 = object[13], v209 != object[13])
      || (v209 = *((unsigned __int8 *)v206 + 46), v210 = object[14], v209 != object[14])
      || (v209 = *((unsigned __int8 *)v206 + 47), v210 = object[15], v209 != object[15]))
    {
LABEL_607:
      if (v209 < v210)
      {
LABEL_608:
        v211 = &v514;
        if (v514)
        {
          v211 = v206 + 1;
          goto LABEL_652;
        }
        goto LABEL_653;
      }
    }
    v206 = &v514;
    v211 = &v514;
    if (!v514)
      goto LABEL_652;
    v211 = &v514;
    while (2)
    {
      while (2)
      {
        v201 = (uint64_t **)v205;
        v212 = *((unsigned __int8 *)v205 + 32);
        if (object[0] != v212)
        {
          v215 = object[0];
          if (object[0] < v212)
            goto LABEL_612;
LABEL_648:
          if (v212 >= v215)
            goto LABEL_651;
          v211 = v201 + 1;
          v205 = v201[1];
          if (!v205)
            goto LABEL_653;
          continue;
        }
        break;
      }
      v212 = *((unsigned __int8 *)v201 + 33);
      if (object[1] != v212)
      {
        v215 = object[1];
        if (object[1] < v212)
          goto LABEL_612;
        goto LABEL_648;
      }
      v213 = *((unsigned __int8 *)v201 + 34);
      v214 = object[2];
      if (object[2] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 35);
      v214 = object[3];
      if (object[3] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 36);
      v214 = object[4];
      if (object[4] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 37);
      v214 = object[5];
      if (object[5] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 38);
      v214 = object[6];
      if (object[6] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 39);
      v214 = object[7];
      if (object[7] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 40);
      v214 = object[8];
      if (object[8] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 41);
      v214 = object[9];
      if (object[9] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 42);
      v214 = object[10];
      if (object[10] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 43);
      v214 = object[11];
      if (object[11] != v213)
        goto LABEL_629;
      v213 = *((unsigned __int8 *)v201 + 44);
      v214 = object[12];
      if (object[12] != v213
        || (v213 = *((unsigned __int8 *)v201 + 45), v214 = object[13], object[13] != v213)
        || (v213 = *((unsigned __int8 *)v201 + 46), v214 = object[14], object[14] != v213)
        || (v213 = *((unsigned __int8 *)v201 + 47), v214 = object[15], object[15] != v213))
      {
LABEL_629:
        if (v214 < v213)
        {
LABEL_612:
          v205 = *v201;
          v211 = v201;
          if (!*v201)
            goto LABEL_653;
          continue;
        }
      }
      break;
    }
    v212 = *((unsigned __int8 *)v201 + 34);
    v215 = object[2];
    if (v212 != object[2])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 35);
    v215 = object[3];
    if (v212 != object[3])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 36);
    v215 = object[4];
    if (v212 != object[4])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 37);
    v215 = object[5];
    if (v212 != object[5])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 38);
    v215 = object[6];
    if (v212 != object[6])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 39);
    v215 = object[7];
    if (v212 != object[7])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 40);
    v215 = object[8];
    if (v212 != object[8])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 41);
    v215 = object[9];
    if (v212 != object[9])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 42);
    v215 = object[10];
    if (v212 != object[10])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 43);
    v215 = object[11];
    if (v212 != object[11])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 44);
    v215 = object[12];
    if (v212 != object[12])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 45);
    v215 = object[13];
    if (v212 != object[13])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 46);
    v215 = object[14];
    if (v212 != object[14])
      goto LABEL_648;
    v212 = *((unsigned __int8 *)v201 + 47);
    v215 = object[15];
    if (v212 != object[15])
      goto LABEL_648;
LABEL_651:
    v206 = v201;
LABEL_652:
    v201 = v206;
    if (*v211)
    {
      if ((object[39] & 0x80000000) != 0)
        goto LABEL_656;
    }
    else
    {
LABEL_653:
      v216 = operator new(0x48uLL);
      v217 = *(_OWORD *)&object[16];
      v216[2] = *(_OWORD *)object;
      v216[3] = v217;
      *((_QWORD *)v216 + 8) = *(_QWORD *)&object[32];
      memset(&object[16], 0, 24);
      *(_QWORD *)v216 = 0;
      *((_QWORD *)v216 + 1) = 0;
      *((_QWORD *)v216 + 2) = v201;
      *v211 = (uint64_t *)v216;
      if (*v513)
      {
        v513 = (uint64_t *)*v513;
        v216 = *v211;
      }
      sub_20E868578(v514, (uint64_t *)v216);
      ++v515;
      if ((object[39] & 0x80000000) != 0)
LABEL_656:
        operator delete(*(void **)&object[16]);
    }
    v204 = v559 + 232;
    *(_QWORD *)&v559 = v204;
    v201 = &v514;
    if (v204 != (_QWORD)v618)
      continue;
    break;
  }
  if (v620 != (char *)&v618 + 8)
  {
    v218 = v494;
    if (v620)
    {
      v219 = 5;
      v203 = v620;
      goto LABEL_661;
    }
    goto LABEL_662;
  }
LABEL_660:
  v219 = 4;
  v218 = v494;
LABEL_661:
  (*(void (**)(char *))(*(_QWORD *)v203 + 8 * v219))(v203);
LABEL_662:
  if ((__int128 *)v560.__r_.__value_.__r.__words[2] == (__int128 *)((char *)&v559 + 8))
  {
    v220 = 4;
LABEL_688:
    (*(void (**)(_QWORD *))(*v202 + 8 * v220))(v202);
  }
  else if (v560.__r_.__value_.__r.__words[2])
  {
    v220 = 5;
    v202 = (_QWORD *)v560.__r_.__value_.__r.__words[2];
    goto LABEL_688;
  }
  if (v553 == &v552[8])
  {
    v223 = 4;
LABEL_693:
    (*(void (**)(_QWORD *))(*v200 + 8 * v223))(v200);
  }
  else if (v553)
  {
    v223 = 5;
    v200 = v553;
    goto LABEL_693;
  }
  if (v609 == (std::__shared_weak_count *)&v608[8])
  {
    v224 = 4;
LABEL_698:
    (*(void (**)(_QWORD *))(*v199 + 8 * v224))(v199);
  }
  else if (v609)
  {
    v224 = 5;
    v199 = &v609->__vftable;
    goto LABEL_698;
  }
  v225 = *(_QWORD **)&__dst[72];
  if (*(_BYTE **)&__dst[72] == &__dst[48])
  {
    v226 = 4;
    v225 = &__dst[48];
LABEL_703:
    (*(void (**)(_QWORD *, uint64_t))(*v225 + 8 * v226))(v225, v204);
  }
  else if (*(_QWORD *)&__dst[72])
  {
    v226 = 5;
    goto LABEL_703;
  }
  v227 = *(_QWORD **)&__dst[32];
  if (*(_BYTE **)&__dst[32] == &__dst[8])
  {
    v228 = 4;
    v227 = &__dst[8];
LABEL_708:
    (*(void (**)(_QWORD *, uint64_t))(*v227 + 8 * v228))(v227, v204);
  }
  else if (*(_QWORD *)&__dst[32])
  {
    v228 = 5;
    goto LABEL_708;
  }
  if (*(_BYTE *)(v218 + 24))
    v229 = *(_BYTE *)(v218 + 56) == 0;
  else
    v229 = 1;
  v230 = *(_QWORD *)(v218 + 16);
  if (v229)
    v230 = 5000000000;
  v496 = v230;
  v495.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v515)
  {
    v490 = *MEMORY[0x24BEDB7F0];
    v491 = (void *)(MEMORY[0x24BEDB848] + 16);
    v488 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v489 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    do
    {
      v231 = (uint64_t)v513;
      if (v513 == (uint64_t *)&v514)
        goto LABEL_1419;
      v232 = 0;
LABEL_721:
      while (2)
      {
        v555 = *(_OWORD *)(v231 + 32);
        if (*(char *)(v231 + 71) < 0)
          sub_20E860C04(&v556, *(void **)(v231 + 48), *(_QWORD *)(v231 + 56));
        else
          v556 = *(std::__fs::filesystem::path *)(v231 + 48);
        v233 = *(_QWORD *)(v508 + 24);
        v234 = *(std::mutex **)(v508 + 280);
        v235 = *(_QWORD *)(v508 + 288);
        v236.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        while (1)
        {
          if (SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) < 0)
            sub_20E860C04(__dst, v556.__pn_.__r_.__value_.__l.__data_, v556.__pn_.__r_.__value_.__l.__size_);
          else
            *(std::__fs::filesystem::path *)__dst = v556;
          v237 = sub_20FD0E298((uint64_t)__dst, v233, v234, v235);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if ((v237 & 1) == 0)
          {
            if (*(_BYTE *)(v508 + 288))
            {
              v238 = *(std::mutex **)(v508 + 280);
              v239 = operator new();
              *(_QWORD *)v239 = v238;
              *(_BYTE *)(v239 + 8) = 1;
              std::mutex::lock(v238);
              v509 = v239;
              v240 = *(_QWORD *)(v508 + 24);
              if ((SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_735;
LABEL_739:
              sub_20E860C04(v552, v556.__pn_.__r_.__value_.__l.__data_, v556.__pn_.__r_.__value_.__l.__size_);
            }
            else
            {
              v509 = 0;
              v240 = *(_QWORD *)(v508 + 24);
              if (SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_739;
LABEL_735:
              *(std::__fs::filesystem::path *)v552 = v556;
            }
            *(_QWORD *)&v552[24] = v240;
            (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v240 + 272))(v240, &v556);
            v554 = v240;
            if (v553 != 1)
            {
              v242 = *(_QWORD **)(v231 + 8);
              if (v242)
              {
                do
                {
                  v231 = (uint64_t)v242;
                  v242 = (_QWORD *)*v242;
                }
                while (v242);
              }
              else
              {
                do
                {
                  v243 = v231;
                  v231 = *(_QWORD *)(v231 + 16);
                }
                while (*(_QWORD *)v231 != v243);
              }
              if ((v552[23] & 0x80000000) != 0)
                goto LABEL_1378;
              goto LABEL_748;
            }
            v241 = *(_QWORD *)(v508 + 24);
            if (SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) < 0)
              sub_20E860C04(&v510, v556.__pn_.__r_.__value_.__l.__data_, v556.__pn_.__r_.__value_.__l.__size_);
            else
              v510 = v556;
            v511 = v241;
            (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v241 + 272))(v241, &v556);
            v512 = v241;
            v245 = std::__fs::filesystem::path::__extension(&v510);
            if (v245.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v245.__size_ >= 0x17)
            {
              v247 = (v245.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v245.__size_ | 7) != 0x17)
                v247 = v245.__size_ | 7;
              v248 = v247 + 1;
              v246 = operator new(v247 + 1);
              *(_QWORD *)&__dst[16] = v248 | 0x8000000000000000;
              *(_QWORD *)__dst = v246;
              *(_QWORD *)&__dst[8] = v245.__size_;
            }
            else
            {
              __dst[23] = v245.__size_;
              v246 = __dst;
              if (!v245.__size_)
              {
LABEL_759:
                v246[v245.__size_] = 0;
                v249 = *(void **)__dst;
                *(_DWORD *)object = *(_DWORD *)&__dst[16];
                *(_DWORD *)&object[3] = *(_DWORD *)&__dst[19];
                if ((__dst[23] & 0x80000000) == 0)
                {
                  v250 = __dst[23];
                  *(_OWORD *)v544 = *(_OWORD *)__dst;
                  *(_DWORD *)&v544[16] = *(_DWORD *)object;
                  *(_DWORD *)&v544[19] = *(_DWORD *)&object[3];
                  v544[23] = __dst[23];
                  v251 = __dst[23];
                  if (__dst[23] < 0)
                    v250 = *(_QWORD *)&__dst[8];
                  if (v250 != 5)
                    goto LABEL_763;
LABEL_786:
                  v37 = v251 < 0;
                  v252 = v544;
                  if (v37)
                    v252 = *(_BYTE **)v544;
                  if (*(_DWORD *)v252 != 1869834798 || v252[4] != 110)
                  {
LABEL_807:
                    *(_QWORD *)object = "unknown server/client file extension ";
                    *(_QWORD *)&object[8] = 37;
                    *(_QWORD *)&object[16] = v252;
                    *(_QWORD *)&object[24] = v250;
                    sub_20E8778D4((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)&v618);
                    if (SBYTE7(v619) < 0)
                    {
                      sub_20E860C04(object, (void *)v618, *((unint64_t *)&v618 + 1));
                    }
                    else
                    {
                      *(_OWORD *)object = v618;
                      *(_QWORD *)&object[16] = v619;
                    }
                    object[24] = 1;
                    object[32] = 0;
                    LOBYTE(v578[6]) = 0;
                    LOBYTE(v579[0]) = 1;
                    sub_20FD20A78((uint64_t)__dst, 5u, (__int128 *)object);
                    v559 = *(_OWORD *)__dst;
                    v560.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v563[2]) = 0;
                    if (LOBYTE(v592[1]))
                    {
                      LOBYTE(v561) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
                        v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v561) = 1;
                      }
                      v562[0] = 0;
                      LOBYTE(v563[1]) = 0;
                      if (BYTE8(v592[0]))
                      {
                        *(_OWORD *)v562 = *(_OWORD *)&__dst[48];
                        *(_OWORD *)&v562[16] = *(_OWORD *)&__dst[64];
                        *(_OWORD *)&v562[32] = v591;
                        v563[0] = *(void **)&v592[0];
                        LOBYTE(v563[1]) = 1;
                      }
                      LOBYTE(v563[2]) = 1;
                      BYTE8(v569) = 0;
                      if (__dst[40] && (__dst[39] & 0x80000000) != 0)
                        operator delete(*(void **)&__dst[16]);
                      if (!LOBYTE(v579[0]))
                      {
LABEL_827:
                        if (SBYTE7(v619) < 0)
                        {
                          v259 = (void *)v618;
                          goto LABEL_829;
                        }
LABEL_830:
                        if ((v544[23] & 0x80000000) != 0)
                          operator delete(*(void **)v544);
                        (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v508 + 24) + 232))(*(_QWORD *)(v508 + 24), &v556);
                        if (BYTE8(v569))
                        {
                          v260 = (char *)*((_QWORD *)&v557 + 1);
                          v261 = (char *)&v557 + 8;
                          v262 = (uint64_t **)&v557 + 1;
                          if (*((_QWORD *)&v557 + 1))
                          {
                            while (1)
                            {
                              v261 = v260;
                              v263 = v260[32];
                              if (v555 != v263)
                              {
                                v266 = v555;
                                if (v555 >= v263)
                                  goto LABEL_873;
                                goto LABEL_835;
                              }
                              v263 = v261[33];
                              if (BYTE1(v555) != v263)
                                break;
                              v263 = v261[34];
                              if (BYTE2(v555) == v263)
                              {
                                v263 = v261[35];
                                if (BYTE3(v555) != v263)
                                {
                                  v266 = BYTE3(v555);
                                  if (BYTE3(v555) >= v263)
                                    goto LABEL_873;
                                  goto LABEL_835;
                                }
                                v264 = v261[36];
                                v265 = BYTE4(v555);
                                if (BYTE4(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[37];
                                v265 = BYTE5(v555);
                                if (BYTE5(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[38];
                                v265 = BYTE6(v555);
                                if (BYTE6(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[39];
                                v265 = BYTE7(v555);
                                if (BYTE7(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[40];
                                v265 = BYTE8(v555);
                                if (BYTE8(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[41];
                                v265 = BYTE9(v555);
                                if (BYTE9(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[42];
                                v265 = BYTE10(v555);
                                if (BYTE10(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[43];
                                v265 = BYTE11(v555);
                                if (BYTE11(v555) != v264)
                                  goto LABEL_852;
                                v264 = v261[44];
                                v265 = BYTE12(v555);
                                if (BYTE12(v555) != v264
                                  || (v264 = v261[45], v265 = BYTE13(v555), BYTE13(v555) != v264)
                                  || (v264 = v261[46], v265 = BYTE14(v555), BYTE14(v555) != v264)
                                  || (v264 = v261[47], v265 = HIBYTE(v555), HIBYTE(v555) != v264))
                                {
LABEL_852:
                                  if (v265 < v264)
                                    goto LABEL_835;
                                }
                                v263 = v261[36];
                                v266 = BYTE4(v555);
                                if (v263 == BYTE4(v555))
                                {
                                  v263 = v261[37];
                                  v266 = BYTE5(v555);
                                  if (v263 == BYTE5(v555))
                                  {
                                    v263 = v261[38];
                                    v266 = BYTE6(v555);
                                    if (v263 == BYTE6(v555))
                                    {
                                      v263 = v261[39];
                                      v266 = BYTE7(v555);
                                      if (v263 == BYTE7(v555))
                                      {
                                        v263 = v261[40];
                                        v266 = BYTE8(v555);
                                        if (v263 == BYTE8(v555))
                                        {
                                          v263 = v261[41];
                                          v266 = BYTE9(v555);
                                          if (v263 == BYTE9(v555))
                                          {
                                            v263 = v261[42];
                                            v266 = BYTE10(v555);
                                            if (v263 == BYTE10(v555))
                                            {
                                              v263 = v261[43];
                                              v266 = BYTE11(v555);
                                              if (v263 == BYTE11(v555))
                                              {
                                                v263 = v261[44];
                                                v266 = BYTE12(v555);
                                                if (v263 == BYTE12(v555))
                                                {
                                                  v263 = v261[45];
                                                  v266 = BYTE13(v555);
                                                  if (v263 == BYTE13(v555))
                                                  {
                                                    v263 = v261[46];
                                                    v266 = BYTE14(v555);
                                                    if (v263 == BYTE14(v555))
                                                    {
                                                      v263 = v261[47];
                                                      v266 = HIBYTE(v555);
                                                      if (v263 == HIBYTE(v555))
                                                      {
LABEL_893:
                                                        v267 = (unsigned __int8 *)v261;
                                                        goto LABEL_894;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_873:
                                if (v263 >= v266)
                                  goto LABEL_893;
                                v260 = (char *)*((_QWORD *)v261 + 1);
                                if (!v260)
                                {
                                  v262 = (uint64_t **)(v261 + 8);
                                  goto LABEL_876;
                                }
                              }
                              else
                              {
                                v266 = BYTE2(v555);
                                if (BYTE2(v555) >= v263)
                                  goto LABEL_873;
LABEL_835:
                                v260 = *(char **)v261;
                                v262 = (uint64_t **)v261;
                                if (!*(_QWORD *)v261)
                                  goto LABEL_876;
                              }
                            }
                            v266 = BYTE1(v555);
                            if (BYTE1(v555) >= v263)
                              goto LABEL_873;
                            goto LABEL_835;
                          }
LABEL_876:
                          v267 = (unsigned __int8 *)operator new(0xE8uLL);
                          *((_OWORD *)v267 + 2) = v555;
                          *((_OWORD *)v267 + 3) = 0u;
                          *((_OWORD *)v267 + 4) = 0u;
                          *((_OWORD *)v267 + 5) = 0u;
                          *((_OWORD *)v267 + 6) = 0u;
                          *((_OWORD *)v267 + 7) = 0u;
                          *((_OWORD *)v267 + 8) = 0u;
                          *((_OWORD *)v267 + 9) = 0u;
                          *((_OWORD *)v267 + 10) = 0u;
                          *((_OWORD *)v267 + 11) = 0u;
                          *((_OWORD *)v267 + 12) = 0u;
                          *((_OWORD *)v267 + 13) = 0u;
                          *((_QWORD *)v267 + 28) = 0;
                          *(_QWORD *)v267 = 0;
                          *((_QWORD *)v267 + 1) = 0;
                          *((_QWORD *)v267 + 2) = v261;
                          *v262 = (uint64_t *)v267;
                          v268 = (uint64_t *)v267;
                          if (*(_QWORD *)v557)
                          {
                            *(_QWORD *)&v557 = *(_QWORD *)v557;
                            v268 = *v262;
                          }
                          sub_20E868578(*((uint64_t **)&v557 + 1), v268);
                          ++v558;
LABEL_894:
                          *((_QWORD *)v267 + 6) = v559;
                          v267[56] = BYTE8(v559);
                          v277 = (uint64_t)(v267 + 64);
                          if (v267[224] != v569)
                          {
                            if (v267[224])
                            {
                              sub_20E8DDADC(v277);
                              v279 = 0;
                            }
                            else
                            {
                              v267[64] = 0;
                              v267[88] = 0;
                              if ((_BYTE)v561)
                              {
                                *((_OWORD *)v267 + 4) = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
                                *((_QWORD *)v267 + 10) = *((_QWORD *)&v560.__r_.__value_.__l + 2);
                                memset(&v560, 0, sizeof(v560));
                                v267[88] = 1;
                              }
                              v267[96] = 0;
                              v267[216] = 0;
                              if ((_BYTE)v568)
                              {
                                *((_OWORD *)v267 + 6) = *(_OWORD *)v562;
                                v267[112] = 0;
                                v267[208] = 0;
                                if (BYTE8(v567))
                                {
                                  v267[136] = 0;
                                  if (v562[40])
                                  {
                                    *((_OWORD *)v267 + 7) = *(_OWORD *)&v562[16];
                                    *((_QWORD *)v267 + 16) = *(_QWORD *)&v562[32];
                                    memset(&v562[16], 0, 24);
                                    v267[136] = 1;
                                  }
                                  v267[144] = 0;
                                  v267[200] = 0;
                                  if ((_BYTE)v567)
                                  {
                                    *((_OWORD *)v267 + 9) = *(_OWORD *)v563;
                                    *((void **)v267 + 20) = v563[2];
                                    memset(v563, 0, sizeof(v563));
                                    *((_QWORD *)v267 + 21) = v564;
                                    *((_OWORD *)v267 + 11) = v565;
                                    *((_QWORD *)v267 + 24) = v566;
                                    v565 = 0uLL;
                                    v566 = 0;
                                    v267[200] = 1;
                                  }
                                  v267[208] = 1;
                                }
                                v279 = 1;
                                v267[216] = 1;
                              }
                              else
                              {
                                v279 = 1;
                              }
                            }
                            v267[224] = v279;
                            goto LABEL_943;
                          }
                          if (!v267[224])
                            goto LABEL_943;
                          sub_20FD203D4(v277, (uint64_t)&v560);
                          v278 = v267 + 96;
                          if (v267[216] == v568)
                          {
                            if (v267[216])
                            {
                              *v278 = *(_OWORD *)v562;
                              sub_20FD03AA4((uint64_t)(v267 + 112), (__int128 *)&v562[16]);
                            }
                            goto LABEL_943;
                          }
                          if (!v267[216])
                          {
                            *v278 = *(_OWORD *)v562;
                            v267[112] = 0;
                            v267[208] = 0;
                            if (!BYTE8(v567))
                            {
                              v267[216] = 1;
                              goto LABEL_943;
                            }
                            v267[136] = 0;
                            if (v562[40])
                            {
                              *((_OWORD *)v267 + 7) = *(_OWORD *)&v562[16];
                              *((_QWORD *)v267 + 16) = *(_QWORD *)&v562[32];
                              memset(&v562[16], 0, 24);
                              v267[136] = 1;
                            }
                            v267[144] = 0;
                            v267[200] = 0;
                            if ((_BYTE)v567)
                            {
                              *((_OWORD *)v267 + 9) = *(_OWORD *)v563;
                              *((void **)v267 + 20) = v563[2];
                              memset(v563, 0, sizeof(v563));
                              *((_QWORD *)v267 + 21) = v564;
                              *((_OWORD *)v267 + 11) = v565;
                              *((_QWORD *)v267 + 24) = v566;
                              v565 = 0uLL;
                              v566 = 0;
                              v267[200] = 1;
                            }
                            v280 = 1;
                            v267[208] = 1;
                            goto LABEL_1074;
                          }
                          v280 = v267[208];
                          if (v280)
                          {
                            if (!v267[200])
                              goto LABEL_919;
                            if (((char)v267[199] & 0x80000000) == 0)
                            {
                              if (((char)v267[167] & 0x80000000) == 0)
                                goto LABEL_919;
LABEL_1392:
                              operator delete(*((void **)v267 + 18));
                              v280 = v267[136];
                              if (!v280)
                                goto LABEL_1074;
LABEL_920:
                              if ((char)v267[135] < 0)
                                operator delete(*((void **)v267 + 14));
                              v267[216] = 0;
LABEL_943:
                              v281 = &v514;
                              if (v514)
                              {
                                v282 = v555;
                                v283 = &v514;
                                v284 = v514;
                                do
                                {
                                  v285 = (unsigned __int8 *)v284;
                                  v286 = v283;
                                  v287 = *((unsigned __int8 *)v284 + 32);
                                  v288 = v555;
                                  if (v287 != v555)
                                    goto LABEL_962;
                                  v287 = v285[33];
                                  v288 = BYTE1(v555);
                                  if (v287 != BYTE1(v555))
                                    goto LABEL_962;
                                  v287 = v285[34];
                                  v288 = BYTE2(v555);
                                  if (v287 != BYTE2(v555))
                                    goto LABEL_962;
                                  v287 = v285[35];
                                  v288 = BYTE3(v555);
                                  if (v287 != BYTE3(v555))
                                    goto LABEL_962;
                                  v287 = v285[36];
                                  v288 = BYTE4(v555);
                                  if (v287 != BYTE4(v555))
                                    goto LABEL_962;
                                  v287 = v285[37];
                                  v288 = BYTE5(v555);
                                  if (v287 != BYTE5(v555))
                                    goto LABEL_962;
                                  v287 = v285[38];
                                  v288 = BYTE6(v555);
                                  if (v287 != BYTE6(v555))
                                    goto LABEL_962;
                                  v287 = v285[39];
                                  v288 = BYTE7(v555);
                                  if (v287 != BYTE7(v555))
                                    goto LABEL_962;
                                  v287 = v285[40];
                                  v288 = BYTE8(v555);
                                  if (v287 != BYTE8(v555))
                                    goto LABEL_962;
                                  v287 = v285[41];
                                  v288 = BYTE9(v555);
                                  if (v287 != BYTE9(v555))
                                    goto LABEL_962;
                                  v287 = v285[42];
                                  v288 = BYTE10(v555);
                                  if (v287 != BYTE10(v555))
                                    goto LABEL_962;
                                  v287 = v285[43];
                                  v288 = BYTE11(v555);
                                  if (v287 != BYTE11(v555))
                                    goto LABEL_962;
                                  v287 = v285[44];
                                  v288 = BYTE12(v555);
                                  if (v287 != BYTE12(v555))
                                    goto LABEL_962;
                                  v287 = v285[45];
                                  v288 = BYTE13(v555);
                                  if (v287 == BYTE13(v555)
                                    && (v287 = v285[46], v288 = BYTE14(v555), v287 == BYTE14(v555))
                                    && (v287 = v285[47], v288 = HIBYTE(v555), v287 == HIBYTE(v555)))
                                  {
                                    v289 = 0;
                                    v290 = v285;
                                    v283 = (uint64_t **)v285;
                                  }
                                  else
                                  {
LABEL_962:
                                    v291 = v287 >= v288;
                                    v290 = v285 + 8;
                                    if (v291)
                                    {
                                      v290 = v285;
                                      v289 = 0;
                                    }
                                    else
                                    {
                                      v289 = 1;
                                    }
                                    if (v291)
                                      v283 = (uint64_t **)v285;
                                    else
                                      v283 = v286;
                                  }
                                  v284 = *(uint64_t **)v290;
                                }
                                while (v284);
                                v281 = &v514;
                                if (v283 != &v514)
                                {
                                  v292 = v289 ? (unsigned __int8 *)v286 : v285;
                                  v293 = v292[32];
                                  if (v555 == v293)
                                  {
                                    v294 = v289 ? (unsigned __int8 *)v286 : v285;
                                    v293 = v294[33];
                                    v282 = BYTE1(v555);
                                    if (BYTE1(v555) == v293)
                                    {
                                      v295 = v289 ? (unsigned __int8 *)v286 : v285;
                                      v293 = v295[34];
                                      v282 = BYTE2(v555);
                                      if (BYTE2(v555) == v293)
                                      {
                                        v296 = v289 ? (unsigned __int8 *)v286 : v285;
                                        v293 = v296[35];
                                        v282 = BYTE3(v555);
                                        if (BYTE3(v555) == v293)
                                        {
                                          v297 = v289 ? (unsigned __int8 *)v286 : v285;
                                          v293 = v297[36];
                                          v282 = BYTE4(v555);
                                          if (BYTE4(v555) == v293)
                                          {
                                            v298 = v289 ? (unsigned __int8 *)v286 : v285;
                                            v293 = v298[37];
                                            v282 = BYTE5(v555);
                                            if (BYTE5(v555) == v293)
                                            {
                                              v299 = v289 ? (unsigned __int8 *)v286 : v285;
                                              v293 = v299[38];
                                              v282 = BYTE6(v555);
                                              if (BYTE6(v555) == v293)
                                              {
                                                v300 = v289 ? (unsigned __int8 *)v286 : v285;
                                                v293 = v300[39];
                                                v282 = BYTE7(v555);
                                                if (BYTE7(v555) == v293)
                                                {
                                                  v301 = v289 ? (unsigned __int8 *)v286 : v285;
                                                  v293 = v301[40];
                                                  v282 = BYTE8(v555);
                                                  if (BYTE8(v555) == v293)
                                                  {
                                                    v302 = v289 ? (unsigned __int8 *)v286 : v285;
                                                    v293 = v302[41];
                                                    v282 = BYTE9(v555);
                                                    if (BYTE9(v555) == v293)
                                                    {
                                                      v303 = v289 ? (unsigned __int8 *)v286 : v285;
                                                      v293 = v303[42];
                                                      v282 = BYTE10(v555);
                                                      if (BYTE10(v555) == v293)
                                                      {
                                                        v304 = v289 ? (unsigned __int8 *)v286 : v285;
                                                        v293 = v304[43];
                                                        v282 = BYTE11(v555);
                                                        if (BYTE11(v555) == v293)
                                                        {
                                                          v305 = v289 ? (unsigned __int8 *)v286 : v285;
                                                          v293 = v305[44];
                                                          v282 = BYTE12(v555);
                                                          if (BYTE12(v555) == v293)
                                                          {
                                                            v306 = v289 ? (unsigned __int8 *)v286 : v285;
                                                            v293 = v306[45];
                                                            v282 = BYTE13(v555);
                                                            if (BYTE13(v555) == v293)
                                                            {
                                                              v307 = v289 ? (unsigned __int8 *)v286 : v285;
                                                              v293 = v307[46];
                                                              v282 = BYTE14(v555);
                                                              if (BYTE14(v555) == v293)
                                                              {
                                                                v308 = v289 ? (unsigned __int8 *)v286 : v285;
                                                                v293 = v308[47];
                                                                v282 = HIBYTE(v555);
                                                                if (HIBYTE(v555) == v293)
                                                                  goto LABEL_1035;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  v281 = &v514;
                                  if (v282 >= v293)
LABEL_1035:
                                    v281 = v283;
                                }
                              }
                              v309 = v281[1];
                              v310 = (uint64_t)v281;
                              if (v309)
                              {
                                do
                                {
                                  v231 = (uint64_t)v309;
                                  v309 = (uint64_t *)*v309;
                                }
                                while (v309);
                              }
                              else
                              {
                                do
                                {
                                  v231 = *(_QWORD *)(v310 + 16);
                                  v27 = *(_QWORD *)v231 == v310;
                                  v310 = v231;
                                }
                                while (!v27);
                              }
                              if (v513 == (uint64_t *)v281)
                                v513 = (uint64_t *)v231;
                              --v515;
                              sub_20E8D2134(v514, (uint64_t *)v281);
                              if (*((char *)v281 + 71) < 0)
                                operator delete(v281[6]);
                              operator delete(v281);
LABEL_1046:
                              if (BYTE8(v569))
                              {
LABEL_1047:
                                if ((_BYTE)v569)
                                {
                                  if (!(_BYTE)v568 || !BYTE8(v567))
                                    goto LABEL_1056;
                                  if (!(_BYTE)v567)
                                    goto LABEL_1053;
                                  if ((SHIBYTE(v566) & 0x80000000) == 0)
                                  {
                                    if ((SHIBYTE(v563[2]) & 0x80000000) == 0)
                                      goto LABEL_1053;
LABEL_1066:
                                    operator delete(v563[0]);
                                    if (!v562[40])
                                      goto LABEL_1056;
LABEL_1054:
                                    if ((v562[39] & 0x80000000) != 0)
                                      operator delete(*(void **)&v562[16]);
                                    goto LABEL_1056;
                                  }
                                  operator delete((void *)v565);
                                  if (SHIBYTE(v563[2]) < 0)
                                    goto LABEL_1066;
LABEL_1053:
                                  if (v562[40])
                                    goto LABEL_1054;
LABEL_1056:
                                  if ((_BYTE)v561)
                                  {
                                    v311 = v560.__r_.__value_.__r.__words[0];
                                    if (v560.__r_.__value_.__r.__words[0])
                                    {
                                      v312 = v560.__r_.__value_.__l.__size_;
                                      v313 = (void *)v560.__r_.__value_.__r.__words[0];
                                      if (v560.__r_.__value_.__l.__size_ != v560.__r_.__value_.__r.__words[0])
                                      {
                                        do
                                        {
                                          if (*(char *)(v312 - 1) < 0)
                                            operator delete(*(void **)(v312 - 24));
                                          v312 -= 24;
                                        }
                                        while (v312 != v311);
                                        v313 = (void *)v560.__r_.__value_.__r.__words[0];
                                      }
                                      v560.__r_.__value_.__l.__size_ = v311;
LABEL_1375:
                                      operator delete(v313);
                                    }
                                  }
                                }
                                goto LABEL_1376;
                              }
LABEL_1368:
                              if (!LOBYTE(v563[2]))
                                goto LABEL_1376;
                              if (LOBYTE(v563[1]))
                              {
                                if (SHIBYTE(v563[0]) < 0)
                                {
                                  operator delete(*(void **)&v562[32]);
                                  if ((v562[23] & 0x80000000) == 0)
                                    goto LABEL_1372;
                                }
                                else if ((v562[23] & 0x80000000) == 0)
                                {
                                  goto LABEL_1372;
                                }
                                operator delete(*(void **)v562);
                                if (!(_BYTE)v561)
                                  goto LABEL_1376;
                              }
                              else
                              {
LABEL_1372:
                                if (!(_BYTE)v561)
                                  goto LABEL_1376;
                              }
                              if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
                              {
                                v313 = (void *)v560.__r_.__value_.__r.__words[0];
                                goto LABEL_1375;
                              }
LABEL_1376:
                              if (SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(v510.__pn_.__r_.__value_.__l.__data_);
                                v232 = 1;
                                if ((v552[23] & 0x80000000) != 0)
                                  goto LABEL_1378;
                              }
                              else
                              {
                                v232 = 1;
                                if ((v552[23] & 0x80000000) != 0)
                                {
LABEL_1378:
                                  operator delete(*(void **)v552);
                                  v244 = v509;
                                  if (!v509)
                                  {
LABEL_719:
                                    if (SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                      goto LABEL_1382;
                                    goto LABEL_720;
                                  }
LABEL_1379:
                                  if (*(_BYTE *)(v244 + 8))
                                    std::mutex::unlock(*(std::mutex **)v244);
                                  MEMORY[0x212BC6398](v244, 0x1020C405F07FB98);
                                  if ((SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_720;
LABEL_1382:
                                  operator delete(v556.__pn_.__r_.__value_.__l.__data_);
                                  if ((uint64_t **)v231 != &v514)
                                    goto LABEL_721;
                                  goto LABEL_1418;
                                }
                              }
LABEL_748:
                              v244 = v509;
                              if (!v509)
                                goto LABEL_719;
                              goto LABEL_1379;
                            }
                            operator delete(*((void **)v267 + 22));
                            if ((char)v267[167] < 0)
                              goto LABEL_1392;
LABEL_919:
                            v280 = v267[136];
                            if (v280)
                              goto LABEL_920;
                          }
LABEL_1074:
                          v267[216] = v280;
                          goto LABEL_943;
                        }
                        sub_20FD18B84(&v549);
                        if (*v549[7] > 5)
                          goto LABEL_1046;
                        v269 = *((unsigned __int8 *)v549 + 72);
                        v270 = sub_20E8C31DC((uint64_t)v549, "OSLogSurrogateAppender", 1, 0);
                        v271 = v270;
                        if (!v269 && !v270)
                          goto LABEL_1046;
                        sub_20E863438((uint64_t)__dst);
                        if (BYTE8(v569))
                        {
                          v476 = __cxa_allocate_exception(8uLL);
                          *v476 = &off_24C9B4620;
                          __cxa_throw(v476, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
                        }
                        sub_2102341F0((uint64_t)&v559, (std::string *)object);
                        if (object[23] >= 0)
                          v272 = object;
                        else
                          v272 = *(_BYTE **)object;
                        if (object[23] >= 0)
                          v273 = object[23];
                        else
                          v273 = *(_QWORD *)&object[8];
                        sub_20E86A980(&__dst[16], (uint64_t)v272, v273);
                        if ((object[23] & 0x80000000) == 0)
                        {
                          v274 = BYTE8(v592[1]);
                          v497 = v269;
                          if ((BYTE8(v592[1]) & 0x10) == 0)
                            goto LABEL_891;
LABEL_1076:
                          v314 = *(_QWORD *)&v592[1];
                          v315 = (const void **)&__dst[64];
                          if (*(_QWORD *)&v592[1] < *(_QWORD *)&__dst[72])
                          {
                            *(_QWORD *)&v592[1] = *(_QWORD *)&__dst[72];
                            v314 = *(_QWORD *)&__dst[72];
                            v315 = (const void **)&__dst[64];
                          }
LABEL_1143:
                          v316 = *v315;
                          v275 = v314 - (_QWORD)*v315;
                          if (v275 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v275 >= 0x17)
                          {
                            v317 = (v275 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v275 | 7) != 0x17)
                              v317 = v275 | 7;
                            v318 = v317 + 1;
                            v276 = operator new(v317 + 1);
                            *(_QWORD *)&v544[16] = v318 | 0x8000000000000000;
                            *(_QWORD *)v544 = v276;
                            *(_QWORD *)&v544[8] = v275;
                          }
                          else
                          {
                            v544[23] = v314 - *(_BYTE *)v315;
                            v276 = v544;
                            if (!v275)
                              goto LABEL_1151;
                          }
                          memmove(v276, v316, v275);
                          goto LABEL_1151;
                        }
                        operator delete(*(void **)object);
                        v274 = BYTE8(v592[1]);
                        v497 = v269;
                        if ((BYTE8(v592[1]) & 0x10) != 0)
                          goto LABEL_1076;
LABEL_891:
                        if ((v274 & 8) != 0)
                        {
                          v314 = *(_QWORD *)&__dst[56];
                          v315 = (const void **)&__dst[40];
                          goto LABEL_1143;
                        }
                        v275 = 0;
                        v544[23] = 0;
                        v276 = v544;
LABEL_1151:
                        v276[v275] = 0;
                        *(_QWORD *)&v618 = &v549;
                        *((std::chrono::steady_clock::time_point *)&v618 + 1) = std::chrono::steady_clock::now();
                        *(std::chrono::system_clock::time_point *)&v619 = std::chrono::system_clock::now();
                        DWORD2(v619) = 5;
                        v620 = "unknown file";
                        v621 = 462;
                        v622 = "unknown function";
                        v623 = 0;
                        v624 = 0;
                        v319 = v544;
                        if (v544[23] < 0)
                          v319 = *(char **)v544;
                        v500 = v319;
                        v320 = *(_QWORD *)v618;
                        v321 = (const char *)(*(_QWORD *)v618 + 16);
                        v492 = v321;
                        v493 = *(_QWORD *)v618;
                        if (*(char *)(*(_QWORD *)v618 + 39) < 0)
                        {
                          v321 = *(const char **)(v320 + 16);
                          v322 = *(_QWORD *)(v320 + 24);
                          v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v324 & 1) == 0)
                          {
LABEL_1413:
                            if (__cxa_guard_acquire(&qword_254A4A510))
                            {
                              sub_20E9E46F8((uint64_t)v608);
                              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v608);
                              if (v608[24] && (v608[23] & 0x80000000) != 0)
                                operator delete(*(void **)v608);
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A4A510);
                            }
                          }
                        }
                        else
                        {
                          v322 = *(unsigned __int8 *)(*(_QWORD *)v618 + 39);
                          v323 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v323 & 1) == 0)
                            goto LABEL_1413;
                        }
                        if (byte_254A4A4F8[23] >= 0)
                          v325 = byte_254A4A4F8;
                        else
                          v325 = *(const char **)byte_254A4A4F8;
                        if (byte_254A4A4F8[23] >= 0)
                          v326 = byte_254A4A4F8[23];
                        else
                          v326 = *(_QWORD *)&byte_254A4A4F8[8];
                        *(_QWORD *)object = os_log_create(v325, v321);
                        if (v326 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v326 >= 0x17)
                        {
                          v328 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v326 | 7) != 0x17)
                            v328 = v326 | 7;
                          v329 = v328 + 1;
                          v327 = operator new(v328 + 1);
                          *(_QWORD *)&object[24] = v329 | 0x8000000000000000;
                          *(_QWORD *)&object[8] = v327;
                          *(_QWORD *)&object[16] = v326;
                        }
                        else
                        {
                          object[31] = v326;
                          v327 = &object[8];
                          if (!v326)
                          {
LABEL_1171:
                            v327[v326] = 0;
                            object[32] = 1;
                            if (v322 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v322 >= 0x17)
                            {
                              v332 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v322 | 7) != 0x17)
                                v332 = v322 | 7;
                              v333 = v332 + 1;
                              v330 = operator new(v332 + 1);
                              v578[2] = (void *)(v333 | 0x8000000000000000);
                              v578[0] = v330;
                              v578[1] = (void *)v322;
                            }
                            else
                            {
                              HIBYTE(v578[2]) = v322;
                              v330 = v578;
                              if (!v322)
                              {
                                LOBYTE(v578[0]) = 0;
                                LOBYTE(v578[3]) = 1;
                                v331 = *(NSObject **)object;
                                if ((SHIBYTE(v578[2]) & 0x80000000) == 0)
                                  goto LABEL_1175;
LABEL_1181:
                                operator delete(v578[0]);
                                if (object[32])
                                  goto LABEL_1182;
                                goto LABEL_1184;
                              }
                            }
                            memmove(v330, v321, v322);
                            *((_BYTE *)v330 + v322) = 0;
                            LOBYTE(v578[3]) = 1;
                            v331 = *(NSObject **)object;
                            if (SHIBYTE(v578[2]) < 0)
                              goto LABEL_1181;
LABEL_1175:
                            if (object[32])
                            {
LABEL_1182:
                              if ((object[31] & 0x80000000) != 0)
                                operator delete(*(void **)&object[8]);
                            }
LABEL_1184:
                            if (*(_QWORD *)object)
                              os_release(*(void **)object);
                            if (v271 && *(_QWORD *)(v271 + 24))
                            {
                              v334 = _os_log_pack_size();
                              v335 = operator new(v334, (std::align_val_t)8uLL);
                              v336 = (_QWORD *)operator new();
                              v337 = v497;
                              *v336 = &off_24C9ABB80;
                              v336[1] = 0;
                              v336[2] = 0;
                              v336[3] = v335;
                              *(_QWORD *)v608 = v335;
                              *(_QWORD *)&v608[8] = v335;
                              *(_QWORD *)&v608[16] = v336;
                              *(_QWORD *)&v608[24] = 0;
                              v609 = 0;
                              v338 = strlen(v500);
                              if (v338 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              v339 = v338;
                              if (v338 >= 0x17)
                              {
                                v342 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v338 | 7) != 0x17)
                                  v342 = v338 | 7;
                                v343 = v342 + 1;
                                v340 = (std::string *)operator new(v342 + 1);
                                v545.__r_.__value_.__r.__words[2] = v343 | 0x8000000000000000;
                                v545.__r_.__value_.__r.__words[0] = (std::string::size_type)v340;
                                v545.__r_.__value_.__l.__size_ = v339;
                              }
                              else
                              {
                                *((_BYTE *)&v545.__r_.__value_.__s + 23) = v338;
                                v340 = &v545;
                                if (!v338)
                                  goto LABEL_1199;
                              }
                              memcpy(v340, v500, v339);
LABEL_1199:
                              v340->__r_.__value_.__s.__data_[v339] = 0;
                              *(_QWORD *)&v550 = v545.__r_.__value_.__l.__size_;
                              v344 = v545.__r_.__value_.__r.__words[0];
                              *(_QWORD *)((char *)&v550 + 7) = *(std::string::size_type *)((char *)&v545.__r_.__value_.__r.__words[1]
                                                                                         + 7);
                              v345 = HIBYTE(v545.__r_.__value_.__r.__words[2]);
                              v346 = operator new(0x38uLL);
                              v346[1] = 0;
                              v346[2] = 0;
                              v346[3] = off_24C9ABC20;
                              *v346 = &off_24C9ABBD0;
                              v347 = v550;
                              v346[4] = v344;
                              v346[5] = v347;
                              *(_QWORD *)((char *)v346 + 47) = *(_QWORD *)((char *)&v550 + 7);
                              *((_BYTE *)v346 + 55) = v345;
                              *(_QWORD *)&v550 = 0;
                              *(_QWORD *)((char *)&v550 + 7) = 0;
                              v348 = v609;
                              *(_QWORD *)&v608[24] = v346 + 3;
                              v609 = (std::__shared_weak_count *)v346;
                              if (v348)
                              {
                                v349 = (unint64_t *)&v348->__shared_owners_;
                                do
                                  v350 = __ldaxr(v349);
                                while (__stlxr(v350 - 1, v349));
                                if (!v350)
                                {
                                  ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                                  std::__shared_weak_count::__release_weak(v348);
                                }
                              }
                              *(_OWORD *)object = *(_OWORD *)v608;
                              v351 = *(void **)&v608[24];
                              *(_QWORD *)&object[16] = *(_QWORD *)&v608[16];
                              if (*(_QWORD *)&v608[16])
                              {
                                v352 = (unint64_t *)(*(_QWORD *)&v608[16] + 8);
                                do
                                  v353 = __ldxr(v352);
                                while (__stxr(v353 + 1, v352));
                              }
                              v354 = v609;
                              *(_QWORD *)&object[24] = v351;
                              *(_QWORD *)&object[32] = v609;
                              if (v609)
                              {
                                v355 = (unint64_t *)&v609->__shared_owners_;
                                do
                                  v356 = __ldxr(v355);
                                while (__stxr(v356 + 1, v355));
                                v578[0] = v351;
                                do
                                  v357 = __ldaxr(v355);
                                while (__stlxr(v357 - 1, v355));
                                if (!v357)
                                {
                                  ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                                  std::__shared_weak_count::__release_weak(v354);
                                }
                              }
                              else
                              {
                                v578[0] = v351;
                              }
                              v361 = *(std::__shared_weak_count **)&v608[16];
                              if (*(_QWORD *)&v608[16])
                              {
                                v362 = (unint64_t *)(*(_QWORD *)&v608[16] + 8);
                                do
                                  v363 = __ldaxr(v362);
                                while (__stlxr(v363 - 1, v362));
                                if (!v363)
                                {
                                  ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                                  std::__shared_weak_count::__release_weak(v361);
                                }
                              }
                              v364 = *(_QWORD *)object;
                              if (*((char *)v578[0] + 31) >= 0)
                                v365 = (char *)v578[0] + 8;
                              else
                                v365 = (char *)*((_QWORD *)v578[0] + 1);
                              v366 = _os_log_pack_fill();
                              *(_DWORD *)v366 = 136315138;
                              *(_QWORD *)(v366 + 4) = v365;
                              v367 = operator new();
                              v368 = *(unsigned __int8 *)(v493 + 39);
                              v369 = v492;
                              if ((v368 & 0x80u) != 0)
                              {
                                v369 = *(const char **)(v493 + 16);
                                v368 = *(_QWORD *)(v493 + 24);
                              }
                              *(_QWORD *)v367 = v364;
                              *(_OWORD *)(v367 + 8) = *(_OWORD *)&object[8];
                              *(_QWORD *)&object[8] = 0;
                              *(_QWORD *)&object[16] = 0;
                              *(_OWORD *)(v367 + 24) = *(_OWORD *)&object[24];
                              *(_QWORD *)&object[24] = 0;
                              *(_QWORD *)&object[32] = 0;
                              *(_QWORD *)(v367 + 40) = v369;
                              *(_QWORD *)(v367 + 48) = v368;
                              *(_BYTE *)(v367 + 56) = 16;
                              v545.__r_.__value_.__r.__words[0] = 0;
                              *(_QWORD *)v608 = v367;
                              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v271 + 24) + 40))(*(_QWORD *)(v271 + 24), v608);
                              v370 = *(_QWORD *)v608;
                              *(_QWORD *)v608 = 0;
                              if (v370)
                              {
                                v371 = *(std::__shared_weak_count **)(v370 + 32);
                                if (v371)
                                {
                                  v372 = (unint64_t *)&v371->__shared_owners_;
                                  do
                                    v373 = __ldaxr(v372);
                                  while (__stlxr(v373 - 1, v372));
                                  if (!v373)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                                    std::__shared_weak_count::__release_weak(v371);
                                  }
                                }
                                v374 = *(std::__shared_weak_count **)(v370 + 16);
                                if (v374)
                                {
                                  v375 = (unint64_t *)&v374->__shared_owners_;
                                  do
                                    v376 = __ldaxr(v375);
                                  while (__stlxr(v376 - 1, v375));
                                  if (!v376)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                                    std::__shared_weak_count::__release_weak(v374);
                                  }
                                }
                                MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
                                v377 = v545.__r_.__value_.__r.__words[0];
                                v545.__r_.__value_.__r.__words[0] = 0;
                                if (v377)
                                {
                                  v378 = *(std::__shared_weak_count **)(v377 + 32);
                                  if (v378)
                                  {
                                    v379 = (unint64_t *)&v378->__shared_owners_;
                                    do
                                      v380 = __ldaxr(v379);
                                    while (__stlxr(v380 - 1, v379));
                                    if (!v380)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                                      std::__shared_weak_count::__release_weak(v378);
                                    }
                                  }
                                  v381 = *(std::__shared_weak_count **)(v377 + 16);
                                  if (v381)
                                  {
                                    v382 = (unint64_t *)&v381->__shared_owners_;
                                    do
                                      v383 = __ldaxr(v382);
                                    while (__stlxr(v383 - 1, v382));
                                    if (!v383)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                                      std::__shared_weak_count::__release_weak(v381);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v377, 0x10F0C40B62ED6C6);
                                }
                              }
                              v384 = *(std::__shared_weak_count **)&object[32];
                              if (*(_QWORD *)&object[32])
                              {
                                v385 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                do
                                  v386 = __ldaxr(v385);
                                while (__stlxr(v386 - 1, v385));
                                if (!v386)
                                {
                                  ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                                  std::__shared_weak_count::__release_weak(v384);
                                  v387 = *(std::__shared_weak_count **)&object[16];
                                  if (*(_QWORD *)&object[16])
                                    goto LABEL_1352;
                                  goto LABEL_1355;
                                }
                              }
                              v387 = *(std::__shared_weak_count **)&object[16];
                              if (!*(_QWORD *)&object[16])
                                goto LABEL_1355;
LABEL_1352:
                              v388 = (unint64_t *)&v387->__shared_owners_;
                              do
                                v389 = __ldaxr(v388);
                              while (__stlxr(v389 - 1, v388));
                              if (v389)
                              {
LABEL_1355:
                                if (v337)
                                  goto LABEL_1356;
LABEL_1359:
                                sub_20E863570((uint64_t)&v618);
                                v391 = v624;
                                if (!v624)
                                  goto LABEL_1363;
                                v392 = (unint64_t *)&v624->__shared_owners_;
                                do
                                  v393 = __ldaxr(v392);
                                while (__stlxr(v393 - 1, v392));
                                if (!v393)
                                {
                                  ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                                  std::__shared_weak_count::__release_weak(v391);
                                  if ((v544[23] & 0x80000000) != 0)
LABEL_1364:
                                    operator delete(*(void **)v544);
                                }
                                else
                                {
LABEL_1363:
                                  if ((v544[23] & 0x80000000) != 0)
                                    goto LABEL_1364;
                                }
                                *(_QWORD *)__dst = v490;
                                *(_QWORD *)&__dst[*(_QWORD *)(v490 - 24)] = v489;
                                *(_QWORD *)&__dst[16] = v488;
                                *(_QWORD *)&__dst[24] = v491;
                                if (SHIBYTE(v592[0]) < 0)
                                  operator delete(*((void **)&v591 + 1));
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x212BC6290](&v593);
                                if (BYTE8(v569))
                                  goto LABEL_1047;
                                goto LABEL_1368;
                              }
                              ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                              std::__shared_weak_count::__release_weak(v387);
                              if (!v497)
                                goto LABEL_1359;
                            }
                            else
                            {
                              os_log_type_enabled(v331, OS_LOG_TYPE_ERROR);
                              *(_DWORD *)object = 136315138;
                              *(_QWORD *)&object[4] = v500;
                              v341 = (void *)_os_log_send_and_compose_impl();
                              v337 = v497;
                              if (!v341)
                                goto LABEL_1355;
                              free(v341);
                              if (!v497)
                                goto LABEL_1359;
                            }
LABEL_1356:
                            v390 = v544;
                            if (v544[23] < 0)
                              v390 = *(const char **)v544;
                            sub_20E8C003C((uint64_t)&v618, "%s", v390);
                            sub_20E863570((uint64_t)&v618);
                            goto LABEL_1359;
                          }
                        }
                        memmove(v327, v325, v326);
                        goto LABEL_1171;
                      }
                    }
                    else
                    {
                      BYTE8(v569) = 0;
                      if (!LOBYTE(v579[0]))
                        goto LABEL_827;
                    }
                    if (LOBYTE(v578[6]))
                    {
                      if (SHIBYTE(v578[5]) < 0)
                      {
                        operator delete(v578[3]);
                        if ((SHIBYTE(v578[1]) & 0x80000000) == 0)
                          goto LABEL_824;
                      }
                      else if ((SHIBYTE(v578[1]) & 0x80000000) == 0)
                      {
                        goto LABEL_824;
                      }
                      operator delete(*(void **)&object[32]);
                      if (!object[24])
                        goto LABEL_827;
                    }
                    else
                    {
LABEL_824:
                      if (!object[24])
                        goto LABEL_827;
                    }
                    if ((object[23] & 0x80000000) != 0)
                      operator delete(*(void **)object);
                    goto LABEL_827;
                  }
                  *(_QWORD *)&v550 = &v510;
                  __dst[0] = 0;
                  LOBYTE(v598) = 0;
                  v545.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06710;
                  v545.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
                  v545.__r_.__value_.__r.__words[2] = (std::string::size_type)&v550;
                  sub_210235BBC((uint64_t)&v545, (uint64_t)&v618);
                  if (v631)
                  {
                    BYTE8(v584) = BYTE8(v597);
                    *(_OWORD *)object = *(_OWORD *)__dst;
                    object[16] = 0;
                    if (BYTE8(v597))
                    {
                      LOBYTE(v584) = 0;
                      if ((_BYTE)v597)
                      {
                        LOBYTE(v578[0]) = 0;
                        if (__dst[40])
                        {
                          *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                          *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                          memset(&__dst[16], 0, 24);
                          LOBYTE(v578[0]) = 1;
                        }
                        LOBYTE(v578[1]) = 0;
                        LOBYTE(v583) = 0;
                        v257 = (void **)&v584;
                        if ((_BYTE)v596)
                        {
                          *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                          LOBYTE(v578[3]) = 0;
                          BYTE8(v582) = 0;
                          v258 = (void **)&v583;
                          v257 = (void **)&v584;
                          if (BYTE8(v595))
                          {
                            LOBYTE(v578[6]) = 0;
                            if (BYTE8(v591))
                            {
                              *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                              v578[5] = (void *)v591;
                              *(_QWORD *)&v591 = 0;
                              *(_OWORD *)&__dst[64] = 0uLL;
                              LOBYTE(v578[6]) = 1;
                            }
                            LOBYTE(v579[0]) = 0;
                            LOBYTE(v582) = 0;
                            if ((_BYTE)v595)
                            {
                              *(_OWORD *)v579 = v592[0];
                              *(_OWORD *)&v579[2] = v592[1];
                              memset(v592, 0, 24);
                              v580 = v593;
                              v581 = v594;
                              v593 = 0uLL;
                              v594 = 0;
                              LOBYTE(v582) = 1;
                            }
                            BYTE8(v582) = 1;
                            v258 = (void **)&v583;
                            v257 = (void **)&v584;
                          }
LABEL_1115:
                          *(_BYTE *)v258 = 1;
                        }
                        goto LABEL_1116;
                      }
                    }
                    else
                    {
                      LOBYTE(v579[2]) = 0;
                      if (LOBYTE(v592[1]))
                      {
                        LOBYTE(v578[0]) = 0;
                        if (__dst[40])
                        {
                          *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                          *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                          memset(&__dst[16], 0, 24);
                          LOBYTE(v578[0]) = 1;
                        }
                        LOBYTE(v578[1]) = 0;
                        LOBYTE(v579[1]) = 0;
                        v257 = &v579[2];
                        if (BYTE8(v592[0]))
                        {
                          *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                          *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                          memset(&__dst[48], 0, 24);
                          *(_OWORD *)&v578[5] = v591;
                          v579[0] = *(void **)&v592[0];
                          v591 = 0uLL;
                          v258 = &v579[1];
                          v257 = &v579[2];
                          *(_QWORD *)&v592[0] = 0;
                          goto LABEL_1115;
                        }
LABEL_1116:
                        *(_BYTE *)v257 = 1;
                      }
                    }
LABEL_1117:
                    if (!v631)
                      goto LABEL_1118;
LABEL_1125:
                    sub_20FD28C08((uint64_t)__dst);
                    if (BYTE8(v584))
                    {
                      v559 = *(_OWORD *)object;
                      v560.__r_.__value_.__s.__data_[0] = 0;
                      LOBYTE(v569) = 0;
                      if ((_BYTE)v584)
                      {
                        LOBYTE(v561) = 0;
                        if (LOBYTE(v578[0]))
                        {
                          *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&object[16];
                          v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&object[32];
                          memset(&object[16], 0, 24);
                          LOBYTE(v561) = 1;
                        }
                        v562[0] = 0;
                        LOBYTE(v568) = 0;
                        if ((_BYTE)v583)
                        {
                          *(_OWORD *)v562 = *(_OWORD *)&v578[1];
                          v562[16] = 0;
                          BYTE8(v567) = 0;
                          if (BYTE8(v582))
                          {
                            v562[40] = 0;
                            if (LOBYTE(v578[6]))
                            {
                              *(_OWORD *)&v562[16] = *(_OWORD *)&v578[3];
                              *(void **)&v562[32] = v578[5];
                              memset(&v578[3], 0, 24);
                              v562[40] = 1;
                            }
                            LOBYTE(v563[0]) = 0;
                            LOBYTE(v567) = 0;
                            if ((_BYTE)v582)
                            {
                              *(_OWORD *)v563 = *(_OWORD *)v579;
                              v563[2] = v579[2];
                              memset(v579, 0, 24);
                              v564 = v579[3];
                              v565 = v580;
                              v566 = v581;
                              v580 = 0uLL;
                              v581 = 0;
                              LOBYTE(v567) = 1;
                            }
                            BYTE8(v567) = 1;
                          }
                          LOBYTE(v568) = 1;
                        }
                        LOBYTE(v569) = 1;
                      }
                      BYTE8(v569) = 1;
                      if (!(_BYTE)v584)
                        goto LABEL_830;
LABEL_1280:
                      if (!(_BYTE)v583 || !BYTE8(v582))
                        goto LABEL_1288;
                      if (!(_BYTE)v582)
                        goto LABEL_1285;
                      if ((SHIBYTE(v581) & 0x80000000) == 0)
                      {
                        if ((SHIBYTE(v579[2]) & 0x80000000) == 0)
                          goto LABEL_1285;
LABEL_1402:
                        operator delete(v579[0]);
                        if (!LOBYTE(v578[6]))
                          goto LABEL_1288;
LABEL_1286:
                        if (SHIBYTE(v578[5]) < 0)
                          operator delete(v578[3]);
                        goto LABEL_1288;
                      }
                      operator delete((void *)v580);
                      if (SHIBYTE(v579[2]) < 0)
                        goto LABEL_1402;
LABEL_1285:
                      if (LOBYTE(v578[6]))
                        goto LABEL_1286;
LABEL_1288:
                      if (!LOBYTE(v578[0]))
                        goto LABEL_830;
                      v358 = *(_QWORD *)&object[16];
                      if (!*(_QWORD *)&object[16])
                        goto LABEL_830;
                      v360 = *(_QWORD *)&object[24];
                      v259 = *(void **)&object[16];
                      if (*(_QWORD *)&object[24] == *(_QWORD *)&object[16])
                      {
LABEL_1296:
                        *(_QWORD *)&object[24] = v358;
                        goto LABEL_829;
                      }
                      do
                      {
                        if (*(char *)(v360 - 1) < 0)
                          operator delete(*(void **)(v360 - 24));
                        v360 -= 24;
                      }
                      while (v360 != v358);
LABEL_1295:
                      v259 = *(void **)&object[16];
                      goto LABEL_1296;
                    }
                    sub_2102341F0((uint64_t)object, &v545);
                    sub_20FD20BF4((uint64_t)v608, (uint64_t)&v510, (const char *)&v545);
                    if ((v608[23] & 0x80000000) != 0)
                    {
                      sub_20E860C04(&v618, *(void **)v608, *(unint64_t *)&v608[8]);
                    }
                    else
                    {
                      v618 = *(_OWORD *)v608;
                      *(_QWORD *)&v619 = *(_QWORD *)&v608[16];
                    }
                    BYTE8(v619) = 1;
                    LOBYTE(v620) = 0;
                    v626 = 0;
                    v627 = 1;
                    sub_20FD20A78((uint64_t)__dst, 5u, &v618);
                    v559 = *(_OWORD *)__dst;
                    v560.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v563[2]) = 0;
                    if (LOBYTE(v592[1]))
                    {
                      LOBYTE(v561) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
                        v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v561) = 1;
                      }
                      v562[0] = 0;
                      LOBYTE(v563[1]) = 0;
                      if (BYTE8(v592[0]))
                      {
                        *(_OWORD *)v562 = *(_OWORD *)&__dst[48];
                        *(_OWORD *)&v562[16] = *(_OWORD *)&__dst[64];
                        memset(&__dst[48], 0, 24);
                        *(_OWORD *)&v562[32] = v591;
                        v563[0] = *(void **)&v592[0];
                        v591 = 0uLL;
                        *(_QWORD *)&v592[0] = 0;
                        LOBYTE(v563[1]) = 1;
                      }
                      LOBYTE(v563[2]) = 1;
                      BYTE8(v569) = 0;
                      if (__dst[40] && (__dst[39] & 0x80000000) != 0)
                        operator delete(*(void **)&__dst[16]);
                      if (!v627)
                      {
LABEL_1276:
                        if ((v608[23] & 0x80000000) == 0)
                        {
                          if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_1278;
LABEL_1298:
                          operator delete(v545.__r_.__value_.__l.__data_);
                          if (!BYTE8(v584))
                            goto LABEL_1299;
LABEL_1279:
                          if (!(_BYTE)v584)
                            goto LABEL_830;
                          goto LABEL_1280;
                        }
                        operator delete(*(void **)v608);
                        if (SHIBYTE(v545.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_1298;
LABEL_1278:
                        if (BYTE8(v584))
                          goto LABEL_1279;
LABEL_1299:
                        if (!LOBYTE(v579[2]))
                          goto LABEL_830;
                        if (LOBYTE(v579[1]))
                        {
                          if (SHIBYTE(v579[0]) < 0)
                          {
                            operator delete(v578[5]);
                            if ((SHIBYTE(v578[3]) & 0x80000000) == 0)
                              goto LABEL_1303;
                          }
                          else if ((SHIBYTE(v578[3]) & 0x80000000) == 0)
                          {
                            goto LABEL_1303;
                          }
                          operator delete(v578[1]);
                          if (!LOBYTE(v578[0]))
                            goto LABEL_830;
                        }
                        else
                        {
LABEL_1303:
                          if (!LOBYTE(v578[0]))
                            goto LABEL_830;
                        }
                        if ((object[39] & 0x80000000) == 0)
                          goto LABEL_830;
                        v259 = *(void **)&object[16];
LABEL_829:
                        operator delete(v259);
                        goto LABEL_830;
                      }
                    }
                    else
                    {
                      BYTE8(v569) = 0;
                      if (!v627)
                        goto LABEL_1276;
                    }
                    if (v626)
                    {
                      if (SHIBYTE(v625) < 0)
                      {
                        operator delete(v624);
                        if ((SHIBYTE(v622) & 0x80000000) == 0)
                          goto LABEL_1273;
                      }
                      else if ((SHIBYTE(v622) & 0x80000000) == 0)
                      {
                        goto LABEL_1273;
                      }
                      operator delete(v620);
                      if (!BYTE8(v619))
                        goto LABEL_1276;
                    }
                    else
                    {
LABEL_1273:
                      if (!BYTE8(v619))
                        goto LABEL_1276;
                    }
                    if (SBYTE7(v619) < 0)
                      operator delete((void *)v618);
                    goto LABEL_1276;
                  }
                  *(_OWORD *)v608 = v618;
                  sub_20E89EFE4(&v608[16], &v619);
                  *(_OWORD *)object = *(_OWORD *)v608;
                  object[16] = 0;
                  LOBYTE(v579[2]) = 0;
                  if (!v617)
                  {
                    BYTE8(v584) = 0;
                    if (!v631)
                      goto LABEL_1118;
                    goto LABEL_1125;
                  }
                  LOBYTE(v578[0]) = 0;
                  if (v610)
                  {
                    *(_OWORD *)&object[16] = *(_OWORD *)&v608[16];
                    *(_QWORD *)&object[32] = v609;
                    *(_QWORD *)&v608[24] = 0;
                    v609 = 0;
                    *(_QWORD *)&v608[16] = 0;
                    LOBYTE(v578[0]) = 1;
                  }
                  LOBYTE(v578[1]) = 0;
                  LOBYTE(v579[1]) = 0;
                  if (v616)
                  {
                    *(_OWORD *)&v578[1] = v611;
                    v578[3] = v612;
                    v612 = 0;
                    v611 = 0uLL;
                    v578[4] = v613;
                    *(_OWORD *)&v578[5] = v614;
                    v579[0] = v615;
                    v614 = 0uLL;
                    v615 = 0;
                    LOBYTE(v579[1]) = 1;
                  }
                  LOBYTE(v579[2]) = 1;
                  BYTE8(v584) = 0;
                  if (!v610 || (SHIBYTE(v609) & 0x80000000) == 0)
                    goto LABEL_1117;
                  operator delete(*(void **)&v608[16]);
                  if (v631)
                    goto LABEL_1125;
LABEL_1118:
                  if (!v630)
                    goto LABEL_1125;
                  if (v629)
                  {
                    if (v628 < 0)
                    {
                      operator delete(v625);
                      if ((SHIBYTE(v624) & 0x80000000) == 0)
                        goto LABEL_1122;
                    }
                    else if ((SHIBYTE(v624) & 0x80000000) == 0)
                    {
                      goto LABEL_1122;
                    }
                    operator delete(v622);
                    if (!(_BYTE)v621)
                      goto LABEL_1125;
                  }
                  else
                  {
LABEL_1122:
                    if (!(_BYTE)v621)
                      goto LABEL_1125;
                  }
                  if (SHIBYTE(v620) < 0)
                    operator delete((void *)v619);
                  goto LABEL_1125;
                }
                sub_20E860C04(v544, *(void **)__dst, *(unint64_t *)&__dst[8]);
                operator delete(v249);
                v250 = v544[23];
                v251 = v544[23];
                if (v544[23] < 0)
                  v250 = *(_QWORD *)&v544[8];
                if (v250 == 5)
                  goto LABEL_786;
LABEL_763:
                if (v250 != 12)
                {
                  v37 = v251 < 0;
                  v252 = v544;
                  if (v37)
                    v252 = *(_BYTE **)v544;
                  goto LABEL_807;
                }
                v37 = v251 < 0;
                v252 = v544;
                if (v37)
                  v252 = *(_BYTE **)v544;
                if (*(_QWORD *)v252 != 0x6567617373656D2ELL || *((_DWORD *)v252 + 2) != 1801675120)
                  goto LABEL_807;
                *(_QWORD *)&v550 = &v510;
                __dst[0] = 0;
                LOBYTE(v598) = 0;
                v545.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06750;
                v545.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
                v545.__r_.__value_.__r.__words[2] = (std::string::size_type)&v550;
                sub_210235BBC((uint64_t)&v545, (uint64_t)&v618);
                if (v631)
                {
                  BYTE8(v584) = BYTE8(v597);
                  *(_OWORD *)object = *(_OWORD *)__dst;
                  object[16] = 0;
                  if (BYTE8(v597))
                  {
                    LOBYTE(v584) = 0;
                    if ((_BYTE)v597)
                    {
                      LOBYTE(v578[0]) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                        *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v578[0]) = 1;
                      }
                      LOBYTE(v578[1]) = 0;
                      LOBYTE(v583) = 0;
                      v254 = (void **)&v584;
                      if ((_BYTE)v596)
                      {
                        *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                        LOBYTE(v578[3]) = 0;
                        BYTE8(v582) = 0;
                        v255 = (void **)&v583;
                        v254 = (void **)&v584;
                        if (BYTE8(v595))
                        {
                          LOBYTE(v578[6]) = 0;
                          if (BYTE8(v591))
                          {
                            *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                            v578[5] = (void *)v591;
                            *(_QWORD *)&v591 = 0;
                            *(_OWORD *)&__dst[64] = 0uLL;
                            LOBYTE(v578[6]) = 1;
                          }
                          LOBYTE(v579[0]) = 0;
                          LOBYTE(v582) = 0;
                          if ((_BYTE)v595)
                          {
                            *(_OWORD *)v579 = v592[0];
                            *(_OWORD *)&v579[2] = v592[1];
                            memset(v592, 0, 24);
                            v580 = v593;
                            v581 = v594;
                            v593 = 0uLL;
                            v594 = 0;
                            LOBYTE(v582) = 1;
                          }
                          BYTE8(v582) = 1;
                          v255 = (void **)&v583;
                          v254 = (void **)&v584;
                        }
LABEL_1083:
                        *(_BYTE *)v255 = 1;
                      }
                      goto LABEL_1084;
                    }
                  }
                  else
                  {
                    LOBYTE(v579[2]) = 0;
                    if (LOBYTE(v592[1]))
                    {
                      LOBYTE(v578[0]) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)&object[16] = *(_OWORD *)&__dst[16];
                        *(_QWORD *)&object[32] = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        LOBYTE(v578[0]) = 1;
                      }
                      LOBYTE(v578[1]) = 0;
                      LOBYTE(v579[1]) = 0;
                      v254 = &v579[2];
                      if (BYTE8(v592[0]))
                      {
                        *(_OWORD *)&v578[1] = *(_OWORD *)&__dst[48];
                        *(_OWORD *)&v578[3] = *(_OWORD *)&__dst[64];
                        memset(&__dst[48], 0, 24);
                        *(_OWORD *)&v578[5] = v591;
                        v579[0] = *(void **)&v592[0];
                        v591 = 0uLL;
                        v255 = &v579[1];
                        v254 = &v579[2];
                        *(_QWORD *)&v592[0] = 0;
                        goto LABEL_1083;
                      }
LABEL_1084:
                      *(_BYTE *)v254 = 1;
                    }
                  }
LABEL_1085:
                  if (!v631)
                    goto LABEL_1086;
LABEL_1093:
                  sub_20FD28C08((uint64_t)__dst);
                  if (BYTE8(v584))
                  {
                    v559 = *(_OWORD *)object;
                    v560.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v569) = 0;
                    if ((_BYTE)v584)
                    {
                      LOBYTE(v561) = 0;
                      if (LOBYTE(v578[0]))
                      {
                        *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&object[16];
                        v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&object[32];
                        memset(&object[16], 0, 24);
                        LOBYTE(v561) = 1;
                      }
                      v562[0] = 0;
                      LOBYTE(v568) = 0;
                      if ((_BYTE)v583)
                      {
                        *(_OWORD *)v562 = *(_OWORD *)&v578[1];
                        v562[16] = 0;
                        BYTE8(v567) = 0;
                        if (BYTE8(v582))
                        {
                          v562[40] = 0;
                          if (LOBYTE(v578[6]))
                          {
                            *(_OWORD *)&v562[16] = *(_OWORD *)&v578[3];
                            *(void **)&v562[32] = v578[5];
                            memset(&v578[3], 0, 24);
                            v562[40] = 1;
                          }
                          LOBYTE(v563[0]) = 0;
                          LOBYTE(v567) = 0;
                          if ((_BYTE)v582)
                          {
                            *(_OWORD *)v563 = *(_OWORD *)v579;
                            v563[2] = v579[2];
                            memset(v579, 0, 24);
                            v564 = v579[3];
                            v565 = v580;
                            v566 = v581;
                            v580 = 0uLL;
                            v581 = 0;
                            LOBYTE(v567) = 1;
                          }
                          BYTE8(v567) = 1;
                        }
                        LOBYTE(v568) = 1;
                      }
                      LOBYTE(v569) = 1;
                    }
                    BYTE8(v569) = 1;
                    if (!(_BYTE)v584)
                      goto LABEL_830;
LABEL_1254:
                    if (!(_BYTE)v583 || !BYTE8(v582))
                      goto LABEL_1262;
                    if (!(_BYTE)v582)
                      goto LABEL_1259;
                    if (SHIBYTE(v581) < 0)
                    {
                      operator delete((void *)v580);
                      if (SHIBYTE(v579[2]) < 0)
                        goto LABEL_1399;
LABEL_1259:
                      if (!LOBYTE(v578[6]))
                      {
LABEL_1262:
                        if (!LOBYTE(v578[0]))
                          goto LABEL_830;
                        v358 = *(_QWORD *)&object[16];
                        if (!*(_QWORD *)&object[16])
                          goto LABEL_830;
                        v359 = *(_QWORD *)&object[24];
                        v259 = *(void **)&object[16];
                        if (*(_QWORD *)&object[24] == *(_QWORD *)&object[16])
                          goto LABEL_1296;
                        do
                        {
                          if (*(char *)(v359 - 1) < 0)
                            operator delete(*(void **)(v359 - 24));
                          v359 -= 24;
                        }
                        while (v359 != v358);
                        goto LABEL_1295;
                      }
                    }
                    else
                    {
                      if ((SHIBYTE(v579[2]) & 0x80000000) == 0)
                        goto LABEL_1259;
LABEL_1399:
                      operator delete(v579[0]);
                      if (!LOBYTE(v578[6]))
                        goto LABEL_1262;
                    }
                    if (SHIBYTE(v578[5]) < 0)
                      operator delete(v578[3]);
                    goto LABEL_1262;
                  }
                  sub_2102341F0((uint64_t)object, &v545);
                  sub_20FD20BF4((uint64_t)v608, (uint64_t)&v510, (const char *)&v545);
                  if ((v608[23] & 0x80000000) != 0)
                  {
                    sub_20E860C04(&v618, *(void **)v608, *(unint64_t *)&v608[8]);
                  }
                  else
                  {
                    v618 = *(_OWORD *)v608;
                    *(_QWORD *)&v619 = *(_QWORD *)&v608[16];
                  }
                  BYTE8(v619) = 1;
                  LOBYTE(v620) = 0;
                  v626 = 0;
                  v627 = 1;
                  sub_20FD20A78((uint64_t)__dst, 5u, &v618);
                  v559 = *(_OWORD *)__dst;
                  v560.__r_.__value_.__s.__data_[0] = 0;
                  LOBYTE(v563[2]) = 0;
                  if (LOBYTE(v592[1]))
                  {
                    LOBYTE(v561) = 0;
                    if (__dst[40])
                    {
                      *(_OWORD *)&v560.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[16];
                      v560.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[32];
                      memset(&__dst[16], 0, 24);
                      LOBYTE(v561) = 1;
                    }
                    v562[0] = 0;
                    LOBYTE(v563[1]) = 0;
                    if (BYTE8(v592[0]))
                    {
                      *(_OWORD *)v562 = *(_OWORD *)&__dst[48];
                      *(_OWORD *)&v562[16] = *(_OWORD *)&__dst[64];
                      memset(&__dst[48], 0, 24);
                      *(_OWORD *)&v562[32] = v591;
                      v563[0] = *(void **)&v592[0];
                      v591 = 0uLL;
                      *(_QWORD *)&v592[0] = 0;
                      LOBYTE(v563[1]) = 1;
                    }
                    LOBYTE(v563[2]) = 1;
                    BYTE8(v569) = 0;
                    if (__dst[40] && (__dst[39] & 0x80000000) != 0)
                      operator delete(*(void **)&__dst[16]);
                    if (!v627)
                    {
LABEL_1247:
                      if ((v608[23] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)v608);
                        if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_1249;
                      }
                      else if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_1249:
                        if (!BYTE8(v584))
                          goto LABEL_1299;
                        goto LABEL_1253;
                      }
                      operator delete(v545.__r_.__value_.__l.__data_);
                      if (!BYTE8(v584))
                        goto LABEL_1299;
LABEL_1253:
                      if (!(_BYTE)v584)
                        goto LABEL_830;
                      goto LABEL_1254;
                    }
                  }
                  else
                  {
                    BYTE8(v569) = 0;
                    if (!v627)
                      goto LABEL_1247;
                  }
                  if (v626)
                  {
                    if (SHIBYTE(v625) < 0)
                    {
                      operator delete(v624);
                      if ((SHIBYTE(v622) & 0x80000000) == 0)
                        goto LABEL_1244;
                    }
                    else if ((SHIBYTE(v622) & 0x80000000) == 0)
                    {
                      goto LABEL_1244;
                    }
                    operator delete(v620);
                    if (!BYTE8(v619))
                      goto LABEL_1247;
                  }
                  else
                  {
LABEL_1244:
                    if (!BYTE8(v619))
                      goto LABEL_1247;
                  }
                  if (SBYTE7(v619) < 0)
                    operator delete((void *)v618);
                  goto LABEL_1247;
                }
                *(_OWORD *)v608 = v618;
                sub_20E89EFE4(&v608[16], &v619);
                *(_OWORD *)object = *(_OWORD *)v608;
                object[16] = 0;
                LOBYTE(v579[2]) = 0;
                if (!v617)
                {
                  BYTE8(v584) = 0;
                  if (!v631)
                    goto LABEL_1086;
                  goto LABEL_1093;
                }
                LOBYTE(v578[0]) = 0;
                if (v610)
                {
                  *(_OWORD *)&object[16] = *(_OWORD *)&v608[16];
                  *(_QWORD *)&object[32] = v609;
                  *(_QWORD *)&v608[24] = 0;
                  v609 = 0;
                  *(_QWORD *)&v608[16] = 0;
                  LOBYTE(v578[0]) = 1;
                }
                LOBYTE(v578[1]) = 0;
                LOBYTE(v579[1]) = 0;
                if (v616)
                {
                  *(_OWORD *)&v578[1] = v611;
                  v578[3] = v612;
                  v612 = 0;
                  v611 = 0uLL;
                  v578[4] = v613;
                  *(_OWORD *)&v578[5] = v614;
                  v579[0] = v615;
                  v614 = 0uLL;
                  v615 = 0;
                  LOBYTE(v579[1]) = 1;
                }
                LOBYTE(v579[2]) = 1;
                BYTE8(v584) = 0;
                if (!v610 || (SHIBYTE(v609) & 0x80000000) == 0)
                  goto LABEL_1085;
                operator delete(*(void **)&v608[16]);
                if (v631)
                  goto LABEL_1093;
LABEL_1086:
                if (!v630)
                  goto LABEL_1093;
                if (v629)
                {
                  if (v628 < 0)
                  {
                    operator delete(v625);
                    if ((SHIBYTE(v624) & 0x80000000) == 0)
                      goto LABEL_1090;
                  }
                  else if ((SHIBYTE(v624) & 0x80000000) == 0)
                  {
                    goto LABEL_1090;
                  }
                  operator delete(v622);
                  if (!(_BYTE)v621)
                    goto LABEL_1093;
                }
                else
                {
LABEL_1090:
                  if (!(_BYTE)v621)
                    goto LABEL_1093;
                }
                if (SHIBYTE(v620) < 0)
                  operator delete((void *)v619);
                goto LABEL_1093;
              }
            }
            memmove(v246, v245.__data_, v245.__size_);
            goto LABEL_759;
          }
          if (std::chrono::steady_clock::now().__d_.__rep_ - v236.__d_.__rep_ >= 0)
            break;
          *(_QWORD *)object = 10000;
          std::this_thread::sleep_for ((const std::chrono::nanoseconds *)object);
        }
        if (SHIBYTE(v556.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1382;
LABEL_720:
        if ((uint64_t **)v231 != &v514)
          continue;
        break;
      }
LABEL_1418:
      if ((v232 & 1) == 0)
      {
LABEL_1419:
        if (std::chrono::steady_clock::now().__d_.__rep_ - v495.__d_.__rep_ <= v496)
        {
          *(_QWORD *)__dst = 2000000;
          std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__dst);
          continue;
        }
        v432 = v515;
        v550 = 0uLL;
        v551 = 0;
        if (!v515)
          goto LABEL_1422;
        v559 = 0uLL;
        v560.__r_.__value_.__r.__words[0] = 0;
        if (v515 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v433 = (void **)operator new(24 * v515);
        v434 = v433;
        *(_QWORD *)&v559 = v433;
        *((_QWORD *)&v559 + 1) = v433;
        v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433[3 * v432];
        v435 = (uint64_t)v513;
        if (v513 != (uint64_t *)&v514)
        {
          while (1)
          {
            if (*(char *)(v435 + 71) < 0)
            {
              sub_20E860C04(object, *(void **)(v435 + 48), *(_QWORD *)(v435 + 56));
            }
            else
            {
              *(_OWORD *)object = *(_OWORD *)(v435 + 48);
              *(_QWORD *)&object[16] = *(_QWORD *)(v435 + 64);
            }
            v436 = (char *)*((_QWORD *)&v559 + 1);
            if (*((_QWORD *)&v559 + 1) < v560.__r_.__value_.__r.__words[0])
            {
              if ((object[23] & 0x80000000) != 0)
              {
                sub_20E860C04(*((_BYTE **)&v559 + 1), *(void **)object, *(unint64_t *)&object[8]);
              }
              else
              {
                v437 = *(_OWORD *)object;
                *(_QWORD *)(*((_QWORD *)&v559 + 1) + 16) = *(_QWORD *)&object[16];
                *(_OWORD *)v436 = v437;
              }
              v443 = (uint64_t)(v436 + 24);
              goto LABEL_1528;
            }
            v438 = (char *)v559;
            v439 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v559 + 1) - v559) >> 3);
            v440 = v439 + 1;
            if (v439 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            if (0x5555555555555556 * ((uint64_t)(v560.__r_.__value_.__r.__words[0] - v559) >> 3) > v440)
              v440 = 0x5555555555555556 * ((uint64_t)(v560.__r_.__value_.__r.__words[0] - v559) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v560.__r_.__value_.__r.__words[0] - v559) >> 3) >= 0x555555555555555)
              v441 = 0xAAAAAAAAAAAAAAALL;
            else
              v441 = v440;
            *(_QWORD *)&__dst[32] = &v560;
            if (v441)
            {
              if (v441 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v442 = (char *)operator new(24 * v441);
            }
            else
            {
              v442 = 0;
            }
            v444 = &v442[24 * v439];
            *(_QWORD *)__dst = v442;
            *(_QWORD *)&__dst[8] = v444;
            *(_QWORD *)&__dst[16] = v444;
            *(_QWORD *)&__dst[24] = &v442[24 * v441];
            if ((object[23] & 0x80000000) != 0)
            {
              sub_20E860C04(v444, *(void **)object, *(unint64_t *)&object[8]);
              v436 = (char *)*((_QWORD *)&v559 + 1);
              v438 = (char *)v559;
              v444 = *(char **)&__dst[8];
              v443 = *(_QWORD *)&__dst[16] + 24;
              *(_QWORD *)&__dst[16] += 24;
              if (*((_QWORD *)&v559 + 1) != (_QWORD)v559)
              {
LABEL_1512:
                v445 = 0;
                do
                {
                  v447 = &v444[v445 - 24];
                  v448 = (void **)&v436[v445 - 24];
                  if (v436[v445 - 1] < 0)
                  {
                    sub_20E860C04(v447, *v448, *(_QWORD *)&v436[v445 - 16]);
                  }
                  else
                  {
                    v446 = *(_OWORD *)v448;
                    *(_QWORD *)&v444[v445 - 8] = *(_QWORD *)&v436[v445 - 8];
                    *(_OWORD *)v447 = v446;
                  }
                  v445 -= 24;
                }
                while (&v436[v445] != v438);
                v438 = (char *)*((_QWORD *)&v559 + 1);
                v449 = (char *)v559;
                v444 += v445;
                v443 = *(_QWORD *)&__dst[16];
                goto LABEL_1520;
              }
            }
            else
            {
              *(_OWORD *)v444 = *(_OWORD *)object;
              *((_QWORD *)v444 + 2) = *(_QWORD *)&object[16];
              v443 = (uint64_t)(v444 + 24);
              *(_QWORD *)&__dst[16] = v444 + 24;
              if (v436 != v438)
                goto LABEL_1512;
            }
            v449 = v438;
LABEL_1520:
            *(_QWORD *)&v559 = v444;
            *((_QWORD *)&v559 + 1) = v443;
            v450 = v560.__r_.__value_.__r.__words[0];
            v560.__r_.__value_.__r.__words[0] = *(_QWORD *)&__dst[24];
            *(_QWORD *)&__dst[24] = v450;
            *(_QWORD *)&__dst[8] = v449;
            *(_QWORD *)__dst = v449;
            if (v438 != v449)
            {
              v451 = (void **)(v438 - 24);
              do
              {
                *(_QWORD *)&__dst[16] = v451;
                if (*((char *)v451 + 23) < 0)
                  operator delete(*v451);
                v451 -= 3;
              }
              while (v451 + 3 != (void **)v449);
              v438 = v449;
            }
            if (v438)
              operator delete(v438);
LABEL_1528:
            *((_QWORD *)&v559 + 1) = v443;
            if ((object[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)object);
              v452 = *(uint64_t **)(v435 + 8);
              if (v452)
              {
                do
                {
LABEL_1532:
                  v453 = (uint64_t **)v452;
                  v452 = (uint64_t *)*v452;
                }
                while (v452);
                goto LABEL_1491;
              }
            }
            else
            {
              v452 = *(uint64_t **)(v435 + 8);
              if (v452)
                goto LABEL_1532;
            }
            do
            {
              v453 = *(uint64_t ***)(v435 + 16);
              v27 = *v453 == (uint64_t *)v435;
              v435 = (uint64_t)v453;
            }
            while (!v27);
LABEL_1491:
            v435 = (uint64_t)v453;
            if (v453 == &v514)
            {
              v434 = (void **)*((_QWORD *)&v559 + 1);
              v454 = (void **)v559;
              goto LABEL_1539;
            }
          }
        }
        v454 = v433;
LABEL_1539:
        __dst[0] = 0;
        v455 = (char *)v434 - (char *)v454;
        __dst[24] = 0;
        v456 = "s";
        if ((char *)v434 - (char *)v454 == 24)
          v456 = "";
        v546 = v456;
        memset(v608, 0, 24);
        sub_20E9099B8((uint64_t)v608, 0xAAAAAAAAAAAAAAABLL * (v434 - v454));
        if (v434 != v454)
        {
          v459 = (uint64_t)v454;
          do
          {
            LODWORD(v560.__r_.__value_.__r.__words[1]) = 0;
            sub_20EB04FEC((uint64_t)v552, (uint64_t)&v559, v459);
            if (LODWORD(v560.__r_.__value_.__r.__words[1]) == -1)
              sub_20E877AB8();
            *(_QWORD *)v552 = &v549;
            ((void (*)(__int128 *__return_ptr, _BYTE *, __int128 *))off_24CA061E8[LODWORD(v560.__r_.__value_.__r.__words[1])])(&v618, v552, &v559);
            if (LODWORD(v560.__r_.__value_.__r.__words[1]) != -1)
              ((void (*)(_BYTE *, __int128 *))off_24CA06188[LODWORD(v560.__r_.__value_.__r.__words[1])])(v552, &v559);
            v461 = *(__int128 **)&v608[8];
            if (*(_QWORD *)&v608[8] < *(_QWORD *)&v608[16])
            {
              v460 = v618;
              *(_QWORD *)(*(_QWORD *)&v608[8] + 16) = v619;
              *v461 = v460;
              *(_QWORD *)&v608[8] = (char *)v461 + 24;
            }
            else
            {
              *(_QWORD *)&v608[8] = sub_20E8780F0((void **)v608, (uint64_t)&v618);
              if (SBYTE7(v619) < 0)
                operator delete((void *)v618);
            }
            v459 += 24;
            v455 -= 24;
          }
          while (v455);
        }
        v462 = *(void ***)v608;
        *(_QWORD *)v544 = *(_QWORD *)v608;
        *(_OWORD *)&v544[8] = *(_OWORD *)&v608[8];
        v463 = *(void ***)&v608[8];
        sub_20E878290(*(uint64_t *)v608, *(uint64_t *)&v608[8], ", ", 2uLL, &v545, v457, v458);
        DWORD2(v619) = 0;
        sub_20E9956F8(&v618, "timeout after ");
        v547 = (float)v496 / 1000000000.0;
        LODWORD(v560.__r_.__value_.__r.__words[1]) = 0;
        sub_20E89F7C4((uint64_t)&v549, (uint64_t)&v559, &v547);
        if (LODWORD(v560.__r_.__value_.__r.__words[1]) == -1)
          sub_20E877AB8();
        v549 = (int **)&v548;
        ((void (*)(_BYTE *__return_ptr, int ***, __int128 *))off_24CA061E8[LODWORD(v560.__r_.__value_.__r.__words[1])])(v552, &v549, &v559);
        if (LODWORD(v560.__r_.__value_.__r.__words[1]) != -1)
          ((void (*)(int ***, __int128 *))off_24CA06188[LODWORD(v560.__r_.__value_.__r.__words[1])])(&v549, &v559);
        std::string::push_back((std::string *)v552, 32);
        *(_OWORD *)v608 = *(_OWORD *)v552;
        *(_QWORD *)&v608[16] = *(_QWORD *)&v552[16];
        memset(v552, 0, 24);
        sub_210237BC0(1, 1, &v559);
        if (v560.__r_.__value_.__s.__data_[7] >= 0)
          v464 = (const std::string::value_type *)&v559;
        else
          v464 = (const std::string::value_type *)v559;
        if (v560.__r_.__value_.__s.__data_[7] >= 0)
          v465 = v560.__r_.__value_.__s.__data_[7];
        else
          v465 = *((_QWORD *)&v559 + 1);
        v466 = std::string::append((std::string *)v608, v464, v465);
        v467 = *(_OWORD *)&v466->__r_.__value_.__l.__data_;
        v510.__pn_.__r_.__value_.__r.__words[2] = v466->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v510.__pn_.__r_.__value_.__l.__data_ = v467;
        v466->__r_.__value_.__l.__size_ = 0;
        v466->__r_.__value_.__r.__words[2] = 0;
        v466->__r_.__value_.__r.__words[0] = 0;
        if (v560.__r_.__value_.__s.__data_[7] < 0)
        {
          operator delete((void *)v559);
          if ((v608[23] & 0x80000000) == 0)
          {
LABEL_1562:
            if ((v552[23] & 0x80000000) == 0)
              goto LABEL_1563;
LABEL_1572:
            operator delete(*(void **)v552);
LABEL_1563:
            *(_QWORD *)&v559 = &v618;
            *((_QWORD *)&v559 + 1) = &v510;
            v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
            v560.__r_.__value_.__l.__size_ = (std::string::size_type)&v510;
            v560.__r_.__value_.__r.__words[2] = (std::string::size_type)&v510;
            if (DWORD2(v619) == -1)
              sub_20E877AB8();
            *(_QWORD *)v608 = &v559;
            ((void (*)(_BYTE *, __int128 *))off_24CA061B8[DWORD2(v619)])(v608, &v618);
            if (SHIBYTE(v510.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v510.__pn_.__r_.__value_.__l.__data_);
            *(_QWORD *)&v559 = &v618;
            *((_QWORD *)&v559 + 1) = " waiting for client response";
            v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
            v560.__r_.__value_.__l.__size_ = (std::string::size_type)" waiting for client response";
            v560.__r_.__value_.__r.__words[2] = (std::string::size_type)" waiting for client response";
            if (DWORD2(v619) == -1)
              sub_20E877AB8();
            *(_QWORD *)v608 = &v559;
            ((void (*)(_BYTE *, __int128 *))off_24CA069F8[DWORD2(v619)])(v608, &v618);
            if (v546)
            {
              *(_QWORD *)&v559 = &v618;
              *((_QWORD *)&v559 + 1) = &v546;
              v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
              v560.__r_.__value_.__l.__size_ = (std::string::size_type)&v546;
              v560.__r_.__value_.__r.__words[2] = (std::string::size_type)&v546;
              if (DWORD2(v619) != -1)
              {
                *(_QWORD *)v608 = &v559;
                ((void (*)(_BYTE *, __int128 *))off_24CA06930[DWORD2(v619)])(v608, &v618);
                goto LABEL_1575;
              }
            }
            else
            {
              *(_QWORD *)&v559 = &v618;
              *((_QWORD *)&v559 + 1) = "nullptr";
              v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
              v560.__r_.__value_.__l.__size_ = (std::string::size_type)"nullptr";
              v560.__r_.__value_.__r.__words[2] = (std::string::size_type)"nullptr";
              if (DWORD2(v619) != -1)
              {
                *(_QWORD *)v608 = &v559;
                ((void (*)(_BYTE *, __int128 *))off_24CA061A0[DWORD2(v619)])(v608, &v618);
LABEL_1575:
                *(_QWORD *)&v559 = &v618;
                *((_QWORD *)&v559 + 1) = " at: ";
                v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
                v560.__r_.__value_.__l.__size_ = (std::string::size_type)" at: ";
                v560.__r_.__value_.__r.__words[2] = (std::string::size_type)" at: ";
                if (DWORD2(v619) == -1)
                  sub_20E877AB8();
                *(_QWORD *)v608 = &v559;
                ((void (*)(_BYTE *, __int128 *))off_24CA06230[DWORD2(v619)])(v608, &v618);
                *(_QWORD *)&v559 = &v618;
                *((_QWORD *)&v559 + 1) = &v545;
                v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v618;
                v560.__r_.__value_.__l.__size_ = (std::string::size_type)&v545;
                v560.__r_.__value_.__r.__words[2] = (std::string::size_type)&v545;
                if (DWORD2(v619) == -1)
                  sub_20E877AB8();
                *(_QWORD *)v608 = &v559;
                ((void (*)(_BYTE *, __int128 *))off_24CA06468[DWORD2(v619)])(v608, &v618);
                if (DWORD2(v619) == -1)
                  sub_20E877AB8();
                *(_QWORD *)&v559 = v608;
                ((void (*)(__int128 *__return_ptr, __int128 *, __int128 *))off_24CA061E8[DWORD2(v619)])(&v555, &v559, &v618);
                if (DWORD2(v619) != -1)
                  ((void (*)(__int128 *, __int128 *))off_24CA06188[DWORD2(v619)])(&v559, &v618);
                if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                {
                  sub_20E860C04(&v559, (void *)v555, *((unint64_t *)&v555 + 1));
                }
                else
                {
                  v559 = v555;
                  v560.__r_.__value_.__r.__words[0] = v556.__pn_.__r_.__value_.__r.__words[0];
                }
                v560.__r_.__value_.__s.__data_[8] = 1;
                v560.__r_.__value_.__s.__data_[16] = 0;
                v562[40] = 0;
                LOBYTE(v563[0]) = 1;
                sub_20EA5B348((uint64_t)object, 5u, &v559);
                if (LOBYTE(v563[0]))
                {
                  if (v562[40])
                  {
                    if ((v562[39] & 0x80000000) != 0)
                      operator delete(*(void **)&v562[16]);
                    if ((v562[7] & 0x80000000) != 0)
                      operator delete((void *)v560.__r_.__value_.__r.__words[2]);
                  }
                  if (v560.__r_.__value_.__s.__data_[8] && v560.__r_.__value_.__s.__data_[7] < 0)
                    operator delete((void *)v559);
                }
                if (v556.__pn_.__r_.__value_.__s.__data_[7] < 0)
                {
                  operator delete((void *)v555);
                  if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_1594:
                    if (!v462)
                    {
LABEL_1604:
                      *(_OWORD *)&__dst[32] = *(_OWORD *)object;
                      __dst[48] = 0;
                      LOBYTE(v594) = 0;
                      if (LOBYTE(v579[2]))
                      {
                        __dst[72] = 0;
                        if (LOBYTE(v578[0]))
                        {
                          *(_OWORD *)&__dst[48] = *(_OWORD *)&object[16];
                          *(_QWORD *)&__dst[64] = *(_QWORD *)&object[32];
                          memset(&object[16], 0, 24);
                          __dst[72] = 1;
                        }
                        LOBYTE(v591) = 0;
                        BYTE8(v593) = 0;
                        if (LOBYTE(v579[1]))
                        {
                          v592[0] = *(_OWORD *)&v578[3];
                          v591 = *(_OWORD *)&v578[1];
                          memset(&v578[1], 0, 24);
                          v592[1] = *(_OWORD *)&v578[5];
                          *(void **)&v593 = v579[0];
                          v578[5] = 0;
                          v578[6] = 0;
                          v579[0] = 0;
                          BYTE8(v593) = 1;
                        }
                        LOBYTE(v594) = 1;
                      }
                      LOBYTE(v595) = 1;
                      v468 = *((_QWORD *)&v550 + 1);
                      if (*((_QWORD *)&v550 + 1) >= v551)
                      {
                        v472 = sub_20FCF77F8((uint64_t *)&v550, (uint64_t)__dst);
                      }
                      else
                      {
                        **((_BYTE **)&v550 + 1) = 0;
                        *(_BYTE *)(v468 + 24) = 0;
                        if (__dst[24])
                        {
                          *(_QWORD *)v468 = 0;
                          *(_QWORD *)(v468 + 8) = 0;
                          *(_QWORD *)(v468 + 16) = 0;
                          *(_OWORD *)v468 = *(_OWORD *)__dst;
                          *(_QWORD *)(v468 + 16) = *(_QWORD *)&__dst[16];
                          memset(__dst, 0, 24);
                          *(_BYTE *)(v468 + 24) = 1;
                        }
                        *(_BYTE *)(v468 + 32) = 0;
                        *(_BYTE *)(v468 + 152) = 0;
                        if ((_BYTE)v595)
                        {
                          *(_OWORD *)(v468 + 32) = *(_OWORD *)&__dst[32];
                          *(_BYTE *)(v468 + 48) = 0;
                          *(_BYTE *)(v468 + 144) = 0;
                          if ((_BYTE)v594)
                          {
                            *(_BYTE *)(v468 + 72) = 0;
                            if (__dst[72])
                            {
                              v469 = *(_OWORD *)&__dst[48];
                              *(_QWORD *)(v468 + 64) = *(_QWORD *)&__dst[64];
                              *(_OWORD *)(v468 + 48) = v469;
                              memset(&__dst[48], 0, 24);
                              *(_BYTE *)(v468 + 72) = 1;
                            }
                            *(_BYTE *)(v468 + 80) = 0;
                            *(_BYTE *)(v468 + 136) = 0;
                            if (BYTE8(v593))
                            {
                              v470 = v591;
                              *(_QWORD *)(v468 + 96) = *(_QWORD *)&v592[0];
                              *(_OWORD *)(v468 + 80) = v470;
                              v591 = 0uLL;
                              *(_QWORD *)(v468 + 104) = *((_QWORD *)&v592[0] + 1);
                              v471 = v592[1];
                              *(_QWORD *)(v468 + 128) = v593;
                              *(_OWORD *)(v468 + 112) = v471;
                              *(_QWORD *)&v592[0] = 0;
                              v592[1] = 0uLL;
                              *(_QWORD *)&v593 = 0;
                              *(_BYTE *)(v468 + 136) = 1;
                            }
                            *(_BYTE *)(v468 + 144) = 1;
                          }
                          *(_BYTE *)(v468 + 152) = 1;
                        }
                        v472 = v468 + 160;
                      }
                      *((_QWORD *)&v550 + 1) = v472;
                      if ((_BYTE)v595 && (_BYTE)v594)
                      {
                        if (BYTE8(v593))
                        {
                          if (SBYTE7(v593) < 0)
                            operator delete(*(void **)&v592[1]);
                          if (SBYTE7(v592[0]) < 0)
                            operator delete((void *)v591);
                        }
                        if (__dst[72] && (__dst[71] & 0x80000000) != 0)
                          operator delete(*(void **)&__dst[48]);
                      }
                      if (__dst[24])
                      {
                        v473 = *(_QWORD *)__dst;
                        if (*(_QWORD *)__dst)
                        {
                          v474 = *(_QWORD *)&__dst[8];
                          v475 = *(void **)__dst;
                          if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
                          {
                            do
                            {
                              if (*(char *)(v474 - 1) < 0)
                                operator delete(*(void **)(v474 - 24));
                              v474 -= 24;
                            }
                            while (v474 != v473);
                            v475 = *(void **)__dst;
                          }
                          *(_QWORD *)&__dst[8] = v473;
                          operator delete(v475);
                        }
                      }
                      if (LOBYTE(v579[2]))
                      {
                        if (LOBYTE(v579[1]))
                        {
                          if (SHIBYTE(v579[0]) < 0)
                            operator delete(v578[5]);
                          if (SHIBYTE(v578[3]) < 0)
                            operator delete(v578[1]);
                        }
                        if (LOBYTE(v578[0]) && (object[39] & 0x80000000) != 0)
                          operator delete(*(void **)&object[16]);
                      }
                      if (v454)
                      {
                        while (v434 != v454)
                        {
                          if (*((char *)v434 - 1) < 0)
                            operator delete(*(v434 - 3));
                          v434 -= 3;
                        }
                        operator delete(v454);
                      }
                      goto LABEL_1422;
                    }
LABEL_1600:
                    while (v463 != v462)
                    {
                      if (*((char *)v463 - 1) < 0)
                        operator delete(*(v463 - 3));
                      v463 -= 3;
                    }
                    operator delete(v462);
                    goto LABEL_1604;
                  }
                }
                else if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_1594;
                }
                operator delete(v545.__r_.__value_.__l.__data_);
                if (!v462)
                  goto LABEL_1604;
                goto LABEL_1600;
              }
            }
            sub_20E877AB8();
          }
        }
        else if ((v608[23] & 0x80000000) == 0)
        {
          goto LABEL_1562;
        }
        operator delete(*(void **)v608);
        if ((v552[23] & 0x80000000) == 0)
          goto LABEL_1563;
        goto LABEL_1572;
      }
    }
    while (v515);
  }
  v550 = 0uLL;
  v551 = 0;
LABEL_1422:
  v394 = (_OWORD *)v557;
  if ((__int128 *)v557 != (__int128 *)((char *)&v557 + 8))
  {
    while (1)
    {
      if (!*((_BYTE *)v394 + 224))
        goto LABEL_1428;
      v395 = *((_QWORD *)&v550 + 1);
      if (*((_QWORD *)&v550 + 1) < v551)
        break;
      v397 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v550 + 1) - v550) >> 5);
      v398 = v397 + 1;
      if (v397 + 1 > 0x199999999999999)
        sub_20E867F44();
      if (0x999999999999999ALL * ((uint64_t)(v551 - v550) >> 5) > v398)
        v398 = 0x999999999999999ALL * ((uint64_t)(v551 - v550) >> 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v551 - v550) >> 5) >= 0xCCCCCCCCCCCCCCLL)
        v399 = 0x199999999999999;
      else
        v399 = v398;
      *(_QWORD *)&__dst[32] = &v551;
      if (v399)
      {
        if (v399 > 0x199999999999999)
          sub_20E877A38();
        v400 = (char *)operator new(160 * v399);
      }
      else
      {
        v400 = 0;
      }
      *(_QWORD *)__dst = v400;
      *(_QWORD *)&__dst[8] = &v400[160 * v397];
      *(_QWORD *)&__dst[16] = *(_QWORD *)&__dst[8];
      *(_QWORD *)&__dst[24] = &v400[160 * v399];
      sub_20FD02DAC(*(uint64_t *)&__dst[8], (uint64_t)(v394 + 4));
      v401 = (char *)*((_QWORD *)&v550 + 1);
      v402 = (char *)v550;
      v403 = *(_QWORD *)&__dst[16];
      v404 = *(_QWORD *)&__dst[8];
      if (*((_QWORD *)&v550 + 1) == (_QWORD)v550)
      {
        v418 = (char *)*((_QWORD *)&v550 + 1);
      }
      else
      {
        v405 = 0;
        do
        {
          v406 = v404 + v405;
          *(_BYTE *)(v404 + v405 - 160) = 0;
          v407 = (_QWORD *)(v404 + v405 - 160);
          v408 = &v401[v405];
          *(_BYTE *)(v404 + v405 - 136) = 0;
          if (v401[v405 - 136])
          {
            v409 = v408 - 160;
            *v407 = 0;
            *(_QWORD *)(v404 + v405 - 152) = 0;
            *(_QWORD *)(v404 + v405 - 144) = 0;
            *(_OWORD *)v407 = *((_OWORD *)v408 - 10);
            *(_QWORD *)(v406 - 144) = *((_QWORD *)v408 - 18);
            *(_QWORD *)v409 = 0;
            *((_QWORD *)v409 + 1) = 0;
            *((_QWORD *)v409 + 2) = 0;
            *(_BYTE *)(v406 - 136) = 1;
          }
          *(_BYTE *)(v406 - 128) = 0;
          *(_BYTE *)(v406 - 8) = 0;
          if (*(v408 - 8))
          {
            v410 = &v401[v405];
            *(_OWORD *)(v406 - 128) = *(_OWORD *)&v401[v405 - 128];
            v411 = v404 + v405;
            *(_BYTE *)(v404 + v405 - 112) = 0;
            *(_BYTE *)(v404 + v405 - 16) = 0;
            if (v401[v405 - 16])
            {
              *(_BYTE *)(v411 - 88) = 0;
              if (*(v410 - 88))
              {
                v413 = *((_OWORD *)v410 - 7);
                v412 = v410 - 112;
                *(_QWORD *)(v404 + v405 - 96) = *((_QWORD *)v412 + 2);
                *(_OWORD *)(v404 + v405 - 112) = v413;
                *((_QWORD *)v412 + 1) = 0;
                *((_QWORD *)v412 + 2) = 0;
                *(_QWORD *)v412 = 0;
                *(_BYTE *)(v411 - 88) = 1;
              }
              v414 = v404 + v405;
              *(_BYTE *)(v404 + v405 - 80) = 0;
              *(_BYTE *)(v404 + v405 - 24) = 0;
              v415 = &v401[v405];
              if (v401[v405 - 24])
              {
                v416 = *((_OWORD *)v415 - 5);
                *(_QWORD *)(v404 + v405 - 64) = *((_QWORD *)v415 - 8);
                *(_OWORD *)(v404 + v405 - 80) = v416;
                *((_QWORD *)v415 - 9) = 0;
                *((_QWORD *)v415 - 8) = 0;
                *((_QWORD *)v415 - 10) = 0;
                *(_QWORD *)(v414 - 56) = *((_QWORD *)v415 - 7);
                v417 = *((_OWORD *)v415 - 3);
                *(_QWORD *)(v414 - 32) = *((_QWORD *)v415 - 4);
                *(_OWORD *)(v414 - 48) = v417;
                *((_QWORD *)v415 - 5) = 0;
                *((_QWORD *)v415 - 4) = 0;
                *((_QWORD *)v415 - 6) = 0;
                *(_BYTE *)(v414 - 24) = 1;
              }
              *(_BYTE *)(v411 - 16) = 1;
            }
            *(_BYTE *)(v406 - 8) = 1;
          }
          v405 -= 160;
        }
        while (&v401[v405] != v402);
        v401 = (char *)*((_QWORD *)&v550 + 1);
        v418 = (char *)v550;
        v404 += v405;
      }
      v419 = v403 + 160;
      *(_QWORD *)&v550 = v404;
      *((_QWORD *)&v550 + 1) = v403 + 160;
      v420 = v551;
      v551 = *(_QWORD *)&__dst[24];
      *(_QWORD *)&__dst[16] = v401;
      *(_QWORD *)&__dst[24] = v420;
      *(_QWORD *)&__dst[8] = v418;
      *(_QWORD *)__dst = v418;
      if (v401 != v418)
      {
        do
        {
          *(_QWORD *)&__dst[16] = v401 - 160;
          sub_20E8DDADC((uint64_t)(v401 - 160));
          v401 = *(char **)&__dst[16];
        }
        while (*(char **)&__dst[16] != v418);
        v401 = *(char **)__dst;
      }
      if (v401)
        operator delete(v401);
      *((_QWORD *)&v550 + 1) = v419;
      v396 = (_QWORD *)*((_QWORD *)v394 + 1);
      if (v396)
      {
        do
        {
LABEL_1461:
          v421 = v396;
          v396 = (_QWORD *)*v396;
        }
        while (v396);
        goto LABEL_1424;
      }
      do
      {
LABEL_1463:
        v421 = (_OWORD *)*((_QWORD *)v394 + 2);
        v27 = *(_QWORD *)v421 == (_QWORD)v394;
        v394 = v421;
      }
      while (!v27);
LABEL_1424:
      v394 = v421;
      if (v421 == (__int128 *)((char *)&v557 + 8))
        goto LABEL_1466;
    }
    sub_20FD02DAC(*((uint64_t *)&v550 + 1), (uint64_t)(v394 + 4));
    *((_QWORD *)&v550 + 1) = v395 + 160;
LABEL_1428:
    v396 = (_QWORD *)*((_QWORD *)v394 + 1);
    if (v396)
      goto LABEL_1461;
    goto LABEL_1463;
  }
LABEL_1466:
  sub_20FD09A10(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v550 + 1) - v550) >> 5), v550, (uint64_t *)v498);
  if (*(_BYTE *)(v498 + 24))
  {
    v423 = *(const void ***)(v498 + 8);
    v424 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v423 - *(_QWORD *)v498) >> 3));
    if (v423 == *(const void ***)v498)
      v425 = 0;
    else
      v425 = v424;
    sub_20FD0A93C(*(_QWORD *)v498, v423, (uint64_t)__dst, v425, 1, v422);
  }
  v426 = v550;
  if ((_QWORD)v550)
  {
    v427 = *((_QWORD *)&v550 + 1);
    v428 = (void *)v550;
    if (*((_QWORD *)&v550 + 1) != (_QWORD)v550)
    {
      do
        v427 = sub_20E8DDADC(v427 - 160);
      while (v427 != v426);
      v428 = (void *)v550;
    }
    *((_QWORD *)&v550 + 1) = v426;
    operator delete(v428);
  }
  sub_20FD2037C((char *)v514);
  sub_20FD2B988(*((_QWORD **)&v557 + 1));
LABEL_1477:
  v429 = (char *)v541;
  if (v541)
  {
    v430 = v542;
    v431 = v541;
    if (v542 != v541)
    {
      do
      {
        sub_20FCF4D74((uint64_t)(v430 - 176));
        if (*(v430 - 184) && *(v430 - 185) < 0)
          operator delete(*((void **)v430 - 26));
        v430 -= 232;
      }
      while (v430 != v429);
      v431 = v541;
    }
    v542 = v429;
    operator delete(v431);
  }
}

void sub_20FD17AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x7C8]) && SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v1 - 240);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  sub_20E863784((uint64_t)&STACK[0x680]);
  sub_20FD20510((uint64_t)&STACK[0x480]);
  if (SLOBYTE(STACK[0x587]) < 0)
  {
    operator delete((void *)STACK[0x570]);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
  {
LABEL_12:
    sub_20E92DA24((void **)&STACK[0x3C0]);
    STACK[0x410] = (unint64_t)off_24CA1EF00;
    if (SLOBYTE(STACK[0x437]) < 0)
      operator delete((void *)STACK[0x420]);
    sub_20FD18D1C((void **)&STACK[0x390]);
    sub_20FD08B8C((uint64_t *)&STACK[0x3F8]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x3A8]);
  goto LABEL_12;
}

void sub_20FD18A08()
{
  if (SLOBYTE(STACK[0x247]) < 0)
    JUMPOUT(0x20FD1899CLL);
  JUMPOUT(0x20FD18A68);
}

void sub_20FD18A18()
{
  if (SLOBYTE(STACK[0x247]) < 0)
    JUMPOUT(0x20FD1899CLL);
  JUMPOUT(0x20FD18A68);
}

void sub_20FD18A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1020C405F07FB98);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  sub_20FD2037C(STACK[0x270]);
  sub_20FD2B988(STACK[0x470]);
  sub_20FD18D1C(&STACK[0x390]);
  _Unwind_Resume(a1);
}

void sub_20FD18A4C()
{
  JUMPOUT(0x20FD18B64);
}

void sub_20FD18A84()
{
  if (SLOBYTE(STACK[0x247]) < 0)
    JUMPOUT(0x20FD1899CLL);
  JUMPOUT(0x20FD18A68);
}

void sub_20FD18B38(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  sub_20FD2037C((char *)STACK[0x270]);
  sub_20FD2B988((_QWORD *)STACK[0x470]);
  sub_20FD18D1C((void **)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void sub_20FD18B84(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C190);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C190))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.kit.dgn");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C188);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C190);
  }
  *a1 = qword_254A6C188;
}

void sub_20FD18C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C190);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C190);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD18C78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
  {
    if (*(_BYTE *)(a1 + 176))
      sub_20E8DDADC(a1 + 16);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_9;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_13;
LABEL_9:
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_10;
    return a1;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_10:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void **sub_20FD18D1C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_20FCF4D74((uint64_t)(v3 - 22));
        if (*((_BYTE *)v3 - 184) && *((char *)v3 - 185) < 0)
          operator delete(*(v3 - 26));
        v3 -= 29;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20FD18D9C(uint64_t a1, __int128 *a2, std::mutex *a3, char a4, uint64_t a5)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  void **v13;
  uint64_t v14;
  char v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  void **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  void *v57;
  uint64_t v58;
  size_t v59;
  size_t v60;
  const char **p_dst;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  char v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void (*v72)(void);
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  __int128 v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  const char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  _BYTE v120[48];
  uint64_t v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  char v124;
  void *v125[2];
  unsigned __int8 *v126;
  void (*v127)(void);
  std::__shared_weak_count *v128;
  unsigned __int8 *v129;
  void *v130;
  char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  char v135;
  char v136;
  char v137;
  void *__p[2];
  int64_t v139;
  const char *__dst;
  __int128 v141;
  int v142;
  char v143;
  _QWORD v144[2];
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  const void *v148;
  char v149;
  void *v150;
  const void *v151;
  unint64_t v152;
  void *v153;
  void *v154;
  char v155;
  void *v156;
  unint64_t v157;
  int v158;
  char v159;
  void *v160;
  char v161;
  void *v162;
  char v163;
  void *v164;
  char v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  __int128 __src;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  __int128 v171;
  char *v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  unsigned __int8 v188;
  _BYTE object[24];
  __int128 v190;
  char *v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  int v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  sub_20FD0E4BC((uint64_t)v120, a1, a5, a3, a4);
  if (v121)
  {
    v118 = v121;
    v119 = v122;
    if (v122)
    {
      p_shared_owners = (unint64_t *)&v122->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v145 = *a2;
    LODWORD(v146) = *((_DWORD *)a2 + 4);
    LOBYTE(v147) = 0;
    v149 = 0;
    if (*((_BYTE *)a2 + 48))
    {
      if (*((char *)a2 + 47) < 0)
      {
        sub_20E860C04(&v147, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
      }
      else
      {
        v147 = *(__int128 *)((char *)a2 + 24);
        v148 = (const void *)*((_QWORD *)a2 + 5);
      }
      v149 = 1;
    }
    LOBYTE(v150) = 0;
    v166 = 0;
    if (*((_BYTE *)a2 + 200))
    {
      sub_20FCF4B4C((char *)&v150, (__int128 *)((char *)a2 + 56));
      v166 = 1;
    }
    v167 = a2[13];
    v168 = *((_QWORD *)a2 + 28);
    sub_20FCF221C((uint64_t)&__src, &v145);
    v123 = xmmword_2103BE4C0;
    v124 = 1;
    v125[1] = (void *)0x300000000;
    v18 = operator new();
    *(_BYTE *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    v126 = (unsigned __int8 *)v18;
    v127 = (void (*)(void))sub_210204328;
    LOBYTE(v128) = 1;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v131 = 0;
    v132 = 0;
    LOBYTE(v133) = 0;
    v129 = (unsigned __int8 *)v18;
    v130 = 0;
    v125[0] = &off_24CA06790;
    sub_2101FA8A4((uint64_t)v125);
    *(_QWORD *)object = "version";
    *(_QWORD *)&object[8] = 7;
    *(_DWORD *)&object[16] = 2;
    if (*v129 <= 1u)
    {
      v133 = "version";
      v134 = 7;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB154((uint64_t)v125, &object[16]);
    v19 = *(_DWORD *)&object[16];
    if (SHIBYTE(rep) < 0)
    {
      sub_20E860C04(object, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)object = __src;
      *(_QWORD *)&object[16] = rep;
    }
    if (SHIBYTE(v172) < 0)
    {
      sub_20E860C04(&v190, (void *)v171, *((unint64_t *)&v171 + 1));
    }
    else
    {
      v190 = v171;
      v191 = v172;
    }
    if (SHIBYTE(v174) < 0)
    {
      sub_20E860C04(&v192, (void *)v173, *((unint64_t *)&v173 + 1));
    }
    else
    {
      v192 = v173;
      v193 = v174;
    }
    if (SHIBYTE(v176) < 0)
    {
      sub_20E860C04(&v194, (void *)v175, *((unint64_t *)&v175 + 1));
    }
    else
    {
      v194 = v175;
      v195 = v176;
    }
    if (SHIBYTE(v178) < 0)
    {
      sub_20E860C04(&v196, (void *)v177, *((unint64_t *)&v177 + 1));
    }
    else
    {
      v196 = v177;
      v197 = v178;
    }
    if (SHIBYTE(v180) < 0)
    {
      sub_20E860C04(&v198, (void *)v179, *((unint64_t *)&v179 + 1));
    }
    else
    {
      v198 = v179;
      v199 = v180;
    }
    v200 = v181;
    if (SHIBYTE(v183) < 0)
    {
      sub_20E860C04(&v201, (void *)v182, *((unint64_t *)&v182 + 1));
    }
    else
    {
      v201 = v182;
      v202 = v183;
    }
    v203 = v184;
    v204 = v185;
    v205 = v186;
    if (*v129 <= 1u)
    {
      v133 = "user_given_name";
      v134 = 15;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)object);
    if (*v129 <= 1u)
    {
      v133 = "product_name";
      v134 = 12;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)&v190);
    if (*v129 <= 1u)
    {
      v133 = "type";
      v134 = 4;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)&v192);
    if (*v129 <= 1u)
    {
      v133 = "serial_number";
      v134 = 13;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)&v194);
    if (*v129 <= 1u)
    {
      v133 = "os_build_version";
      v134 = 16;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)&v196);
    if (*v129 <= 1u)
    {
      v133 = "os_product_version";
      v134 = 18;
      if (!v135)
        v135 = 1;
    }
    sub_2101FB61C((uint64_t)v125, (uint64_t)&v198);
    v20 = v129;
    if (*v129 > 1u)
    {
      if (v135 && v134 == 7 && *(_DWORD *)v133 == *(_DWORD *)"version" && *(_DWORD *)(v133 + 3) == *(_DWORD *)"sion")
      {
LABEL_83:
        if (*v20 <= 1u)
        {
          v133 = "process_name";
          v134 = 12;
          if (!v135)
            v135 = 1;
        }
        sub_2101FB61C((uint64_t)v125, (uint64_t)&v201);
        if (*v129 <= 1u)
        {
          v133 = "uuid";
          v134 = 4;
          if (!v135)
            v135 = 1;
        }
        v142 = 0;
        sub_20EE1E7C4((uint64_t)v144, (uint64_t)&__dst, (unsigned __int8 *)&v203);
        if (v142 == -1)
          sub_20E877AB8();
        v144[0] = &v143;
        ((void (*)(void **__return_ptr, _QWORD *, const char **))off_24CA061E8[v142])(__p, v144, &__dst);
        if (v142 != -1)
          ((void (*)(_QWORD *, const char **))off_24CA06188[v142])(v144, &__dst);
        sub_2101FB61C((uint64_t)v125, (uint64_t)__p);
        if (SHIBYTE(v139) < 0)
        {
          operator delete(__p[0]);
          if (v19 < 2)
            goto LABEL_110;
        }
        else if (v19 < 2)
        {
          goto LABEL_110;
        }
        if (*v129 <= 1u)
        {
          v133 = "protocol_info";
          v134 = 13;
          if (!v135)
            v135 = 1;
        }
        sub_2101FA8A4((uint64_t)v125);
        __dst = "version";
        *(_QWORD *)&v141 = 7;
        DWORD2(v141) = 1;
        if (*v129 <= 1u)
        {
          v133 = "version";
          v134 = 7;
          if (!v135)
            v135 = 1;
        }
        sub_2101FB154((uint64_t)v125, (_DWORD *)&v141 + 2);
        if (*v129 <= 1u)
        {
          v133 = "current";
          v134 = 7;
          if (!v135)
            v135 = 1;
        }
        sub_20FD29AB0((uint64_t)v125, (uint64_t *)&v204);
        if (*v129 <= 1u)
        {
          v133 = "min";
          v134 = 3;
          if (!v135)
            v135 = 1;
        }
        sub_20FD29AB0((uint64_t)v125, (uint64_t *)((char *)&v204 + 12));
        v129 = (unsigned __int8 *)*((_QWORD *)v131 - 1);
        v131 -= 8;
        if (v135)
          v135 = 0;
LABEL_110:
        if (SHIBYTE(v202) < 0)
        {
          operator delete((void *)v201);
          if ((SHIBYTE(v199) & 0x80000000) == 0)
          {
LABEL_112:
            if ((SHIBYTE(v197) & 0x80000000) == 0)
              goto LABEL_113;
            goto LABEL_141;
          }
        }
        else if ((SHIBYTE(v199) & 0x80000000) == 0)
        {
          goto LABEL_112;
        }
        operator delete((void *)v198);
        if ((SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_113:
          if ((SHIBYTE(v195) & 0x80000000) == 0)
            goto LABEL_114;
          goto LABEL_142;
        }
LABEL_141:
        operator delete((void *)v196);
        if ((SHIBYTE(v195) & 0x80000000) == 0)
        {
LABEL_114:
          if ((SHIBYTE(v193) & 0x80000000) == 0)
            goto LABEL_115;
          goto LABEL_143;
        }
LABEL_142:
        operator delete((void *)v194);
        if ((SHIBYTE(v193) & 0x80000000) == 0)
        {
LABEL_115:
          if ((SHIBYTE(v191) & 0x80000000) == 0)
            goto LABEL_116;
          goto LABEL_144;
        }
LABEL_143:
        operator delete((void *)v192);
        if ((SHIBYTE(v191) & 0x80000000) == 0)
        {
LABEL_116:
          if ((object[23] & 0x80000000) == 0)
            goto LABEL_117;
          goto LABEL_145;
        }
LABEL_144:
        operator delete((void *)v190);
        if ((object[23] & 0x80000000) == 0)
        {
LABEL_117:
          v129 = (unsigned __int8 *)*((_QWORD *)v131 - 1);
          v131 -= 8;
          if (!v135)
            goto LABEL_119;
          goto LABEL_118;
        }
LABEL_145:
        operator delete(*(void **)object);
        v129 = (unsigned __int8 *)*((_QWORD *)v131 - 1);
        v131 -= 8;
        if (!v135)
        {
LABEL_119:
          sub_2101F7620(v126, (uint64_t)&v123, &v187);
          v125[0] = &off_24CA1DB50;
          if (v130)
          {
            v131 = (char *)v130;
            operator delete(v130);
          }
          v25 = v126;
          v126 = 0;
          if (v25)
            v127();
          v26 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
          if ((v188 & 0x80u) == 0)
            v27 = &v187;
          else
            v27 = (__int128 *)v187;
          if ((v188 & 0x80u) == 0)
            v28 = v188;
          else
            v28 = *((_QWORD *)&v187 + 1);
          sub_20E86A980(v26, (uint64_t)v27, v28);
          if ((char)v188 < 0)
          {
            operator delete((void *)v187);
            if ((SHIBYTE(v183) & 0x80000000) == 0)
            {
LABEL_131:
              if ((SHIBYTE(v180) & 0x80000000) == 0)
                goto LABEL_132;
              goto LABEL_149;
            }
          }
          else if ((SHIBYTE(v183) & 0x80000000) == 0)
          {
            goto LABEL_131;
          }
          operator delete((void *)v182);
          if ((SHIBYTE(v180) & 0x80000000) == 0)
          {
LABEL_132:
            if ((SHIBYTE(v178) & 0x80000000) == 0)
              goto LABEL_133;
            goto LABEL_150;
          }
LABEL_149:
          operator delete((void *)v179);
          if ((SHIBYTE(v178) & 0x80000000) == 0)
          {
LABEL_133:
            if ((SHIBYTE(v176) & 0x80000000) == 0)
              goto LABEL_134;
            goto LABEL_151;
          }
LABEL_150:
          operator delete((void *)v177);
          if ((SHIBYTE(v176) & 0x80000000) == 0)
          {
LABEL_134:
            if ((SHIBYTE(v174) & 0x80000000) == 0)
              goto LABEL_135;
            goto LABEL_152;
          }
LABEL_151:
          operator delete((void *)v175);
          if ((SHIBYTE(v174) & 0x80000000) == 0)
          {
LABEL_135:
            if ((SHIBYTE(v172) & 0x80000000) == 0)
              goto LABEL_136;
            goto LABEL_153;
          }
LABEL_152:
          operator delete((void *)v173);
          if ((SHIBYTE(v172) & 0x80000000) == 0)
          {
LABEL_136:
            if ((SHIBYTE(rep) & 0x80000000) == 0)
              goto LABEL_137;
            goto LABEL_154;
          }
LABEL_153:
          operator delete((void *)v171);
          if ((SHIBYTE(rep) & 0x80000000) == 0)
          {
LABEL_137:
            if (!v166)
            {
LABEL_161:
              if (v149)
                goto LABEL_162;
              goto LABEL_164;
            }
LABEL_155:
            if (v165 < 0)
            {
              operator delete(v164);
              if ((v163 & 0x80000000) == 0)
              {
LABEL_157:
                if ((v161 & 0x80000000) == 0)
                  goto LABEL_158;
                goto LABEL_177;
              }
            }
            else if ((v163 & 0x80000000) == 0)
            {
              goto LABEL_157;
            }
            operator delete(v162);
            if ((v161 & 0x80000000) == 0)
            {
LABEL_158:
              if ((v159 & 0x80000000) == 0)
                goto LABEL_159;
              goto LABEL_178;
            }
LABEL_177:
            operator delete(v160);
            if ((v159 & 0x80000000) == 0)
            {
LABEL_159:
              if ((v155 & 0x80000000) == 0)
                goto LABEL_160;
              goto LABEL_179;
            }
LABEL_178:
            operator delete(v156);
            if ((v155 & 0x80000000) == 0)
            {
LABEL_160:
              if ((SHIBYTE(v152) & 0x80000000) == 0)
                goto LABEL_161;
              goto LABEL_180;
            }
LABEL_179:
            operator delete(v153);
            if ((SHIBYTE(v152) & 0x80000000) == 0)
              goto LABEL_161;
LABEL_180:
            operator delete(v150);
            if (v149)
            {
LABEL_162:
              if (SHIBYTE(v148) < 0)
                operator delete((void *)v147);
            }
LABEL_164:
            if (v119)
            {
              v29 = (unint64_t *)&v119->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
LABEL_169:
            v31 = v122;
            if (!v122)
              return sub_20FD0E1D8((uint64_t)v120);
            goto LABEL_170;
          }
LABEL_154:
          operator delete((void *)__src);
          if (!v166)
            goto LABEL_161;
          goto LABEL_155;
        }
LABEL_118:
        v135 = 0;
        goto LABEL_119;
      }
    }
    else
    {
      v133 = "process_id";
      v134 = 10;
      if (!v135)
        v135 = 1;
    }
    LOBYTE(__dst) = 5;
    *(_QWORD *)&v141 = v200;
    v22 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v125);
    v23 = *v22;
    *v22 = __dst;
    LOBYTE(__dst) = v23;
    v24 = *((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v141;
    *(_QWORD *)&v141 = v24;
    sub_20EB911C0((uint64_t *)&v141, v23);
    v20 = v129;
    goto LABEL_83;
  }
  sub_20FD18B84(&v123);
  if (**(int **)(v123 + 56) > 5)
    goto LABEL_169;
  v9 = *(unsigned __int8 *)(v123 + 72);
  v10 = sub_20E8C31DC(v123, "OSLogSurrogateAppender", 1, 0);
  v11 = v10;
  if (!v9 && v10 == 0)
    goto LABEL_169;
  sub_20E863438((uint64_t)&v145);
  LODWORD(v171) = 0;
  sub_20E9F5D10(&__src, "Failed to open peer info file ");
  sub_20EB04FEC((uint64_t)__p, (uint64_t)&__src, a1);
  *(_QWORD *)object = &__src;
  *(_QWORD *)&object[8] = " for writing";
  *(_QWORD *)&object[16] = &__src;
  *(_QWORD *)&v190 = " for writing";
  *((_QWORD *)&v190 + 1) = " for writing";
  if ((_DWORD)v171 == -1)
    sub_20E877AB8();
  __dst = object;
  ((void (*)(const char **, __int128 *))off_24CA061D0[v171])(&__dst, &__src);
  if ((_DWORD)v171 == -1)
    sub_20E877AB8();
  *(_QWORD *)object = &__dst;
  ((void (*)(void **__return_ptr, _BYTE *, __int128 *))off_24CA061E8[v171])(v125, object, &__src);
  if ((_DWORD)v171 != -1)
    ((void (*)(_BYTE *, __int128 *))off_24CA06188[v171])(object, &__src);
  if (SHIBYTE(v126) >= 0)
    v13 = v125;
  else
    v13 = (void **)v125[0];
  if (SHIBYTE(v126) >= 0)
    v14 = HIBYTE(v126);
  else
    v14 = (uint64_t)v125[1];
  sub_20E86A980(&v146, (uint64_t)v13, v14);
  if ((SHIBYTE(v126) & 0x80000000) == 0)
  {
    v15 = v158;
    if ((v158 & 0x10) == 0)
      goto LABEL_25;
LABEL_183:
    v35 = v157;
    if (v157 < v152)
    {
      v157 = v152;
      v35 = v152;
    }
    v36 = v151;
    v16 = v35 - (_QWORD)v151;
    if (v35 - (unint64_t)v151 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_238;
    goto LABEL_186;
  }
  operator delete(v125[0]);
  v15 = v158;
  if ((v158 & 0x10) != 0)
    goto LABEL_183;
LABEL_25:
  if ((v15 & 8) == 0)
  {
    v16 = 0;
    HIBYTE(v139) = 0;
    v17 = __p;
    goto LABEL_193;
  }
  v36 = v148;
  v16 = (_BYTE *)v150 - (_BYTE *)v148;
  if ((unint64_t)((_BYTE *)v150 - (_BYTE *)v148) > 0x7FFFFFFFFFFFFFF7)
LABEL_238:
    sub_20E860B7C();
LABEL_186:
  if (v16 >= 0x17)
  {
    v37 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v37 = v16 | 7;
    v38 = v37 + 1;
    v17 = operator new(v37 + 1);
    __p[1] = (void *)v16;
    v139 = v38 | 0x8000000000000000;
    __p[0] = v17;
    goto LABEL_192;
  }
  HIBYTE(v139) = v16;
  v17 = __p;
  if (v16)
LABEL_192:
    memmove(v17, v36, v16);
LABEL_193:
  *((_BYTE *)v17 + v16) = 0;
  *(_QWORD *)&__src = &v123;
  *((std::chrono::steady_clock::time_point *)&__src + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v171) = 5;
  *((_QWORD *)&v171 + 1) = "unknown file";
  LODWORD(v172) = 60;
  v174 = 0;
  *(_QWORD *)&v173 = "unknown function";
  *((_QWORD *)&v173 + 1) = 0;
  if (v139 >= 0)
    v39 = __p;
  else
    v39 = (void **)__p[0];
  v40 = *(_QWORD *)__src;
  v41 = (const char *)(*(_QWORD *)__src + 16);
  v115 = *(_QWORD *)__src;
  v116 = v41;
  if (*(char *)(*(_QWORD *)__src + 39) < 0)
  {
    v41 = *(const char **)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    v117 = v11;
    v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v44 & 1) != 0)
      goto LABEL_200;
  }
  else
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)__src + 39);
    v117 = v11;
    v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v43 & 1) != 0)
      goto LABEL_200;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v190 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_200:
  if (byte_254A4A4F8[23] >= 0)
    v45 = byte_254A4A4F8;
  else
    v45 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v46 = byte_254A4A4F8[23];
  else
    v46 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v45, v41);
  v47 = &object[8];
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v46 >= 0x17)
  {
    v48 = v39;
    v49 = v9;
    v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v50 = v46 | 7;
    v51 = v50 + 1;
    v47 = operator new(v50 + 1);
    *(_QWORD *)&v190 = v51 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v47;
    *(_QWORD *)&object[16] = v46;
    v9 = v49;
    v39 = v48;
    goto LABEL_213;
  }
  BYTE7(v190) = v46;
  if (v46)
LABEL_213:
    memmove(v47, v45, v46);
  v47[v46] = 0;
  BYTE8(v190) = 1;
  v52 = (char *)&v191;
  if (v42 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v42 >= 0x17)
  {
    v53 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v53 = v42 | 7;
    v54 = v53 + 1;
    v52 = (char *)operator new(v53 + 1);
    *((_QWORD *)&v192 + 1) = v54 | 0x8000000000000000;
    v191 = v52;
    *(_QWORD *)&v192 = v42;
    goto LABEL_221;
  }
  HIBYTE(v192) = v42;
  if (v42)
LABEL_221:
    memmove(v52, v41, v42);
  v52[v42] = 0;
  LOBYTE(v193) = 1;
  v55 = *(NSObject **)object;
  if (SHIBYTE(v192) < 0)
    operator delete(v191);
  if (BYTE8(v190) && SBYTE7(v190) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v117 && *(_QWORD *)(v117 + 24))
  {
    v56 = _os_log_pack_size();
    v57 = operator new(v56, (std::align_val_t)8uLL);
    v58 = operator new();
    *(_QWORD *)v58 = &off_24C9ABB80;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = v57;
    v125[0] = v57;
    v125[1] = v57;
    v127 = 0;
    v128 = 0;
    v126 = (unsigned __int8 *)v58;
    v59 = strlen((const char *)v39);
    if (v59 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v60 = v59;
    if (v59 >= 0x17)
    {
      v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17)
        v63 = v59 | 7;
      v64 = v63 + 1;
      p_dst = (const char **)operator new(v63 + 1);
      *(_QWORD *)&v141 = v60;
      *((_QWORD *)&v141 + 1) = v64 | 0x8000000000000000;
      __dst = (const char *)p_dst;
    }
    else
    {
      HIBYTE(v141) = v59;
      p_dst = &__dst;
      if (!v59)
      {
LABEL_243:
        *((_BYTE *)p_dst + v60) = 0;
        v65 = __dst;
        *(_QWORD *)&v187 = v141;
        *(_QWORD *)((char *)&v187 + 7) = *(_QWORD *)((char *)&v141 + 7);
        v66 = HIBYTE(v141);
        v67 = (char *)operator new(0x38uLL);
        *((_QWORD *)v67 + 1) = 0;
        *((_QWORD *)v67 + 2) = 0;
        *((_QWORD *)v67 + 3) = off_24C9ABC20;
        *(_QWORD *)v67 = &off_24C9ABBD0;
        v68 = v187;
        *((_QWORD *)v67 + 4) = v65;
        *((_QWORD *)v67 + 5) = v68;
        *(_QWORD *)(v67 + 47) = *(_QWORD *)((char *)&v187 + 7);
        v67[55] = v66;
        *(_QWORD *)&v187 = 0;
        *(_QWORD *)((char *)&v187 + 7) = 0;
        v69 = v128;
        v127 = (void (*)(void))(v67 + 24);
        v128 = (std::__shared_weak_count *)v67;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        *(_OWORD *)object = *(_OWORD *)v125;
        v72 = v127;
        *(_QWORD *)&object[16] = v126;
        if (v126)
        {
          v73 = (unint64_t *)(v126 + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v75 = v128;
        *(_QWORD *)&v190 = v72;
        *((_QWORD *)&v190 + 1) = v128;
        if (v128)
        {
          v76 = (unint64_t *)&v128->__shared_owners_;
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
          v191 = (char *)v72;
          do
            v78 = __ldaxr(v76);
          while (__stlxr(v78 - 1, v76));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        else
        {
          v191 = (char *)v72;
        }
        v79 = (std::__shared_weak_count *)v126;
        if (v126)
        {
          v80 = (unint64_t *)(v126 + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = *(_QWORD *)object;
        if (v191[31] >= 0)
          v83 = v191 + 8;
        else
          v83 = (char *)*((_QWORD *)v191 + 1);
        v84 = _os_log_pack_fill();
        *(_DWORD *)v84 = 136315138;
        *(_QWORD *)(v84 + 4) = v83;
        v85 = (char *)operator new();
        v86 = *(unsigned __int8 *)(v115 + 39);
        v87 = *(const char **)(v115 + 16);
        v88 = *(_QWORD *)(v115 + 24);
        v89 = v190;
        *(_OWORD *)(v85 + 8) = *(_OWORD *)&object[8];
        if ((v86 & 0x80u) != 0)
          v86 = v88;
        else
          v87 = v116;
        *(_QWORD *)v85 = v82;
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v85 + 24) = v89;
        v190 = 0uLL;
        *((_QWORD *)v85 + 5) = v87;
        *((_QWORD *)v85 + 6) = v86;
        v85[56] = 16;
        __dst = 0;
        v125[0] = v85;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v117 + 24) + 40))(*(_QWORD *)(v117 + 24), v125);
        v90 = v125[0];
        v125[0] = 0;
        if (v90)
        {
          v91 = (std::__shared_weak_count *)*((_QWORD *)v90 + 4);
          if (v91)
          {
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = (std::__shared_weak_count *)*((_QWORD *)v90 + 2);
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
          v97 = __dst;
          __dst = 0;
          if (v97)
          {
            v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
            if (v98)
            {
              v99 = (unint64_t *)&v98->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
            if (v101)
            {
              v102 = (unint64_t *)&v101->__shared_owners_;
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
          }
        }
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
        if (*((_QWORD *)&v190 + 1))
        {
          v105 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v108 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        goto LABEL_303;
      }
    }
    memcpy(p_dst, v39, v60);
    goto LABEL_243;
  }
  os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
  *(_DWORD *)object = 136315138;
  *(_QWORD *)&object[4] = v39;
  v62 = (void *)_os_log_send_and_compose_impl();
  if (v62)
    free(v62);
LABEL_303:
  if (v9)
  {
    v110 = __p;
    if (v139 < 0)
      v110 = (void **)__p[0];
    sub_20E8C003C((uint64_t)&__src, "%s", (const char *)v110);
    sub_20E863570((uint64_t)&__src);
  }
  sub_20E863570((uint64_t)&__src);
  v111 = v174;
  if (v174)
  {
    v112 = (unint64_t *)&v174->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v145 = *MEMORY[0x24BEDB7F0];
  v114 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v145 + *(_QWORD *)(v145 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v146 = v114;
  *(_QWORD *)&v147 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v156) < 0)
    operator delete(v154);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v160);
  v31 = v122;
  if (v122)
  {
LABEL_170:
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return sub_20FD0E1D8((uint64_t)v120);
}

void sub_20FD1A3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (LOBYTE(STACK[0x388]) && SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x280]);
  if (a48 < 0)
    operator delete(a43);
  sub_20E863784((uint64_t)&a56);
  sub_21022EBB8((uint64_t)&a22);
  sub_20FD0E1D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20FD1A73C(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  std::string *v9;
  char v10;
  char v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  std::string v23;
  std::__fs::filesystem::path __p;
  std::string v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)"client_";
  v25.__r_.__value_.__l.__size_ = 7;
  v25.__r_.__value_.__r.__words[2] = a2;
  v26 = a3;
  v27 = "_alive";
  v28 = 6;
  sub_20E8778D4((uint64_t)&v25, (uint64_t)&v29, 0, 0, &v23);
  __p.__pn_ = v23;
  memset(&v23, 0, sizeof(v23));
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(v19, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)a1;
    v20 = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C((uint64_t)v19, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_6:
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_7:
    *(_OWORD *)__dst = *(_OWORD *)v19;
    v22 = v20;
    goto LABEL_12;
  }
LABEL_10:
  sub_20E860C04(__dst, v19[0], (unint64_t)v19[1]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
LABEL_12:
  memset(&v25, 0, sizeof(v25));
  v8 = (char *)HIBYTE(v22);
  if (v22 >= 0)
    v9 = (std::string *)__dst;
  else
    v9 = (std::string *)__dst[0];
  if (v22 < 0)
    v8 = (char *)__dst[1];
  sub_20E8A9678(&v25, v9, (std::string *)&v8[(_QWORD)v9]);
  v10 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a4 + 176))(a4, &v25);
  v11 = v10;
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 1) != 0)
      goto LABEL_19;
LABEL_28:
    v17 = 0;
    if (SHIBYTE(v22) < 0)
      goto LABEL_29;
    return v17;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v11 & 1) == 0)
    goto LABEL_28;
LABEL_19:
  memset(&v25, 0, sizeof(v25));
  v12 = (char *)HIBYTE(v22);
  if (v22 >= 0)
    v13 = (std::string *)__dst;
  else
    v13 = (std::string *)__dst[0];
  if (v22 < 0)
    v12 = (char *)__dst[1];
  sub_20E8A9678(&v25, v13, (std::string *)&v12[(_QWORD)v13]);
  v14 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a4 + 208))(a4, &v25);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 392))(a4);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) - v14;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    v17 = v16 <= a5;
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return v17;
    goto LABEL_29;
  }
  v17 = v16 <= a5;
  if (SHIBYTE(v22) < 0)
LABEL_29:
    operator delete(__dst[0]);
  return v17;
}

void sub_20FD1A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FD1AA60(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char *v9;
  __int128 v10;
  int v11;
  size_t v12;
  size_t v13;
  char v14;
  __int128 *p_dst;
  void **v16;
  char v17;
  void *v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  void **v25;
  int v26;
  uint64_t v27;
  const char *v28;
  _QWORD v29[5];
  void *v30[2];
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  _QWORD v43[2];
  void *v44[2];
  void *v45;
  char v46;
  unsigned __int8 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  char v54;
  void *__p[2];
  __int128 v56;
  void *v57;
  char v58;
  void *v59;
  void *v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  std::string v68;
  __int128 __dst;
  __int128 v70;
  uint64_t v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  __int128 v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v82 = *a3;
  v83 = *((_BYTE *)a3 + 16);
  v43[0] = a4;
  v43[1] = a5;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    *(_QWORD *)&v70 = *(_QWORD *)(a1 + 16);
  }
  v9 = sub_20E8A8B84();
  if (v9[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    *(_QWORD *)&v56 = *((_QWORD *)v9 + 2);
    *(_OWORD *)__p = v10;
  }
  v11 = SBYTE7(v56);
  if ((SBYTE7(v56) & 0x80u) == 0)
    v12 = BYTE7(v56);
  else
    v12 = (size_t)__p[1];
  v13 = BYTE7(v70);
  v14 = BYTE7(v70);
  if (SBYTE7(v70) < 0)
    v13 = *((_QWORD *)&__dst + 1);
  if (v13 < v12
    || ((SBYTE7(v70) & 0x80u) == 0 ? (p_dst = &__dst) : (p_dst = (__int128 *)__dst),
        (SBYTE7(v56) & 0x80u) == 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
        memcmp(p_dst, v16, v12)))
  {
    if (v11 < 0)
    {
      operator delete(__p[0]);
      if ((BYTE7(v70) & 0x80) == 0)
        goto LABEL_28;
    }
    else if ((v14 & 0x80) == 0)
    {
      goto LABEL_28;
    }
    operator delete((void *)__dst);
LABEL_28:
    v29[0] = &v42;
    v29[1] = a1;
    v29[2] = a2;
    v29[3] = &v82;
    v29[4] = v43;
    LOBYTE(__dst) = 0;
    v81 = 0;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06988;
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
    v68.__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
    sub_210235BBC((uint64_t)&v68, (uint64_t)__p);
    if (v67)
    {
      v41 = v80;
      if (v80)
      {
        v18 = (void *)*((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        v30[0] = &off_24CA06A20;
        v30[1] = v18;
      }
      else
      {
        *(_OWORD *)v30 = __dst;
        LOBYTE(v31) = 0;
        v40 = 0;
        if (v79)
        {
          v33 = 0;
          if (v72)
          {
            v31 = v70;
            v32 = v71;
            v71 = 0;
            v70 = 0uLL;
            v33 = 1;
          }
          LOBYTE(v34) = 0;
          v39 = 0;
          if (v78)
          {
            v35 = v74;
            v34 = v73;
            v73 = 0uLL;
            v36 = v75;
            *(_OWORD *)v37 = v76;
            v38 = v77;
            v74 = 0;
            v76 = 0uLL;
            v77 = 0;
            v39 = 1;
          }
          v40 = 1;
        }
      }
    }
    else
    {
      *(_OWORD *)v44 = *(_OWORD *)__p;
      v19 = sub_20E89EFE4(&v45, &v56);
      *(_OWORD *)v30 = *(_OWORD *)v44;
      LOBYTE(v31) = 0;
      v40 = 0;
      if (v54)
      {
        v33 = 0;
        v20 = v47;
        if (v47)
        {
          v31 = *(_OWORD *)v19;
          v32 = *((_QWORD *)v19 + 2);
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = 0;
          *(_QWORD *)v19 = 0;
          v33 = 1;
        }
        LOBYTE(v34) = 0;
        v39 = 0;
        if (v53)
        {
          v35 = v49;
          v34 = v48;
          v48 = 0uLL;
          v36 = v50;
          *(_OWORD *)v37 = v51;
          v38 = v52;
          v49 = 0;
          v51 = 0uLL;
          v52 = 0;
          v39 = 1;
        }
        v40 = 1;
        v41 = 0;
        if (v20 && v46 < 0)
          operator delete(v45);
      }
      else
      {
        v41 = 0;
      }
      if (!v67 && v66)
      {
        if (v65)
        {
          if (v64 < 0)
            operator delete(v61);
          if (SHIBYTE(v60) < 0)
            operator delete(v59);
        }
        if (v58 && SHIBYTE(v57) < 0)
          operator delete((void *)v56);
      }
    }
    if (v81)
    {
      if (v80)
      {
        v21 = *((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        if (v21)
        {
          sub_20FD0FEE8(v21);
          sub_20FCF4D74(v21 + 104);
          if (*(_BYTE *)(v21 + 96) && *(char *)(v21 + 95) < 0)
            operator delete(*(void **)(v21 + 72));
          if (*(char *)(v21 + 23) < 0)
            operator delete(*(void **)v21);
          MEMORY[0x212BC6398](v21, 0x1032C40AA77330FLL);
        }
      }
      else if (v79)
      {
        if (v78)
        {
          if (SHIBYTE(v77) < 0)
            operator delete((void *)v76);
          if (SHIBYTE(v74) < 0)
            operator delete((void *)v73);
        }
        if (v72 && SHIBYTE(v71) < 0)
          operator delete((void *)v70);
      }
    }
    if (v41)
    {
      v22 = v30[1];
      v30[1] = 0;
      *(_QWORD *)a6 = &off_24CA06A20;
      *(_QWORD *)(a6 + 8) = v22;
      *(_BYTE *)(a6 + 120) = 1;
      goto LABEL_101;
    }
    v28 = "server";
    sub_2102341F0((uint64_t)v30, &v68);
    sub_20FD2BC2C((uint64_t)v44, (const char *)&v28, (const char *)&v68);
    if (SHIBYTE(v45) < 0)
    {
      sub_20E860C04(__p, v44[0], (unint64_t)v44[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v44;
      *(_QWORD *)&v56 = v45;
    }
    BYTE8(v56) = 1;
    LOBYTE(v57) = 0;
    v62 = 0;
    v63 = 1;
    sub_20FD20A78((uint64_t)&__dst, 5u, (__int128 *)__p);
    *(_OWORD *)a6 = __dst;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    if (v79)
    {
      *(_BYTE *)(a6 + 40) = 0;
      v23 = v72;
      if (v72)
      {
        *(_OWORD *)(a6 + 16) = v70;
        *(_QWORD *)(a6 + 32) = v71;
        v71 = 0;
        v70 = 0uLL;
        *(_BYTE *)(a6 + 40) = 1;
      }
      *(_BYTE *)(a6 + 48) = 0;
      *(_BYTE *)(a6 + 104) = 0;
      if (v78)
      {
        v24 = v75;
        *(_QWORD *)(a6 + 64) = v74;
        *(_OWORD *)(a6 + 48) = v73;
        v73 = 0uLL;
        *(_QWORD *)(a6 + 72) = v24;
        *(_OWORD *)(a6 + 80) = v76;
        *(_QWORD *)(a6 + 96) = v77;
        v74 = 0;
        v76 = 0uLL;
        v77 = 0;
        *(_BYTE *)(a6 + 104) = 1;
      }
      *(_BYTE *)(a6 + 112) = 1;
      *(_BYTE *)(a6 + 120) = 0;
      if (v23 && SHIBYTE(v71) < 0)
        operator delete((void *)v70);
      if (!v63)
      {
LABEL_98:
        if (SHIBYTE(v45) < 0)
        {
          operator delete(v44[0]);
          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_100:
            if (v41)
              goto LABEL_101;
LABEL_110:
            if (v40)
            {
              if (v39)
              {
                if (SHIBYTE(v38) < 0)
                  operator delete(v37[0]);
                if (SHIBYTE(v35) < 0)
                  operator delete((void *)v34);
              }
              if (v33 && SHIBYTE(v32) < 0)
                operator delete((void *)v31);
            }
            return;
          }
        }
        else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_100;
        }
        operator delete(v68.__r_.__value_.__l.__data_);
        if (v41)
        {
LABEL_101:
          v25 = (void **)v30[1];
          v30[1] = 0;
          if (!v25)
            return;
          sub_20FD0FEE8((uint64_t)v25);
          sub_20FCF4D74((uint64_t)(v25 + 13));
          if (*((_BYTE *)v25 + 96) && *((char *)v25 + 95) < 0)
          {
            operator delete(v25[9]);
            if ((*((char *)v25 + 23) & 0x80000000) == 0)
              goto LABEL_106;
          }
          else if ((*((char *)v25 + 23) & 0x80000000) == 0)
          {
LABEL_106:
            MEMORY[0x212BC6398](v25, 0x1032C40AA77330FLL);
            return;
          }
          operator delete(*v25);
          goto LABEL_106;
        }
        goto LABEL_110;
      }
    }
    else
    {
      *(_BYTE *)(a6 + 120) = 0;
      if (!v63)
        goto LABEL_98;
    }
    if (v62)
    {
      if (SHIBYTE(v61) < 0)
        operator delete(v60);
      if (SHIBYTE(v59) < 0)
        operator delete(v57);
    }
    if (BYTE8(v56) && SBYTE7(v56) < 0)
      operator delete(__p[0]);
    goto LABEL_98;
  }
  v17 = sub_20E8A8B80();
  if (SBYTE7(v56) < 0)
  {
    operator delete(__p[0]);
    if ((SBYTE7(v70) & 0x80000000) == 0)
    {
LABEL_27:
      if ((v17 & 1) != 0)
        goto LABEL_28;
      goto LABEL_123;
    }
  }
  else if ((SBYTE7(v70) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete((void *)__dst);
  if ((v17 & 1) != 0)
    goto LABEL_28;
LABEL_123:
  v44[0] = "server";
  sub_20FD2B9D0((uint64_t)v30, (const char *)v44, a1);
  if (SBYTE7(v31) < 0)
  {
    sub_20E860C04(__p, v30[0], (unint64_t)v30[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v30;
    *(_QWORD *)&v56 = v31;
  }
  BYTE8(v56) = 1;
  LOBYTE(v57) = 0;
  v62 = 0;
  v63 = 1;
  sub_20FD20A78((uint64_t)&__dst, 5u, (__int128 *)__p);
  *(_OWORD *)a6 = __dst;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 112) = 0;
  if (v79)
  {
    *(_BYTE *)(a6 + 40) = 0;
    v26 = v72;
    if (v72)
    {
      *(_OWORD *)(a6 + 16) = v70;
      *(_QWORD *)(a6 + 32) = v71;
      v71 = 0;
      v70 = 0uLL;
      *(_BYTE *)(a6 + 40) = 1;
    }
    *(_BYTE *)(a6 + 48) = 0;
    *(_BYTE *)(a6 + 104) = 0;
    if (v78)
    {
      *(_OWORD *)(a6 + 48) = v73;
      v27 = v75;
      *(_QWORD *)(a6 + 64) = v74;
      *(_QWORD *)(a6 + 72) = v27;
      *(_OWORD *)(a6 + 80) = v76;
      *(_QWORD *)(a6 + 96) = v77;
      *(_BYTE *)(a6 + 104) = 1;
    }
    *(_BYTE *)(a6 + 112) = 1;
    *(_BYTE *)(a6 + 120) = 0;
    if (v26 && SHIBYTE(v71) < 0)
      operator delete((void *)v70);
  }
  else
  {
    *(_BYTE *)(a6 + 120) = 0;
  }
  if (v63)
  {
    if (v62)
    {
      if (SHIBYTE(v61) < 0)
        operator delete(v60);
      if (SHIBYTE(v59) < 0)
        operator delete(v57);
    }
    if (BYTE8(v56) && SBYTE7(v56) < 0)
      operator delete(__p[0]);
  }
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
}

void sub_20FD1B304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD1B3F8(uint64_t a1)
{
  sub_20FD205B8((uint64_t *)(a1 + 8), 0);
  return a1;
}

void sub_20FD1B424(uint64_t a1)
{
  sub_20FD205B8((uint64_t *)(a1 + 8), 0);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD1B460(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t result;
  std::__fs::filesystem::path __p;
  uint64_t v10;
  std::__shared_weak_count *v11;

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(std::mutex **)(a1 + 328);
    v3 = operator new();
    *(_QWORD *)v3 = v2;
    *(_BYTE *)(v3 + 8) = 1;
    std::mutex::lock(v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 48);
  sub_20FD0EDB8((uint64_t)&__p, a1 + 8, (unsigned __int8 *)(a1 + 56));
  sub_210224144(&__p, 0x30u, v4, &v10);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 176))(v4, a1 + 72);
  if ((result & 1) == 0)
    result = sub_20FD18D9C(a1 + 72, (__int128 *)(a1 + 96), 0, 0, v4);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8))
      std::mutex::unlock(*(std::mutex **)v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FD1B5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void sub_20FD1B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20FD08B8C(&a10);
    _Unwind_Resume(a1);
  }
  sub_20FD08B8C(&a10);
  _Unwind_Resume(a1);
}

std::thread **sub_20FD1B61C(std::thread **a1)
{
  std::thread *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::thread::~thread(v2);
    MEMORY[0x212BC6398]();
  }
  return a1;
}

uint64_t sub_20FD1B660(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  std::thread *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(std::mutex **)(a1 + 328);
    v3 = operator new();
    *(_QWORD *)v3 = v2;
    *(_BYTE *)(v3 + 8) = 1;
    std::mutex::lock(v2);
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v4 = *(_QWORD *)(a1 + 48);
  sub_20FD0EC98((uint64_t)__p, a1 + 8, (unsigned __int8 *)(a1 + 56));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 232))(v4, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8))
      std::mutex::unlock(*(std::mutex **)v3);
    MEMORY[0x212BC6398](v3, 0x1020C405F07FB98);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 481));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 536));
  std::thread::join(*(std::thread **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336))
  {
    v5 = *(std::mutex **)(a1 + 328);
    v6 = operator new();
    *(_QWORD *)v6 = v5;
    *(_BYTE *)(v6 + 8) = 1;
    std::mutex::lock(v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  sub_20FD0EDB8((uint64_t)__p, a1 + 8, (unsigned __int8 *)(a1 + 56));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 232))(v7, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 8))
      std::mutex::unlock(*(std::mutex **)v6);
    MEMORY[0x212BC6398](v6, 0x1020C405F07FB98);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 536));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 488));
  std::mutex::~mutex((std::mutex *)(a1 + 416));
  std::mutex::~mutex((std::mutex *)(a1 + 352));
  v8 = *(std::thread **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v8)
  {
    std::thread::~thread(v8);
    MEMORY[0x212BC6398]();
  }
  sub_20FCF4D74(a1 + 152);
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (*(char *)(a1 + 95) < 0)
LABEL_24:
    operator delete(*(void **)(a1 + 72));
LABEL_25:
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_30;
    }
  }
  if (*(char *)(a1 + 31) < 0)
LABEL_30:
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20FD1B8E8(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1020C405F07FB98);
  sub_20E860DA4(a1);
}

void sub_20FD1B918(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_20FD08B8C(&a15);
    sub_20E860DA4(a1);
  }
  sub_20FD08B8C(&a15);
  sub_20E860DA4(a1);
}

void sub_20FD1B958(uint64_t a1)
{
  sub_20FD1B660(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD1B97C(uint64_t a1)
{
  unsigned __int8 v2;
  unint64_t *v3;
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  void *v9;
  std::string::size_type v10;
  std::unique_lock<std::mutex> v11;
  char v12;
  uint64_t v13;
  int64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  BOOL v17;
  std::chrono::steady_clock::time_point v18;
  std::__fs::filesystem::path::__string_view v19;
  std::unique_lock<std::mutex>::mutex_type *v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::unique_lock<std::mutex>::mutex_type *m;
  uint64_t v24;
  uint64_t m_high;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v27;
  unsigned __int8 v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::system_clock::time_point v30;
  BOOL v31;
  std::unique_lock<std::mutex>::mutex_type *v32;
  char *v33;
  std::unique_lock<std::mutex>::mutex_type *v34;
  _WORD *v35;
  char *v36;
  std::unique_lock<std::mutex>::mutex_type *v38;
  uint64_t v39;
  _BYTE *v40;
  __int128 v41;
  __int128 v42;
  std::mutex *v43;
  char *v44;
  uint64_t v45;
  std::__fs::filesystem::path::__string_view v46;
  std::unique_lock<std::mutex>::mutex_type *v47;
  std::basic_string_view<_CharT, _Traits>::size_type v48;
  std::basic_string_view<_CharT, _Traits>::size_type v49;
  std::unique_lock<std::mutex>::mutex_type *v50;
  uint64_t v51;
  int v52;
  _OWORD *p_sig;
  uint64_t *v55;
  __int128 *v56;
  char *v57;
  uint64_t *v59;
  __int128 *v60;
  char *v61;
  void *v62;
  std::unique_lock<std::mutex> *v63;
  std::unique_lock<std::mutex> *v64;
  void **v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  char v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t v75;
  unsigned __int8 v76;
  void *v77;
  char v78;
  char *v79;
  void *v80;
  void *v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  int v87;
  std::string::size_type v88;
  int v89;
  char v90;
  int v91;
  void **v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t v97;
  BOOL v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t *v113;
  _QWORD *v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::string::size_type v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void **v131;
  uint64_t v132;
  BOOL *p_owns;
  const void *v134;
  uint64_t v135;
  uint64_t v136;
  std::string *v137;
  uint64_t v138;
  const char *v139;
  size_t v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  const char *v143;
  size_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  size_t v152;
  void *v153;
  _QWORD *v154;
  size_t v155;
  std::string::size_type v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  std::string::size_type v161;
  char v162;
  _QWORD *v163;
  std::unique_lock<std::mutex>::mutex_type *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::string::size_type v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::string *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  unsigned __int8 v211;
  _QWORD *exception;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  std::unique_lock<std::mutex>::mutex_type *v216;
  std::unique_lock<std::mutex>::mutex_type *v217;
  std::unique_lock<std::mutex>::mutex_type *v218;
  int v219;
  std::mutex *v220;
  unsigned __int8 *v221;
  std::chrono::steady_clock::time_point v222;
  uint64_t v223;
  uint64_t v224;
  std::condition_variable *v225;
  _BYTE v226[32];
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  char v233;
  unsigned __int8 v234;
  char v235;
  std::__fs::filesystem::path v236;
  char v237;
  uint64_t (**v238)();
  uint64_t v239;
  std::__shared_weak_count *v240;
  void *v241[2];
  char v242;
  std::string __p;
  __int128 v244;
  int v245;
  __int128 v246;
  void *v247;
  __int128 v248;
  char v249;
  void *v250;
  _BYTE v251[15];
  char v252;
  uint64_t v253;
  void *v254;
  _BYTE v255[15];
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  std::__fs::filesystem::path v261;
  char v262;
  _BYTE __src[32];
  __int128 v264;
  _BYTE v265[32];
  void *v266[3];
  uint64_t v267;
  void *v268;
  __int128 v269;
  char v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  std::__fs::filesystem::path v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  char v280;
  char v281;
  __int128 v282;
  char v283;
  void *v284[2];
  unsigned __int8 v285;
  const char *v286;
  uint64_t v287;
  int v288;
  std::string *v289;
  unsigned __int8 v290[17];
  std::unique_lock<std::mutex> v291;
  _BYTE v292[7];
  unsigned __int8 v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  std::unique_lock<std::mutex> __dst[3];
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  char v302[8];
  char v303;
  void *v304;
  char v305;
  void *v306;
  char v307;
  char v308;
  void *v309;
  char v310;
  void *v311;
  char v312;
  char v313;
  char v314;
  char v315;
  char v316;
  std::string v317;
  void (*v318)(uint64_t *);
  char v319;
  unsigned __int8 *v320;
  void *v321;
  char *v322;
  uint64_t v323;
  std::unique_lock<std::mutex> v324;
  char v325;
  char v326;
  char v327;
  _BYTE object[48];
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  char v334;
  char v335;
  char v336;
  void *v337;
  char v338;
  char v339;
  void *v340;
  char v341;
  void *v342;
  char v343;
  char v344;
  char v345;
  char v346;
  uint64_t v347;

  v347 = *MEMORY[0x24BDAC8D0];
  std::chrono::steady_clock::now();
  sub_20FD1B460(a1);
  v222.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::mutex::lock((std::mutex *)(a1 + 352));
  atomic_store(1u, (unsigned __int8 *)(a1 + 480));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 488));
  std::mutex::unlock((std::mutex *)(a1 + 352));
  v2 = atomic_load((unsigned __int8 *)(a1 + 481));
  if ((v2 & 1) != 0)
    return;
  v221 = (unsigned __int8 *)(a1 + 56);
  v223 = a1 + 8;
  v218 = (std::unique_lock<std::mutex>::mutex_type *)*MEMORY[0x24BEDB7F0];
  v216 = *(std::unique_lock<std::mutex>::mutex_type **)(MEMORY[0x24BEDB7F0] + 72);
  v217 = *(std::unique_lock<std::mutex>::mutex_type **)(MEMORY[0x24BEDB7F0] + 64);
  v215 = MEMORY[0x24BEDB848] + 16;
  v225 = (std::condition_variable *)(a1 + 536);
  v3 = (unint64_t *)(a1 + 584);
  v220 = (std::mutex *)(a1 + 416);
  v224 = a1;
  do
  {
    if (*(_BYTE *)(a1 + 336))
    {
      v4 = *(std::mutex **)(a1 + 328);
      v5 = operator new();
      *(_QWORD *)v5 = v4;
      *(_BYTE *)(v5 + 8) = 1;
      std::mutex::lock(v4);
    }
    else
    {
      v5 = 0;
    }
    v291.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v5;
    v6 = *(_QWORD *)(a1 + 48);
    __dst[0].__m_ = (std::unique_lock<std::mutex>::mutex_type *)off_24CA1EF00;
    *(_QWORD *)&__dst[0].__owns_ = v6;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20E860C04(&__dst[1], *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
      v7 = *(_QWORD *)&__dst[0].__owns_;
    }
    else
    {
      __dst[1] = *(std::unique_lock<std::mutex> *)v223;
      __dst[2].__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(v223 + 16);
      v7 = v6;
    }
    *(_QWORD *)object = off_24CA1EF00;
    *(_QWORD *)&object[8] = v7;
    *(std::unique_lock<std::mutex> *)&object[16] = __dst[1];
    *(_QWORD *)&object[32] = __dst[2].__m_;
    *(_DWORD *)&__dst[1].__owns_ = 0;
    sub_20E8ECA30(__dst, "server_message_to_");
    sub_20EE1E7C4((uint64_t)&v317, (uint64_t)__dst, v221);
    if (*(_DWORD *)&__dst[1].__owns_ == -1)
      sub_20E877AB8();
    v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
    ((void (*)(_BYTE *__return_ptr, std::string *, std::unique_lock<std::mutex> *))off_24CA061E8[*(unsigned int *)&__dst[1].__owns_])(__src, &v317, __dst);
    if (*(_DWORD *)&__dst[1].__owns_ != -1)
      ((void (*)(std::string *, std::unique_lock<std::mutex> *))off_24CA06188[*(unsigned int *)&__dst[1].__owns_])(&v317, __dst);
    __p = *(std::string *)__src;
    memset(__src, 0, 24);
    if (*(char *)(a1 + 31) < 0)
      sub_20E860C04(&v273, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v273 = *(std::__fs::filesystem::path *)v223;
    sub_20E8A944C((uint64_t)&v273, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((__src[23] & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_21;
      }
    }
    else if ((__src[23] & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(*(void **)__src);
    if ((SHIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      *(std::__fs::filesystem::path *)v226 = v273;
      goto LABEL_23;
    }
LABEL_21:
    sub_20E860C04(v226, v273.__pn_.__r_.__value_.__l.__data_, v273.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__pn_.__r_.__value_.__l.__data_);
LABEL_23:
    sub_21022370C((int64x2_t *)&__p, (uint64_t)object, *(uint64_t *)&object[8], 1);
    size = __p.__r_.__value_.__l.__size_;
    v9 = (void *)__p.__r_.__value_.__r.__words[0];
    v10 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      a1 = v224;
      if (__p.__r_.__value_.__r.__words[0])
        goto LABEL_25;
      goto LABEL_59;
    }
    do
    {
      while (1)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          sub_20E860C04(__dst, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          v11 = *(std::unique_lock<std::mutex> *)v10;
          __dst[1].__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(v10 + 16);
          __dst[0] = v11;
        }
        *(std::unique_lock<std::mutex> *)&__dst[1].__owns_ = *(std::unique_lock<std::mutex> *)(v10 + 24);
        if (SHIBYTE(__dst[1].__m_) < 0)
        {
          sub_20E860C04(__src, __dst[0].__m_, *(unint64_t *)&__dst[0].__owns_);
        }
        else
        {
          *(std::unique_lock<std::mutex> *)__src = __dst[0];
          *(_QWORD *)&__src[16] = __dst[1].__m_;
        }
        v12 = __src[23];
        if (__src[23] >= 0)
          v13 = __src[23];
        else
          v13 = *(_QWORD *)&__src[8];
        if (v226[23] >= 0)
          v14 = v226[23];
        else
          v14 = *(_QWORD *)&v226[8];
        if (v14 <= v13)
        {
          v15 = __src[23] >= 0 ? __src : *(_BYTE **)__src;
          v16 = v226[23] >= 0 ? v226 : *(_BYTE **)v226;
          if (!memcmp(v15, v16, v14))
          {
            if (v13 < 5 || (*(_DWORD *)&v15[v13 - 5] == 1668246574 ? (v17 = v15[v13 - 1] == 107) : (v17 = 0), !v17))
            {
              if ((sub_20FD0E954((uint64_t)__dst, v6) & 1) == 0)
              {
                v12 = __src[23];
                goto LABEL_55;
              }
              if (SHIBYTE(__dst[1].__m_) < 0)
                sub_20E860C04(&v236, __dst[0].__m_, *(unint64_t *)&__dst[0].__owns_);
              else
                v236 = *(std::__fs::filesystem::path *)&__dst[0].__m_;
              a1 = v224;
              v237 = 1;
              if ((__src[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__src);
                if ((SHIBYTE(__dst[1].__m_) & 0x80000000) == 0)
                {
LABEL_205:
                  if (!v9)
                    goto LABEL_60;
                  do
                  {
LABEL_211:
                    if (*(char *)(size - 17) < 0)
                      operator delete(*(void **)(size - 40));
                    size -= 40;
                  }
                  while ((void *)size != v9);
                  operator delete(v9);
                  goto LABEL_60;
                }
              }
              else if ((SHIBYTE(__dst[1].__m_) & 0x80000000) == 0)
              {
                goto LABEL_205;
              }
              operator delete(__dst[0].__m_);
              if (!v9)
                goto LABEL_60;
              goto LABEL_211;
            }
          }
        }
LABEL_55:
        if ((v12 & 0x80) == 0)
          break;
        operator delete(*(void **)__src);
        if (SHIBYTE(__dst[1].__m_) < 0)
          goto LABEL_57;
LABEL_27:
        v10 += 40;
        if (v10 == size)
          goto LABEL_58;
      }
      if ((SHIBYTE(__dst[1].__m_) & 0x80000000) == 0)
        goto LABEL_27;
LABEL_57:
      operator delete(__dst[0].__m_);
      v10 += 40;
    }
    while (v10 != size);
LABEL_58:
    a1 = v224;
    if (!v9)
      goto LABEL_59;
    do
    {
      if (*(char *)(size - 17) < 0)
        operator delete(*(void **)(size - 40));
      size -= 40;
    }
    while ((void *)size != v9);
LABEL_25:
    operator delete(v9);
LABEL_59:
    v236.__pn_.__r_.__value_.__s.__data_[0] = 0;
    v237 = 0;
LABEL_60:
    if ((v226[23] & 0x80000000) == 0)
    {
      *(_QWORD *)object = off_24CA1EF00;
      if ((object[39] & 0x80000000) == 0)
        goto LABEL_62;
LABEL_71:
      operator delete(*(void **)&object[16]);
      if (!v5)
        goto LABEL_72;
LABEL_63:
      if (*(_BYTE *)(v5 + 8))
        std::mutex::unlock(*(std::mutex **)v5);
      MEMORY[0x212BC6398](v5, 0x1020C405F07FB98);
      if (!v237)
        goto LABEL_66;
LABEL_73:
      v19 = std::__fs::filesystem::path::__filename(&v236);
      if (v19.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v19.__size_ >= 0x17)
      {
        v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19.__size_ | 7) != 0x17)
          v21 = v19.__size_ | 7;
        v22 = v21 + 1;
        v20 = (std::unique_lock<std::mutex>::mutex_type *)operator new(v21 + 1);
        __dst[1].__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v22 | 0x8000000000000000);
        __dst[0].__m_ = v20;
        *(_QWORD *)&__dst[0].__owns_ = v19.__size_;
      }
      else
      {
        HIBYTE(__dst[1].__m_) = v19.__size_;
        v20 = (std::unique_lock<std::mutex>::mutex_type *)__dst;
        if (!v19.__size_)
        {
LABEL_81:
          *((_BYTE *)&v20->__m_.__sig + v19.__size_) = 0;
          m = __dst[0].__m_;
          v24 = *(_QWORD *)&__dst[0].__owns_;
          LODWORD(__p.__r_.__value_.__l.__data_) = __dst[1].__m_;
          *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__dst[1].__m_ + 3);
          if (SHIBYTE(__dst[1].__m_) < 0)
          {
            sub_20E860C04(object, __dst[0].__m_, *(unint64_t *)&__dst[0].__owns_);
            operator delete(m);
            m_high = object[23];
            v24 = *(_QWORD *)&object[8];
            m = *(std::unique_lock<std::mutex>::mutex_type **)object;
          }
          else
          {
            m_high = HIBYTE(__dst[1].__m_);
            *(std::unique_lock<std::mutex> *)object = __dst[0];
            *(_DWORD *)&object[16] = __p.__r_.__value_.__l.__data_;
            *(_DWORD *)&object[19] = *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3);
            object[23] = HIBYTE(__dst[1].__m_);
          }
          v31 = (m_high & 0x80u) != 0;
          if ((m_high & 0x80u) != 0)
            m_high = v24;
          if (v31)
            v32 = m;
          else
            v32 = (std::unique_lock<std::mutex>::mutex_type *)object;
          v33 = (char *)v32 + m_high;
          if (m_high >= 6)
          {
            v34 = v32;
            do
            {
              v35 = memchr(v34, 95, m_high - 5);
              if (!v35)
                break;
              v36 = (char *)v35;
              if (*(_DWORD *)v35 == 1869768287 && v35[2] == 24429)
                goto LABEL_119;
              v34 = (std::unique_lock<std::mutex>::mutex_type *)((char *)v35 + 1);
              m_high = v33 - (v36 + 1);
            }
            while (m_high > 5);
          }
          v36 = v33;
LABEL_119:
          v38 = (std::unique_lock<std::mutex>::mutex_type *)operator new(0x28uLL);
          v39 = v36 - (char *)v32 + 6;
          if (v36 == v33)
            v39 = 5;
          v40 = (char *)v32 + v39;
          __dst[0].__m_ = v38;
          *(_OWORD *)&__dst[0].__owns_ = xmmword_2102E0950;
          v41 = *(_OWORD *)v40;
          v42 = *((_OWORD *)v40 + 1);
          *(_DWORD *)&v38->__m_.__opaque[24] = *((_DWORD *)v40 + 8);
          *(_OWORD *)&v38->__m_.__sig = v41;
          *(_OWORD *)&v38->__m_.__opaque[8] = v42;
          v38->__m_.__opaque[28] = 0;
          sub_210232668((unsigned __int8 *)__dst, (uint64_t)v290);
          if (SHIBYTE(__dst[1].__m_) < 0)
          {
            operator delete(__dst[0].__m_);
            if ((object[23] & 0x80000000) != 0)
              goto LABEL_127;
LABEL_123:
            if (*(_BYTE *)(a1 + 336))
              goto LABEL_124;
LABEL_128:
            v44 = 0;
            v286 = 0;
            v45 = *(_QWORD *)(a1 + 48);
            if (SHIBYTE(v236.__pn_.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_129;
LABEL_125:
            v273 = v236;
          }
          else
          {
            if ((object[23] & 0x80000000) == 0)
              goto LABEL_123;
LABEL_127:
            operator delete(*(void **)object);
            if (!*(_BYTE *)(a1 + 336))
              goto LABEL_128;
LABEL_124:
            v43 = *(std::mutex **)(a1 + 328);
            v44 = (char *)operator new();
            *(_QWORD *)v44 = v43;
            v44[8] = 1;
            std::mutex::lock(v43);
            v286 = v44;
            v45 = *(_QWORD *)(a1 + 48);
            if ((SHIBYTE(v236.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_125;
LABEL_129:
            sub_20E860C04(&v273, v236.__pn_.__r_.__value_.__l.__data_, v236.__pn_.__r_.__value_.__l.__size_);
          }
          *(_QWORD *)&v274 = v45;
          (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v45 + 272))(v45, &v236);
          *(_QWORD *)&v275 = v45;
          v46 = std::__fs::filesystem::path::__extension(&v273);
          if (v46.__size_ > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v46.__size_ >= 0x17)
          {
            v48 = (v46.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v46.__size_ | 7) != 0x17)
              v48 = v46.__size_ | 7;
            v49 = v48 + 1;
            v47 = (std::unique_lock<std::mutex>::mutex_type *)operator new(v48 + 1);
            __dst[1].__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v49 | 0x8000000000000000);
            __dst[0].__m_ = v47;
            *(_QWORD *)&__dst[0].__owns_ = v46.__size_;
          }
          else
          {
            HIBYTE(__dst[1].__m_) = v46.__size_;
            v47 = (std::unique_lock<std::mutex>::mutex_type *)__dst;
            if (!v46.__size_)
            {
LABEL_138:
              *((_BYTE *)&v47->__m_.__sig + v46.__size_) = 0;
              v50 = __dst[0].__m_;
              *(_DWORD *)object = __dst[1].__m_;
              *(_DWORD *)&object[3] = *(_DWORD *)((char *)&__dst[1].__m_ + 3);
              a1 = v224;
              if ((SHIBYTE(__dst[1].__m_) & 0x80000000) == 0)
              {
                v51 = HIBYTE(__dst[1].__m_);
                v291 = __dst[0];
                *(_DWORD *)v292 = *(_DWORD *)object;
                *(_DWORD *)&v292[3] = *(_DWORD *)&object[3];
                v293 = HIBYTE(__dst[1].__m_);
                v52 = SHIBYTE(__dst[1].__m_);
                if (SHIBYTE(__dst[1].__m_) < 0)
                  v51 = *(_QWORD *)&__dst[0].__owns_;
                if (v51 != 5)
                  goto LABEL_142;
LABEL_159:
                if (v52 >= 0)
                  p_sig = &v291;
                else
                  p_sig = &v291.__m_->__m_.__sig;
                if (*(_DWORD *)p_sig != 1869834798 || *((_BYTE *)p_sig + 4) != 110)
                  goto LABEL_175;
                v261.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
                LOBYTE(__dst[0].__m_) = 0;
                LOBYTE(v304) = 0;
                v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06690;
                v317.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
                v317.__r_.__value_.__r.__words[2] = (std::string::size_type)&v261;
                sub_210235BBC((uint64_t)&v317, (uint64_t)&__p);
                if ((_BYTE)v253)
                {
                  v336 = v303;
                  if (v303)
                  {
                    *(_QWORD *)object = __dst[0].__m_;
                    object[8] = 0;
                    v335 = 0;
                    if (v302[0])
                    {
                      *(std::unique_lock<std::mutex> *)&object[8] = *(std::unique_lock<std::mutex> *)&__dst[0].__owns_;
                      *(_QWORD *)&object[24] = *(_QWORD *)&__dst[1].__owns_;
                      *(std::unique_lock<std::mutex> *)&object[32] = __dst[2];
                      v329 = v297;
                      v330 = v298;
                      v331 = v299;
                      LOBYTE(v332) = 0;
                      v334 = 0;
                      v59 = (uint64_t *)&v335;
                      if (BYTE8(v301))
                      {
                        v332 = v300;
                        v333 = v301;
                        v60 = &v300;
                        v61 = &v334;
                        v59 = (uint64_t *)&v335;
                        goto LABEL_248;
                      }
                      goto LABEL_249;
                    }
                  }
                  else
                  {
                    *(std::unique_lock<std::mutex> *)object = __dst[0];
                    object[16] = 0;
                    LOBYTE(v333) = 0;
                    if ((_BYTE)v301)
                    {
                      object[40] = 0;
                      if (__dst[2].__owns_)
                      {
                        *(std::unique_lock<std::mutex> *)&object[16] = __dst[1];
                        *(_QWORD *)&object[32] = __dst[2].__m_;
                        memset(&__dst[1], 0, 24);
                        object[40] = 1;
                      }
                      LOBYTE(v329) = 0;
                      BYTE8(v332) = 0;
                      v59 = &v333;
                      if (BYTE8(v300))
                      {
                        v329 = v297;
                        v330 = v298;
                        *(_QWORD *)&v298 = 0;
                        v297 = 0uLL;
                        v60 = &v299;
                        *(_QWORD *)&v332 = v300;
                        v61 = (char *)&v332 + 8;
                        v59 = &v333;
                        v331 = v299;
LABEL_248:
                        *(_QWORD *)v60 = 0;
                        *((_QWORD *)v60 + 1) = 0;
                        *((_QWORD *)v60 + 2) = 0;
                        *v61 = 1;
                      }
LABEL_249:
                      *(_BYTE *)v59 = 1;
                    }
                  }
                }
                else
                {
                  *(_OWORD *)__src = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  sub_20E89EFE4(&__src[16], (__int128 *)&__p.__r_.__value_.__r.__words[2]);
                  *(_OWORD *)object = *(_OWORD *)__src;
                  object[16] = 0;
                  LOBYTE(v333) = 0;
                  if ((_BYTE)v268)
                  {
                    object[40] = 0;
                    if (BYTE8(v264))
                    {
                      *(_OWORD *)&object[16] = *(_OWORD *)&__src[16];
                      *(_QWORD *)&object[32] = v264;
                      *(_QWORD *)&__src[24] = 0;
                      *(_QWORD *)&v264 = 0;
                      *(_QWORD *)&__src[16] = 0;
                      object[40] = 1;
                    }
                    LOBYTE(v329) = 0;
                    BYTE8(v332) = 0;
                    if ((_BYTE)v267)
                    {
                      v329 = *(_OWORD *)v265;
                      v330 = *(_OWORD *)&v265[16];
                      memset(v265, 0, 24);
                      v331 = *(_OWORD *)v266;
                      *(void **)&v332 = v266[2];
                      memset(v266, 0, sizeof(v266));
                      BYTE8(v332) = 1;
                    }
                    LOBYTE(v333) = 1;
                    v336 = 0;
                    if (BYTE8(v264) && SBYTE7(v264) < 0)
                      operator delete(*(void **)&__src[16]);
                  }
                  else
                  {
                    v336 = 0;
                  }
                  if (!(_BYTE)v253 && v251[8])
                  {
                    if (v251[0])
                    {
                      if (SHIBYTE(v250) < 0)
                        operator delete(*((void **)&v248 + 1));
                      if (SHIBYTE(v247) < 0)
                        operator delete((void *)v246);
                    }
                    if ((_BYTE)v245 && SHIBYTE(v244) < 0)
                      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                  }
                }
                if ((_BYTE)v304)
                {
                  if (v303)
                  {
                    if (!v302[0])
                      goto LABEL_277;
                    if (!BYTE8(v301))
                      goto LABEL_277;
                    v64 = (std::unique_lock<std::mutex> *)&v300;
                    if ((SBYTE7(v301) & 0x80000000) == 0)
                      goto LABEL_277;
LABEL_276:
                    operator delete(v64->__m_);
                    goto LABEL_277;
                  }
                  if ((_BYTE)v301)
                  {
                    if (BYTE8(v300))
                    {
                      if (SBYTE7(v300) < 0)
                        operator delete((void *)v299);
                      if (SBYTE7(v298) < 0)
                        operator delete((void *)v297);
                    }
                    if (__dst[2].__owns_)
                    {
                      v64 = &__dst[1];
                      if (SHIBYTE(__dst[2].__m_) < 0)
                        goto LABEL_276;
                    }
                  }
                }
LABEL_277:
                if (v336)
                {
LABEL_278:
                  *(_QWORD *)v226 = *(_QWORD *)object;
                  v226[8] = 0;
                  v234 = 0;
                  if (v335)
                  {
                    *(_OWORD *)&v226[8] = *(_OWORD *)&object[8];
                    *(_QWORD *)&v226[24] = *(_QWORD *)&object[24];
                    v227 = *(_OWORD *)&object[32];
                    v228 = v329;
                    v229 = v330;
                    v230 = v331;
                    LOBYTE(v231) = 0;
                    v233 = 0;
                    if (v334)
                    {
                      v231 = v332;
                      v232 = v333;
                      v333 = 0;
                      v332 = 0uLL;
                      v233 = 1;
                    }
                    v234 = 1;
                  }
                  v235 = 1;
                  if (!v335)
                  {
LABEL_336:
                    if ((char)v293 < 0)
                    {
                      operator delete(v291.__m_);
                      if (SHIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_349;
                    }
                    else
                    {
                      if ((SHIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_338;
LABEL_349:
                      operator delete(v273.__pn_.__r_.__value_.__l.__data_);
                    }
LABEL_338:
                    (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v224 + 48) + 232))(*(_QWORD *)(v224 + 48), &v236);
                    if (v44)
                    {
                      if (v44[8])
                        std::mutex::unlock(*(std::mutex **)v44);
                      MEMORY[0x212BC6398](v44, 0x1020C405F07FB98);
                    }
                    sub_20FD1B460(v224);
                    v222.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                    if (v235)
                    {
                      v66 = v234;
                      if (!v290[16])
                        goto LABEL_561;
                      v281 = 0;
                      if (!v234)
                        goto LABEL_559;
                      v273 = *(std::__fs::filesystem::path *)&v226[8];
                      v274 = v227;
                      v275 = v228;
                      v276 = v229;
                      v277 = v230;
                      LOBYTE(v278) = 0;
                      v280 = 0;
                      if (v233)
                      {
                        if (SHIBYTE(v232) < 0)
                        {
                          sub_20E860C04(&v278, (void *)v231, *((unint64_t *)&v231 + 1));
                        }
                        else
                        {
                          v278 = v231;
                          v279 = v232;
                        }
                        v280 = 1;
                      }
                      v281 = 1;
                      v75 = *(_QWORD *)(v224 + 32);
                      v261 = v273;
                      v262 = 1;
                      v76 = atomic_load((unsigned __int8 *)&qword_254A6D9D0);
                      if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9D0))
                      {
                        __cxa_atexit((void (*)(void *))nullsub_1020, &off_254A54FD0, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6D9D0);
                      }
                      sub_20FCFDCB0(v75, (uint64_t)&v261, (uint64_t)&v274, (uint64_t)&off_254A54FD0, (uint64_t)__src);
                      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v226;
                      __p.__r_.__value_.__s.__data_[8] = 1;
                      v87 = __src[24];
                      if (__src[24])
                      {
                        v88 = *(_QWORD *)__src;
                        v86 = *(_OWORD *)&__src[8];
                        memset(__src, 0, 24);
                        v89 = v272;
                        if (v272)
                          goto LABEL_369;
LABEL_376:
                        v91 = 0;
                        v90 = 0;
                        __p.__r_.__value_.__s.__data_[16] = 0;
                        LOBYTE(v245) = 0;
                        if (!__src[24])
                        {
LABEL_373:
                          v92 = (void **)v86;
                          LOBYTE(v246) = 0;
                          v259 = 0;
                          if (!v89)
                          {
LABEL_385:
                            v260 = 1;
                            goto LABEL_386;
                          }
LABEL_383:
                          LOBYTE(v246) = v90;
                          *(_QWORD *)((char *)&v246 + 1) = __dst[0].__m_;
                          *((_QWORD *)&v246 + 1) = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&__dst[0].__m_
                                                                                                + 7);
                          LOBYTE(v247) = 0;
                          v258 = 0;
                          if ((v78 & 1) != 0)
                          {
                            v259 = 1;
                            goto LABEL_385;
                          }
                          v249 = 0;
                          if (v91)
                          {
                            v247 = v77;
                            *(_QWORD *)&v248 = *(_QWORD *)object;
                            *(_QWORD *)((char *)&v248 + 7) = *(_QWORD *)&object[7];
                            HIBYTE(v248) = (_BYTE)v79;
                            *(_QWORD *)object = 0;
                            *(_QWORD *)&object[7] = 0;
                            v249 = 1;
                            v77 = 0;
                            LOBYTE(v79) = 0;
                          }
                          LOBYTE(v250) = 0;
                          v257 = 0;
                          if ((v82 & 1) == 0)
                          {
                            v250 = v80;
                            *(_QWORD *)v251 = v317.__r_.__value_.__r.__words[0];
                            *(_QWORD *)&v251[7] = *(std::string::size_type *)((char *)v317.__r_.__value_.__r.__words + 7);
                            v252 = v85;
                            v317.__r_.__value_.__r.__words[0] = 0;
                            *(std::string::size_type *)((char *)v317.__r_.__value_.__r.__words + 7) = 0;
                            v253 = v84;
                            v254 = v81;
                            *(_QWORD *)v255 = v291.__m_;
                            *(_QWORD *)&v255[7] = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7);
                            v256 = v83;
                            v291.__m_ = 0;
                            *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7) = 0;
                            v257 = 1;
                          }
                          v258 = 1;
                          v259 = 1;
                          v260 = 1;
                          if (v91 && (v79 & 0x80) != 0)
                            operator delete(v77);
LABEL_386:
                          if (v87 && v88)
                          {
                            if (v92 != (void **)v88)
                            {
                              do
                              {
                                if (*((char *)v92 - 1) < 0)
                                  operator delete(*(v92 - 3));
                                v92 -= 3;
                              }
                              while (v92 != (void **)v88);
                              v92 = (void **)v88;
                            }
                            operator delete(v92);
                          }
                          sub_20FD0EFF8((uint64_t)v241, v223, v221, v290, *(unint64_t *)v226);
                          sub_20FD0E4BC((uint64_t)&v291, (uint64_t)v241, *(_QWORD *)(v224 + 48), *(std::mutex **)(v224 + 328), *(_QWORD *)(v224 + 336));
                          v93 = v294;
                          v94 = v295;
                          v238 = &off_24CA1F288;
                          v239 = v294;
                          v240 = v295;
                          if (v295)
                          {
                            p_shared_owners = (unint64_t *)&v295->__shared_owners_;
                            do
                              v96 = __ldxr(p_shared_owners);
                            while (__stxr(v96 + 1, p_shared_owners));
                          }
                          __dst[0].__m_ = (std::unique_lock<std::mutex>::mutex_type *)"response_id";
                          *(_QWORD *)&__dst[0].__owns_ = 11;
                          __dst[1] = *(std::unique_lock<std::mutex> *)&__p.__r_.__value_.__l.__data_;
                          __dst[2].__m_ = (std::unique_lock<std::mutex>::mutex_type *)"export_diagnostics_response";
                          *(_QWORD *)&__dst[2].__owns_ = 27;
                          LOBYTE(v297) = 0;
                          v316 = 0;
                          if (v260)
                          {
                            *(_QWORD *)&v297 = "run_results";
                            *((_QWORD *)&v297 + 1) = 11;
                            sub_20FCF387C((uint64_t)&v298, (uint64_t)&__p.__r_.__value_.__r.__words[2]);
                            v316 = 1;
                          }
                          v282 = xmmword_2103BE4C0;
                          v283 = 1;
                          v317.__r_.__value_.__l.__size_ = 0x300000000;
                          v97 = operator new();
                          *(_BYTE *)v97 = 0;
                          *(_QWORD *)(v97 + 8) = 0;
                          v318 = (void (*)(uint64_t *))sub_210204328;
                          v319 = 1;
                          v325 = 0;
                          v326 = 0;
                          v327 = 0;
                          v322 = 0;
                          v323 = 0;
                          v321 = 0;
                          LOBYTE(v324.__m_) = 0;
                          v320 = (unsigned __int8 *)v97;
                          v317.__r_.__value_.__r.__words[2] = v97;
                          v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06790;
                          sub_2101FA8A4((uint64_t)&v317);
                          *(_QWORD *)object = "version";
                          *(_QWORD *)&object[8] = 7;
                          *(_DWORD *)&object[16] = 1;
                          if (*v320 <= 1u)
                          {
                            v324.__m_ = (std::unique_lock<std::mutex>::mutex_type *)"version";
                            *(_QWORD *)&v324.__owns_ = 7;
                            if (!v325)
                              v325 = 1;
                          }
                          sub_2101FB154((uint64_t)&v317, &object[16]);
                          sub_2101FA8A4((uint64_t)&v317);
                          if (*v320 > 1u || (v324 = __dst[0], v325))
                          {
                            if (__dst[1].__owns_)
                              goto LABEL_413;
LABEL_421:
                            object[0] = 0;
                            *(_QWORD *)&object[8] = 0;
                            v99 = (unsigned __int8 *)sub_2101FA67C((uint64_t)&v317);
LABEL_422:
                            v100 = *v99;
                            *v99 = object[0];
                            object[0] = v100;
                            v101 = *((_QWORD *)v99 + 1);
                            *((_QWORD *)v99 + 1) = *(_QWORD *)&object[8];
                            *(_QWORD *)&object[8] = v101;
                            sub_20EB911C0((uint64_t *)&object[8], v100);
                          }
                          else
                          {
                            v325 = 1;
                            if (!__dst[1].__owns_)
                              goto LABEL_421;
LABEL_413:
                            if (!v325
                              || *(_QWORD *)&v324.__owns_ != 7
                              || (LODWORD(v324.__m_->__m_.__sig) == *(_DWORD *)"version"
                                ? (v98 = *(_DWORD *)((char *)&v324.__m_->__m_.__sig + 3) == *(_DWORD *)"sion")
                                : (v98 = 0),
                                  !v98))
                            {
                              object[0] = 6;
                              *(_QWORD *)&object[8] = __dst[1].__m_;
                              v99 = (unsigned __int8 *)sub_2101FA67C((uint64_t)&v317);
                              goto LABEL_422;
                            }
                          }
                          if (*v320 > 1u || (v324 = __dst[2], v325))
                          {
                            if (v316)
                            {
LABEL_426:
                              v102 = LODWORD(v317.__r_.__value_.__r.__words[1]);
                              sub_2101FA8A4((uint64_t)&v317);
                              *(_QWORD *)object = "version";
                              *(_QWORD *)&object[8] = 7;
                              *(_DWORD *)&object[16] = 1;
                              if (*v320 <= 1u)
                              {
                                v324.__m_ = (std::unique_lock<std::mutex>::mutex_type *)"version";
                                *(_QWORD *)&v324.__owns_ = 7;
                                if (!v325)
                                  v325 = 1;
                              }
                              sub_2101FB154((uint64_t)&v317, &object[16]);
                              if (v102 == 2)
                              {
                                *(_QWORD *)object = "min_version";
                                *(_QWORD *)&object[8] = 11;
                                *(_DWORD *)&object[16] = 1;
                                if (*v320 <= 1u)
                                {
                                  v324.__m_ = (std::unique_lock<std::mutex>::mutex_type *)"min_version";
                                  *(_QWORD *)&v324.__owns_ = 11;
                                  if (!v325)
                                    v325 = 1;
                                }
                                sub_2101FB154((uint64_t)&v317, &object[16]);
                              }
                              *(_OWORD *)object = v297;
                              *(_OWORD *)&object[16] = v298;
                              object[32] = 0;
                              BYTE8(v329) = 0;
                              if (BYTE8(v300))
                              {
                                *(_QWORD *)&object[32] = 0;
                                *(_QWORD *)&object[40] = 0;
                                *(_QWORD *)&v329 = 0;
                                sub_20E8ADB20(&object[32], (__int128 *)v299, *((__int128 **)&v299 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v299 + 1) - v299) >> 3));
                                BYTE8(v329) = 1;
                              }
                              v330 = v301;
                              sub_20FCF559C(&v331, (uint64_t)v302);
                              if (*v320 <= 1u)
                              {
                                v324 = *(std::unique_lock<std::mutex> *)object;
                                if (!v325)
                                  v325 = 1;
                              }
                              v103 = v317.__r_.__value_.__r.__words[1];
                              sub_2101FA8A4((uint64_t)&v317);
                              v286 = "version";
                              v287 = 7;
                              v288 = 1;
                              if (*v320 <= 1u)
                              {
                                v324.__m_ = (std::unique_lock<std::mutex>::mutex_type *)"version";
                                *(_QWORD *)&v324.__owns_ = 7;
                                if (!v325)
                                  v325 = 1;
                              }
                              sub_2101FB154((uint64_t)&v317, &v288);
                              if (v103 == 2)
                              {
                                v286 = "min_version";
                                v287 = 11;
                                v288 = 1;
                                if (*v320 <= 1u)
                                {
                                  v324.__m_ = (std::unique_lock<std::mutex>::mutex_type *)"min_version";
                                  *(_QWORD *)&v324.__owns_ = 11;
                                  if (!v325)
                                    v325 = 1;
                                }
                                sub_2101FB154((uint64_t)&v317, &v288);
                              }
                              v286 = &object[16];
                              v287 = (uint64_t)&v330;
                              sub_2101FA8A4((uint64_t)&v317);
                              v289 = &v317;
                              sub_20FD2AF44((uint64_t *)&v286, (uint64_t *)&v289);
                              v104 = v322;
                              v320 = (unsigned __int8 *)*((_QWORD *)v322 - 1);
                              v322 -= 8;
                              if (v325)
                                v325 = 0;
                              v320 = (unsigned __int8 *)*((_QWORD *)v104 - 2);
                              v322 = v104 - 16;
                              if (v346)
                              {
                                if (!v345)
                                  goto LABEL_457;
                                if (!v344)
                                  goto LABEL_454;
                                if ((v343 & 0x80000000) == 0)
                                {
                                  if ((v341 & 0x80000000) == 0)
                                    goto LABEL_454;
LABEL_659:
                                  operator delete(v340);
                                  if (!v339)
                                    goto LABEL_457;
LABEL_455:
                                  if (v338 < 0)
                                    operator delete(v337);
                                  goto LABEL_457;
                                }
                                operator delete(v342);
                                if (v341 < 0)
                                  goto LABEL_659;
LABEL_454:
                                if (v339)
                                  goto LABEL_455;
LABEL_457:
                                if (SHIBYTE(v333) < 0)
                                  operator delete((void *)v332);
                              }
                              if (BYTE8(v329))
                              {
                                v105 = *(_QWORD *)&object[32];
                                if (*(_QWORD *)&object[32])
                                {
                                  v106 = *(_QWORD *)&object[40];
                                  v107 = *(void **)&object[32];
                                  if (*(_QWORD *)&object[40] != *(_QWORD *)&object[32])
                                  {
                                    do
                                    {
                                      if (*(char *)(v106 - 1) < 0)
                                        operator delete(*(void **)(v106 - 24));
                                      v106 -= 24;
                                    }
                                    while (v106 != v105);
                                    v107 = *(void **)&object[32];
                                  }
                                  *(_QWORD *)&object[40] = v105;
                                  operator delete(v107);
                                }
                              }
                              v112 = v322;
                              v111 = v322 - 8;
                              v320 = (unsigned __int8 *)*((_QWORD *)v322 - 1);
                              v322 -= 8;
                              if (v325)
                                v325 = 0;
                              v320 = (unsigned __int8 *)*((_QWORD *)v112 - 2);
                              v322 = v112 - 16;
LABEL_474:
                              v320 = (unsigned __int8 *)*((_QWORD *)v111 - 2);
                              v322 = v111 - 16;
                              sub_2101F7620((unsigned __int8 *)v317.__r_.__value_.__r.__words[2], (uint64_t)&v282, v284);
                              v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA1DB50;
                              if (v321)
                              {
                                v322 = (char *)v321;
                                operator delete(v321);
                              }
                              v113 = (uint64_t *)v317.__r_.__value_.__r.__words[2];
                              v317.__r_.__value_.__r.__words[2] = 0;
                              if (v113)
                                v318(v113);
                              v114 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
                              if ((v285 & 0x80u) == 0)
                                v115 = v284;
                              else
                                v115 = (void **)v284[0];
                              if ((v285 & 0x80u) == 0)
                                v116 = v285;
                              else
                                v116 = (uint64_t)v284[1];
                              sub_20E86A980(v114, (uint64_t)v115, v116);
                              if ((char)v285 < 0)
                              {
                                operator delete(v284[0]);
                                if (v316)
                                  goto LABEL_488;
                              }
                              else
                              {
                                if (!v316)
                                  goto LABEL_507;
LABEL_488:
                                if (v315)
                                {
                                  if (!v314)
                                    goto LABEL_496;
                                  if (!v313)
                                    goto LABEL_493;
                                  if ((v312 & 0x80000000) == 0)
                                  {
                                    if ((v310 & 0x80000000) == 0)
                                      goto LABEL_493;
LABEL_662:
                                    operator delete(v309);
                                    if (!v308)
                                      goto LABEL_496;
LABEL_494:
                                    if (v307 < 0)
                                      operator delete(v306);
                                    goto LABEL_496;
                                  }
                                  operator delete(v311);
                                  if (v310 < 0)
                                    goto LABEL_662;
LABEL_493:
                                  if (v308)
                                    goto LABEL_494;
LABEL_496:
                                  if (v305 < 0)
                                    operator delete(v304);
                                }
                                if (BYTE8(v300))
                                {
                                  v117 = v299;
                                  if ((_QWORD)v299)
                                  {
                                    v118 = *((_QWORD *)&v299 + 1);
                                    v119 = (void *)v299;
                                    if (*((_QWORD *)&v299 + 1) != (_QWORD)v299)
                                    {
                                      do
                                      {
                                        if (*(char *)(v118 - 1) < 0)
                                          operator delete(*(void **)(v118 - 24));
                                        v118 -= 24;
                                      }
                                      while (v118 != v117);
                                      v119 = (void *)v299;
                                    }
                                    *((_QWORD *)&v299 + 1) = v117;
                                    operator delete(v119);
                                  }
                                }
                              }
                              if (!v94)
                                goto LABEL_511;
LABEL_507:
                              v120 = (unint64_t *)&v94->__shared_owners_;
                              do
                                v121 = __ldaxr(v120);
                              while (__stlxr(v121 - 1, v120));
                              if (!v121)
                              {
                                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                                std::__shared_weak_count::__release_weak(v94);
                                v122 = v295;
                                if (v295)
                                {
LABEL_512:
                                  v123 = (unint64_t *)&v122->__shared_owners_;
                                  do
                                    v124 = __ldaxr(v123);
                                  while (__stlxr(v124 - 1, v123));
                                  if (!v124)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                                    std::__shared_weak_count::__release_weak(v122);
                                  }
                                }
                              }
                              else
                              {
LABEL_511:
                                v122 = v295;
                                if (v295)
                                  goto LABEL_512;
                              }
                              sub_20FD0E1D8((uint64_t)&v291);
                              if (v242 < 0)
                              {
                                operator delete(v241[0]);
                                if (v260)
                                  goto LABEL_521;
                              }
                              else
                              {
                                if (!v260)
                                  goto LABEL_538;
LABEL_521:
                                if (!v259 || !v258)
                                  goto LABEL_529;
                                if (!v257)
                                  goto LABEL_526;
                                if ((v256 & 0x80000000) == 0)
                                {
                                  if ((v252 & 0x80000000) == 0)
                                    goto LABEL_526;
LABEL_656:
                                  operator delete(v250);
                                  if (!v249)
                                    goto LABEL_529;
LABEL_527:
                                  if (SHIBYTE(v248) < 0)
                                    operator delete(v247);
                                  goto LABEL_529;
                                }
                                operator delete(v254);
                                if (v252 < 0)
                                  goto LABEL_656;
LABEL_526:
                                if (v249)
                                  goto LABEL_527;
LABEL_529:
                                if ((_BYTE)v245)
                                {
                                  v125 = __p.__r_.__value_.__r.__words[2];
                                  if (__p.__r_.__value_.__r.__words[2])
                                  {
                                    v126 = v244;
                                    v127 = (void *)__p.__r_.__value_.__r.__words[2];
                                    if ((_QWORD)v244 != __p.__r_.__value_.__r.__words[2])
                                    {
                                      do
                                      {
                                        if (*(char *)(v126 - 1) < 0)
                                          operator delete(*(void **)(v126 - 24));
                                        v126 -= 24;
                                      }
                                      while (v126 != v125);
                                      v127 = (void *)__p.__r_.__value_.__r.__words[2];
                                    }
                                    *(_QWORD *)&v244 = v125;
                                    operator delete(v127);
                                  }
                                }
                              }
LABEL_538:
                              if (!v272 || !v271)
                                goto LABEL_546;
                              if (!v270)
                                goto LABEL_543;
                              if ((SHIBYTE(v269) & 0x80000000) == 0)
                              {
                                if ((SHIBYTE(v266[2]) & 0x80000000) == 0)
                                  goto LABEL_543;
LABEL_580:
                                operator delete(v266[0]);
                                if (!v265[24])
                                  goto LABEL_546;
LABEL_544:
                                if ((v265[23] & 0x80000000) != 0)
                                  operator delete(*(void **)v265);
                                goto LABEL_546;
                              }
                              operator delete(v268);
                              if (SHIBYTE(v266[2]) < 0)
                                goto LABEL_580;
LABEL_543:
                              if (v265[24])
                                goto LABEL_544;
LABEL_546:
                              if (__src[24])
                              {
                                v128 = *(_QWORD *)__src;
                                if (*(_QWORD *)__src)
                                {
                                  v129 = *(_QWORD *)&__src[8];
                                  v130 = *(void **)__src;
                                  if (*(_QWORD *)&__src[8] != *(_QWORD *)__src)
                                  {
                                    do
                                    {
                                      if (*(char *)(v129 - 1) < 0)
                                        operator delete(*(void **)(v129 - 24));
                                      v129 -= 24;
                                    }
                                    while (v129 != v128);
                                    v130 = *(void **)__src;
                                  }
                                  *(_QWORD *)&__src[8] = v128;
                                  operator delete(v130);
                                }
                              }
                              if (v281 && v280 && SHIBYTE(v279) < 0)
                                operator delete((void *)v278);
LABEL_559:
                              if (v235)
                              {
LABEL_560:
                                v66 = v234;
LABEL_561:
                                if (!v66)
                                  goto LABEL_731;
                                if (!v233)
                                  goto LABEL_731;
                                v131 = (void **)&v231;
                                if ((SHIBYTE(v232) & 0x80000000) == 0)
                                  goto LABEL_731;
LABEL_730:
                                operator delete(*v131);
                                goto LABEL_731;
                              }
LABEL_724:
                              if (!(_BYTE)v232)
                                goto LABEL_731;
                              if (BYTE8(v231))
                              {
                                if (SBYTE7(v231) < 0)
                                {
                                  operator delete((void *)v230);
                                  if ((SBYTE7(v229) & 0x80000000) == 0)
                                    goto LABEL_728;
                                }
                                else if ((SBYTE7(v229) & 0x80000000) == 0)
                                {
                                  goto LABEL_728;
                                }
                                operator delete((void *)v228);
                                if (!BYTE8(v227))
                                  goto LABEL_731;
                              }
                              else
                              {
LABEL_728:
                                if (!BYTE8(v227))
                                  goto LABEL_731;
                              }
                              v131 = (void **)&v226[16];
                              if ((SBYTE7(v227) & 0x80000000) == 0)
                                goto LABEL_731;
                              goto LABEL_730;
                            }
                          }
                          else
                          {
                            v325 = 1;
                            if (v316)
                              goto LABEL_426;
                          }
                          object[0] = 0;
                          *(_QWORD *)&object[8] = 0;
                          v108 = (unsigned __int8 *)sub_2101FA67C((uint64_t)&v317);
                          v109 = *v108;
                          *v108 = object[0];
                          object[0] = v109;
                          v110 = *((_QWORD *)v108 + 1);
                          *((_QWORD *)v108 + 1) = *(_QWORD *)&object[8];
                          *(_QWORD *)&object[8] = v110;
                          sub_20EB911C0((uint64_t *)&object[8], v109);
                          v111 = v322;
                          v320 = (unsigned __int8 *)*((_QWORD *)v322 - 1);
                          v322 -= 8;
                          if (v325)
                            v325 = 0;
                          goto LABEL_474;
                        }
LABEL_382:
                        v92 = 0;
                        __p.__r_.__value_.__r.__words[2] = v88;
                        v244 = v86;
                        LOBYTE(v245) = 1;
                        v88 = 0;
                        LOBYTE(v246) = 0;
                        v259 = 0;
                        if (!v89)
                          goto LABEL_385;
                        goto LABEL_383;
                      }
                      v88 = 0;
                      v89 = v272;
                      if (!v272)
                        goto LABEL_376;
LABEL_369:
                      v90 = v264;
                      v79 = (char *)&v264 + 1;
                      __dst[0].__m_ = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v264 + 1);
                      *(std::unique_lock<std::mutex>::mutex_type **)((char *)&__dst[0].__m_ + 7) = (std::unique_lock<std::mutex>::mutex_type *)*((_QWORD *)&v264 + 1);
                      v91 = v271;
                      if (!v271)
                      {
                        v77 = 0;
                        v78 = 1;
                        __p.__r_.__value_.__s.__data_[16] = 0;
                        LOBYTE(v245) = 0;
                        if (!__src[24])
                          goto LABEL_373;
                        goto LABEL_382;
                      }
                      v91 = v265[24];
                      if (v265[24])
                      {
                        v77 = *(void **)v265;
                        *(_QWORD *)object = *(_QWORD *)&v265[8];
                        *(_QWORD *)&object[7] = *(_QWORD *)&v265[15];
                        LOBYTE(v79) = v265[23];
                        memset(v265, 0, 24);
                        v91 = 1;
                        if (v270)
                          goto LABEL_372;
                      }
                      else
                      {
                        v77 = 0;
                        if (v270)
                        {
LABEL_372:
                          v78 = 0;
                          v82 = 0;
                          v80 = v266[0];
                          v317.__r_.__value_.__l.__data_ = (std::string::pointer)v266[1];
                          *(std::string::size_type *)((char *)v317.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v266[1] + 7);
                          v85 = HIBYTE(v266[2]);
                          memset(v266, 0, sizeof(v266));
                          v84 = v267;
                          v81 = v268;
                          v291.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v269;
                          *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7) = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v269 + 7);
                          v83 = HIBYTE(v269);
                          v269 = 0uLL;
                          v268 = 0;
                          __p.__r_.__value_.__s.__data_[16] = 0;
                          LOBYTE(v245) = 0;
                          if (!__src[24])
                            goto LABEL_373;
                          goto LABEL_382;
                        }
                      }
                      v80 = 0;
                      v78 = 0;
                      v82 = 1;
                      __p.__r_.__value_.__s.__data_[16] = 0;
                      LOBYTE(v245) = 0;
                      if (!__src[24])
                        goto LABEL_373;
                      goto LABEL_382;
                    }
                    sub_20FD18B84(&v261);
                    if (**(int **)(v261.__pn_.__r_.__value_.__r.__words[0] + 56) > 5)
                      goto LABEL_559;
                    v67 = *(unsigned __int8 *)(v261.__pn_.__r_.__value_.__r.__words[0] + 72);
                    v68 = sub_20E8C31DC((uint64_t)v261.__pn_.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
                    v69 = v68;
                    if (!v67 && !v68)
                      goto LABEL_559;
                    sub_20E863438((uint64_t)__dst);
                    if (v235)
                    {
                      exception = __cxa_allocate_exception(8uLL);
                      *exception = &off_24C9B4620;
                      __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
                    }
                    sub_2102341F0((uint64_t)v226, (std::string *)object);
                    if (object[23] >= 0)
                      v70 = object;
                    else
                      v70 = *(_BYTE **)object;
                    if (object[23] >= 0)
                      v71 = object[23];
                    else
                      v71 = *(_QWORD *)&object[8];
                    sub_20E86A980(&__dst[1].__m_, (uint64_t)v70, v71);
                    if ((object[23] & 0x80000000) == 0)
                    {
                      v72 = BYTE8(v301);
                      v219 = v67;
                      if ((BYTE8(v301) & 0x10) == 0)
                        goto LABEL_362;
LABEL_577:
                      v132 = v301;
                      p_owns = (BOOL *)&v298;
                      if ((unint64_t)v301 < *((_QWORD *)&v298 + 1))
                      {
                        *(_QWORD *)&v301 = *((_QWORD *)&v298 + 1);
                        v132 = *((_QWORD *)&v298 + 1);
                        p_owns = (BOOL *)&v298;
                      }
LABEL_583:
                      v134 = *(const void **)p_owns;
                      v73 = v132 - *(_QWORD *)p_owns;
                      if (v73 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v73 >= 0x17)
                      {
                        v135 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v73 | 7) != 0x17)
                          v135 = v73 | 7;
                        v136 = v135 + 1;
                        v74 = (std::string *)operator new(v135 + 1);
                        v317.__r_.__value_.__r.__words[2] = v136 | 0x8000000000000000;
                        v317.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
                        v317.__r_.__value_.__l.__size_ = v73;
                      }
                      else
                      {
                        *((_BYTE *)&v317.__r_.__value_.__s + 23) = v132 - *p_owns;
                        v74 = &v317;
                        if (!v73)
                          goto LABEL_591;
                      }
                      memmove(v74, v134, v73);
                      goto LABEL_591;
                    }
                    operator delete(*(void **)object);
                    v72 = BYTE8(v301);
                    v219 = v67;
                    if ((BYTE8(v301) & 0x10) != 0)
                      goto LABEL_577;
LABEL_362:
                    if ((v72 & 8) != 0)
                    {
                      v132 = *((_QWORD *)&v297 + 1);
                      p_owns = &__dst[2].__owns_;
                      goto LABEL_583;
                    }
                    v73 = 0;
                    *((_BYTE *)&v317.__r_.__value_.__s + 23) = 0;
                    v74 = &v317;
LABEL_591:
                    v74->__r_.__value_.__s.__data_[v73] = 0;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
                    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                    LODWORD(v244) = 5;
                    *((_QWORD *)&v244 + 1) = "unknown file";
                    v245 = 803;
                    *(_QWORD *)&v246 = "unknown function";
                    *((_QWORD *)&v246 + 1) = 0;
                    v247 = 0;
                    if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v137 = &v317;
                    else
                      v137 = (std::string *)v317.__r_.__value_.__r.__words[0];
                    v138 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
                    v139 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
                    v213 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
                    v214 = v139;
                    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
                    {
                      v139 = *(const char **)(v138 + 16);
                      v140 = *(_QWORD *)(v138 + 24);
                      v142 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v142 & 1) == 0)
                      {
LABEL_748:
                        if (__cxa_guard_acquire(&qword_254A4A510))
                        {
                          sub_20E9E46F8((uint64_t)__src);
                          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                          if (__src[24] && (__src[23] & 0x80000000) != 0)
                            operator delete(*(void **)__src);
                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A4A510);
                        }
                      }
                    }
                    else
                    {
                      v140 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
                      v141 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v141 & 1) == 0)
                        goto LABEL_748;
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v143 = byte_254A4A4F8;
                    else
                      v143 = *(const char **)byte_254A4A4F8;
                    if (byte_254A4A4F8[23] >= 0)
                      v144 = byte_254A4A4F8[23];
                    else
                      v144 = *(_QWORD *)&byte_254A4A4F8[8];
                    *(_QWORD *)object = os_log_create(v143, v139);
                    if (v144 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v144 >= 0x17)
                    {
                      v146 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v144 | 7) != 0x17)
                        v146 = v144 | 7;
                      v147 = v146 + 1;
                      v145 = operator new(v146 + 1);
                      *(_QWORD *)&object[24] = v147 | 0x8000000000000000;
                      *(_QWORD *)&object[8] = v145;
                      *(_QWORD *)&object[16] = v144;
                    }
                    else
                    {
                      object[31] = v144;
                      v145 = &object[8];
                      if (!v144)
                      {
LABEL_612:
                        v145[v144] = 0;
                        object[32] = 1;
                        if (v140 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        a1 = v224;
                        if (v140 >= 0x17)
                        {
                          v150 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v140 | 7) != 0x17)
                            v150 = v140 | 7;
                          v151 = v150 + 1;
                          v148 = operator new(v150 + 1);
                          *((_QWORD *)&v329 + 1) = v151 | 0x8000000000000000;
                          *(_QWORD *)&object[40] = v148;
                          *(_QWORD *)&v329 = v140;
                        }
                        else
                        {
                          HIBYTE(v329) = v140;
                          v148 = &object[40];
                          if (!v140)
                          {
                            object[40] = 0;
                            LOBYTE(v330) = 1;
                            v149 = *(NSObject **)object;
                            if ((SHIBYTE(v329) & 0x80000000) == 0)
                              goto LABEL_616;
LABEL_622:
                            operator delete(*(void **)&object[40]);
                            if (object[32])
                              goto LABEL_623;
                            goto LABEL_625;
                          }
                        }
                        memmove(v148, v139, v140);
                        v148[v140] = 0;
                        LOBYTE(v330) = 1;
                        v149 = *(NSObject **)object;
                        if (SHIBYTE(v329) < 0)
                          goto LABEL_622;
LABEL_616:
                        if (object[32])
                        {
LABEL_623:
                          if ((object[31] & 0x80000000) != 0)
                            operator delete(*(void **)&object[8]);
                        }
LABEL_625:
                        if (*(_QWORD *)object)
                          os_release(*(void **)object);
                        if (v69 && *(_QWORD *)(v69 + 24))
                        {
                          v152 = _os_log_pack_size();
                          v153 = operator new(v152, (std::align_val_t)8uLL);
                          v154 = (_QWORD *)operator new();
                          *v154 = &off_24C9ABB80;
                          v154[1] = 0;
                          v154[2] = 0;
                          v154[3] = v153;
                          *(_QWORD *)__src = v153;
                          *(_QWORD *)&__src[8] = v153;
                          *(_QWORD *)&__src[16] = v154;
                          *(_QWORD *)&__src[24] = 0;
                          *(_QWORD *)&v264 = 0;
                          v155 = strlen((const char *)v137);
                          if (v155 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v156 = v155;
                          if (v155 >= 0x17)
                          {
                            v159 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v155 | 7) != 0x17)
                              v159 = v155 | 7;
                            v160 = v159 + 1;
                            v157 = operator new(v159 + 1);
                            v273.__pn_.__r_.__value_.__r.__words[2] = v160 | 0x8000000000000000;
                            v273.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
                            v273.__pn_.__r_.__value_.__l.__size_ = v156;
                          }
                          else
                          {
                            *((_BYTE *)&v273.__pn_.__r_.__value_.__s + 23) = v155;
                            v157 = &v273;
                            if (!v155)
                              goto LABEL_640;
                          }
                          memcpy(v157, v137, v156);
LABEL_640:
                          *((_BYTE *)v157 + v156) = 0;
                          v291.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v273.__pn_.__r_.__value_.__l.__size_;
                          v161 = v273.__pn_.__r_.__value_.__r.__words[0];
                          *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7) = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v273.__pn_.__r_.__value_.__r.__words[1] + 7);
                          v162 = HIBYTE(v273.__pn_.__r_.__value_.__r.__words[2]);
                          v163 = operator new(0x38uLL);
                          v163[1] = 0;
                          v163[2] = 0;
                          v163[3] = off_24C9ABC20;
                          *v163 = &off_24C9ABBD0;
                          v164 = v291.__m_;
                          v163[4] = v161;
                          v163[5] = v164;
                          *(_QWORD *)((char *)v163 + 47) = *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7);
                          *((_BYTE *)v163 + 55) = v162;
                          v291.__m_ = 0;
                          *(std::unique_lock<std::mutex>::mutex_type **)((char *)&v291.__m_ + 7) = 0;
                          v165 = (std::__shared_weak_count *)v264;
                          *(_QWORD *)&__src[24] = v163 + 3;
                          *(_QWORD *)&v264 = v163;
                          if (v165)
                          {
                            v166 = (unint64_t *)&v165->__shared_owners_;
                            do
                              v167 = __ldaxr(v166);
                            while (__stlxr(v167 - 1, v166));
                            if (!v167)
                            {
                              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                              std::__shared_weak_count::__release_weak(v165);
                            }
                          }
                          *(_OWORD *)object = *(_OWORD *)__src;
                          v168 = *(_QWORD *)&__src[24];
                          *(_QWORD *)&object[16] = *(_QWORD *)&__src[16];
                          if (*(_QWORD *)&__src[16])
                          {
                            v169 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                            do
                              v170 = __ldxr(v169);
                            while (__stxr(v170 + 1, v169));
                          }
                          v171 = (std::__shared_weak_count *)v264;
                          *(_QWORD *)&object[24] = v168;
                          *(_QWORD *)&object[32] = v264;
                          if ((_QWORD)v264)
                          {
                            v172 = (unint64_t *)(v264 + 8);
                            do
                              v173 = __ldxr(v172);
                            while (__stxr(v173 + 1, v172));
                            *(_QWORD *)&object[40] = v168;
                            do
                              v174 = __ldaxr(v172);
                            while (__stlxr(v174 - 1, v172));
                            if (!v174)
                            {
                              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                              std::__shared_weak_count::__release_weak(v171);
                            }
                          }
                          else
                          {
                            *(_QWORD *)&object[40] = v168;
                          }
                          v175 = *(std::__shared_weak_count **)&__src[16];
                          if (*(_QWORD *)&__src[16])
                          {
                            v176 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                            do
                              v177 = __ldaxr(v176);
                            while (__stlxr(v177 - 1, v176));
                            if (!v177)
                            {
                              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                              std::__shared_weak_count::__release_weak(v175);
                            }
                          }
                          v178 = *(_QWORD *)object;
                          if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                            v179 = *(_QWORD *)&object[40] + 8;
                          else
                            v179 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                          v180 = _os_log_pack_fill();
                          *(_DWORD *)v180 = 136315138;
                          *(_QWORD *)(v180 + 4) = v179;
                          v181 = operator new();
                          v182 = *(unsigned __int8 *)(v213 + 39);
                          v183 = *(const char **)(v213 + 16);
                          v184 = *(_QWORD *)(v213 + 24);
                          v185 = *(_OWORD *)&object[24];
                          *(_OWORD *)(v181 + 8) = *(_OWORD *)&object[8];
                          if ((v182 & 0x80u) != 0)
                            v182 = v184;
                          else
                            v183 = v214;
                          *(_QWORD *)v181 = v178;
                          *(_QWORD *)&object[8] = 0;
                          *(_QWORD *)&object[16] = 0;
                          *(_OWORD *)(v181 + 24) = v185;
                          *(_QWORD *)&object[24] = 0;
                          *(_QWORD *)&object[32] = 0;
                          *(_QWORD *)(v181 + 40) = v183;
                          *(_QWORD *)(v181 + 48) = v182;
                          *(_BYTE *)(v181 + 56) = 16;
                          v273.__pn_.__r_.__value_.__r.__words[0] = 0;
                          *(_QWORD *)__src = v181;
                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), __src);
                          v186 = *(_QWORD *)__src;
                          *(_QWORD *)__src = 0;
                          if (v186)
                          {
                            v187 = *(std::__shared_weak_count **)(v186 + 32);
                            if (v187)
                            {
                              v188 = (unint64_t *)&v187->__shared_owners_;
                              do
                                v189 = __ldaxr(v188);
                              while (__stlxr(v189 - 1, v188));
                              if (!v189)
                              {
                                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                                std::__shared_weak_count::__release_weak(v187);
                              }
                            }
                            v190 = *(std::__shared_weak_count **)(v186 + 16);
                            if (v190)
                            {
                              v191 = (unint64_t *)&v190->__shared_owners_;
                              do
                                v192 = __ldaxr(v191);
                              while (__stlxr(v192 - 1, v191));
                              if (!v192)
                              {
                                ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                                std::__shared_weak_count::__release_weak(v190);
                              }
                            }
                            MEMORY[0x212BC6398](v186, 0x10F0C40B62ED6C6);
                            v193 = v273.__pn_.__r_.__value_.__r.__words[0];
                            v273.__pn_.__r_.__value_.__r.__words[0] = 0;
                            if (v193)
                            {
                              v194 = *(std::__shared_weak_count **)(v193 + 32);
                              if (v194)
                              {
                                v195 = (unint64_t *)&v194->__shared_owners_;
                                do
                                  v196 = __ldaxr(v195);
                                while (__stlxr(v196 - 1, v195));
                                if (!v196)
                                {
                                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                                  std::__shared_weak_count::__release_weak(v194);
                                }
                              }
                              v197 = *(std::__shared_weak_count **)(v193 + 16);
                              if (v197)
                              {
                                v198 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v198);
                                while (__stlxr(v199 - 1, v198));
                                if (!v199)
                                {
                                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                  std::__shared_weak_count::__release_weak(v197);
                                }
                              }
                              MEMORY[0x212BC6398](v193, 0x10F0C40B62ED6C6);
                            }
                          }
                          v200 = *(std::__shared_weak_count **)&object[32];
                          if (*(_QWORD *)&object[32])
                          {
                            v201 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                            do
                              v202 = __ldaxr(v201);
                            while (__stlxr(v202 - 1, v201));
                            if (!v202)
                            {
                              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                              std::__shared_weak_count::__release_weak(v200);
                              v203 = *(std::__shared_weak_count **)&object[16];
                              if (*(_QWORD *)&object[16])
                                goto LABEL_707;
                              goto LABEL_710;
                            }
                          }
                          v203 = *(std::__shared_weak_count **)&object[16];
                          if (!*(_QWORD *)&object[16])
                            goto LABEL_710;
LABEL_707:
                          v204 = (unint64_t *)&v203->__shared_owners_;
                          do
                            v205 = __ldaxr(v204);
                          while (__stlxr(v205 - 1, v204));
                          if (v205)
                          {
LABEL_710:
                            if (v219)
                              goto LABEL_711;
LABEL_715:
                            sub_20E863570((uint64_t)&__p);
                            v207 = (std::__shared_weak_count *)v247;
                            if (!v247)
                              goto LABEL_719;
                            v208 = (unint64_t *)((char *)v247 + 8);
                            do
                              v209 = __ldaxr(v208);
                            while (__stlxr(v209 - 1, v208));
                            if (!v209)
                            {
                              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                              std::__shared_weak_count::__release_weak(v207);
                              if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
LABEL_720:
                                operator delete(v317.__r_.__value_.__l.__data_);
                            }
                            else
                            {
LABEL_719:
                              if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_720;
                            }
                            __dst[0].__m_ = v218;
                            *(std::unique_lock<std::mutex>::mutex_type **)((char *)&__dst[0].__m_
                                                                         + *(_QWORD *)&v218[-1].__m_.__opaque[32]) = v217;
                            __dst[1].__m_ = v216;
                            *(_QWORD *)&__dst[1].__owns_ = v215;
                            if (SHIBYTE(v300) < 0)
                              operator delete(*((void **)&v299 + 1));
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x212BC6290](v302);
                            if (v235)
                              goto LABEL_560;
                            goto LABEL_724;
                          }
                          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                          std::__shared_weak_count::__release_weak(v203);
                          if (!v219)
                            goto LABEL_715;
                        }
                        else
                        {
                          os_log_type_enabled(v149, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)object = 136315138;
                          *(_QWORD *)&object[4] = v137;
                          v158 = (void *)_os_log_send_and_compose_impl();
                          if (!v158)
                            goto LABEL_710;
                          free(v158);
                          if (!v219)
                            goto LABEL_715;
                        }
LABEL_711:
                        if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v206 = &v317;
                        else
                          v206 = (std::string *)v317.__r_.__value_.__r.__words[0];
                        sub_20E8C003C((uint64_t)&__p, "%s", (const char *)v206);
                        sub_20E863570((uint64_t)&__p);
                        goto LABEL_715;
                      }
                    }
                    memmove(v145, v143, v144);
                    goto LABEL_612;
                  }
LABEL_332:
                  if (!v334)
                    goto LABEL_336;
                  v65 = (void **)&v332;
                  if ((SHIBYTE(v333) & 0x80000000) == 0)
                    goto LABEL_336;
LABEL_334:
                  v62 = *v65;
LABEL_335:
                  operator delete(v62);
                  goto LABEL_336;
                }
                sub_2102341F0((uint64_t)object, &v317);
                sub_20FD20BF4((uint64_t)__src, (uint64_t)&v273, (const char *)&v317);
                if ((__src[23] & 0x80000000) != 0)
                  sub_20E860C04(&__p, *(void **)__src, *(unint64_t *)&__src[8]);
                else
                  __p = *(std::string *)__src;
                LOBYTE(v244) = 1;
                BYTE8(v244) = 0;
                v249 = 0;
                LOBYTE(v250) = 1;
                sub_20FD20A78((uint64_t)__dst, 6u, (__int128 *)&__p);
                *(std::unique_lock<std::mutex> *)v226 = __dst[0];
                v226[16] = 0;
                LOBYTE(v232) = 0;
                if (!(_BYTE)v301)
                {
LABEL_321:
                  v235 = 0;
                  if ((_BYTE)v250)
                    goto LABEL_322;
LABEL_328:
                  if ((__src[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)__src);
                    if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_566;
LABEL_330:
                    if (!v336)
                    {
LABEL_567:
                      if (!(_BYTE)v333)
                        goto LABEL_336;
                      if (BYTE8(v332))
                      {
                        if (SBYTE7(v332) < 0)
                          operator delete((void *)v331);
                        if (SBYTE7(v330) < 0)
                          operator delete((void *)v329);
                      }
                      if (!object[40])
                        goto LABEL_336;
                      v65 = (void **)&object[16];
                      if ((object[39] & 0x80000000) == 0)
                        goto LABEL_336;
                      goto LABEL_334;
                    }
                  }
                  else
                  {
                    if ((SHIBYTE(v317.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_330;
LABEL_566:
                    operator delete(v317.__r_.__value_.__l.__data_);
                    if (!v336)
                      goto LABEL_567;
                  }
                  if (!v335)
                    goto LABEL_336;
                  goto LABEL_332;
                }
LABEL_310:
                BYTE8(v227) = 0;
                if (__dst[2].__owns_)
                {
                  *(std::unique_lock<std::mutex> *)&v226[16] = __dst[1];
                  *(_QWORD *)&v227 = __dst[2].__m_;
                  memset(&__dst[1], 0, 24);
                  BYTE8(v227) = 1;
                }
                LOBYTE(v228) = 0;
                BYTE8(v231) = 0;
                if (BYTE8(v300))
                {
                  v228 = v297;
                  v229 = v298;
                  v230 = v299;
                  *(_QWORD *)&v231 = v300;
                  BYTE8(v231) = 1;
                }
                LOBYTE(v232) = 1;
                v235 = 0;
                if (__dst[2].__owns_ && SHIBYTE(__dst[2].__m_) < 0)
                  operator delete(__dst[1].__m_);
                if (!(_BYTE)v250)
                  goto LABEL_328;
LABEL_322:
                if (v249)
                {
                  if (SHIBYTE(v248) < 0)
                  {
                    operator delete(v247);
                    if ((SBYTE7(v246) & 0x80000000) == 0)
                      goto LABEL_325;
                  }
                  else if ((SBYTE7(v246) & 0x80000000) == 0)
                  {
                    goto LABEL_325;
                  }
                  operator delete(*((void **)&v244 + 1));
                  if (!(_BYTE)v244)
                    goto LABEL_328;
                }
                else
                {
LABEL_325:
                  if (!(_BYTE)v244)
                    goto LABEL_328;
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_328;
              }
              sub_20E860C04(&v291, __dst[0].__m_, *(unint64_t *)&__dst[0].__owns_);
              operator delete(v50);
              v51 = v293;
              v52 = (char)v293;
              if ((v293 & 0x80u) != 0)
                v51 = *(_QWORD *)&v291.__owns_;
              if (v51 == 5)
                goto LABEL_159;
LABEL_142:
              if (v51 != 12)
              {
                if (v52 >= 0)
                  p_sig = &v291;
                else
                  p_sig = &v291.__m_->__m_.__sig;
                goto LABEL_175;
              }
              if (v52 >= 0)
                p_sig = &v291;
              else
                p_sig = &v291.__m_->__m_.__sig;
              if (*(_QWORD *)p_sig != 0x6567617373656D2ELL || *((_DWORD *)p_sig + 2) != 1801675120)
              {
LABEL_175:
                *(_QWORD *)object = "unknown server/client file extension ";
                *(_QWORD *)&object[8] = 37;
                *(_QWORD *)&object[16] = p_sig;
                *(_QWORD *)&object[24] = v51;
                sub_20E8778D4((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  sub_20E860C04(object, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  *(std::string *)object = __p;
                object[24] = 1;
                object[32] = 0;
                BYTE8(v331) = 0;
                LOBYTE(v332) = 1;
                sub_20FD20A78((uint64_t)__dst, 6u, (__int128 *)object);
                *(std::unique_lock<std::mutex> *)v226 = __dst[0];
                v226[16] = 0;
                LOBYTE(v232) = 0;
                if (!(_BYTE)v301)
                {
                  v235 = 0;
                  if ((_BYTE)v332)
                    goto LABEL_189;
                  goto LABEL_195;
                }
                BYTE8(v227) = 0;
                if (__dst[2].__owns_)
                {
                  *(std::unique_lock<std::mutex> *)&v226[16] = __dst[1];
                  *(_QWORD *)&v227 = __dst[2].__m_;
                  memset(&__dst[1], 0, 24);
                  BYTE8(v227) = 1;
                }
                LOBYTE(v228) = 0;
                BYTE8(v231) = 0;
                if (BYTE8(v300))
                {
                  v228 = v297;
                  v229 = v298;
                  v230 = v299;
                  *(_QWORD *)&v231 = v300;
                  BYTE8(v231) = 1;
                }
                LOBYTE(v232) = 1;
                v235 = 0;
                if (__dst[2].__owns_ && SHIBYTE(__dst[2].__m_) < 0)
                  operator delete(__dst[1].__m_);
                if (!(_BYTE)v332)
                  goto LABEL_195;
LABEL_189:
                if (BYTE8(v331))
                {
                  if ((SBYTE7(v331) & 0x80000000) == 0)
                  {
                    if ((SBYTE7(v329) & 0x80000000) == 0)
                      goto LABEL_192;
LABEL_200:
                    operator delete(*(void **)&object[32]);
                    if (!object[24])
                    {
LABEL_195:
                      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_336;
                      v62 = (void *)__p.__r_.__value_.__r.__words[0];
                      goto LABEL_335;
                    }
LABEL_193:
                    if ((object[23] & 0x80000000) != 0)
                      operator delete(*(void **)object);
                    goto LABEL_195;
                  }
                  operator delete((void *)v330);
                  if (SBYTE7(v329) < 0)
                    goto LABEL_200;
                }
LABEL_192:
                if (!object[24])
                  goto LABEL_195;
                goto LABEL_193;
              }
              v261.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
              LOBYTE(__dst[0].__m_) = 0;
              LOBYTE(v304) = 0;
              v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA066D0;
              v317.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
              v317.__r_.__value_.__r.__words[2] = (std::string::size_type)&v261;
              sub_210235BBC((uint64_t)&v317, (uint64_t)&__p);
              if ((_BYTE)v253)
              {
                v336 = v303;
                if (v303)
                {
                  *(_QWORD *)object = __dst[0].__m_;
                  object[8] = 0;
                  v335 = 0;
                  if (v302[0])
                  {
                    *(std::unique_lock<std::mutex> *)&object[8] = *(std::unique_lock<std::mutex> *)&__dst[0].__owns_;
                    *(_QWORD *)&object[24] = *(_QWORD *)&__dst[1].__owns_;
                    *(std::unique_lock<std::mutex> *)&object[32] = __dst[2];
                    v329 = v297;
                    v330 = v298;
                    v331 = v299;
                    LOBYTE(v332) = 0;
                    v334 = 0;
                    v55 = (uint64_t *)&v335;
                    if (BYTE8(v301))
                    {
                      v332 = v300;
                      v333 = v301;
                      v56 = &v300;
                      v57 = &v334;
                      v55 = (uint64_t *)&v335;
                      goto LABEL_235;
                    }
                    goto LABEL_236;
                  }
                }
                else
                {
                  *(std::unique_lock<std::mutex> *)object = __dst[0];
                  object[16] = 0;
                  LOBYTE(v333) = 0;
                  if ((_BYTE)v301)
                  {
                    object[40] = 0;
                    if (__dst[2].__owns_)
                    {
                      *(std::unique_lock<std::mutex> *)&object[16] = __dst[1];
                      *(_QWORD *)&object[32] = __dst[2].__m_;
                      memset(&__dst[1], 0, 24);
                      object[40] = 1;
                    }
                    LOBYTE(v329) = 0;
                    BYTE8(v332) = 0;
                    v55 = &v333;
                    if (BYTE8(v300))
                    {
                      v329 = v297;
                      v330 = v298;
                      *(_QWORD *)&v298 = 0;
                      v297 = 0uLL;
                      v56 = &v299;
                      *(_QWORD *)&v332 = v300;
                      v57 = (char *)&v332 + 8;
                      v55 = &v333;
                      v331 = v299;
LABEL_235:
                      *(_QWORD *)v56 = 0;
                      *((_QWORD *)v56 + 1) = 0;
                      *((_QWORD *)v56 + 2) = 0;
                      *v57 = 1;
                    }
LABEL_236:
                    *(_BYTE *)v55 = 1;
                  }
                }
              }
              else
              {
                *(_OWORD *)__src = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                sub_20E89EFE4(&__src[16], (__int128 *)&__p.__r_.__value_.__r.__words[2]);
                *(_OWORD *)object = *(_OWORD *)__src;
                object[16] = 0;
                LOBYTE(v333) = 0;
                if ((_BYTE)v268)
                {
                  object[40] = 0;
                  if (BYTE8(v264))
                  {
                    *(_OWORD *)&object[16] = *(_OWORD *)&__src[16];
                    *(_QWORD *)&object[32] = v264;
                    *(_QWORD *)&__src[24] = 0;
                    *(_QWORD *)&v264 = 0;
                    *(_QWORD *)&__src[16] = 0;
                    object[40] = 1;
                  }
                  LOBYTE(v329) = 0;
                  BYTE8(v332) = 0;
                  if ((_BYTE)v267)
                  {
                    v329 = *(_OWORD *)v265;
                    v330 = *(_OWORD *)&v265[16];
                    memset(v265, 0, 24);
                    v331 = *(_OWORD *)v266;
                    *(void **)&v332 = v266[2];
                    memset(v266, 0, sizeof(v266));
                    BYTE8(v332) = 1;
                  }
                  LOBYTE(v333) = 1;
                  v336 = 0;
                  if (BYTE8(v264) && SBYTE7(v264) < 0)
                    operator delete(*(void **)&__src[16]);
                }
                else
                {
                  v336 = 0;
                }
                if (!(_BYTE)v253 && v251[8])
                {
                  if (v251[0])
                  {
                    if (SHIBYTE(v250) < 0)
                      operator delete(*((void **)&v248 + 1));
                    if (SHIBYTE(v247) < 0)
                      operator delete((void *)v246);
                  }
                  if ((_BYTE)v245 && SHIBYTE(v244) < 0)
                    operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
              }
              if ((_BYTE)v304)
              {
                if (v303)
                {
                  if (!v302[0])
                    goto LABEL_265;
                  if (!BYTE8(v301))
                    goto LABEL_265;
                  v63 = (std::unique_lock<std::mutex> *)&v300;
                  if ((SBYTE7(v301) & 0x80000000) == 0)
                    goto LABEL_265;
LABEL_264:
                  operator delete(v63->__m_);
                  goto LABEL_265;
                }
                if ((_BYTE)v301)
                {
                  if (BYTE8(v300))
                  {
                    if (SBYTE7(v300) < 0)
                      operator delete((void *)v299);
                    if (SBYTE7(v298) < 0)
                      operator delete((void *)v297);
                  }
                  if (__dst[2].__owns_)
                  {
                    v63 = &__dst[1];
                    if (SHIBYTE(__dst[2].__m_) < 0)
                      goto LABEL_264;
                  }
                }
              }
LABEL_265:
              if (v336)
                goto LABEL_278;
              sub_2102341F0((uint64_t)object, &v317);
              sub_20FD20BF4((uint64_t)__src, (uint64_t)&v273, (const char *)&v317);
              if ((__src[23] & 0x80000000) != 0)
                sub_20E860C04(&__p, *(void **)__src, *(unint64_t *)&__src[8]);
              else
                __p = *(std::string *)__src;
              LOBYTE(v244) = 1;
              BYTE8(v244) = 0;
              v249 = 0;
              LOBYTE(v250) = 1;
              sub_20FD20A78((uint64_t)__dst, 6u, (__int128 *)&__p);
              *(std::unique_lock<std::mutex> *)v226 = __dst[0];
              v226[16] = 0;
              LOBYTE(v232) = 0;
              if (!(_BYTE)v301)
                goto LABEL_321;
              goto LABEL_310;
            }
          }
          memmove(v47, v46.__data_, v46.__size_);
          goto LABEL_138;
        }
      }
      memmove(v20, v19.__data_, v19.__size_);
      goto LABEL_81;
    }
    operator delete(*(void **)v226);
    *(_QWORD *)object = off_24CA1EF00;
    if ((object[39] & 0x80000000) != 0)
      goto LABEL_71;
LABEL_62:
    if (v5)
      goto LABEL_63;
LABEL_72:
    if (v237)
      goto LABEL_73;
LABEL_66:
    __dst[0].__m_ = v220;
    __dst[0].__owns_ = 1;
    std::mutex::lock(v220);
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 100000000;
    while (2)
    {
      v28 = atomic_load((unsigned __int8 *)(a1 + 481));
      if ((v28 & 1) == 0)
      {
        if (v18.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
        {
LABEL_99:
          atomic_load((unsigned __int8 *)(a1 + 481));
          break;
        }
        v29.__d_.__rep_ = v18.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
        if (v29.__d_.__rep_ < 1)
          goto LABEL_86;
        std::chrono::steady_clock::now();
        v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v30.__d_.__rep_)
        {
          v26 = 0;
          goto LABEL_84;
        }
        if (v30.__d_.__rep_ < 1)
        {
          if ((unint64_t)v30.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v26 = 0x8000000000000000;
            goto LABEL_84;
          }
        }
        else if ((unint64_t)v30.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v26 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v29.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_98:
            v27.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_85:
            std::condition_variable::__do_timed_wait(v225, __dst, v27);
            std::chrono::steady_clock::now();
LABEL_86:
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v18.__d_.__rep_)
              goto LABEL_99;
            continue;
          }
LABEL_84:
          v27.__d_.__rep_ = v26 + v29.__d_.__rep_;
          goto LABEL_85;
        }
        v26 = 1000 * v30.__d_.__rep_;
        if (1000 * v30.__d_.__rep_ > (v29.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          goto LABEL_98;
        goto LABEL_84;
      }
      break;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ - v222.__d_.__rep_ >= 500000001)
    {
      sub_20FD1B460(a1);
      v222.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    }
    if (__dst[0].__owns_)
      std::mutex::unlock(__dst[0].__m_);
LABEL_731:
    if (v237 && SHIBYTE(v236.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v236.__pn_.__r_.__value_.__l.__data_);
    do
      v210 = __ldaxr(v3);
    while (__stlxr(v210 + 1, v3));
    v211 = atomic_load((unsigned __int8 *)(a1 + 481));
  }
  while ((v211 & 1) == 0);
}

void sub_20FD1EB64(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x438]) && SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x340]);
  if (SLOBYTE(STACK[0x79F]) < 0)
    operator delete((void *)STACK[0x788]);
  sub_20E863784((uint64_t)&STACK[0x5F0]);
  sub_20FD1F590((uint64_t)&STACK[0x260]);
  if (LOBYTE(STACK[0x308]))
  {
    if (SLOBYTE(STACK[0x307]) < 0)
    {
      operator delete((void *)STACK[0x2F0]);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20FD1F4AC()
{
  sub_20E877A60((uint64_t)&STACK[0x5F0]);
  JUMPOUT(0x20FD1F564);
}

void sub_20FD1F4C8()
{
  if (SLOBYTE(STACK[0x4D7]) < 0)
  {
    operator delete((void *)STACK[0x4C0]);
    if ((SLOBYTE(STACK[0x357]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x357]) & 0x80000000) == 0)
  {
LABEL_3:
    if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x20FD1F564);
LABEL_9:
    JUMPOUT(0x20FD1F560);
  }
  operator delete((void *)STACK[0x340]);
  if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_9;
}

void sub_20FD1F510()
{
  JUMPOUT(0x20FD1F554);
}

uint64_t sub_20FD1F590(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 136))
  {
    if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
    {
      v2 = (void **)(a1 + 96);
LABEL_13:
      operator delete(*v2);
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_10;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_10:
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_11:
  if (*(char *)(a1 + 39) < 0)
  {
    v2 = (void **)(a1 + 16);
    goto LABEL_13;
  }
  return a1;
}

void sub_20FD1F638(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  __int128 v14;
  int v15;
  size_t v16;
  size_t v17;
  char v18;
  __int128 *p_dst;
  void **v20;
  char v21;
  void *v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  const char *v41;
  _QWORD v42[5];
  void *v43[2];
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[2];
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  _QWORD v55[2];
  void *v56[2];
  void *v57;
  char v58;
  unsigned __int8 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  char v66;
  void *__p[2];
  __int128 v68;
  void *v69;
  char v70;
  void *v71;
  void *v72;
  void *v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  std::string v80;
  __int128 __dst;
  __int128 v82;
  uint64_t v83;
  unsigned __int8 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  char v93;
  _BYTE v94[24];
  _BYTE *v95;
  __int128 v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v10 = (std::__shared_weak_count *)a2[1];
  v39 = *a2;
  v40 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v96 = *a4;
  v97 = *((_BYTE *)a4 + 16);
  v95 = 0;
  v55[0] = a5;
  v55[1] = a6;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    *(_QWORD *)&v82 = *(_QWORD *)(a1 + 16);
  }
  v13 = sub_20E8A8B84();
  if (v13[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *(_OWORD *)v13;
    *(_QWORD *)&v68 = *((_QWORD *)v13 + 2);
    *(_OWORD *)__p = v14;
  }
  v15 = SBYTE7(v68);
  if ((SBYTE7(v68) & 0x80u) == 0)
    v16 = BYTE7(v68);
  else
    v16 = (size_t)__p[1];
  v17 = BYTE7(v82);
  v18 = BYTE7(v82);
  if (SBYTE7(v82) < 0)
    v17 = *((_QWORD *)&__dst + 1);
  if (v17 < v16
    || ((SBYTE7(v82) & 0x80u) == 0 ? (p_dst = &__dst) : (p_dst = (__int128 *)__dst),
        (SBYTE7(v68) & 0x80u) == 0 ? (v20 = __p) : (v20 = (void **)__p[0]),
        memcmp(p_dst, v20, v16)))
  {
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((BYTE7(v82) & 0x80) == 0)
        goto LABEL_31;
    }
    else if ((v18 & 0x80) == 0)
    {
      goto LABEL_31;
    }
    operator delete((void *)__dst);
LABEL_31:
    v42[0] = a1;
    v42[1] = &v39;
    v42[2] = a3;
    v42[3] = &v96;
    v42[4] = v55;
    LOBYTE(__dst) = 0;
    v93 = 0;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA069C8;
    v80.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
    v80.__r_.__value_.__r.__words[2] = (std::string::size_type)v42;
    sub_210235BBC((uint64_t)&v80, (uint64_t)__p);
    if (v79)
    {
      v54 = v92;
      if (v92)
      {
        v22 = (void *)*((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        v43[0] = &off_24CA060C0;
        v43[1] = v22;
      }
      else
      {
        *(_OWORD *)v43 = __dst;
        LOBYTE(v44) = 0;
        v53 = 0;
        if (v91)
        {
          v46 = 0;
          if (v84)
          {
            v44 = v82;
            v45 = v83;
            v83 = 0;
            v82 = 0uLL;
            v46 = 1;
          }
          LOBYTE(v47) = 0;
          v52 = 0;
          if (v90)
          {
            v48 = v86;
            v47 = v85;
            v85 = 0uLL;
            v49 = v87;
            *(_OWORD *)v50 = v88;
            v51 = v89;
            v86 = 0;
            v88 = 0uLL;
            v89 = 0;
            v52 = 1;
          }
          v53 = 1;
        }
      }
    }
    else
    {
      *(_OWORD *)v56 = *(_OWORD *)__p;
      v23 = sub_20E89EFE4(&v57, &v68);
      *(_OWORD *)v43 = *(_OWORD *)v56;
      LOBYTE(v44) = 0;
      v53 = 0;
      if (v66)
      {
        v46 = 0;
        v24 = v59;
        if (v59)
        {
          v44 = *(_OWORD *)v23;
          v45 = *((_QWORD *)v23 + 2);
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = 0;
          v46 = 1;
        }
        LOBYTE(v47) = 0;
        v52 = 0;
        if (v65)
        {
          v48 = v61;
          v47 = v60;
          v60 = 0uLL;
          v49 = v62;
          *(_OWORD *)v50 = v63;
          v51 = v64;
          v61 = 0;
          v63 = 0uLL;
          v64 = 0;
          v52 = 1;
        }
        v53 = 1;
        v54 = 0;
        if (v24 && v58 < 0)
          operator delete(v57);
      }
      else
      {
        v54 = 0;
      }
      if (!v79 && v78)
      {
        if (v77)
        {
          if (v76 < 0)
            operator delete(v73);
          if (SHIBYTE(v72) < 0)
            operator delete(v71);
        }
        if (v70 && SHIBYTE(v69) < 0)
          operator delete((void *)v68);
      }
    }
    if (v93)
    {
      if (v92)
      {
        v25 = *((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        if (v25)
        {
          v26 = sub_20FD1B660(v25);
          MEMORY[0x212BC6398](v26, 0x10B3C4012E545FFLL);
        }
      }
      else if (v91)
      {
        if (v90)
        {
          if (SHIBYTE(v89) < 0)
            operator delete((void *)v88);
          if (SHIBYTE(v86) < 0)
            operator delete((void *)v85);
        }
        if (v84 && SHIBYTE(v83) < 0)
          operator delete((void *)v82);
      }
    }
    if (v54)
    {
      v27 = v43[1];
      v43[1] = 0;
      *(_QWORD *)a7 = &off_24CA060C0;
      *(_QWORD *)(a7 + 8) = v27;
      *(_BYTE *)(a7 + 120) = 1;
      goto LABEL_99;
    }
    v41 = "client";
    sub_2102341F0((uint64_t)v43, &v80);
    sub_20FD2BC2C((uint64_t)v56, (const char *)&v41, (const char *)&v80);
    if (SHIBYTE(v57) < 0)
    {
      sub_20E860C04(__p, v56[0], (unint64_t)v56[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v56;
      *(_QWORD *)&v68 = v57;
    }
    BYTE8(v68) = 1;
    LOBYTE(v69) = 0;
    v74 = 0;
    v75 = 1;
    sub_20FD20A78((uint64_t)&__dst, 6u, (__int128 *)__p);
    *(_OWORD *)a7 = __dst;
    *(_BYTE *)(a7 + 16) = 0;
    *(_BYTE *)(a7 + 112) = 0;
    if (v91)
    {
      *(_BYTE *)(a7 + 40) = 0;
      v28 = v84;
      if (v84)
      {
        *(_OWORD *)(a7 + 16) = v82;
        *(_QWORD *)(a7 + 32) = v83;
        v83 = 0;
        v82 = 0uLL;
        *(_BYTE *)(a7 + 40) = 1;
      }
      *(_BYTE *)(a7 + 48) = 0;
      *(_BYTE *)(a7 + 104) = 0;
      if (v90)
      {
        v29 = v87;
        *(_QWORD *)(a7 + 64) = v86;
        *(_OWORD *)(a7 + 48) = v85;
        v85 = 0uLL;
        *(_QWORD *)(a7 + 72) = v29;
        *(_OWORD *)(a7 + 80) = v88;
        *(_QWORD *)(a7 + 96) = v89;
        v86 = 0;
        v88 = 0uLL;
        v89 = 0;
        *(_BYTE *)(a7 + 104) = 1;
      }
      *(_BYTE *)(a7 + 112) = 1;
      *(_BYTE *)(a7 + 120) = 0;
      if (v28 && SHIBYTE(v83) < 0)
        operator delete((void *)v82);
      if (!v75)
      {
LABEL_96:
        if (SHIBYTE(v57) < 0)
        {
          operator delete(v56[0]);
          if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_98:
            if (v54)
              goto LABEL_99;
LABEL_114:
            if (v53)
            {
              if (v52)
              {
                if (SHIBYTE(v51) < 0)
                  operator delete(v50[0]);
                if (SHIBYTE(v48) < 0)
                  operator delete((void *)v47);
              }
              if (v46 && SHIBYTE(v45) < 0)
                operator delete((void *)v44);
            }
            goto LABEL_101;
          }
        }
        else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_98;
        }
        operator delete(v80.__r_.__value_.__l.__data_);
        if (v54)
        {
LABEL_99:
          v30 = v43[1];
          v43[1] = 0;
          if (v30)
          {
            v31 = sub_20FD1B660((uint64_t)v30);
            MEMORY[0x212BC6398](v31, 0x10B3C4012E545FFLL);
          }
          goto LABEL_101;
        }
        goto LABEL_114;
      }
    }
    else
    {
      *(_BYTE *)(a7 + 120) = 0;
      if (!v75)
        goto LABEL_96;
    }
    if (v74)
    {
      if (SHIBYTE(v73) < 0)
        operator delete(v72);
      if (SHIBYTE(v71) < 0)
        operator delete(v69);
    }
    if (BYTE8(v68) && SBYTE7(v68) < 0)
      operator delete(__p[0]);
    goto LABEL_96;
  }
  v21 = sub_20E8A8B80();
  if (SBYTE7(v68) < 0)
  {
    operator delete(__p[0]);
    if ((SBYTE7(v82) & 0x80000000) == 0)
    {
LABEL_30:
      if ((v21 & 1) != 0)
        goto LABEL_31;
      goto LABEL_125;
    }
  }
  else if ((SBYTE7(v82) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete((void *)__dst);
  if ((v21 & 1) != 0)
    goto LABEL_31;
LABEL_125:
  v56[0] = "client";
  sub_20FD2B9D0((uint64_t)v43, (const char *)v56, a1);
  if (SBYTE7(v44) < 0)
  {
    sub_20E860C04(__p, v43[0], (unint64_t)v43[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v43;
    *(_QWORD *)&v68 = v44;
  }
  BYTE8(v68) = 1;
  LOBYTE(v69) = 0;
  v74 = 0;
  v75 = 1;
  sub_20FD20A78((uint64_t)&__dst, 6u, (__int128 *)__p);
  *(_OWORD *)a7 = __dst;
  *(_BYTE *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  if (v91)
  {
    *(_BYTE *)(a7 + 40) = 0;
    v37 = v84;
    if (v84)
    {
      *(_OWORD *)(a7 + 16) = v82;
      *(_QWORD *)(a7 + 32) = v83;
      v83 = 0;
      v82 = 0uLL;
      *(_BYTE *)(a7 + 40) = 1;
    }
    *(_BYTE *)(a7 + 48) = 0;
    *(_BYTE *)(a7 + 104) = 0;
    if (v90)
    {
      v38 = v87;
      *(_QWORD *)(a7 + 64) = v86;
      *(_OWORD *)(a7 + 48) = v85;
      v85 = 0uLL;
      *(_QWORD *)(a7 + 72) = v38;
      *(_OWORD *)(a7 + 80) = v88;
      *(_QWORD *)(a7 + 96) = v89;
      v86 = 0;
      v88 = 0uLL;
      v89 = 0;
      *(_BYTE *)(a7 + 104) = 1;
    }
    *(_BYTE *)(a7 + 112) = 1;
    *(_BYTE *)(a7 + 120) = 0;
    if (v37 && SHIBYTE(v83) < 0)
      operator delete((void *)v82);
  }
  else
  {
    *(_BYTE *)(a7 + 120) = 0;
  }
  if (v75)
  {
    if (v74)
    {
      if (SHIBYTE(v73) < 0)
        operator delete(v72);
      if (SHIBYTE(v71) < 0)
        operator delete(v69);
    }
    if (BYTE8(v68) && SBYTE7(v68) < 0)
      operator delete(__p[0]);
  }
  if (SBYTE7(v44) < 0)
    operator delete(v43[0]);
LABEL_101:
  v32 = v95;
  if (v95 == v94)
  {
    v33 = 4;
    v32 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_106;
    v33 = 5;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v33))(v32);
LABEL_106:
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20FD1FEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;

  if (a22 < 0)
    operator delete(__p);
  v24 = *(_QWORD **)(v22 - 88);
  if (v24 == (_QWORD *)(v22 - 112))
  {
    v25 = 4;
    v24 = (_QWORD *)(v22 - 112);
  }
  else
  {
    if (!v24)
      goto LABEL_8;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_8:
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD20008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = sub_20FD1B660(v2);
    MEMORY[0x212BC6398](v3, 0x10B3C4012E545FFLL);
  }
  return a1;
}

void sub_20FD2004C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = sub_20FD1B660(v2);
    MEMORY[0x212BC6398](v3, 0x10B3C4012E545FFLL);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD200A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 32;
}

uint64_t sub_20FD200AC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20FD200B4(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20FD200BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 56;
}

uint64_t sub_20FD200C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 8;
}

uint64_t sub_20FD200D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  unsigned __int8 *v21[6];
  const void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(_QWORD *)(*a2 + 8) != *(_QWORD *)(*a3 + 8))
    return 0;
  result = sub_20E87C540(a2[1], a3[1]);
  if ((_DWORD)result)
  {
    v7 = a2[2];
    v8 = (unsigned __int8 *)a3[2];
    v9 = v8[144];
    if (*(_BYTE *)(v7 + 144))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
    {
      if ((*(_BYTE *)(v7 + 144) != 0) != (v9 != 0))
        return 0;
    }
    else
    {
      v22 = (const void **)a2[2];
      v23 = v7 + 24;
      v24 = v7 + 48;
      v25 = v7 + 72;
      v26 = v7 + 96;
      v27 = v7 + 120;
      v21[0] = v8;
      v21[1] = v8 + 24;
      v21[2] = v8 + 48;
      v21[3] = v8 + 72;
      v21[4] = v8 + 96;
      v21[5] = v8 + 120;
      v11 = sub_20E9E62CC((uint64_t)&v28, &v22, v21);
      if ((v11 & 1) == 0)
        return 0;
    }
    v12 = a2[3];
    v13 = a3[3];
    v14 = *(unsigned int *)(v12 + 8);
    v22 = *(const void ***)v12;
    LODWORD(v23) = v14;
    if (v22 != *(const void ***)v13 || v14 != *(_DWORD *)(v13 + 8))
      return 0;
    v16 = *(const void ***)(v12 + 12);
    v17 = *(unsigned int *)(v12 + 20);
    v22 = v16;
    LODWORD(v23) = v17;
    v18 = *(const void ***)(v13 + 12);
    v19 = *(unsigned int *)(v13 + 20);
    return v16 == v18 && v17 == v19;
  }
  return result;
}

void sub_20FD20244()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20FD20258(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA06108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20FD20290(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA06108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_20FD202B0@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  sub_20FD0EFF8((uint64_t)&v7, *(_QWORD *)(a1 + 8), a2, (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 32), **(_QWORD **)(a1 + 16));
  result = *(__n128 *)a2;
  v6 = v7;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v8;
  return result;
}

uint64_t sub_20FD20304(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3dgn6Server4Impl20RunClientDiagnosticsERKNS1_9EventInfoERKNS1_10RunOptionsEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3dgn6Server4Impl20RunClientDiagnosticsERKNS1_9EventInfoERKNS1_10RunOptionsEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3dgn6Server4Impl20RunClientDiagnosticsERKNS1_9EventInfoERKNS1_10RunOptionsEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3dgn6Server4Impl20RunClientDiagnosticsERKNS1_9EventInfoERKNS1_10RunOptionsEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FD20370()
{
  return &unk_24CA06178;
}

void sub_20FD2037C(char *a1)
{
  if (a1)
  {
    sub_20FD2037C(*(_QWORD *)a1);
    sub_20FD2037C(*((_QWORD *)a1 + 1));
    if (a1[71] < 0)
      operator delete(*((void **)a1 + 6));
    operator delete(a1);
  }
}

void sub_20FD203D4(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void ***)(a1 + 8);
      v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t sub_20FD20510(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 232))
  {
    sub_20FCF4D74(a1 + 56);
    if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    {
      v2 = (void **)(a1 + 24);
LABEL_12:
      operator delete(*v2);
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_9;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_9:
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_10:
  if (*(char *)(a1 + 39) < 0)
  {
    v2 = (void **)(a1 + 16);
    goto LABEL_12;
  }
  return a1;
}

uint64_t *sub_20FD205B8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20FD0FEE8(v2);
    sub_20FCF4D74(v2 + 104);
    if (*(_BYTE *)(v2 + 96) && *(char *)(v2 + 95) < 0)
    {
      operator delete(*(void **)(v2 + 72));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x212BC6398);
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v2);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_20FD20644(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x212BC5DC8]();
    MEMORY[0x212BC6398](v5, 0x20C4093837F09);
  }
  MEMORY[0x212BC6398](a1, 0xA0C40A8488062);
  return 0;
}

void sub_20FD206C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FD206DC((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20FD206DC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x212BC5DC8]();
      MEMORY[0x212BC6398](v4, 0x20C4093837F09);
    }
    MEMORY[0x212BC6398](v2, 0xA0C40A8488062);
  }
  return a1;
}

uint64_t *sub_20FD20744(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x212BC5DC8]();
    MEMORY[0x212BC6398](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_20FD20788(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{current=", 9);
  sub_210233CA0((_QWORD *)(v5 + 16), a3);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)", min=", 6);
  sub_210233CA0((_QWORD *)(v5 + 16), (uint64_t *)((char *)a3 + 12));
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA061B8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FD20A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD20A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD20A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FD20A78(uint64_t a1, unsigned int a2, __int128 *a3)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20E89EFE4(v7, a3);
  sub_20EA5B348((uint64_t)&v16, a2, (__int128 *)v7);
  *(_OWORD *)a1 = v16;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a1 + 16) = __p;
      *(_QWORD *)(a1 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a1 + 64) = v21;
      *(_OWORD *)(a1 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a1 + 72) = v6;
      *(_OWORD *)(a1 + 80) = v23;
      *(_QWORD *)(a1 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20FD20BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89F09C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD20BF4(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD **v9;
  const char *v10;
  _DWORD *v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;

  v8 = 0;
  sub_20EE0A738(v7, "Failed to load ");
  sub_20EB04FEC((uint64_t)&v6, (uint64_t)v7, a2);
  v9 = (_QWORD **)v7;
  v10 = ": ";
  v11 = v7;
  v12 = ": ";
  v13 = ": ";
  if (v8 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06450[v8])(&v14, v7);
  v9 = (_QWORD **)v7;
  v10 = a3;
  v11 = v7;
  v12 = a3;
  v13 = a3;
  if (v8 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06468[v8])(&v14, v7);
  if (v8 == -1)
    sub_20E877AB8();
  v9 = &v14;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA061E8[v8])(&v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA06188[v8])(&v9, v7);
  return result;
}

void sub_20FD20D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD20D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD20D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD20D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD20D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD20DA4()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD20DB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  void **v12;
  void **v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *exception;
  std::string v41;
  unsigned __int8 *v42;
  void *v43[2];
  void *v44;
  __int128 v45;
  _QWORD *v46;
  void *v47[2];
  void *v48[2];
  void *v49[2];
  _QWORD v50[3];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  void *__p[2];
  void *v64[4];
  void *v65[2];
  void *v66[4];
  void *v67[2];
  void *v68[8];
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *v72[2];
  void *v73;
  __int128 v74;
  void *v75;
  void *v76[2];
  void *v77;
  __int128 v78;
  void *v79;
  void *v80[2];
  void *v81;
  __int128 v82;
  void *v83;
  int v84;
  __int128 v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  void *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  sub_2102232E4(**(std::__fs::filesystem::path ***)(a1 + 16), &v41);
  sub_2101F84CC((uint64_t *)&v41, (uint64_t *)&v42);
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  memset(v68, 0, sizeof(v68));
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, sizeof(v66));
  memset(v64, 0, sizeof(v64));
  *(_OWORD *)__p = 0u;
  sub_20EB98380((uint64_t)&v90, v42);
  *(_QWORD *)&v45 = &unk_24CA1DDD0;
  *((_QWORD *)&v45 + 1) = 0x300000000;
  v2 = (_QWORD *)operator new();
  *(_BYTE *)v2 = v90;
  v2[1] = *((_QWORD *)&v90 + 1);
  LOBYTE(v90) = 0;
  *((_QWORD *)&v90 + 1) = 0;
  v46 = v2;
  v47[0] = sub_210204328;
  v47[1] = v2;
  LOBYTE(v52) = 0;
  *((_QWORD *)&v52 + 1) = 0;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)v49 = 0u;
  memset(v50, 0, 17);
  sub_20EB911C0((uint64_t *)&v90 + 1, 0);
  *(_QWORD *)&v45 = &off_24CA062E0;
  sub_2101FF2E8((uint64_t)&v45);
  v50[2] = "version";
  v51 = 7;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v3 = (char *)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  *(_QWORD *)&v90 = 0;
  sub_2100DA8B0(v3, &v90);
  v4 = v90;
  if (DWORD1(v90))
    goto LABEL_105;
  v50[2] = "user_given_name";
  v51 = 15;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v5 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v5, (uint64_t)&v90);
  if (SHIBYTE(v64[0]) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v90;
  v64[0] = v91;
  v50[2] = "product_name";
  v51 = 12;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v6 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v6, (uint64_t)&v90);
  if (SHIBYTE(v64[3]) < 0)
    operator delete(v64[1]);
  *(_OWORD *)&v64[1] = v90;
  v64[3] = v91;
  v50[2] = "type";
  v51 = 4;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v7 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v7, (uint64_t)&v90);
  if (SHIBYTE(v66[0]) < 0)
    operator delete(v65[0]);
  *(_OWORD *)v65 = v90;
  v66[0] = v91;
  v50[2] = "serial_number";
  v51 = 13;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v8 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v8, (uint64_t)&v90);
  if (SHIBYTE(v66[3]) < 0)
    operator delete(v66[1]);
  *(_OWORD *)&v66[1] = v90;
  v66[3] = v91;
  v50[2] = "os_build_version";
  v51 = 16;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v9 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v9, (uint64_t)&v90);
  if (SHIBYTE(v68[0]) < 0)
    operator delete(v67[0]);
  *(_OWORD *)v67 = v90;
  v68[0] = v91;
  v50[2] = "os_product_version";
  v51 = 18;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v10 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v10, (uint64_t)&v90);
  if (SHIBYTE(v68[3]) < 0)
    operator delete(v68[1]);
  *(_OWORD *)&v68[1] = v90;
  v68[3] = v91;
  v50[2] = "process_id";
  v51 = 10;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v11 = (char *)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  *(_QWORD *)&v90 = 0;
  sub_2100DA9F8(v11, &v90);
  if ((_QWORD)v90 != (int)v90)
    goto LABEL_105;
  LODWORD(v68[4]) = v90;
  v50[2] = "process_name";
  v51 = 12;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v12 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v12, (uint64_t)&v90);
  if (SHIBYTE(v68[7]) < 0)
    operator delete(v68[5]);
  *(_OWORD *)&v68[5] = v90;
  v68[7] = v91;
  v50[2] = "uuid";
  v51 = 4;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v13 = (void **)sub_2101FF5A0((uint64_t *)&v45);
  v14 = v4;
  ++*((_QWORD *)&v52 + 1);
  v91 = 0;
  v90 = 0uLL;
  sub_2100DADB0(v13, (uint64_t)&v90);
  v44 = v91;
  *(_OWORD *)v43 = v90;
  v15 = SHIBYTE(v91);
  v16 = (char *)v90;
  v17 = operator new();
  v18 = v17;
  if (v15 >= 0)
    v19 = (char *)v43;
  else
    v19 = v16;
  sub_21023865C(v17, v19);
  v90 = 0uLL;
  sub_20FCF4A0C((uint64_t *)v18, &v90);
  v20 = MEMORY[0x24BEDB7F0];
  v21 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v18 = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(v20 + 72);
  *(_QWORD *)(v18 + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(v20 + 64);
  *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v18 + 16) = v22;
  if (*(char *)(v18 + 111) < 0)
    operator delete(*(void **)(v18 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v18 + 128);
  MEMORY[0x212BC6398](v18, 0x10B2C40EED050F3);
  v69 = v90;
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  if ((v14 & 0xFFFFFFFE) == 0)
  {
    v24 = (void **)v48[1];
    v25 = v50[0];
    goto LABEL_56;
  }
  v50[2] = "protocol_info";
  v51 = 13;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  sub_2101FF2E8((uint64_t)&v45);
  v50[2] = "version";
  v51 = 7;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v23 = (char *)sub_2101FF5A0((uint64_t *)&v45);
  ++*((_QWORD *)&v52 + 1);
  *(_QWORD *)&v90 = 0;
  sub_2100DA8B0(v23, &v90);
  if (DWORD1(v90))
  {
LABEL_105:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v50[2] = "current";
  v51 = 7;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  *(_QWORD *)&v90 = &v70;
  sub_20FD2281C((uint64_t *)&v45, (uint64_t *)&v90);
  v50[2] = "min";
  v51 = 3;
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  *(_QWORD *)&v90 = (char *)&v70 + 12;
  sub_20FD2281C((uint64_t *)&v45, (uint64_t *)&v90);
  v24 = (void **)((char *)v48[1] - 8);
  v47[1] = *((void **)v48[1] - 1);
  v25 = v50[0] - 8;
  *((_QWORD *)&v52 + 1) = *(_QWORD *)(v50[0] - 8);
  v48[1] = (char *)v48[1] - 8;
  v50[0] -= 8;
LABEL_56:
  v47[1] = *(v24 - 1);
  *((_QWORD *)&v52 + 1) = *(_QWORD *)(v25 - 8);
  v50[0] = v25 - 8;
  v26 = v64[0];
  *(_OWORD *)v72 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  memset(v64, 0, sizeof(v64));
  v73 = v26;
  v75 = v64[3];
  v74 = *(_OWORD *)&v64[1];
  v27 = v66[0];
  *(_OWORD *)v76 = *(_OWORD *)v65;
  v65[0] = 0;
  v65[1] = 0;
  memset(v66, 0, sizeof(v66));
  v77 = v27;
  v79 = v66[3];
  v78 = *(_OWORD *)&v66[1];
  v28 = v68[0];
  *(_OWORD *)v80 = *(_OWORD *)v67;
  v67[0] = 0;
  v67[1] = 0;
  memset(v68, 0, 32);
  v81 = v28;
  v83 = v68[3];
  v82 = *(_OWORD *)&v68[1];
  v84 = (int)v68[4];
  v86 = v68[7];
  v85 = *(_OWORD *)&v68[5];
  memset(&v68[5], 0, 24);
  v89 = v71;
  v87 = v69;
  v88 = v70;
  v48[1] = v24 - 1;
  *(_QWORD *)&v45 = &unk_24CA1DDD0;
  if (v49[1])
  {
    v50[0] = v49[1];
    operator delete(v49[1]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  v29 = v46;
  v46 = 0;
  if (v29)
    ((void (*)(void))v47[0])();
  sub_20FCF25D0((uint64_t)v72, (uint64_t)&v45);
  if (SHIBYTE(v86) < 0)
  {
    operator delete((void *)v85);
    if ((SHIBYTE(v83) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v83) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete((void *)v82);
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v80[0]);
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v77) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_94;
  }
LABEL_93:
  operator delete((void *)v78);
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v75) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_95;
  }
LABEL_94:
  operator delete(v76[0]);
  if ((SHIBYTE(v75) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_96;
  }
LABEL_95:
  operator delete((void *)v74);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v68[7]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_97;
  }
LABEL_96:
  operator delete(v72[0]);
  if ((SHIBYTE(v68[7]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_98;
  }
LABEL_97:
  operator delete(v68[5]);
  if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v68[0]) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_99;
  }
LABEL_98:
  operator delete(v68[1]);
  if ((SHIBYTE(v68[0]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v66[3]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(v67[0]);
  if ((SHIBYTE(v66[3]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v66[0]) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v66[1]);
  if ((SHIBYTE(v66[0]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v64[3]) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v65[0]);
  if ((SHIBYTE(v64[3]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v64[1]);
  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
LABEL_76:
    v30 = v42;
    v42 = 0;
    if (!v30)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_103:
  operator delete(__p[0]);
  v30 = v42;
  v42 = 0;
  if (v30)
  {
LABEL_77:
    sub_20EB911C0((uint64_t *)v30 + 1, *v30);
    MEMORY[0x212BC6398](v30, 0x1022C40B06DCE69);
  }
LABEL_78:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(v1 + 240))
  {
    sub_20FD20510(v1);
    *(_BYTE *)(v1 + 240) = 0;
  }
  *(_OWORD *)v1 = v45;
  *(_DWORD *)(v1 + 16) = (_DWORD)v46;
  *(_BYTE *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  v31 = LOBYTE(v48[1]);
  if (LOBYTE(v48[1]))
  {
    v32 = *(_OWORD *)v47;
    *(void **)(v1 + 40) = v48[0];
    *(_OWORD *)(v1 + 24) = v32;
    v47[1] = 0;
    v48[0] = 0;
    v47[0] = 0;
    *(_BYTE *)(v1 + 48) = 1;
  }
  *(_BYTE *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 200) = 0;
  if (v60)
  {
    v33 = *(_OWORD *)v49;
    *(_QWORD *)(v1 + 72) = v50[0];
    *(_OWORD *)(v1 + 56) = v33;
    v49[0] = 0;
    v49[1] = 0;
    v34 = v51;
    *(_OWORD *)(v1 + 80) = *(_OWORD *)&v50[1];
    *(_QWORD *)(v1 + 96) = v34;
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    v35 = v52;
    *(_QWORD *)(v1 + 120) = v53;
    *(_OWORD *)(v1 + 104) = v35;
    v52 = 0uLL;
    v36 = v54;
    *(_QWORD *)(v1 + 144) = v55;
    *(_OWORD *)(v1 + 128) = v36;
    v53 = 0;
    v54 = 0uLL;
    v55 = 0;
    v37 = v56;
    *(_QWORD *)(v1 + 168) = v57;
    *(_OWORD *)(v1 + 152) = v37;
    v56 = 0uLL;
    v38 = v58;
    *(_QWORD *)(v1 + 192) = v59;
    *(_OWORD *)(v1 + 176) = v38;
    v57 = 0;
    v58 = 0uLL;
    v59 = 0;
    *(_BYTE *)(v1 + 200) = 1;
  }
  v39 = v61;
  *(_QWORD *)(v1 + 224) = v62;
  *(_OWORD *)(v1 + 208) = v39;
  *(_BYTE *)(v1 + 232) = 1;
  *(_BYTE *)(v1 + 240) = 1;
  if (v31)
  {
    if (SHIBYTE(v48[0]) < 0)
      operator delete(v47[0]);
  }
}

void sub_20FD21904(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD21BD4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24CA1DDD0;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20FD21C38(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24CA1DDD0;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x212BC6398);
}

char *sub_20FD21CB4(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  char *result;
  char v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  result = sub_2100DACA8(v4, &v6);
  *a2 = v6;
  return result;
}

void sub_20FD21D00(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA9F8(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD21D7C(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA9F8(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD21DF8(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA9F8(v4, &v6);
  if (v6 != (int)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD21E74(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DA9F8(v4, &v5);
  *a2 = v5;
}

void sub_20FD21EC0(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DA9F8(v4, &v5);
  *a2 = v5;
}

void sub_20FD21F0C(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA8B0(v4, &v6);
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD21F88(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA9F8(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD22004(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA8B0(v4, &v6);
  if (v6 >= 0x10000)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD22080(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DA8B0(v4, &v6);
  if (HIDWORD(v6))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FD220FC(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DA8B0(v4, &v5);
  *a2 = v5;
}

void sub_20FD22148(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DA8B0(v4, &v5);
  *a2 = v5;
}

void sub_20FD22194(uint64_t *a1, float *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2101FF5A0(a1);
  ++a1[14];
  *a2 = sub_2102061A0(v4);
}

void sub_20FD221CC(uint64_t *a1, double *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2101FF5A0(a1);
  ++a1[14];
  *a2 = sub_210206280(v4);
}

double sub_20FD22204(uint64_t *a1, uint64_t a2)
{
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v7 = 0;
  v6 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20FD2226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD22288(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_21020070C(a1, (uint64_t)v3);
}

void sub_20FD222AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FFC64(v4, (uint64_t)v5);
}

void sub_20FD222EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FFE10(v4, (uint64_t)v5);
}

void sub_20FD2232C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FFFBC(v4, (uint64_t)v5);
}

void sub_20FD2236C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_210201934(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20FD22438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD22454(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_210201934(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20FD224C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD224E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FF6B8(v4, (uint64_t)v5);
}

void sub_20FD22520(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FFD20(v4, (uint64_t)v5);
}

void sub_20FD22560(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FFF00(v4, (uint64_t)v5);
}

void sub_20FD225A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_210200078(v4, (uint64_t)v5);
}

void sub_20FD225E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_210201FF0(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20FD226AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD226C8(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_210201FF0(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20FD22738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD22754(uint64_t *a1, uint64_t a2, float *a3)
{
  unint64_t v5;

  v5 = sub_2101FF5A0(a1);
  ++a1[14];
  sub_2102004AC(v5, a3);
}

void sub_20FD22788(uint64_t *a1, uint64_t a2, double *a3)
{
  unint64_t v5;

  v5 = sub_2101FF5A0(a1);
  ++a1[14];
  sub_2102005DC(v5, a3);
}

void sub_20FD227BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2102007D4(a1, (uint64_t)v3);
}

void sub_20FD227E0(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2101FF5A0(a1);
  ++a1[14];
  sub_2101FF6B8(v4, a2);
}

void sub_20FD2281C(uint64_t *a1, uint64_t *a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v19 = 0;
  v18 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v18);
  v16 = v19;
  *(_OWORD *)__p = v18;
  v5 = SHIBYTE(v19);
  v6 = (char *)v18;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v17 = v8;
  *(_QWORD *)&v18 = 0;
  DWORD2(v18) = 0;
  sub_210233D60((uint64_t *)v8, (uint64_t)&v18);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  v13 = DWORD2(v18);
  v14 = *a2;
  *(_QWORD *)v14 = v18;
  *(_DWORD *)(v14 + 8) = v13;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20FD2297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48(&a16);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD22A0C(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_14;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

void sub_20FD22AE0()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD22AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t (**v18)();
  void (**v19)();
  void *__p;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  int v27;
  void *v28[2];
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)(a1 + 16) + 24)
                                                                         + 368))(&v23, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24), **(_QWORD **)(a1 + 16), 8);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  *(_QWORD *)&v26 = 0;
  sub_20E9EECEC(&v18, (uint64_t *)&v26, v2, 0x2800uLL);
  v18 = &off_24CA064D0;
  v19 = (void (**)())&unk_24CA06618;
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  LODWORD(v26) = 2;
  sub_20E9EDADC(v22, &v26);
  v3 = v26;
  sub_20E9EE280(v22, (std::string *)&v46);
  sub_20E9EE280(v22, (std::string *)((char *)&v47 + 8));
  sub_20E9EE280(v22, (std::string *)&v49);
  sub_20E9EE280(v22, (std::string *)((char *)&v50 + 8));
  sub_20E9EE280(v22, (std::string *)&v52);
  sub_20E9EE280(v22, (std::string *)((char *)&v53 + 8));
  sub_20E9EDA2C(v22, &v55);
  sub_20E9EE280(v22, (std::string *)&v56);
  v4 = v22;
  sub_20E9ED7B4(v22, (_BYTE *)&v57 + 8);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 9);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 10);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 11);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 12);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 13);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 14);
  sub_20E9ED7B4(v4, (_BYTE *)&v57 + 15);
  sub_20E9ED7B4(v4, &v58);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 1);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 2);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 3);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 4);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 5);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 6);
  sub_20E9ED7B4(v4, (_BYTE *)&v58 + 7);
  if (v3 >= 2)
  {
    LODWORD(v26) = 1;
    sub_20E9EDADC(v22, &v26);
    sub_20E9EDADC(v22, (_DWORD *)&v58 + 2);
    sub_20E9EDADC(v22, (_DWORD *)&v58 + 3);
    sub_20E9EDADC(v22, &v59);
    sub_20E9EDADC(v22, (_DWORD *)&v59 + 1);
    sub_20E9EDADC(v22, (_DWORD *)&v59 + 2);
    sub_20E9EDADC(v22, (_DWORD *)&v59 + 3);
  }
  sub_20FCF25D0((uint64_t)&v46, (uint64_t)&v26);
  if (SBYTE7(v57) < 0)
  {
    operator delete((void *)v56);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
    {
LABEL_5:
      if ((SBYTE7(v53) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)&v53 + 1));
  if ((SBYTE7(v53) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  operator delete((void *)v52);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SBYTE7(v50) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(*((void **)&v50 + 1));
  if ((SBYTE7(v50) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_34:
    operator delete(*((void **)&v47 + 1));
    if ((SBYTE7(v47) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_33:
  operator delete((void *)v49);
  if (SHIBYTE(v48) < 0)
    goto LABEL_34;
LABEL_9:
  if ((SBYTE7(v47) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_35:
  operator delete((void *)v46);
LABEL_10:
  v18 = &off_24C9B71C0;
  v19 = (void (**)())&unk_24C9B7308;
  v5 = v22;
  v22 = 0;
  if (v5)
  {
    sub_20E9EF740((_QWORD *)(v5 + 8));
    MEMORY[0x212BC6398](v5, 0x10F2C40853B94B7);
  }
  v19 = off_24C9B7428;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v6 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*(_BYTE *)(v1 + 240))
  {
    sub_20FD20510(v1);
    *(_BYTE *)(v1 + 240) = 0;
  }
  *(_OWORD *)v1 = v26;
  *(_DWORD *)(v1 + 16) = v27;
  *(_BYTE *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  v9 = v30;
  if (v30)
  {
    v10 = *(_OWORD *)v28;
    *(_QWORD *)(v1 + 40) = v29;
    *(_OWORD *)(v1 + 24) = v10;
    v28[1] = 0;
    v29 = 0;
    v28[0] = 0;
    *(_BYTE *)(v1 + 48) = 1;
  }
  *(_BYTE *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 200) = 0;
  if (v43)
  {
    v11 = v31;
    *(_QWORD *)(v1 + 72) = v32;
    *(_OWORD *)(v1 + 56) = v11;
    v31 = 0uLL;
    v12 = v34;
    *(_OWORD *)(v1 + 80) = v33;
    *(_QWORD *)(v1 + 96) = v12;
    v32 = 0;
    v33 = 0uLL;
    v34 = 0;
    v13 = v35;
    *(_QWORD *)(v1 + 120) = v36;
    *(_OWORD *)(v1 + 104) = v13;
    v35 = 0uLL;
    v14 = v37;
    *(_QWORD *)(v1 + 144) = v38;
    *(_OWORD *)(v1 + 128) = v14;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    v15 = v39;
    *(_QWORD *)(v1 + 168) = v40;
    *(_OWORD *)(v1 + 152) = v15;
    v39 = 0uLL;
    v16 = v41;
    *(_QWORD *)(v1 + 192) = v42;
    *(_OWORD *)(v1 + 176) = v16;
    v40 = 0;
    v41 = 0uLL;
    v42 = 0;
    *(_BYTE *)(v1 + 200) = 1;
  }
  v17 = v44;
  *(_QWORD *)(v1 + 224) = v45;
  *(_OWORD *)(v1 + 208) = v17;
  *(_BYTE *)(v1 + 232) = 1;
  *(_BYTE *)(v1 + 240) = 1;
  if (v9)
  {
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_20FD23034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21022EAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD23048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;

  if (a78 < 0)
  {
    operator delete(a77);
    if ((a76 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a74 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a76 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a67);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a60 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a61);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a54 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  operator delete(a55);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_9:
    sub_20E9EEE68(&a10);
    sub_21022EAD8((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(__p);
  goto LABEL_9;
}

_QWORD *sub_20FD23108(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20FD23184(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FD23210(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_20FD23288(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FD23324()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD23338(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  int v24;
  unsigned __int8 *v25;
  _QWORD *exception;
  _QWORD *v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char v32;
  __int128 v33;
  void *__s[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  std::string v42;
  unsigned __int8 *v43[3];
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  _BYTE v49[39];
  __int128 v50;
  _OWORD v51[9];
  void *v52;
  _BYTE v53[15];
  char v54;
  char v55;
  unsigned __int8 v56;
  _BYTE v57[56];
  __int128 v58;
  __int128 v59;
  _BYTE v60[32];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  _BYTE v68[15];
  char v69;
  char v70;
  _OWORD v71[2];
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  _BYTE v75[23];
  __int128 v76;
  _BYTE v77[88];
  __int128 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_2102232E4(**(std::__fs::filesystem::path ***)(a1 + 16), &v42);
  sub_2101F84CC((uint64_t *)&v42, (uint64_t *)v43);
  sub_20EB98380((uint64_t)v57, v43[0]);
  *(_QWORD *)v77 = &unk_24CA1DDD0;
  *(_QWORD *)&v77[8] = 0x300000000;
  v3 = operator new();
  *(_BYTE *)v3 = v57[0];
  *(_QWORD *)(v3 + 8) = *(_QWORD *)&v57[8];
  v57[0] = 0;
  *(_QWORD *)&v57[8] = 0;
  *(_QWORD *)&v77[16] = v3;
  *(_QWORD *)&v77[24] = sub_210204328;
  *(_QWORD *)&v77[32] = v3;
  v79 = 0;
  v80 = 0;
  memset(&v77[40], 0, 48);
  LOBYTE(v78) = 0;
  sub_20EB911C0((uint64_t *)&v57[8], 0);
  *(_QWORD *)v77 = &off_24CA062E0;
  sub_2101FF2E8((uint64_t)v77);
  v4 = "version";
  *(_QWORD *)&v78 = "version";
  *((_QWORD *)&v78 + 1) = 7;
  if (!v79)
    v79 = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)v77);
  ++v80;
  *(_QWORD *)v57 = 0;
  sub_2100DA8B0(v5, v57);
  if (*(_DWORD *)&v57[4])
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_2101FF2E8((uint64_t)v77);
  *(_QWORD *)&v78 = "message_id";
  *((_QWORD *)&v78 + 1) = 10;
  if (!v79)
    v79 = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)v77);
  ++v80;
  *(_QWORD *)v57 = 0;
  sub_2100DA8B0(v6, v57);
  v7 = *(_QWORD *)v57;
  *(_QWORD *)&v78 = "export_diagnostics_command";
  *((_QWORD *)&v78 + 1) = 26;
  if (!v79)
    v79 = 1;
  v8 = (_BYTE *)sub_2101FF5A0((uint64_t *)v77);
  v9 = *v8;
  if (!*v8)
  {
    v13 = 0;
    v14 = 0;
    ++v80;
    goto LABEL_34;
  }
  LOBYTE(__s[0]) = 0;
  LOBYTE(v35) = 0;
  BYTE8(v35) = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  LOBYTE(v41) = 0;
  *(_QWORD *)v57 = "event_info";
  *(_QWORD *)&v57[8] = 10;
  *(_QWORD *)&v57[16] = "cause_time";
  *(_QWORD *)&v57[24] = 10;
  v57[32] = 0;
  v57[48] = 0;
  *(_QWORD *)&v58 = "run_options";
  *((_QWORD *)&v58 + 1) = 11;
  sub_20FCF2B98((uint64_t)&v59, (uint64_t *)&v35 + 1);
  if ((_BYTE)v41 && SHIBYTE(v40) < 0)
    operator delete(__p[1]);
  v10 = *(_DWORD *)&v77[8];
  sub_2101FF2E8((uint64_t)v77);
  *(_QWORD *)&v78 = "version";
  *((_QWORD *)&v78 + 1) = 7;
  if (!v79)
    v79 = 1;
  v11 = (char *)sub_2101FF5A0((uint64_t *)v77);
  ++v80;
  __s[0] = 0;
  sub_2100DA8B0(v11, __s);
  if (HIDWORD(__s[0]))
    goto LABEL_70;
  v4 = &v57[16];
  if (v10 < 1)
  {
    sub_2101FF2E8((uint64_t)v77);
    v78 = *(_OWORD *)v57;
    if (!v79)
      v79 = 1;
    __s[0] = *(void **)&v77[8];
    sub_20FD23EFC(__s, (uint64_t)v77, (uint64_t)&v57[16]);
    v78 = v58;
    if (!v79)
      v79 = 1;
    goto LABEL_31;
  }
  if (v10 == 2)
  {
    *(_QWORD *)&v78 = "min_version";
    *((_QWORD *)&v78 + 1) = 11;
    if (!v79)
      v79 = 1;
    v12 = (char *)sub_2101FF5A0((uint64_t *)v77);
    ++v80;
    __s[0] = 0;
    sub_2100DA8B0(v12, __s);
    if (!((unint64_t)__s[0] >> 32))
    {
      if (LODWORD(__s[0]) >= 2)
      {
        v28 = __s[0];
        v29 = atomic_load((unsigned __int8 *)&qword_254A6C198);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C198))
        {
          v30 = atomic_load((unsigned __int8 *)&qword_254A6C1A0);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1A0))
          {
            sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ExportDiagnosticsCommandSample]", &xmmword_254A6C288);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C288, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6C1A0);
          }
          v31 = atomic_load((unsigned __int8 *)&qword_254A6C1A8);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1A8))
          {
            if (byte_254A6C29F < 0)
            {
              sub_20E860C04(__s, (void *)xmmword_254A6C288, *((unint64_t *)&xmmword_254A6C288 + 1));
            }
            else
            {
              *(_OWORD *)__s = xmmword_254A6C288;
              *(_QWORD *)&v35 = unk_254A6C298;
            }
            sub_210236E50((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A6C2A0);
            if (SBYTE7(v35) < 0)
              operator delete(__s[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C2A0, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6C1A8);
          }
          if (byte_254A6C2B7 < 0)
          {
            sub_20E860C04(&xmmword_254A6C270, (void *)xmmword_254A6C2A0, *((unint64_t *)&xmmword_254A6C2A0 + 1));
          }
          else
          {
            xmmword_254A6C270 = xmmword_254A6C2A0;
            qword_254A6C280 = unk_254A6C2B0;
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C270, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6C198);
        }
        sub_20E9F5C70((std::string *)&xmmword_254A6C270, v28, 1u);
      }
      goto LABEL_21;
    }
LABEL_70:
    v27 = __cxa_allocate_exception(8uLL);
    *v27 = &off_24CA1FAE0;
    __cxa_throw(v27, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
LABEL_21:
  sub_2101FF2E8((uint64_t)v77);
  v78 = *(_OWORD *)v57;
  if (!v79)
    v79 = 1;
  __s[0] = *(void **)&v77[8];
  sub_20FD23EFC(__s, (uint64_t)v77, (uint64_t)&v57[16]);
  v78 = v58;
  if (!v79)
    v79 = 1;
LABEL_31:
  __s[0] = *(void **)&v77[8];
  sub_20FD249C8(__s, (uint64_t)v77, (uint64_t)&v59);
  v15 = *(_QWORD *)&v77[48];
  v16 = *(_QWORD *)&v77[72];
  *(_QWORD *)&v77[32] = *(_QWORD *)(*(_QWORD *)&v77[48] - 8);
  v80 = *(_QWORD *)(*(_QWORD *)&v77[72] - 8);
  *(_QWORD *)&v77[48] -= 8;
  *(_QWORD *)&v77[72] -= 8;
  *(_QWORD *)&v77[32] = *(_QWORD *)(v15 - 16);
  v80 = *(_QWORD *)(v16 - 16);
  *(_QWORD *)&v77[48] = v15 - 16;
  *(_QWORD *)&v77[72] = v16 - 16;
  v13 = v57[0];
  v73 = *(_OWORD *)&v57[1];
  v74 = *(_OWORD *)&v57[17];
  *(_OWORD *)v75 = *(_OWORD *)&v57[33];
  *(_QWORD *)&v75[15] = *(_QWORD *)&v57[48];
  v76 = v58;
  v36 = *(_OWORD *)&v60[16];
  v37 = v61;
  *(_OWORD *)__s = v59;
  v35 = *(_OWORD *)v60;
  v40 = v64;
  v41 = v65;
  v38 = v62;
  *(_OWORD *)__p = v63;
  v33 = v66;
  if (v70)
  {
    v1 = v67;
    v72[0] = *(_QWORD *)v68;
    *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)&v68[7];
    v14 = 1;
    v32 = v69;
  }
  else
  {
    v14 = 0;
    v1 = 0;
  }
LABEL_34:
  v17 = *(_QWORD *)&v77[48];
  v18 = *(_QWORD *)&v77[72];
  *(_QWORD *)&v77[32] = *(_QWORD *)(*(_QWORD *)&v77[48] - 8);
  v80 = *(_QWORD *)(*(_QWORD *)&v77[72] - 8);
  *(_QWORD *)&v77[48] -= 8;
  *(_QWORD *)&v77[72] -= 8;
  *(_QWORD *)&v77[32] = *(_QWORD *)(v17 - 16);
  v80 = *(_QWORD *)(v18 - 16);
  *(_QWORD *)&v77[48] = v17 - 16;
  *(_QWORD *)&v77[72] = v18 - 16;
  v43[1] = "message_id";
  v43[2] = (unsigned __int8 *)10;
  v44 = v7;
  v45 = "export_diagnostics_command";
  v46 = 26;
  v47 = 0;
  v56 = 0;
  if (v9)
  {
    v48 = v73;
    *(_OWORD *)v49 = v74;
    *(_OWORD *)&v49[16] = *(_OWORD *)v75;
    v51[5] = *(_OWORD *)__p;
    v51[6] = v40;
    v50 = v76;
    v51[0] = *(_OWORD *)__s;
    v51[1] = v35;
    v51[2] = v36;
    v47 = v13;
    *(_QWORD *)&v49[31] = *(_QWORD *)&v75[15];
    v51[3] = v37;
    v51[4] = v38;
    v51[7] = v41;
    v51[8] = v33;
    LOBYTE(v52) = 0;
    v55 = 0;
    if (v14)
    {
      *(_QWORD *)&v53[7] = *(_QWORD *)((char *)v72 + 7);
      v52 = v1;
      *(_QWORD *)v53 = v72[0];
      v54 = v32;
      v72[0] = 0;
      *(_QWORD *)((char *)v72 + 7) = 0;
      v55 = 1;
      v32 = 0;
      v1 = 0;
    }
    v56 = 1;
  }
  *(_QWORD *)v77 = &unk_24CA1DDD0;
  if (*(_QWORD *)&v77[64])
  {
    *(_QWORD *)&v77[72] = *(_QWORD *)&v77[64];
    operator delete(*(void **)&v77[64]);
  }
  if (*(_QWORD *)&v77[40])
  {
    *(_QWORD *)&v77[48] = *(_QWORD *)&v77[40];
    operator delete(*(void **)&v77[40]);
  }
  v19 = *(_QWORD *)&v77[16];
  *(_QWORD *)&v77[16] = 0;
  if (v19)
    (*(void (**)(void))&v77[24])();
  v20 = v44;
  v21 = v56;
  if (v56)
  {
    v22 = v49[31];
    if (v49[31])
    {
      *(_QWORD *)v57 = *(_QWORD *)&v49[15];
      *(_QWORD *)&v57[8] = v49[23];
      v22 = 1;
    }
    else
    {
      v57[0] = 0;
    }
    v57[16] = v22;
    sub_20FCF2D18((unsigned __int8 *)v51, (uint64_t)&v57[24]);
    v23 = v57[0];
    *(_OWORD *)v77 = *(_OWORD *)&v57[1];
    *(_QWORD *)&v77[15] = *(_QWORD *)&v57[16];
    *(_OWORD *)&v77[23] = *(_OWORD *)&v57[24];
    *(_OWORD *)&v77[39] = *(_OWORD *)&v57[40];
    *(_OWORD *)&v77[55] = v58;
    *(_OWORD *)&v77[71] = v59;
    if (v60[24])
    {
      LOBYTE(v4) = v60[0];
      v71[0] = *(_OWORD *)&v60[1];
      *(_QWORD *)((char *)v71 + 15) = *(_QWORD *)&v60[16];
      v24 = 1;
      if (!v56)
        goto LABEL_56;
    }
    else
    {
      v24 = 0;
      LOBYTE(v4) = 0;
      if (!v56)
        goto LABEL_56;
    }
    if (v55 && v54 < 0)
      operator delete(v52);
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
LABEL_56:
  if (v9 && v14 && v32 < 0)
    operator delete(v1);
  v25 = v43[0];
  v43[0] = 0;
  if (v25)
  {
    sub_20EB911C0((uint64_t *)v25 + 1, *v25);
    MEMORY[0x212BC6398](v25, 0x1022C40B06DCE69);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  sub_20FD23E60(v2);
  *(_QWORD *)v2 = v20;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 128) = 0;
  if (v21)
  {
    *(_BYTE *)(v2 + 8) = v23;
    *(_OWORD *)(v2 + 9) = *(_OWORD *)v77;
    *(_QWORD *)(v2 + 24) = *(_QWORD *)&v77[15];
    *(_OWORD *)(v2 + 32) = *(_OWORD *)&v77[23];
    *(_OWORD *)(v2 + 48) = *(_OWORD *)&v77[39];
    *(_OWORD *)(v2 + 64) = *(_OWORD *)&v77[55];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)&v77[71];
    *(_BYTE *)(v2 + 96) = 0;
    *(_BYTE *)(v2 + 120) = 0;
    if (v24)
    {
      *(_BYTE *)(v2 + 96) = (_BYTE)v4;
      *(_OWORD *)(v2 + 97) = v71[0];
      *(_QWORD *)(v2 + 112) = *(_QWORD *)((char *)v71 + 15);
      *(_BYTE *)(v2 + 120) = 1;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  *(_BYTE *)(v2 + 136) = 1;
  *(_BYTE *)(v2 + 144) = 1;
}

void sub_20FD23D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t *a39)
{
  uint64_t v39;

  if (a18 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A6C1A8);
  __cxa_guard_abort(&qword_254A6C198);
  if (LOBYTE(STACK[0x2E0]) && SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  sub_2101FF284(v39 - 224);
  sub_2101F8734(&a39);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

void sub_20FD23E60(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 120) || (*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_17;
      v2 = (void **)(a1 + 96);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 112))
        goto LABEL_17;
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(char *)(a1 + 103) < 0)
          operator delete(*(void **)(a1 + 80));
        if (*(char *)(a1 + 71) < 0)
          operator delete(*(void **)(a1 + 48));
      }
      if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_17;
      v2 = (void **)(a1 + 16);
    }
    operator delete(*v2);
LABEL_17:
    *(_BYTE *)(a1 + 144) = 0;
  }
}

void sub_20FD23EFC(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 v15;
  uint64_t v16;

  sub_2101FF2E8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v15 = 0;
  sub_2100DA8B0(v7, &v15);
  if (DWORD1(v15))
    goto LABEL_16;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v15 = 0;
  sub_2100DA8B0(v9, &v15);
  v10 = v15;
  if (DWORD1(v15))
  {
LABEL_16:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    sub_20FD240F4();
    sub_20E9F5C70((std::string *)&xmmword_254A6C2B8, v10, 1u);
  }
LABEL_9:
  sub_2101FF2E8(a2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)a3;
  if (v11)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a2))
    {
LABEL_11:
      *(_QWORD *)&v15 = 0;
      BYTE8(v15) = 0;
      v16 = *(_QWORD *)(a2 + 8);
      sub_20FD242AC((int *)&v16, a2, (uint64_t)&v15);
      *(_OWORD *)(a3 + 16) = v15;
      *(_BYTE *)(a3 + 32) = 1;
      goto LABEL_15;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a2))
      goto LABEL_11;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 32))
    *(_BYTE *)(a3 + 32) = 0;
LABEL_15:
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 16);
  *(_QWORD *)(a2 + 48) = v12 - 16;
  *(_QWORD *)(a2 + 72) = v13 - 16;
}

void sub_20FD240F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1B0))
  {
    sub_20FD241AC();
    if (byte_254A6C2FF < 0)
    {
      sub_20E860C04(&xmmword_254A6C2B8, (void *)xmmword_254A6C2E8, *((unint64_t *)&xmmword_254A6C2E8 + 1));
    }
    else
    {
      xmmword_254A6C2B8 = xmmword_254A6C2E8;
      qword_254A6C2C8 = unk_254A6C2F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C2B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1B0);
  }
}

void sub_20FD24194(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1B0);
  _Unwind_Resume(a1);
}

void sub_20FD241AC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::EventInfoSample]", qword_254A6C2D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C2D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C1C0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C1C0))
    {
      sub_21023CD84((uint64_t)qword_254A6C2D0, (uint64_t)&xmmword_254A6C2E8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C2E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C1C0);
    }
  }
}

void sub_20FD2427C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1C0);
  _Unwind_Resume(a1);
}

void sub_20FD24294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1B8);
  _Unwind_Resume(a1);
}

void sub_20FD242AC(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_2101FF2E8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_2100DA8B0(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_2100DA8B0(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_20FD2441C();
        sub_20E9F5C70((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_20FD24618(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

__int128 *sub_20FD2441C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55058);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55058))
    return &xmmword_254A55040;
  v2 = (char *)sub_20FD244F8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55040, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55050 = *((_QWORD *)v2 + 2);
    xmmword_254A55040 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55040, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55058);
  return &xmmword_254A55040;
}

void sub_20FD244E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55058);
  _Unwind_Resume(a1);
}

void *sub_20FD244F8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55078);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55078))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::timeio::TimestampSample]", qword_254A55060);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55060, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55078);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55098);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55098))
    return &unk_254A55080;
  sub_21023CD84((uint64_t)qword_254A55060, (uint64_t)&unk_254A55080);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55080, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55098);
  return &unk_254A55080;
}

void sub_20FD245E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55098);
  _Unwind_Resume(a1);
}

void sub_20FD24600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55078);
  _Unwind_Resume(a1);
}

void sub_20FD24618(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2100DA9F8(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20FD24770(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2100DA9F8(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20FD24770(a1, &v13);
  }
}

void sub_20FD24770(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_2100DADB0(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_21023865C(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_210233400((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v9 + 128);
    MEMORY[0x212BC6398](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_2100DA8B0(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA1FAE0;
      __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_20FD2493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FD249C8(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[2];
  uint64_t v15;

  sub_2101FF2E8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14[0] = 0;
  sub_2100DA8B0(v7, v14);
  if (HIDWORD(v14[0]))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14[0] = 0;
  sub_2100DA8B0(v9, v14);
  v10 = v14[0];
  if (HIDWORD(v14[0]))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v14[0]) >= 2)
  {
    sub_20FD24B54();
    sub_20E9F5C70((std::string *)&xmmword_254A6C300, v10, 1u);
  }
LABEL_9:
  v14[0] = a3;
  v14[1] = a3 + 128;
  sub_2101FF2E8(a2);
  v15 = a2;
  sub_20FD24D0C((uint64_t)v14, &v15);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20FD24B54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1C8))
  {
    sub_20FD24C0C();
    if (byte_254A6C347 < 0)
    {
      sub_20E860C04(&xmmword_254A6C300, (void *)xmmword_254A6C330, *((unint64_t *)&xmmword_254A6C330 + 1));
    }
    else
    {
      xmmword_254A6C300 = xmmword_254A6C330;
      qword_254A6C310 = unk_254A6C340;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C300, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1C8);
  }
}

void sub_20FD24BF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1C8);
  _Unwind_Resume(a1);
}

void sub_20FD24C0C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1D0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::RunOptionsSample]", qword_254A6C318);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C318, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1D0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C1D8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C1D8))
    {
      sub_21023CD84((uint64_t)qword_254A6C318, (uint64_t)&xmmword_254A6C330);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C330, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C1D8);
    }
  }
}

void sub_20FD24CDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1D8);
  _Unwind_Resume(a1);
}

void sub_20FD24CF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1D0);
  _Unwind_Resume(a1);
}

void sub_20FD24D0C(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD *exception;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v4 = *(_OWORD **)a1;
  v5 = *a2;
  v6 = *(unsigned __int8 *)(*a2 + 104);
  *(_OWORD *)(*a2 + 88) = *(_OWORD *)*(_QWORD *)a1;
  if (v6)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v5))
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)(v5 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v5))
    {
LABEL_3:
      *(_QWORD *)&v23 = "size_limit";
      *((_QWORD *)&v23 + 1) = 10;
      v24 = 0uLL;
      *(_QWORD *)&v25 = "duration_limit";
      *((_QWORD *)&v25 + 1) = 14;
      v26 = 0uLL;
      *(_QWORD *)&v27 = "time_point_limit";
      *((_QWORD *)&v27 + 1) = 16;
      LOBYTE(v28) = 0;
      LOBYTE(v29) = 0;
      v7 = *(_DWORD *)(v5 + 8);
      sub_2101FF2E8(v5);
      v8 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "version";
      *(_QWORD *)(v5 + 96) = 7;
      if (!v8)
        *(_BYTE *)(v5 + 104) = 1;
      v9 = (char *)sub_2101FF5A0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      v30[0] = 0;
      sub_2100DA8B0(v9, v30);
      if (!HIDWORD(v30[0]))
      {
        if (v7 != 2)
        {
LABEL_11:
          v30[0] = &v23;
          v30[1] = &v25;
          v30[2] = &v27;
          sub_2101FF2E8(v5);
          v31 = v5;
          sub_20FD25170((uint64_t)v30, &v31);
          v12 = *(_QWORD *)(v5 + 48);
          *(_QWORD *)(v5 + 32) = *(_QWORD *)(v12 - 8);
          v13 = *(_QWORD *)(v5 + 72);
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(v13 - 8);
          *(_QWORD *)(v5 + 48) = v12 - 8;
          *(_QWORD *)(v5 + 72) = v13 - 8;
          *(_QWORD *)(v5 + 32) = *(_QWORD *)(v12 - 16);
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v5 + 48) = v12 - 16;
          *(_QWORD *)(v5 + 72) = v13 - 16;
          v14 = v25;
          v15 = v24;
          v4[1] = v23;
          v16 = v29;
          v17 = v28;
          v4[5] = v27;
          v4[6] = v17;
          *((_QWORD *)v4 + 14) = v16;
          v4[2] = v15;
          v4[3] = v14;
          v4[4] = v26;
          *((_BYTE *)v4 + 120) = 1;
          goto LABEL_15;
        }
        v10 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "min_version";
        *(_QWORD *)(v5 + 96) = 11;
        if (!v10)
          *(_BYTE *)(v5 + 104) = 1;
        v11 = (char *)sub_2101FF5A0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        v30[0] = 0;
        sub_2100DA8B0(v11, v30);
        if (!HIDWORD(v30[0]))
        {
          if (LODWORD(v30[0]) >= 2)
          {
            v22 = v30[0];
            sub_20FD24FB8();
            sub_20E9F5C70((std::string *)&xmmword_254A6C348, v22, 1u);
          }
          goto LABEL_11;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA1FAE0;
      __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(v5 + 112);
  if (*((_BYTE *)v4 + 120))
    *((_BYTE *)v4 + 120) = 0;
LABEL_15:
  v18 = *(_OWORD **)(a1 + 8);
  v19 = *a2;
  v20 = *(unsigned __int8 *)(*a2 + 104);
  *(_OWORD *)(*a2 + 88) = *v18;
  if (!v20)
    *(_BYTE *)(v19 + 104) = 1;
  sub_20FD25354((uint64_t *)v19, (uint64_t)(v18 + 1));
}

