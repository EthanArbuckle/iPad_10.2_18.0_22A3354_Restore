void sub_20FDEA180(uint64_t (**a1)(), __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  char v14;
  uint64_t (*v15)();
  uint64_t (*v16)();
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char v44[8];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  std::ios_base v65;
  uint64_t v66;
  int v67;
  uint64_t (**v68)();
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __int16 v75;

  v43 = *a2;
  v44[0] = 0;
  v52 = -1;
  v3 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, __int128 *))off_24CA08180[v3])(&v68, v44, a2 + 2);
    v52 = v3;
  }
  if (a1[5])
  {
    v4 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v5 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v5 + 1);
  if (v5 != (uint64_t (*)())-1)
  {
    v6 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v7 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v7 + 1);
  if (v7 != (uint64_t (*)())-1)
  {
    v8 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v8, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v9 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v9 + 1);
  if (v9 != (uint64_t (*)())-1)
  {
    v10 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v10, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v11 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v11 + 1);
  if (v11 != (uint64_t (*)())-1)
  {
    v12 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v12, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v13 = a1[5];
  v14 = *((_BYTE *)a1 + 34);
  a1[5] = (uint64_t (*)())((char *)v13 + 1);
  if (v13 != (uint64_t (*)())-1)
  {
    v15 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20E86A980(v15, (uint64_t)&v53, 1);
  }
  v16 = a1[3];
  LOBYTE(v53) = v14;
  sub_20E86A980(v16, (uint64_t)&v53, 1);
  a1[5] = (uint64_t (*)())((char *)a1[5] + 1);
  if ((unsigned __int16)v43 == 1)
  {
    if (!v52)
    {
      v53 = &off_24C9C0338;
      v18 = v45;
      v19 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        v22 = v49;
        v23 = v50;
        v24 = v51;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      else
      {
        v22 = v49;
        v23 = v50;
        v24 = v51;
      }
      v54 = v18;
      v55 = v19;
      v56 = v47;
      v57 = v48;
      v58 = v22;
      v59 = v23;
      v60 = v24;
      if (v19)
      {
        v34 = (unint64_t *)&v19->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_40;
    }
    if (v52 == 1)
    {
      v53 = &off_24C9C0338;
      sub_20FF60B50((uint64_t)v44, (uint64_t)&v54);
LABEL_40:
      sub_20FF59134(a1, (uint64_t)&v53);
      v36 = v55;
      if (!v55)
        goto LABEL_54;
      v37 = (unint64_t *)&v55->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_53;
    }
LABEL_59:
    sub_20E877AB8();
  }
  v17 = sub_20FF58C10((unsigned __int16)v43);
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_59;
    v68 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v44, (uint64_t)&v69);
  }
  else
  {
    v68 = &off_24C9C0338;
    v26 = v45;
    v27 = v46;
    if (v46)
    {
      v28 = (unint64_t *)&v46->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = v49;
      v31 = v50;
      v32 = v51;
      do
        v33 = __ldxr(v28);
      while (__stxr(v33 + 1, v28));
    }
    else
    {
      v30 = v49;
      v31 = v50;
      v32 = v51;
    }
    v69 = v26;
    v70 = v27;
    v71 = v47;
    v72 = v48;
    v73 = v30;
    v74 = v31;
    v75 = v32;
    if (v27)
    {
      v39 = (unint64_t *)&v27->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v53 = a1;
  std::streambuf::basic_streambuf();
  v54 = MEMORY[0x24BEDB848] + 16;
  v61 = 0u;
  v62 = 0u;
  v63 = 24;
  v64 = MEMORY[0x24BEDB828] + 24;
  v65.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v65, &v54);
  v66 = 0;
  v67 = -1;
  sub_20FDE6EC4(&v68, (char *)&v64, v17);
  sub_20FDEA760((uint64_t *)&v53);
  v36 = v70;
  if (!v70)
    goto LABEL_54;
  v41 = (unint64_t *)&v70->__shared_owners_;
  do
    v38 = __ldaxr(v41);
  while (__stlxr(v38 - 1, v41));
LABEL_53:
  if (v38)
  {
LABEL_54:
    v42 = v52;
    if (v52 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  v42 = v52;
  if (v52 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))off_24CA080B0[v42])(&v53, v44);
}

void sub_20FDEA644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  sub_20FDEA760(&a22);
  sub_20EA69690(v22 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEA668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x212BC6290](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v37 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEA6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEA6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDEA760(uint64_t *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  std::string::size_type v16[2];
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v19 >= 0)
    v10 = HIBYTE(v19);
  else
    v10 = v18;
  v11 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    v12 = *(_QWORD **)(v11 + 24);
    LOBYTE(v16[0]) = *(_BYTE *)(v11 + 32);
    sub_20E86A980(v12, (uint64_t)v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(v11 + 40);
  if (SHIBYTE(v19) < 0)
  {
    v13 = __dst;
    if (v10 && !__dst)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = (void **)&__dst;
  }
  v14 = *a1;
  v16[0] = v10;
  v16[1] = (std::string::size_type)v13;
  sub_20E9E7678(v14, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

void sub_20FDEA96C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDEAA88(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDEAA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FDEAA88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  uint64_t v14;
  char *p_src;
  int64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  int64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t __src;
  uint64_t v40;

  v6 = (char *)(a2 + 8);
  LODWORD(__src) = 2;
  v7 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2100B6A04((_QWORD *)a1);
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  LOBYTE(__src) = *(_BYTE *)(a2 + 16);
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v9 = *(unsigned __int8 *)(a2 + 47);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 32);
    __src = v9;
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
    if (*(char *)(a2 + 47) < 0)
    {
      v10 = *(char **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if (!v10)
      {
        if (v11)
        {
          v13 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
          v10 = 0;
          if (v13)
            goto LABEL_57;
        }
      }
    }
    else
    {
      v10 = (char *)(a2 + 24);
      v11 = *(unsigned __int8 *)(a2 + 47);
    }
    result = sub_2100B8FD4(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
    if (a3 < 4)
      return result;
  }
  else
  {
    LOBYTE(__src) = 0;
    result = sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (a3 < 4)
      return result;
  }
  result = sub_20FDEB098(a1, (char *)(a2 + 56));
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      LOBYTE(__src) = 1;
      sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v14 = *(unsigned __int8 *)(a2 + 103);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 88);
      __src = v14;
      sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if ((*(char *)(a2 + 103) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 80);
        v16 = *(unsigned __int8 *)(a2 + 103);
LABEL_27:
        v21 = *(char **)(a1 + 32);
        v22 = &p_src[v16];
        v23 = v7;
        v24 = v16;
        return sub_2100B8FD4(v23, v21, p_src, v22, v24);
      }
      p_src = *(char **)(a2 + 80);
      v16 = *(_QWORD *)(a2 + 88);
      if (p_src)
        goto LABEL_27;
      if (!v16)
        goto LABEL_27;
      v20 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
      p_src = 0;
      if (!v20)
        goto LABEL_27;
LABEL_57:
      abort();
    }
LABEL_30:
    LOBYTE(__src) = 0;
    v21 = *(char **)(a1 + 32);
    v22 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v23 = v7;
    v24 = 1;
    return sub_2100B8FD4(v23, v21, p_src, v22, v24);
  }
  if (a3 < 6)
    return result;
  if (!*(_BYTE *)(a2 + 104))
  {
    LOBYTE(__src) = 0;
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_37;
LABEL_29:
    LOBYTE(__src) = 0;
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (!*(_BYTE *)(a2 + 168))
      goto LABEL_30;
    goto LABEL_45;
  }
  LOBYTE(__src) = 1;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v17 = *(unsigned __int8 *)(a2 + 103);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 88);
  __src = v17;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 103) < 0)
  {
    v18 = *(char **)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    if (!v18)
    {
      if (v19)
      {
        v25 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v18 = 0;
        if (v25)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v18 = (char *)(a2 + 80);
    v19 = *(unsigned __int8 *)(a2 + 103);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v18, &v18[v19], v19);
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_29;
LABEL_37:
  LOBYTE(__src) = 1;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v26 = *(unsigned __int8 *)(a2 + 135);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 120);
  __src = v26;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 135) < 0)
  {
    v27 = *(char **)(a2 + 112);
    v28 = *(_QWORD *)(a2 + 120);
    if (!v27)
    {
      if (v28)
      {
        v29 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v27 = 0;
        if (v29)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v27 = (char *)(a2 + 112);
    v28 = *(unsigned __int8 *)(a2 + 135);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v27, &v27[v28], v28);
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_30;
LABEL_45:
  LOBYTE(__src) = 1;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  result = sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&v38, (char *)&__src, 8);
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152) - v30;
  if (v31)
  {
    for (i = 24 * (v31 / 24); i; i -= 24)
    {
      v35 = *(unsigned __int8 *)(v30 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v30 + 8);
      __src = v35;
      sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if (*(char *)(v30 + 23) < 0)
      {
        v34 = *(char **)v30;
        v33 = *(_QWORD *)(v30 + 8);
        if (*(_QWORD *)v30)
          v36 = 1;
        else
          v36 = v33 == 0;
        if (!v36)
        {
          v37 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
          v34 = 0;
          if (v37)
            goto LABEL_57;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(v30 + 23);
        v34 = (char *)v30;
      }
      result = sub_2100B8FD4(v7, *(char **)(a1 + 32), v34, &v34[v33], v33);
      v30 += 24;
    }
  }
  return result;
}

char *sub_20FDEB098(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  char v10[3];
  char v11;
  uint64_t v12;

  v3 = a1 + 24;
  if (a2[16])
  {
    __src = 1;
    sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 2;
    sub_2100B8FD4(v3, *(char **)(a1 + 32), (char *)&v9, v10, 4);
    sub_2100B6A04((_QWORD *)a1);
    sub_2100B8FD4(v3, *(char **)(a1 + 32), a2, a2 + 8, 8);
    v11 = a2[8];
    result = sub_2100B8FD4(v3, *(char **)(a1 + 32), &v11, (char *)&v12, 1);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

void sub_20FDEB1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  uint64_t (**__src)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  std::ios_base v53;
  uint64_t v54;
  int v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24CA08180[v3])(&v56, v32, a2 + 32);
    v40 = v3;
  }
  LOWORD(__src) = *(_WORD *)v31;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 2, 2);
  LODWORD(__src) = 2;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2100B6A04((_QWORD *)a1);
  __src = *(uint64_t (***)())&v31[8];
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v42, 8);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &v31[16], &v31[24], 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 10) = *(_QWORD *)(a1 + 32) - v4 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      __src = &off_24C9C0338;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v42 = v6;
      v43 = v7;
      v44 = v35;
      v45 = v36;
      v46 = v10;
      v47 = v11;
      v48 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_28;
    }
    if (v40 == 1)
    {
      __src = &off_24C9C0338;
      sub_20FF60B50((uint64_t)v32, (uint64_t)&v42);
LABEL_28:
      sub_20FF59134((const void *)a1, (uint64_t)&__src);
      v24 = v43;
      if (!v43)
        goto LABEL_42;
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_41;
    }
LABEL_47:
    sub_20E877AB8();
  }
  v5 = sub_20FF58C10(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_47;
    v56 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v32, (uint64_t)&v57);
  }
  else
  {
    v56 = &off_24C9C0338;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v57 = v14;
    v58 = v15;
    v59 = v35;
    v60 = v36;
    v61 = v18;
    v62 = v19;
    v63 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  __src = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v42 = MEMORY[0x24BEDB848] + 16;
  v49 = 0u;
  v50 = 0u;
  v51 = 24;
  v52 = MEMORY[0x24BEDB828] + 24;
  v53.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v53, &v42);
  v54 = 0;
  v55 = -1;
  sub_20FDE6EC4(&v56, (char *)&v52, v5);
  sub_20FDEB704((uint64_t)&__src);
  v24 = v58;
  if (!v58)
    goto LABEL_42;
  v29 = (unint64_t *)&v58->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_41:
  if (v26)
  {
LABEL_42:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_43:
    ((void (*)(uint64_t (***)(), char *))off_24CA080B0[v30])(&__src, v32);
}

void sub_20FDEB5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_20FDEB704((uint64_t)&a22);
  sub_20EA69690(v22 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEB60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x212BC6290](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v37 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEB650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEB66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDEB704(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  int64_t v12;
  int64_t v14;
  char *__dst;
  size_t v16;
  int64_t v17;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v17);
  if (v17 < 0)
    v10 = v16;
  v14 = v10;
  sub_2100B8FD4(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), (char *)&v14, (char *)&__dst, 8);
  if (SHIBYTE(v17) < 0)
  {
    v12 = v14;
    v11 = __dst;
    if (!__dst && v14)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (char *)&__dst;
    v12 = v14;
  }
  sub_2100B8FD4(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), v11, &v11[v12], v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20FDEB904(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDEBA20(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDEBA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDEBA20(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_20FDEBF8C((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_20FDEBF8C((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_20E878290(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_20FDE5DC0(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_20FDEBF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDEBF8C(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    v6 = *(_QWORD *)a2;
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 72))(a2, a3);
    v7 = (unsigned __int8 *)(a3 + 8);
    sub_20FDEC0A0(a2, &v7);
    return;
  }
  if (*a1 == 2)
  {
    LODWORD(v7) = 2;
    (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
    v6 = *(_QWORD *)a2;
    if (*a1 < 1)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)a2;
  }
  (*(void (**)(_BYTE *))(v6 + 16))(a2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
  v7 = (unsigned __int8 *)(a3 + 8);
  sub_20FDEC0A0(a2, &v7);
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20FDEC0A0(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20FD2A5A0((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20E877AB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20FDEC194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDEC1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDEC1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDEC1D8(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  char v41;
  char *v42;
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  std::ios_base v55;
  uint64_t v56;
  int v57;
  uint64_t (**v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  __int16 v65;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24CA08180[v3])(&v58, v32, a2 + 32);
    v40 = v3;
  }
  if ((a1[3] & 2) != 0)
  {
    LODWORD(v46) = 0;
    sub_20FDE696C((uint64_t)&v42, (uint64_t)&v43, (unsigned __int16 *)v31);
    if ((_DWORD)v46 == -1)
      sub_20E877AB8();
    v42 = &v41;
    ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t (***)()))off_24CA08168[v46])(&v58, &v42, &v43);
    if ((_DWORD)v46 != -1)
      ((void (*)(char **, uint64_t (***)()))off_24CA08150[v46])(&v42, &v43);
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 144))(a1, &v58);
    if (SHIBYTE(v60) < 0)
      operator delete(v58);
  }
  else
  {
    LOWORD(v43) = *(_WORD *)v31;
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 96))(a1, &v43);
  }
  v4 = a1[2];
  LODWORD(v43) = 2;
  (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
  if (v4 < 1)
  {
    sub_20FDEC854(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
  }
  else
  {
    if (v4 == 2)
    {
      LODWORD(v43) = 2;
      (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
    }
    (*(void (**)(int *))(*(_QWORD *)a1 + 16))(a1);
    sub_20FDEC854(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
    (*(void (**)(int *))(*(_QWORD *)a1 + 24))(a1);
  }
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      v43 = &off_24C9C0338;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v44 = v6;
      v45 = v7;
      v46 = v35;
      v47 = v36;
      v48 = v10;
      v49 = v11;
      v50 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_40;
    }
    if (v40 == 1)
    {
      v43 = &off_24C9C0338;
      sub_20FF60B50((uint64_t)v32, (uint64_t)&v44);
LABEL_40:
      sub_20FF59134(a1, (uint64_t)&v43);
      v24 = v45;
      if (!v45)
        goto LABEL_54;
      v25 = (unint64_t *)&v45->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_53;
    }
LABEL_60:
    sub_20E877AB8();
  }
  v5 = sub_20FF58C10(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_60;
    v58 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v32, (uint64_t)&v59);
  }
  else
  {
    v58 = &off_24C9C0338;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v59 = v14;
    v60 = v15;
    v61 = v35;
    v62 = v36;
    v63 = v18;
    v64 = v19;
    v65 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v43 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v44 = MEMORY[0x24BEDB848] + 16;
  v51 = 0u;
  v52 = 0u;
  v53 = 24;
  v54 = MEMORY[0x24BEDB828] + 24;
  v55.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v55, &v44);
  v56 = 0;
  v57 = -1;
  sub_20FDE6EC4(&v58, (char *)&v54, v5);
  sub_20FDEC988(&v43);
  v24 = v60;
  if (!v60)
    goto LABEL_54;
  v29 = (unint64_t *)&v60->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_53:
  if (v26)
  {
LABEL_54:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))off_24CA080B0[v30])(&v43, v32);
}

void sub_20FDEC6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  sub_20FDEC988(&a24);
  sub_20EA69690(v24 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEC718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x212BC6290](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v39 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEC75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEC778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEC854(_BYTE *a1, uint64_t *a2)
{
  void *__p[2];
  char v4;
  _QWORD v5[3];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_20FDE6C20((uint64_t)&v8, (uint64_t)v5, a2);
    if (v6 == -1)
      sub_20E877AB8();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _QWORD *))off_24CA08168[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _QWORD *))off_24CA08150[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v5);
  }
}

void sub_20FDEC944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDEC960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDEC974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDEC988(_QWORD *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  _QWORD v15[2];
  size_t v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v19);
  if (v19 < 0)
    v10 = v18;
  v16 = v10;
  (*(void (**)(_QWORD, size_t *))(*(_QWORD *)*a1 + 120))(*a1, &v16);
  if (SHIBYTE(v19) < 0)
  {
    v12 = v16;
    v11 = __dst;
    if (!__dst && v16)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (void **)&__dst;
    v12 = v16;
  }
  v13 = *a1;
  v15[0] = v12;
  v15[1] = v11;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 272))(v13, v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

uint64_t sub_20FDECB7C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DB048(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20FDECC78((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FDECE68(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FDECC78(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20FDEE040(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20E860C04(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20FDEDE2C(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20FDECE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDECE68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_2100DB048(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_20FDED348(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_20FDED690((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_20FDED690((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_20FDED7B0((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FDED690((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FDED690((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FDED690((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FDEDCD0((uint64_t *)a1, a2 + 144);
  }
}

void sub_20FDED128(char *a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3;
  size_t v4;
  char *v5;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int v18;
  std::string v19;

  v3 = a1[23] < 0;
  if (a1[23] >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  if (!v4 || ((v7 = memchr(v5, 92, v4)) != 0 ? (v8 = v7 - v5 == -1) : (v8 = 1), v8))
  {
    sub_20E9E507C(v5, v4, ";", 1, 1, (uint64_t)a2);
    return;
  }
  v9 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(&v19, 0, sizeof(v19));
  do
  {
    v11 = *(char **)a1;
    if (!v3)
      v11 = a1;
    v12 = v11[v9];
    if (v12 == 59)
    {
      v13 = a2[1];
      if (v13 >= a2[2])
      {
        a2[1] = sub_20E8ADE68(a2, (__int128 *)&v19);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
      }
      else
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04((_BYTE *)a2[1], v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        a2[1] = v13 + 24;
        a2[1] = v13 + 24;
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_27:
          *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
          v19.__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_17;
        }
      }
      v19.__r_.__value_.__l.__size_ = 0;
      *v19.__r_.__value_.__l.__data_ = 0;
    }
    else
    {
      if (v12 == 92)
        ++v9;
      std::string::push_back(&v19, v11[v9]);
    }
LABEL_17:
    ++v9;
    v3 = a1[23] < 0;
    v10 = a1[23];
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a1 + 1);
  }
  while (v9 < v10);
  v15 = a2[1];
  if (v15 >= a2[2])
  {
    v17 = sub_20E8780F0((void **)a2, (uint64_t)&v19);
    v18 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    a2[1] = (uint64_t)v17;
    if (v18 < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
    *(_OWORD *)v15 = v16;
    a2[1] = v15 + 24;
  }
}

void sub_20FDED314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_20E89FB98(v15);
  _Unwind_Resume(a1);
}

void sub_20FDED348(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2100DB190(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20FDED4A0((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2100DB190(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20FDED4A0((uint64_t *)a1, &v13);
  }
}

void sub_20FDED4A0(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_210233400((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDED604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDED690(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2101FFA90(a1))
  {
    v4 = (void **)sub_2101FFA90(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_2100DB548(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20FDED794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDED7B0(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_2101FF7D8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_2100DB048(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2101FFA90((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_2100DB048(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_20FD2441C();
        sub_20E9F5C70((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_20FDED920(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

void sub_20FDED920(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2100DB190(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20FDEDA78(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2100DB190(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20FDEDA78(a1, &v13);
  }
}

void sub_20FDEDA78(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_2100DB548(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_21023865C(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_210233400((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v9 + 128);
    MEMORY[0x212BC6398](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_2100DB048(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA1FAE0;
      __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_20FDEDC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDEDCD0(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2101FFA90(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_2101FFA90(a1);
    ++a1[14];
    sub_210201710((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20FDEDE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDEDE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 24;
  v6 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 47) = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = (void **)(a1 + 80);
  v11 = (__int128 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v17 = *v11;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)v10 = v17;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v13 = a1 + 112;
      v14 = (__int128 *)(a2 + 112);
      v15 = *(unsigned __int8 *)(a1 + 136);
      if (v15 == *(unsigned __int8 *)(a2 + 136))
        goto LABEL_22;
LABEL_27:
      if (v15)
      {
        if (*(char *)(a1 + 135) < 0)
          operator delete(*(void **)v13);
        *(_BYTE *)(a1 + 136) = 0;
      }
      else
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(a1 + 136) = 1;
      }
      goto LABEL_32;
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v10);
    *(_BYTE *)(a1 + 104) = 0;
LABEL_21:
    v13 = a1 + 112;
    v14 = (__int128 *)(a2 + 112);
    v15 = *(unsigned __int8 *)(a1 + 136);
    if (v15 == *(unsigned __int8 *)(a2 + 136))
      goto LABEL_22;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_21;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v12 = *v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v12;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v13 = a1 + 112;
  v14 = (__int128 *)(a2 + 112);
  v15 = *(unsigned __int8 *)(a1 + 136);
  if (v15 != *(unsigned __int8 *)(a2 + 136))
    goto LABEL_27;
LABEL_22:
  if (v15)
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)v13);
    v16 = *v14;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v13 = v16;
    *(_BYTE *)(a2 + 135) = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
LABEL_32:
  sub_20FD203D4(a1 + 144, a2 + 144);
  return a1;
}

void sub_20FDEE040(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_2100DB048(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_20FDED348(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FDED690((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_20FDEE17C(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_2100DB048(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_20FDEECD8((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_2101FF7D8(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_2100DB048(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_20FDEEEC8((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_2101FFA90((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_210200E84(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_20FDEEEC8((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_2101FFA90((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_210200E84(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_2101FF7D8(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24CA0F530[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C9FC408;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20FF58DCC((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_2101FF7D8(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_20FF58C10(v32);
      sub_20FDF0094((uint64_t)v65, (uint64_t *)a1);
      sub_20FDEF0B4(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v44])(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C9FC408;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)&v65[8]);
  sub_20FF564E0((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_20FDEECD8((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_2100DB048(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24CA1FAE0;
    __cxa_throw(v58, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_20FDEEEC8((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_210200E84(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_20FF58C10(*(unsigned __int16 *)v59);
    sub_20FDF0094((uint64_t)v65, (uint64_t *)a1);
    sub_20FDEF0B4(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))off_24CA080B0[v63])(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24C9FC408;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_20FF561B8((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24CA0F530[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24C9FC408;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_20FF58DCC((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v53])(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24CA08220[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24CA08230[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24CA080B0[v69])(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))off_24CA080B0[v63])(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_20FDEEB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24CA080B0[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_20FDEECD8(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF5801C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDEEE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDEEEC8(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_20FF58688((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDEF028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDEF0B4(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::runtime_error *exception;
  uint64_t v13;
  std::string v14;
  _BYTE v15[8];
  uint64_t v16;
  void *v17;
  __int128 v18;
  _BYTE v19[22];
  char v20;
  void *__p;
  char v22;
  char v23;
  char v24;
  unsigned __int8 v25;

  sub_20FDEF274(a1, a2, (uint64_t)v15);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = sub_20ED3C7D0((uint64_t)v15);
    sub_2102341F0(v13, &v14);
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v5 = v16;
  v4 = (char *)v17;
  *(_QWORD *)a3 = &off_24C9FC408;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = v25;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v19[14];
    if (!v8)
    {
      if (v24)
      {
        if (v23)
        {
          if (v22 < 0)
            operator delete(__p);
          if (v20 < 0)
            operator delete(*(void **)&v19[8]);
        }
        if (v19[0])
        {
          if (SHIBYTE(v18) < 0)
            operator delete(v17);
        }
      }
      return;
    }
  }
  else
  {
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v19[14];
  }
  v9 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v10 = (unint64_t *)((char *)v17 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20FDEF234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_20FDEFFB8((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_20FDEF274(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  void *__p;
  char v14;
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t (**v34)();
  _OWORD v35[2];
  _BYTE v36[22];

  v34 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)v35);
  sub_20FDEF4B8((uint64_t)&v34, a1, a2, (uint64_t)&v23);
  if (v33)
  {
    *(_QWORD *)a3 = &off_24C9FC408;
    *(_OWORD *)(a3 + 8) = v35[0];
    v35[0] = 0uLL;
    *(_OWORD *)(a3 + 24) = v35[1];
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v36;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v36[14];
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    v12 = v23;
    v9 = sub_20E89EFE4(&__p, &v24);
    *(_OWORD *)a3 = v12;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v22)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v10 = v15;
      if (v15)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
        *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v21)
      {
        v11 = v18;
        *(_QWORD *)(a3 + 64) = v17;
        *(_OWORD *)(a3 + 48) = v16;
        v16 = 0uLL;
        *(_QWORD *)(a3 + 72) = v11;
        *(_OWORD *)(a3 + 80) = v19;
        *(_QWORD *)(a3 + 96) = v20;
        v17 = 0;
        v19 = 0uLL;
        v20 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v10 && v14 < 0)
        operator delete(__p);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (!v33 && v32)
    {
      if (v31)
      {
        if (v30 < 0)
          operator delete(v29);
        if (v28 < 0)
          operator delete(v27);
      }
      if (v26 && v25 < 0)
        operator delete((void *)v24);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v35[0] + 1);
  if (*((_QWORD *)&v35[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v35[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDEF488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20E89ED1C((uint64_t)va);
  sub_20F282C7C(v17 - 128);
  _Unwind_Resume(a1);
}

void sub_20FDEF4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F282C7C(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_20FDEF4B8(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  _QWORD *exception;
  void *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  void *__p;
  char v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  char v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v48[0] = &off_24CA081A0;
  v48[1] = a1;
  v49 = v48;
  sub_20FF4B2DC(v48, 0, a2, a3, (uint64_t)&v35);
  v6 = v49;
  if (v49 == v48)
  {
    v7 = 4;
    v6 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v45)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v47[0] = "load";
  v47[1] = 4;
  v46 = a3;
  sub_20FF4BB98("Failure during ", (uint64_t)v47, (uint64_t)" from stream with file format ", &v46, (uint64_t)": ");
  if (v45)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  sub_21023590C(&v12, &v35, (uint64_t)&v14);
  v24 = v14;
  v8 = sub_20E89EFE4(&__p, &v15);
  *(_OWORD *)a4 = v24;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v23)
      goto LABEL_28;
    goto LABEL_20;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a4 + 64) = v29;
    *(_OWORD *)(a4 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a4 + 72) = v10;
    *(_OWORD *)(a4 + 80) = v31;
    *(_QWORD *)(a4 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v9 && v26 < 0)
    operator delete(__p);
  if (v23)
  {
LABEL_20:
    if (v22)
    {
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(v18);
    }
    if (v17 && v16 < 0)
      operator delete((void *)v15);
  }
LABEL_28:
  if (v13 < 0)
  {
    operator delete(v12);
    if (v45)
      return;
  }
  else if (v45)
  {
    return;
  }
  if (v44)
  {
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38)
    {
      if (v37 < 0)
        operator delete(v36);
    }
  }
}

void sub_20FDEF798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E89EF58((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_20E89ED1C(v15 - 224);
  _Unwind_Resume(a1);
}

void sub_20FDEF7E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDEF818@<X0>(uint64_t a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unsigned __int8 v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];
  size_t v13[3];
  __int128 v14;
  char v15;
  uint64_t v16;
  void *v17;

  v15 = 0;
  v12[24] = 0;
  memset(v12, 0, 17);
  v16 = 0;
  v17 = 0;
  sub_20EEBFFA4(v13, &v16, &v17, 1, (void **)&v15, 1, 0);
  v11 = 0uLL;
  HIDWORD(v11) = (unsigned __int128)0 >> 96;
  v3 = v13[0];
  v2 = v13[1];
  v4 = v13[2];
  v10 = v14;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9F0580;
  *(_OWORD *)(v5 + 8) = v11;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v12[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v10;
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  *v6 = &off_24C9FC460;
  v6[2] = 0;
  v6[3] = v5;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  v8 = result;
  if ((result & 0xFFFFFF) <= 0x10000)
    v8 = 0;
  v9 = result & 0xFF00;
  if ((result & 0xFF0000) == 0)
    v9 = 0;
  *(_WORD *)(a1 + 52) = v9 & 0xFF00 | v8;
  return result;
}

void sub_20FDEF970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDEF9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20FDEF9CC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FDEF9E8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FDEF9FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA081A0;
  result[1] = v3;
  return result;
}

uint64_t sub_20FDEFA30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA081A0;
  a2[1] = v2;
  return result;
}

double sub_20FDEFA4C@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_20FDEFAD0((uint64_t *)(a1 + 8), a2, *a3, a4);
}

uint64_t sub_20FDEFA58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FDEFAC4()
{
  return &unk_24CA08210;
}

double sub_20FDEFAD0@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  __int128 v20;
  _BYTE v21[38];

  if (!a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ImageIO/include/Kit/ImageIO/ImageIO.h", 387, (uint64_t)"format != img::Format::Dynamic", 30, (uint64_t)"loader must specify the format to load as", 41, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  if (*(_DWORD *)(*a1 + 32) != *a2
    || (*(_DWORD *)(v8 + 56) == a3 ? (v9 = *(_DWORD *)(v8 + 36) == a2[1]) : (v9 = 0), !v9))
  {
    sub_20FDEFE88(v8, a3, (uint64_t)a2);
    v10 = *a1;
    v11 = v20;
    v20 = 0uLL;
    v12 = *(std::__shared_weak_count **)(v10 + 16);
    *(_OWORD *)(v10 + 8) = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(_OWORD *)v21;
    v16 = *(_OWORD *)&v21[16];
    *(_QWORD *)(v10 + 54) = *(_QWORD *)&v21[30];
    *(_OWORD *)(v10 + 40) = v16;
    *(_OWORD *)(v10 + 24) = v15;
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    v8 = *a1;
  }
  sub_20FDEFC58(v8, (uint64_t)&v20);
  *(_QWORD *)a4 = &off_24C9C02C8;
  *(_OWORD *)(a4 + 8) = v20;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v21;
  result = *(double *)&v21[14];
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v21[14];
  *(_BYTE *)(a4 + 120) = 1;
  return result;
}

void sub_20FDEFC58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_20FDEFE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FDEFE88(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v17 = v4;
    v18 = v3;
    v22 = &v17;
    v23 = a3;
    v24 = &v19;
    sub_21019794C(a2);
    v7 = v18;
    if (!v18)
      return;
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9)
      return;
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v19 = v11;
  v20 = v10;
  v14 = *(_DWORD *)(a1 + 56);
  v22 = &v19;
  v23 = a3;
  v24 = (uint64_t *)&v21;
  sub_21019794C(v14);
  v7 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      goto LABEL_17;
  }
}

void sub_20FDEFF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDEFFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDEFFB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_20FDF0094(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2101FFA90(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_2100DB048(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2101FFA90(a2);
  ++a2[14];
  sub_2101FFBA8(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF0230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF029C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

__n128 sub_20FDF02F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9C0338;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20FDF0320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C9FC408;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20FDF0354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24CA080B0[v5])(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24C9C0338;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    *(_OWORD *)(v4 + 38) = *(_OWORD *)(a3 + 38);
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20FDF0450(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24CA080B0[v5])(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24C9FC408;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(v4 + 54) = *(_QWORD *)(a3 + 54);
    *(_OWORD *)(v4 + 40) = v13;
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 1;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v12;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20FDF0564(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 6;
  sub_20E9EDADC(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_20E90A71C(a2 + 2);
  if (v5 >= 6)
    v6 = 6;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_20FDF0654((uint64_t)&v10, a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_20FDF08B0(a2, a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

void sub_20FDF0654(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  char v10[8];
  __int128 v11;
  std::string v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  void **v23;
  char v24;
  __int128 v25;
  std::string v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v25 = 0;
  BYTE8(v25) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  sub_20FDF0B90((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2)
  {
    v10[0] = 0;
    sub_20E9ED7B4(a2[6], v10);
    if (v10[0])
    {
      if (!v27)
      {
        memset(&v26, 0, sizeof(v26));
        v27 = 1;
      }
      sub_20E9EE280(a2[6], &v26);
    }
    else if (v27)
    {
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v27 = 0;
    }
  }
  v11 = v25;
  v12.__r_.__value_.__s.__data_[0] = 0;
  v13 = 0;
  if (v27)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&v12, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    else
      v12 = v26;
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  sub_20FDEDE2C(a3, (uint64_t)v10);
  if (v24)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0)
    operator delete(v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v27)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_20FDF086C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF08B0(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_20FDF0B90((uint64_t)&v14, a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  v15 = 0;
  sub_20E9ED7B4(a1[6], &v15);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    sub_20E9EE280(a1[6], (std::string *)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    v16 = 0;
    sub_20E9ED7B4(a1[6], &v16);
    if (v16)
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      sub_20FDF0B90((uint64_t)&v17, a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      v18 = 0;
      sub_20E9ED7B4(a1[6], &v18);
      if (v18)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20E9EE280(a1[6], (std::string *)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      v19 = 0;
      sub_20E9ED7B4(a1[6], &v19);
      if (v19)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v8 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20E9EE280(a1[6], (std::string *)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v8);
        *(_BYTE *)(a2 + 104) = 0;
      }
      v9 = (void **)(a2 + 112);
      v20 = 0;
      sub_20E9ED7B4(a1[6], &v20);
      if (v20)
      {
        if (!*(_BYTE *)(a2 + 136))
        {
          *v9 = 0;
          *(_QWORD *)(a2 + 120) = 0;
          *(_QWORD *)(a2 + 128) = 0;
          *(_BYTE *)(a2 + 136) = 1;
        }
        sub_20E9EE280(a1[6], (std::string *)(a2 + 112));
      }
      else if (*(_BYTE *)(a2 + 136))
      {
        if (*(char *)(a2 + 135) < 0)
          operator delete(*v9);
        *(_BYTE *)(a2 + 136) = 0;
      }
      v10 = (void **)(a2 + 144);
      v21 = 0;
      sub_20E9ED7B4(a1[6], &v21);
      if (v21)
      {
        if (!*(_BYTE *)(a2 + 168))
        {
          *v10 = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 160) = 0;
          *(_BYTE *)(a2 + 168) = 1;
        }
        sub_20EAC02F0((uint64_t)a1, a2 + 144);
      }
      else if (*(_BYTE *)(a2 + 168))
      {
        v11 = (void **)*v10;
        if (*v10)
        {
          v12 = *(void ***)(a2 + 152);
          v13 = *v10;
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0)
                operator delete(*(v12 - 3));
              v12 -= 3;
            }
            while (v12 != v11);
            v13 = *v10;
          }
          *(_QWORD *)(a2 + 152) = v11;
          operator delete(v13);
        }
        *(_BYTE *)(a2 + 168) = 0;
      }
    }
  }
}

void sub_20FDF0B90(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  LODWORD(v8) = 2;
  sub_20E9EDADC(a2[6], &v8);
  if (v8 <= 1)
  {
    v8 = 0;
    v9 = 0;
    sub_20E9EDD84(a2[6], &v8);
    v10 = 0;
    sub_20E9ED7B4(a2[6], &v10);
    v7 = v10;
    *(_QWORD *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v7;
  }
  else
  {
    sub_20E90A71C(a2 + 2);
    sub_20E9EDD84(a2[6], (_QWORD *)a3);
    LOBYTE(v8) = 0;
    sub_20E9ED7B4(a2[6], &v8);
    *(_BYTE *)(a3 + 8) = v8;
    v5 = a2[4];
    v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    a2[4] -= 16;
  }
}

void sub_20FDF0C98(_QWORD *a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[22];
  unsigned int v40;
  _BYTE v41[40];
  _BYTE v42[22];
  void *__p;
  char v44;
  int v45;
  _QWORD v46[22];
  unsigned __int16 *v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  char v51;

  if (a3 < 2)
  {
    *(_QWORD *)v41 = &off_24C9FC408;
    sub_20FDEF818((uint64_t)&v41[8]);
    sub_20FF564E0((uint64_t)&v35, (uint64_t)v41, 0);
    v18 = *(std::__shared_weak_count **)&v41[16];
    if (*(_QWORD *)&v41[16])
    {
      v19 = (unint64_t *)(*(_QWORD *)&v41[16] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    LODWORD(v37) = 0;
    *(_WORD *)v41 = 0;
    sub_20E9ED948(a1[6], v41);
    LOWORD(v35) = *(_WORD *)v41;
    *(_DWORD *)v41 = 1;
    sub_20E9EDADC(a1[6], v41);
    *(_QWORD *)v41 = 0;
    sub_20E9EDE6C(a1[6], v41);
    *(_QWORD *)&v36 = *(_QWORD *)v41;
    v21 = a1[6];
    sub_20E9EDADC(v21, (_DWORD *)&v36 + 2);
    sub_20E9EDADC(v21, (_DWORD *)&v36 + 3);
    if ((unsigned __int16)v35 == 1)
    {
      sub_20FF561B8((uint64_t *)&v36, v37);
      if (v40 != -1)
        ((void (*)(unsigned __int16 **, char *))off_24CA0F530[v40])(&v47, (char *)&v37 + 8);
      *((_QWORD *)&v37 + 1) = &off_24C9FC408;
      *(_OWORD *)v38 = *(_OWORD *)&v41[8];
      *(_OWORD *)&v38[16] = *(_OWORD *)&v41[24];
      *(_OWORD *)v39 = *(_OWORD *)v42;
      *(_QWORD *)&v39[14] = *(_QWORD *)&v42[14];
      v40 = 1;
      sub_20FF58DCC(a1, (uint64_t)&v37 + 8);
LABEL_53:
      *(_WORD *)v41 = v35;
      *(_OWORD *)&v41[8] = v36;
      v33 = v40;
      *(_DWORD *)&v41[24] = v37;
      v41[32] = 0;
      v45 = -1;
      if (v40 == -1)
      {
        *(_OWORD *)a2 = *(_OWORD *)v41;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v41[12];
        v34 = *((unsigned int *)a2 + 24);
        if ((_DWORD)v34 != -1)
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v34])(&v47, a2 + 16);
          *((_DWORD *)a2 + 24) = -1;
        }
      }
      else
      {
        ((void (*)(char *, _BYTE *, char *))off_24CA08220[v40])(&v51, &v41[32], (char *)&v37 + 8);
        v45 = v33;
        *(_OWORD *)a2 = *(_OWORD *)v41;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v41[12];
        v47 = a2 + 16;
        ((void (*)(unsigned __int16 **))off_24CA08230[v33])(&v47);
      }
      if (v45 != -1)
        ((void (*)(unsigned __int16 **, _BYTE *))off_24CA080B0[v45])(&v47, &v41[32]);
      if (v40 != -1)
        ((void (*)(_BYTE *, char *))off_24CA080B0[v40])(v41, (char *)&v37 + 8);
      return;
    }
    v24 = sub_20FF58C10((unsigned __int16)v35);
    sub_20FDF14D4((uint64_t)v41, (uint64_t)a1);
    sub_20FDEF0B4(v46, v24, (uint64_t)&v47);
    if (v40 != -1)
    {
      if (v40 == 1)
      {
        v25 = v48;
        v48 = 0uLL;
        v26 = *(std::__shared_weak_count **)&v38[8];
        *(_OWORD *)v38 = v25;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_OWORD *)&v38[16] = v49;
        *(_OWORD *)v39 = *(_OWORD *)v50;
        *(_QWORD *)&v39[14] = *(_QWORD *)&v50[14];
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
        if (*((_QWORD *)&v48 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        goto LABEL_50;
      }
      ((void (*)(char *, char *))off_24CA080B0[v40])(&v51, (char *)&v37 + 8);
    }
    *((_QWORD *)&v37 + 1) = &off_24C9FC408;
    v32 = v48;
    v48 = 0uLL;
    *(_OWORD *)v38 = v32;
    *(_OWORD *)&v38[16] = v49;
    *(_OWORD *)v39 = *(_OWORD *)v50;
    *(_QWORD *)&v39[14] = *(_QWORD *)&v50[14];
    v40 = 1;
LABEL_50:
    std::istream::~istream();
    *(_QWORD *)v41 = MEMORY[0x24BEDB848] + 16;
    if (v44 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_53;
  }
  *(_WORD *)v41 = 0;
  sub_20E9ED948(a1[6], v41);
  *a2 = *(_WORD *)v41;
  *(_DWORD *)v41 = 2;
  sub_20E9EDADC(a1[6], v41);
  if (*(_DWORD *)v41 <= 1u)
  {
    *(_QWORD *)&v41[8] = 0;
    v35 = 0;
    sub_20E9EDE6C(a1[6], &v35);
    *(_QWORD *)v41 = v35;
    v22 = a1[6];
    sub_20E9EDADC(v22, &v41[8]);
    sub_20E9EDADC(v22, (_DWORD *)((unint64_t)v41 | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
    v8 = *a2;
    if (v8 != 1)
      goto LABEL_6;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    *(_QWORD *)v41 = 0;
    sub_20E9EDE6C(a1[6], v41);
    *((_QWORD *)a2 + 1) = *(_QWORD *)v41;
    v5 = a1[6];
    sub_20E9EDADC(v5, (_DWORD *)a2 + 4);
    sub_20E9EDADC(v5, (_DWORD *)a2 + 5);
    v6 = a1[4];
    v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
    if (v7)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
    a1[4] -= 16;
    v8 = *a2;
    if (v8 != 1)
    {
LABEL_6:
      v9 = sub_20FF58C10(v8);
      sub_20FDF14D4((uint64_t)v41, (uint64_t)a1);
      sub_20FDEF0B4(v46, v9, (uint64_t)&v35);
      v10 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v10 != -1)
      {
        if ((_DWORD)v10 == 1)
        {
          v11 = v36;
          v36 = 0uLL;
          v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v11;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          *(_OWORD *)(a2 + 28) = v37;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v38;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v38[14];
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
          if (*((_QWORD *)&v36 + 1))
          {
            v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          goto LABEL_45;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v10])(&v47, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C9FC408;
      *(_OWORD *)(a2 + 20) = v36;
      v36 = 0uLL;
      *(_OWORD *)(a2 + 28) = v37;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v38;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v38[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_45:
      std::istream::~istream();
      *(_QWORD *)v41 = MEMORY[0x24BEDB848] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      return;
    }
  }
  sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v23 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v23 != -1)
    ((void (*)(uint64_t *, unsigned __int16 *))off_24CA0F530[v23])(&v35, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C9FC408;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v41[8];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v41[24];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v42;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v42[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_20FF58DCC(a1, (uint64_t)(a2 + 16));
}

void sub_20FDF13A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20FDF147C((uint64_t)va1);
  sub_20FDF029C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDF13BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20FDF147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDF13D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20FDDA124((uint64_t)va1);
  sub_20FDF029C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDF13F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 != -1)
    ((void (*)(uint64_t, uint64_t))off_24CA080B0[a35])(v36 - 136, v35);
  sub_20FDF029C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF147C(uint64_t a1)
{
  std::istream::~istream();
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_20FDF14D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  uint64_t v9;
  std::bad_cast *exception;
  std::bad_cast *v12;
  std::string __p;
  std::string::size_type __n;
  int v15;
  void *__src;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &__n);
  memset(&__p, 0, sizeof(__p));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&__p, __n, 0);
  v7 = __n;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    p_p = &__p;
    goto LABEL_9;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    p_p = 0;
  }
LABEL_9:
  v9 = *(_QWORD *)(a2 + 48);
  v15 = 0;
  __src = 0;
  sub_20E9EE5A4(v9, (uint64_t)&v15);
  if (v7 != v15)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v12, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  memcpy(p_p, __src, v7);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF16AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF1718(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DA8B0(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20FDF1814((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FDF1A04(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FDF1814(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20FDF200C(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20E860C04(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20FDEDE2C(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20FDF19C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF1A04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_2100DA8B0(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_20FDF1CC4(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_20FD25354((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_20FD25354((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_20FD242AC((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FD25354((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FD25354((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FD25354((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FD273A8((uint64_t *)a1, a2 + 144);
  }
}

void sub_20FDF1CC4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2100DA9F8(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20FDF1E1C((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2100DA9F8(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20FDF1E1C((uint64_t *)a1, &v13);
  }
}

void sub_20FDF1E1C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_210233400((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDF1F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDF200C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_2100DA8B0(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_20FDF1CC4(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20FD25354((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_20FDF2148(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_2100DA8B0(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_20FDF2CA4((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_2101FF2E8(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_2100DA8B0(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_20FDF2E94((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_2101FF5A0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_210200078(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_20FDF2E94((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_2101FF5A0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_210200078(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_2101FF2E8(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24CA0F530[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C9FC408;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20FF58DCC((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_2101FF2E8(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_20FF58C10(v32);
      sub_20FDF3080((uint64_t)v65, (uint64_t *)a1);
      sub_20FDEF0B4(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v44])(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C9FC408;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)&v65[8]);
  sub_20FF564E0((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_20FDF2CA4((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_2100DA8B0(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24CA1FAE0;
    __cxa_throw(v58, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_20FDF2E94((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_210200078(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_20FF58C10(*(unsigned __int16 *)v59);
    sub_20FDF3080((uint64_t)v65, (uint64_t *)a1);
    sub_20FDEF0B4(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))off_24CA080B0[v63])(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24C9FC408;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_20FF561B8((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24CA0F530[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24C9FC408;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_20FF58DCC((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v53])(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24CA08220[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24CA08230[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24CA080B0[v69])(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))off_24CA080B0[v63])(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_20FDF2B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24CA080B0[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_20FDF2CA4(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF5801C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDF2E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDF2E94(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_20FF58688((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FDF2FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF3080(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2101FF5A0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_2100DA8B0(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2101FF5A0(a2);
  ++a2[14];
  sub_2101FF6B8(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v17);
  _Unwind_Resume(a1);
}

void sub_20FDF3288(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20FDF3F38(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20E860C04(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20FDEDE2C(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20FDF3434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF3478(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  void **v10;
  char v11;
  char v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  char v33;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20E9E8660(a1, __p);
    LOBYTE(v28[0]) = 0;
    sub_20E9E7AC8(a1, v28);
    v9 = (char)v28[0];
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v9;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_24:
          v12 = 0;
          if (SHIBYTE(v32) < 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_24;
      }
      v12 = 1;
      if (SHIBYTE(v32) < 0)
LABEL_27:
        operator delete(__p[0]);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v11 = 0;
      else
        v11 = v12;
      if ((v11 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20E9E8660(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_20E9E7AC8(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  v10 = (void **)(a2 + 24);
  LOBYTE(v28[0]) = 0;
  sub_20E9E7AC8(a1, v28);
  if (!LOBYTE(v28[0]))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0)
        operator delete(*v10);
      *(_BYTE *)(a2 + 48) = 0;
      if (a3 < 4)
        return;
LABEL_41:
      sub_20FDF3C14(a1, a2 + 56);
      if (a3 == 5)
      {
        v13 = (void **)(a2 + 80);
        LOBYTE(v28[0]) = 0;
        sub_20E9E7AC8(a1, v28);
        if (LOBYTE(v28[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v13 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20E9E9FEC(a1, (uint64_t)__p);
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v13);
            *(_OWORD *)v13 = *(_OWORD *)__p;
            *(_QWORD *)(a2 + 96) = v32;
            ++*(_QWORD *)(a1 + 104);
          }
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v13);
          *(_BYTE *)(a2 + 104) = 0;
        }
        return;
      }
      if (a3 < 6)
        return;
      v14 = (void **)(a2 + 80);
      LOBYTE(v28[0]) = 0;
      sub_20E9E7AC8(a1, v28);
      if (LOBYTE(v28[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v14 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20E9E9FEC(a1, (uint64_t)__p);
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 96) = v32;
LABEL_73:
          ++*(_QWORD *)(a1 + 104);
LABEL_74:
          v15 = (void **)(a2 + 112);
          LOBYTE(v28[0]) = 0;
          sub_20E9E7AC8(a1, v28);
          if (LOBYTE(v28[0]))
          {
            if (!*(_BYTE *)(a2 + 136))
            {
              *v15 = 0;
              *(_QWORD *)(a2 + 120) = 0;
              *(_QWORD *)(a2 + 128) = 0;
              *(_BYTE *)(a2 + 136) = 1;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20E9E9FEC(a1, (uint64_t)__p);
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)__p;
              *(_QWORD *)(a2 + 128) = v32;
              goto LABEL_102;
            }
          }
          else
          {
            if (*(_BYTE *)(a2 + 136))
            {
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_BYTE *)(a2 + 136) = 0;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20E9E9FEC(a1, (uint64_t)__p);
              if (SHIBYTE(v32) < 0)
                operator delete(__p[0]);
LABEL_102:
              ++*(_QWORD *)(a1 + 104);
              LOBYTE(v26[0]) = 0;
              sub_20E9E7AC8(a1, v26);
              if (!LOBYTE(v26[0]))
              {
LABEL_103:
                ++*(_QWORD *)(a1 + 80);
                if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
                {
                  *(_BYTE *)(a1 + 132) = 1;
                }
                else
                {
                  sub_20E9E9FEC(a1, (uint64_t)v28);
                  if (SHIBYTE(v29) < 0)
                    operator delete(v28[0]);
                  ++*(_QWORD *)(a1 + 104);
                }
                if (*(_BYTE *)(a2 + 168))
                {
                  v20 = *(_QWORD *)(a2 + 144);
                  if (v20)
                  {
                    v21 = *(_QWORD *)(a2 + 152);
                    v22 = *(void **)(a2 + 144);
                    if (v21 != v20)
                    {
                      do
                      {
                        if (*(char *)(v21 - 1) < 0)
                          operator delete(*(void **)(v21 - 24));
                        v21 -= 24;
                      }
                      while (v21 != v20);
                      v22 = *(void **)(a2 + 144);
                    }
                    *(_QWORD *)(a2 + 152) = v20;
                    operator delete(v22);
                  }
                  *(_BYTE *)(a2 + 168) = 0;
                }
                return;
              }
              goto LABEL_89;
            }
          }
          *(_BYTE *)(a1 + 132) = 1;
          LOBYTE(v26[0]) = 0;
          sub_20E9E7AC8(a1, v26);
          if (!LOBYTE(v26[0]))
            goto LABEL_103;
LABEL_89:
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
          v33 = 1;
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20E9E9FEC(a1, (uint64_t)v28);
            v16 = *(_QWORD *)(a1 + 104);
            *(_OWORD *)__p = *(_OWORD *)v28;
            v32 = v29;
            *(_QWORD *)(a1 + 104) = v16 + 1;
          }
          sub_20FDED128((char *)__p, (uint64_t *)v26);
          *(_OWORD *)v28 = *(_OWORD *)v26;
          v29 = v27;
          v26[1] = 0;
          v27 = 0;
          v26[0] = 0;
          v30 = 1;
          sub_20FD203D4(a2 + 144, (uint64_t)v28);
          if (v30)
          {
            v17 = (void **)v28[0];
            if (v28[0])
            {
              v18 = (void **)v28[1];
              v19 = v28[0];
              if (v28[1] != v28[0])
              {
                do
                {
                  if (*((char *)v18 - 1) < 0)
                    operator delete(*(v18 - 3));
                  v18 -= 3;
                }
                while (v18 != v17);
                v19 = v28[0];
              }
              v28[1] = v17;
              operator delete(v19);
            }
          }
          v23 = (void **)v26[0];
          if (v26[0])
          {
            v24 = (void **)v26[1];
            v25 = v26[0];
            if (v26[1] != v26[0])
            {
              do
              {
                if (*((char *)v24 - 1) < 0)
                  operator delete(*(v24 - 3));
                v24 -= 3;
              }
              while (v24 != v23);
              v25 = v26[0];
            }
            v26[1] = v23;
            operator delete(v25);
          }
          if (v33 && SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_BYTE *)(a2 + 104) = 0;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20E9E9FEC(a1, (uint64_t)__p);
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          goto LABEL_73;
        }
      }
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_74;
    }
LABEL_36:
    if (a3 < 4)
      return;
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    *v10 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    ++*(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_38;
    goto LABEL_34;
  }
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
  {
LABEL_34:
    if (!*(_BYTE *)(a1 + 131))
      goto LABEL_38;
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_36;
  }
LABEL_38:
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v32;
  ++*(_QWORD *)(a1 + 104);
  if (a3 >= 4)
    goto LABEL_41;
}

void sub_20FDF3BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF3C14(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  void *__p;
  uint64_t v12;
  char v13;

  v9 = 0;
  sub_20E9E7AC8(a1, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    LODWORD(__p) = 2;
    sub_20E9E840C(a1, &__p);
    v4 = __p;
    if (__p >= 2)
      v5 = 2;
    else
      v5 = __p;
    if (v5 < 2)
    {
      __p = 0;
      LOBYTE(v12) = 0;
      sub_20E9E8660(a1, &__p);
      v10 = 0;
      sub_20E9E7AC8(a1, &v10);
      v6 = v10;
      *(_QWORD *)a2 = __p;
      *(_BYTE *)(a2 + 8) = v6;
      if (v4 < 2)
        return;
    }
    else
    {
      sub_20E9E8660(a1, (_QWORD *)a2);
      LOBYTE(__p) = 0;
      sub_20E9E7AC8(a1, &__p);
      *(_BYTE *)(a2 + 8) = (_BYTE)__p;
      if (v4 < 2)
        return;
    }
    if (!*(_BYTE *)(a1 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20E9E9FEC(a1, (uint64_t)&__p);
        if (v13 < 0)
        {
          if (v12 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_26:
            v8 = 0;
            if (v13 < 0)
              goto LABEL_29;
            goto LABEL_15;
          }
        }
        else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_26;
        }
        v8 = 1;
        if (v13 < 0)
LABEL_29:
          operator delete(__p);
LABEL_15:
        if (*(_BYTE *)(a1 + 131))
          v7 = 0;
        else
          v7 = v8;
      }
      while ((v7 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
}

__n128 sub_20FDF3DC4(uint64_t a1, char **a2)
{
  __n128 result;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;

  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9E88B4(a1, &v14);
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v14 <= v6)
  {
    if (v14 >= v6)
    {
      v7 = *a2;
      v10 = v5 - v7;
      if (v5 == v7)
        return result;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v14];
      while (v5 != (char *)v11)
      {
        if (*(v5 - 1) < 0)
          operator delete(*((void **)v5 - 3));
        v5 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return result;
    }
  }
  else
  {
    sub_20EAC040C(a2, v14 - v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return result;
  }
  v12 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 131) == 0)
        break;
      *(_BYTE *)(a1 + 132) = 1;
      v7 += 24;
      v12 -= 24;
      if (!v12)
        return result;
    }
    sub_20E9E9FEC(a1, (uint64_t)&v15);
    if (v7[23] < 0)
      operator delete(*(void **)v7);
    result = v15;
    *((_QWORD *)v7 + 2) = v16;
    *(__n128 *)v7 = result;
    v7 += 24;
    ++*(_QWORD *)(a1 + 104);
    v12 -= 24;
  }
  while (v12);
  return result;
}

double sub_20FDF3F38(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  double result;
  char v10;
  void **v11;
  char v12;
  char v13;
  char v14;
  void *__p[2];
  uint64_t v16;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20E9E8660(a1, __p);
    v14 = 0;
    sub_20E9E7AC8(a1, &v14);
    v10 = v14;
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v10;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v13 = 0;
          if (SHIBYTE(v16) < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(v16) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v13 = 1;
      if (SHIBYTE(v16) < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20E9E8660(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_20E9E7AC8(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  if (a3 < 2)
    return result;
  v11 = (void **)(a2 + 24);
  v14 = 0;
  sub_20E9E7AC8(a1, &v14);
  if (v14)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_37;
    }
    else
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_37:
        sub_20E9E9FEC(a1, (uint64_t)__p);
        if (*(char *)(a2 + 47) < 0)
          operator delete(*v11);
        result = *(double *)__p;
        *(_OWORD *)v11 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 40) = v16;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v11);
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

void sub_20FDF41A4(const void *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  __int128 v18;
  int v19;
  uint64_t (**v20)();
  __int128 v21;
  __int128 v22;
  _BYTE v23[22];
  unsigned int v24;
  _BYTE v25[40];
  _BYTE v26[22];
  void *__p;
  char v28;
  int v29;
  _QWORD v30[21];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[22];
  char v35;

  *(_QWORD *)v25 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)&v25[8]);
  sub_20FF564E0((uint64_t)&v17, (uint64_t)v25, 0);
  v4 = *(std::__shared_weak_count **)&v25[16];
  if (*(_QWORD *)&v25[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v25[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  *(_WORD *)v25 = 0;
  sub_20E9E7F64((uint64_t)a1, v25);
  v17 = *(_WORD *)v25;
  *(_DWORD *)v25 = 1;
  sub_20E9E840C((uint64_t)a1, v25);
  *(_QWORD *)v25 = 0;
  sub_20E9E88B4((uint64_t)a1, v25);
  *(_QWORD *)&v18 = *(_QWORD *)v25;
  sub_20E9E840C((uint64_t)a1, (_DWORD *)&v18 + 2);
  sub_20E9E840C((uint64_t)a1, (_DWORD *)&v18 + 3);
  if (v17 == 1)
  {
    sub_20FF561B8((uint64_t *)&v18, v19);
    if (v24 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24CA0F530[v24])(&v31, &v20);
    v20 = &off_24C9FC408;
    v21 = *(_OWORD *)&v25[8];
    v22 = *(_OWORD *)&v25[24];
    *(_OWORD *)v23 = *(_OWORD *)v26;
    *(_QWORD *)&v23[14] = *(_QWORD *)&v26[14];
    v24 = 1;
    sub_20FF58DCC(a1, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7 = sub_20FF58C10(v17);
  sub_20FDF4A1C((uint64_t)v25, (uint64_t)a1);
  sub_20FDEF0B4(v30, v7, (uint64_t)&v31);
  if (v24 != -1)
  {
    if (v24 == 1)
    {
      v8 = v32;
      v32 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      v21 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v22 = v33;
      *(_OWORD *)v23 = *(_OWORD *)v34;
      *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)()))off_24CA080B0[v24])(&v35, &v20);
  }
  v20 = &off_24C9FC408;
  v21 = v32;
  v32 = 0uLL;
  v22 = v33;
  *(_OWORD *)v23 = *(_OWORD *)v34;
  *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
  v24 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v25 = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v25 = v17;
  *(_OWORD *)&v25[8] = v18;
  v15 = v24;
  *(_DWORD *)&v25[24] = v19;
  v25[32] = 0;
  v29 = -1;
  if (v24 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v16 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24CA080B0[v16])(&v31, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24CA08220[v24])(&v35, &v25[32], &v20);
    v29 = v15;
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v31 = a2 + 32;
    ((void (*)(uint64_t *))off_24CA08230[v15])(&v31);
  }
  if (v29 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24CA080B0[v29])(&v31, &v25[32]);
  if (v24 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24CA080B0[v24])(v25, &v20);
}

void sub_20FDF45A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20FDF147C((uint64_t)&a22);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF45C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20FDDA124((uint64_t)&a22);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF45E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24CA080B0[a34])(v35 - 120, v34);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF466C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE __p[24];
  __int128 v20;
  _BYTE v21[22];
  void *v22;
  char v23;
  _QWORD v24[22];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[22];
  char v29;

  *(_WORD *)__p = 0;
  sub_20E9E7F64(a1, __p);
  *a2 = *(_WORD *)__p;
  *(_DWORD *)__p = 2;
  sub_20E9E840C(a1, __p);
  v4 = *(_DWORD *)__p;
  if (*(_DWORD *)__p >= 2u)
    v5 = 2;
  else
    v5 = *(_DWORD *)__p;
  if (v5 < 2)
  {
    *(_QWORD *)&__p[8] = 0;
    v25 = 0;
    sub_20E9E88B4(a1, &v25);
    *(_QWORD *)__p = v25;
    sub_20E9E840C(a1, &__p[8]);
    sub_20E9E840C(a1, (_DWORD *)((unint64_t)__p | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)__p;
    if (v4 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(a1 + 72) == **(_BYTE **)__p)
        {
LABEL_24:
          v9 = 0;
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (__p[23] == 1 && *(unsigned __int8 *)(a1 + 72) == __p[0])
      {
        goto LABEL_24;
      }
      v9 = 1;
      if ((__p[23] & 0x80000000) != 0)
LABEL_27:
        operator delete(*(void **)__p);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v8 = 0;
      else
        v8 = v9;
      if ((v8 & 1) == 0)
        goto LABEL_9;
    }
  }
  *(_QWORD *)__p = 0;
  sub_20E9E88B4(a1, __p);
  *((_QWORD *)a2 + 1) = *(_QWORD *)__p;
  sub_20E9E840C(a1, (_DWORD *)a2 + 4);
  sub_20E9E840C(a1, (_DWORD *)a2 + 5);
  if (v4 >= 2)
    goto LABEL_8;
LABEL_9:
  v6 = *a2;
  if (v6 == 1)
  {
    sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
    v7 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v7 != -1)
      ((void (*)(uint64_t *, unsigned __int16 *))off_24CA0F530[v7])(&v25, a2 + 16);
    *((_QWORD *)a2 + 4) = &off_24C9FC408;
    *(_OWORD *)(a2 + 20) = *(_OWORD *)&__p[8];
    *(_OWORD *)(a2 + 28) = v20;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v21;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v21[14];
    *((_DWORD *)a2 + 24) = 1;
    sub_20FF58DCC((const void *)a1, (uint64_t)(a2 + 16));
    return;
  }
  v10 = sub_20FF58C10(v6);
  sub_20FDF4A1C((uint64_t)__p, a1);
  sub_20FDEF0B4(v24, v10, (uint64_t)&v25);
  v11 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v11 != -1)
  {
    if ((_DWORD)v11 == 1)
    {
      v12 = v26;
      v26 = 0uLL;
      v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      *(_OWORD *)(a2 + 20) = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *(_OWORD *)(a2 + 28) = v27;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v28;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v28[14];
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_42;
    }
    ((void (*)(char *, unsigned __int16 *))off_24CA080B0[v11])(&v29, a2 + 16);
  }
  *((_QWORD *)a2 + 4) = &off_24C9FC408;
  *(_OWORD *)(a2 + 20) = v26;
  v26 = 0uLL;
  *(_OWORD *)(a2 + 28) = v27;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v28;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v28[14];
  *((_DWORD *)a2 + 24) = 1;
LABEL_42:
  std::istream::~istream();
  *(_QWORD *)__p = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
}

void sub_20FDF4A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDF147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF4A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20E9E88B4(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  sub_20E9EA1EC(a2, (uint64_t)v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF4BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v16);
  _Unwind_Resume(a1);
}

void sub_20FDF4C0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_2100B6EE0(a2);
  if (v9 >= 6)
    v10 = 6;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_20FDF4D20((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_20FDF4F30(a2, a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20FDF4D0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF4D20(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  void **v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v25 = 0;
  BYTE8(v25) = 0;
  LOBYTE(v26) = 0;
  v28 = 0;
  sub_20FDF4FE8((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2)
    sub_20FDF5298(a2, (uint64_t)&v26);
  *(_OWORD *)&v10[8] = v25;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_20E860C04(&v11, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      v11 = v26;
      v12 = v27;
    }
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  sub_20FDEDE2C(a3, (uint64_t)v10);
  if (v24)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0)
    operator delete(v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
}

void sub_20FDF4EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF4F30(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v6;

  sub_20FDF4FE8((uint64_t)&v6, a1, a2 + 8);
  sub_20FDF5298(a1, a2 + 24);
  if (a3 >= 4)
  {
    sub_20FDF5368(a1, a2 + 56);
    if (a3 == 5)
    {
      sub_20FDF5298(a1, a2 + 80);
    }
    else if (a3 >= 6)
    {
      sub_20FDF5298(a1, a2 + 80);
      sub_20FDF5298(a1, a2 + 112);
      sub_20FDF542C(a1, a2 + 144);
    }
  }
}

_QWORD *sub_20FDF4FE8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::logic_error *exception;
  uint64_t v15;
  char v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    v15 = 0;
    v16 = 0;
    result = sub_20FDF51C4(a2, (uint64_t)&v15);
    v13 = v16;
    *(_QWORD *)a3 = v15;
    *(_BYTE *)(a3 + 8) = v13;
  }
  else
  {
    sub_2100B6EE0(a2);
    result = sub_20FDF50F0(a2, a3);
    v11 = a2[12];
    v12 = a2[9];
    a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_20FDF50DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDF50F0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_20FDF519C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF51B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDF51C4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_20FDF5270(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5298(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_2100B7230(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_20FDF5354(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDF5368(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    return sub_20FDF4FE8((uint64_t)&v5, result, a2);
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20FDF5418(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF542C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_20FDF5544(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(void ***)a2;
    if (*(_QWORD *)a2)
    {
      v6 = *(void ***)(a2 + 8);
      v7 = *(void ***)a2;
      if (v6 != v5)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = *(void ***)a2;
      }
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v7);
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_20FDF5530(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5544(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)a2) >> 3);
  if (v8 > v10)
  {
    sub_20EAC040C((char **)a2, v8 - v10);
    v13 = a2;
    v11 = *(char **)a2;
    v12 = *(char **)(v13 + 8);
    v14 = v12 - v11;
    if (v12 == v11)
      return;
    goto LABEL_16;
  }
  if (v8 >= v10)
  {
    v11 = *(char **)a2;
    v14 = v9 - *(_QWORD *)a2;
    if (v9 == *(_QWORD *)a2)
      return;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)a2 + 24 * v8;
  while (v9 != v15)
  {
    if (*(char *)(v9 - 1) < 0)
      operator delete(*(void **)(v9 - 24));
    v9 -= 24;
  }
  *(_QWORD *)(a2 + 8) = v15;
  v11 = *(char **)a2;
  v14 = v15 - (_QWORD)v11;
  if ((char *)v15 != v11)
  {
LABEL_16:
    v16 = 24 * (v14 / 24);
    do
    {
      sub_2100B7230(a1, (uint64_t)v11);
      v11 += 24;
      v16 -= 24;
    }
    while (v16);
  }
}

void sub_20FDF5684(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5698(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _OWORD *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::logic_error *exception;
  std::logic_error *v59;
  unsigned __int16 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[32];
  _BYTE v64[22];
  unsigned int v65;
  unsigned __int16 *v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[22];
  char v70;
  _BYTE v71[40];
  _BYTE v72[22];
  void *__p;
  char v74;
  int v75;
  _QWORD v76[21];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_82;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_2100B6EE0(a1);
    v9 = a1[6];
    v10 = a1[7];
    v11 = v10 - v9;
    if (v10 < v9)
      v11 = 0;
    if (v11 > 1)
    {
      v12 = a1[3];
      v13 = *(_WORD *)(v12 + v9);
      a1[6] = v9 + 2;
      *a2 = v13;
      v14 = a2 + 4;
      v4 = v10 >= v9 + 2;
      v15 = v10 - (v9 + 2);
      if (!v4)
        v15 = 0;
      if (v15 > 3)
      {
        v16 = *(_DWORD *)(v12 + v9 + 2);
        a1[6] = v9 + 6;
        if (v16 <= 1)
        {
          *(_OWORD *)v71 = 1uLL;
          sub_20FDF601C(a1, v71);
          *v14 = *(_OWORD *)v71;
          v26 = *a2;
          if (v26 != 1)
          {
LABEL_19:
            v27 = sub_20FF58C10(v26);
            sub_20FDF60F4((uint64_t)v71, a1);
            sub_20FDEF0B4(v76, v27, (uint64_t)&v60);
            v28 = *((unsigned int *)a2 + 24);
            if ((_DWORD)v28 != -1)
            {
              if ((_DWORD)v28 == 1)
              {
                v29 = v61;
                v61 = 0uLL;
                v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
                *(_OWORD *)(a2 + 20) = v29;
                if (v30)
                {
                  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
                  do
                    v32 = __ldaxr(p_shared_owners);
                  while (__stlxr(v32 - 1, p_shared_owners));
                  if (!v32)
                  {
                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                    std::__shared_weak_count::__release_weak(v30);
                  }
                }
                *(_OWORD *)(a2 + 28) = v62;
                *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
                *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
                v33 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
                if (*((_QWORD *)&v61 + 1))
                {
                  v34 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 - 1, v34));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
                goto LABEL_64;
              }
              ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v28])(&v66, a2 + 16);
            }
            *((_QWORD *)a2 + 4) = &off_24C9FC408;
            *(_OWORD *)(a2 + 20) = v61;
            v61 = 0uLL;
            *(_OWORD *)(a2 + 28) = v62;
            *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
            *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
            *((_DWORD *)a2 + 24) = 1;
LABEL_64:
            std::istream::~istream();
            *(_QWORD *)v71 = MEMORY[0x24BEDB848] + 16;
            if (v74 < 0)
              operator delete(__p);
            std::streambuf::~streambuf();
LABEL_67:
            v54 = a1[12];
            v55 = a1[9];
            a1[6] = *(_QWORD *)(v54 - 8) + *(_QWORD *)(v55 - 8) + 8;
            a1[9] = v55 - 8;
            a1[12] = v54 - 8;
            return;
          }
LABEL_47:
          sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v44 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v44 != -1)
            ((void (*)(unsigned __int16 *, unsigned __int16 *))off_24CA0F530[v44])(&v60, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C9FC408;
          v45 = *(_OWORD *)&v71[24];
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v71[8];
          *(_OWORD *)(a2 + 28) = v45;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v72;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v72[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20FF58DCC(a1, (uint64_t)(a2 + 16));
          goto LABEL_67;
        }
        sub_2100B6EE0(a1);
        v18 = a1[6];
        v17 = a1[7];
        v19 = v17 - v18;
        if (v17 < v18)
          v19 = 0;
        if (v19 > 7)
        {
          v20 = a1[3];
          v21 = *(_QWORD *)(v20 + v18);
          v22 = v18 + 8;
          a1[6] = v22;
          *(_QWORD *)v14 = v21;
          v4 = v17 >= v22;
          v23 = v17 - v22;
          if (!v4)
            v23 = 0;
          if (v23 > 7)
          {
            *((_QWORD *)a2 + 2) = *(_QWORD *)(v20 + v22);
            a1[6] += 8;
            v24 = a1[12];
            v25 = a1[9];
            a1[6] = *(_QWORD *)(v24 - 8) + *(_QWORD *)(v25 - 8) + 8;
            a1[9] = v25 - 8;
            a1[12] = v24 - 8;
            v26 = *a2;
            if (v26 != 1)
              goto LABEL_19;
            goto LABEL_47;
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(exception, "Not enough data to read span");
LABEL_86:
          __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
      }
    }
LABEL_82:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_86;
  }
  *(_QWORD *)v71 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)&v71[8]);
  sub_20FF564E0((uint64_t)&v60, (uint64_t)v71, 0);
  v36 = *(std::__shared_weak_count **)&v71[16];
  if (*(_QWORD *)&v71[16])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v71[16] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  LODWORD(v62) = 0;
  v39 = a1[6];
  v40 = a1[7];
  v41 = v40 - v39;
  if (v40 < v39)
    v41 = 0;
  if (v41 <= 1)
    goto LABEL_83;
  v42 = *(_WORD *)(a1[3] + v39);
  a1[6] = v39 + 2;
  v60 = v42;
  v4 = v40 >= v39 + 2;
  v43 = v40 - (v39 + 2);
  if (!v4)
    v43 = 0;
  if (v43 <= 3)
  {
LABEL_83:
    v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "Not enough data to read");
    v59->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v59, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a1[6] = v39 + 6;
  sub_20FDF601C(a1, &v61);
  if (v60 != 1)
  {
    v46 = sub_20FF58C10(v60);
    sub_20FDF60F4((uint64_t)v71, a1);
    sub_20FDEF0B4(v76, v46, (uint64_t)&v66);
    if (v65 != -1)
    {
      if (v65 == 1)
      {
        v47 = v67;
        v67 = 0uLL;
        v48 = *(std::__shared_weak_count **)&v63[8];
        *(_OWORD *)v63 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        *(_OWORD *)&v63[16] = v68;
        *(_OWORD *)v64 = *(_OWORD *)v69;
        *(_QWORD *)&v64[14] = *(_QWORD *)&v69[14];
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        goto LABEL_70;
      }
      ((void (*)(char *, char *))off_24CA080B0[v65])(&v70, (char *)&v62 + 8);
    }
    *((_QWORD *)&v62 + 1) = &off_24C9FC408;
    *(_OWORD *)v63 = v67;
    v67 = 0uLL;
    *(_OWORD *)&v63[16] = v68;
    *(_OWORD *)v64 = *(_OWORD *)v69;
    *(_QWORD *)&v64[14] = *(_QWORD *)&v69[14];
    v65 = 1;
LABEL_70:
    std::istream::~istream();
    *(_QWORD *)v71 = MEMORY[0x24BEDB848] + 16;
    if (v74 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_73;
  }
  sub_20FF561B8((uint64_t *)&v61, v62);
  if (v65 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24CA0F530[v65])(&v66, (char *)&v62 + 8);
  *((_QWORD *)&v62 + 1) = &off_24C9FC408;
  *(_OWORD *)v63 = *(_OWORD *)&v71[8];
  *(_OWORD *)&v63[16] = *(_OWORD *)&v71[24];
  *(_OWORD *)v64 = *(_OWORD *)v72;
  *(_QWORD *)&v64[14] = *(_QWORD *)&v72[14];
  v65 = 1;
  sub_20FF58DCC(a1, (uint64_t)&v62 + 8);
LABEL_73:
  *(_WORD *)v71 = v60;
  *(_OWORD *)&v71[8] = v61;
  v56 = v65;
  *(_DWORD *)&v71[24] = v62;
  v71[32] = 0;
  v75 = -1;
  if (v65 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v71;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v71[12];
    v57 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v57 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24CA080B0[v57])(&v66, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24CA08220[v65])(&v70, &v71[32], (char *)&v62 + 8);
    v75 = v56;
    *(_OWORD *)a2 = *(_OWORD *)v71;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v71[12];
    v66 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24CA08230[v56])(&v66);
  }
  if (v75 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24CA080B0[v75])(&v66, &v71[32]);
  if (v65 != -1)
    ((void (*)(_BYTE *, char *))off_24CA080B0[v65])(v71, (char *)&v62 + 8);
}

void sub_20FDF5EB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5EC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20FDF147C((uint64_t)&a31);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF5F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20FDF147C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FDF5F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF5F34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5F48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF5F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20FDDA124((uint64_t)&a31);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF5F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;

  if (a43 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[a43])(&a22, v43);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDF601C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_10;
  }
  v5 = result[3];
  v6 = *(_QWORD *)(v5 + v3);
  v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  v8 = v2 >= v7;
  v9 = v2 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[1] = *(_QWORD *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_20FDF60CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FDF60E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF60F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::logic_error *v18;
  std::string __dst;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v11 = *(_QWORD *)(a2[3] + v7);
  a2[6] = v7 + 8;
  memset(&__dst, 0, sizeof(__dst));
  if (v11 && (std::string::append(&__dst, v11, 0), SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0))
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      p_dst = 0;
    }
  }
  else
  {
    p_dst = &__dst;
  }
  v13 = a2[6];
  v14 = a2[7];
  v9 = v14 >= v13;
  v15 = v14 - v13;
  if (!v9)
    v15 = 0;
  if (v15 < v11)
  {
    v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Not enough data to read binary blob");
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v18, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(p_dst, (const void *)(a2[3] + v13), v11);
  a2[6] += v11;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF6328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v15);
  _Unwind_Resume(a1);
}

void sub_20FDF63C8(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v7;
  int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v4 = a4;
  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v12 = 3;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 7)
    {
      v10 = v12;
      v11 = sub_20FDF64E8();
      sub_20E9F5C70((std::string *)v11, v10, 6u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (v4 >= 3 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
  if (v4 >= 6)
    a4 = 6;
  else
    a4 = v4;
  if (a4 < 3)
  {
LABEL_15:
    sub_20FDF69C0((uint64_t)&v13, a2, a3, a4);
    if (!v9)
      return;
    goto LABEL_16;
  }
  sub_20FDF6C34(a2, a3, a4);
  if (!v9)
    return;
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FDF64E8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55E58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55E58))
    return &xmmword_254A55E40;
  v2 = sub_20FDF65C4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55E40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55E50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55E40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55E40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55E58);
  return &xmmword_254A55E40;
}

void sub_20FDF65AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55E58);
  _Unwind_Resume(a1);
}

std::string *sub_20FDF65C4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55E78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55E78))
    return &stru_254A55E60;
  sub_20FDF67DC((uint64_t)__p);
  sub_20FDF66B4((char *)__p, &stru_254A55E60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55E60, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55E78);
  return &stru_254A55E60;
}

void sub_20FDF6674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55E78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55E78);
  _Unwind_Resume(a1);
}

void sub_20FDF66B4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FDD68CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20FDF67B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDF67DC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55E98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55E98))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::DataInfoSample<6>]", qword_254A55E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55E80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55E98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55EB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55EB8))
  {
    v5 = sub_20E8A2354(qword_254A55E80, "<", 0);
    sub_20E89FC08(qword_254A55E80, 0, v5, qword_254A55EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55EA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55EB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55ED8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55ED8))
  {
    sub_21023CD84((uint64_t)qword_254A55EA0, (uint64_t)&xmmword_254A55EC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55EC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55ED8);
  }
  if (byte_254A55ED7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55EC0, *((unint64_t *)&xmmword_254A55EC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55EC0;
    *(_QWORD *)(a1 + 16) = unk_254A55ED0;
  }
}

void sub_20FDF6978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55ED8);
  _Unwind_Resume(a1);
}

void sub_20FDF6990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55EB8);
  _Unwind_Resume(a1);
}

void sub_20FDF69A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55E98);
  _Unwind_Resume(a1);
}

void sub_20FDF69C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  sub_20FDF727C((int *)&v10, (_BYTE *)a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    LOBYTE(v10) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v10);
    if ((_BYTE)v10)
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 144))(a2, &v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_20E860C04(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_20FDEDE2C(a3, (uint64_t)&v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_20FDF6BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF6C34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  void *__p[2];
  uint64_t v30;
  char v31;

  __p[0] = *(void **)(a1 + 8);
  sub_20FDF727C((int *)__p, (_BYTE *)a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  LOBYTE(__p[0]) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    LOBYTE(v26[0]) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
    if (LOBYTE(v26[0]))
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      __p[0] = *(void **)(a1 + 8);
      sub_20FDF727C((int *)__p, (_BYTE *)a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
      if (LOBYTE(__p[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      if ((*(_BYTE *)(a1 + 12) & 4) != 0)
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else
        {
          if (*(_BYTE *)(a2 + 104))
          {
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v8);
            *(_BYTE *)(a2 + 104) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        v10 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v10 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else
        {
          if (*(_BYTE *)(a2 + 136))
          {
            if (*(char *)(a2 + 135) < 0)
              operator delete(*v10);
            *(_BYTE *)(a2 + 136) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        LOBYTE(__p[0]) = 0;
        v31 = 0;
        LOBYTE(v26[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
        if (LOBYTE(v26[0]))
        {
          if (!v31)
          {
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            v31 = 1;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
        }
        else
        {
          if (v31)
          {
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            v31 = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v24);
        }
        if (v31)
        {
          sub_20FDED128((char *)__p, (uint64_t *)v24);
          *(_OWORD *)v26 = *(_OWORD *)v24;
          v27 = v25;
          v24[1] = 0;
          v25 = 0;
          v24[0] = 0;
          v28 = 1;
          sub_20FD203D4(a2 + 144, (uint64_t)v26);
          if (v28)
          {
            v15 = (void **)v26[0];
            if (v26[0])
            {
              v16 = (void **)v26[1];
              v17 = v26[0];
              if (v26[1] != v26[0])
              {
                do
                {
                  if (*((char *)v16 - 1) < 0)
                    operator delete(*(v16 - 3));
                  v16 -= 3;
                }
                while (v16 != v15);
                v17 = v26[0];
              }
              v26[1] = v15;
              operator delete(v17);
            }
          }
          v21 = (void **)v24[0];
          if (v24[0])
          {
            v22 = (void **)v24[1];
            v23 = v24[0];
            if (v24[1] != v24[0])
            {
              do
              {
                if (*((char *)v22 - 1) < 0)
                  operator delete(*(v22 - 3));
                v22 -= 3;
              }
              while (v22 != v21);
              v23 = v24[0];
            }
            v24[1] = v21;
            operator delete(v23);
          }
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v18 = *(_QWORD *)(a2 + 144);
          if (v18)
          {
            v19 = *(_QWORD *)(a2 + 152);
            v20 = *(void **)(a2 + 144);
            if (v19 != v18)
            {
              do
              {
                if (*(char *)(v19 - 1) < 0)
                  operator delete(*(void **)(v19 - 24));
                v19 -= 24;
              }
              while (v19 != v18);
              v20 = *(void **)(a2 + 144);
            }
            *(_QWORD *)(a2 + 152) = v18;
            operator delete(v20);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
        if (v31 && SHIBYTE(v30) < 0)
          operator delete(__p[0]);
      }
      else
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v8);
          *(_BYTE *)(a2 + 104) = 0;
        }
        v9 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v9 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else if (*(_BYTE *)(a2 + 136))
        {
          if (*(char *)(a2 + 135) < 0)
            operator delete(*v9);
          *(_BYTE *)(a2 + 136) = 0;
        }
        v11 = (void **)(a2 + 144);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 168))
          {
            *v11 = 0;
            *(_QWORD *)(a2 + 152) = 0;
            *(_QWORD *)(a2 + 160) = 0;
            *(_BYTE *)(a2 + 168) = 1;
          }
          sub_20FDF76CC(a1, (char **)(a2 + 144));
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v12 = (void **)*v11;
          if (*v11)
          {
            v13 = *(void ***)(a2 + 152);
            v14 = *v11;
            if (v13 != v12)
            {
              do
              {
                if (*((char *)v13 - 1) < 0)
                  operator delete(*(v13 - 3));
                v13 -= 3;
              }
              while (v13 != v12);
              v14 = *v11;
            }
            *(_QWORD *)(a2 + 152) = v12;
            operator delete(v14);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
      }
    }
  }
}

void sub_20FDF7254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDF727C(int *a1, _BYTE *a2, uint64_t a3)
{
  char v6;
  _BYTE *v7;
  char v8;
  char *v9;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    if (v7 < 2)
    {
      v7 = 0;
      v8 = 0;
      (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v7);
      v9 = &v8;
      sub_20FDF7518(a2, &v9);
      v6 = v8;
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 8) = v6;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
      v7 = (_BYTE *)(a3 + 8);
      sub_20FDF7518(a2, &v7);
    }
  }
  else
  {
    sub_20FDF7388(a1, a2, a3, v7);
  }
}

void sub_20FDF7388(int *a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  _BYTE *v13;
  char v14;
  char *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v13) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FD2441C();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_20FDF7518(a2, &v13);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    v13 = 0;
    v14 = 0;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v13);
    v15 = &v14;
    sub_20FDF7518(a2, &v15);
    v10 = v14;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 8) = v10;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_20FDF7518(a2, &v13);
  }
}

void sub_20FDF7518(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_210233400((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FDF7680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FDF76CC(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v12);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_20EAC040C(a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v12];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = 24 * (v9 / 24);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 144))(a1, v6);
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

void sub_20FDF77F0(int *a1, _BYTE *a2, unsigned __int16 *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FDF7908();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDF81B0((uint64_t)a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20FDF7CB8(a2, (uint64_t)a3);
  else
    sub_20FDF81B0((uint64_t)a2, a3);
}

__int128 *sub_20FDF7908()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A556B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A556B8))
    return &xmmword_254A556A0;
  v2 = sub_20FDF79E4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A556A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A556B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A556A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A556A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A556B8);
  return &xmmword_254A556A0;
}

void sub_20FDF79CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A556B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FDF79E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A556D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A556D8))
    return &stru_254A556C0;
  sub_20FDF7AD4((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A556C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A556C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A556D8);
  return &stru_254A556C0;
}

void sub_20FDF7A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A556D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A556D8);
  _Unwind_Resume(a1);
}

void sub_20FDF7AD4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A556F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A556F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageSample<>]", qword_254A556E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A556E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A556F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55718);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55718))
  {
    v5 = sub_20E8A2354(qword_254A556E0, "<", 0);
    sub_20E89FC08(qword_254A556E0, 0, v5, qword_254A55700);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55700, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55718);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55738);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55738))
  {
    sub_21023CD84((uint64_t)qword_254A55700, (uint64_t)&xmmword_254A55720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55720, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55738);
  }
  if (byte_254A55737 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55720, *((unint64_t *)&xmmword_254A55720 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55720;
    *(_QWORD *)(a1 + 16) = unk_254A55730;
  }
}

void sub_20FDF7C70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55738);
  _Unwind_Resume(a1);
}

void sub_20FDF7C88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55718);
  _Unwind_Resume(a1);
}

void sub_20FDF7CA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A556F8);
  _Unwind_Resume(a1);
}

void sub_20FDF7CB8(_BYTE *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  __int128 v18;
  int v19;
  uint64_t (**v20)();
  __int128 v21;
  __int128 v22;
  _BYTE v23[22];
  unsigned int v24;
  _BYTE v25[40];
  _BYTE v26[22];
  void *__p;
  char v28;
  int v29;
  _QWORD v30[21];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[22];
  char v35;

  *(_QWORD *)v25 = &off_24C9FC408;
  sub_20FDEF818((uint64_t)&v25[8]);
  sub_20FF564E0((uint64_t)&v17, (uint64_t)v25, 0);
  v4 = *(std::__shared_weak_count **)&v25[16];
  if (*(_QWORD *)&v25[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v25[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  *(_QWORD *)v25 = &v17;
  sub_20FDF8594(a1, (_WORD **)v25);
  *(_DWORD *)v25 = 1;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v25);
  *(_QWORD *)v25 = &v18;
  sub_20FDF8AF8(a1, (_QWORD **)v25);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v18 + 8);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v18 + 12);
  if (v17 == 1)
  {
    sub_20FF561B8((uint64_t *)&v18, v19);
    if (v24 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24CA0F530[v24])(&v31, &v20);
    v20 = &off_24C9FC408;
    v21 = *(_OWORD *)&v25[8];
    v22 = *(_OWORD *)&v25[24];
    *(_OWORD *)v23 = *(_OWORD *)v26;
    *(_QWORD *)&v23[14] = *(_QWORD *)&v26[14];
    v24 = 1;
    sub_20FF58DCC(a1, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7 = sub_20FF58C10(v17);
  sub_20FDF8CA8((uint64_t)v25, (uint64_t)a1);
  sub_20FDEF0B4(v30, v7, (uint64_t)&v31);
  if (v24 != -1)
  {
    if (v24 == 1)
    {
      v8 = v32;
      v32 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      v21 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v22 = v33;
      *(_OWORD *)v23 = *(_OWORD *)v34;
      *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)()))off_24CA080B0[v24])(&v35, &v20);
  }
  v20 = &off_24C9FC408;
  v21 = v32;
  v32 = 0uLL;
  v22 = v33;
  *(_OWORD *)v23 = *(_OWORD *)v34;
  *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
  v24 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v25 = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v25 = v17;
  *(_OWORD *)&v25[8] = v18;
  v15 = v24;
  *(_DWORD *)&v25[24] = v19;
  v25[32] = 0;
  v29 = -1;
  if (v24 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v16 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24CA080B0[v16])(&v31, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24CA08220[v24])(&v35, &v25[32], &v20);
    v29 = v15;
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v31 = a2 + 32;
    ((void (*)(uint64_t *))off_24CA08230[v15])(&v31);
  }
  if (v29 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24CA080B0[v29])(&v31, &v25[32]);
  if (v24 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24CA080B0[v24])(v25, &v20);
}

void sub_20FDF80E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20FDF147C((uint64_t)&a22);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20FDDA124((uint64_t)&a22);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF8128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24CA080B0[a34])(v35 - 136, v34);
  sub_20FDF029C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF81B0(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  unsigned int v5;
  __int128 *v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  _BYTE v19[22];
  void *__p;
  char v21;
  _QWORD v22[22];
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[22];
  char v27;

  v18[0] = a2;
  sub_20FDF8594((_BYTE *)a1, (_WORD **)v18);
  v4 = *(_DWORD *)(a1 + 8);
  LODWORD(v18[0]) = 2;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v18);
  if (v4 < 1)
  {
    if (LODWORD(v18[0]) >= 2)
    {
      v18[0] = a2 + 4;
      sub_20FDF8AF8((_BYTE *)a1, (_QWORD **)v18);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (v4 == 2)
  {
    if (LODWORD(v18[0]) >= 2)
    {
      LODWORD(v18[0]) = 2;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v18);
      v5 = v18[0];
      if (LODWORD(v18[0]) >= 3)
      {
        v6 = sub_20FDF8748();
        sub_20E9F5C70((std::string *)v6, v5, 2u);
      }
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v18[0] = a2 + 4;
      sub_20FDF8AF8((_BYTE *)a1, (_QWORD **)v18);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (LODWORD(v18[0]) > 1)
  {
    goto LABEL_10;
  }
  *(_OWORD *)v18 = 1uLL;
  v23 = v18;
  sub_20FDF8AF8((_BYTE *)a1, &v23);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, &v18[1]);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 104))(a1, (unint64_t)v18 | 0xC);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)v18;
  v7 = *a2;
  if (v7 != 1)
  {
LABEL_11:
    v8 = sub_20FF58C10(v7);
    sub_20FDF8CA8((uint64_t)v18, a1);
    sub_20FDEF0B4(v22, v8, (uint64_t)&v23);
    v9 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v9 != -1)
    {
      if ((_DWORD)v9 == 1)
      {
        v10 = v24;
        v24 = 0uLL;
        v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
        *(_OWORD *)(a2 + 20) = v10;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        *(_OWORD *)(a2 + 28) = v25;
        *(_OWORD *)(a2 + 36) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 43) = *(_QWORD *)&v26[14];
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        goto LABEL_29;
      }
      ((void (*)(char *, unsigned __int16 *))off_24CA080B0[v9])(&v27, a2 + 16);
    }
    *((_QWORD *)a2 + 4) = &off_24C9FC408;
    *(_OWORD *)(a2 + 20) = v24;
    v24 = 0uLL;
    *(_OWORD *)(a2 + 28) = v25;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v26;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v26[14];
    *((_DWORD *)a2 + 24) = 1;
LABEL_29:
    std::istream::~istream();
    v18[0] = MEMORY[0x24BEDB848] + 16;
    if (v21 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    return;
  }
LABEL_24:
  sub_20FF5634C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v17 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v17 != -1)
    ((void (*)(_QWORD **, unsigned __int16 *))off_24CA0F530[v17])(&v23, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C9FC408;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v18[1];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v18[3];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v19;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v19[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_20FF58DCC((const void *)a1, (uint64_t)(a2 + 16));
}

void sub_20FDF8580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDF147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF8594(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20FF5801C((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FDF86FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDF8748()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55618);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55618))
    return &xmmword_254A55600;
  v2 = sub_20FDF8824();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55600, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55610 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55600 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55600, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55618);
  return &xmmword_254A55600;
}

void sub_20FDF880C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55618);
  _Unwind_Resume(a1);
}

std::string *sub_20FDF8824()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55638))
    return &stru_254A55620;
  sub_20FDF8914((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A55620);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55620, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55638);
  return &stru_254A55620;
}

void sub_20FDF88D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55638);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55638);
  _Unwind_Resume(a1);
}

void sub_20FDF8914(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55658);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55658))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageStructureSample<>]", qword_254A55640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55640, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55658);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55678);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55678))
  {
    v5 = sub_20E8A2354(qword_254A55640, "<", 0);
    sub_20E89FC08(qword_254A55640, 0, v5, qword_254A55660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55660, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55678);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55698);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55698))
  {
    sub_21023CD84((uint64_t)qword_254A55660, (uint64_t)&xmmword_254A55680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55680, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55698);
  }
  if (byte_254A55697 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55680, *((unint64_t *)&xmmword_254A55680 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55680;
    *(_QWORD *)(a1 + 16) = unk_254A55690;
  }
}

void sub_20FDF8AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55698);
  _Unwind_Resume(a1);
}

void sub_20FDF8AC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55678);
  _Unwind_Resume(a1);
}

void sub_20FDF8AE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55658);
  _Unwind_Resume(a1);
}

void sub_20FDF8AF8(_BYTE *a1, _QWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v14[0] = 0;
    v14[1] = v6;
    sub_20FF58688((uint64_t *)v6, v14);
    v8 = v14[0];
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 120))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FDF8C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF8CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a2 + 120))(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 272))(a2, v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8B469C(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20FDF8E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20F23197C(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDF8EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  sub_20F282CE4(a2, (uint64_t)&v11);
  *(_QWORD *)a1 = &off_24C9F0E80;
  *(_QWORD *)(a1 + 8) = &off_24C9F0ED0;
  v5 = v11;
  v6 = v12[0];
  v11 = 0uLL;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v12 + 14);
  sub_20EB09F3C(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24C9F0AE0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24CA0C258;
  return a1;
}

void sub_20FDF8F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20EEC2D48((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FDF8FC8(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_2101FAEA0((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FD244(v4, &v13);
    sub_20FDE4E60(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FAEA0(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FD244(v4, &v13);
    sub_20FDE60BC(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_20FDF9174(const void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;

  v3 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
  v4 = v3;
  if (v3)
  {
    v5 = v3[3];
    if (*(_BYTE *)(v5 + 40))
    {
      v19 = (uint64_t *)(v5 + 16);
      sub_20E9F3D4C(&v19, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v19, v5 + 8);
    }
    sub_20E9EE95C(v4[3]);
    sub_20FDE75BC((uint64_t)v4, a2 + 16, 6u);
    v6 = v4[3];
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
    v8 = *(_QWORD *)(v6 + 48);
    if (v8)
      memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
    *(_QWORD *)(v6 + 48) = 0;
    v9 = *(_QWORD *)(v6 + 80);
    v10 = *(_QWORD *)(v6 + 88) - 8;
    *(_QWORD *)(v6 + 88) = v10;
    if (v9 == v10)
    {
      std::ostream::write();
      if (*(_BYTE *)(v6 + 40))
      {
        free(*(void **)(v6 + 24));
        *(_BYTE *)(v6 + 40) = 0;
      }
    }
    v11 = a2 + 192;
    v12 = v4[3];
    if (*(_BYTE *)(v12 + 40))
    {
      v19 = (uint64_t *)(v12 + 16);
      sub_20E9F3D4C(&v19, 2u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v19, v12 + 8);
    }
    sub_20E9EE95C(v4[3]);
    sub_20FDE7F5C(v4, v11);
    v13 = v4[3];
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
    v15 = *(_QWORD *)(v13 + 48);
    if (v15)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
    *(_QWORD *)(v13 + 48) = 0;
    v16 = *(_QWORD *)(v13 + 80);
    v17 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v17;
    if (v16 == v17)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
  }
  return v4 != 0;
}

BOOL sub_20FDF9344(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_2101FA8A4((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FB154(v4, &v13);
    sub_20FDE8860(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FA8A4(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2101FB154(v4, &v13);
    sub_20FDE90AC(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_20FDF94F0(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (v3[5])
    {
      v5 = (_QWORD *)v3[3];
      v16 = *(_BYTE *)(v4 + 32);
      sub_20E86A980(v5, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_20FDE9AB4(v4, a2 + 16, 6u);
    v6 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v7 = *(_QWORD **)(v4 + 24);
      v17 = *(_BYTE *)(v4 + 32);
      sub_20E86A980(v7, (uint64_t)&v17, 1);
    }
    v8 = *(_QWORD **)(v4 + 24);
    v18 = v6;
    sub_20E86A980(v8, (uint64_t)&v18, 1);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = (__int128 *)(a2 + 192);
    *(_QWORD *)(v4 + 40) = v9 + 1;
    if (v9 != -1)
    {
      v11 = *(_QWORD **)(v4 + 24);
      v19 = *(_BYTE *)(v4 + 32);
      sub_20E86A980(v11, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_20FDEA180((uint64_t (**)())v4, v10);
    v12 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v13 = *(_QWORD **)(v4 + 24);
      v20 = *(_BYTE *)(v4 + 32);
      sub_20E86A980(v13, (uint64_t)&v20, 1);
    }
    v14 = *(_QWORD **)(v4 + 24);
    v21 = v12;
    sub_20E86A980(v14, (uint64_t)&v21, 1);
    ++*(_QWORD *)(v4 + 40);
  }
  return v4 != 0;
}

BOOL sub_20FDF965C(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int __src;
  int v12;
  uint64_t v13;

  v2 = *(uint64_t (***)())a1;
  if (*(uint64_t (***)())a1 == &off_24CA16588)
  {
    v5 = a2 + 16;
    __src = 6;
    v6 = a1 + 24;
    sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a1);
    sub_20FDEA96C(a1, v5, v7);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v12 = 2;
    sub_2100B8FD4(v6, *(char **)(a1 + 32), (char *)&v12, (char *)&v13, 4);
    sub_2100B6A04((_QWORD *)a1);
    sub_20FDEB1BC(a1, a2 + 192);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return v2 == &off_24CA16588;
}

void sub_20FDF978C(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v4 = a1 + 16;
  v5 = a2[2];
  v9 = 6;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  v6 = v9;
  if (v5 < 1)
  {
    sub_20FDEB904((uint64_t)a2, v4, v9);
  }
  else
  {
    if (v5 == 2)
    {
      v9 = 3;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEB904((uint64_t)a2, v4, v6);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
  v7 = a1 + 192;
  v8 = a2[2];
  v9 = 2;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v8 < 1)
  {
    sub_20FDEC1D8(a2, v7);
  }
  else
  {
    if (v8 == 2)
    {
      v9 = 2;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEC1D8(a2, v7);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FDF98FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9[3];
  unsigned int v10;

  v4 = a1 + 16;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v10 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v5 + 104))(a2, &v10);
  if (v9[0] < 1)
  {
    if (v10 < 3)
      sub_20FDF69C0((uint64_t)&v10, a2, v4, v10);
    else
      sub_20FDF6C34(a2, v4, v10);
  }
  else
  {
    sub_20FDF63C8(v9, a2, v4, v10);
  }
  v6 = (unsigned __int16 *)(a1 + 192);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v8 = v9[0];
  v10 = 2;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a2, &v10);
  if (v8 < 1)
  {
    if (v10 < 2)
      sub_20FDF7CB8((_BYTE *)a2, (uint64_t)v6);
    else
      sub_20FDF81B0(a2, v6);
  }
  else
  {
    sub_20FDF77F0(v9, (_BYTE *)a2, v6, v10);
  }
}

uint64_t *sub_20FDF9A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_2101FAEA0(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, v10);
  v6 = v10[0];
  sub_20FDFA3C8((uint64_t)v9, a3);
  sub_20FDF9AFC(a2, v9, v6);
  result = sub_20FDE1900(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_20FDF9AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

void sub_20FDF9AFC(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(_QWORD *)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_2101FE8F4(a1, &v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFB2D0(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(_QWORD *)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FE8F4(a1, &v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFB2D0(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(_QWORD *)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FE8F4(a1, &v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFB2D0(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_2101FB01C(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_20FDFB2D0(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20FDFB2D0(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_2101FB01C(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(_QWORD *)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FDE34(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v36 = (uint64_t *)a2[28];
  v37 = (uint64_t *)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FDE34(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v41 = (uint64_t *)a2[32];
  v42 = (uint64_t *)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FE8F4(a1, &v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(_QWORD *)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FDE34(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_2101FAC64(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_20EB07D94((void ***)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_20FDFB2D0(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_2101FE8F4(a1, &v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_2101FAEA0(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_2101FD244(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_2101FD244(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_2101FE8F4(a1, &v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_2101FE8F4(a1, &v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_2101FD244(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_2101FE8F4(a1, &v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_20FDFA3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDFA3C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = sub_20FDFA578((_QWORD *)a1, a2);
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  sub_20FDFA578(v4 + 5, a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_20FDFA578((_QWORD *)(a1 + 80), a2 + 80);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  sub_20FDFA7F4((_QWORD *)(a1 + 120), a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  sub_20FDFA7F4((_QWORD *)(a1 + 160), a2 + 160);
  sub_20FDFAA08((_QWORD *)(a1 + 192), a2 + 192);
  sub_20FDFAC70((_QWORD *)(a1 + 224), a2 + 224);
  sub_20FDFAE90((_QWORD *)(a1 + 256), a2 + 256);
  sub_20FDFAA08((_QWORD *)(a1 + 288), a2 + 288);
  v5 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v5;
  sub_20FDFB0B0((_QWORD *)(a1 + 352), a2 + 352);
  return a1;
}

void sub_20FDFA4C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  sub_20FDE1CAC(v9);
  sub_20FDE1D38(v8);
  sub_20FDE1DB8(v7);
  sub_20FDE1CAC(v6);
  sub_20FDE1E38(v5);
  sub_20FDE1E38(v4);
  sub_20FDE1EB4(v3);
  sub_20FDE1EB4(v2);
  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

void sub_20FDFA538()
{
  JUMPOUT(0x20FDFA510);
}

void sub_20FDFA540()
{
  JUMPOUT(0x20FDFA518);
}

void sub_20FDFA548(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_20FDE1EB4(v2);
  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

void sub_20FDFA564(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDFA578(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA08288[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_20FDFA718();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA08298[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20FDFA694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA08110[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFA708()
{
  return 0;
}

uint64_t sub_20FDFA710()
{
  return 0x100000000;
}

void sub_20FDFA718()
{
  sub_20E860B90("vector");
}

void *sub_20FDFA72C(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20FDFA75C(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20FDFA7F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA082A8[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v11 = v7;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA082B8[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
  }
  return a1;
}

void sub_20FDFA8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = *(_DWORD *)(v14 + 16) - v17;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA08100[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFA950()
{
  return 0;
}

uint64_t sub_20FDFA958()
{
  return 0x100000000;
}

void *sub_20FDFA960(unsigned int **a1)
{
  return operator new(**a1);
}

vm_address_t sub_20FDFA98C(unsigned int **a1)
{
  vm_size_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 4095) & 0x1FFFFF000;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20FDFAA08(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA082C8[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_20FDFA718();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA082D8[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20FDFAB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA080D0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFAB98()
{
  return 0;
}

uint64_t sub_20FDFABA0()
{
  return 0x100000000;
}

void *sub_20FDFABA8(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20FDFABD8(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20FDFAC70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA082E8[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20FDFA718();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA082F8[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_20FDFAD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA080F0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFADD8()
{
  return 0;
}

uint64_t sub_20FDFADE0()
{
  return 0x100000000;
}

void *sub_20FDFADE8(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20FDFAE14(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20FDFAE90(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA08308[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20FDFA718();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA08318[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_20FDFAF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA080E0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFAFF8()
{
  return 0;
}

uint64_t sub_20FDFB000()
{
  return 0x100000000;
}

void *sub_20FDFB008(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20FDFB034(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20FDFB0B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24CA08328[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20FDFA718();
    v11 = (unint64_t)v7 >> 2;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20E877AB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24CA08338[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20FDFB1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24CA080C0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDFB218()
{
  return 0;
}

uint64_t sub_20FDFB220()
{
  return 0x100000000;
}

void *sub_20FDFB228(unsigned int **a1)
{
  return operator new(4 * **a1);
}

vm_address_t sub_20FDFB254(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 1023) & 0x1FFFFFC00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 4 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20FDFB2D0(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_20FDFB3D0((uint64_t)v5, a2);
  if (v6 == -1)
    sub_20E877AB8();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v6])(&v8, v5);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20FDFB38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDFB3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDFB3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDFB3D0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v22[0] = v4;
  v5 = "unknown";
  v6 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = "per-vertex";
      v6 = 10;
      goto LABEL_4;
    case 2:
      v5 = "per-face";
      v6 = 8;
LABEL_4:
      sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)v5, v6);
      break;
    case 3:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)&unk_2102CD20E, 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_21023DDB0);
      abort();
    default:
      break;
  }
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_18;
    }
    v12 = *(const void **)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_20E860B7C();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_17;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_17:
    memmove(v9, v12, v8);
LABEL_18:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v15 + 128);
    MEMORY[0x212BC6398](v15, 0x10B2C40EED050F3);
  }
  v22[0] = a1;
  v22[1] = __dst;
  v22[2] = a1;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    sub_20E877AB8();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t, uint64_t))off_24CA08138[v19])(&v23, a1, v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_20FDFB6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDFB6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDFB6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFB6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[48];

  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v11[0] = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(v11, 4u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v11, v5 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FDFA3C8((uint64_t)v11, a3);
  sub_20FDFB81C(a2, (uint64_t)v11, 4u);
  sub_20FDE1900((uint64_t *)v11);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
}

void sub_20FDFB808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

void sub_20FDFB81C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *i;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *j;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *k;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  size_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  size_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  std::bad_alloc *exception;
  std::bad_alloc *v198;
  uint64_t *v199;
  char v200;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v199 = (uint64_t *)(v7 + 16);
    sub_20E9F472C(&v199, v6);
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
      goto LABEL_7;
  }
  else
  {
    sub_20E9F4A34();
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
    {
      do
      {
LABEL_7:
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v13 + 40))
            break;
          v10 = *v8;
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v10);
          std::ostream::write();
          v11 = v8[1];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v11);
          std::ostream::write();
          v12 = v8[2];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v12);
          std::ostream::write();
          v8 += 3;
          if (v8 == v9)
            goto LABEL_43;
        }
        v14 = *v8;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_QWORD *)(v13 + 16);
        if ((unint64_t)(v15 - v16) >= 5)
        {
          v20 = *(char **)(v13 + 24);
        }
        else
        {
          if (v15)
            v17 = 2 * v15;
          else
            v17 = 0x2000;
          v18 = v16 + 5;
          while (v17 < v18)
          {
            v19 = (uint64_t)v17 <= 0;
            v17 *= 2;
            if (v19)
            {
              v17 = v18;
              break;
            }
          }
          v20 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v17, 0xAD6A59EEuLL);
          if (!v20)
          {
LABEL_316:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v198 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v198, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v13 + 24) = v20;
          *(_QWORD *)(v13 + 32) = v17;
          v16 = *(_QWORD *)(v13 + 16);
        }
        v21 = &v20[v16];
        *v21 = -54;
        *(_DWORD *)(v21 + 1) = bswap32(v14);
        v22 = *(_QWORD *)(v13 + 16);
        v23 = v22 + 5;
        *(_QWORD *)(v13 + 16) = v22 + 5;
        v24 = v8[1];
        v25 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v25 - (v22 + 5)) >= 5)
        {
          v27 = *(char **)(v13 + 24);
        }
        else
        {
          if (v25)
            v26 = 2 * v25;
          else
            v26 = 0x2000;
          while (v26 < v22 + 10)
          {
            v19 = (uint64_t)v26 <= 0;
            v26 *= 2;
            if (v19)
            {
              v26 = v22 + 10;
              break;
            }
          }
          v27 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v26, 0xAD6A59EEuLL);
          if (!v27)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v27;
          *(_QWORD *)(v13 + 32) = v26;
          v23 = *(_QWORD *)(v13 + 16);
        }
        v28 = &v27[v23];
        *v28 = -54;
        *(_DWORD *)(v28 + 1) = bswap32(v24);
        v29 = *(_QWORD *)(v13 + 16);
        v30 = v29 + 5;
        *(_QWORD *)(v13 + 16) = v29 + 5;
        v31 = v8[2];
        v32 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v32 - (v29 + 5)) >= 5)
        {
          v34 = *(char **)(v13 + 24);
        }
        else
        {
          if (v32)
            v33 = 2 * v32;
          else
            v33 = 0x2000;
          while (v33 < v29 + 10)
          {
            v19 = (uint64_t)v33 <= 0;
            v33 *= 2;
            if (v19)
            {
              v33 = v29 + 10;
              break;
            }
          }
          v34 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v33, 0xAD6A59EEuLL);
          if (!v34)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v34;
          *(_QWORD *)(v13 + 32) = v33;
          v30 = *(_QWORD *)(v13 + 16);
        }
        v35 = &v34[v30];
        *v35 = -54;
        *(_DWORD *)(v35 + 1) = bswap32(v31);
        *(_QWORD *)(v13 + 16) += 5;
        v8 += 3;
      }
      while (v8 != v9);
    }
  }
LABEL_43:
  v36 = *(_DWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v199 = (uint64_t *)(v37 + 16);
    sub_20E9F3D4C(&v199, v36);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v199, v37 + 8);
  }
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
    v199 = (uint64_t *)(v39 + 16);
    sub_20E9F472C(&v199, v38);
    v40 = *(unsigned int **)(a2 + 40);
    i = *(unsigned int **)(a2 + 48);
    if (i != v40)
      goto LABEL_52;
  }
  else
  {
    sub_20E9F4A34();
    v40 = *(unsigned int **)(a2 + 40);
    for (i = *(unsigned int **)(a2 + 48); v40 != i; v40 += 3)
    {
LABEL_52:
      while (1)
      {
        v45 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v45 + 40))
          break;
        v42 = *v40;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v42);
        std::ostream::write();
        v43 = v40[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v43);
        std::ostream::write();
        v44 = v40[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v44);
        std::ostream::write();
        v40 += 3;
        if (v40 == i)
          goto LABEL_88;
      }
      v46 = *v40;
      v47 = *(_QWORD *)(v45 + 32);
      v48 = *(_QWORD *)(v45 + 16);
      if ((unint64_t)(v47 - v48) >= 5)
      {
        v51 = *(char **)(v45 + 24);
      }
      else
      {
        if (v47)
          v49 = 2 * v47;
        else
          v49 = 0x2000;
        v50 = v48 + 5;
        while (v49 < v50)
        {
          v19 = (uint64_t)v49 <= 0;
          v49 *= 2;
          if (v19)
          {
            v49 = v50;
            break;
          }
        }
        v51 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v49, 0xAD6A59EEuLL);
        if (!v51)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v51;
        *(_QWORD *)(v45 + 32) = v49;
        v48 = *(_QWORD *)(v45 + 16);
      }
      v52 = &v51[v48];
      *v52 = -54;
      *(_DWORD *)(v52 + 1) = bswap32(v46);
      v53 = *(_QWORD *)(v45 + 16);
      v54 = v53 + 5;
      *(_QWORD *)(v45 + 16) = v53 + 5;
      v55 = v40[1];
      v56 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v56 - (v53 + 5)) >= 5)
      {
        v58 = *(char **)(v45 + 24);
      }
      else
      {
        if (v56)
          v57 = 2 * v56;
        else
          v57 = 0x2000;
        while (v57 < v53 + 10)
        {
          v19 = (uint64_t)v57 <= 0;
          v57 *= 2;
          if (v19)
          {
            v57 = v53 + 10;
            break;
          }
        }
        v58 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v57, 0xAD6A59EEuLL);
        if (!v58)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v58;
        *(_QWORD *)(v45 + 32) = v57;
        v54 = *(_QWORD *)(v45 + 16);
      }
      v59 = &v58[v54];
      *v59 = -54;
      *(_DWORD *)(v59 + 1) = bswap32(v55);
      v60 = *(_QWORD *)(v45 + 16);
      v61 = v60 + 5;
      *(_QWORD *)(v45 + 16) = v60 + 5;
      v62 = v40[2];
      v63 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v63 - (v60 + 5)) >= 5)
      {
        v65 = *(char **)(v45 + 24);
      }
      else
      {
        if (v63)
          v64 = 2 * v63;
        else
          v64 = 0x2000;
        while (v64 < v60 + 10)
        {
          v19 = (uint64_t)v64 <= 0;
          v64 *= 2;
          if (v19)
          {
            v64 = v60 + 10;
            break;
          }
        }
        v65 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v64, 0xAD6A59EEuLL);
        if (!v65)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v65;
        *(_QWORD *)(v45 + 32) = v64;
        v61 = *(_QWORD *)(v45 + 16);
      }
      v66 = &v65[v61];
      *v66 = -54;
      *(_DWORD *)(v66 + 1) = bswap32(v62);
      *(_QWORD *)(v45 + 16) += 5;
    }
  }
LABEL_88:
  v67 = *(_DWORD *)(a2 + 72);
  v68 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v68 + 40))
  {
    v199 = (uint64_t *)(v68 + 16);
    sub_20E9F3D4C(&v199, v67);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v199, v68 + 8);
  }
  v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v70 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v70 + 40))
  {
    v199 = (uint64_t *)(v70 + 16);
    sub_20E9F472C(&v199, v69);
    v71 = *(unsigned int **)(a2 + 80);
    j = *(unsigned int **)(a2 + 88);
    if (j != v71)
      goto LABEL_97;
  }
  else
  {
    sub_20E9F4A34();
    v71 = *(unsigned int **)(a2 + 80);
    for (j = *(unsigned int **)(a2 + 88); v71 != j; v71 += 3)
    {
LABEL_97:
      while (1)
      {
        v76 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v76 + 40))
          break;
        v73 = *v71;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v73);
        std::ostream::write();
        v74 = v71[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v74);
        std::ostream::write();
        v75 = v71[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v75);
        std::ostream::write();
        v71 += 3;
        if (v71 == j)
          goto LABEL_133;
      }
      v77 = *v71;
      v78 = *(_QWORD *)(v76 + 32);
      v79 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)(v78 - v79) >= 5)
      {
        v82 = *(char **)(v76 + 24);
      }
      else
      {
        if (v78)
          v80 = 2 * v78;
        else
          v80 = 0x2000;
        v81 = v79 + 5;
        while (v80 < v81)
        {
          v19 = (uint64_t)v80 <= 0;
          v80 *= 2;
          if (v19)
          {
            v80 = v81;
            break;
          }
        }
        v82 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v80, 0xAD6A59EEuLL);
        if (!v82)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v82;
        *(_QWORD *)(v76 + 32) = v80;
        v79 = *(_QWORD *)(v76 + 16);
      }
      v83 = &v82[v79];
      *v83 = -54;
      *(_DWORD *)(v83 + 1) = bswap32(v77);
      v84 = *(_QWORD *)(v76 + 16);
      v85 = v84 + 5;
      *(_QWORD *)(v76 + 16) = v84 + 5;
      v86 = v71[1];
      v87 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v87 - (v84 + 5)) >= 5)
      {
        v89 = *(char **)(v76 + 24);
      }
      else
      {
        if (v87)
          v88 = 2 * v87;
        else
          v88 = 0x2000;
        while (v88 < v84 + 10)
        {
          v19 = (uint64_t)v88 <= 0;
          v88 *= 2;
          if (v19)
          {
            v88 = v84 + 10;
            break;
          }
        }
        v89 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v88, 0xAD6A59EEuLL);
        if (!v89)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v89;
        *(_QWORD *)(v76 + 32) = v88;
        v85 = *(_QWORD *)(v76 + 16);
      }
      v90 = &v89[v85];
      *v90 = -54;
      *(_DWORD *)(v90 + 1) = bswap32(v86);
      v91 = *(_QWORD *)(v76 + 16);
      v92 = v91 + 5;
      *(_QWORD *)(v76 + 16) = v91 + 5;
      v93 = v71[2];
      v94 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v94 - (v91 + 5)) >= 5)
      {
        v96 = *(char **)(v76 + 24);
      }
      else
      {
        if (v94)
          v95 = 2 * v94;
        else
          v95 = 0x2000;
        while (v95 < v91 + 10)
        {
          v19 = (uint64_t)v95 <= 0;
          v95 *= 2;
          if (v19)
          {
            v95 = v91 + 10;
            break;
          }
        }
        v96 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v95, 0xAD6A59EEuLL);
        if (!v96)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v96;
        *(_QWORD *)(v76 + 32) = v95;
        v92 = *(_QWORD *)(v76 + 16);
      }
      v97 = &v96[v92];
      *v97 = -54;
      *(_DWORD *)(v97 + 1) = bswap32(v93);
      *(_QWORD *)(v76 + 16) += 5;
    }
  }
LABEL_133:
  v98 = *(_DWORD *)(a2 + 112);
  v99 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v99 + 40))
  {
    v199 = (uint64_t *)(v99 + 16);
    sub_20E9F3D4C(&v199, v98);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
      goto LABEL_135;
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v199, v99 + 8);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
    {
LABEL_135:
      v199 = (uint64_t *)(v101 + 16);
      sub_20E9F472C(&v199, v100);
      v103 = *(char **)(a2 + 120);
      v102 = *(char **)(a2 + 128);
      v104 = v102 - v103;
      v105 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v105 + 40))
        goto LABEL_136;
      goto LABEL_141;
    }
  }
  sub_20E9F4A34();
  v103 = *(char **)(a2 + 120);
  v102 = *(char **)(a2 + 128);
  v104 = v102 - v103;
  v105 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v105 + 40))
  {
LABEL_136:
    v199 = (uint64_t *)(v105 + 16);
    if (v102 != v103)
    {
      do
      {
        v106 = *v103++;
        sub_20E9F3164(&v199, v106);
        --v104;
      }
      while (v104);
    }
    goto LABEL_146;
  }
LABEL_141:
  if (v102 != v103)
  {
    do
    {
      while (1)
      {
        v107 = *v103;
        if ((v107 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v107;
        std::ostream::write();
        ++v103;
        if (!--v104)
          goto LABEL_146;
      }
      LOBYTE(v199) = *v103;
      std::ostream::write();
      ++v103;
      --v104;
    }
    while (v104);
  }
LABEL_146:
  v108 = *(_DWORD *)(a2 + 152);
  v109 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v109 + 40))
  {
    v199 = (uint64_t *)(v109 + 16);
    sub_20E9F3D4C(&v199, v108);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
      goto LABEL_148;
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v199, v109 + 8);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
    {
LABEL_148:
      v199 = (uint64_t *)(v111 + 16);
      sub_20E9F472C(&v199, v110);
      v113 = *(char **)(a2 + 160);
      v112 = *(char **)(a2 + 168);
      v114 = v112 - v113;
      v115 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v115 + 40))
        goto LABEL_149;
      goto LABEL_154;
    }
  }
  sub_20E9F4A34();
  v113 = *(char **)(a2 + 160);
  v112 = *(char **)(a2 + 168);
  v114 = v112 - v113;
  v115 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v115 + 40))
  {
LABEL_149:
    v199 = (uint64_t *)(v115 + 16);
    if (v112 != v113)
    {
      do
      {
        v116 = *v113++;
        sub_20E9F3164(&v199, v116);
        --v114;
      }
      while (v114);
    }
    goto LABEL_159;
  }
LABEL_154:
  if (v112 != v113)
  {
    do
    {
      while (1)
      {
        v117 = *v113;
        if ((v117 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v117;
        std::ostream::write();
        ++v113;
        if (!--v114)
          goto LABEL_159;
      }
      LOBYTE(v199) = *v113;
      std::ostream::write();
      ++v113;
      --v114;
    }
    while (v114);
  }
LABEL_159:
  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  v119 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v119 + 40))
  {
    sub_20E9F4A34();
    v120 = *(_QWORD *)(a2 + 192);
    v121 = *(_QWORD *)(a2 + 200) - v120;
    if (!v121)
      goto LABEL_192;
    goto LABEL_163;
  }
  v199 = (uint64_t *)(v119 + 16);
  sub_20E9F472C(&v199, v118);
  v120 = *(_QWORD *)(a2 + 192);
  v121 = *(_QWORD *)(a2 + 200) - v120;
  if (v121)
  {
LABEL_163:
    v122 = (unsigned int *)(v120 + 8);
    v123 = 12 * (v121 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v125 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v125 + 40))
            break;
          v199 = (uint64_t *)(v125 + 16);
          sub_20E9F3D4C(&v199, *(v122 - 2));
          sub_20E9F3D4C(&v199, *(v122 - 1));
          v124 = *v122;
          v122 += 3;
          sub_20E9F3D4C(&v199, v124);
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        v126 = *(v122 - 2);
        if (v126 > 0xFF)
          break;
        if (v126 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v126;
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
        else
        {
          LOBYTE(v199) = *(v122 - 2);
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
LABEL_174:
        if (v127 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v127);
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v127) >> 16;
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
LABEL_186:
        if (v128 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        else
        {
          LOBYTE(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
      }
      if (HIWORD(v126))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v126);
        std::ostream::write();
        v127 = *(v122 - 1);
        if (v127 < 0x100)
          goto LABEL_178;
        goto LABEL_174;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v126) >> 16;
      std::ostream::write();
      v127 = *(v122 - 1);
      if (v127 >= 0x100)
        goto LABEL_174;
LABEL_178:
      if (v127 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v127;
        std::ostream::write();
        v128 = *v122;
        if (*v122 >= 0x100)
          goto LABEL_182;
        goto LABEL_186;
      }
      LOBYTE(v199) = v127;
      std::ostream::write();
      v128 = *v122;
      if (*v122 < 0x100)
        goto LABEL_186;
LABEL_182:
      if (v128 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v128);
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v128) >> 16;
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
    }
  }
LABEL_192:
  v129 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  v130 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v130 + 40))
  {
    sub_20E9F4A34();
    v131 = *(_QWORD *)(a2 + 224);
    v132 = *(_QWORD *)(a2 + 232) - v131;
    if (!v132)
      goto LABEL_217;
    goto LABEL_196;
  }
  v199 = (uint64_t *)(v130 + 16);
  sub_20E9F472C(&v199, v129);
  v131 = *(_QWORD *)(a2 + 224);
  v132 = *(_QWORD *)(a2 + 232) - v131;
  if (v132)
  {
LABEL_196:
    v133 = (unsigned int *)(v131 + 4);
    v134 = 8 * (v132 >> 3);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v136 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v136 + 40))
            break;
          v199 = (uint64_t *)(v136 + 16);
          sub_20E9F3D4C(&v199, *(v133 - 1));
          v135 = *v133;
          v133 += 2;
          sub_20E9F3D4C(&v199, v135);
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        v137 = *(v133 - 1);
        if (v137 <= 0xFF)
          break;
        if (!HIWORD(v137))
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v137) >> 16;
          std::ostream::write();
          v138 = *v133;
          if (*v133 < 0x100)
            goto LABEL_211;
          goto LABEL_207;
        }
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v137);
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
LABEL_211:
        if (v138 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        else
        {
          LOBYTE(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
      }
      if (v137 > 0x7F)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v137;
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
        goto LABEL_211;
      }
      LOBYTE(v199) = *(v133 - 1);
      std::ostream::write();
      v138 = *v133;
      if (*v133 < 0x100)
        goto LABEL_211;
LABEL_207:
      if (v138 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v138);
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v138) >> 16;
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
    }
  }
LABEL_217:
  v139 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  v140 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v140 + 40))
  {
    v199 = (uint64_t *)(v140 + 16);
    sub_20E9F472C(&v199, v139);
    v141 = *(unsigned int **)(a2 + 256);
    k = *(unsigned int **)(a2 + 264);
    if (k != v141)
      goto LABEL_223;
  }
  else
  {
    sub_20E9F4A34();
    v141 = *(unsigned int **)(a2 + 256);
    for (k = *(unsigned int **)(a2 + 264); v141 != k; v141 += 2)
    {
LABEL_223:
      while (1)
      {
        v145 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v145 + 40))
          break;
        v143 = *v141;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v143);
        std::ostream::write();
        v144 = v141[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v144);
        std::ostream::write();
        v141 += 2;
        if (v141 == k)
          goto LABEL_248;
      }
      v146 = *v141;
      v147 = *(_QWORD *)(v145 + 32);
      v148 = *(_QWORD *)(v145 + 16);
      if ((unint64_t)(v147 - v148) >= 5)
      {
        v151 = *(char **)(v145 + 24);
      }
      else
      {
        if (v147)
          v149 = 2 * v147;
        else
          v149 = 0x2000;
        v150 = v148 + 5;
        while (v149 < v150)
        {
          v19 = (uint64_t)v149 <= 0;
          v149 *= 2;
          if (v19)
          {
            v149 = v150;
            break;
          }
        }
        v151 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v149, 0xAD6A59EEuLL);
        if (!v151)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v151;
        *(_QWORD *)(v145 + 32) = v149;
        v148 = *(_QWORD *)(v145 + 16);
      }
      v152 = &v151[v148];
      *v152 = -54;
      *(_DWORD *)(v152 + 1) = bswap32(v146);
      v153 = *(_QWORD *)(v145 + 16);
      v154 = v153 + 5;
      *(_QWORD *)(v145 + 16) = v153 + 5;
      v155 = v141[1];
      v156 = *(_QWORD *)(v145 + 32);
      if ((unint64_t)(v156 - (v153 + 5)) >= 5)
      {
        v158 = *(char **)(v145 + 24);
      }
      else
      {
        if (v156)
          v157 = 2 * v156;
        else
          v157 = 0x2000;
        while (v157 < v153 + 10)
        {
          v19 = (uint64_t)v157 <= 0;
          v157 *= 2;
          if (v19)
          {
            v157 = v153 + 10;
            break;
          }
        }
        v158 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v157, 0xAD6A59EEuLL);
        if (!v158)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v158;
        *(_QWORD *)(v145 + 32) = v157;
        v154 = *(_QWORD *)(v145 + 16);
      }
      v159 = &v158[v154];
      *v159 = -54;
      *(_DWORD *)(v159 + 1) = bswap32(v155);
      *(_QWORD *)(v145 + 16) += 5;
    }
  }
LABEL_248:
  v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  v161 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v161 + 40))
  {
    sub_20E9F4A34();
    v162 = *(_QWORD *)(a2 + 288);
    v163 = *(_QWORD *)(a2 + 296) - v162;
    if (!v163)
      goto LABEL_281;
    goto LABEL_252;
  }
  v199 = (uint64_t *)(v161 + 16);
  sub_20E9F472C(&v199, v160);
  v162 = *(_QWORD *)(a2 + 288);
  v163 = *(_QWORD *)(a2 + 296) - v162;
  if (v163)
  {
LABEL_252:
    v164 = (unsigned int *)(v162 + 8);
    v165 = 12 * (v163 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v167 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v167 + 40))
            break;
          v199 = (uint64_t *)(v167 + 16);
          sub_20E9F3D4C(&v199, *(v164 - 2));
          sub_20E9F3D4C(&v199, *(v164 - 1));
          v166 = *v164;
          v164 += 3;
          sub_20E9F3D4C(&v199, v166);
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        v168 = *(v164 - 2);
        if (v168 > 0xFF)
          break;
        if (v168 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v168;
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
        else
        {
          LOBYTE(v199) = *(v164 - 2);
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
LABEL_263:
        if (v169 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v169);
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v169) >> 16;
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
LABEL_275:
        if (v170 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        else
        {
          LOBYTE(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
      }
      if (HIWORD(v168))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v168);
        std::ostream::write();
        v169 = *(v164 - 1);
        if (v169 < 0x100)
          goto LABEL_267;
        goto LABEL_263;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v168) >> 16;
      std::ostream::write();
      v169 = *(v164 - 1);
      if (v169 >= 0x100)
        goto LABEL_263;
LABEL_267:
      if (v169 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v169;
        std::ostream::write();
        v170 = *v164;
        if (*v164 >= 0x100)
          goto LABEL_271;
        goto LABEL_275;
      }
      LOBYTE(v199) = v169;
      std::ostream::write();
      v170 = *v164;
      if (*v164 < 0x100)
        goto LABEL_275;
LABEL_271:
      if (v170 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v170);
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v170) >> 16;
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
    }
  }
LABEL_281:
  if (a3 < 2)
    return;
  v171 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 344))
  {
    if (*(_BYTE *)(v171 + 40))
    {
      v199 = (uint64_t *)(v171 + 16);
      sub_20E9F3164(&v199, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v199) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
LABEL_301:
    v186 = *(_DWORD *)(a2 + 348);
    v187 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v187 + 40))
    {
      v199 = (uint64_t *)(v187 + 16);
      sub_20E9F3D4C(&v199, v186);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
        goto LABEL_303;
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v199, v187 + 8);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
      {
LABEL_303:
        v199 = (uint64_t *)(v189 + 16);
        sub_20E9F472C(&v199, v188);
        v191 = *(unsigned int **)(a2 + 352);
        v190 = *(unsigned int **)(a2 + 360);
        v192 = v190 - v191;
        v193 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v193 + 40))
          goto LABEL_304;
LABEL_310:
        if (v190 != v191)
        {
          v195 = 4 * v192;
          do
          {
            v196 = *v191++;
            LOBYTE(v199) = -54;
            *(_DWORD *)((char *)&v199 + 1) = bswap32(v196);
            std::ostream::write();
            v195 -= 4;
          }
          while (v195);
        }
        return;
      }
    }
    sub_20E9F4A34();
    v191 = *(unsigned int **)(a2 + 352);
    v190 = *(unsigned int **)(a2 + 360);
    v192 = v190 - v191;
    v193 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v193 + 40))
    {
LABEL_304:
      v199 = (uint64_t *)(v193 + 16);
      if (v190 != v191)
      {
        v194 = 4 * v192;
        do
        {
          sub_20E9F4B2C((uint64_t)&v200, &v199, v191++);
          v194 -= 4;
        }
        while (v194);
      }
      return;
    }
    goto LABEL_310;
  }
  if (*(_BYTE *)(v171 + 40))
  {
    v199 = (uint64_t *)(v171 + 16);
    sub_20E9F3164(&v199, 1);
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
      goto LABEL_285;
  }
  else
  {
    LOBYTE(v199) = 1;
    std::ostream::write();
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
    {
LABEL_285:
      v199 = (uint64_t *)(v172 + 16);
      sub_20E9F3D4C(&v199, 2u);
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v173 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v173 + 40))
        goto LABEL_286;
LABEL_293:
      v175 = *(_DWORD *)(a2 + 320);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v175);
      std::ostream::write();
      v176 = *(_DWORD *)(a2 + 324);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v176);
      std::ostream::write();
      v177 = *(_DWORD *)(a2 + 328);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v177);
      std::ostream::write();
      v174 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v174 + 40))
        goto LABEL_287;
      goto LABEL_294;
    }
  }
  LOBYTE(v199) = 2;
  std::ostream::write();
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  v173 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v173 + 40))
    goto LABEL_293;
LABEL_286:
  v199 = (uint64_t *)(v173 + 16);
  sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 320));
  sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 324));
  sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 328));
  v174 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v174 + 40))
  {
LABEL_287:
    v199 = (uint64_t *)(v174 + 16);
    sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 332));
    sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 336));
    sub_20E9F4B2C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 340));
    goto LABEL_295;
  }
LABEL_294:
  v178 = *(_DWORD *)(a2 + 332);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v178);
  std::ostream::write();
  v179 = *(_DWORD *)(a2 + 336);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v179);
  std::ostream::write();
  v180 = *(_DWORD *)(a2 + 340);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v180);
  std::ostream::write();
LABEL_295:
  v181 = *(_QWORD *)(a1 + 24);
  v182 = *(_QWORD *)(*(_QWORD *)(v181 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v181 + 48), *(_QWORD *)(v181 + 16) - v182 - 9);
  v183 = *(_QWORD *)(v181 + 48);
  if (v183)
    memmove((void *)(*(_QWORD *)(v181 + 24) + v182), *(const void **)(v181 + 56), v183);
  *(_QWORD *)(v181 + 48) = 0;
  v184 = *(_QWORD *)(v181 + 80);
  v185 = *(_QWORD *)(v181 + 88) - 8;
  *(_QWORD *)(v181 + 88) = v185;
  if (v184 == v185)
  {
    std::ostream::write();
    if (*(_BYTE *)(v181 + 40))
    {
      free(*(void **)(v181 + 24));
      *(_BYTE *)(v181 + 40) = 0;
    }
  }
  if (a3 >= 4)
    goto LABEL_301;
}

uint64_t *sub_20FDFD014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_2101FA8A4(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, v10);
  v6 = v10[0];
  sub_20FDFA3C8((uint64_t)v9, a3);
  sub_20FDFD0F4(a2, v9, v6);
  result = sub_20FDE1900(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_20FDFD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

void sub_20FDFD0F4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_2101FC804(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFD9C0(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FC804(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFD9C0(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FC804(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDFD9C0(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_2101FAA20(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_20FDFD9C0(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20FDFD9C0(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_2101FAA20(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FBD44(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FBD44(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FC804(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2101FBD44(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_2101FA67C(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_20EB911C0((uint64_t *)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_20FDFD9C0(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_2101FC804(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_2101FA8A4(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_2101FB154(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_2101FB154(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_2101FC804(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_2101FC804(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_2101FB154(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_2101FC804(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_20FDFD9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FDFD9C0(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_20FDFB3D0((uint64_t)v5, a2);
  if (v6 == -1)
    sub_20E877AB8();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v6])(&v8, v5);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20FDFDA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDFDA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDFDAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDFDAC0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t n;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ii;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned __int8 v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *a2;
  v9 = a2[1];
  if (v9 != *a2)
  {
    do
    {
      if (v7)
      {
        v10 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v10, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v11 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11 + 1;
      if (v11 != -1)
      {
        v12 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v12, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13 + 1;
      if (v13 != -1)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v14, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v7 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v7;
      v8 += 12;
    }
    while (v8 != v9);
  }
  if (v7)
  {
    v15 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v15, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16 + 1;
  if (v16 != -1)
  {
    v17 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v17, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v18 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = a2[5];
  for (i = a2[6]; v19 != i; v19 += 12)
  {
    if (v18)
    {
      v21 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v21, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v22 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22 + 1;
    if (v22 != -1)
    {
      v23 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v23, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v24 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24 + 1;
    if (v24 != -1)
    {
      v25 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v25, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v18;
  }
  if (v18)
  {
    v26 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v26, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v27 + 1;
  if (v27 != -1)
  {
    v28 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v28, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v29 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v29;
  v30 = a2[10];
  for (j = a2[11]; v30 != j; v30 += 12)
  {
    if (v29)
    {
      v32 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v32, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v33 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v33 + 1;
    if (v33 != -1)
    {
      v34 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v34, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v35 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v35 + 1;
    if (v35 != -1)
    {
      v36 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v36, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v29 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v29;
  }
  if (v29)
  {
    v37 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v37, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v38 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v38 + 1;
  if (v38 != -1)
  {
    v39 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v39, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v40 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v40;
  v42 = (unsigned __int8 *)a2[15];
  v41 = (unsigned __int8 *)a2[16];
  v43 = v41 - v42;
  if (v41 != v42)
  {
    do
    {
      sub_20E9E6F58(a1, v42++);
      --v43;
    }
    while (v43);
    v40 = *(_QWORD *)(a1 + 40);
  }
  if (v40)
  {
    v44 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v44, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v45 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v45 + 1;
  if (v45 != -1)
  {
    v46 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v46, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v47 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v47;
  v49 = (unsigned __int8 *)a2[20];
  v48 = (unsigned __int8 *)a2[21];
  v50 = v48 - v49;
  if (v48 != v49)
  {
    do
    {
      sub_20E9E6F58(a1, v49++);
      --v50;
    }
    while (v50);
    v47 = *(_QWORD *)(a1 + 40);
  }
  if (v47)
  {
    v51 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v51, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v52 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v52;
  v53 = a2[24];
  for (k = a2[25]; v53 != k; v53 += 12)
  {
    if (v52)
    {
      v63 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v63, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v64 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v64 + 1;
    if (v64 != -1)
    {
      v65 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v65, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v66 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v66 + 1;
    if (v66 != -1)
    {
      v67 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v67, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v52 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v52;
  }
  if (v52)
  {
    v55 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v55, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v56 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v56;
  v57 = a2[28];
  for (m = a2[29]; v57 != m; v57 += 8)
  {
    if (v56)
    {
      v68 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v68, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v69 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v69 + 1;
    if (v69 != -1)
    {
      v70 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v70, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v56 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v56;
  }
  if (v56)
  {
    v59 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v59, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v60 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v60;
  v61 = a2[32];
  for (n = a2[33]; v61 != n; v61 += 8)
  {
    if (v60)
    {
      v71 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v71, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v72 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v72 + 1;
    if (v72 != -1)
    {
      v73 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v73, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v60 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v60;
  }
  if (v60)
  {
    v74 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v74, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v75 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v75;
  v76 = a2[36];
  for (ii = a2[37]; v76 != ii; v76 += 12)
  {
    if (v75)
    {
      v95 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v95, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v96 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v96 + 1;
    if (v96 != -1)
    {
      v97 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v97, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v98 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v98 + 1;
    if (v98 != -1)
    {
      v99 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v99, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v75 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v75;
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      v108 = 1;
      sub_20E9E6F58(a1, &v108);
      if (*(_QWORD *)(a1 + 40))
      {
        v78 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v78, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v79 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v79 + 1;
      if (v79 != -1)
      {
        v80 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v80, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v81 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v81 + 1;
      if (v81 != -1)
      {
        v82 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v82, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v83 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v83 + 1;
      if (v83 != -1)
      {
        v84 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v84, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v85 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v85 + 1;
      if (v85 != -1)
      {
        v86 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v86, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v87 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v87 + 1;
      if (v87 != -1)
      {
        v88 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v88, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v89 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v89 + 1;
      if (v89 != -1)
      {
        v90 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v90, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v91 = *(_QWORD *)(a1 + 40);
      v92 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v91 + 1;
      if (v91 != -1)
      {
        v93 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v93, (uint64_t)&v108, 1);
      }
      v94 = *(_QWORD **)(a1 + 24);
      v108 = v92;
      sub_20E86A980(v94, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      if (a3 < 4)
        return;
    }
    else
    {
      v108 = 0;
      sub_20E9E6F58(a1, &v108);
      if (a3 < 4)
        return;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v100 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v100, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v101 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v101 + 1;
    if (v101 != -1)
    {
      v102 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v102, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v103 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v103;
    v104 = a2[44];
    v105 = a2[45] - v104;
    if (v105)
    {
      v106 = 4 * (v105 >> 2);
      do
      {
        if (v103)
        {
          v107 = *(_QWORD **)(a1 + 24);
          v108 = *(_BYTE *)(a1 + 32);
          sub_20E86A980(v107, (uint64_t)&v108, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
        v104 += 4;
        std::ostream::operator<<();
        v103 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 40) = v103;
        v106 -= 4;
      }
      while (v106);
    }
  }
}

uint64_t *sub_20FDFE76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *result;
  uint64_t v35;
  char *__src;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char v58[12];
  char v59[12];
  char v60[4];
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  LODWORD(__src) = 4;
  v4 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v5 = __src;
  sub_2100B6A04((_QWORD *)a1);
  sub_20FDFA3C8((uint64_t)&__src, a2);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - __src) >> 2);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v6 = __src;
  if (v37 != __src)
  {
    v7 = 12 * ((v37 - __src) / 12);
    do
    {
      v8 = v6 + 12;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v6, v6 + 12, 12);
      v6 = v8;
      v7 -= 12;
    }
    while (v7);
  }
  LODWORD(v64) = v38;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 2);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v9 = v39;
  if (v40 != v39)
  {
    v10 = 12 * ((v40 - v39) / 12);
    do
    {
      v11 = v9 + 12;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v9, v9 + 12, 12);
      v9 = v11;
      v10 -= 12;
    }
    while (v10);
  }
  LODWORD(v64) = v41;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v12 = v42;
  if (v43 != v42)
  {
    v13 = 12 * ((v43 - v42) / 12);
    do
    {
      v14 = v12 + 12;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v12, v12 + 12, 12);
      v12 = v14;
      v13 -= 12;
    }
    while (v13);
  }
  LODWORD(v64) = v44;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v46 - v45;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v16 = v45;
  v15 = v46;
  if (!v45
    && v46
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_38;
  }
  sub_2100B8FD4(v4, *(char **)(a1 + 32), v16, v15, v15 - v16);
  LODWORD(v64) = v47;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v49 - v48;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v17 = v48;
  v18 = v49;
  if (!v48
    && v49
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_38;
  }
  sub_2100B8FD4(v4, *(char **)(a1 + 32), v17, v18, v18 - v17);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 2);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v19 = v50;
  if (v51 != v50)
  {
    v20 = 12 * ((v51 - v50) / 12);
    do
    {
      v21 = v19 + 12;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v19, v19 + 12, 12);
      v19 = v21;
      v20 -= 12;
    }
    while (v20);
  }
  v64 = (v53 - v52) >> 3;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v22 = v52;
  if (v53 != v52)
  {
    v23 = 8 * ((v53 - v52) >> 3);
    do
    {
      v24 = v22 + 8;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v22 = v24;
      v23 -= 8;
    }
    while (v23);
  }
  v64 = (v55 - v54) >> 3;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v25 = v54;
  if (v55 != v54)
  {
    v26 = 8 * ((v55 - v54) >> 3);
    do
    {
      v27 = v25 + 8;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
      v25 = v27;
      v26 -= 8;
    }
    while (v26);
  }
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 2);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v28 = v56;
  if (v57 != v56)
  {
    v29 = 12 * ((v57 - v56) / 12);
    do
    {
      v30 = v28 + 12;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v28, v28 + 12, 12);
      v28 = v30;
      v29 -= 12;
    }
    while (v29);
  }
  if (v5 >= 2)
  {
    if (v60[0])
    {
      LOBYTE(v64) = 1;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
      LODWORD(v64) = 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      sub_2100B6A04((_QWORD *)a1);
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v58, v59, 12);
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v59, v60, 12);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v31 + 10) = *(_QWORD *)(a1 + 32) - v31 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
    }
    else
    {
      LOBYTE(v64) = 0;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
    }
    if (v5 >= 4)
    {
      LODWORD(v64) = v61;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      v64 = (v63 - v62) >> 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
      v32 = v62;
      v33 = v63;
      if (v62
        || !v63
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        sub_2100B8FD4(v4, *(char **)(a1 + 32), v32, v33, v33 - v32);
        goto LABEL_37;
      }
LABEL_38:
      abort();
    }
  }
LABEL_37:
  result = sub_20FDE1900((uint64_t *)&__src);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v35 + 10) = *(_QWORD *)(a1 + 32) - v35 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_20FDFEE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEF00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDFEF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDFEF3C(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t *result;
  uint64_t v9[48];

  LODWORD(v9[0]) = 4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9);
  v6 = v9[0];
  if (*a1 < 1)
  {
    sub_20FDFA3C8((uint64_t)v9, a3);
    sub_20FDFF08C(a2, v9, v6);
    return sub_20FDE1900(v9);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v9[0]) = 3, (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9), *a1 < 1))
    {
      v7 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v7 = 1;
    }
    sub_20FDFA3C8((uint64_t)v9, a3);
    sub_20FDFF08C(a2, v9, v6);
    result = sub_20FDE1900(v9);
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

void sub_20FDFF064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

void sub_20FDFF078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDFF08C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  uint64_t n;
  uint64_t result;
  uint64_t v25;
  uint64_t ii;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 8);
      v6 += 12;
    }
    while (v6 != v7);
  }
  sub_20FDFF708((_BYTE *)a1, (_DWORD *)a2 + 8);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v8 = a2[5];
  for (i = a2[6]; v8 != i; v8 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 8);
  }
  sub_20FDFF708((_BYTE *)a1, (_DWORD *)a2 + 18);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v10 = a2[10];
  for (j = a2[11]; v10 != j; v10 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 8);
  }
  sub_20FDFF708((_BYTE *)a1, (_DWORD *)a2 + 28);
  v31 = a2[16] - a2[15];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v13 = a2[15];
  v12 = a2[16];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13++);
      --v14;
    }
    while (v14);
  }
  sub_20FDFF708((_BYTE *)a1, (_DWORD *)a2 + 38);
  v31 = a2[21] - a2[20];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v16 = a2[20];
  v15 = a2[21];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v16++);
      --v17;
    }
    while (v17);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[25] - a2[24]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v18 = a2[24];
  for (k = a2[25]; v18 != k; v18 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 8);
  }
  v31 = (a2[29] - a2[28]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v20 = a2[28];
  for (m = a2[29]; v20 != m; v20 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20 + 4);
  }
  v31 = (a2[33] - a2[32]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v22 = a2[32];
  for (n = a2[33]; v22 != n; v22 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22 + 4);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[37] - a2[36]) >> 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v25 = a2[36];
  for (ii = a2[37]; v25 != ii; v25 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      LOBYTE(v31) = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      v27 = *(_DWORD *)(a1 + 8);
      LODWORD(v31) = 2;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
      if (v27 < 1)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        if (a3 < 4)
          return result;
      }
      else
      {
        if (v27 == 2)
        {
          LODWORD(v31) = 2;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (a3 < 4)
          return result;
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      if (a3 < 4)
        return result;
    }
    sub_20FDFF708((_BYTE *)a1, (_DWORD *)a2 + 87);
    v31 = (a2[45] - a2[44]) >> 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
    v28 = a2[44];
    v29 = a2[45] - v28;
    if (v29)
    {
      v30 = 4 * (v29 >> 2);
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v28);
        v28 += 4;
        v30 -= 4;
      }
      while (v30);
    }
  }
  return result;
}

void sub_20FDFF708(_BYTE *a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _DWORD v5[6];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_20FDFB3D0((uint64_t)v5, a2);
    if (v6 == -1)
      sub_20E877AB8();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA08168[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _DWORD *))off_24CA08150[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v5);
  }
}

void sub_20FDFF7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDFF80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDFF820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDFF834(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DB048(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20FDFF930((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FDFFFF8(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_20FDFF930(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_20FE008B8(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_20FE00C1C((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_20FE008B8(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_20FE00C1C((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_20FE008B8(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_20FE00C1C((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 3);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_20FE00E0C((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2101FFBA8(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_20FE00C1C((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_20FE00E0C((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2101FFBA8(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_20FE00FF0(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_20FE01368(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_20FE016B4(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_20FE00FF0(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_2101FF7D8(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_2100DB048(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_210201290(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_210201290(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_20FE01F64((uint64_t)&v40, (uint64_t)v42);
  sub_20FE020A8(a3, (uint64_t)&v40);
  sub_20FDE1900((uint64_t *)&v40);
  return sub_20FE0283C(v42);
}

void sub_20FDFFFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FDFFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FDFFFF8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_20FE008B8(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_20FE00C1C((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_20FE008B8(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_20FE00C1C((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_20FE008B8(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_20FE00C1C((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 3);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_20FE00E0C(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FFBA8(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_20FE00C1C((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_20FE00E0C(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FFBA8(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_20FE00FF0(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_20FE01368(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_20FE016B4(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_20FE00FF0(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_2101FF7D8(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_2100DB048(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_2101FFA90((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_210201290(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_2101FFA90((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_210201290(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_2101FFA90((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_210201290(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_2101FFA90((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_210201290(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_2101FFA90((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_2100DB048(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_20FE019EC();
            sub_20E9F5C70((std::string *)&xmmword_254A6C6C8, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA1FAE0;
      __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_20FE00C1C((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 3);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_20FE01D5C((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_20FE008B8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20FE00A14(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE00A14(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_20FDFA718();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_20E877AB8();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24CA08298[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_20E877AB8();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24CA08110[v23])(&v26, a1 + 3);
    }
  }
}

void sub_20FE00C1C(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF41698((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE00D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE00E0C(uint64_t a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD **v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  int v29;
  _QWORD *v30;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD ***)a1;
    v7 = v5 - *(_QWORD *)a1;
    v8 = v7 + a2;
    if ((uint64_t)(v7 + a2) < 0)
      sub_20FDFA718();
    v9 = v4 - (_QWORD)v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    v10 = v9 >= 0x3FFFFFFFFFFFFFFFLL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      LODWORD(v30) = v11;
      v12 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v12 == -1)
        sub_20E877AB8();
      v28 = &v30;
      v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24CA082B8[v12])(&v28, a1 + 24);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = v14 + v7;
    v16 = v14 + v13;
    bzero((void *)(v14 + v7), a2);
    v17 = *(_QWORD ***)a1;
    v18 = *(_QWORD ***)(a1 + 8);
    v19 = (unint64_t)v18 - *(_QWORD *)a1;
    if (v18 != *(_QWORD ***)a1)
    {
      if (v19 < 0x20)
        goto LABEL_31;
      if ((_QWORD **)((char *)v18 + (_QWORD)((char *)v6 - v14 - v5)) < (_QWORD **)0x20)
        goto LABEL_31;
      v20 = (_QWORD **)((char *)v18 - (v19 & 0xFFFFFFFFFFFFFFE0));
      v15 -= v19 & 0xFFFFFFFFFFFFFFE0;
      v21 = (_OWORD *)(v7 + v14 - 16);
      v22 = (__int128 *)(v18 - 2);
      v23 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      v18 = v20;
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_31:
        do
        {
          v25 = *((_BYTE *)v18 - 1);
          v18 = (_QWORD **)((char *)v18 - 1);
          *(_BYTE *)--v15 = v25;
        }
        while (v18 != v17);
      }
      v18 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14 + v7 + a2;
    v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if (v18)
    {
      v28 = v18;
      v29 = v26 - (_DWORD)v18;
      v27 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v27 == -1)
        sub_20E877AB8();
      v30 = &v28;
      ((void (*)(_QWORD **, uint64_t))off_24CA08100[v27])(&v30, a1 + 24);
    }
  }
}

void sub_20FE00FF0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20FE01160(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE01160(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_20FDFA718();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_20E877AB8();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24CA082D8[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_20E877AB8();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24CA080D0[v23])(&v26, a1 + 3);
    }
  }
}

void sub_20FE01368(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_20FE014BC((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE014BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_20FDFA718();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20E877AB8();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24CA082F8[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_20E877AB8();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24CA080F0[v32])(&v35, a1 + 24);
    }
  }
}

void sub_20FE016B4(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_20FE017F4((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE017F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_20FDFA718();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20E877AB8();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24CA08318[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_20E877AB8();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24CA080E0[v32])(&v35, a1 + 24);
    }
  }
}

void sub_20FE019EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C678))
  {
    sub_20FE01AA4();
    if (byte_254A6C6F7 < 0)
    {
      sub_20E860C04(&xmmword_254A6C6C8, (void *)qword_254A6C6E0, unk_254A6C6E8);
    }
    else
    {
      xmmword_254A6C6C8 = *(_OWORD *)&qword_254A6C6E0;
      qword_254A6C6D8 = unk_254A6C6F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C6C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C678);
  }
}

void sub_20FE01A8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C678);
  _Unwind_Resume(a1);
}

void sub_20FE01AA4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C680);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C680))
  {
    sub_20FE01B80(__p);
    sub_20EB0B20C((char *)__p, (std::string *)&qword_254A6C6E0);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A6C6E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C680);
  }
}

void sub_20FE01B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C680);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C680);
  _Unwind_Resume(a1);
}

void sub_20FE01B80(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C688);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C688))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshBoundingBoxSample<>]", qword_254A6C6F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C6F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C688);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A6C690);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C690))
  {
    v5 = sub_20E8A2354(qword_254A6C6F8, "<", 0);
    sub_20E89FC08(qword_254A6C6F8, 0, v5, qword_254A6C710);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C710, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C690);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A6C698);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C698))
  {
    sub_21023CD84((uint64_t)qword_254A6C710, (uint64_t)&xmmword_254A6C728);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C728, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C698);
  }
  if (byte_254A6C73F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A6C728, *((unint64_t *)&xmmword_254A6C728 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A6C728;
    __dst[2] = unk_254A6C738;
  }
}

void sub_20FE01D14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C698);
  _Unwind_Resume(a1);
}

void sub_20FE01D2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C690);
  _Unwind_Resume(a1);
}

void sub_20FE01D44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C688);
  _Unwind_Resume(a1);
}

void sub_20FE01D5C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char **v33;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 > (v4 - (uint64_t)v5) >> 2)
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 2;
    v9 = (v7 >> 2) + a2;
    if (v9 >> 62)
      sub_20FDFA718();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      LODWORD(v33) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20E877AB8();
      v31 = (char *)&v33;
      v15 = ((uint64_t (*)(char **, uint64_t))off_24CA08338[v13])(&v31, a1 + 24);
      v6 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 4 * v8);
    v17 = 4 * a2;
    v18 = v15 + 4 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    if (v5 == v6)
      goto LABEL_23;
    v20 = v5 - v6 - 4;
    if (v20 >= 0x2C)
    {
      if ((unint64_t)&v5[-v15 - v7] >= 0x20)
      {
        v22 = (v20 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v5[-v23];
        v16 -= v23;
        v24 = (_OWORD *)(v15 + 4 * v8 - 16);
        v25 = (__int128 *)(v5 - 16);
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_23:
          *(_QWORD *)a1 = v16;
          *(_QWORD *)(a1 + 8) = v19;
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;
          if (v6)
          {
            v31 = v6;
            v32 = (unint64_t)(v29 - (_QWORD)v6) >> 2;
            v30 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v30 == -1)
              sub_20E877AB8();
            v33 = &v31;
            ((void (*)(char ***, uint64_t))off_24CA080C0[v30])(&v33, a1 + 24);
          }
          return;
        }
      }
      else
      {
        v21 = v5;
      }
    }
    else
    {
      v21 = v5;
    }
    do
    {
      v28 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v16 - 1) = v28;
      v16 -= 4;
    }
    while (v21 != v6);
    goto LABEL_23;
  }
  if (a2)
  {
    bzero(*(void **)(a1 + 8), 4 * a2);
    v5 += 4 * a2;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

uint64_t sub_20FE01F64(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;

  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a2 + 320);
    DWORD2(v3) = *(_DWORD *)(a2 + 328);
    HIDWORD(v3) = *(_QWORD *)(a2 + 332);
    LODWORD(v4) = vdup_lane_s32(*(int32x2_t *)(a2 + 332), 1).u32[0];
    v11 = v3;
    HIDWORD(v4) = *(_DWORD *)(a2 + 340);
    v12 = v4;
    v13 = 1;
  }
  v10 = 0;
  HIDWORD(v9) = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_20FE0265C(a1, a2, (_DWORD *)(a2 + 32), a2 + 40, (_DWORD *)(a2 + 72), a2 + 80, (_DWORD *)(a2 + 112), a2 + 120, (_DWORD *)(a2 + 152), a2 + 160, a2 + 192, a2 + 224, a2 + 256, a2 + 288, &v11, &v10, (uint64_t)&v6);
  if (v6)
  {
    v7 = v6;
    v14 = v6;
    v15 = (unint64_t)(v8 - v6) >> 2;
    if (HIDWORD(v9) == -1)
      sub_20E877AB8();
    v16 = &v14;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080C0[HIDWORD(v9)])(&v16, &v9);
  }
  return a1;
}

void sub_20FE02090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20FDE1F40((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FE020A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t *v38;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    v36 = v4;
    v37 = v5;
    v6 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v6 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v6])(&v38, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[5];
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  if (v7)
  {
    a1[6] = v7;
    v8 = -1431655765 * ((unint64_t)(a1[7] - v7) >> 2);
    v36 = v7;
    v37 = v8;
    v9 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v9 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v9])(&v38, a1 + 8);
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = a1[10];
  *((_DWORD *)a1 + 18) = *(_DWORD *)(a2 + 72);
  if (v10)
  {
    a1[11] = v10;
    v11 = -1431655765 * ((unint64_t)(a1[12] - v10) >> 2);
    v36 = v10;
    v37 = v11;
    v12 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v12 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v12])(&v38, a1 + 13);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  a1[13] = *(_QWORD *)(a2 + 104);
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v13 = a1[15];
  *((_DWORD *)a1 + 28) = *(_DWORD *)(a2 + 112);
  if (v13)
  {
    a1[16] = v13;
    v14 = *((_DWORD *)a1 + 34) - v13;
    v36 = v13;
    v37 = v14;
    v15 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v15 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v15])(&v38, a1 + 18);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v16 = a1[20];
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a2 + 152);
  if (v16)
  {
    a1[21] = v16;
    v17 = *((_DWORD *)a1 + 44) - v16;
    v36 = v16;
    v37 = v17;
    v18 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v18 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v18])(&v38, a1 + 23);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  a1[23] = *(_QWORD *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v19 = a1[24];
  if (v19)
  {
    a1[25] = v19;
    v20 = -1431655765 * ((unint64_t)(a1[26] - v19) >> 2);
    v36 = v19;
    v37 = v20;
    v21 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v21 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v21])(&v38, a1 + 27);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  a1[27] = *(_QWORD *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v22 = a1[28];
  if (v22)
  {
    a1[29] = v22;
    v23 = (unint64_t)(a1[30] - v22) >> 3;
    v36 = v22;
    v37 = v23;
    v24 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v24 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080F0[v24])(&v38, a1 + 31);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  a1[31] = *(_QWORD *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v25 = a1[32];
  if (v25)
  {
    a1[33] = v25;
    v26 = (unint64_t)(a1[34] - v25) >> 3;
    v36 = v25;
    v37 = v26;
    v27 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v27 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080E0[v27])(&v38, a1 + 35);
    a1[32] = 0;
    a1[33] = 0;
    a1[34] = 0;
  }
  a1[35] = *(_QWORD *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v28 = a1[36];
  if (v28)
  {
    a1[37] = v28;
    v29 = -1431655765 * ((unint64_t)(a1[38] - v28) >> 2);
    v36 = v28;
    v37 = v29;
    v30 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v30 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v30])(&v38, a1 + 39);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
  }
  a1[39] = *(_QWORD *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v31 = *(_OWORD *)(a2 + 336);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  *((_OWORD *)a1 + 21) = v31;
  v32 = a1[44];
  if (v32)
  {
    a1[45] = v32;
    v33 = (unint64_t)(a1[46] - v32) >> 2;
    v36 = v32;
    v37 = v33;
    v34 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v34 == -1)
      sub_20E877AB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080C0[v34])(&v38, a1 + 47);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  a1[47] = *(_QWORD *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return a1;
}

uint64_t sub_20FE0265C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 *a15, _DWORD *a16, uint64_t a17)
{
  _QWORD *v24;
  __int128 v25;

  v24 = sub_20FDFA578((_QWORD *)a1, a2);
  *((_DWORD *)v24 + 8) = *a3;
  sub_20FDFA578(v24 + 5, a4);
  *(_DWORD *)(a1 + 72) = *a5;
  sub_20FDFA578((_QWORD *)(a1 + 80), a6);
  *(_DWORD *)(a1 + 112) = *a7;
  sub_20FDFA7F4((_QWORD *)(a1 + 120), a8);
  *(_DWORD *)(a1 + 152) = *a9;
  sub_20FDFA7F4((_QWORD *)(a1 + 160), a10);
  sub_20FDFAA08((_QWORD *)(a1 + 192), a11);
  sub_20FDFAC70((_QWORD *)(a1 + 224), a12);
  sub_20FDFAE90((_QWORD *)(a1 + 256), a13);
  sub_20FDFAA08((_QWORD *)(a1 + 288), a14);
  v25 = *a15;
  *(_OWORD *)(a1 + 332) = *(__int128 *)((char *)a15 + 12);
  *(_OWORD *)(a1 + 320) = v25;
  *(_DWORD *)(a1 + 348) = *a16;
  sub_20FDFB0B0((_QWORD *)(a1 + 352), a17);
  return a1;
}

void sub_20FE02784(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v10 = v7;
  sub_20FDE1CAC(v10);
  sub_20FDE1D38(v9);
  sub_20FDE1DB8(v8);
  sub_20FDE1CAC(v6);
  sub_20FDE1E38(v5);
  sub_20FDE1E38(v4);
  sub_20FDE1EB4(v3);
  sub_20FDE1EB4(v2);
  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

void sub_20FE027FC()
{
  JUMPOUT(0x20FE027D4);
}

void sub_20FE02804()
{
  JUMPOUT(0x20FE027DCLL);
}

void sub_20FE0280C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_20FDE1EB4(v2);
  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

void sub_20FE02828(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20FDE1EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FE0283C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  v2 = a1[36];
  if (v2)
  {
    a1[37] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[38] - v2) >> 2);
    v30 = v2;
    v31 = v3;
    v4 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v4])(&v32, a1 + 39);
  }
  v5 = a1[32];
  if (v5)
  {
    a1[33] = v5;
    v6 = (unint64_t)(a1[34] - v5) >> 3;
    v30 = v5;
    v31 = v6;
    v7 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v7 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080E0[v7])(&v32, a1 + 35);
  }
  v8 = a1[28];
  if (v8)
  {
    a1[29] = v8;
    v9 = (unint64_t)(a1[30] - v8) >> 3;
    v30 = v8;
    v31 = v9;
    v10 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080F0[v10])(&v32, a1 + 31);
  }
  v11 = a1[24];
  if (v11)
  {
    a1[25] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[26] - v11) >> 2);
    v30 = v11;
    v31 = v12;
    v13 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v13 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v13])(&v32, a1 + 27);
  }
  v14 = a1[20];
  if (v14)
  {
    a1[21] = v14;
    v15 = *((_DWORD *)a1 + 44) - v14;
    v30 = v14;
    v31 = v15;
    v16 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v16 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v16])(&v32, a1 + 23);
  }
  v17 = a1[15];
  if (v17)
  {
    a1[16] = v17;
    v18 = *((_DWORD *)a1 + 34) - v17;
    v30 = v17;
    v31 = v18;
    v19 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v19])(&v32, a1 + 18);
  }
  v20 = a1[10];
  if (v20)
  {
    a1[11] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[12] - v20) >> 2);
    v30 = v20;
    v31 = v21;
    v22 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v22 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v22])(&v32, a1 + 13);
  }
  v23 = a1[5];
  if (v23)
  {
    a1[6] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[7] - v23) >> 2);
    v30 = v23;
    v31 = v24;
    v25 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v25 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v25])(&v32, a1 + 8);
  }
  v26 = *a1;
  if (*a1)
  {
    a1[1] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[2] - v26) >> 2);
    v30 = v26;
    v31 = v27;
    v28 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v28 == -1)
      sub_20E877AB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v28])(&v32, a1 + 3);
  }
  return a1;
}

void sub_20FE02B90(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 4;
  sub_20E9EDADC(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_20E90A71C(a2 + 2);
  if (v5 >= 4)
    v6 = 4;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_20FE02C80((uint64_t)&v10, (uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_20FE041EC(a2, (uint64_t)a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

uint64_t *sub_20FE02C80(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  char *i1;
  uint64_t v106;
  void (*v107)(uint64_t);
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v111;
  char *i2;
  uint64_t v113;
  void (*v114)(uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  _QWORD *v123;
  char *i3;
  uint64_t v125;
  void (*v126)(uint64_t);
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *i4;
  uint64_t v131;
  void (*v132)(uint64_t);
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  float *v136;
  unint64_t v137;
  float *v138;
  uint64_t v139;
  float v140;
  _QWORD *v141;
  char *i6;
  uint64_t v143;
  void (*v144)(uint64_t);
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  float v148;
  char *i5;
  uint64_t v150;
  void (*v151)(uint64_t);
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  _DWORD *v155;
  unint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  _QWORD *v160;
  char *i7;
  uint64_t v162;
  void (*v163)(uint64_t);
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  char *i8;
  uint64_t v168;
  void (*v169)(uint64_t);
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v173;
  char *i9;
  uint64_t v175;
  void (*v176)(uint64_t);
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  std::bad_cast *v182;
  std::bad_cast *v183;
  std::bad_cast *v184;
  std::bad_cast *v185;
  std::bad_cast *v186;
  std::bad_cast *v187;
  std::bad_cast *exception;
  std::bad_cast *v189;
  std::bad_cast *v190;
  std::bad_cast *v191;
  std::bad_cast *v192;
  std::bad_cast *v193;
  std::bad_cast *v194;
  std::bad_cast *v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  float *v199;
  float *v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  float *v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  uint64_t v217;
  _DWORD v218[33];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  unint64_t v223;

  v199 = 0;
  v200 = 0;
  v202 = 0;
  v201 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v210 = 0;
  v209 = 0;
  v211 = 0;
  v213 = 0;
  v212 = 0;
  v214 = 0;
  v216 = 0;
  v215 = 0;
  v217 = 0;
  v218[32] = 0;
  LOBYTE(v219) = 0;
  v222 = 0;
  memset(v218, 0, 28);
  memset(&v218[8], 0, 28);
  memset(&v218[16], 0, 28);
  memset(&v218[24], 0, 28);
  v223 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v8 = 0;
  v7 = 0;
  if (v223)
  {
    sub_20FE00A14((uint64_t *)&v199, v223);
    v8 = v199;
    v7 = v200;
  }
  if (v7 != v8)
  {
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v8 = (float)v197;
        v12 = v198;
        v198 = 0;
        if (!v12)
          goto LABEL_21;
        goto LABEL_15;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_321;
      v11 = *(double *)&v197;
      *v8 = v11;
      v12 = v198;
      v198 = 0;
      if (v12)
        goto LABEL_15;
LABEL_21:
      sub_20E9EFAC4(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v8[1] = (float)(unint64_t)v197;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
LABEL_29:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_35;
      }
      if ((_DWORD)v196 == 4)
      {
        v19 = *(double *)&v197;
        v8[1] = v19;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
        goto LABEL_29;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_321;
      v8[1] = (float)v197;
      v18 = v198;
      v198 = 0;
      if (v18)
        goto LABEL_29;
LABEL_35:
      sub_20E9EFAC4(v10, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v8[2] = (float)(unint64_t)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 4:
          v26 = *(double *)&v197;
          v8[2] = v26;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 3:
          v8[2] = (float)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
          {
LABEL_43:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_321:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v189 = std::bad_cast::bad_cast(exception);
          v189->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v189, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v8 += 3;
      if (v8 == v9)
        goto LABEL_49;
    }
    *v8 = (float)(unint64_t)v197;
    v12 = v198;
    v198 = 0;
    if (!v12)
      goto LABEL_21;
LABEL_15:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_21;
  }
LABEL_49:
  LODWORD(v196) = 0;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v202) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v33 = v203;
  v32 = v204;
  v34 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  if (v223 <= v34)
  {
    if (v223 < v34)
    {
      v32 = &v203[3 * v223];
      v204 = v32;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)&v203, v223 - v34);
    v33 = v203;
    v32 = v204;
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v33 = (float)v197;
        v38 = v198;
        v198 = 0;
        if (!v38)
          goto LABEL_71;
        goto LABEL_65;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_322;
      v37 = *(double *)&v197;
      *v33 = v37;
      v38 = v198;
      v198 = 0;
      if (v38)
        goto LABEL_65;
LABEL_71:
      sub_20E9EFAC4(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v33[1] = (float)(unint64_t)v197;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
LABEL_79:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_85;
      }
      if ((_DWORD)v196 == 4)
      {
        v45 = *(double *)&v197;
        v33[1] = v45;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
        goto LABEL_79;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_322;
      v33[1] = (float)v197;
      v44 = v198;
      v198 = 0;
      if (v44)
        goto LABEL_79;
LABEL_85:
      sub_20E9EFAC4(v36, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v33[2] = (float)(unint64_t)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 4:
          v52 = *(double *)&v197;
          v33[2] = v52;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 3:
          v33[2] = (float)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
          {
LABEL_93:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_322:
          v190 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v190->__vftable = 0;
          v191 = std::bad_cast::bad_cast(v190);
          v191->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v191, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_99;
    }
    *v33 = (float)(unint64_t)v197;
    v38 = v198;
    v198 = 0;
    if (!v38)
      goto LABEL_71;
LABEL_65:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_71;
  }
LABEL_99:
  LODWORD(v196) = 0;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v206) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v59 = v207;
  v58 = v208;
  v60 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  if (v223 <= v60)
  {
    if (v223 < v60)
    {
      v58 = &v207[3 * v223];
      v208 = v58;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)&v207, v223 - v60);
    v59 = v207;
    v58 = v208;
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v59 = (float)v197;
        v64 = v198;
        v198 = 0;
        if (!v64)
          goto LABEL_121;
        goto LABEL_115;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_323;
      v63 = *(double *)&v197;
      *v59 = v63;
      v64 = v198;
      v198 = 0;
      if (v64)
        goto LABEL_115;
LABEL_121:
      sub_20E9EFAC4(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v59[1] = (float)(unint64_t)v197;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
LABEL_129:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_135;
      }
      if ((_DWORD)v196 == 4)
      {
        v71 = *(double *)&v197;
        v59[1] = v71;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
        goto LABEL_129;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_323;
      v59[1] = (float)v197;
      v70 = v198;
      v198 = 0;
      if (v70)
        goto LABEL_129;
LABEL_135:
      sub_20E9EFAC4(v62, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v59[2] = (float)(unint64_t)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 4:
          v78 = *(double *)&v197;
          v59[2] = v78;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 3:
          v59[2] = (float)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
          {
LABEL_143:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_323:
          v192 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v192->__vftable = 0;
          v193 = std::bad_cast::bad_cast(v192);
          v193->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v193, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_149;
    }
    *v59 = (float)(unint64_t)v197;
    v64 = v198;
    v198 = 0;
    if (!v64)
      goto LABEL_121;
LABEL_115:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_121;
  }
LABEL_149:
  LODWORD(v196) = 0;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v210) = v196;
  v196 = v212 - v211;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v196);
  v84 = v212;
  v85 = v211;
  if (v196 <= v212 - v211)
  {
    if (v196 < v212 - v211)
    {
      v84 = &v211[v196];
      v212 = &v211[v196];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v211, v196 - (v212 - v211));
    v85 = v211;
    v84 = v212;
  }
  v86 = *(_QWORD *)(a2 + 48);
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20E9ED7B4(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = *(_QWORD *)(a2 + 48);
  }
  LODWORD(v196) = 0;
  sub_20E9EDADC(v86, &v196);
  HIDWORD(v214) = v196;
  v196 = v216 - v215;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v196);
  v88 = v216;
  v89 = v215;
  if (v196 <= v216 - v215)
  {
    if (v196 < v216 - v215)
    {
      v88 = &v215[v196];
      v216 = &v215[v196];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v215, v196 - (v216 - v215));
    v89 = v215;
    v88 = v216;
  }
  v90 = *(_QWORD *)(a2 + 48);
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20E9ED7B4(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = *(_QWORD *)(a2 + 48);
  }
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  sub_20E9EDE6C(v90, &v223);
  v92 = *(_QWORD *)&v218[3];
  v93 = *(_DWORD **)&v218[1];
  v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  if (v223 <= v94)
  {
    if (v223 < v94)
    {
      v92 = *(_QWORD *)&v218[1] + 12 * v223;
      *(_QWORD *)&v218[3] = v92;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v218[1], v223 - v94);
    v93 = *(_DWORD **)&v218[1];
    v92 = *(_QWORD *)&v218[3];
  }
  if ((_DWORD *)v92 != v93)
  {
    v95 = (_DWORD *)v92;
    do
    {
      v96 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_318;
      *v93 = v197;
      v98 = v198;
      v198 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20E9EFAC4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_318;
      v93[1] = v197;
      v104 = v198;
      v198 = 0;
      if (v104)
      {
        for (i1 = (char *)v104[4]; i1 != (char *)v104[6]; i1 -= 16)
        {
          v107 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v106 = *((_QWORD *)i1 - 1);
          v107(v106);
        }
        free(i1);
        v108 = (_QWORD *)v104[3];
        if (v108)
        {
          do
          {
            v109 = (_QWORD *)*v108;
            free(v108);
            v108 = v109;
          }
          while (v109);
        }
        free(v104);
      }
      sub_20E9EFAC4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_318:
        v182 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v182->__vftable = 0;
        v183 = std::bad_cast::bad_cast(v182);
        v183->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v183, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = v197;
      v111 = v198;
      v198 = 0;
      if (v111)
      {
        for (i2 = (char *)v111[4]; i2 != (char *)v111[6]; i2 -= 16)
        {
          v114 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v113 = *((_QWORD *)i2 - 1);
          v114(v113);
        }
        free(i2);
        v115 = (_QWORD *)v111[3];
        if (v115)
        {
          do
          {
            v116 = (_QWORD *)*v115;
            free(v115);
            v115 = v116;
          }
          while (v116);
        }
        free(v111);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v117 = *(_QWORD *)&v218[11];
  v118 = *(_DWORD **)&v218[9];
  v119 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  if (v223 <= v119)
  {
    if (v223 < v119)
    {
      v117 = *(_QWORD *)&v218[9] + 8 * v223;
      *(_QWORD *)&v218[11] = v117;
    }
  }
  else
  {
    sub_20FE014BC((uint64_t)&v218[9], v223 - v119);
    v118 = *(_DWORD **)&v218[9];
    v117 = *(_QWORD *)&v218[11];
  }
  if ((_DWORD *)v117 != v118)
  {
    v120 = (_DWORD *)v117;
    do
    {
      v121 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_320;
      *v118 = v197;
      v123 = v198;
      v198 = 0;
      if (v123)
      {
        for (i3 = (char *)v123[4]; i3 != (char *)v123[6]; i3 -= 16)
        {
          v126 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v125 = *((_QWORD *)i3 - 1);
          v126(v125);
        }
        free(i3);
        v127 = (_QWORD *)v123[3];
        if (v127)
        {
          do
          {
            v128 = (_QWORD *)*v127;
            free(v127);
            v127 = v128;
          }
          while (v128);
        }
        free(v123);
      }
      sub_20E9EFAC4(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
      {
LABEL_320:
        v186 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v186->__vftable = 0;
        v187 = std::bad_cast::bad_cast(v186);
        v187->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v187, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v118[1] = v197;
      v129 = v198;
      v198 = 0;
      if (v129)
      {
        for (i4 = (char *)v129[4]; i4 != (char *)v129[6]; i4 -= 16)
        {
          v132 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v131 = *((_QWORD *)i4 - 1);
          v132(v131);
        }
        free(i4);
        v133 = (_QWORD *)v129[3];
        if (v133)
        {
          do
          {
            v134 = (_QWORD *)*v133;
            free(v133);
            v133 = v134;
          }
          while (v134);
        }
        free(v129);
      }
      v118 += 2;
    }
    while (v118 != v120);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v135 = *(_QWORD *)&v218[19];
  v136 = *(float **)&v218[17];
  v137 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  if (v223 <= v137)
  {
    if (v223 < v137)
    {
      v135 = *(_QWORD *)&v218[17] + 8 * v223;
      *(_QWORD *)&v218[19] = v135;
    }
  }
  else
  {
    sub_20FE017F4((uint64_t)&v218[17], v223 - v137);
    v136 = *(float **)&v218[17];
    v135 = *(_QWORD *)&v218[19];
  }
  if ((float *)v135 != v136)
  {
    v138 = (float *)v135;
    while (1)
    {
      v139 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v139, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v136 = (float)v197;
        v141 = v198;
        v198 = 0;
        if (!v141)
          goto LABEL_255;
        goto LABEL_249;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_324;
      v140 = *(double *)&v197;
      *v136 = v140;
      v141 = v198;
      v198 = 0;
      if (v141)
        goto LABEL_249;
LABEL_255:
      sub_20E9EFAC4(v139, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v136[1] = (float)(unint64_t)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 4:
          v148 = *(double *)&v197;
          v136[1] = v148;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 3:
          v136[1] = (float)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
          {
LABEL_263:
            for (i5 = (char *)v147[4]; i5 != (char *)v147[6]; i5 -= 16)
            {
              v151 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v150 = *((_QWORD *)i5 - 1);
              v151(v150);
            }
            free(i5);
            v152 = (_QWORD *)v147[3];
            if (v152)
            {
              do
              {
                v153 = (_QWORD *)*v152;
                free(v152);
                v152 = v153;
              }
              while (v153);
            }
            free(v147);
          }
          break;
        default:
LABEL_324:
          v194 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v194->__vftable = 0;
          v195 = std::bad_cast::bad_cast(v194);
          v195->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v195, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v136 += 2;
      if (v136 == v138)
        goto LABEL_269;
    }
    *v136 = (float)(unint64_t)v197;
    v141 = v198;
    v198 = 0;
    if (!v141)
      goto LABEL_255;
LABEL_249:
    for (i6 = (char *)v141[4]; i6 != (char *)v141[6]; i6 -= 16)
    {
      v144 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v143 = *((_QWORD *)i6 - 1);
      v144(v143);
    }
    free(i6);
    v145 = (_QWORD *)v141[3];
    if (v145)
    {
      do
      {
        v146 = (_QWORD *)*v145;
        free(v145);
        v145 = v146;
      }
      while (v146);
    }
    free(v141);
    goto LABEL_255;
  }
LABEL_269:
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v223);
  v154 = *(_QWORD *)&v218[27];
  v155 = *(_DWORD **)&v218[25];
  v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  if (v223 <= v156)
  {
    if (v223 < v156)
    {
      v154 = *(_QWORD *)&v218[25] + 12 * v223;
      *(_QWORD *)&v218[27] = v154;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v218[25], v223 - v156);
    v155 = *(_DWORD **)&v218[25];
    v154 = *(_QWORD *)&v218[27];
  }
  if ((_DWORD *)v154 != v155)
  {
    v157 = (_DWORD *)v154;
    do
    {
      v158 = *(_QWORD *)(a2 + 48);
      sub_20E9EFAC4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_319;
      *v155 = v197;
      v160 = v198;
      v198 = 0;
      if (v160)
      {
        for (i7 = (char *)v160[4]; i7 != (char *)v160[6]; i7 -= 16)
        {
          v163 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v162 = *((_QWORD *)i7 - 1);
          v163(v162);
        }
        free(i7);
        v164 = (_QWORD *)v160[3];
        if (v164)
        {
          do
          {
            v165 = (_QWORD *)*v164;
            free(v164);
            v164 = v165;
          }
          while (v165);
        }
        free(v160);
      }
      sub_20E9EFAC4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_319;
      v155[1] = v197;
      v166 = v198;
      v198 = 0;
      if (v166)
      {
        for (i8 = (char *)v166[4]; i8 != (char *)v166[6]; i8 -= 16)
        {
          v169 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v168 = *((_QWORD *)i8 - 1);
          v169(v168);
        }
        free(i8);
        v170 = (_QWORD *)v166[3];
        if (v170)
        {
          do
          {
            v171 = (_QWORD *)*v170;
            free(v170);
            v170 = v171;
          }
          while (v171);
        }
        free(v166);
      }
      sub_20E9EFAC4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_319:
        v184 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v184->__vftable = 0;
        v185 = std::bad_cast::bad_cast(v184);
        v185->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v185, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v155[2] = v197;
      v173 = v198;
      v198 = 0;
      if (v173)
      {
        for (i9 = (char *)v173[4]; i9 != (char *)v173[6]; i9 -= 16)
        {
          v176 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v175 = *((_QWORD *)i9 - 1);
          v176(v175);
        }
        free(i9);
        v177 = (_QWORD *)v173[3];
        if (v177)
        {
          do
          {
            v178 = (_QWORD *)*v177;
            free(v177);
            v177 = v178;
          }
          while (v178);
        }
        free(v173);
      }
      v155 += 3;
    }
    while (v155 != v157);
  }
  if (a4 >= 2)
  {
    LOBYTE(v223) = 0;
    sub_20E9ED7B4(*(_QWORD *)(a2 + 48), &v223);
    if ((_BYTE)v223)
    {
      if (!v222)
      {
        v219 = 0;
        v220 = 0;
        v221 = 0;
        v222 = 1;
      }
      LODWORD(v196) = 1;
      sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v196);
      v179 = *(_QWORD *)(a2 + 48);
      sub_20E9EDF48(v179, (float *)&v219);
      sub_20E9EDF48(v179, (float *)&v219 + 1);
      sub_20E9EDF48(v179, (float *)&v220);
      v180 = *(_QWORD *)(a2 + 48);
      sub_20E9EDF48(v180, (float *)&v220 + 1);
      sub_20E9EDF48(v180, (float *)&v221);
      sub_20E9EDF48(v180, (float *)&v221 + 1);
    }
    else if (v222)
    {
      v222 = 0;
    }
  }
  sub_20FE01F64((uint64_t)&v196, (uint64_t)&v199);
  sub_20FE020A8(a3, (uint64_t)&v196);
  sub_20FDE1900((uint64_t *)&v196);
  return sub_20FE0283C((uint64_t *)&v199);
}

void sub_20FE04090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE040A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20E9F1E54((uint64_t)&a10);
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE04164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE04178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE0418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE041EC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  float *v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v105;
  char *i1;
  uint64_t v107;
  void (*v108)(uint64_t);
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v112;
  char *i2;
  uint64_t v114;
  void (*v115)(uint64_t);
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v124;
  char *i3;
  uint64_t v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v131;
  char *i4;
  uint64_t v133;
  void (*v134)(uint64_t);
  _QWORD *v135;
  _QWORD *v136;
  float *v137;
  float *v138;
  unint64_t v139;
  float *v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  char *i6;
  uint64_t v145;
  void (*v146)(uint64_t);
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  float v150;
  char *i5;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  char *i7;
  uint64_t v164;
  void (*v165)(uint64_t);
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v169;
  char *i8;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v176;
  char *i9;
  uint64_t v178;
  void (*v179)(uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  int32x2_t v189;
  float *v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::bad_cast *v196;
  std::bad_cast *v197;
  std::bad_cast *v198;
  std::bad_cast *v199;
  std::bad_cast *v200;
  std::bad_cast *v201;
  std::bad_cast *exception;
  std::bad_cast *v203;
  std::bad_cast *v204;
  std::bad_cast *v205;
  std::bad_cast *v206;
  std::bad_cast *v207;
  std::bad_cast *v208;
  std::bad_cast *v209;
  unint64_t v210;
  _BYTE v211[24];
  _QWORD *v212;

  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_20E9EDE6C(a1[6], &v210);
  v7 = *(float **)a2;
  v6 = *(float **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (v210 <= v8)
  {
    if (v210 < v8)
    {
      v6 = &v7[3 * v210];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)a2, v210 - v8);
    v7 = *(float **)a2;
    v6 = *(float **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    while (1)
    {
      v10 = a1[6];
      sub_20E9EFAC4(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v7 = (float)*(uint64_t *)&v211[8];
        v12 = v212;
        v212 = 0;
        if (!v12)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_346;
      v11 = *(double *)&v211[8];
      *v7 = v11;
      v12 = v212;
      v212 = 0;
      if (v12)
        goto LABEL_17;
LABEL_23:
      sub_20E9EFAC4(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v7[1] = (float)*(unint64_t *)&v211[8];
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_37;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v19 = *(double *)&v211[8];
        v7[1] = v19;
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_346;
      v7[1] = (float)*(uint64_t *)&v211[8];
      v18 = v212;
      v212 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_20E9EFAC4(v10, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v7[2] = (float)*(unint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 4:
          v26 = *(double *)&v211[8];
          v7[2] = v26;
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 3:
          v7[2] = (float)*(uint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
          {
LABEL_45:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_346:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v203 = std::bad_cast::bad_cast(exception);
          v203->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v203, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v7 += 3;
      if (v7 == v9)
        goto LABEL_51;
    }
    *v7 = (float)*(unint64_t *)&v211[8];
    v12 = v212;
    v212 = 0;
    if (!v12)
      goto LABEL_23;
LABEL_17:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_23;
  }
LABEL_51:
  *(_DWORD *)v211 = 0;
  sub_20E9EDADC(a1[6], v211);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  sub_20E9EDE6C(a1[6], &v210);
  v33 = *(float **)(a2 + 40);
  v32 = *(float **)(a2 + 48);
  v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
  if (v210 <= v34)
  {
    if (v210 < v34)
    {
      v32 = &v33[3 * v210];
      *(_QWORD *)(a2 + 48) = v32;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 40), v210 - v34);
    v33 = *(float **)(a2 + 40);
    v32 = *(float **)(a2 + 48);
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = a1[6];
      sub_20E9EFAC4(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v33 = (float)*(uint64_t *)&v211[8];
        v38 = v212;
        v212 = 0;
        if (!v38)
          goto LABEL_73;
        goto LABEL_67;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_347;
      v37 = *(double *)&v211[8];
      *v33 = v37;
      v38 = v212;
      v212 = 0;
      if (v38)
        goto LABEL_67;
LABEL_73:
      sub_20E9EFAC4(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v33[1] = (float)*(unint64_t *)&v211[8];
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
LABEL_81:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_87;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v45 = *(double *)&v211[8];
        v33[1] = v45;
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
        goto LABEL_81;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_347;
      v33[1] = (float)*(uint64_t *)&v211[8];
      v44 = v212;
      v212 = 0;
      if (v44)
        goto LABEL_81;
LABEL_87:
      sub_20E9EFAC4(v36, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v33[2] = (float)*(unint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 4:
          v52 = *(double *)&v211[8];
          v33[2] = v52;
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 3:
          v33[2] = (float)*(uint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
          {
LABEL_95:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_347:
          v204 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v204->__vftable = 0;
          v205 = std::bad_cast::bad_cast(v204);
          v205->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v205, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_101;
    }
    *v33 = (float)*(unint64_t *)&v211[8];
    v38 = v212;
    v212 = 0;
    if (!v38)
      goto LABEL_73;
LABEL_67:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_73;
  }
LABEL_101:
  *(_DWORD *)v211 = 0;
  sub_20E9EDADC(a1[6], v211);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  sub_20E9EDE6C(a1[6], &v210);
  v59 = *(float **)(a2 + 80);
  v58 = *(float **)(a2 + 88);
  v60 = 0xAAAAAAAAAAAAAAABLL * (v58 - v59);
  if (v210 <= v60)
  {
    if (v210 < v60)
    {
      v58 = &v59[3 * v210];
      *(_QWORD *)(a2 + 88) = v58;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 80), v210 - v60);
    v59 = *(float **)(a2 + 80);
    v58 = *(float **)(a2 + 88);
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = a1[6];
      sub_20E9EFAC4(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v59 = (float)*(uint64_t *)&v211[8];
        v64 = v212;
        v212 = 0;
        if (!v64)
          goto LABEL_123;
        goto LABEL_117;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_348;
      v63 = *(double *)&v211[8];
      *v59 = v63;
      v64 = v212;
      v212 = 0;
      if (v64)
        goto LABEL_117;
LABEL_123:
      sub_20E9EFAC4(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v59[1] = (float)*(unint64_t *)&v211[8];
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
LABEL_131:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_137;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v71 = *(double *)&v211[8];
        v59[1] = v71;
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
        goto LABEL_131;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_348;
      v59[1] = (float)*(uint64_t *)&v211[8];
      v70 = v212;
      v212 = 0;
      if (v70)
        goto LABEL_131;
LABEL_137:
      sub_20E9EFAC4(v62, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v59[2] = (float)*(unint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 4:
          v78 = *(double *)&v211[8];
          v59[2] = v78;
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 3:
          v59[2] = (float)*(uint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
          {
LABEL_145:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_348:
          v206 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v206->__vftable = 0;
          v207 = std::bad_cast::bad_cast(v206);
          v207->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v207, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_151;
    }
    *v59 = (float)*(unint64_t *)&v211[8];
    v64 = v212;
    v212 = 0;
    if (!v64)
      goto LABEL_123;
LABEL_117:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_123;
  }
LABEL_151:
  *(_DWORD *)v211 = 0;
  sub_20E9EDADC(a1[6], v211);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  sub_20E9EDE6C(a1[6], v211);
  v85 = *(_BYTE **)(a2 + 120);
  v84 = *(_BYTE **)(a2 + 128);
  if (*(_QWORD *)v211 <= (unint64_t)(v84 - v85))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v84 - v85))
    {
      v84 = &v85[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 128) = &v85[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 120, *(_QWORD *)v211 - (v84 - v85));
    v85 = *(_BYTE **)(a2 + 120);
    v84 = *(_BYTE **)(a2 + 128);
  }
  v86 = a1[6];
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20E9ED7B4(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = a1[6];
  }
  *(_DWORD *)v211 = 0;
  sub_20E9EDADC(v86, v211);
  *(_DWORD *)(a2 + 152) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  sub_20E9EDE6C(a1[6], v211);
  v89 = *(_BYTE **)(a2 + 160);
  v88 = *(_BYTE **)(a2 + 168);
  if (*(_QWORD *)v211 <= (unint64_t)(v88 - v89))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v88 - v89))
    {
      v88 = &v89[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 168) = &v89[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 160, *(_QWORD *)v211 - (v88 - v89));
    v89 = *(_BYTE **)(a2 + 160);
    v88 = *(_BYTE **)(a2 + 168);
  }
  v90 = a1[6];
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20E9ED7B4(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = a1[6];
  }
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  sub_20E9EDE6C(v90, &v210);
  v93 = *(_DWORD **)(a2 + 192);
  v92 = *(_DWORD **)(a2 + 200);
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93);
  if (v210 <= v94)
  {
    if (v210 < v94)
    {
      v92 = &v93[3 * v210];
      *(_QWORD *)(a2 + 200) = v92;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 192), v210 - v94);
    v93 = *(_DWORD **)(a2 + 192);
    v92 = *(_DWORD **)(a2 + 200);
  }
  if (v92 != v93)
  {
    v95 = v92;
    do
    {
      v96 = a1[6];
      sub_20E9EFAC4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      *v93 = *(_DWORD *)&v211[8];
      v98 = v212;
      v212 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20E9EFAC4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      v93[1] = *(_DWORD *)&v211[8];
      v105 = v212;
      v212 = 0;
      if (v105)
      {
        for (i1 = (char *)v105[4]; i1 != (char *)v105[6]; i1 -= 16)
        {
          v108 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v107 = *((_QWORD *)i1 - 1);
          v108(v107);
        }
        free(i1);
        v109 = (_QWORD *)v105[3];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            free(v109);
            v109 = v110;
          }
          while (v110);
        }
        free(v105);
      }
      sub_20E9EFAC4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_343:
        v196 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v196->__vftable = 0;
        v197 = std::bad_cast::bad_cast(v196);
        v197->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v197, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = *(_DWORD *)&v211[8];
      v112 = v212;
      v212 = 0;
      if (v112)
      {
        for (i2 = (char *)v112[4]; i2 != (char *)v112[6]; i2 -= 16)
        {
          v115 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v114 = *((_QWORD *)i2 - 1);
          v115(v114);
        }
        free(i2);
        v116 = (_QWORD *)v112[3];
        if (v116)
        {
          do
          {
            v117 = (_QWORD *)*v116;
            free(v116);
            v116 = v117;
          }
          while (v117);
        }
        free(v112);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  sub_20E9EDE6C(a1[6], &v210);
  v119 = *(char **)(a2 + 224);
  v118 = *(char **)(a2 + 232);
  v120 = (v118 - v119) >> 3;
  if (v210 <= v120)
  {
    if (v210 < v120)
    {
      v118 = &v119[8 * v210];
      *(_QWORD *)(a2 + 232) = v118;
    }
  }
  else
  {
    sub_20FE014BC(a2 + 224, v210 - v120);
    v119 = *(char **)(a2 + 224);
    v118 = *(char **)(a2 + 232);
  }
  if (v118 != v119)
  {
    v121 = v118;
    do
    {
      v122 = a1[6];
      sub_20E9EFAC4(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_345;
      *(_DWORD *)v119 = *(_DWORD *)&v211[8];
      v124 = v212;
      v212 = 0;
      if (v124)
      {
        for (i3 = (char *)v124[4]; i3 != (char *)v124[6]; i3 -= 16)
        {
          v127 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v126 = *((_QWORD *)i3 - 1);
          v127(v126);
        }
        free(i3);
        v128 = (_QWORD *)v124[3];
        if (v128)
        {
          do
          {
            v129 = (_QWORD *)*v128;
            free(v128);
            v128 = v129;
          }
          while (v129);
        }
        free(v124);
      }
      sub_20E9EFAC4(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_345:
        v200 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v200->__vftable = 0;
        v201 = std::bad_cast::bad_cast(v200);
        v201->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v201, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_DWORD *)v119 + 1) = *(_DWORD *)&v211[8];
      v131 = v212;
      v212 = 0;
      if (v131)
      {
        for (i4 = (char *)v131[4]; i4 != (char *)v131[6]; i4 -= 16)
        {
          v134 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v133 = *((_QWORD *)i4 - 1);
          v134(v133);
        }
        free(i4);
        v135 = (_QWORD *)v131[3];
        if (v135)
        {
          do
          {
            v136 = (_QWORD *)*v135;
            free(v135);
            v135 = v136;
          }
          while (v136);
        }
        free(v131);
      }
      v119 += 8;
    }
    while (v119 != v121);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  sub_20E9EDE6C(a1[6], &v210);
  v138 = *(float **)(a2 + 256);
  v137 = *(float **)(a2 + 264);
  v139 = ((char *)v137 - (char *)v138) >> 3;
  if (v210 <= v139)
  {
    if (v210 < v139)
    {
      v137 = &v138[2 * v210];
      *(_QWORD *)(a2 + 264) = v137;
    }
  }
  else
  {
    sub_20FE017F4(a2 + 256, v210 - v139);
    v138 = *(float **)(a2 + 256);
    v137 = *(float **)(a2 + 264);
  }
  if (v137 != v138)
  {
    v140 = v137;
    while (1)
    {
      v141 = a1[6];
      sub_20E9EFAC4(v141, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v138 = (float)*(uint64_t *)&v211[8];
        v143 = v212;
        v212 = 0;
        if (!v143)
          goto LABEL_263;
        goto LABEL_257;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_349;
      v142 = *(double *)&v211[8];
      *v138 = v142;
      v143 = v212;
      v212 = 0;
      if (v143)
        goto LABEL_257;
LABEL_263:
      sub_20E9EFAC4(v141, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v138[1] = (float)*(unint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 4:
          v150 = *(double *)&v211[8];
          v138[1] = v150;
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 3:
          v138[1] = (float)*(uint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
          {
LABEL_271:
            for (i5 = (char *)v149[4]; i5 != (char *)v149[6]; i5 -= 16)
            {
              v153 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v152 = *((_QWORD *)i5 - 1);
              v153(v152);
            }
            free(i5);
            v154 = (_QWORD *)v149[3];
            if (v154)
            {
              do
              {
                v155 = (_QWORD *)*v154;
                free(v154);
                v154 = v155;
              }
              while (v155);
            }
            free(v149);
          }
          break;
        default:
LABEL_349:
          v208 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v208->__vftable = 0;
          v209 = std::bad_cast::bad_cast(v208);
          v209->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v209, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v138 += 2;
      if (v138 == v140)
        goto LABEL_277;
    }
    *v138 = (float)*(unint64_t *)&v211[8];
    v143 = v212;
    v212 = 0;
    if (!v143)
      goto LABEL_263;
LABEL_257:
    for (i6 = (char *)v143[4]; i6 != (char *)v143[6]; i6 -= 16)
    {
      v146 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v145 = *((_QWORD *)i6 - 1);
      v146(v145);
    }
    free(i6);
    v147 = (_QWORD *)v143[3];
    if (v147)
    {
      do
      {
        v148 = (_QWORD *)*v147;
        free(v147);
        v147 = v148;
      }
      while (v148);
    }
    free(v143);
    goto LABEL_263;
  }
LABEL_277:
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  sub_20E9EDE6C(a1[6], &v210);
  v157 = *(_DWORD **)(a2 + 288);
  v156 = *(_DWORD **)(a2 + 296);
  v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - v157);
  if (v210 <= v158)
  {
    if (v210 < v158)
    {
      v156 = &v157[3 * v210];
      *(_QWORD *)(a2 + 296) = v156;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 288), v210 - v158);
    v157 = *(_DWORD **)(a2 + 288);
    v156 = *(_DWORD **)(a2 + 296);
  }
  if (v156 != v157)
  {
    v159 = v156;
    do
    {
      v160 = a1[6];
      sub_20E9EFAC4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      *v157 = *(_DWORD *)&v211[8];
      v162 = v212;
      v212 = 0;
      if (v162)
      {
        for (i7 = (char *)v162[4]; i7 != (char *)v162[6]; i7 -= 16)
        {
          v165 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v164 = *((_QWORD *)i7 - 1);
          v165(v164);
        }
        free(i7);
        v166 = (_QWORD *)v162[3];
        if (v166)
        {
          do
          {
            v167 = (_QWORD *)*v166;
            free(v166);
            v166 = v167;
          }
          while (v167);
        }
        free(v162);
      }
      sub_20E9EFAC4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      v157[1] = *(_DWORD *)&v211[8];
      v169 = v212;
      v212 = 0;
      if (v169)
      {
        for (i8 = (char *)v169[4]; i8 != (char *)v169[6]; i8 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v171 = *((_QWORD *)i8 - 1);
          v172(v171);
        }
        free(i8);
        v173 = (_QWORD *)v169[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v169);
      }
      sub_20E9EFAC4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_344:
        v198 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v198->__vftable = 0;
        v199 = std::bad_cast::bad_cast(v198);
        v199->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v199, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v157[2] = *(_DWORD *)&v211[8];
      v176 = v212;
      v212 = 0;
      if (v176)
      {
        for (i9 = (char *)v176[4]; i9 != (char *)v176[6]; i9 -= 16)
        {
          v179 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v178 = *((_QWORD *)i9 - 1);
          v179(v178);
        }
        free(i9);
        v180 = (_QWORD *)v176[3];
        if (v180)
        {
          do
          {
            v181 = (_QWORD *)*v180;
            free(v180);
            v180 = v181;
          }
          while (v181);
        }
        free(v176);
      }
      v157 += 3;
    }
    while (v157 != v159);
  }
  if (a3 >= 2)
  {
    LOBYTE(v210) = 0;
    sub_20E9ED7B4(a1[6], &v210);
    if ((_BYTE)v210)
    {
      if (!*(_BYTE *)(a2 + 344))
      {
        *(_QWORD *)(a2 + 320) = 0;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        *(_BYTE *)(a2 + 344) = 1;
      }
      *(_DWORD *)v211 = 2;
      sub_20E9EDADC(a1[6], v211);
      if (*(_DWORD *)v211 <= 1u)
      {
        memset(v211, 0, sizeof(v211));
        v186 = a1[6];
        sub_20E9EDF48(v186, (float *)v211);
        sub_20E9EDF48(v186, (float *)&v211[4]);
        sub_20E9EDF48(v186, (float *)&v211[8]);
        v187 = a1[6];
        sub_20E9EDF48(v187, (float *)((unint64_t)v211 | 0xC));
        sub_20E9EDF48(v187, (float *)&v211[16]);
        sub_20E9EDF48(v187, (float *)&v211[20]);
        v188 = *(_OWORD *)v211;
        v189 = *(int32x2_t *)&v211[12];
        HIDWORD(v188) = *(_DWORD *)&v211[12];
        *(_OWORD *)(a2 + 320) = v188;
        LODWORD(v188) = vdup_lane_s32(v189, 1).u32[0];
        DWORD1(v188) = *(_DWORD *)&v211[20];
        *(_QWORD *)(a2 + 336) = v188;
        if (a3 < 4)
          return;
      }
      else
      {
        sub_20E90A71C(a1 + 2);
        v182 = a1[6];
        sub_20E9EDF48(v182, (float *)(a2 + 320));
        sub_20E9EDF48(v182, (float *)(a2 + 324));
        sub_20E9EDF48(v182, (float *)(a2 + 328));
        v183 = a1[6];
        sub_20E9EDF48(v183, (float *)(a2 + 332));
        sub_20E9EDF48(v183, (float *)(a2 + 336));
        sub_20E9EDF48(v183, (float *)(a2 + 340));
        v184 = a1[4];
        v185 = *(_QWORD *)(v184 - 16)
             - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
             + *(_QWORD *)(v184 - 8);
        if (v185)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v185);
        a1[4] -= 16;
        if (a3 < 4)
          return;
      }
LABEL_335:
      *(_DWORD *)v211 = 0;
      sub_20E9EDADC(a1[6], v211);
      *(_DWORD *)(a2 + 348) = *(_DWORD *)v211;
      *(_QWORD *)v211 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      sub_20E9EDE6C(a1[6], v211);
      v191 = *(float **)(a2 + 352);
      v190 = *(float **)(a2 + 360);
      v192 = v190 - v191;
      if (*(_QWORD *)v211 <= v192)
      {
        if (*(_QWORD *)v211 < v192)
        {
          v190 = &v191[*(_QWORD *)v211];
          *(_QWORD *)(a2 + 360) = v190;
        }
      }
      else
      {
        sub_20FE01D5C(a2 + 352, *(_QWORD *)v211 - v192);
        v191 = *(float **)(a2 + 352);
        v190 = *(float **)(a2 + 360);
      }
      v193 = (char *)v190 - (char *)v191;
      if (v193)
      {
        v194 = a1[6];
        v195 = 4 * (v193 >> 2);
        do
        {
          sub_20E9EDF48(v194, v191++);
          v195 -= 4;
        }
        while (v195);
      }
      return;
    }
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_335;
  }
}

void sub_20FE05684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE05698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE056AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE056C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE056D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE056E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE056FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE0575C(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DA8B0(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20FE05858((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FE05EF8(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_20FE05858(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_20FE0677C(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_20FE068C4((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_20FE0677C(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_20FE068C4((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_20FE0677C(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_20FE068C4((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_20FE00E0C((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2101FF6B8(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_20FE068C4((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_20FE00E0C((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2101FF6B8(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_20FE06AB4(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_20FE06C10(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_20FE06D50(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_20FE06AB4(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_2101FF2E8(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_2100DA8B0(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2102004AC(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2102004AC(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_20FE01F64((uint64_t)&v40, (uint64_t)v42);
  sub_20FE020A8(a3, (uint64_t)&v40);
  sub_20FDE1900((uint64_t *)&v40);
  return sub_20FE0283C(v42);
}

void sub_20FE05ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE05EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE05EF8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_20FE0677C(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_20FE068C4((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_20FE0677C(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_20FE068C4((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_20FE0677C(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_20FE068C4((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 16);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_20FE00E0C(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FF6B8(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_20FE068C4((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_20FE00E0C(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FF6B8(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_20FE06AB4(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_20FE06C10(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_20FE06D50(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_20FE06AB4(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_2101FF2E8(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_2100DA8B0(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_2101FF5A0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2102004AC(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_2101FF5A0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2102004AC(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_2101FF5A0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2102004AC(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_2101FF5A0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2102004AC(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_2101FF5A0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_2100DA8B0(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_20FE019EC();
            sub_20E9F5C70((std::string *)&xmmword_254A6C6C8, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA1FAE0;
      __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_20FE068C4((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = *(_QWORD *)(*((_QWORD *)v51 + 1) + 16);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_20FE01D5C((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_20FE0677C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20FE00A14(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE068C4(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF41698((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE06A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE06AB4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20FE01160(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE06C10(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_20FE014BC((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20FE06D50(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_20FE017F4((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

uint64_t *sub_20FE06E7C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v49[48];
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _DWORD v69[33];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;

  v50 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v61 = 0;
  v60 = 0;
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v65 = 0;
  v67 = 0;
  v66 = 0;
  v68 = 0;
  v69[32] = 0;
  LOBYTE(v70) = 0;
  v73 = 0;
  memset(v69, 0, 28);
  memset(&v69[8], 0, 28);
  memset(&v69[16], 0, 28);
  memset(&v69[24], 0, 28);
  v49[0] = 0;
  sub_20E9E88B4(a2, v49);
  v8 = v50;
  v7 = v51;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v51 - v50);
  if (v49[0] <= v9)
  {
    if (v49[0] < v9)
    {
      v7 = &v50[3 * v49[0]];
      v51 = v7;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)&v50, v49[0] - v9);
    v8 = v50;
    v7 = v51;
  }
  if (v7 != v8)
  {
    v10 = v7;
    do
    {
      sub_20E9E8D84(a2, v8);
      v11 = v8 + 1;
      sub_20E9E8D84(a2, v11++);
      sub_20E9E8D84(a2, v11);
      v8 = v11 + 1;
    }
    while (v8 != v10);
  }
  LODWORD(v49[0]) = 0;
  sub_20E9E840C(a2, v49);
  HIDWORD(v53) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  sub_20E9E88B4(a2, v49);
  v13 = v54;
  v12 = v55;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  if (v49[0] <= v14)
  {
    if (v49[0] < v14)
    {
      v12 = &v54[3 * v49[0]];
      v55 = v12;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)&v54, v49[0] - v14);
    v13 = v54;
    v12 = v55;
  }
  if (v12 != v13)
  {
    v15 = v12;
    do
    {
      sub_20E9E8D84(a2, v13);
      v16 = v13 + 1;
      sub_20E9E8D84(a2, v16++);
      sub_20E9E8D84(a2, v16);
      v13 = v16 + 1;
    }
    while (v13 != v15);
  }
  LODWORD(v49[0]) = 0;
  sub_20E9E840C(a2, v49);
  HIDWORD(v57) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  sub_20E9E88B4(a2, v49);
  v18 = v58;
  v17 = v59;
  v19 = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  if (v49[0] <= v19)
  {
    if (v49[0] < v19)
    {
      v17 = &v58[3 * v49[0]];
      v59 = v17;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)&v58, v49[0] - v19);
    v18 = v58;
    v17 = v59;
  }
  if (v17 != v18)
  {
    v20 = v17;
    do
    {
      sub_20E9E8D84(a2, v18);
      v21 = v18 + 1;
      sub_20E9E8D84(a2, v21++);
      sub_20E9E8D84(a2, v21);
      v18 = v21 + 1;
    }
    while (v18 != v20);
  }
  LODWORD(v49[0]) = 0;
  sub_20E9E840C(a2, v49);
  HIDWORD(v61) = v49[0];
  v49[0] = v63 - v62;
  sub_20E9E88B4(a2, v49);
  v22 = v63;
  v23 = v62;
  if (v49[0] <= (unint64_t)(v63 - v62))
  {
    if (v49[0] < (unint64_t)(v63 - v62))
    {
      v22 = &v62[v49[0]];
      v63 = &v62[v49[0]];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v62, v49[0] - (v63 - v62));
    v23 = v62;
    v22 = v63;
  }
  v24 = v22 - v23;
  if (v22 != v23)
  {
    do
    {
      sub_20E9E7AC8(a2, v23++);
      --v24;
    }
    while (v24);
  }
  LODWORD(v49[0]) = 0;
  sub_20E9E840C(a2, v49);
  HIDWORD(v65) = v49[0];
  v49[0] = v67 - v66;
  sub_20E9E88B4(a2, v49);
  v25 = v67;
  v26 = v66;
  if (v49[0] <= (unint64_t)(v67 - v66))
  {
    if (v49[0] < (unint64_t)(v67 - v66))
    {
      v25 = &v66[v49[0]];
      v67 = &v66[v49[0]];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v66, v49[0] - (v67 - v66));
    v26 = v66;
    v25 = v67;
  }
  v27 = v25 - v26;
  if (v25 != v26)
  {
    do
    {
      sub_20E9E7AC8(a2, v26++);
      --v27;
    }
    while (v27);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  sub_20E9E88B4(a2, v49);
  v28 = *(_QWORD *)&v69[3];
  v29 = *(_DWORD **)&v69[1];
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  if (v49[0] <= v30)
  {
    if (v49[0] < v30)
    {
      v28 = *(_QWORD *)&v69[1] + 12 * v49[0];
      *(_QWORD *)&v69[3] = v28;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v69[1], v49[0] - v30);
    v29 = *(_DWORD **)&v69[1];
    v28 = *(_QWORD *)&v69[3];
  }
  if ((_DWORD *)v28 != v29)
  {
    v31 = (_DWORD *)v28;
    do
    {
      sub_20E9E840C(a2, v29);
      v32 = v29 + 1;
      sub_20E9E840C(a2, v32++);
      sub_20E9E840C(a2, v32);
      v29 = v32 + 1;
    }
    while (v29 != v31);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  sub_20E9E88B4(a2, v49);
  v33 = *(_QWORD *)&v69[11];
  v34 = *(_DWORD **)&v69[9];
  v35 = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  if (v49[0] <= v35)
  {
    if (v49[0] < v35)
    {
      v33 = *(_QWORD *)&v69[9] + 8 * v49[0];
      *(_QWORD *)&v69[11] = v33;
    }
  }
  else
  {
    sub_20FE014BC((uint64_t)&v69[9], v49[0] - v35);
    v34 = *(_DWORD **)&v69[9];
    v33 = *(_QWORD *)&v69[11];
  }
  if ((_DWORD *)v33 != v34)
  {
    v36 = (_DWORD *)v33;
    do
    {
      sub_20E9E840C(a2, v34);
      v37 = v34 + 1;
      sub_20E9E840C(a2, v37);
      v34 = v37 + 1;
    }
    while (v34 != v36);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  sub_20E9E88B4(a2, v49);
  v38 = *(_QWORD *)&v69[19];
  v39 = *(_DWORD **)&v69[17];
  v40 = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  if (v49[0] <= v40)
  {
    if (v49[0] < v40)
    {
      v38 = *(_QWORD *)&v69[17] + 8 * v49[0];
      *(_QWORD *)&v69[19] = v38;
    }
  }
  else
  {
    sub_20FE017F4((uint64_t)&v69[17], v49[0] - v40);
    v39 = *(_DWORD **)&v69[17];
    v38 = *(_QWORD *)&v69[19];
  }
  if ((_DWORD *)v38 != v39)
  {
    v41 = (_DWORD *)v38;
    do
    {
      sub_20E9E8D84(a2, v39);
      v42 = v39 + 1;
      sub_20E9E8D84(a2, v42);
      v39 = v42 + 1;
    }
    while (v39 != v41);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  sub_20E9E88B4(a2, v49);
  v43 = *(_QWORD *)&v69[27];
  v44 = *(_DWORD **)&v69[25];
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  if (v49[0] <= v45)
  {
    if (v49[0] < v45)
    {
      v43 = *(_QWORD *)&v69[25] + 12 * v49[0];
      *(_QWORD *)&v69[27] = v43;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v69[25], v49[0] - v45);
    v44 = *(_DWORD **)&v69[25];
    v43 = *(_QWORD *)&v69[27];
  }
  if ((_DWORD *)v43 != v44)
  {
    v46 = (_DWORD *)v43;
    do
    {
      sub_20E9E840C(a2, v44);
      v47 = v44 + 1;
      sub_20E9E840C(a2, v47++);
      sub_20E9E840C(a2, v47);
      v44 = v47 + 1;
    }
    while (v44 != v46);
  }
  if (a4 >= 2)
  {
    v74 = 0;
    sub_20E9E7AC8(a2, &v74);
    if (v74)
    {
      if (!v73)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 1;
      }
      LODWORD(v49[0]) = 1;
      sub_20E9E840C(a2, v49);
      sub_20E9E8D84(a2, &v70);
      sub_20E9E8D84(a2, (_DWORD *)&v70 + 1);
      sub_20E9E8D84(a2, &v71);
      sub_20E9E8D84(a2, (_DWORD *)&v71 + 1);
      sub_20E9E8D84(a2, &v72);
      sub_20E9E8D84(a2, (_DWORD *)&v72 + 1);
    }
    else if (v73)
    {
      v73 = 0;
    }
  }
  sub_20FE01F64((uint64_t)v49, (uint64_t)&v50);
  sub_20FE020A8(a3, (uint64_t)v49);
  sub_20FDE1900(v49);
  return sub_20FE0283C((uint64_t *)&v50);
}

void sub_20FE07618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE0762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE07640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE07654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE07668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE0767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE07690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE076A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE076B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE076CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE076E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE076F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  int32x2_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *__p[4];

  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  sub_20E9E88B4(a1, __p);
  v7 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (__p[0] <= (void *)v8)
  {
    if (__p[0] < (void *)v8)
    {
      v6 = &v7[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)a2, (unint64_t)__p[0] - v8);
    v7 = *(_DWORD **)a2;
    v6 = *(_DWORD **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      sub_20E9E8D84(a1, v7);
      sub_20E9E8D84(a1, v7 + 1);
      sub_20E9E8D84(a1, v7 + 2);
      v7 += 3;
    }
    while (v7 != v9);
  }
  LODWORD(__p[0]) = 0;
  sub_20E9E840C(a1, __p);
  *(_DWORD *)(a2 + 32) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  sub_20E9E88B4(a1, __p);
  v11 = *(_DWORD **)(a2 + 40);
  v10 = *(_DWORD **)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * (v10 - v11);
  if (__p[0] <= (void *)v12)
  {
    if (__p[0] < (void *)v12)
    {
      v10 = &v11[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 40), (unint64_t)__p[0] - v12);
    v11 = *(_DWORD **)(a2 + 40);
    v10 = *(_DWORD **)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      sub_20E9E8D84(a1, v11);
      sub_20E9E8D84(a1, v11 + 1);
      sub_20E9E8D84(a1, v11 + 2);
      v11 += 3;
    }
    while (v11 != v13);
  }
  LODWORD(__p[0]) = 0;
  sub_20E9E840C(a1, __p);
  *(_DWORD *)(a2 + 72) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  sub_20E9E88B4(a1, __p);
  v15 = *(_DWORD **)(a2 + 80);
  v14 = *(_DWORD **)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - v15);
  if (__p[0] <= (void *)v16)
  {
    if (__p[0] < (void *)v16)
    {
      v14 = &v15[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 80), (unint64_t)__p[0] - v16);
    v15 = *(_DWORD **)(a2 + 80);
    v14 = *(_DWORD **)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      sub_20E9E8D84(a1, v15);
      sub_20E9E8D84(a1, v15 + 1);
      sub_20E9E8D84(a1, v15 + 2);
      v15 += 3;
    }
    while (v15 != v17);
  }
  LODWORD(__p[0]) = 0;
  sub_20E9E840C(a1, __p);
  *(_DWORD *)(a2 + 112) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120));
  sub_20E9E88B4(a1, __p);
  v19 = *(_BYTE **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (__p[0] <= (void *)(v18 - v19))
  {
    if (__p[0] < (void *)(v18 - v19))
    {
      v18 = &v19[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 128) = &v19[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 120, (size_t)__p[0] - (v18 - v19));
    v19 = *(_BYTE **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  v20 = v18 - v19;
  if (v18 != v19)
  {
    do
    {
      sub_20E9E7AC8(a1, v19++);
      --v20;
    }
    while (v20);
  }
  LODWORD(__p[0]) = 0;
  sub_20E9E840C(a1, __p);
  *(_DWORD *)(a2 + 152) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160));
  sub_20E9E88B4(a1, __p);
  v22 = *(_BYTE **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (__p[0] <= (void *)(v21 - v22))
  {
    if (__p[0] < (void *)(v21 - v22))
    {
      v21 = &v22[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 168) = &v22[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 160, (size_t)__p[0] - (v21 - v22));
    v22 = *(_BYTE **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  v23 = v21 - v22;
  if (v21 != v22)
  {
    do
    {
      sub_20E9E7AC8(a1, v22++);
      --v23;
    }
    while (v23);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2));
  sub_20E9E88B4(a1, __p);
  v25 = *(_DWORD **)(a2 + 192);
  v24 = *(_DWORD **)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * (v24 - v25);
  if (__p[0] <= (void *)v26)
  {
    if (__p[0] < (void *)v26)
    {
      v24 = &v25[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 192), (unint64_t)__p[0] - v26);
    v25 = *(_DWORD **)(a2 + 192);
    v24 = *(_DWORD **)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      sub_20E9E840C(a1, v25);
      sub_20E9E840C(a1, v25 + 1);
      sub_20E9E840C(a1, v25 + 2);
      v25 += 3;
    }
    while (v25 != v27);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  sub_20E9E88B4(a1, __p);
  v29 = *(char **)(a2 + 224);
  v28 = *(char **)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (__p[0] <= (void *)v30)
  {
    if (__p[0] < (void *)v30)
    {
      v28 = &v29[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_20FE014BC(a2 + 224, (unint64_t)__p[0] - v30);
    v29 = *(char **)(a2 + 224);
    v28 = *(char **)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      sub_20E9E840C(a1, v29);
      sub_20E9E840C(a1, (_DWORD *)v29 + 1);
      v29 += 8;
    }
    while (v29 != v31);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
  sub_20E9E88B4(a1, __p);
  v33 = *(char **)(a2 + 256);
  v32 = *(char **)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (__p[0] <= (void *)v34)
  {
    if (__p[0] < (void *)v34)
    {
      v32 = &v33[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_20FE017F4(a2 + 256, (unint64_t)__p[0] - v34);
    v33 = *(char **)(a2 + 256);
    v32 = *(char **)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      sub_20E9E8D84(a1, v33);
      sub_20E9E8D84(a1, (_DWORD *)v33 + 1);
      v33 += 8;
    }
    while (v33 != v35);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2));
  sub_20E9E88B4(a1, __p);
  v37 = *(_DWORD **)(a2 + 288);
  v36 = *(_DWORD **)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * (v36 - v37);
  if (__p[0] <= (void *)v38)
  {
    if (__p[0] < (void *)v38)
    {
      v36 = &v37[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 288), (unint64_t)__p[0] - v38);
    v37 = *(_DWORD **)(a2 + 288);
    v36 = *(_DWORD **)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      sub_20E9E840C(a1, v37);
      sub_20E9E840C(a1, v37 + 1);
      sub_20E9E840C(a1, v37 + 2);
      v37 += 3;
    }
    while (v37 != v39);
  }
  if (a3 >= 2)
  {
    v51 = 0;
    sub_20E9E7AC8(a1, &v51);
    if (!v51)
    {
      if (*(_BYTE *)(a2 + 344))
        *(_BYTE *)(a2 + 344) = 0;
      goto LABEL_76;
    }
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    LODWORD(__p[0]) = 2;
    sub_20E9E840C(a1, __p);
    v40 = __p[0];
    if (LODWORD(__p[0]) >= 2)
      v41 = 2;
    else
      v41 = __p[0];
    if (v41 < 2)
    {
      memset(__p, 0, 24);
      sub_20E9E8D84(a1, __p);
      sub_20E9E8D84(a1, (_DWORD *)__p + 1);
      sub_20E9E8D84(a1, &__p[1]);
      sub_20E9E8D84(a1, (_DWORD *)((unint64_t)__p | 0xC));
      sub_20E9E8D84(a1, &__p[2]);
      sub_20E9E8D84(a1, (_DWORD *)&__p[2] + 1);
      v42 = *(_OWORD *)__p;
      v43 = *(int32x2_t *)((char *)&__p[1] + 4);
      HIDWORD(v42) = HIDWORD(__p[1]);
      *(_OWORD *)(a2 + 320) = v42;
      LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
      DWORD1(v42) = HIDWORD(__p[2]);
      *(_QWORD *)(a2 + 336) = v42;
      if (v40 < 2)
        goto LABEL_76;
    }
    else
    {
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 320));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 324));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 328));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 332));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 336));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 340));
      if (v40 < 2)
      {
LABEL_76:
        if (a3 >= 4)
        {
          LODWORD(__p[0]) = 0;
          sub_20E9E840C(a1, __p);
          *(_DWORD *)(a2 + 348) = __p[0];
          __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
          sub_20E9E88B4(a1, __p);
          v45 = *(char **)(a2 + 352);
          v44 = *(char **)(a2 + 360);
          v46 = (v44 - v45) >> 2;
          if (__p[0] <= (void *)v46)
          {
            if (__p[0] < (void *)v46)
            {
              v44 = &v45[4 * (uint64_t)__p[0]];
              *(_QWORD *)(a2 + 360) = v44;
            }
          }
          else
          {
            sub_20FE01D5C(a2 + 352, (unint64_t)__p[0] - v46);
            v45 = *(char **)(a2 + 352);
            v44 = *(char **)(a2 + 360);
          }
          v49 = v44 - v45;
          if (v49)
          {
            v50 = 4 * (v49 >> 2);
            do
            {
              sub_20E9E8D84(a1, v45);
              v45 += 4;
              v50 -= 4;
            }
            while (v50);
          }
        }
        return;
      }
    }
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_76;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_76;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_90:
          v48 = 0;
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_93;
          goto LABEL_79;
        }
      }
      else if (SHIBYTE(__p[2]) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_90;
      }
      v48 = 1;
      if (SHIBYTE(__p[2]) < 0)
LABEL_93:
        operator delete(__p[0]);
LABEL_79:
      if (*(_BYTE *)(a1 + 131))
        v47 = 0;
      else
        v47 = v48;
      if ((v47 & 1) == 0)
        goto LABEL_76;
    }
  }
}

void sub_20FE07F40(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_2100B6EE0(a2);
  if (v9 >= 4)
    v10 = 4;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_20FE08054((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_20FE083FC(a2, (uint64_t)a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20FE08040(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FE08054(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  std::logic_error *exception;
  uint64_t v31[48];
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[19];
  int v41;
  _BYTE v42[24];
  char v43;

  memset(v32, 0, sizeof(v32));
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  memset(v40, 0, 24);
  v41 = 0;
  v42[0] = 0;
  v43 = 0;
  memset((char *)&v40[3] + 4, 0, 28);
  memset((char *)&v40[7] + 4, 0, 28);
  memset((char *)&v40[11] + 4, 0, 28);
  memset((char *)&v40[15] + 4, 0, 28);
  sub_20FE08980(a2, v32);
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 3)
    goto LABEL_25;
  v11 = *(_DWORD *)(a2[3] + v7);
  a2[6] = v7 + 4;
  HIDWORD(v33) = v11;
  sub_20FE08980(a2, v34);
  v12 = a2[6];
  v13 = a2[7];
  v9 = v13 >= v12;
  v14 = v13 - v12;
  if (!v9)
    v14 = 0;
  if (v14 <= 3)
    goto LABEL_25;
  v15 = *(_DWORD *)(a2[3] + v12);
  a2[6] = v12 + 4;
  HIDWORD(v35) = v15;
  sub_20FE08980(a2, v36);
  v16 = a2[6];
  v17 = a2[7];
  v9 = v17 >= v16;
  v18 = v17 - v16;
  if (!v9)
    v18 = 0;
  if (v18 <= 3)
    goto LABEL_25;
  v19 = *(_DWORD *)(a2[3] + v16);
  a2[6] = v16 + 4;
  HIDWORD(v37) = v19;
  sub_20FE08AE4(a2, v38);
  v20 = a2[6];
  v21 = a2[7];
  v9 = v21 >= v20;
  v22 = v21 - v20;
  if (!v9)
    v22 = 0;
  if (v22 <= 3)
    goto LABEL_25;
  v23 = *(_DWORD *)(a2[3] + v20);
  a2[6] = v20 + 4;
  HIDWORD(v39) = v23;
  sub_20FE08AE4(a2, v40);
  sub_20FE08BFC(a2, &v40[4]);
  sub_20FE08D60(a2, (char **)&v40[8]);
  sub_20FE08E90(a2, (char **)&v40[12]);
  sub_20FE08BFC(a2, &v40[16]);
  if (a4 >= 2)
  {
    v24 = a2[6];
    v25 = a2[7];
    if (v25 <= v24)
      goto LABEL_25;
    v26 = *(unsigned __int8 *)(a2[3] + v24);
    v27 = v24 + 1;
    a2[6] = v24 + 1;
    if (v26)
    {
      if (!v43)
      {
        memset(v42, 0, sizeof(v42));
        v43 = 1;
      }
      v9 = v25 >= v27;
      v28 = v25 - v27;
      if (!v9)
        v28 = 0;
      if (v28 > 3)
      {
        a2[6] = v24 + 5;
        sub_20FE08FC0(a2, (uint64_t)v42);
        goto LABEL_24;
      }
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Not enough data to read");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
    if (v43)
      v43 = 0;
  }
LABEL_24:
  sub_20FE01F64((uint64_t)v31, (uint64_t)v32);
  sub_20FE020A8(a3, (uint64_t)v31);
  sub_20FDE1900(v31);
  return sub_20FE0283C(v32);
}

void sub_20FE083A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void *v57;

  __cxa_free_exception(v57);
  sub_20FE0283C(&a57);
  _Unwind_Resume(a1);
}

void sub_20FE083D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_20FE0283C(&a57);
  _Unwind_Resume(a1);
}

void sub_20FE083E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_20FE0283C(&a57);
  _Unwind_Resume(a1);
}

void sub_20FE083FC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int32x2_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::logic_error *exception;
  _OWORD v58[2];

  sub_20FE08980(a1, (uint64_t *)a2);
  v6 = a1[6];
  v7 = a1[7];
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
    goto LABEL_49;
  v10 = *(_DWORD *)(a1[3] + v6);
  a1[6] = v6 + 4;
  *(_DWORD *)(a2 + 32) = v10;
  sub_20FE08980(a1, (uint64_t *)(a2 + 40));
  v11 = a1[6];
  v12 = a1[7];
  v8 = v12 >= v11;
  v13 = v12 - v11;
  if (!v8)
    v13 = 0;
  if (v13 <= 3)
    goto LABEL_49;
  v14 = *(_DWORD *)(a1[3] + v11);
  a1[6] = v11 + 4;
  *(_DWORD *)(a2 + 72) = v14;
  sub_20FE08980(a1, (uint64_t *)(a2 + 80));
  v15 = a1[6];
  v16 = a1[7];
  v8 = v16 >= v15;
  v17 = v16 - v15;
  if (!v8)
    v17 = 0;
  if (v17 <= 3)
    goto LABEL_49;
  v18 = *(_DWORD *)(a1[3] + v15);
  a1[6] = v15 + 4;
  *(_DWORD *)(a2 + 112) = v18;
  sub_20FE08AE4(a1, (_QWORD *)(a2 + 120));
  v19 = a1[6];
  v20 = a1[7];
  v8 = v20 >= v19;
  v21 = v20 - v19;
  if (!v8)
    v21 = 0;
  if (v21 <= 3)
    goto LABEL_49;
  v22 = *(_DWORD *)(a1[3] + v19);
  a1[6] = v19 + 4;
  *(_DWORD *)(a2 + 152) = v22;
  sub_20FE08AE4(a1, (_QWORD *)(a2 + 160));
  sub_20FE08BFC(a1, (uint64_t *)(a2 + 192));
  sub_20FE08D60(a1, (char **)(a2 + 224));
  sub_20FE08E90(a1, (char **)(a2 + 256));
  sub_20FE08BFC(a1, (uint64_t *)(a2 + 288));
  if (a3 < 2)
    return;
  v24 = a1[6];
  v23 = a1[7];
  if (v23 <= v24)
    goto LABEL_49;
  v25 = *(unsigned __int8 *)(a1[3] + v24);
  v26 = v24 + 1;
  a1[6] = v26;
  if (!v25)
  {
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_35;
    return;
  }
  v27 = (_QWORD *)(a2 + 320);
  if (!*(_BYTE *)(a2 + 344))
  {
    *v27 = 0;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_BYTE *)(a2 + 344) = 1;
    v26 = a1[6];
    v23 = a1[7];
  }
  v8 = v23 >= v26;
  v28 = v23 - v26;
  if (!v8)
    v28 = 0;
  if (v28 <= 3)
  {
LABEL_49:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_57;
  }
  v29 = *(_DWORD *)(a1[3] + v26);
  a1[6] = v26 + 4;
  if (v29 <= 1)
  {
    memset(v58, 0, 24);
    sub_20FE08FC0(a1, (uint64_t)v58);
    v42 = v58[0];
    v43 = *(int32x2_t *)((char *)v58 + 12);
    HIDWORD(v42) = HIDWORD(v58[0]);
    *(_OWORD *)(a2 + 320) = v42;
    LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
    DWORD1(v42) = DWORD1(v58[1]);
    *(_QWORD *)(a2 + 336) = v42;
    if (a3 >= 4)
      goto LABEL_35;
  }
  else
  {
    sub_2100B6EE0(a1);
    v30 = a1[6];
    v31 = a1[7];
    v8 = v31 >= v30;
    v32 = v31 - v30;
    if (!v8)
      v32 = 0;
    if (v32 <= 0xB)
      goto LABEL_56;
    v33 = (uint64_t *)(a1[3] + v30);
    v34 = *v33;
    *(_DWORD *)(a2 + 328) = *((_DWORD *)v33 + 2);
    *v27 = v34;
    v35 = a1[7];
    v36 = a1[6] + 12;
    a1[6] = v36;
    v8 = v35 >= v36;
    v37 = v35 - v36;
    if (!v8)
      v37 = 0;
    if (v37 <= 0xB)
    {
LABEL_56:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E89FD70(exception, "Not enough data to read span");
      goto LABEL_57;
    }
    v38 = a1[3] + v36;
    v39 = *(_QWORD *)v38;
    *(_DWORD *)(a2 + 340) = *(_DWORD *)(v38 + 8);
    *(_QWORD *)(a2 + 332) = v39;
    a1[6] += 12;
    v40 = a1[12];
    v41 = a1[9];
    a1[6] = *(_QWORD *)(v40 - 8) + *(_QWORD *)(v41 - 8) + 8;
    a1[9] = v41 - 8;
    a1[12] = v40 - 8;
    if (a3 >= 4)
    {
LABEL_35:
      v45 = a1[6];
      v44 = a1[7];
      v46 = v44 - v45;
      if (v44 < v45)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_53;
      v47 = a1[3];
      v48 = *(_DWORD *)(v47 + v45);
      a1[6] = v45 + 4;
      *(_DWORD *)(a2 + 348) = v48;
      v49 = v44 - (v45 + 4);
      if (v44 < v45 + 4)
        v49 = 0;
      if (v49 <= 7)
      {
LABEL_53:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(exception, "Not enough data to read");
      }
      else
      {
        v50 = *(_QWORD *)(v47 + v45 + 4);
        v51 = v45 + 12;
        a1[6] = v51;
        v52 = *(char **)(a2 + 352);
        v53 = *(char **)(a2 + 360);
        v54 = (v53 - v52) >> 2;
        if (v50 <= v54)
        {
          if (v50 < v54)
          {
            v53 = &v52[4 * v50];
            *(_QWORD *)(a2 + 360) = v53;
          }
        }
        else
        {
          sub_20FE01D5C(a2 + 352, v50 - v54);
          v52 = *(char **)(a2 + 352);
          v53 = *(char **)(a2 + 360);
          v51 = a1[6];
          v44 = a1[7];
        }
        v55 = v53 - v52;
        v8 = v44 >= v51;
        v56 = v44 - v51;
        if (!v8)
          v56 = 0;
        if (v56 >= v55)
        {
          memcpy(v52, (const void *)(a1[3] + v51), v53 - v52);
          a1[6] += v55;
          return;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(exception, "Not enough data to read span");
      }
LABEL_57:
      __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
  }
}

void sub_20FE088A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE088B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE088CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE088E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE088F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08908(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE0891C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08944(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE0896C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08980(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_20FE00A14(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
}

void sub_20FE08ABC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20FE08AE4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(a1[3] + v3);
  v8 = v3 + 8;
  a1[6] = v8;
  v9 = (char *)*a2;
  v10 = (char *)a2[1];
  v11 = &v10[-*a2];
  if (v7 <= (unint64_t)v11)
  {
    if (v7 < (unint64_t)v11)
    {
      v10 = &v9[v7];
      a2[1] = &v9[v7];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)a2, v7 - (_QWORD)v11);
    v9 = (char *)*a2;
    v10 = (char *)a2[1];
    v8 = a1[6];
    v2 = a1[7];
  }
  v12 = v10 - v9;
  v13 = v2 >= v8;
  v14 = v2 - v8;
  if (!v13)
    v14 = 0;
  if (v14 < v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_14:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(v9, (const void *)(a1[3] + v8), v10 - v9);
  a1[6] += v12;
  return result;
}

void sub_20FE08BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08BFC(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_20FE01160(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
}

void sub_20FE08D38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08D4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08D60(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_20FE014BC((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
}

void sub_20FE08E68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08E90(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_20FE017F4((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
}

void sub_20FE08F98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE08FAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE08FC0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xB)
    goto LABEL_8;
  v6 = (uint64_t *)(result[3] + v2);
  v7 = *v6;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v6 + 2);
  *(_QWORD *)a2 = v7;
  v8 = result[7];
  v9 = result[6] + 12;
  result[6] = v9;
  v4 = v8 >= v9;
  v10 = v8 - v9;
  if (!v4)
    v10 = 0;
  if (v10 <= 0xB)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v11 = result[3] + v9;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)(a2 + 12) = v12;
  result[6] += 12;
  return result;
}

void sub_20FE09090(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE090A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE090B8(int *a1, _BYTE *a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_9;
    }
    v12 = 3;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 5)
    {
      v11 = v12;
      sub_20FE091BC();
      sub_20E9F5C70((std::string *)&xmmword_254A6C740, v11, 4u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (a4 >= 3 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
LABEL_9:
  if (a4 >= 4)
    v10 = 4;
  else
    v10 = a4;
  if (v10 < 3)
  {
    sub_20FE0952C(a2, a3, v10);
    if (!v9)
      return;
  }
  else
  {
    sub_20FE09EC8((uint64_t)a2, (uint64_t)a3, v10);
    if (!v9)
      return;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20FE091BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C6A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C6A0))
  {
    sub_20FE09274();
    if (byte_254A6C76F < 0)
    {
      sub_20E860C04(&xmmword_254A6C740, (void *)qword_254A6C758, unk_254A6C760);
    }
    else
    {
      xmmword_254A6C740 = *(_OWORD *)&qword_254A6C758;
      qword_254A6C750 = unk_254A6C768;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C740, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C6A0);
  }
}

void sub_20FE0925C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C6A0);
  _Unwind_Resume(a1);
}

void sub_20FE09274()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C6A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C6A8))
  {
    sub_20FE09350(__p);
    sub_20EA6BE4C((char *)__p, (std::string *)&qword_254A6C758);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A6C758, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C6A8);
  }
}

void sub_20FE09310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C6A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C6A8);
  _Unwind_Resume(a1);
}

void sub_20FE09350(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C6B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C6B0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshDataSample<>]", qword_254A6C770);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C770, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C6B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A6C6B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C6B8))
  {
    v5 = sub_20E8A2354(qword_254A6C770, "<", 0);
    sub_20E89FC08(qword_254A6C770, 0, v5, qword_254A6C788);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C788, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C6B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A6C6C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C6C0))
  {
    sub_21023CD84((uint64_t)qword_254A6C788, (uint64_t)&xmmword_254A6C7A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C7A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C6C0);
  }
  if (byte_254A6C7B7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A6C7A0, *((unint64_t *)&xmmword_254A6C7A0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A6C7A0;
    __dst[2] = unk_254A6C7B0;
  }
}

void sub_20FE094E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C6C0);
  _Unwind_Resume(a1);
}

void sub_20FE094FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C6B8);
  _Unwind_Resume(a1);
}

void sub_20FE09514(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C6B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FE0952C(_BYTE *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v48[48];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _DWORD v68[33];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;

  v49 = 0;
  v50 = 0;
  v52 = 0;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v61 = 0;
  v63 = 0;
  v62 = 0;
  v64 = 0;
  v66 = 0;
  v65 = 0;
  v67 = 0;
  v68[32] = 0;
  LOBYTE(v69) = 0;
  v72 = 0;
  memset(v68, 0, 28);
  memset(&v68[8], 0, 28);
  memset(&v68[16], 0, 28);
  memset(&v68[24], 0, 28);
  v48[0] = 0;
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v7 = v49;
  v6 = v50;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 2);
  if (v48[0] <= (_DWORD *)v8)
  {
    if (v48[0] < (_DWORD *)v8)
    {
      v6 = v49 + 12 * (uint64_t)v48[0];
      v50 = v6;
    }
  }
  else
  {
    sub_20FE00A14(&v49, (unint64_t)v48[0] - v8);
    v7 = v49;
    v6 = v50;
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      v10 = v7 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v10 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v7 = v10 + 4;
    }
    while (v7 != v9);
  }
  v48[0] = (_DWORD *)&v52 + 1;
  sub_20FE0A788(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v12 = v53;
  v11 = v54;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2);
  if (v48[0] <= (_DWORD *)v13)
  {
    if (v48[0] < (_DWORD *)v13)
    {
      v11 = v53 + 12 * (uint64_t)v48[0];
      v54 = v11;
    }
  }
  else
  {
    sub_20FE00A14(&v53, (unint64_t)v48[0] - v13);
    v12 = v53;
    v11 = v54;
  }
  if (v11 != v12)
  {
    v14 = v11;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
      v15 = v12 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v15 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v12 = v15 + 4;
    }
    while (v12 != v14);
  }
  v48[0] = (_DWORD *)&v56 + 1;
  sub_20FE0A788(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v17 = v57;
  v16 = v58;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2);
  if (v48[0] <= (_DWORD *)v18)
  {
    if (v48[0] < (_DWORD *)v18)
    {
      v16 = v57 + 12 * (uint64_t)v48[0];
      v58 = v16;
    }
  }
  else
  {
    sub_20FE00A14(&v57, (unint64_t)v48[0] - v18);
    v17 = v57;
    v16 = v58;
  }
  if (v16 != v17)
  {
    v19 = v16;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17);
      v20 = v17 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v20 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v17 = v20 + 4;
    }
    while (v17 != v19);
  }
  v48[0] = (_DWORD *)&v60 + 1;
  sub_20FE0A788(a1, v48);
  v48[0] = (_DWORD *)(v62 - v61);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v21 = v62;
  v22 = v61;
  if (v48[0] <= (_DWORD *)(v62 - v61))
  {
    if (v48[0] < (_DWORD *)(v62 - v61))
    {
      v21 = &v61[(unint64_t)v48[0]];
      v62 = &v61[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v61, (size_t)v48[0] - (v62 - v61));
    v22 = v61;
    v21 = v62;
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v48[0] = (_DWORD *)&v64 + 1;
  sub_20FE0A788(a1, v48);
  v48[0] = (_DWORD *)(v66 - v65);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v24 = v66;
  v25 = v65;
  if (v48[0] <= (_DWORD *)(v66 - v65))
  {
    if (v48[0] < (_DWORD *)(v66 - v65))
    {
      v24 = &v65[(unint64_t)v48[0]];
      v66 = &v65[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_20FE00E0C((uint64_t)&v65, (size_t)v48[0] - (v66 - v65));
    v25 = v65;
    v24 = v66;
  }
  if (v24 != v25)
  {
    v26 = (char *)(v24 - v25);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v25++);
      --v26;
    }
    while (v26);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v27 = *(_QWORD *)&v68[3];
  v28 = *(_QWORD *)&v68[1];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2);
  if (v48[0] <= (_DWORD *)v29)
  {
    if (v48[0] < (_DWORD *)v29)
    {
      v27 = *(_QWORD *)&v68[1] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[3] = v27;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v68[1], (unint64_t)v48[0] - v29);
    v28 = *(_QWORD *)&v68[1];
    v27 = *(_QWORD *)&v68[3];
  }
  if (v27 != v28)
  {
    v30 = v27;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v28);
      v31 = v28 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v31 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v28 = v31 + 4;
    }
    while (v28 != v30);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v32 = *(_QWORD *)&v68[11];
  v33 = *(_QWORD *)&v68[9];
  v34 = (uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3;
  if (v48[0] <= (_DWORD *)v34)
  {
    if (v48[0] < (_DWORD *)v34)
    {
      v32 = *(_QWORD *)&v68[9] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[11] = v32;
    }
  }
  else
  {
    sub_20FE014BC((uint64_t)&v68[9], (unint64_t)v48[0] - v34);
    v33 = *(_QWORD *)&v68[9];
    v32 = *(_QWORD *)&v68[11];
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v33);
      v36 = v33 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v36);
      v33 = v36 + 4;
    }
    while (v33 != v35);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v37 = *(_QWORD *)&v68[19];
  v38 = *(_QWORD *)&v68[17];
  v39 = (uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3;
  if (v48[0] <= (_DWORD *)v39)
  {
    if (v48[0] < (_DWORD *)v39)
    {
      v37 = *(_QWORD *)&v68[17] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[19] = v37;
    }
  }
  else
  {
    sub_20FE017F4((uint64_t)&v68[17], (unint64_t)v48[0] - v39);
    v38 = *(_QWORD *)&v68[17];
    v37 = *(_QWORD *)&v68[19];
  }
  if (v37 != v38)
  {
    v40 = v37;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v38);
      v41 = v38 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v41);
      v38 = v41 + 4;
    }
    while (v38 != v40);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v42 = *(_QWORD *)&v68[27];
  v43 = *(_QWORD *)&v68[25];
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2);
  if (v48[0] <= (_DWORD *)v44)
  {
    if (v48[0] < (_DWORD *)v44)
    {
      v42 = *(_QWORD *)&v68[25] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[27] = v42;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)&v68[25], (unint64_t)v48[0] - v44);
    v43 = *(_QWORD *)&v68[25];
    v42 = *(_QWORD *)&v68[27];
  }
  if (v42 != v43)
  {
    v45 = v42;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v43);
      v46 = v43 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v46 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v43 = v46 + 4;
    }
    while (v43 != v45);
  }
  if (a3 >= 2)
  {
    v73 = 0;
    (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, &v73);
    if (v73)
    {
      if (!v72)
      {
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 1;
      }
      LODWORD(v48[0]) = 1;
      (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 104))(a1, v48);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v69);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v69 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v70);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v70 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v71 + 4);
    }
    else if (v72)
    {
      v72 = 0;
    }
  }
  sub_20FE01F64((uint64_t)v48, (uint64_t)&v49);
  sub_20FE020A8(a2, (uint64_t)v48);
  sub_20FDE1900((uint64_t *)v48);
  return sub_20FE0283C(&v49);
}

void sub_20FE09DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20FE0283C(&a58);
  _Unwind_Resume(a1);
}

void sub_20FE09EC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;

  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 2);
  if (v47 <= v8)
  {
    if (v47 < v8)
    {
      v6 = v7 + 12 * v47;
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)a2, v47 - v8);
    v7 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 8);
      v7 += 12;
    }
    while (v7 != v9);
  }
  v47 = a2 + 32;
  sub_20FE0A788((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2);
  if (v47 <= v12)
  {
    if (v47 < v12)
    {
      v10 = v11 + 12 * v47;
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 40), v47 - v12);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 8);
      v11 += 12;
    }
    while (v11 != v13);
  }
  v47 = a2 + 72;
  sub_20FE0A788((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v15 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 2);
  if (v47 <= v16)
  {
    if (v47 < v16)
    {
      v14 = v15 + 12 * v47;
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_20FE00A14((uint64_t *)(a2 + 80), v47 - v16);
    v15 = *(_QWORD *)(a2 + 80);
    v14 = *(_QWORD *)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 8);
      v15 += 12;
    }
    while (v15 != v17);
  }
  v47 = a2 + 112;
  sub_20FE0A788((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v19 = *(char **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (v47 <= v18 - v19)
  {
    if (v47 < v18 - v19)
    {
      v18 = &v19[v47];
      *(_QWORD *)(a2 + 128) = &v19[v47];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 120, v47 - (v18 - v19));
    v19 = *(char **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  if (v18 != v19)
  {
    v20 = (char *)(v18 - v19);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v19++);
      --v20;
    }
    while (v20);
  }
  v47 = a2 + 152;
  sub_20FE0A788((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v22 = *(char **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (v47 <= v21 - v22)
  {
    if (v47 < v21 - v22)
    {
      v21 = &v22[v47];
      *(_QWORD *)(a2 + 168) = &v22[v47];
    }
  }
  else
  {
    sub_20FE00E0C(a2 + 160, v47 - (v21 - v22));
    v22 = *(char **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v25 = *(_QWORD *)(a2 + 192);
  v24 = *(_QWORD *)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 2);
  if (v47 <= v26)
  {
    if (v47 < v26)
    {
      v24 = v25 + 12 * v47;
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 192), v47 - v26);
    v25 = *(_QWORD *)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
      v25 += 12;
    }
    while (v25 != v27);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v29 = *(_QWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (v47 <= v30)
  {
    if (v47 < v30)
    {
      v28 = v29 + 8 * v47;
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_20FE014BC(a2 + 224, v47 - v30);
    v29 = *(_QWORD *)(a2 + 224);
    v28 = *(_QWORD *)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29 + 4);
      v29 += 8;
    }
    while (v29 != v31);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v33 = *(_QWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (v47 <= v34)
  {
    if (v47 < v34)
    {
      v32 = v33 + 8 * v47;
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_20FE017F4(a2 + 256, v47 - v34);
    v33 = *(_QWORD *)(a2 + 256);
    v32 = *(_QWORD *)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33 + 4);
      v33 += 8;
    }
    while (v33 != v35);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v37 = *(_QWORD *)(a2 + 288);
  v36 = *(_QWORD *)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 2);
  if (v47 <= v38)
  {
    if (v47 < v38)
    {
      v36 = v37 + 12 * v47;
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_20FE01160((uint64_t *)(a2 + 288), v47 - v38);
    v37 = *(_QWORD *)(a2 + 288);
    v36 = *(_QWORD *)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 8);
      v37 += 12;
    }
    while (v37 != v39);
  }
  v46 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, &v46);
  if (v46)
  {
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    v40 = *(_DWORD *)(a1 + 8);
    LODWORD(v47) = 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
    if (v40 >= 1)
    {
      if (v40 == 2)
      {
        if (v47 >= 2)
        {
          LODWORD(v47) = 2;
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
          v41 = v47;
          if (v47 >= 3)
          {
            sub_20FE019EC();
            sub_20E9F5C70((std::string *)&xmmword_254A6C6C8, v41, 2u);
          }
          goto LABEL_75;
        }
      }
      else if (v47 > 1)
      {
LABEL_75:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 320);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 324);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 328);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 332);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 336);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 340);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        goto LABEL_77;
      }
    }
    sub_20FE0A93C(a1, a2 + 320, v47);
  }
  else if (*(_BYTE *)(a2 + 344))
  {
    *(_BYTE *)(a2 + 344) = 0;
  }
LABEL_77:
  if (a3 >= 4)
  {
    v47 = a2 + 348;
    sub_20FE0A788((_BYTE *)a1, (_DWORD **)&v47);
    v47 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
    v43 = *(_QWORD *)(a2 + 352);
    v42 = *(_QWORD *)(a2 + 360);
    v44 = (v42 - v43) >> 2;
    if (v47 <= v44)
    {
      if (v47 < v44)
      {
        v42 = v43 + 4 * v47;
        *(_QWORD *)(a2 + 360) = v42;
      }
    }
    else
    {
      sub_20FE01D5C(a2 + 352, v47 - v44);
      v43 = *(_QWORD *)(a2 + 352);
      v42 = *(_QWORD *)(a2 + 360);
    }
    if (v42 != v43)
    {
      v45 = 4 * ((v42 - v43) >> 2);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v43);
        v43 += 4;
        v45 -= 4;
      }
      while (v45);
    }
  }
}

void sub_20FE0A788(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20FF41698((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FE0A8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n64 sub_20FE0A93C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n64 result;
  __int128 v6;
  int32x2_t v7;
  _OWORD v8[2];

  if (a3 < 2)
  {
    memset(v8, 0, 24);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 4);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 8);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 128))(a1, (unint64_t)v8 | 0xC);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, &v8[1]);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v8[1] + 4);
    v6 = v8[0];
    v7 = *(int32x2_t *)((char *)v8 + 12);
    HIDWORD(v6) = HIDWORD(v8[0]);
    *(_OWORD *)a2 = v6;
    result.n64_u32[0] = vdup_lane_s32(v7, 1).u32[0];
    result.n64_u32[1] = DWORD1(v8[1]);
    *(__n64 *)(a2 + 16) = result;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  }
  return result;
}

_QWORD *sub_20FE0AAB8(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24CA083A8;
  v7[1] = v5;
  v7[2] = v6;
  sub_20EB09F3C((uint64_t)(v7 + 4), a3);
  *v7 = &off_24CA08358;
  *a1 = &off_24CA0C0E8;
  a1[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_20FE0AB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE0ABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  sub_20E86665C(v10);
  MEMORY[0x212BC6398](v9, 0x10B3C40E92279A6);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE0ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE0ABF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA083A8;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE0AC68(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA083A8;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE0ACE0(float ***a1, float ***lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0AF30, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20FF3DFE4(a1 + 1, (float ***)(result + 8));
  }
  return result;
}

void sub_20FE0AD44(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE0BE18();
  sub_20FE0ADF8(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE0ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE0ADF8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A555F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A555F8))
  {
    v4 = sub_20FE0BC1C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A555E0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A555F0 = *(_QWORD *)(v9 - 8);
      xmmword_254A555E0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A555E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A555F8);
  }
  return sub_20FE0C1D8(&xmmword_254A555E0, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_20FE0AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A555F8);
  _Unwind_Resume(a1);
}

void sub_20FE0AF28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A555F8);
  _Unwind_Resume(a1);
}

void sub_20FE0AF40(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 7;
}

void sub_20FE0AF6C(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 7, a2);
}

_QWORD *sub_20FE0AFA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA083A8;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE0B01C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA083A8;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE0B094(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE0B6B8();
  return sub_20FE0B1E8(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FE0B0EC(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE0B414((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE0B184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE0B1BC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE0B1E8(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE0B414((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE0B384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0B414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF3E524((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE0B664(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE0B688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE0B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE0B6B8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A554B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A554B8))
    return &xmmword_254A554A0;
  v2 = sub_20FE0B794();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A554A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A554B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A554A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A554A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A554B8);
  return &xmmword_254A554A0;
}

void sub_20FE0B77C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A554B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE0B794()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A554D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A554D8))
    return &stru_254A554C0;
  sub_20FE0BA38((uint64_t)__p);
  sub_20FE0B884((char *)__p, &stru_254A554C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A554C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A554D8);
  return &stru_254A554C0;
}

void sub_20FE0B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A554D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A554D8);
  _Unwind_Resume(a1);
}

void sub_20FE0B884(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE0BC1C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE0B9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE0BA38(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55558))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TriMesh>]", qword_254A55540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55540, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55558);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55578);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55578))
  {
    v5 = sub_20E8A2354(qword_254A55540, "<", 0);
    sub_20E89FC08(qword_254A55540, 0, v5, qword_254A55560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55578);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55598);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55598))
  {
    sub_21023CD84((uint64_t)qword_254A55560, (uint64_t)&xmmword_254A55580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55580, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55598);
  }
  if (byte_254A55597 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55580, *((unint64_t *)&xmmword_254A55580 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55580;
    *(_QWORD *)(a1 + 16) = unk_254A55590;
  }
}

void sub_20FE0BBD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55598);
  _Unwind_Resume(a1);
}

void sub_20FE0BBEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55578);
  _Unwind_Resume(a1);
}

void sub_20FE0BC04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55558);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE0BC1C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A554F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A554F8))
    return &xmmword_254A554E0;
  v2 = (char *)sub_20FE0BCF8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A554E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A554F0 = *((_QWORD *)v2 + 2);
    xmmword_254A554E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A554E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A554F8);
  return &xmmword_254A554E0;
}

void sub_20FE0BCE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A554F8);
  _Unwind_Resume(a1);
}

void *sub_20FE0BCF8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55518);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55518))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TriMesh]", qword_254A55500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55500, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55518);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55538);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55538))
    return &unk_254A55520;
  sub_21023CD84((uint64_t)qword_254A55500, (uint64_t)&unk_254A55520);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55520, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55538);
  return &unk_254A55520;
}

void sub_20FE0BDE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55538);
  _Unwind_Resume(a1);
}

void sub_20FE0BE00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55518);
  _Unwind_Resume(a1);
}

std::string *sub_20FE0BE18()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A555B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A555B8))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE0BC1C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FE0C0E0();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A555A0, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A555A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A555B8);
        return &stru_254A555A0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A555A0;
}

void sub_20FE0BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A555B8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A555B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE0C0E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A555D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A555D8))
    return &stru_254A555C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 7U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A555C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A555C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A555D8);
  return &stru_254A555C0;
}

void sub_20FE0C198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A555D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A555D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE0C1D8(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE0B414((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE0C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0C330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0C344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0C358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0C36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FE0C380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;
  _QWORD v9[14];
  _DWORD *v10;
  uint64_t v11;
  _QWORD v12[14];
  _DWORD *v13;
  uint64_t *v14;
  char v15;

  v12[0] = a1;
  v12[1] = a1 + 32;
  v12[2] = a1 + 40;
  v12[3] = a1 + 72;
  v12[4] = a1 + 80;
  v12[5] = a1 + 112;
  v12[6] = a1 + 120;
  v12[7] = a1 + 152;
  v12[8] = a1 + 160;
  v12[9] = a1 + 192;
  v12[10] = a1 + 224;
  v12[11] = a1 + 256;
  v12[12] = a1 + 288;
  v12[13] = a1 + 320;
  v13 = (_DWORD *)(a1 + 348);
  v14 = (uint64_t *)(a1 + 352);
  v9[0] = a2;
  v9[1] = a2 + 32;
  v9[2] = a2 + 40;
  v9[3] = a2 + 72;
  v9[4] = a2 + 80;
  v9[5] = a2 + 112;
  v9[6] = a2 + 120;
  v9[7] = a2 + 152;
  v9[8] = a2 + 160;
  v9[9] = a2 + 192;
  v9[10] = a2 + 224;
  v9[11] = a2 + 256;
  v9[12] = a2 + 288;
  v9[13] = a2 + 320;
  v10 = (_DWORD *)(a2 + 348);
  v11 = a2 + 352;
  if (!sub_20FE0C4F4((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9))
    return 0;
  if (*v13 != *v10)
    return 0;
  v3 = *v14;
  v2 = v14[1];
  v4 = *(float **)v11;
  if (v2 - *v14 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

BOOL sub_20FE0C4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL8 result;
  _BOOL4 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;

  if (!sub_20FE0C6AC((uint64_t)&v26, a2, a3))
    return 0;
  v6 = **(float ***)(a2 + 88);
  v5 = *(float **)(*(_QWORD *)(a2 + 88) + 8);
  v7 = **(_QWORD **)(a3 + 88);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    v8 = (float *)(v7 + 4);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v6 == v9;
      if (*v6 == v9)
        v10 = v6[1] == *v8;
      if (!v10)
        return 0;
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v5);
  }
  v12 = **(_QWORD **)(a2 + 96);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8);
  v13 = **(_QWORD **)(a3 + 96);
  if (v11 - v12 != *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8) - v13)
    return 0;
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 == *(_QWORD *)v13 && *(_DWORD *)(v12 + 8) == (unint64_t)*(unsigned int *)(v13 + 8))
    {
      v12 += 12;
      v13 += 12;
      if (v12 == v11)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a3 + 104);
  if (*(_BYTE *)(v15 + 24))
    v17 = *(_BYTE *)(v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (*(_BYTE *)(v15 + 24) != 0) == (*(_BYTE *)(v16 + 24) != 0);
  v19 = *(float *)v15 == *(float *)v16;
  if (*(float *)v15 == *(float *)v16)
  {
    v20 = *(float *)(v15 + 4);
    v21 = *(float *)(v16 + 4);
    v19 = v20 == v21;
    if (v20 == v21)
      v19 = *(float *)(v15 + 8) == *(float *)(v16 + 8);
  }
  if (!v19)
    return 0;
  v22 = *(float *)(v15 + 12);
  v23 = *(float *)(v16 + 12);
  result = v22 == v23;
  if (v22 == v23)
  {
    v24 = *(float *)(v15 + 16);
    v25 = *(float *)(v16 + 16);
    result = v24 == v25;
    if (v24 == v25)
      return *(float *)(v15 + 20) == *(float *)(v16 + 20);
  }
  return result;
}

BOOL sub_20FE0C6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  char v17;

  if (!sub_20FE0C79C((uint64_t)&v17, a2, a3))
    return 0;
  v6 = **(_QWORD **)(a2 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8);
  v7 = **(_QWORD **)(a3 + 72);
  if (v5 - v6 != *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 == *(_QWORD *)v7 && *(_DWORD *)(v6 + 8) == (unint64_t)*(unsigned int *)(v7 + 8))
    {
      v6 += 12;
      v7 += 12;
      if (v6 == v5)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v10 = **(char ***)(a2 + 80);
  v9 = *(char **)(*(_QWORD *)(a2 + 80) + 8);
  v11 = **(uint64_t ***)(a3 + 80);
  if (v9 - v10 != *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) - (_QWORD)v11)
    return 0;
  if (v10 == v9)
    return 1;
  do
  {
    v13 = *(_QWORD *)v10;
    v10 += 8;
    v12 = v13;
    v14 = *v11++;
    result = v12 == v14;
  }
  while (v12 == v14 && v10 != v9);
  return result;
}

BOOL sub_20FE0C79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v12;

  if (sub_20FE0C868((uint64_t)&v12, a2, (uint64_t **)a3)
    && **(_DWORD **)(a2 + 40) == **(_DWORD **)(a3 + 40)
    && (v5 = *(_QWORD *)(a2 + 48),
        v6 = *(_QWORD *)(a3 + 48),
        v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5,
        v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 56) == **(_DWORD **)(a3 + 56)
    && (v8 = *(_QWORD *)(a2 + 64),
        v9 = *(_QWORD *)(a3 + 64),
        v10 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 == *(_QWORD *)(v9 + 8) - *(_QWORD *)v9))
  {
    return memcmp(*(const void **)v8, *(const void **)v9, v10) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_20FE0C868(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  _BOOL8 result;
  BOOL v23;
  float v24;
  float v25;
  float v26;

  v4 = **(float ***)a2;
  v3 = *(float **)(*(_QWORD *)a2 + 8);
  v5 = **a3;
  if ((char *)v3 - (char *)v4 != (*a3)[1] - v5)
    return 0;
  if (v4 != v3)
  {
    v6 = (float *)(v5 + 4);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v4 == v7;
      if (*v4 == v7)
      {
        v9 = v4[1];
        v8 = v9 == *v6;
        if (v9 == *v6)
          v8 = v4[2] == v6[1];
      }
      if (!v8)
        return 0;
      v4 += 3;
      v6 += 3;
    }
    while (v4 != v3);
  }
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1])
    return 0;
  v11 = **(float ***)(a2 + 16);
  v10 = *(float **)(*(_QWORD *)(a2 + 16) + 8);
  v12 = *a3[2];
  if ((char *)v10 - (char *)v11 != a3[2][1] - v12)
    return 0;
  if (v11 != v10)
  {
    v13 = (float *)(v12 + 4);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v11 == v14;
      if (*v11 == v14)
      {
        v16 = v11[1];
        v15 = v16 == *v13;
        if (v16 == *v13)
          v15 = v11[2] == v13[1];
      }
      if (!v15)
        return 0;
      v11 += 3;
      v13 += 3;
    }
    while (v11 != v10);
  }
  if (**(_DWORD **)(a2 + 24) != *(_DWORD *)a3[3])
    return 0;
  v18 = **(_QWORD **)(a2 + 32);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v19 = *a3[4];
  if (v17 - v18 != a3[4][1] - v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 12;
  v21 = (float *)(v19 + 4);
  do
  {
    v24 = *(float *)(v20 - 12);
    v25 = *(v21 - 1);
    result = v24 == v25;
    if (v24 == v25)
    {
      v26 = *(float *)(v20 - 8);
      result = v26 == *v21;
      if (v26 == *v21)
        result = *(float *)(v20 - 4) == v21[1];
    }
    v23 = !result || v20 == v17;
    v20 += 12;
    v21 += 3;
  }
  while (!v23);
  return result;
}

void sub_20FE0CA1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD244(a1, &v16);
  sub_20FDE4E60(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_20FDF9A1C((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_20FDF9A1C((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_2101FF120(a1, &v14);
}

void sub_20FE0CBC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;

  v6 = a2 + 16;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v22 = (uint64_t *)(v7 + 16);
    sub_20E9F3D4C(&v22, 6u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v22, v7 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20FDE75BC(a1, v6, 6u);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  sub_20FDFB6F4((uint64_t)&v22, a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
    {
      v22 = (uint64_t *)(v14 + 16);
      sub_20E9F472C(&v22, v13);
    }
    else
    {
      sub_20E9F4A34();
    }
    v15 = *(const void ***)(a2 + 576);
    v16 = *(const void ***)(a2 + 584);
    v17 = ((char *)v16 - (char *)v15) / 24;
    v18 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v18 + 40))
    {
      v22 = (uint64_t *)(v18 + 16);
      if (v16 != v15)
      {
        v19 = 24 * v17;
        do
        {
          sub_20E9F4E1C((uint64_t)&v23, &v22, v15);
          v15 += 3;
          v19 -= 24;
        }
        while (v19);
      }
    }
    else if (v16 != v15)
    {
      v20 = v18 + 8;
      v21 = 24 * v17;
      do
      {
        sub_20E9F5254((uint64_t)&v22, v20, (uint64_t)v15);
        v15 += 3;
        v21 -= 24;
      }
      while (v21);
    }
  }
}

void sub_20FE0CDB8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB154(a1, &v16);
  sub_20FDE8860(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_20FDFD014((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_20FDFD014((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_2101FD0E0(a1, &v14);
}

void sub_20FE0CF64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[48];

  v6 = a2 + 16;
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v7, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20FDE9AB4(a1, v6, 6u);
  v8 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v9 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v9, (uint64_t)v21, 1);
  }
  v10 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v8;
  sub_20E86A980(v10, (uint64_t)v21, 1);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v12, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20FDFA3C8((uint64_t)v21, a2 + 192);
  sub_20FDFDAC0(a1, v21, 4u);
  sub_20FDE1900(v21);
  v13 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v14, (uint64_t)v21, 1);
  }
  v15 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v13;
  sub_20E86A980(v15, (uint64_t)v21, 1);
  v16 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v16;
  if (a3 >= 3)
  {
    if (v16)
    {
      v17 = *(_QWORD **)(a1 + 24);
      LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v17, (uint64_t)v21, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a2 + 576);
    v19 = *(_QWORD *)(a2 + 584) - v18;
    if (v19)
    {
      v20 = 24 * (v19 / 24);
      do
      {
        sub_20E9E713C(a1, v18);
        v18 += 24;
        v20 -= 24;
      }
      while (v20);
    }
  }
}

void sub_20FE0D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE1900(&a9);
  _Unwind_Resume(a1);
}

void *sub_20FE0D184(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t __src;
  uint64_t v21;

  v6 = a2 + 16;
  LODWORD(__src) = 6;
  v7 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v8 = __src;
  sub_2100B6A04((_QWORD *)a1);
  sub_20FDEA96C(a1, v6, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  result = sub_20FDFE76C(a1, a2 + 192);
  if (a3 >= 3)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&__src, 8);
    v11 = *(_QWORD *)(a2 + 576);
    v12 = *(_QWORD *)(a2 + 584) - v11;
    if (v12)
    {
      v13 = 24 * (v12 / 24);
      do
      {
        v16 = *(unsigned __int8 *)(v11 + 23);
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v11 + 8);
        __src = v16;
        sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
        if (*(char *)(v11 + 23) < 0)
        {
          v15 = *(char **)v11;
          v14 = *(_QWORD *)(v11 + 8);
          if (*(_QWORD *)v11)
            v17 = 1;
          else
            v17 = v14 == 0;
          if (!v17)
          {
            v18 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
            v15 = 0;
            if (v18)
              abort();
          }
        }
        else
        {
          v14 = *(unsigned __int8 *)(v11 + 23);
          v15 = (char *)v11;
        }
        result = sub_2100B8FD4(v7, *(char **)(a1 + 32), v15, &v15[v14], v14);
        v11 += 24;
        v13 -= 24;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t *sub_20FE0D388(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = a2 + 16;
  v7 = *((_DWORD *)a1 + 2);
  LODWORD(v13) = 6;
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
  v8 = v13;
  if (v7 < 1)
  {
    sub_20FDEB904((uint64_t)a1, v6, v13);
  }
  else
  {
    if (v7 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
    }
    (*(void (**)(_QWORD *))(*a1 + 16))(a1);
    sub_20FDEB904((uint64_t)a1, v6, v8);
    (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  }
  v13 = a1[1];
  result = sub_20FDFEF3C((int *)&v13, (uint64_t)a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v13);
    v10 = *(_QWORD *)(a2 + 576);
    v11 = *(_QWORD *)(a2 + 584) - v10;
    if (v11)
    {
      v12 = 24 * (v11 / 24);
      do
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 144))(a1, v10);
        v10 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
  return result;
}

BOOL sub_20FE0D4FC(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_20FDECB7C((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_20FDFF834(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_20FDFF834(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_210201710((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

BOOL sub_20FE0D618(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_20FDF1718((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_20FE0575C(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_20FE0575C(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_21020097C((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

double sub_20FE0D734(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double result;
  char v12;
  char v13;
  char v14;
  char v15;
  void *__p;
  uint64_t v17;
  char v18;

  v6 = a2 + 16;
  LODWORD(__p) = 6;
  sub_20E9E840C(a1, &__p);
  v7 = __p;
  if (__p >= 6)
    v8 = 6;
  else
    v8 = __p;
  if (v8 < 3)
  {
    sub_20FDF3288((uint64_t)&__p, a1, v6, v8);
    if (v7 < 3)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20E9E9FEC(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_26:
          v13 = 0;
          if (v18 < 0)
            goto LABEL_29;
          goto LABEL_15;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_26;
      }
      v13 = 1;
      if (v18 < 0)
LABEL_29:
        operator delete(__p);
LABEL_15:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20FDF3478(a1, v6, v8);
  if (v7 >= 3)
    goto LABEL_8;
LABEL_9:
  LODWORD(__p) = 4;
  sub_20E9E840C(a1, &__p);
  v9 = __p;
  if (__p >= 4)
    v10 = 4;
  else
    v10 = __p;
  if (v10 < 3)
  {
    sub_20FE06E7C((uint64_t)&__p, a1, (uint64_t *)(a2 + 192), v10);
    if (v9 < 3)
      goto LABEL_32;
LABEL_31:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_32;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_32;
      sub_20E9E9FEC(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_46:
          v15 = 0;
          if (v18 < 0)
            goto LABEL_49;
          goto LABEL_35;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_46;
      }
      v15 = 1;
      if (v18 < 0)
LABEL_49:
        operator delete(__p);
LABEL_35:
      if (*(_BYTE *)(a1 + 131))
        v14 = 0;
      else
        v14 = v15;
      if ((v14 & 1) == 0)
        goto LABEL_32;
    }
  }
  sub_20FE076F4(a1, a2 + 192, v10);
  if (v9 >= 3)
    goto LABEL_31;
LABEL_32:
  if (a3 >= 3)
    *(_QWORD *)&result = sub_20FDF3DC4(a1, (char **)(a2 + 576)).n128_u64[0];
  return result;
}

void sub_20FE0D988(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11[3];
  unsigned int v12;

  v6 = a2 + 16;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v12 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a1, &v12);
  if (v11[0] < 1)
  {
    if (v12 < 3)
      sub_20FDF69C0((uint64_t)&v12, a1, v6, v12);
    else
      sub_20FDF6C34(a1, v6, v12);
  }
  else
  {
    sub_20FDF63C8(v11, a1, v6, v12);
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v9 = v11[0];
  v12 = 4;
  (*(void (**)(uint64_t, unsigned int *))(v8 + 104))(a1, &v12);
  if (v9 >= 1)
  {
    sub_20FE090B8(v11, (_BYTE *)a1, (uint64_t *)(a2 + 192), v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t *)(a2 + 192);
  if (v12 < 3)
  {
    sub_20FE0952C((_BYTE *)a1, v10, v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  sub_20FE09EC8(a1, (uint64_t)v10, v12);
  if (a3 >= 3)
LABEL_13:
    sub_20FDF76CC(a1, (char **)(a2 + 576));
}

uint64_t sub_20FE0DAB8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24CA08258[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24CA08258[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_20E877AB8();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24CA08258[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24CA08258[v11])(&v13, a2);
}

void sub_20FE0DCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE0DCF8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24CA08258[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24CA08258[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_20E877AB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24CA08258[v9])(&v11, a2);
}

void sub_20FE0DE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE0DEB4(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24CA08258[v3])(&v14);
  sub_20E89F7C4((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24CA08258[v6])(&v14, a2);
  sub_20E89F7C4((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_20E877AB8();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA08258[v7])(&v14, a2);
}

_QWORD *sub_20FE0DFB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C9FACA8;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(v4 + 88) = 1;
  }
  *(_BYTE *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(v4 + 120) = 1;
  }
  *(_BYTE *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(v4 + 208) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v6 = (unsigned __int128 *)(a1 + 192);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 192) = v7;
    *(_BYTE *)(v4 + 208) = 1;
  }
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 248) = 0;
  if (*(_BYTE *)(a1 + 248))
  {
    *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 224);
    *(_QWORD *)(v4 + 240) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_BYTE *)(v4 + 248) = 1;
  }
  *(_QWORD *)v4 = &off_24C9FAC28;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE0E164(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sub_20FE0E180@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20E860C04(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20E860C04(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20FE0E398((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20FE0E32C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FE0E398@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20FDD8130((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20FF1C114(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20FDD8370(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20FE0E544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE0E65C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FE0E778(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE0E760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0E778(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FD244(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FD244(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2101FAC64(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20EB07D94((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20FDE57D0(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20EB07D94((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20FDE58D8((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2101FAC64(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20EB07D94((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2101FD70C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2101FAC64(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20EB07D94((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2101FD70C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2101FAC64(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20EB07D94((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2101FD70C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2101FAC64(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20EB07D94((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_2101FF120(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2101FD70C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FE0ED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE0ED58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE0ED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE0ED88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE0EDA0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20E8ADB20((char *)(a1 + 144), *(__int128 **)(a2 + 144), *(__int128 **)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20FE0EF10(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE0EFCC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE0F0E8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE0F0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0F0E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FD244(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FD244(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2101FAC64(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = (uint64_t)v17;
    sub_20EB07D94((void ***)&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_20FDE57D0(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = (uint64_t)v23;
    sub_20EB07D94((void ***)&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_20FDE58D8((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_2101FAC64(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = (uint64_t)v27;
    sub_20EB07D94((void ***)&v29, v26);
    return;
  }
  sub_2101FD70C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FE0F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE0F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE0F464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE0F47C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20E8ADB20((char *)(a1 + 144), *(__int128 **)(a2 + 144), *(__int128 **)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20FE0F5EC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE0F6A8(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_20FE0FEA4(a1, &v13);
  sub_20FE0F7B4(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE0F794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE0F7B4(int a1, uint64_t a2, uint64_t a3)
{
  void **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  void **v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  void **v56;

  switch(a1)
  {
    case 0:
      v4 = (void **)*(unsigned __int8 *)sub_21022FC14(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = (void **)*(unsigned __int16 *)sub_21022FE6C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_21022FF54(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_2101FD244(a3, &v55);
      return;
    case 3:
      v4 = *(void ***)sub_21023003C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_2101FAC64(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = (void **)*(char *)sub_210230124(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = (void **)*(__int16 *)sub_21023020C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = (void **)*(int *)sub_2102302F4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(void ***)sub_2102303DC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_2101FAC64(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = (void **)*((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_20EB07D94(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_2102304C4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_2101FD320(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_2102305AC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_2101FD518(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE0FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE0FEA4(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FE0FFAC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FE0FF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE0FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0FF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE0FFAC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_21022F254((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE101FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE10220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FE10250(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FDE76D8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE10354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE1036C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE10488(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE10470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE10488(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_20E9F3D4C(&v19, 2u);
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20E9F45EC();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20E9F3FC0((uint64_t)&v19, v6 + 8);
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v19 = (uint64_t *)(v7 + 16);
  sub_20E9F40B0(&v19, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v19 = (uint64_t *)(v9 + 16);
    sub_20E9F3164(&v19, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v8;
  }
  else
  {
    LOBYTE(v19) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v19 = (uint64_t *)(v17 + 16);
      sub_20E9F3164(&v19, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v19) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v19 = (uint64_t *)(v15 + 16);
    sub_20E9F3164(&v19, 1);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_19;
LABEL_25:
    sub_20E9F5254((uint64_t)&v19, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
    goto LABEL_26;
  }
  LOBYTE(v19) = 1;
  std::ostream::write();
  v16 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v16 + 40))
    goto LABEL_25;
LABEL_19:
  v19 = (uint64_t *)(v16 + 16);
  sub_20E9F4E1C((uint64_t)&v18, &v19, (const void **)(a2 + 24));
  if (a3 < 4)
    return;
LABEL_26:
  sub_20FDE7D48(a1, a2 + 56);
}

void sub_20FE10708(uint64_t a1, char *a2)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[16];
  void *__p;
  void *v12;
  char *v13;
  uint64_t *v14;

  v3 = *a2;
  v10[0] = *a2;
  v10[8] = a2[8];
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v13 = &v7[v6];
    memcpy(v7, v5, v6);
    v12 = v8;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v14 = (uint64_t *)(v9 + 16);
    sub_20E9F3164(&v14, v3);
  }
  else
  {
    if (v3 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v3;
    }
    else
    {
      LOBYTE(v14) = v3;
    }
    std::ostream::write();
  }
  sub_20FE10834(v10[0], (uint64_t)v10, a1);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE10814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20FE10834(int a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _BYTE v28[9];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v4 = (char *)sub_21022FC14(a2 + 8);
      v5 = *v4;
      v6 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v6 + 40))
      {
        *(_QWORD *)v28 = v6 + 16;
        return sub_20E9F3164((uint64_t **)v28, v5);
      }
      if (v5 < 0)
      {
        v28[0] = -52;
        v28[1] = v5;
      }
      else
      {
        v28[0] = *v4;
      }
      return (char *)std::ostream::write();
    case 1:
      v8 = *(unsigned __int16 *)sub_21022FE6C(a2 + 8);
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v28 = v9 + 16;
        return sub_20E9F3668((uint64_t **)v28, v8);
      }
      if (v8 <= 0x7F)
      {
        v28[0] = v8;
        return (char *)std::ostream::write();
      }
      if (v8 > 0xFF)
      {
        v28[0] = -51;
        *(_WORD *)&v28[1] = __rev16(v8);
      }
      else
      {
        v28[0] = -52;
        v28[1] = v8;
      }
      return (char *)std::ostream::write();
    case 2:
      v10 = *(_DWORD *)sub_21022FF54(a2 + 8);
      v11 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v11 + 40))
        return (char *)sub_20E9F3FC0((uint64_t)v28, v11 + 8);
      *(_QWORD *)v28 = v11 + 16;
      return sub_20E9F3D4C((uint64_t **)v28, v10);
    case 3:
      v12 = *(_QWORD *)sub_21023003C(a2 + 8);
      v13 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v13 + 40))
        return (char *)sub_20E9F4A34();
      *(_QWORD *)v28 = v13 + 16;
      return sub_20E9F472C((uint64_t **)v28, v12);
    case 5:
      v14 = *(char *)sub_210230124(a2 + 8);
      v15 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
        *(_QWORD *)v28 = v15 + 16;
        return sub_20E9F301C((uint64_t **)v28, v14);
      }
      else
      {
        if (v14 > -33)
        {
          v28[0] = v14;
        }
        else
        {
          v28[0] = -48;
          v28[1] = v14;
        }
        return (char *)std::ostream::write();
      }
    case 6:
      v16 = *(_WORD *)sub_21023020C(a2 + 8);
      v17 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v17 + 40))
        return (char *)sub_20E9F356C();
      *(_QWORD *)v28 = v17 + 16;
      return sub_20E9F32A8((uint64_t **)v28, v16);
    case 7:
      v18 = *(_DWORD *)sub_2102302F4(a2 + 8);
      v19 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v19 + 40))
        return (char *)sub_20E9F3C50();
      *(_QWORD *)v28 = v19 + 16;
      return sub_20E9F3834((uint64_t **)v28, v18);
    case 8:
      v20 = *(_QWORD *)sub_2102303DC(a2 + 8);
      v21 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v21 + 40))
        return (char *)sub_20E9F45EC();
      *(_QWORD *)v28 = v21 + 16;
      return sub_20E9F40B0((uint64_t **)v28, v20);
    case 11:
      v22 = *(_DWORD *)sub_2102304C4(a2 + 8);
      LODWORD(v26) = v22;
      v23 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        *(_QWORD *)v28 = v23 + 16;
        return (char *)sub_20E9F4B2C((uint64_t)&v27, (uint64_t **)v28, (unsigned int *)&v26);
      }
      else
      {
        v28[0] = -54;
        *(_DWORD *)&v28[1] = bswap32(v22);
        return (char *)std::ostream::write();
      }
    case 12:
      v24 = *(_QWORD *)sub_2102305AC(a2 + 8);
      v26 = v24;
      v25 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v28 = v25 + 16;
        return (char *)sub_20E9F4C08((uint64_t)&v27, (uint64_t **)v28, &v26);
      }
      else
      {
        v28[0] = -53;
        *(_QWORD *)&v28[1] = bswap64(v24);
        return (char *)std::ostream::write();
      }
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE10C84(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FE10DA0(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE10D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE10DA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FB154(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FB154(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_2101FA67C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_20EB911C0(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20FDE8FA4(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_20EB911C0(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20FD2A0B8((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2101FA67C(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_20EB911C0(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2101FB61C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2101FA67C(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_20EB911C0(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2101FB61C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2101FA67C(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_20EB911C0(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2101FB61C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2101FA67C(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_20EB911C0(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_2101FD0E0(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2101FB61C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FE11348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE11380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE11398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE113B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE113C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE114E4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE114CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE114E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FB154(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FB154(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = v14;
    v15 = (unsigned __int8 *)sub_2101FA67C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = v17;
    sub_20EB911C0(&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_20FDE8FA4(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = v23;
    sub_20EB911C0(&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_20FD2A0B8((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_2101FA67C(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = v27;
    sub_20EB911C0(&v29, v26);
    return;
  }
  sub_2101FB61C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FE11830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE11848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE11860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FE11878(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_20FE12074(a1, &v13);
  sub_20FE11984(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE11964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE11984(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      v4 = *(unsigned __int8 *)sub_21022FC14(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = *(unsigned __int16 *)sub_21022FE6C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_21022FF54(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_2101FB154(a3, &v55);
      return;
    case 3:
      v4 = *(_QWORD *)sub_21023003C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_2101FA67C(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = *(char *)sub_210230124(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = *(__int16 *)sub_21023020C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = *(int *)sub_2102302F4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(_QWORD *)sub_2102303DC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_2101FA67C(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = *((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_20EB911C0(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_2102304C4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_2101FB230(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_2102305AC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_2101FB428(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE11FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE11FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE11FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE12014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE1202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE12044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE1205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE12074(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FE0FFAC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FE12138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE12154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE12168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE1217C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FE12298(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE12280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE12298(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_20E86A980(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    sub_20E9E713C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_20FDEA058(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
      sub_20E9E713C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    sub_20E9E713C(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  sub_20E9E713C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_20E878290(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_20FDE5DC0(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_20E9E6F58(a1, (unsigned __int8 *)&v25);
  sub_20E9E713C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20FE126FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE12720(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE1283C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE12824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE1283C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a2 + 16);
  sub_20E9E6F58(a1, &v12);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v17 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v10, (uint64_t)&v17, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v18 = v9;
  sub_20E86A980(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    v14 = 1;
    sub_20E9E6F58(a1, &v14);
    sub_20E9E713C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v13 = 0;
    sub_20E9E6F58(a1, &v13);
    if (a3 < 4)
      return;
  }
  sub_20FDEA058(a1, a2 + 56);
}

void sub_20FE12998(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  unsigned __int8 v13;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  v13 = v3;
  sub_20E9E6F58(a1, &v13);
  sub_20FE12A78(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE12A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE12A78(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  switch(a1)
  {
    case 0:
      v12 = *(_BYTE *)sub_21022FC14(a2 + 8);
      sub_20E9E6F58(a3, &v12);
      return;
    case 1:
      sub_21022FE6C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v4 = *(_QWORD **)(a3 + 24);
        v14 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v4, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 2:
      sub_21022FF54(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v5 = *(_QWORD **)(a3 + 24);
        v15 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v5, (uint64_t)&v15, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 3:
      sub_21023003C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v6 = *(_QWORD **)(a3 + 24);
        v16 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 5:
      v13 = *(_BYTE *)sub_210230124(a2 + 8);
      sub_20E9E6D74(a3, &v13);
      return;
    case 6:
      sub_21023020C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v7 = *(_QWORD **)(a3 + 24);
        v17 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v7, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 7:
      sub_2102302F4(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v8 = *(_QWORD **)(a3 + 24);
        v18 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v8, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 8:
      sub_2102303DC(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v9 = *(_QWORD **)(a3 + 24);
        v19 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v9, (uint64_t)&v19, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 11:
      sub_2102304C4(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v10 = *(_QWORD **)(a3 + 24);
        v20 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v10, (uint64_t)&v20, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_28;
    case 12:
      sub_2102305AC(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v11 = *(_QWORD **)(a3 + 24);
        v21 = *(_BYTE *)(a3 + 32);
        sub_20E86A980(v11, (uint64_t)&v21, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
LABEL_28:
      ++*(_QWORD *)(a3 + 40);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE12D3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FDEAA88(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE12E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE12E58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE12F74(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE12F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FE12F74(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  int v14;
  char v15;
  char __src;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (char *)(a2 + 8);
  v14 = 2;
  v7 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v14, &v15, 4);
  sub_2100B6A04((_QWORD *)a1);
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  __src = *(_BYTE *)(a2 + 16);
  sub_2100B8FD4(v7, *(char **)(a1 + 32), &__src, &v17, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = 0;
    result = sub_2100B8FD4(v7, *(char **)(a1 + 32), &v17, &v18, 1);
    if (a3 < 4)
      return result;
    return sub_20FDEB098(a1, (char *)(a2 + 56));
  }
  v18 = 1;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), &v18, (char *)&v19, 1);
  v9 = *(unsigned __int8 *)(a2 + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 32);
  v19 = v9;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&v20, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v10 = *(char **)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (!v10 && v11)
    {
      v13 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
      v10 = 0;
      if (v13)
        abort();
    }
  }
  else
  {
    v10 = (char *)(a2 + 24);
    v11 = *(unsigned __int8 *)(a2 + 47);
  }
  result = sub_2100B8FD4(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
  if (a3 >= 4)
    return sub_20FDEB098(a1, (char *)(a2 + 56));
  return result;
}

void sub_20FE13158(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  char __src;
  uint64_t v14;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  __src = v3;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v14, 1);
  sub_20FE13248(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE13228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20FE13248(int a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _WORD *v5;
  _DWORD *v6;
  uint64_t *v7;
  char *result;
  uint64_t __src;
  uint64_t v10;

  switch(a1)
  {
    case 0:
      v4 = (_BYTE *)sub_21022FC14(a2 + 8);
      goto LABEL_7;
    case 1:
      v5 = (_WORD *)sub_21022FE6C(a2 + 8);
      goto LABEL_9;
    case 2:
      v6 = (_DWORD *)sub_21022FF54(a2 + 8);
      goto LABEL_11;
    case 3:
      v7 = (uint64_t *)sub_21023003C(a2 + 8);
      goto LABEL_13;
    case 5:
      v4 = (_BYTE *)sub_210230124(a2 + 8);
LABEL_7:
      LOBYTE(__src) = *v4;
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 1, 1);
    case 6:
      v5 = (_WORD *)sub_21023020C(a2 + 8);
LABEL_9:
      LOWORD(__src) = *v5;
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 2, 2);
    case 7:
      v6 = (_DWORD *)sub_2102302F4(a2 + 8);
LABEL_11:
      LODWORD(__src) = *v6;
      goto LABEL_15;
    case 8:
      v7 = (uint64_t *)sub_2102303DC(a2 + 8);
LABEL_13:
      __src = *v7;
      goto LABEL_17;
    case 11:
      LODWORD(__src) = *(_DWORD *)sub_2102304C4(a2 + 8);
LABEL_15:
      result = sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 4, 4);
      break;
    case 12:
      __src = *(_QWORD *)sub_2102305AC(a2 + 8);
LABEL_17:
      result = sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&v10, 8);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE133CC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0EDA0((uint64_t)v8, a2);
  sub_20FE134E8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE134D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE134E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_20FDEBF8C((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_20FDEBF8C((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_20E878290(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_20FDE5DC0(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_2103EAF11);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_20FE13A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE13A54(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FE0F47C((uint64_t)v8, a2);
  sub_20FE13B70(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FE13B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE13B70(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  sub_20FDEBF8C((int *)&v6, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    v6 = *(_QWORD *)(a1 + 8);
    sub_20FDEBF8C((int *)&v6, (_BYTE *)a1, a2 + 56);
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
  }
}

void sub_20FE13CA0(_BYTE *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  _BYTE v8[16];
  void *__p;
  void *v10;
  char *v11;
  _BYTE *v12;

  v8[0] = *(_BYTE *)a2;
  v8[8] = *(_BYTE *)(a2 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v11 = &v6[v5];
    memcpy(v6, v4, v5);
    v10 = v7;
  }
  v12 = v8;
  sub_20FE13EEC(a1, &v12);
  sub_20FE13D80(v8[0], (uint64_t)v8, (uint64_t)a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20FE13D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE13D80(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(_BYTE *)sub_21022FC14(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_21022FE6C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 96))(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_21022FF54(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 104))(a3, &v5);
      break;
    case 3:
      v5 = *(_QWORD *)sub_21023003C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 120))(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(_BYTE *)sub_210230124(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 88))(a3, &v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_21023020C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, &v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_2102302F4(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 56))(a3, &v5);
      break;
    case 8:
      v5 = *(_QWORD *)sub_2102303DC(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 72))(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_2102304C4(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 128))(a3, &v5);
      break;
    case 12:
      v5 = *(_QWORD *)sub_2102305AC(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 136))(a3, &v5);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE13EEC(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20FE0FFAC((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20E877AB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20FE13FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE13FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE14010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE14024(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_2101FF7D8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_2100DB048(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_20FE14150((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_20FE14780((uint64_t *)a2, (_BYTE **)&v12);
    sub_20FE142F4(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20FE14150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_20FE14780((uint64_t *)a2, &v15);
  sub_20FE14970(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_20FE142A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20FE142F4(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_210206948(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_210206A28(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE14780(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_21022F328((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE148E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE14970(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB048(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DB190(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_210206948(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2101FFA90((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_210206A28(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE14DFC(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;

  if (a4 < 2)
  {
    sub_20FE14EC8((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v11 = 0;
    sub_20E9ED7B4(a2[6], &v11);
    v7 = v11;
    *a3 = v11;
    sub_20FE1504C(v7, (uint64_t)a2, (uint64_t)a3);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20FE14EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_20E9ED7B4(*(_QWORD *)(a2 + 48), v14);
  v18[0] = v14[0];
  sub_20FE15310(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_20FE15000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20FE1504C(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20E9ED7B4(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20E9ED948(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20E9ED704(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20E9ED898(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20E9EDA2C(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20E9EDD84(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20E9EDF48(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20E9EE078(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE15310(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20E9ED7B4(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20E9ED948(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20E9ED704(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20E9ED898(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20E9EDA2C(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20E9EDD84(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20E9EDF48(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20E9EE078(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE155D4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_2101FF2E8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_2100DA8B0(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_20FE15700((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_20FE15D30((uint64_t *)a2, (_BYTE **)&v12);
    sub_20FE158A4(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20FE15700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_20FE15D30((uint64_t *)a2, &v15);
  sub_20FE15F20(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_20FE15858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20FE158A4(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2102061A0(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_210206280(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE15D30(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_21022F328((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE15E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE15F20(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA8B0(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2100DA9F8(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2102061A0(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2101FF5A0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_210206280(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE163AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_20E9E7AC8(a2, v14);
  v18[0] = v14[0];
  sub_20FE167F8(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_20FE164E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20FE16530(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20E9E7AC8(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20E9E7F64(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20E9E840C(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20E9E88B4(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20E9E7880(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20E9E7D10(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20E9E81B8(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20E9E8660(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20E9E8D84(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20E9E8FD8(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE167F8(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20E9E7AC8(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20E9E7F64(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20E9E840C(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20E9E88B4(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20E9E7880(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20E9E7D10(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20E9E81B8(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20E9E8660(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20E9E8D84(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20E9E8FD8(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE16AC0(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;
  char v15;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_8;
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 > 1)
  {
    sub_2100B6EE0(a2);
    v10 = a2[6];
    if (a2[7] > v10)
    {
      v11 = *(unsigned __int8 *)(a2[3] + v10);
      a2[6] = v10 + 1;
      *a3 = v11;
      sub_20FE16DE8(v11, a2, (uint64_t)a3);
      v12 = a2[12];
      v13 = a2[9];
      a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a2[9] = v13 - 8;
      a2[12] = v12 - 8;
      return;
    }
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  sub_20FE16C00((uint64_t)&v15, a2, (uint64_t)a3);
}

void sub_20FE16BD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE16BEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE16C00(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  std::logic_error *exception;
  char v17[8];
  char v18;
  char *v19;
  char *v20;
  _DWORD *v21;

  v17[0] = 7;
  v18 = 7;
  v5 = (char *)operator new(4uLL);
  v19 = v5;
  *(_DWORD *)v5 = 0;
  v20 = v5 + 4;
  v21 = v5 + 4;
  v6 = a2[6];
  if (a2[7] <= v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned __int8 *)(a2[3] + v6);
  a2[6] = v6 + 1;
  v17[0] = v7;
  sub_20FE17368(v7, a2, (uint64_t)v17);
  v8 = v17[0];
  v9 = v18;
  v10 = v19;
  v11 = v20 - v19;
  if (v20 == v19)
  {
    v13 = 0;
    v12 = 0;
    *(_BYTE *)a3 = v17[0];
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
    {
LABEL_5:
      *(_QWORD *)(a3 + 24) = v14;
      operator delete(v14);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      v10 = v19;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v12 = (char *)operator new(v20 - v19);
    v13 = &v12[v11];
    memcpy(v12, v10, v11);
    *(_BYTE *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
      goto LABEL_5;
  }
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v13;
  if (v10)
  {
    v20 = v10;
    operator delete(v10);
  }
}

void sub_20FE16D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE16DE8(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_21022EFF8(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_20FE172A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE172B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE172C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE172DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE172F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17304(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17318(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE1732C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17354(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17368(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_21022EFF8(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_20FE17820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17848(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE1785C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE17898(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE178AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE178C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE178D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE178E8(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE17A34();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v14 = a3;
    sub_20FE180CC(a2, &v14);
    sub_20FE17DB4(*a3, (uint64_t)a2, (uint64_t)a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    sub_20FE17C30((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    v14 = a3;
    sub_20FE180CC(a2, &v14);
    sub_20FE17DB4(*a3, (uint64_t)a2, (uint64_t)a3);
  }
}

__int128 *sub_20FE17A34()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55EF8))
    return &xmmword_254A55EE0;
  v2 = (char *)sub_20FE17B10();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55EE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55EF0 = *((_QWORD *)v2 + 2);
    xmmword_254A55EE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55EE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55EF8);
  return &xmmword_254A55EE0;
}

void sub_20FE17AF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55EF8);
  _Unwind_Resume(a1);
}

void *sub_20FE17B10()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55F18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55F18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::commonio::NumberSample]", qword_254A55F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55F00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55F18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55F38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55F38))
    return &unk_254A55F20;
  sub_21023CD84((uint64_t)qword_254A55F00, (uint64_t)&unk_254A55F20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55F20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55F38);
  return &unk_254A55F20;
}

void sub_20FE17C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55F38);
  _Unwind_Resume(a1);
}

void sub_20FE17C18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55F18);
  _Unwind_Resume(a1);
}

void sub_20FE17C30(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v5;
  unsigned __int8 v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[8];
  char v20;
  char *v21;
  char *v22;
  _DWORD *v23;

  v19[0] = 7;
  v20 = 7;
  v5 = (char *)operator new(4uLL);
  v21 = v5;
  *(_DWORD *)v5 = 0;
  v22 = v5 + 4;
  v23 = v5 + 4;
  v14 = v19;
  sub_20FE180CC(a2, &v14);
  sub_20FE18280(v19[0], (uint64_t)a2, (uint64_t)v19);
  v6 = v19[0];
  LOBYTE(v14) = v19[0];
  v7 = v20;
  v15 = v20;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = v21;
  v9 = v22 - v21;
  if (v22 == v21)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v19[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v21;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v10 = (char *)operator new(v22 - v21);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v22 = v8;
    operator delete(v8);
  }
}

void sub_20FE17D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20FE17DB4(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE180CC(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_21022F328((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FE18234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE18280(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

_QWORD *sub_20FE18598@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA09530;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA094B0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE18730(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE1874C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09530;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE187C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09530;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE1883C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FE18844(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA094F0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_2100C3D24(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20FE188EC(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE199C0();
  sub_20FE189A0(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE18984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE189A0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56078))
  {
    v4 = sub_20FE197C4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A56060, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A56070 = *(_QWORD *)(v9 - 8);
      xmmword_254A56060 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56060, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56078);
  }
  return sub_20FE19C88(&xmmword_254A56060, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_20FE18AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A56078);
  _Unwind_Resume(a1);
}

void sub_20FE18AD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56078);
  _Unwind_Resume(a1);
}

void sub_20FE18AE8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 2;
}

void sub_20FE18B14(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 2, a2);
}

_QWORD *sub_20FE18B4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09530;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE18BC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09530;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE18C3C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE19260();
  return sub_20FE18D90(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FE18C94(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE18FBC((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE18D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE18D64(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE18D90(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE18FBC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE18F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE18FBC(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_2100C3154((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE1920C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE19230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE19260()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55F58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55F58))
    return &xmmword_254A55F40;
  v2 = sub_20FE1933C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55F40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55F50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55F40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55F40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55F58);
  return &xmmword_254A55F40;
}

void sub_20FE19324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55F58);
  _Unwind_Resume(a1);
}

std::string *sub_20FE1933C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55F78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55F78))
    return &stru_254A55F60;
  sub_20FE195E0((uint64_t)__p);
  sub_20FE1942C((char *)__p, &stru_254A55F60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55F60, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55F78);
  return &stru_254A55F60;
}

void sub_20FE193EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55F78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55F78);
  _Unwind_Resume(a1);
}

void sub_20FE1942C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE197C4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE19590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE195E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55FF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55FF8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Numbers>]", qword_254A55FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55FE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55FF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56018);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56018))
  {
    v5 = sub_20E8A2354(qword_254A55FE0, "<", 0);
    sub_20E89FC08(qword_254A55FE0, 0, v5, qword_254A56000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56000, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56018);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56038);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56038))
  {
    sub_21023CD84((uint64_t)qword_254A56000, (uint64_t)&xmmword_254A56020);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56020, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56038);
  }
  if (byte_254A56037 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56020, *((unint64_t *)&xmmword_254A56020 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56020;
    *(_QWORD *)(a1 + 16) = unk_254A56030;
  }
}

void sub_20FE1977C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56038);
  _Unwind_Resume(a1);
}

void sub_20FE19794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56018);
  _Unwind_Resume(a1);
}

void sub_20FE197AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55FF8);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE197C4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55F98))
    return &xmmword_254A55F80;
  v2 = (char *)sub_20FE198A0();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55F80, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55F90 = *((_QWORD *)v2 + 2);
    xmmword_254A55F80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55F80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55F98);
  return &xmmword_254A55F80;
}

void sub_20FE19888(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55F98);
  _Unwind_Resume(a1);
}

void *sub_20FE198A0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55FB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55FB8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Numbers]", qword_254A55FA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55FA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55FB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55FD8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55FD8))
    return &unk_254A55FC0;
  sub_21023CD84((uint64_t)qword_254A55FA0, (uint64_t)&unk_254A55FC0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55FC0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55FD8);
  return &unk_254A55FC0;
}

void sub_20FE19990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55FD8);
  _Unwind_Resume(a1);
}

void sub_20FE199A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55FB8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE199C0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A56058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56058))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE197C4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20EB0B518();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A56040, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56040, &dword_20E81F000);
        __cxa_guard_release(&qword_254A56058);
        return &stru_254A56040;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A56040;
}

void sub_20FE19BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A56058);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A56058);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE19C88(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE18FBC((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE19DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE19DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE19DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE19E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE19E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE19E30(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  void **v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_20FE0FEA4(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = (void **)*((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_2101FAC64(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = (void **)*((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_20EB07D94(&v22, v13);
LABEL_17:
  sub_20FE1A004(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE19FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE19FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE1A004(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  size_t v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_2101FB01C(a3, &v55);
      break;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v12 >> 1;
      v56 = v11;
      sub_2101FDBC4(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v17 >> 2;
      v56 = v16;
      sub_2101FDE34(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v22 >> 3;
      v56 = v21;
      sub_2101FE314(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_2101FD954(a3, &v55);
      break;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v32 >> 1;
      v56 = v31;
      sub_2101FDA8C(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v37 >> 2;
      v56 = v36;
      sub_2101FDCFC(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v42 >> 3;
      v56 = v41;
      sub_2101FE1DC(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v47 >> 2;
      v56 = v46;
      sub_2101FE8F4(a3, &v55);
      break;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v52 >> 3;
      v56 = v51;
      sub_2101FEC64(a3, &v55);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1A6FC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v14 = (uint64_t *)(v6 + 16);
    sub_20E9F3164(&v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v11;
    }
    else
    {
      LOBYTE(v14) = v11;
    }
    std::ostream::write();
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v14 = (uint64_t *)(v7 + 16);
    sub_20E9F472C(&v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20E9F4A34();
  }
  sub_20FE1A844(v11, (uint64_t)&v11, a1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE1A830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE1A844(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(char **)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v10 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        for (*(_QWORD *)&v82 = v10 + 16; v8; --v8)
          result = (uint64_t)sub_20E9F3164((uint64_t **)&v82, *v7++);
      }
      else
      {
        for (; v8; --v8)
        {
          v69 = *v7;
          if (v69 < 0)
          {
            LOBYTE(v82) = -52;
            BYTE1(v82) = v69;
          }
          else
          {
            LOBYTE(v82) = *v7;
          }
          result = std::ostream::write();
          ++v7;
        }
      }
      break;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      *(_QWORD *)&v82 = v13 >> 1;
      *((_QWORD *)&v82 + 1) = v12;
      result = sub_20E9ED4BC(*(_QWORD *)(a3 + 24), &v82);
      break;
    case 2:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(unsigned int **)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v19 = v17 >> 2;
      v20 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
        *(_QWORD *)&v82 = v20 + 16;
        if (v17 >= 4)
        {
          v21 = 4 * v19;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)&v82, *v16++);
            v21 -= 4;
          }
          while (v21);
        }
      }
      else if (v17 >= 4)
      {
        v70 = v20 + 8;
        v71 = 4 * v19;
        do
        {
          result = sub_20E9F3FC0((uint64_t)&v82, v70);
          ++v16;
          v71 -= 4;
        }
        while (v71);
      }
      break;
    case 3:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(unint64_t **)(v22 + 48);
      if (v23)
        v25 = 0;
      else
        v25 = v24 >= 8;
      if (v25)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v26 = v24 >> 3;
      v27 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v27 + 40))
      {
        *(_QWORD *)&v82 = v27 + 16;
        if (v24 >= 8)
        {
          v28 = 8 * v26;
          do
          {
            result = (uint64_t)sub_20E9F472C((uint64_t **)&v82, *v23++);
            v28 -= 8;
          }
          while (v28);
        }
      }
      else if (v24 >= 8)
      {
        v72 = 8 * v26;
        do
        {
          ++v23;
          result = sub_20E9F4A34();
          v72 -= 8;
        }
        while (v72);
      }
      break;
    case 5:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_BYTE **)(v29 + 48);
      if (v30)
        v32 = 1;
      else
        v32 = v31 == 0;
      if (!v32)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v33 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v33 + 40))
      {
        for (*(_QWORD *)&v82 = v33 + 16; v31; --v31)
          result = (uint64_t)sub_20E9F301C((uint64_t **)&v82, (char)*v30++);
      }
      else
      {
        for (; v31; --v31)
        {
          v73 = (char)*v30;
          if (v73 > -33)
          {
            LOBYTE(v82) = *v30;
          }
          else
          {
            LOBYTE(v82) = -48;
            BYTE1(v82) = v73;
          }
          result = std::ostream::write();
          ++v30;
        }
      }
      break;
    case 6:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(__int16 **)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 2;
      if (v37)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v38 = v36 >> 1;
      v39 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v39 + 40))
      {
        *(_QWORD *)&v82 = v39 + 16;
        if (v36 >= 2)
        {
          v40 = 2 * v38;
          do
          {
            result = (uint64_t)sub_20E9F32A8((uint64_t **)&v82, *v35++);
            v40 -= 2;
          }
          while (v40);
        }
      }
      else if (v36 >= 2)
      {
        v74 = 2 * v38;
        do
        {
          ++v35;
          result = sub_20E9F356C();
          v74 -= 2;
        }
        while (v74);
      }
      break;
    case 7:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(unsigned int **)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 4;
      if (v44)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v45 = v43 >> 2;
      v46 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)&v82 = v46 + 16;
        if (v43 >= 4)
        {
          v47 = 4 * v45;
          do
          {
            result = (uint64_t)sub_20E9F3834((uint64_t **)&v82, *v42++);
            v47 -= 4;
          }
          while (v47);
        }
      }
      else if (v43 >= 4)
      {
        v75 = 4 * v45;
        do
        {
          ++v42;
          result = sub_20E9F3C50();
          v75 -= 4;
        }
        while (v75);
      }
      break;
    case 8:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v48 = *(_QWORD *)(a2 + 16);
      v50 = *(_QWORD *)(v48 + 40);
      v49 = *(unint64_t **)(v48 + 48);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 8;
      if (v51)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v52 = v50 >> 3;
      v53 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v53 + 40))
      {
        *(_QWORD *)&v82 = v53 + 16;
        if (v50 >= 8)
        {
          v54 = 8 * v52;
          do
          {
            result = (uint64_t)sub_20E9F40B0((uint64_t **)&v82, *v49++);
            v54 -= 8;
          }
          while (v54);
        }
      }
      else if (v50 >= 8)
      {
        v76 = 8 * v52;
        do
        {
          ++v49;
          result = sub_20E9F45EC();
          v76 -= 8;
        }
        while (v76);
      }
      break;
    case 11:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v55 = *(_QWORD *)(a2 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unsigned int **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 4;
      if (v58)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 2;
      v60 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v82 = v60 + 16;
        if (v57 >= 4)
        {
          v61 = 4 * v59;
          do
          {
            result = (uint64_t)sub_20E9F4B2C((uint64_t)&v81, (uint64_t **)&v82, v56++);
            v61 -= 4;
          }
          while (v61);
        }
      }
      else if (v57 >= 4)
      {
        v77 = 4 * v59;
        do
        {
          v78 = *v56;
          LOBYTE(v82) = -54;
          *(_DWORD *)((char *)&v82 + 1) = bswap32(v78);
          result = std::ostream::write();
          ++v56;
          v77 -= 4;
        }
        while (v77);
      }
      break;
    case 12:
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v62 = *(_QWORD *)(a2 + 16);
      v64 = *(_QWORD *)(v62 + 40);
      v63 = *(unint64_t **)(v62 + 48);
      if (v63)
        v65 = 0;
      else
        v65 = v64 >= 8;
      if (v65)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v66 = v64 >> 3;
      v67 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v67 + 40))
      {
        *(_QWORD *)&v82 = v67 + 16;
        if (v64 >= 8)
        {
          v68 = 8 * v66;
          do
          {
            result = (uint64_t)sub_20E9F4C08((uint64_t)&v81, (uint64_t **)&v82, v63++);
            v68 -= 8;
          }
          while (v68);
        }
      }
      else if (v64 >= 8)
      {
        v79 = 8 * v66;
        do
        {
          v80 = *v63;
          LOBYTE(v82) = -53;
          *(_QWORD *)((char *)&v82 + 1) = bswap64(v80);
          result = std::ostream::write();
          ++v63;
          v79 -= 8;
        }
        while (v79);
      }
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE1B050(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  uint64_t v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_20FE12074(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = *((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_2101FA67C(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_20EB911C0(&v22, v13);
LABEL_17:
  sub_20FE1B224(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE1B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE1B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE1B224(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  float *v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(float **)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_2101FAA20(a3, (size_t *)&v55);
      break;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v12 >> 1);
      v56 = v11;
      sub_2101FBAD4(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v17 >> 2);
      v56 = v16;
      sub_2101FBD44(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v22 >> 3);
      v56 = v21;
      sub_2101FC224(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(float **)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_2101FB864(a3, (size_t *)&v55);
      break;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v32 >> 1);
      v56 = v31;
      sub_2101FB99C(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v37 >> 2);
      v56 = v36;
      sub_2101FBC0C(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v42 >> 3);
      v56 = v41;
      sub_2101FC0EC(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v47 >> 2);
      v56 = v46;
      sub_2101FC804(a3, &v55);
      break;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v52 >> 3);
      v56 = v51;
      sub_2101FCC24(a3, &v55);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1B91C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unsigned __int8 v13;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v13 = v10;
  sub_20E9E6F58(a1, &v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20FE1BA20(v10, (uint64_t)&v10, a1);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FE1BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE1BA20(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(unsigned __int8 **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        do
        {
LABEL_65:
          sub_20E9E6F58(a3, v6++);
          --v7;
        }
        while (v7);
        return;
      }
      goto LABEL_110;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_68;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_68:
        v46 = *(_QWORD *)(a3 + 40);
        v47 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v46)
          {
            v48 = *(_QWORD **)(a3 + 24);
            v71 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v48, (uint64_t)&v71, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v46 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v46;
          v47 -= 2;
        }
        while (v47);
        return;
      }
      goto LABEL_110;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(v13 + 40);
      v14 = *(_QWORD *)(v13 + 48);
      if (v14)
        v16 = 0;
      else
        v16 = v15 >= 4;
      if (!v16)
      {
        if (v15 < 4)
          return;
        goto LABEL_73;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_73:
        v49 = *(_QWORD *)(a3 + 40);
        v50 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v49)
          {
            v51 = *(_QWORD **)(a3 + 24);
            v72 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v51, (uint64_t)&v72, 1);
          }
          v14 += 4;
          std::ostream::operator<<();
          v49 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v49;
          v50 -= 4;
        }
        while (v50);
        return;
      }
      goto LABEL_110;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v17 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 8;
      if (!v20)
      {
        if (v19 < 8)
          return;
        goto LABEL_78;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_78:
        v52 = *(_QWORD *)(a3 + 40);
        v53 = v19 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v52)
          {
            v54 = *(_QWORD **)(a3 + 24);
            v73 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v54, (uint64_t)&v73, 1);
          }
          v18 += 8;
          std::ostream::operator<<();
          v52 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
        return;
      }
      goto LABEL_110;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v21 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(v21 + 40);
      v22 = *(char **)(v21 + 48);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (v24)
      {
        if (!v23)
          return;
        goto LABEL_83;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        do
        {
LABEL_83:
          sub_20E9E6D74(a3, v22++);
          --v23;
        }
        while (v23);
        return;
      }
      goto LABEL_110;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 2;
      if (!v28)
      {
        if (v27 < 2)
          return;
        goto LABEL_86;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_86:
        v56 = *(_QWORD *)(a3 + 40);
        v57 = v27 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(a3 + 24);
            v74 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v58, (uint64_t)&v74, 1);
          }
          v26 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_110;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 4;
      if (!v32)
      {
        if (v31 < 4)
          return;
        goto LABEL_91;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_91:
        v59 = *(_QWORD *)(a3 + 40);
        v60 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v59)
          {
            v61 = *(_QWORD **)(a3 + 24);
            v75 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v61, (uint64_t)&v75, 1);
          }
          v30 += 4;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
        return;
      }
      goto LABEL_110;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v33 = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_QWORD *)(v33 + 48);
      if (v34)
        v36 = 0;
      else
        v36 = v35 >= 8;
      if (!v36)
      {
        if (v35 < 8)
          return;
        goto LABEL_96;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_96:
        v62 = *(_QWORD *)(a3 + 40);
        v63 = v35 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v62)
          {
            v64 = *(_QWORD **)(a3 + 24);
            v76 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v64, (uint64_t)&v76, 1);
          }
          v34 += 8;
          std::ostream::operator<<();
          v62 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v62;
          v63 -= 8;
        }
        while (v63);
        return;
      }
      goto LABEL_110;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v37 = *(_QWORD *)(a2 + 16);
      v39 = *(_QWORD *)(v37 + 40);
      v38 = *(_QWORD *)(v37 + 48);
      if (v38)
        v40 = 0;
      else
        v40 = v39 >= 4;
      if (!v40)
      {
        if (v39 < 4)
          return;
        goto LABEL_101;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_101:
        v65 = *(_QWORD *)(a3 + 40);
        v66 = v39 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v65)
          {
            v67 = *(_QWORD **)(a3 + 24);
            v77 = *(_BYTE *)(a3 + 32);
            sub_20E86A980(v67, (uint64_t)&v77, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
          v38 += 4;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v65;
          v66 -= 4;
        }
        while (v66);
        return;
      }
      goto LABEL_110;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(_QWORD *)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 8;
      if (v44)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_110:
          abort();
        }
      }
      else if (v43 < 8)
      {
        return;
      }
      v68 = *(_QWORD *)(a3 + 40);
      v69 = v43 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v68)
        {
          v70 = *(_QWORD **)(a3 + 24);
          v78 = *(_BYTE *)(a3 + 32);
          sub_20E86A980(v70, (uint64_t)&v78, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
        v42 += 8;
        std::ostream::operator<<();
        v68 = *(_QWORD *)(a3 + 40) + 1;
        *(_QWORD *)(a3 + 40) = v68;
        v69 -= 8;
      }
      while (v69);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1C0F0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char __src;
  uint64_t v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  __src = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v13, 1);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  sub_20FE1C1F0(v9, (uint64_t)&v9, a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE1C1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FE1C1F0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v5 + 40);
      v7 = *(char **)(v5 + 48);
      if (v7)
        v8 = 1;
      else
        v8 = v6 == 0;
      if (!v8)
        goto LABEL_27;
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(char **)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v13 + 40);
      v10 = *(char **)(v13 + 48);
      if (v10)
        v15 = 0;
      else
        v15 = v14 >= 4;
      if (!v15)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v16 + 40);
      v10 = *(char **)(v16 + 48);
      if (v10)
        v18 = 0;
      else
        v18 = v17 >= 8;
      if (!v18)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v19 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v19 + 40);
      v7 = *(char **)(v19 + 48);
      if (v7)
        v20 = 1;
      else
        v20 = v6 == 0;
      if (v20)
        return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
LABEL_27:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0)|| sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v21 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v21 + 40);
      v10 = *(char **)(v21 + 48);
      if (v10)
        v22 = 0;
      else
        v22 = v11 >= 2;
      if (!v22)
        goto LABEL_37;
LABEL_36:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_37:
      v23 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v10)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (!v24)
        goto LABEL_75;
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v25 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v25 + 40);
      v10 = *(char **)(v25 + 48);
      if (v10)
        v26 = 0;
      else
        v26 = v14 >= 4;
      if (!v26)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v27 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v27 + 40);
      v10 = *(char **)(v27 + 48);
      if (v10)
        v28 = 0;
      else
        v28 = v17 >= 8;
      if (!v28)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v29 + 40);
      v10 = *(char **)(v29 + 48);
      if (v10)
        v30 = 0;
      else
        v30 = v14 >= 4;
      if (!v30)
        goto LABEL_59;
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_59:
      v23 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      if (v10)
        v31 = 1;
      else
        v31 = v23 == 0;
      if (!v31)
        goto LABEL_75;
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v32 + 40);
      v10 = *(char **)(v32 + 48);
      if (v10)
        v33 = 0;
      else
        v33 = v17 >= 8;
      if (!v33)
        goto LABEL_71;
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_71:
      v23 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
        v34 = 1;
      else
        v34 = v23 == 0;
      if (!v34)
      {
LABEL_75:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_77:
          abort();
        }
      }
      return sub_2100B8FD4(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1C544(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 *v12;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = &v9;
  sub_20FE13EEC(a1, (_BYTE **)&v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  sub_20FE1C624(v9, (uint64_t)&v9, (uint64_t)a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE1C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE1C624(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  switch(a1)
  {
    case 0:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(_QWORD *)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        if (!v8)
          return result;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        do
        {
LABEL_65:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v7++);
          --v8;
        }
        while (v8);
        return result;
      }
      goto LABEL_102;
    case 1:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_68;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_68:
        v47 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v11);
          v11 += 2;
          v47 -= 2;
        }
        while (v47);
        return result;
      }
      goto LABEL_102;
    case 2:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v14 = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return result;
        goto LABEL_72;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_72:
        v48 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 104))(a3, v15);
          v15 += 4;
          v48 -= 4;
        }
        while (v48);
        return result;
      }
      goto LABEL_102;
    case 3:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v18 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(v18 + 40);
      v19 = *(_QWORD *)(v18 + 48);
      if (v19)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
      {
        if (v20 < 8)
          return result;
        goto LABEL_76;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_76:
        v49 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 120))(a3, v19);
          v19 += 8;
          v49 -= 8;
        }
        while (v49);
        return result;
      }
      goto LABEL_102;
    case 5:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(_QWORD *)(v22 + 48);
      if (v23)
        v25 = 1;
      else
        v25 = v24 == 0;
      if (v25)
      {
        if (!v24)
          return result;
        goto LABEL_80;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        do
        {
LABEL_80:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(a3, v23++);
          --v24;
        }
        while (v24);
        return result;
      }
      goto LABEL_102;
    case 6:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v26 = *(_QWORD *)(a2 + 16);
      v28 = *(_QWORD *)(v26 + 40);
      v27 = *(_QWORD *)(v26 + 48);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (!v29)
      {
        if (v28 < 2)
          return result;
        goto LABEL_83;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_83:
        v51 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v27);
          v27 += 2;
          v51 -= 2;
        }
        while (v51);
        return result;
      }
      goto LABEL_102;
    case 7:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 4;
      if (!v33)
      {
        if (v32 < 4)
          return result;
        goto LABEL_87;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_87:
        v52 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v31);
          v31 += 4;
          v52 -= 4;
        }
        while (v52);
        return result;
      }
      goto LABEL_102;
    case 8:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 8;
      if (!v37)
      {
        if (v36 < 8)
          return result;
        goto LABEL_91;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_91:
        v53 = v36 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v35);
          v35 += 8;
          v53 -= 8;
        }
        while (v53);
        return result;
      }
      goto LABEL_102;
    case 11:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v38 = *(_QWORD *)(a2 + 16);
      v40 = *(_QWORD *)(v38 + 40);
      v39 = *(_QWORD *)(v38 + 48);
      if (v39)
        v41 = 0;
      else
        v41 = v40 >= 4;
      if (!v41)
      {
        if (v40 < 4)
          return result;
        goto LABEL_95;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_95:
        v54 = v40 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(a3, v39);
          v39 += 4;
          v54 -= 4;
        }
        while (v54);
        return result;
      }
      goto LABEL_102;
    case 12:
      result = sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v42 = *(_QWORD *)(a2 + 16);
      v44 = *(_QWORD *)(v42 + 40);
      v43 = *(_QWORD *)(v42 + 48);
      if (v43)
        v45 = 0;
      else
        v45 = v44 >= 8;
      if (v45)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_102:
          abort();
        }
      }
      else if (v44 < 8)
      {
        return result;
      }
      v55 = v44 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(a3, v43);
        v43 += 8;
        v55 -= 8;
      }
      while (v55);
      return result;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1CBB4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_2101FF7D8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DB048(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_20FE1CD28((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_20FE14780((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2101FFA90((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_2100DB048(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_20FE1CEE8(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20FE1CD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C22D8(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_20FE14780((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DB048(v7, &__p);
  v17 = __p;
  sub_20FE1DDF8(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE1CEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1CED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE1CEE8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE1D010(v3);
      break;
    case 1:
      sub_20FE1D160(v3);
      break;
    case 2:
      sub_20FE1D2BC(v3);
      break;
    case 3:
      sub_20FE1D41C(v3);
      break;
    case 5:
      sub_20FE1D5B4(v3);
      break;
    case 6:
      sub_20FE1D704(v3);
      break;
    case 7:
      sub_20FE1D860(v3);
      break;
    case 8:
      sub_20FE1D9C0(v3);
      break;
    case 11:
      sub_20FE1DB58(v3);
      break;
    case 12:
      sub_20FE1DCA8(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1D010(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFBA8(v7, (uint64_t)&v15);
  sub_2100C1DF0(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE1D13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D160(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200D0C(v7, (uint64_t)&v15);
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1D298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D2BC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200E84(v7, (uint64_t)&v15);
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1D3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D41C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2102039C8(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C27C4(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1D578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D5B4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200B2C(v7, (uint64_t)&v15);
  sub_2100C1C50(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE1D6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D704(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200C1C(v7, (uint64_t)&v15);
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1D83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D860(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200DC8(v7, (uint64_t)&v15);
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1D99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1D9C0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_21020368C(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C2620(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1DB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1DB58(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_210201290(v6, (float *)v3);
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE1DC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1DCA8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_210201398(v6, (double *)v3);
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE1DDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1DDF8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE1DF20(v3);
      break;
    case 1:
      sub_20FE1E070(v3);
      break;
    case 2:
      sub_20FE1E1CC(v3);
      break;
    case 3:
      sub_20FE1E32C(v3);
      break;
    case 5:
      sub_20FE1E4C4(v3);
      break;
    case 6:
      sub_20FE1E614(v3);
      break;
    case 7:
      sub_20FE1E770(v3);
      break;
    case 8:
      sub_20FE1E8D0(v3);
      break;
    case 11:
      sub_20FE1EA68(v3);
      break;
    case 12:
      sub_20FE1EBB8(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1DF20(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFBA8(v7, (uint64_t)&v15);
  sub_2100C1DF0(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE1E04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E070(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200D0C(v7, (uint64_t)&v15);
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1E1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E1CC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200E84(v7, (uint64_t)&v15);
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1E308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E32C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2102039C8(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C27C4(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1E488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E4C4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200B2C(v7, (uint64_t)&v15);
  sub_2100C1C50(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE1E5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E614(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200C1C(v7, (uint64_t)&v15);
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E770(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FFA90((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200DC8(v7, (uint64_t)&v15);
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1E8D0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_21020368C(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C2620(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE1EA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1EA68(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_210201290(v6, (float *)v3);
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE1EB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1EBB8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FFA90((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_210201398(v6, (double *)v3);
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE1ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1ED08(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;

  if (a4 < 2)
  {
    sub_20FE1EDE4((uint64_t)&v9, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v10 = 0;
    sub_20E9ED7B4(a2[6], &v10);
    *a3 = v10;
    sub_20E9EDE6C(a2[6], (_QWORD *)a3 + 1);
    sub_20FE1EF5C(*a3, (uint64_t)a3, (uint64_t)a2);
    v7 = a2[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v8);
    a2[4] -= 16;
  }
}

void sub_20FE1EDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9ED7B4(*(_QWORD *)(a2 + 48), &__p);
  v13[0] = __p;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v14);
  sub_20FE1FD4C(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE1EF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1EF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE1EF5C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE1F084(v3);
      break;
    case 1:
      sub_20FE1F1BC(v3);
      break;
    case 2:
      sub_20FE1F304(v3);
      break;
    case 3:
      sub_20FE1F450(v3);
      break;
    case 5:
      sub_20FE1F59C(v3);
      break;
    case 6:
      sub_20FE1F6D4(v3);
      break;
    case 7:
      sub_20FE1F81C(v3);
      break;
    case 8:
      sub_20FE1F968(v3);
      break;
    case 11:
      sub_20FE1FAB4(v3);
      break;
    case 12:
      sub_20FE1FC00(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1F084(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20E9ED7B4(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1DF0(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F1BC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9ED948(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C2134(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F304(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDADC(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C247C(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F450(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EDE6C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C27C4(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F59C(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20E9ED704(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1C50(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F6D4(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9ED898(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C1F90(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F81C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDA2C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C22D8(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1F944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1F968(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EDD84(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2620(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1FA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1FAB4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDF48(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C2968(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1FBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1FC00(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EE078(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2B0C(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1FD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1FD4C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE1FE74(v3);
      break;
    case 1:
      sub_20FE1FFAC(v3);
      break;
    case 2:
      sub_20FE200F4(v3);
      break;
    case 3:
      sub_20FE20240(v3);
      break;
    case 5:
      sub_20FE2038C(v3);
      break;
    case 6:
      sub_20FE204C4(v3);
      break;
    case 7:
      sub_20FE2060C(v3);
      break;
    case 8:
      sub_20FE20758(v3);
      break;
    case 11:
      sub_20FE208A4(v3);
      break;
    case 12:
      sub_20FE209F0(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE1FE74(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20E9ED7B4(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1DF0(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE1FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE1FFAC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9ED948(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C2134(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE200D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE200F4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDADC(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C247C(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE2021C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE20240(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EDE6C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C27C4(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE20368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2038C(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20E9ED704(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1C50(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE204A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE204C4(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9ED898(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C1F90(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE205E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2060C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDA2C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C22D8(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE20734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE20758(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EDD84(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2620(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE20880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE208A4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9EDF48(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C2968(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE209CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE209F0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9EE078(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2B0C(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE20B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE20B3C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_2101FF2E8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DA8B0(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_20FE20CB0((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_20FE15D30((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_2100DA8B0(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_20FE20E70(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20FE20CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C22D8(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_20FE15D30((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DA8B0(v7, &__p);
  v17 = __p;
  sub_20FE21D80(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE20E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE20E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE20E70(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE20F98(v3);
      break;
    case 1:
      sub_20FE210E8(v3);
      break;
    case 2:
      sub_20FE21244(v3);
      break;
    case 3:
      sub_20FE213A4(v3);
      break;
    case 5:
      sub_20FE2153C(v3);
      break;
    case 6:
      sub_20FE2168C(v3);
      break;
    case 7:
      sub_20FE217E8(v3);
      break;
    case 8:
      sub_20FE21948(v3);
      break;
    case 11:
      sub_20FE21AE0(v3);
      break;
    case 12:
      sub_20FE21C30(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE20F98(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FF6B8(v7, (uint64_t)&v15);
  sub_2100C1DF0(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE210C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE210E8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFF00(v7, (uint64_t)&v15);
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE21220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21244(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200078(v7, (uint64_t)&v15);
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE21380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE213A4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_210201FF0(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C27C4(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE21500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2153C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFD20(v7, (uint64_t)&v15);
  sub_2100C1C50(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE21668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2168C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFE10(v7, (uint64_t)&v15);
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE217C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE217E8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFFBC(v7, (uint64_t)&v15);
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE21924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21948(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_210201934(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C2620(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE21AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21AE0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2102004AC(v6, (float *)v3);
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE21C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21C30(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2102005DC(v6, (double *)v3);
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE21D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21D80(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE21EA8(v3);
      break;
    case 1:
      sub_20FE21FF8(v3);
      break;
    case 2:
      sub_20FE22154(v3);
      break;
    case 3:
      sub_20FE222B4(v3);
      break;
    case 5:
      sub_20FE2244C(v3);
      break;
    case 6:
      sub_20FE2259C(v3);
      break;
    case 7:
      sub_20FE226F8(v3);
      break;
    case 8:
      sub_20FE22858(v3);
      break;
    case 11:
      sub_20FE229F0(v3);
      break;
    case 12:
      sub_20FE22B40(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE21EA8(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FF6B8(v7, (uint64_t)&v15);
  sub_2100C1DF0(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE21FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE21FF8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFF00(v7, (uint64_t)&v15);
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE22130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE22154(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_210200078(v7, (uint64_t)&v15);
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE22290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE222B4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_210201FF0(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C27C4(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE22410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2244C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFD20(v7, (uint64_t)&v15);
  sub_2100C1C50(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE22578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2259C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFE10(v7, (uint64_t)&v15);
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE226D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE226F8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2101FFFBC(v7, (uint64_t)&v15);
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE22834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE22858(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_210201934(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_2100C2620(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE229B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE229F0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2102004AC(v6, (float *)v3);
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE22B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE22B40(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2101FF5A0((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2102005DC(v6, (double *)v3);
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE22C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE22C90(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20FE22DE4((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_20E9E7AC8(a2, __p);
    *a3 = __p[0];
    sub_20E9E88B4(a2, (_QWORD *)a3 + 1);
    sub_20FE22F5C(*a3, (uint64_t)a3, a2);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE22DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9E7AC8(a2, &__p);
  v13[0] = __p;
  sub_20E9E88B4(a2, &v14);
  sub_20FE23D24(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE22F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE22F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE22F5C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE23084(v3);
      break;
    case 1:
      sub_20FE231B8(v3);
      break;
    case 2:
      sub_20FE232FC(v3);
      break;
    case 3:
      sub_20FE23444(v3);
      break;
    case 5:
      sub_20FE2358C(v3);
      break;
    case 6:
      sub_20FE236C0(v3);
      break;
    case 7:
      sub_20FE23804(v3);
      break;
    case 8:
      sub_20FE2394C(v3);
      break;
    case 11:
      sub_20FE23A94(v3);
      break;
    case 12:
      sub_20FE23BDC(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE23084(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20E9E7AC8(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1DF0(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE231B8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9E7F64(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C2134(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE232D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE232FC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E840C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C247C(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23444(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E88B4(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C27C4(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2358C(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20E9E7880(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1C50(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE2369C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE236C0(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9E7D10(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C1F90(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE237E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23804(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E81B8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C22D8(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2394C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E8660(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2620(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23A94(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E8D84(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C2968(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23BDC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E8FD8(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2B0C(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23D24(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE23E4C(v3);
      break;
    case 1:
      sub_20FE23F80(v3);
      break;
    case 2:
      sub_20FE240C4(v3);
      break;
    case 3:
      sub_20FE2420C(v3);
      break;
    case 5:
      sub_20FE24354(v3);
      break;
    case 6:
      sub_20FE24488(v3);
      break;
    case 7:
      sub_20FE245CC(v3);
      break;
    case 8:
      sub_20FE24714(v3);
      break;
    case 11:
      sub_20FE2485C(v3);
      break;
    case 12:
      sub_20FE249A4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE23E4C(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20E9E7AC8(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1DF0(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE23F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE23F80(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9E7F64(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C2134(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE240A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE240C4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E840C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C247C(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE241E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2420C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E88B4(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C27C4(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE24330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE24354(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20E9E7880(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_2100C1C50(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE24464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE24488(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20E9E7D10(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_2100C1F90(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE245A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE245CC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E81B8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C22D8(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE246F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE24714(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E8660(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2620(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE24838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2485C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20E9E8D84(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_2100C2968(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE24980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE249A4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20E9E8FD8(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_2100C2B0C(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20FE24AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE24AEC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE24BE0((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE24D34(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE24BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE24BE0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  sub_20FE25F78(a2, (uint64_t)v13);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE24D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE24D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE24D34(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_20FE24E08(v6, a2, (uint64_t)a1);
}

void sub_20FE24DE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE24DF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE24E08(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE24F30(v3);
      break;
    case 1:
      sub_20FE250C8(v3);
      break;
    case 2:
      sub_20FE25268(v3);
      break;
    case 3:
      sub_20FE2540C(v3);
      break;
    case 5:
      sub_20FE255B0(v3);
      break;
    case 6:
      sub_20FE25748(v3);
      break;
    case 7:
      sub_20FE258E8(v3);
      break;
    case 8:
      sub_20FE25A8C(v3);
      break;
    case 11:
      sub_20FE25C30(v3);
      break;
    case 12:
      sub_20FE25DD4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE24F30(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1DF0(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE25094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE250C8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2134(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE25234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25268(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C247C(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE253D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2540C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C27C4(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE2557C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE255B0(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1C50(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE25714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25748(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1F90(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE258B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE258E8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE25A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25A8C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2620(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE25BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25C30(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2968(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE25DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25DD4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2B0C(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE25F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE25F78(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_20FE2604C(v6, a2, (uint64_t)a1);
}

void sub_20FE26024(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE26038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE2604C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE26174(v3);
      break;
    case 1:
      sub_20FE2630C(v3);
      break;
    case 2:
      sub_20FE264AC(v3);
      break;
    case 3:
      sub_20FE26650(v3);
      break;
    case 5:
      sub_20FE267F4(v3);
      break;
    case 6:
      sub_20FE2698C(v3);
      break;
    case 7:
      sub_20FE26B2C(v3);
      break;
    case 8:
      sub_20FE26CD0(v3);
      break;
    case 11:
      sub_20FE26E74(v3);
      break;
    case 12:
      sub_20FE27018(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE26174(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1DF0(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE262D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2630C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2134(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE26478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE264AC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C247C(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE2661C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE26650(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C27C4(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE267C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE267F4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1C50(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE26958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2698C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C1F90(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE26AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE26B2C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE26C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE26CD0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2620(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE26E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE26E74(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2968(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE26FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27018(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_2100C2B0C(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20FE27188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE271BC(int *a1, _BYTE *a2, _BYTE *a3)
{
  unsigned int v6;
  char v7;
  _BYTE *v8;

  v6 = 2;
  (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20FE275D8((uint64_t)&v7, a2, (uint64_t)a3);
    }
    else
    {
      v8 = a3;
      sub_20FE180CC(a2, &v8);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      sub_20FE27754(*a3, (uint64_t)a3, (uint64_t)a2);
    }
  }
  else
  {
    sub_20FE272A0(a1, a2, a3, v6);
  }
}

void sub_20FE272A0(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;
  _BYTE *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FE273DC();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE275D8((uint64_t)&v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v15 = a3;
  sub_20FE180CC(a2, &v15);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  sub_20FE27754(*a3, (uint64_t)a3, (uint64_t)a2);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE273DC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56098))
    return &xmmword_254A56080;
  v2 = (char *)sub_20FE274B8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A56080, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A56090 = *((_QWORD *)v2 + 2);
    xmmword_254A56080 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56080, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56098);
  return &xmmword_254A56080;
}

void sub_20FE274A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56098);
  _Unwind_Resume(a1);
}

void *sub_20FE274B8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A560B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A560B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::NumbersSample]", qword_254A560A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A560A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A560B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A560D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A560D8))
    return &unk_254A560C0;
  sub_21023CD84((uint64_t)qword_254A560A0, (uint64_t)&unk_254A560C0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A560C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A560D8);
  return &unk_254A560C0;
}

void sub_20FE275A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A560D8);
  _Unwind_Resume(a1);
}

void sub_20FE275C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A560B8);
  _Unwind_Resume(a1);
}

void sub_20FE275D8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_2100C22D8(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  __p = v13;
  sub_20FE180CC(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v14);
  sub_20FE28434(v13[0], (uint64_t)v13, (uint64_t)a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE27724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE27754(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE2787C(v3);
      break;
    case 1:
      sub_20FE2799C(v3);
      break;
    case 2:
      sub_20FE27AC8(v3);
      break;
    case 3:
      sub_20FE27BF8(v3);
      break;
    case 5:
      sub_20FE27D28(v3);
      break;
    case 6:
      sub_20FE27E48(v3);
      break;
    case 7:
      sub_20FE27F74(v3);
      break;
    case 8:
      sub_20FE280A4(v3);
      break;
    case 11:
      sub_20FE281D4(v3);
      break;
    case 12:
      sub_20FE28304(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2787C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE27978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2799C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_2100C2134(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE27AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27AC8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C247C(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE27BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27BF8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C27C4(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE27D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27D28(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE27E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27E48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_2100C1F90(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE27F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE27F74(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C22D8(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE280A4(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C2620(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE281B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE281D4(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE282E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28304(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28434(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE2855C(v3);
      break;
    case 1:
      sub_20FE2867C(v3);
      break;
    case 2:
      sub_20FE287A8(v3);
      break;
    case 3:
      sub_20FE288D8(v3);
      break;
    case 5:
      sub_20FE28A08(v3);
      break;
    case 6:
      sub_20FE28B28(v3);
      break;
    case 7:
      sub_20FE28C54(v3);
      break;
    case 8:
      sub_20FE28D84(v3);
      break;
    case 11:
      sub_20FE28EB4(v3);
      break;
    case 12:
      sub_20FE28FE4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2855C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE28658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2867C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20E867F44();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_2100C2134(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE287A8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C247C(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE288B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE288D8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E92CED8();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C27C4(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE289E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28A08(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE28B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28B28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20FDFA718();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_2100C1F90(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28C54(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20EABADD4();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C22D8(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28D84(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20FDFA718();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C2620(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28EB4(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20E867F44();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_2100C2968(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE28FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE28FE4(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_2100C2B0C(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20FE290F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE29114@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C9C4A40;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C9C49C0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE292AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20FE292C8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE0FEA4(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FAC64(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB07D94(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FAEA0(a1);
  sub_20FE29528(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE294F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE29514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE29528(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v47 = 2;
              v48 = v36;
              sub_2101FB01C(a3, &v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_2101FB01C(a3, &v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_2101FDBC4(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v37;
          sub_2101FDBC4(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_2101FDE34(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v38;
          sub_2101FDE34(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_2101FE314(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v39;
          sub_2101FE314(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_2101FD954(a3, &v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v47 = 2;
            v48 = v41;
            sub_2101FD954(a3, &v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_2101FDA8C(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v42;
          sub_2101FDA8C(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_2101FDCFC(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v43;
          sub_2101FDCFC(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_2101FE1DC(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v44;
          sub_2101FE1DC(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_2101FE8F4(a3, &v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v45;
          sub_2101FE8F4(a3, &v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_2101FEC64(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v46;
          sub_2101FEC64(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE29F40(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20E9F3164(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20E9F472C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20E9F4A34();
  }
  v15 = xmmword_24CA08400;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20FE2A0A4(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE2A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE2A0A4(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20E9F3164((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20E9ED4BC(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20E9F3FC0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20E9F472C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20E9F4A34();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20E9F301C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20E9F32A8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20E9F356C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20E9F3834((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20E9F3C50();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20E9F40B0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20E9F45EC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20E9F4B2C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20E9F4C08((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE2A8FC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE12074(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FA67C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB911C0(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FA8A4(a1);
  sub_20FE2AB5C(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE2AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE2AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE2AB5C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v47 = 2;
              v48 = v36;
              sub_2101FAA20(a3, (size_t *)&v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_2101FAA20(a3, (size_t *)&v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_2101FBAD4(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v37;
          sub_2101FBAD4(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_2101FBD44(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v38;
          sub_2101FBD44(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_2101FC224(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v39;
          sub_2101FC224(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_2101FB864(a3, (size_t *)&v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v47 = 2;
            v48 = v41;
            sub_2101FB864(a3, (size_t *)&v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_2101FB99C(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v42;
          sub_2101FB99C(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_2101FBC0C(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v43;
          sub_2101FBC0C(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_2101FC0EC(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v44;
          sub_2101FC0EC(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_2101FC804(a3, (float **)&v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v45;
          sub_2101FC804(a3, (float **)&v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_2101FCC24(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 2;
          v48 = v46;
          sub_2101FCC24(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2B574(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20E9E6F58(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24CA08400;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20FE2B694(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FE2B680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE2B694(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20E9E6F58(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20E86A980(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20E86A980(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20E86A980(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20E9E6D74(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20E86A980(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20E86A980(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20E86A980(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20E86A980(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20E86A980(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2BDB0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24CA08400;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20FE2BED4(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE2BEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FE2BED4(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a2[1], sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_2100B8FD4(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_2100B8FD4(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE2C260(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20FE13EEC(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24CA08400;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20FE2C35C(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE2C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE2C35C(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2C938(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20FE2CA5C((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20FE14780((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_2100DB048(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2101FF7D8(a1);
    sub_20FE2CC70(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20FE2CA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2100C42C4((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20FE14780((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DB048(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  sub_20FE2E438(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20FE2CC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2CC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE2CC70(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE2CD98(v3);
      break;
    case 1:
      sub_20FE2CFC4(v3);
      break;
    case 2:
      sub_20FE2D1FC(v3);
      break;
    case 3:
      sub_20FE2D438(v3);
      break;
    case 5:
      sub_20FE2D6B8(v3);
      break;
    case 6:
      sub_20FE2D8E4(v3);
      break;
    case 7:
      sub_20FE2DB1C(v3);
      break;
    case 8:
      sub_20FE2DD58(v3);
      break;
    case 11:
      sub_20FE2DFD8(v3);
      break;
    case 12:
      sub_20FE2E208(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2CD98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_2101FFBA8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE2CF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2CFC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20E867F44();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200D0C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2D198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2D1FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200E84(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2D438(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2102039C8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE2D63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2D6B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200B2C(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE2D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2D8E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200C1C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2DAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2DB1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200DC8(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2DCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2DD58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_21020368C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE2DF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2DFD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201290(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE2E1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2E208(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201398(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE2E3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2E438(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE2E560(v3);
      break;
    case 1:
      sub_20FE2E78C(v3);
      break;
    case 2:
      sub_20FE2E9C4(v3);
      break;
    case 3:
      sub_20FE2EC00(v3);
      break;
    case 5:
      sub_20FE2EE80(v3);
      break;
    case 6:
      sub_20FE2F0AC(v3);
      break;
    case 7:
      sub_20FE2F2E4(v3);
      break;
    case 8:
      sub_20FE2F520(v3);
      break;
    case 11:
      sub_20FE2F7A0(v3);
      break;
    case 12:
      sub_20FE2F9D0(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2E560(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_2101FFBA8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE2E728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2E78C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20E867F44();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200D0C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2E960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2E9C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200E84(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2EB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2EC00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2102039C8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE2EE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2EE80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200B2C(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE2F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2F0AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200C1C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2F280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2F2E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200DC8(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE2F4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2F520(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_21020368C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE2F724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2F7A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201290(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE2F96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2F9D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201398(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE2FB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2FC00(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_20FE2FCF4((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20E9ED7B4(a2[6], v10);
    *a3 = v10[0];
    sub_20E9EDE6C(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24CA08400;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_20FE2FE88(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20FE2FCF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C42C4((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9ED7B4(a2[6], &__p);
  v16 = __p;
  sub_20E9EDE6C(a2[6], &v17);
  v22 = xmmword_24CA08400;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE31120(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE2FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE2FE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE2FE88(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE2FF30(a2);
      break;
    case 1:
      sub_20FE300EC(a2);
      break;
    case 2:
      sub_20FE302B8(a2);
      break;
    case 3:
      sub_20FE30488(a2);
      break;
    case 5:
      sub_20FE30658(a2);
      break;
    case 6:
      sub_20FE30814(a2);
      break;
    case 7:
      sub_20FE309E0(a2);
      break;
    case 8:
      sub_20FE30BB0(a2);
      break;
    case 11:
      sub_20FE30D80(a2);
      break;
    case 12:
      sub_20FE30F50(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE2FF30(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE3008C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE300EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE302B8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30488(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE305F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30658(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE307B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30814(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE309E0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30BB0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30D80(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE30EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE30F50(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE310C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31120(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE311C8(a2);
      break;
    case 1:
      sub_20FE31384(a2);
      break;
    case 2:
      sub_20FE31550(a2);
      break;
    case 3:
      sub_20FE31720(a2);
      break;
    case 5:
      sub_20FE318F0(a2);
      break;
    case 6:
      sub_20FE31AAC(a2);
      break;
    case 7:
      sub_20FE31C78(a2);
      break;
    case 8:
      sub_20FE31E48(a2);
      break;
    case 11:
      sub_20FE32018(a2);
      break;
    case 12:
      sub_20FE321E8(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE311C8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE31324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31384(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE314F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31550(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE316C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31720(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE31890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE318F0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE31A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31AAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE31C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31C78(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE31DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE31E48(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE31FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE32018(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE32188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE321E8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE32358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE323B8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20FE324DC((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20FE15D30((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_2100DA8B0(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2101FF2E8(a1);
    sub_20FE326F0(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20FE324DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2100C42C4((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20FE15D30((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DA8B0(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  sub_20FE33EB8(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20FE326C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE326DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE326F0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE32818(v3);
      break;
    case 1:
      sub_20FE32A44(v3);
      break;
    case 2:
      sub_20FE32C7C(v3);
      break;
    case 3:
      sub_20FE32EB8(v3);
      break;
    case 5:
      sub_20FE33138(v3);
      break;
    case 6:
      sub_20FE33364(v3);
      break;
    case 7:
      sub_20FE3359C(v3);
      break;
    case 8:
      sub_20FE337D8(v3);
      break;
    case 11:
      sub_20FE33A58(v3);
      break;
    case 12:
      sub_20FE33C88(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE32818(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FF6B8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE329E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE32A44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20E867F44();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFF00(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE32C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE32C7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_210200078(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE32E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE32EB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201FF0(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE330BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE33138(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFD20(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE33300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE33364(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFE10(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE33538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3359C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFFBC(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE33774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE337D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201934(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE339DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE33A58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102004AC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE33C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE33C88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102005DC(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE33E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE33EB8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE33FE0(v3);
      break;
    case 1:
      sub_20FE3420C(v3);
      break;
    case 2:
      sub_20FE34444(v3);
      break;
    case 3:
      sub_20FE34680(v3);
      break;
    case 5:
      sub_20FE34900(v3);
      break;
    case 6:
      sub_20FE34B2C(v3);
      break;
    case 7:
      sub_20FE34D64(v3);
      break;
    case 8:
      sub_20FE34FA0(v3);
      break;
    case 11:
      sub_20FE35220(v3);
      break;
    case 12:
      sub_20FE35450(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE33FE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FF6B8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE341A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3420C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20E867F44();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFF00(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE343E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34444(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_210200078(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE3461C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34680(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201FF0(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE34884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFD20(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE34AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34B2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFE10(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE34D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34D64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFFBC(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE34F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE34FA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201934(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE351A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35220(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102004AC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE353EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35450(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102005DC(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE3561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35680(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_20FE357EC((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20E9E7AC8(a2, &__p);
    *a3 = __p;
    sub_20E9E88B4(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24CA08400;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_20FE35980(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_20FE357EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C42C4((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9E7AC8(a2, &__p);
  v16 = __p;
  sub_20E9E88B4(a2, &v17);
  v22 = xmmword_24CA08400;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE36BF0(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE35950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3596C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE35980(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE35A28(a2);
      break;
    case 1:
      sub_20FE35BE0(a2);
      break;
    case 2:
      sub_20FE35DA8(a2);
      break;
    case 3:
      sub_20FE35F74(a2);
      break;
    case 5:
      sub_20FE36140(a2);
      break;
    case 6:
      sub_20FE362F8(a2);
      break;
    case 7:
      sub_20FE364C0(a2);
      break;
    case 8:
      sub_20FE3668C(a2);
      break;
    case 11:
      sub_20FE36858(a2);
      break;
    case 12:
      sub_20FE36A24(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE35A28(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE35B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35BE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE35D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35DA8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE35F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE35F74(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE360E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE36140(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE36298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE362F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE36460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE364C0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3668C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE367F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE36858(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE369C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE36A24(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE36B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE36BF0(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE36C98(a2);
      break;
    case 1:
      sub_20FE36E50(a2);
      break;
    case 2:
      sub_20FE37018(a2);
      break;
    case 3:
      sub_20FE371E4(a2);
      break;
    case 5:
      sub_20FE373B0(a2);
      break;
    case 6:
      sub_20FE37568(a2);
      break;
    case 7:
      sub_20FE37730(a2);
      break;
    case 8:
      sub_20FE378FC(a2);
      break;
    case 11:
      sub_20FE37AC8(a2);
      break;
    case 12:
      sub_20FE37C94(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE36C98(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE36DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE36E50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE36FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37018(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE37184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE371E4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE37350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE373B0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE37508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37568(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE376D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37730(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3789C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE378FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE37A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37AC8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE37C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37C94(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE37E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE37E60(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE37F54((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE380B4(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE37F40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE37F54(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C42C4((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_20FE397CC(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE38084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE38098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE380B4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08400;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FE381B4(v5, v10);
}

void sub_20FE3818C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE381A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE381B4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE3825C(a2);
      break;
    case 1:
      sub_20FE38478(a2);
      break;
    case 2:
      sub_20FE3869C(a2);
      break;
    case 3:
      sub_20FE388C4(a2);
      break;
    case 5:
      sub_20FE38AEC(a2);
      break;
    case 6:
      sub_20FE38D08(a2);
      break;
    case 7:
      sub_20FE38F2C(a2);
      break;
    case 8:
      sub_20FE39154(a2);
      break;
    case 11:
      sub_20FE3937C(a2);
      break;
    case 12:
      sub_20FE395A4(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE3825C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE38408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE38478(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2134(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3869C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C247C(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE38854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE388C4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C27C4(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE38A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE38AEC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE38C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE38D08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C1F90(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE38EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE38F2C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C22D8(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE390E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE39154(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2620(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3937C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2968(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE39534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE395A4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2B0C(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE397CC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08400;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FE398CC(v5, v10);
}

void sub_20FE398A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE398B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE398CC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE39974(a2);
      break;
    case 1:
      sub_20FE39B90(a2);
      break;
    case 2:
      sub_20FE39DB4(a2);
      break;
    case 3:
      sub_20FE39FDC(a2);
      break;
    case 5:
      sub_20FE3A204(a2);
      break;
    case 6:
      sub_20FE3A420(a2);
      break;
    case 7:
      sub_20FE3A644(a2);
      break;
    case 8:
      sub_20FE3A86C(a2);
      break;
    case 11:
      sub_20FE3AA94(a2);
      break;
    case 12:
      sub_20FE3ACBC(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE39974(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE39B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE39B90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2134(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE39D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE39DB4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C247C(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE39F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE39FDC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C27C4(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3A194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3A204(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3A3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3A420(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C1F90(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3A5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3A644(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C22D8(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3A7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3A86C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2620(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3AA94(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2968(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3AC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3ACBC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2B0C(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3AE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3AEE4(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_20FE3B4E4((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_20FE180CC(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24CA08400;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_20FE3B67C(v6, v7);
    }
  }
  else
  {
    sub_20FE3AFE0(a1, a2, a3, v7[0]);
  }
}

void sub_20FE3AFE0(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_20FE3B134();
      sub_20E9F5C70((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE3B4E4((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_20FE180CC(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24CA08400;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_20FE3B67C(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE3B134()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A560F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A560F8))
    return &xmmword_254A560E0;
  v2 = sub_20FE3B210();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A560E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A560F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A560E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A560E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A560F8);
  return &xmmword_254A560E0;
}

void sub_20FE3B1F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A560F8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE3B210()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56118);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56118))
    return &stru_254A56100;
  sub_20FE3B300((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A56100);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56100, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56118);
  return &stru_254A56100;
}

void sub_20FE3B2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56118);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56118);
  _Unwind_Resume(a1);
}

void sub_20FE3B300(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56138);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56138))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<2>]", qword_254A56120);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56120, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56138);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56158);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56158))
  {
    v5 = sub_20E8A2354(qword_254A56120, "<", 0);
    sub_20E89FC08(qword_254A56120, 0, v5, qword_254A56140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56140, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56158);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56178);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56178))
  {
    sub_21023CD84((uint64_t)qword_254A56140, (uint64_t)&xmmword_254A56160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56160, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56178);
  }
  if (byte_254A56177 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56160, *((unint64_t *)&xmmword_254A56160 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56160;
    *(_QWORD *)(a1 + 16) = unk_254A56170;
  }
}

void sub_20FE3B49C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56178);
  _Unwind_Resume(a1);
}

void sub_20FE3B4B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56158);
  _Unwind_Resume(a1);
}

void sub_20FE3B4CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56138);
  _Unwind_Resume(a1);
}

void sub_20FE3B4E4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C42C4((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_20FE180CC(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24CA08400;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE3C844(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE3B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3B668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3B67C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE3B724(a2);
      break;
    case 1:
      sub_20FE3B8C8(a2);
      break;
    case 2:
      sub_20FE3BA80(a2);
      break;
    case 3:
      sub_20FE3BC3C(a2);
      break;
    case 5:
      sub_20FE3BDF8(a2);
      break;
    case 6:
      sub_20FE3BF9C(a2);
      break;
    case 7:
      sub_20FE3C154(a2);
      break;
    case 8:
      sub_20FE3C310(a2);
      break;
    case 11:
      sub_20FE3C4CC(a2);
      break;
    case 12:
      sub_20FE3C688(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE3B724(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3B8C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3BA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3BA80(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3BBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3BC3C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3BD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3BDF8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3BF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3BF9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3C0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3C154(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3C2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3C310(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3C4CC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3C688(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3C844(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE3C8EC(a2);
      break;
    case 1:
      sub_20FE3CA90(a2);
      break;
    case 2:
      sub_20FE3CC48(a2);
      break;
    case 3:
      sub_20FE3CE04(a2);
      break;
    case 5:
      sub_20FE3CFC0(a2);
      break;
    case 6:
      sub_20FE3D164(a2);
      break;
    case 7:
      sub_20FE3D31C(a2);
      break;
    case 8:
      sub_20FE3D4D8(a2);
      break;
    case 11:
      sub_20FE3D694(a2);
      break;
    case 12:
      sub_20FE3D850(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE3C8EC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3CA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3CA90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3CBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3CC48(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3CDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3CE04(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3CF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3CFC0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3D164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3D31C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3D4D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3D694(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3D850(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE3D9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE3DA0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA099B0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA09930;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE3DBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE3DBC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA099B0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE3DC38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA099B0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE3DCB0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FE3DCB8(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA09970, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_2100C3D24(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20FE3DD60(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE3F044();
  sub_20FE3DE14(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE3DDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE3DE14(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A562F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A562F8))
  {
    v4 = sub_20FE3EC94();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A562E0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A562F0 = *(_QWORD *)(v9 - 8);
      xmmword_254A562E0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A562E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A562F8);
  }
  return sub_20FE3F30C(&xmmword_254A562E0, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)"}");
}

void sub_20FE3DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A562F8);
  _Unwind_Resume(a1);
}

void sub_20FE3DF44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A562F8);
  _Unwind_Resume(a1);
}

void sub_20FE3DF5C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 4;
}

void sub_20FE3DF88(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 4, a2);
}

_QWORD *sub_20FE3DFC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA099B0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE3E038(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA099B0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE3E0B0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE3E730();
  return sub_20FE3E204(v2, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FE3E108(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE3E430((uint64_t)v5, (uint64_t)v2, (_BYTE **)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE3E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE3E1D8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE3E204(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE3E430((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE3E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3E430(uint64_t a1, uint64_t a2, _BYTE **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_21022F254(v6, v23);
  sub_20E86A980(v7, (uint64_t)",", 1);
  v23[0] = v5 + 16;
  sub_2100C5C34(**a3, (uint64_t)a3, (uint64_t)v23);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a2;
  v23[1] = __dst;
  v23[2] = a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20FE3E6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE3E700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE3E71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FD0DE48((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_20FE3E730()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56198);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56198))
    return &xmmword_254A56180;
  v2 = sub_20FE3E80C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56180, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56190 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56180 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56180, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56198);
  return &xmmword_254A56180;
}

void sub_20FE3E7F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56198);
  _Unwind_Resume(a1);
}

std::string *sub_20FE3E80C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A561B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A561B8))
    return &stru_254A561A0;
  sub_20FE3EAB0((uint64_t)__p);
  sub_20FE3E8FC((char *)__p, &stru_254A561A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A561A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A561B8);
  return &stru_254A561A0;
}

void sub_20FE3E8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A561B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A561B8);
  _Unwind_Resume(a1);
}

void sub_20FE3E8FC(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE3EC94();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE3EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE3EAB0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56278);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56278))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Points<3>>]", qword_254A56260);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56260, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56278);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56298);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56298))
  {
    v5 = sub_20E8A2354(qword_254A56260, "<", 0);
    sub_20E89FC08(qword_254A56260, 0, v5, qword_254A56280);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56280, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56298);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A562B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A562B8))
  {
    sub_21023CD84((uint64_t)qword_254A56280, (uint64_t)&xmmword_254A562A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A562A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A562B8);
  }
  if (byte_254A562B7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A562A0, *((unint64_t *)&xmmword_254A562A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A562A0;
    *(_QWORD *)(a1 + 16) = unk_254A562B0;
  }
}

void sub_20FE3EC4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A562B8);
  _Unwind_Resume(a1);
}

void sub_20FE3EC64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56298);
  _Unwind_Resume(a1);
}

void sub_20FE3EC7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56278);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE3EC94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A561D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A561D8))
    return &xmmword_254A561C0;
  v2 = sub_20FE3ED70();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A561C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A561D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A561C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A561C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A561D8);
  return &xmmword_254A561C0;
}

void sub_20FE3ED58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A561D8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE3ED70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A561F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A561F8))
    return &stru_254A561E0;
  sub_20FE3EE60((uint64_t)__p);
  sub_20F4484C8((char *)__p, &stru_254A561E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A561E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A561F8);
  return &stru_254A561E0;
}

void sub_20FE3EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A561F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A561F8);
  _Unwind_Resume(a1);
}

void sub_20FE3EE60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56218);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56218))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Points<3>]", qword_254A56200);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56200, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56218);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56238);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56238))
  {
    v5 = sub_20E8A2354(qword_254A56200, "<", 0);
    sub_20E89FC08(qword_254A56200, 0, v5, qword_254A56220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56220, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56238);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56258))
  {
    sub_21023CD84((uint64_t)qword_254A56220, (uint64_t)&xmmword_254A56240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56240, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56258);
  }
  if (byte_254A56257 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56240, *((unint64_t *)&xmmword_254A56240 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56240;
    *(_QWORD *)(a1 + 16) = unk_254A56250;
  }
}

void sub_20FE3EFFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56258);
  _Unwind_Resume(a1);
}

void sub_20FE3F014(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56238);
  _Unwind_Resume(a1);
}

void sub_20FE3F02C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56218);
  _Unwind_Resume(a1);
}

std::string *sub_20FE3F044()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A562D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A562D8))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE3EC94();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20EA6BF74();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A562C0, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A562C0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A562D8);
        return &stru_254A562C0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A562C0;
}

void sub_20FE3F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A562D8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A562D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE3F30C(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE3E430((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE3F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3F464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3F48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3F4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE3F4B4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE0FEA4(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FAC64(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB07D94(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FAEA0(a1);
  sub_20FE3F714(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE3F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE3F700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE3F714(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v47 = 3;
              v48 = v36;
              sub_2101FB01C(a3, &v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_2101FB01C(a3, &v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_2101FDBC4(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v37;
          sub_2101FDBC4(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_2101FDE34(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v38;
          sub_2101FDE34(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_2101FE314(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v39;
          sub_2101FE314(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_2101FD954(a3, &v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v47 = 3;
            v48 = v41;
            sub_2101FD954(a3, &v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_2101FDA8C(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v42;
          sub_2101FDA8C(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_2101FDCFC(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v43;
          sub_2101FDCFC(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_2101FE1DC(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v44;
          sub_2101FE1DC(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_2101FE8F4(a3, &v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v45;
          sub_2101FE8F4(a3, &v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_2101FEC64(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v46;
          sub_2101FEC64(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE4012C(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20E9F3164(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20E9F472C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20E9F4A34();
  }
  v15 = xmmword_24CA08410;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20FE40290(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE4027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE40290(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20E9F3164((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20E9ED4BC(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20E9F3FC0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20E9F472C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20E9F4A34();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20E9F301C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20E9F32A8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20E9F356C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20E9F3834((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20E9F3C50();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20E9F40B0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20E9F45EC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20E9F4B2C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20E9F4C08((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE40AE8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE12074(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FA67C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB911C0(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FA8A4(a1);
  sub_20FE40D48(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE40D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE40D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE40D48(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v47 = 3;
              v48 = v36;
              sub_2101FAA20(a3, (size_t *)&v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_2101FAA20(a3, (size_t *)&v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_2101FBAD4(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v37;
          sub_2101FBAD4(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_2101FBD44(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v38;
          sub_2101FBD44(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_2101FC224(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v39;
          sub_2101FC224(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_2101FB864(a3, (size_t *)&v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v47 = 3;
            v48 = v41;
            sub_2101FB864(a3, (size_t *)&v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_2101FB99C(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v42;
          sub_2101FB99C(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_2101FBC0C(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v43;
          sub_2101FBC0C(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_2101FC0EC(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v44;
          sub_2101FC0EC(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_2101FC804(a3, (float **)&v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v45;
          sub_2101FC804(a3, (float **)&v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_2100C2EF8((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_2101FCC24(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v47 = 3;
          v48 = v46;
          sub_2101FCC24(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE41760(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20E9E6F58(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24CA08410;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20FE41880(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FE4186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE41880(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20E9E6F58(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20E86A980(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20E86A980(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20E86A980(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20E9E6D74(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20E86A980(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20E86A980(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20E86A980(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20E86A980(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20E86A980(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE41F9C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24CA08410;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20FE420C0(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE420AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FE420C0(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a2[1], sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_2100B8FD4(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_2100B8FD4(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE4244C(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20FE13EEC(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24CA08410;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20FE42548(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE42534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE42548(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE42B24(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20FE42C48((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20FE14780((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_2100DB048(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2101FF7D8(a1);
    sub_20FE42E5C(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20FE42C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2100C47AC((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20FE14780((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DB048(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  sub_20FE4470C(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20FE42E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE42E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE42E5C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE42F84(v3);
      break;
    case 1:
      sub_20FE431C4(v3);
      break;
    case 2:
      sub_20FE43414(v3);
      break;
    case 3:
      sub_20FE43668(v3);
      break;
    case 5:
      sub_20FE43900(v3);
      break;
    case 6:
      sub_20FE43B40(v3);
      break;
    case 7:
      sub_20FE43D90(v3);
      break;
    case 8:
      sub_20FE43FE4(v3);
      break;
    case 11:
      sub_20FE4427C(v3);
      break;
    case 12:
      sub_20FE444C4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE42F84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_2101FFBA8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE43160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE431C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20E867F44();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200D0C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE433B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43414(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200E84(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE43604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43668(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2102039C8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE43884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200B2C(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE43ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43B40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200C1C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE43D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43D90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200DC8(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE43F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE43FE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_21020368C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE44200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4427C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201290(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE44460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE444C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201398(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE446A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4470C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE44834(v3);
      break;
    case 1:
      sub_20FE44A74(v3);
      break;
    case 2:
      sub_20FE44CC4(v3);
      break;
    case 3:
      sub_20FE44F18(v3);
      break;
    case 5:
      sub_20FE451B0(v3);
      break;
    case 6:
      sub_20FE453F0(v3);
      break;
    case 7:
      sub_20FE45640(v3);
      break;
    case 8:
      sub_20FE45894(v3);
      break;
    case 11:
      sub_20FE45B2C(v3);
      break;
    case 12:
      sub_20FE45D74(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE44834(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_2101FFBA8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE44A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE44A74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20E867F44();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200D0C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE44C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE44CC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200E84(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE44EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE44F18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2102039C8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE45134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE451B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200B2C(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE4538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE453F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200C1C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE455DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE45640(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FFA90(v4);
      ++v4[14];
      sub_210200DC8(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE45830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE45894(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FFA90(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_21020368C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE45AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE45B2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201290(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE45D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE45D74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FFA90(v5);
      ++v5[14];
      sub_210201398(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE45F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE45FBC(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_20FE460B0((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20E9ED7B4(a2[6], v10);
    *a3 = v10[0];
    sub_20E9EDE6C(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24CA08410;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_20FE46244(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20FE460B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C47AC((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9ED7B4(a2[6], &__p);
  v16 = __p;
  sub_20E9EDE6C(a2[6], &v17);
  v22 = xmmword_24CA08410;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE475CC(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE46214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE46230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE46244(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE462EC(a2);
      break;
    case 1:
      sub_20FE464C0(a2);
      break;
    case 2:
      sub_20FE466A4(a2);
      break;
    case 3:
      sub_20FE4688C(a2);
      break;
    case 5:
      sub_20FE46A74(a2);
      break;
    case 6:
      sub_20FE46C48(a2);
      break;
    case 7:
      sub_20FE46E2C(a2);
      break;
    case 8:
      sub_20FE47014(a2);
      break;
    case 11:
      sub_20FE471FC(a2);
      break;
    case 12:
      sub_20FE473E4(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE462EC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE46460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE464C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE46644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE466A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4682C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4688C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE46A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE46A74(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE46BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE46C48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE46DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE46E2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE46FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47014(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4719C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE471FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE47384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE473E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4756C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE475CC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE47674(a2);
      break;
    case 1:
      sub_20FE47848(a2);
      break;
    case 2:
      sub_20FE47A2C(a2);
      break;
    case 3:
      sub_20FE47C14(a2);
      break;
    case 5:
      sub_20FE47DFC(a2);
      break;
    case 6:
      sub_20FE47FD0(a2);
      break;
    case 7:
      sub_20FE481B4(a2);
      break;
    case 8:
      sub_20FE4839C(a2);
      break;
    case 11:
      sub_20FE48584(a2);
      break;
    case 12:
      sub_20FE4876C(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE47674(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE477E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47848(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE479CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47A2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE47BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47C14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE47D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47DFC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE47F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE47FD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE48154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE481B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4839C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE48524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE48584(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4870C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4876C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE488F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE48954(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20FE48A78((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20FE15D30((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_2100DA8B0(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2101FF2E8(a1);
    sub_20FE48C8C(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20FE48A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2100C47AC((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20FE15D30((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_2100DA8B0(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  sub_20FE4A53C(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20FE48C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE48C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE48C8C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE48DB4(v3);
      break;
    case 1:
      sub_20FE48FF4(v3);
      break;
    case 2:
      sub_20FE49244(v3);
      break;
    case 3:
      sub_20FE49498(v3);
      break;
    case 5:
      sub_20FE49730(v3);
      break;
    case 6:
      sub_20FE49970(v3);
      break;
    case 7:
      sub_20FE49BC0(v3);
      break;
    case 8:
      sub_20FE49E14(v3);
      break;
    case 11:
      sub_20FE4A0AC(v3);
      break;
    case 12:
      sub_20FE4A2F4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE48DB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FF6B8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE48F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE48FF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20E867F44();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFF00(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE491E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49244(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_210200078(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE49434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49498(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201FF0(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE496B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49730(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFD20(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE4990C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49970(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFE10(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE49B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49BC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFFBC(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE49DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE49E14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201934(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE4A030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4A0AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102004AC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4A290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4A2F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102005DC(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4A53C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE4A664(v3);
      break;
    case 1:
      sub_20FE4A8A4(v3);
      break;
    case 2:
      sub_20FE4AAF4(v3);
      break;
    case 3:
      sub_20FE4AD48(v3);
      break;
    case 5:
      sub_20FE4AFE0(v3);
      break;
    case 6:
      sub_20FE4B220(v3);
      break;
    case 7:
      sub_20FE4B470(v3);
      break;
    case 8:
      sub_20FE4B6C4(v3);
      break;
    case 11:
      sub_20FE4B95C(v3);
      break;
    case 12:
      sub_20FE4BBA4(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE4A664(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FF6B8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE4A840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4A8A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20E867F44();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFF00(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE4AA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4AAF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_210200078(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE4ACE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4AD48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201FF0(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE4AF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4AFE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFD20(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20FE4B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4B220(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFE10(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE4B40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4B470(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2101FF5A0(v4);
      ++v4[14];
      sub_2101FFFBC(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20FE4B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4B6C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2101FF5A0(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_210201934(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20FE4B8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4B95C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102004AC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4BB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4BBA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2101FF5A0(v5);
      ++v5[14];
      sub_2102005DC(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4BD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4BDEC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_20FE4BF58((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20E9E7AC8(a2, &__p);
    *a3 = __p;
    sub_20E9E88B4(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24CA08410;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_20FE4C0EC(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_20FE4BF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C47AC((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20E9E7AC8(a2, &__p);
  v16 = __p;
  sub_20E9E88B4(a2, &v17);
  v22 = xmmword_24CA08410;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE4D44C(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE4C0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4C0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE4C0EC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE4C194(a2);
      break;
    case 1:
      sub_20FE4C364(a2);
      break;
    case 2:
      sub_20FE4C544(a2);
      break;
    case 3:
      sub_20FE4C728(a2);
      break;
    case 5:
      sub_20FE4C90C(a2);
      break;
    case 6:
      sub_20FE4CADC(a2);
      break;
    case 7:
      sub_20FE4CCBC(a2);
      break;
    case 8:
      sub_20FE4CEA0(a2);
      break;
    case 11:
      sub_20FE4D084(a2);
      break;
    case 12:
      sub_20FE4D268(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE4C194(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4C304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4C364(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4C4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4C544(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4C6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4C728(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4C8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4C90C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4CA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4CADC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4CC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4CCBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4CE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4CEA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4D024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4D084(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4D208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4D268(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4D3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4D44C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE4D4F4(a2);
      break;
    case 1:
      sub_20FE4D6C4(a2);
      break;
    case 2:
      sub_20FE4D8A4(a2);
      break;
    case 3:
      sub_20FE4DA88(a2);
      break;
    case 5:
      sub_20FE4DC6C(a2);
      break;
    case 6:
      sub_20FE4DE3C(a2);
      break;
    case 7:
      sub_20FE4E01C(a2);
      break;
    case 8:
      sub_20FE4E200(a2);
      break;
    case 11:
      sub_20FE4E3E4(a2);
      break;
    case 12:
      sub_20FE4E5C8(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE4D4F4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4D664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4D6C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4D844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4D8A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4DA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4DA88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4DC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4DC6C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE4DDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4DE3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4DFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4E01C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4E200(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4E384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4E3E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4E568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4E5C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4E7AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE4E8A0((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE4EA00(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE4E88C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE4E8A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C47AC((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_20FE50208(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE4E9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE4E9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4EA00(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08410;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FE4EB00(v5, v10);
}

void sub_20FE4EAD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE4EAEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE4EB00(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE4EBA8(a2);
      break;
    case 1:
      sub_20FE4EDDC(a2);
      break;
    case 2:
      sub_20FE4F018(a2);
      break;
    case 3:
      sub_20FE4F258(a2);
      break;
    case 5:
      sub_20FE4F498(a2);
      break;
    case 6:
      sub_20FE4F6CC(a2);
      break;
    case 7:
      sub_20FE4F908(a2);
      break;
    case 8:
      sub_20FE4FB48(a2);
      break;
    case 11:
      sub_20FE4FD88(a2);
      break;
    case 12:
      sub_20FE4FFC8(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE4EBA8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4ED6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4EDDC(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20E867F44();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2134(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4EFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4F018(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20E867F44();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C247C(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4F1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4F258(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C27C4(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4F428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4F498(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4F6CC(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20FDFA718();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1F90(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4F898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4F908(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C22D8(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4FAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4FB48(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2620(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4FD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4FD88(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20E867F44();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE4FF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE4FFC8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20E867F44();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE50198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE50208(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08410;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FE50308(v5, v10);
}

void sub_20FE502E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE502F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE50308(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE503B0(a2);
      break;
    case 1:
      sub_20FE505E4(a2);
      break;
    case 2:
      sub_20FE50820(a2);
      break;
    case 3:
      sub_20FE50A60(a2);
      break;
    case 5:
      sub_20FE50CA0(a2);
      break;
    case 6:
      sub_20FE50ED4(a2);
      break;
    case 7:
      sub_20FE51110(a2);
      break;
    case 8:
      sub_20FE51350(a2);
      break;
    case 11:
      sub_20FE51590(a2);
      break;
    case 12:
      sub_20FE517D0(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE503B0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE50574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE505E4(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20E867F44();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2134(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE507B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE50820(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20E867F44();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C247C(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE509F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE50A60(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C27C4(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE50C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE50CA0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE50E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE50ED4(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20FDFA718();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1F90(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE510A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE51110(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C22D8(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE512E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE51350(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2620(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE51520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE51590(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20E867F44();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE51760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE517D0(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20E867F44();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE519A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE51A10(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_20FE52010((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_20FE180CC(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24CA08410;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_20FE521A8(v6, v7);
    }
  }
  else
  {
    sub_20FE51B0C(a1, a2, a3, v7[0]);
  }
}

void sub_20FE51B0C(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_20FE51C60();
      sub_20E9F5C70((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE52010((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_20FE180CC(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24CA08410;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_20FE521A8(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE51C60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56318);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56318))
    return &xmmword_254A56300;
  v2 = sub_20FE51D3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56300, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56310 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56300 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56300, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56318);
  return &xmmword_254A56300;
}

void sub_20FE51D24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56318);
  _Unwind_Resume(a1);
}

std::string *sub_20FE51D3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56338);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56338))
    return &stru_254A56320;
  sub_20FE51E2C((uint64_t)__p);
  sub_20F4484C8((char *)__p, &stru_254A56320);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56320, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56338);
  return &stru_254A56320;
}

void sub_20FE51DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56338);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56338);
  _Unwind_Resume(a1);
}

void sub_20FE51E2C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56358);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56358))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<3>]", qword_254A56340);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56340, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56358);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56378);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56378))
  {
    v5 = sub_20E8A2354(qword_254A56340, "<", 0);
    sub_20E89FC08(qword_254A56340, 0, v5, qword_254A56360);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56360, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56378);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56398);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56398))
  {
    sub_21023CD84((uint64_t)qword_254A56360, (uint64_t)&xmmword_254A56380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56380, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56398);
  }
  if (byte_254A56397 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56380, *((unint64_t *)&xmmword_254A56380 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56380;
    *(_QWORD *)(a1 + 16) = unk_254A56390;
  }
}

void sub_20FE51FC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56398);
  _Unwind_Resume(a1);
}

void sub_20FE51FE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56378);
  _Unwind_Resume(a1);
}

void sub_20FE51FF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56358);
  _Unwind_Resume(a1);
}

void sub_20FE52010(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2100C47AC((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_20FE180CC(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24CA08410;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20FE53480(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE52178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE52194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE521A8(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE52250(a2);
      break;
    case 1:
      sub_20FE5240C(a2);
      break;
    case 2:
      sub_20FE525E0(a2);
      break;
    case 3:
      sub_20FE527B8(a2);
      break;
    case 5:
      sub_20FE52990(a2);
      break;
    case 6:
      sub_20FE52B4C(a2);
      break;
    case 7:
      sub_20FE52D20(a2);
      break;
    case 8:
      sub_20FE52EF8(a2);
      break;
    case 11:
      sub_20FE530D0(a2);
      break;
    case 12:
      sub_20FE532A8(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE52250(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE523AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE5240C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE52580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE525E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE52758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE527B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE52930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE52990(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE52AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE52B4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE52CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE52D20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

